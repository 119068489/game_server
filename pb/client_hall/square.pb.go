// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: square.proto

package client_hall

import (
	fmt "fmt"
	share_message "game_server/pb/share_message"
	proto "github.com/akqp2019/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AllInfo struct {
	SquareInfo            []*share_message.DynamicData `protobuf:"bytes,1,rep,name=SquareInfo" json:"SquareInfo,omitempty" bson:"SquareInfo,omitempty"`
	FirstAddSquareDynamic *bool                        `protobuf:"varint,2,opt,name=FirstAddSquareDynamic" json:"FirstAddSquareDynamic,omitempty" bson:"FirstAddSquareDynamic,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                     `json:"-" bson:"-"`
	XXX_unrecognized      []byte                       `json:"-" bson:"-"`
	XXX_sizecache         int32                        `json:"-" bson:"-"`
}

func (m *AllInfo) Reset()         { *m = AllInfo{} }
func (m *AllInfo) String() string { return proto.CompactTextString(m) }
func (*AllInfo) ProtoMessage()    {}
func (*AllInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{0}
}
func (m *AllInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllInfo.Merge(m, src)
}
func (m *AllInfo) XXX_Size() int {
	return m.Size()
}
func (m *AllInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AllInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AllInfo proto.InternalMessageInfo

func (m *AllInfo) GetSquareInfo() []*share_message.DynamicData {
	if m != nil {
		return m.SquareInfo
	}
	return nil
}

func (m *AllInfo) GetFirstAddSquareDynamic() bool {
	if m != nil && m.FirstAddSquareDynamic != nil {
		return *m.FirstAddSquareDynamic
	}
	return false
}

type NewVersionAllInfo struct {
	SquareInfo            *share_message.DynamicDataListPage `protobuf:"bytes,1,opt,name=SquareInfo" json:"SquareInfo,omitempty" bson:"SquareInfo,omitempty"`
	FirstAddSquareDynamic *bool                              `protobuf:"varint,2,opt,name=FirstAddSquareDynamic" json:"FirstAddSquareDynamic,omitempty" bson:"FirstAddSquareDynamic,omitempty"`
	Type                  *int32                             `protobuf:"varint,3,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                           `json:"-" bson:"-"`
	XXX_unrecognized      []byte                             `json:"-" bson:"-"`
	XXX_sizecache         int32                              `json:"-" bson:"-"`
}

func (m *NewVersionAllInfo) Reset()         { *m = NewVersionAllInfo{} }
func (m *NewVersionAllInfo) String() string { return proto.CompactTextString(m) }
func (*NewVersionAllInfo) ProtoMessage()    {}
func (*NewVersionAllInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{1}
}
func (m *NewVersionAllInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewVersionAllInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewVersionAllInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewVersionAllInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewVersionAllInfo.Merge(m, src)
}
func (m *NewVersionAllInfo) XXX_Size() int {
	return m.Size()
}
func (m *NewVersionAllInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NewVersionAllInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NewVersionAllInfo proto.InternalMessageInfo

func (m *NewVersionAllInfo) GetSquareInfo() *share_message.DynamicDataListPage {
	if m != nil {
		return m.SquareInfo
	}
	return nil
}

func (m *NewVersionAllInfo) GetFirstAddSquareDynamic() bool {
	if m != nil && m.FirstAddSquareDynamic != nil {
		return *m.FirstAddSquareDynamic
	}
	return false
}

func (m *NewVersionAllInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

type FlushInfo struct {
	LogId                *int64   `protobuf:"varint,1,opt,name=LogId" json:"LogId,omitempty" bson:"LogId,omitempty"`
	Type                 *int32   `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	FlushType            *int32   `protobuf:"varint,3,opt,name=FlushType" json:"FlushType,omitempty" bson:"FlushType,omitempty"`
	AdvId                *int64   `protobuf:"varint,4,opt,name=AdvId" json:"AdvId,omitempty" bson:"AdvId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *FlushInfo) Reset()         { *m = FlushInfo{} }
func (m *FlushInfo) String() string { return proto.CompactTextString(m) }
func (*FlushInfo) ProtoMessage()    {}
func (*FlushInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{2}
}
func (m *FlushInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlushInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlushInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlushInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlushInfo.Merge(m, src)
}
func (m *FlushInfo) XXX_Size() int {
	return m.Size()
}
func (m *FlushInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FlushInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FlushInfo proto.InternalMessageInfo

func (m *FlushInfo) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *FlushInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *FlushInfo) GetFlushType() int32 {
	if m != nil && m.FlushType != nil {
		return *m.FlushType
	}
	return 0
}

func (m *FlushInfo) GetAdvId() int64 {
	if m != nil && m.AdvId != nil {
		return *m.AdvId
	}
	return 0
}

type MessageMainInfo struct {
	CommentData          []*share_message.CommentData `protobuf:"bytes,1,rep,name=CommentData" json:"CommentData,omitempty" bson:"CommentData,omitempty"`
	DynamicData          []*share_message.DynamicData `protobuf:"bytes,2,rep,name=DynamicData" json:"DynamicData,omitempty" bson:"DynamicData,omitempty"`
	UnreadComment        *int32                       `protobuf:"varint,3,opt,name=UnreadComment" json:"UnreadComment,omitempty" bson:"UnreadComment,omitempty"`
	UnreadZan            *int32                       `protobuf:"varint,4,opt,name=UnreadZan" json:"UnreadZan,omitempty" bson:"UnreadZan,omitempty"`
	UnreadAttention      *int32                       `protobuf:"varint,5,opt,name=UnreadAttention" json:"UnreadAttention,omitempty" bson:"UnreadAttention,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-" bson:"-"`
	XXX_unrecognized     []byte                       `json:"-" bson:"-"`
	XXX_sizecache        int32                        `json:"-" bson:"-"`
}

func (m *MessageMainInfo) Reset()         { *m = MessageMainInfo{} }
func (m *MessageMainInfo) String() string { return proto.CompactTextString(m) }
func (*MessageMainInfo) ProtoMessage()    {}
func (*MessageMainInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{3}
}
func (m *MessageMainInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageMainInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageMainInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageMainInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageMainInfo.Merge(m, src)
}
func (m *MessageMainInfo) XXX_Size() int {
	return m.Size()
}
func (m *MessageMainInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageMainInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MessageMainInfo proto.InternalMessageInfo

func (m *MessageMainInfo) GetCommentData() []*share_message.CommentData {
	if m != nil {
		return m.CommentData
	}
	return nil
}

func (m *MessageMainInfo) GetDynamicData() []*share_message.DynamicData {
	if m != nil {
		return m.DynamicData
	}
	return nil
}

func (m *MessageMainInfo) GetUnreadComment() int32 {
	if m != nil && m.UnreadComment != nil {
		return *m.UnreadComment
	}
	return 0
}

func (m *MessageMainInfo) GetUnreadZan() int32 {
	if m != nil && m.UnreadZan != nil {
		return *m.UnreadZan
	}
	return 0
}

func (m *MessageMainInfo) GetUnreadAttention() int32 {
	if m != nil && m.UnreadAttention != nil {
		return *m.UnreadAttention
	}
	return 0
}

type ZanList struct {
	ZanData              []*share_message.ZanData     `protobuf:"bytes,1,rep,name=ZanData" json:"ZanData,omitempty" bson:"ZanData,omitempty"`
	DynamicData          []*share_message.DynamicData `protobuf:"bytes,2,rep,name=DynamicData" json:"DynamicData,omitempty" bson:"DynamicData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-" bson:"-"`
	XXX_unrecognized     []byte                       `json:"-" bson:"-"`
	XXX_sizecache        int32                        `json:"-" bson:"-"`
}

func (m *ZanList) Reset()         { *m = ZanList{} }
func (m *ZanList) String() string { return proto.CompactTextString(m) }
func (*ZanList) ProtoMessage()    {}
func (*ZanList) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{4}
}
func (m *ZanList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZanList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZanList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZanList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZanList.Merge(m, src)
}
func (m *ZanList) XXX_Size() int {
	return m.Size()
}
func (m *ZanList) XXX_DiscardUnknown() {
	xxx_messageInfo_ZanList.DiscardUnknown(m)
}

var xxx_messageInfo_ZanList proto.InternalMessageInfo

func (m *ZanList) GetZanData() []*share_message.ZanData {
	if m != nil {
		return m.ZanData
	}
	return nil
}

func (m *ZanList) GetDynamicData() []*share_message.DynamicData {
	if m != nil {
		return m.DynamicData
	}
	return nil
}

type AttentionList struct {
	AttentionData        []*share_message.AttentionData `protobuf:"bytes,1,rep,name=AttentionData" json:"AttentionData,omitempty" bson:"AttentionData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-" bson:"-"`
	XXX_unrecognized     []byte                         `json:"-" bson:"-"`
	XXX_sizecache        int32                          `json:"-" bson:"-"`
}

func (m *AttentionList) Reset()         { *m = AttentionList{} }
func (m *AttentionList) String() string { return proto.CompactTextString(m) }
func (*AttentionList) ProtoMessage()    {}
func (*AttentionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{5}
}
func (m *AttentionList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttentionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttentionList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttentionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttentionList.Merge(m, src)
}
func (m *AttentionList) XXX_Size() int {
	return m.Size()
}
func (m *AttentionList) XXX_DiscardUnknown() {
	xxx_messageInfo_AttentionList.DiscardUnknown(m)
}

var xxx_messageInfo_AttentionList proto.InternalMessageInfo

func (m *AttentionList) GetAttentionData() []*share_message.AttentionData {
	if m != nil {
		return m.AttentionData
	}
	return nil
}

type UnReadInfo struct {
	Type                 *int32   `protobuf:"varint,1,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *UnReadInfo) Reset()         { *m = UnReadInfo{} }
func (m *UnReadInfo) String() string { return proto.CompactTextString(m) }
func (*UnReadInfo) ProtoMessage()    {}
func (*UnReadInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{6}
}
func (m *UnReadInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnReadInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnReadInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnReadInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnReadInfo.Merge(m, src)
}
func (m *UnReadInfo) XXX_Size() int {
	return m.Size()
}
func (m *UnReadInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UnReadInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UnReadInfo proto.InternalMessageInfo

func (m *UnReadInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

type NewUnReadMessageRespForApi struct {
	UnreadComment        *int32   `protobuf:"varint,1,opt,name=UnreadComment" json:"UnreadComment,omitempty" bson:"UnreadComment,omitempty"`
	UnreadZan            *int32   `protobuf:"varint,2,opt,name=UnreadZan" json:"UnreadZan,omitempty" bson:"UnreadZan,omitempty"`
	UnreadAttention      *int32   `protobuf:"varint,3,opt,name=UnreadAttention" json:"UnreadAttention,omitempty" bson:"UnreadAttention,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *NewUnReadMessageRespForApi) Reset()         { *m = NewUnReadMessageRespForApi{} }
func (m *NewUnReadMessageRespForApi) String() string { return proto.CompactTextString(m) }
func (*NewUnReadMessageRespForApi) ProtoMessage()    {}
func (*NewUnReadMessageRespForApi) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{7}
}
func (m *NewUnReadMessageRespForApi) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewUnReadMessageRespForApi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewUnReadMessageRespForApi.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewUnReadMessageRespForApi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewUnReadMessageRespForApi.Merge(m, src)
}
func (m *NewUnReadMessageRespForApi) XXX_Size() int {
	return m.Size()
}
func (m *NewUnReadMessageRespForApi) XXX_DiscardUnknown() {
	xxx_messageInfo_NewUnReadMessageRespForApi.DiscardUnknown(m)
}

var xxx_messageInfo_NewUnReadMessageRespForApi proto.InternalMessageInfo

func (m *NewUnReadMessageRespForApi) GetUnreadComment() int32 {
	if m != nil && m.UnreadComment != nil {
		return *m.UnreadComment
	}
	return 0
}

func (m *NewUnReadMessageRespForApi) GetUnreadZan() int32 {
	if m != nil && m.UnreadZan != nil {
		return *m.UnreadZan
	}
	return 0
}

func (m *NewUnReadMessageRespForApi) GetUnreadAttention() int32 {
	if m != nil && m.UnreadAttention != nil {
		return *m.UnreadAttention
	}
	return 0
}

type DynamicTopReq struct {
	Coin                 *int64   `protobuf:"varint,1,opt,name=Coin" json:"Coin,omitempty" bson:"Coin,omitempty"`
	LogId                *int64   `protobuf:"varint,2,opt,name=LogId" json:"LogId,omitempty" bson:"LogId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DynamicTopReq) Reset()         { *m = DynamicTopReq{} }
func (m *DynamicTopReq) String() string { return proto.CompactTextString(m) }
func (*DynamicTopReq) ProtoMessage()    {}
func (*DynamicTopReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{8}
}
func (m *DynamicTopReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynamicTopReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynamicTopReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynamicTopReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynamicTopReq.Merge(m, src)
}
func (m *DynamicTopReq) XXX_Size() int {
	return m.Size()
}
func (m *DynamicTopReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DynamicTopReq.DiscardUnknown(m)
}

var xxx_messageInfo_DynamicTopReq proto.InternalMessageInfo

func (m *DynamicTopReq) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *DynamicTopReq) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

// 用户首次浏览社交广场，触发条件后弹出发布动态互动提示弹窗
type FirstLoginSquareReply struct {
	ZanCount             *int64   `protobuf:"varint,1,opt,name=ZanCount" json:"ZanCount,omitempty" bson:"ZanCount,omitempty"`
	CommentCount         *int64   `protobuf:"varint,2,opt,name=CommentCount" json:"CommentCount,omitempty" bson:"CommentCount,omitempty"`
	IsBrowse2Square      *bool    `protobuf:"varint,3,opt,name=IsBrowse2Square" json:"IsBrowse2Square,omitempty" bson:"IsBrowse2Square,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *FirstLoginSquareReply) Reset()         { *m = FirstLoginSquareReply{} }
func (m *FirstLoginSquareReply) String() string { return proto.CompactTextString(m) }
func (*FirstLoginSquareReply) ProtoMessage()    {}
func (*FirstLoginSquareReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{9}
}
func (m *FirstLoginSquareReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FirstLoginSquareReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FirstLoginSquareReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FirstLoginSquareReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirstLoginSquareReply.Merge(m, src)
}
func (m *FirstLoginSquareReply) XXX_Size() int {
	return m.Size()
}
func (m *FirstLoginSquareReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FirstLoginSquareReply.DiscardUnknown(m)
}

var xxx_messageInfo_FirstLoginSquareReply proto.InternalMessageInfo

func (m *FirstLoginSquareReply) GetZanCount() int64 {
	if m != nil && m.ZanCount != nil {
		return *m.ZanCount
	}
	return 0
}

func (m *FirstLoginSquareReply) GetCommentCount() int64 {
	if m != nil && m.CommentCount != nil {
		return *m.CommentCount
	}
	return 0
}

func (m *FirstLoginSquareReply) GetIsBrowse2Square() bool {
	if m != nil && m.IsBrowse2Square != nil {
		return *m.IsBrowse2Square
	}
	return false
}

// 用户首次浏览社交广场，触发条件后弹出发布动态互动提示弹窗
type FirstLoginSquareReq struct {
	IsBrowse2Square      *bool    `protobuf:"varint,1,opt,name=IsBrowse2Square" json:"IsBrowse2Square,omitempty" bson:"IsBrowse2Square,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *FirstLoginSquareReq) Reset()         { *m = FirstLoginSquareReq{} }
func (m *FirstLoginSquareReq) String() string { return proto.CompactTextString(m) }
func (*FirstLoginSquareReq) ProtoMessage()    {}
func (*FirstLoginSquareReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{10}
}
func (m *FirstLoginSquareReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FirstLoginSquareReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FirstLoginSquareReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FirstLoginSquareReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirstLoginSquareReq.Merge(m, src)
}
func (m *FirstLoginSquareReq) XXX_Size() int {
	return m.Size()
}
func (m *FirstLoginSquareReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FirstLoginSquareReq.DiscardUnknown(m)
}

var xxx_messageInfo_FirstLoginSquareReq proto.InternalMessageInfo

func (m *FirstLoginSquareReq) GetIsBrowse2Square() bool {
	if m != nil && m.IsBrowse2Square != nil {
		return *m.IsBrowse2Square
	}
	return false
}

type AdvDetailReply struct {
	AdvSetting           *share_message.AdvSetting `protobuf:"bytes,1,opt,name=AdvSetting" json:"AdvSetting,omitempty" bson:"AdvSetting,omitempty"`
	DataType             *int32                    `protobuf:"varint,2,opt,name=DataType" json:"DataType,omitempty" bson:"DataType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-" bson:"-"`
	XXX_unrecognized     []byte                    `json:"-" bson:"-"`
	XXX_sizecache        int32                     `json:"-" bson:"-"`
}

func (m *AdvDetailReply) Reset()         { *m = AdvDetailReply{} }
func (m *AdvDetailReply) String() string { return proto.CompactTextString(m) }
func (*AdvDetailReply) ProtoMessage()    {}
func (*AdvDetailReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{11}
}
func (m *AdvDetailReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdvDetailReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdvDetailReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdvDetailReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvDetailReply.Merge(m, src)
}
func (m *AdvDetailReply) XXX_Size() int {
	return m.Size()
}
func (m *AdvDetailReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvDetailReply.DiscardUnknown(m)
}

var xxx_messageInfo_AdvDetailReply proto.InternalMessageInfo

func (m *AdvDetailReply) GetAdvSetting() *share_message.AdvSetting {
	if m != nil {
		return m.AdvSetting
	}
	return nil
}

func (m *AdvDetailReply) GetDataType() int32 {
	if m != nil && m.DataType != nil {
		return *m.DataType
	}
	return 0
}

//=============话题============
// 单个话题类型
type OneTopicType struct {
	TopicType            *share_message.TopicType `protobuf:"bytes,1,opt,name=TopicType" json:"TopicType,omitempty" bson:"TopicType,omitempty"`
	TopicList            []*share_message.Topic   `protobuf:"bytes,2,rep,name=TopicList" json:"TopicList,omitempty" bson:"TopicList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-" bson:"-"`
	XXX_unrecognized     []byte                   `json:"-" bson:"-"`
	XXX_sizecache        int32                    `json:"-" bson:"-"`
}

func (m *OneTopicType) Reset()         { *m = OneTopicType{} }
func (m *OneTopicType) String() string { return proto.CompactTextString(m) }
func (*OneTopicType) ProtoMessage()    {}
func (*OneTopicType) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{12}
}
func (m *OneTopicType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OneTopicType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OneTopicType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OneTopicType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OneTopicType.Merge(m, src)
}
func (m *OneTopicType) XXX_Size() int {
	return m.Size()
}
func (m *OneTopicType) XXX_DiscardUnknown() {
	xxx_messageInfo_OneTopicType.DiscardUnknown(m)
}

var xxx_messageInfo_OneTopicType proto.InternalMessageInfo

func (m *OneTopicType) GetTopicType() *share_message.TopicType {
	if m != nil {
		return m.TopicType
	}
	return nil
}

func (m *OneTopicType) GetTopicList() []*share_message.Topic {
	if m != nil {
		return m.TopicList
	}
	return nil
}

// 话题列表
type AllTopic struct {
	TopicTypeList        []*OneTopicType `protobuf:"bytes,1,rep,name=TopicTypeList" json:"TopicTypeList,omitempty" bson:"TopicTypeList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-" bson:"-"`
	XXX_unrecognized     []byte          `json:"-" bson:"-"`
	XXX_sizecache        int32           `json:"-" bson:"-"`
}

func (m *AllTopic) Reset()         { *m = AllTopic{} }
func (m *AllTopic) String() string { return proto.CompactTextString(m) }
func (*AllTopic) ProtoMessage()    {}
func (*AllTopic) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{13}
}
func (m *AllTopic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllTopic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllTopic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllTopic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllTopic.Merge(m, src)
}
func (m *AllTopic) XXX_Size() int {
	return m.Size()
}
func (m *AllTopic) XXX_DiscardUnknown() {
	xxx_messageInfo_AllTopic.DiscardUnknown(m)
}

var xxx_messageInfo_AllTopic proto.InternalMessageInfo

func (m *AllTopic) GetTopicTypeList() []*OneTopicType {
	if m != nil {
		return m.TopicTypeList
	}
	return nil
}

// 话题类别列表(不展示用户自定义的)
type TopicTypeListResp struct {
	TopicTypeList        []*share_message.TopicType `protobuf:"bytes,1,rep,name=TopicTypeList" json:"TopicTypeList,omitempty" bson:"TopicTypeList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-" bson:"-"`
	XXX_unrecognized     []byte                     `json:"-" bson:"-"`
	XXX_sizecache        int32                      `json:"-" bson:"-"`
}

func (m *TopicTypeListResp) Reset()         { *m = TopicTypeListResp{} }
func (m *TopicTypeListResp) String() string { return proto.CompactTextString(m) }
func (*TopicTypeListResp) ProtoMessage()    {}
func (*TopicTypeListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{14}
}
func (m *TopicTypeListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicTypeListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicTypeListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicTypeListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicTypeListResp.Merge(m, src)
}
func (m *TopicTypeListResp) XXX_Size() int {
	return m.Size()
}
func (m *TopicTypeListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicTypeListResp.DiscardUnknown(m)
}

var xxx_messageInfo_TopicTypeListResp proto.InternalMessageInfo

func (m *TopicTypeListResp) GetTopicTypeList() []*share_message.TopicType {
	if m != nil {
		return m.TopicTypeList
	}
	return nil
}

// 根据话题类别查找话题
type TopicListReq struct {
	TopicTypeId          *int64   `protobuf:"varint,1,opt,name=TopicTypeId" json:"TopicTypeId,omitempty" bson:"TopicTypeId,omitempty"`
	Page                 *int64   `protobuf:"varint,2,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	PageSize             *int64   `protobuf:"varint,3,opt,name=PageSize" json:"PageSize,omitempty" bson:"PageSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TopicListReq) Reset()         { *m = TopicListReq{} }
func (m *TopicListReq) String() string { return proto.CompactTextString(m) }
func (*TopicListReq) ProtoMessage()    {}
func (*TopicListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{15}
}
func (m *TopicListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicListReq.Merge(m, src)
}
func (m *TopicListReq) XXX_Size() int {
	return m.Size()
}
func (m *TopicListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicListReq.DiscardUnknown(m)
}

var xxx_messageInfo_TopicListReq proto.InternalMessageInfo

func (m *TopicListReq) GetTopicTypeId() int64 {
	if m != nil && m.TopicTypeId != nil {
		return *m.TopicTypeId
	}
	return 0
}

func (m *TopicListReq) GetPage() int64 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *TopicListReq) GetPageSize() int64 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

type TopicListResp struct {
	TopicList            []*share_message.Topic `protobuf:"bytes,1,rep,name=TopicList" json:"TopicList,omitempty" bson:"TopicList,omitempty"`
	Count                *int64                 `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty" bson:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-" bson:"-"`
	XXX_unrecognized     []byte                 `json:"-" bson:"-"`
	XXX_sizecache        int32                  `json:"-" bson:"-"`
}

func (m *TopicListResp) Reset()         { *m = TopicListResp{} }
func (m *TopicListResp) String() string { return proto.CompactTextString(m) }
func (*TopicListResp) ProtoMessage()    {}
func (*TopicListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{16}
}
func (m *TopicListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicListResp.Merge(m, src)
}
func (m *TopicListResp) XXX_Size() int {
	return m.Size()
}
func (m *TopicListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicListResp.DiscardUnknown(m)
}

var xxx_messageInfo_TopicListResp proto.InternalMessageInfo

func (m *TopicListResp) GetTopicList() []*share_message.Topic {
	if m != nil {
		return m.TopicList
	}
	return nil
}

func (m *TopicListResp) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

// 话题主页头部详情请求
type TopicDetailReq struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TopicDetailReq) Reset()         { *m = TopicDetailReq{} }
func (m *TopicDetailReq) String() string { return proto.CompactTextString(m) }
func (*TopicDetailReq) ProtoMessage()    {}
func (*TopicDetailReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{17}
}
func (m *TopicDetailReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicDetailReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicDetailReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicDetailReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicDetailReq.Merge(m, src)
}
func (m *TopicDetailReq) XXX_Size() int {
	return m.Size()
}
func (m *TopicDetailReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicDetailReq.DiscardUnknown(m)
}

var xxx_messageInfo_TopicDetailReq proto.InternalMessageInfo

func (m *TopicDetailReq) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TopicDetailReq) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

// 话题主页头部详情
type TopicDetailResp struct {
	Topic                *share_message.Topic          `protobuf:"bytes,1,opt,name=Topic" json:"Topic,omitempty" bson:"Topic,omitempty"`
	RelatedTopics        []*share_message.Topic        `protobuf:"bytes,2,rep,name=RelatedTopics" json:"RelatedTopics,omitempty" bson:"RelatedTopics,omitempty"`
	TopicMasterInfo      *share_message.TeamPlayerInfo `protobuf:"bytes,3,opt,name=TopicMasterInfo" json:"TopicMasterInfo,omitempty" bson:"TopicMasterInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-" bson:"-"`
	XXX_unrecognized     []byte                        `json:"-" bson:"-"`
	XXX_sizecache        int32                         `json:"-" bson:"-"`
}

func (m *TopicDetailResp) Reset()         { *m = TopicDetailResp{} }
func (m *TopicDetailResp) String() string { return proto.CompactTextString(m) }
func (*TopicDetailResp) ProtoMessage()    {}
func (*TopicDetailResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{18}
}
func (m *TopicDetailResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicDetailResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicDetailResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicDetailResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicDetailResp.Merge(m, src)
}
func (m *TopicDetailResp) XXX_Size() int {
	return m.Size()
}
func (m *TopicDetailResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicDetailResp.DiscardUnknown(m)
}

var xxx_messageInfo_TopicDetailResp proto.InternalMessageInfo

func (m *TopicDetailResp) GetTopic() *share_message.Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *TopicDetailResp) GetRelatedTopics() []*share_message.Topic {
	if m != nil {
		return m.RelatedTopics
	}
	return nil
}

func (m *TopicDetailResp) GetTopicMasterInfo() *share_message.TeamPlayerInfo {
	if m != nil {
		return m.TopicMasterInfo
	}
	return nil
}

// 话题主页动态列表请求
type TopicMainPageListReq struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	ReqType              *int32   `protobuf:"varint,2,opt,name=ReqType" json:"ReqType,omitempty" bson:"ReqType,omitempty"`
	Page                 *int64   `protobuf:"varint,3,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	PageSize             *int64   `protobuf:"varint,4,opt,name=PageSize" json:"PageSize,omitempty" bson:"PageSize,omitempty"`
	Name                 *string  `protobuf:"bytes,5,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TopicMainPageListReq) Reset()         { *m = TopicMainPageListReq{} }
func (m *TopicMainPageListReq) String() string { return proto.CompactTextString(m) }
func (*TopicMainPageListReq) ProtoMessage()    {}
func (*TopicMainPageListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{19}
}
func (m *TopicMainPageListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicMainPageListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicMainPageListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicMainPageListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicMainPageListReq.Merge(m, src)
}
func (m *TopicMainPageListReq) XXX_Size() int {
	return m.Size()
}
func (m *TopicMainPageListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicMainPageListReq.DiscardUnknown(m)
}

var xxx_messageInfo_TopicMainPageListReq proto.InternalMessageInfo

func (m *TopicMainPageListReq) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TopicMainPageListReq) GetReqType() int32 {
	if m != nil && m.ReqType != nil {
		return *m.ReqType
	}
	return 0
}

func (m *TopicMainPageListReq) GetPage() int64 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *TopicMainPageListReq) GetPageSize() int64 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *TopicMainPageListReq) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

// 话题主页动态列表响应
type TopicMainPageListResp struct {
	DynamicList          []*share_message.DynamicData `protobuf:"bytes,1,rep,name=DynamicList" json:"DynamicList,omitempty" bson:"DynamicList,omitempty"`
	DynamicCount         *int64                       `protobuf:"varint,2,opt,name=DynamicCount" json:"DynamicCount,omitempty" bson:"DynamicCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-" bson:"-"`
	XXX_unrecognized     []byte                       `json:"-" bson:"-"`
	XXX_sizecache        int32                        `json:"-" bson:"-"`
}

func (m *TopicMainPageListResp) Reset()         { *m = TopicMainPageListResp{} }
func (m *TopicMainPageListResp) String() string { return proto.CompactTextString(m) }
func (*TopicMainPageListResp) ProtoMessage()    {}
func (*TopicMainPageListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{20}
}
func (m *TopicMainPageListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicMainPageListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicMainPageListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicMainPageListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicMainPageListResp.Merge(m, src)
}
func (m *TopicMainPageListResp) XXX_Size() int {
	return m.Size()
}
func (m *TopicMainPageListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicMainPageListResp.DiscardUnknown(m)
}

var xxx_messageInfo_TopicMainPageListResp proto.InternalMessageInfo

func (m *TopicMainPageListResp) GetDynamicList() []*share_message.DynamicData {
	if m != nil {
		return m.DynamicList
	}
	return nil
}

func (m *TopicMainPageListResp) GetDynamicCount() int64 {
	if m != nil && m.DynamicCount != nil {
		return *m.DynamicCount
	}
	return 0
}

// 某话题参与详情列表请求
type TopicParticipateListReq struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	Page                 *int64   `protobuf:"varint,2,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	PageSize             *int64   `protobuf:"varint,3,opt,name=PageSize" json:"PageSize,omitempty" bson:"PageSize,omitempty"`
	Name                 *string  `protobuf:"bytes,5,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TopicParticipateListReq) Reset()         { *m = TopicParticipateListReq{} }
func (m *TopicParticipateListReq) String() string { return proto.CompactTextString(m) }
func (*TopicParticipateListReq) ProtoMessage()    {}
func (*TopicParticipateListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{21}
}
func (m *TopicParticipateListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicParticipateListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicParticipateListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicParticipateListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicParticipateListReq.Merge(m, src)
}
func (m *TopicParticipateListReq) XXX_Size() int {
	return m.Size()
}
func (m *TopicParticipateListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicParticipateListReq.DiscardUnknown(m)
}

var xxx_messageInfo_TopicParticipateListReq proto.InternalMessageInfo

func (m *TopicParticipateListReq) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TopicParticipateListReq) GetPage() int64 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *TopicParticipateListReq) GetPageSize() int64 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *TopicParticipateListReq) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

// 某话题参与详情列表响应
type TopicParticipateListResp struct {
	PlayerList           []*share_message.TopicParticipatePlayer `protobuf:"bytes,1,rep,name=PlayerList" json:"PlayerList,omitempty" bson:"PlayerList,omitempty"`
	PlayerCount          *int64                                  `protobuf:"varint,2,opt,name=PlayerCount" json:"PlayerCount,omitempty" bson:"PlayerCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-" bson:"-"`
	XXX_unrecognized     []byte                                  `json:"-" bson:"-"`
	XXX_sizecache        int32                                   `json:"-" bson:"-"`
}

func (m *TopicParticipateListResp) Reset()         { *m = TopicParticipateListResp{} }
func (m *TopicParticipateListResp) String() string { return proto.CompactTextString(m) }
func (*TopicParticipateListResp) ProtoMessage()    {}
func (*TopicParticipateListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{22}
}
func (m *TopicParticipateListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicParticipateListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicParticipateListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicParticipateListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicParticipateListResp.Merge(m, src)
}
func (m *TopicParticipateListResp) XXX_Size() int {
	return m.Size()
}
func (m *TopicParticipateListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicParticipateListResp.DiscardUnknown(m)
}

var xxx_messageInfo_TopicParticipateListResp proto.InternalMessageInfo

func (m *TopicParticipateListResp) GetPlayerList() []*share_message.TopicParticipatePlayer {
	if m != nil {
		return m.PlayerList
	}
	return nil
}

func (m *TopicParticipateListResp) GetPlayerCount() int64 {
	if m != nil && m.PlayerCount != nil {
		return *m.PlayerCount
	}
	return 0
}

// 关注/取消关注话题
type AttentionTopicReq struct {
	Id                   []int64  `protobuf:"varint,1,rep,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	Operate              *int32   `protobuf:"varint,2,opt,name=Operate" json:"Operate,omitempty" bson:"Operate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *AttentionTopicReq) Reset()         { *m = AttentionTopicReq{} }
func (m *AttentionTopicReq) String() string { return proto.CompactTextString(m) }
func (*AttentionTopicReq) ProtoMessage()    {}
func (*AttentionTopicReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{23}
}
func (m *AttentionTopicReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttentionTopicReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttentionTopicReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttentionTopicReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttentionTopicReq.Merge(m, src)
}
func (m *AttentionTopicReq) XXX_Size() int {
	return m.Size()
}
func (m *AttentionTopicReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AttentionTopicReq.DiscardUnknown(m)
}

var xxx_messageInfo_AttentionTopicReq proto.InternalMessageInfo

func (m *AttentionTopicReq) GetId() []int64 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *AttentionTopicReq) GetOperate() int32 {
	if m != nil && m.Operate != nil {
		return *m.Operate
	}
	return 0
}

type MyAttentionTopicListReq struct {
	Page                 *int64   `protobuf:"varint,1,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	PageSize             *int64   `protobuf:"varint,2,opt,name=PageSize" json:"PageSize,omitempty" bson:"PageSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *MyAttentionTopicListReq) Reset()         { *m = MyAttentionTopicListReq{} }
func (m *MyAttentionTopicListReq) String() string { return proto.CompactTextString(m) }
func (*MyAttentionTopicListReq) ProtoMessage()    {}
func (*MyAttentionTopicListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{24}
}
func (m *MyAttentionTopicListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MyAttentionTopicListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MyAttentionTopicListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MyAttentionTopicListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MyAttentionTopicListReq.Merge(m, src)
}
func (m *MyAttentionTopicListReq) XXX_Size() int {
	return m.Size()
}
func (m *MyAttentionTopicListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MyAttentionTopicListReq.DiscardUnknown(m)
}

var xxx_messageInfo_MyAttentionTopicListReq proto.InternalMessageInfo

func (m *MyAttentionTopicListReq) GetPage() int64 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *MyAttentionTopicListReq) GetPageSize() int64 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

type MyAttentionTopicListResp struct {
	TopicList            []*share_message.Topic `protobuf:"bytes,1,rep,name=TopicList" json:"TopicList,omitempty" bson:"TopicList,omitempty"`
	Count                *int64                 `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty" bson:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-" bson:"-"`
	XXX_unrecognized     []byte                 `json:"-" bson:"-"`
	XXX_sizecache        int32                  `json:"-" bson:"-"`
}

func (m *MyAttentionTopicListResp) Reset()         { *m = MyAttentionTopicListResp{} }
func (m *MyAttentionTopicListResp) String() string { return proto.CompactTextString(m) }
func (*MyAttentionTopicListResp) ProtoMessage()    {}
func (*MyAttentionTopicListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{25}
}
func (m *MyAttentionTopicListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MyAttentionTopicListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MyAttentionTopicListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MyAttentionTopicListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MyAttentionTopicListResp.Merge(m, src)
}
func (m *MyAttentionTopicListResp) XXX_Size() int {
	return m.Size()
}
func (m *MyAttentionTopicListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MyAttentionTopicListResp.DiscardUnknown(m)
}

var xxx_messageInfo_MyAttentionTopicListResp proto.InternalMessageInfo

func (m *MyAttentionTopicListResp) GetTopicList() []*share_message.Topic {
	if m != nil {
		return m.TopicList
	}
	return nil
}

func (m *MyAttentionTopicListResp) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

// 模糊查询话题
type SearchTopicReq struct {
	Name                 *string  `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *SearchTopicReq) Reset()         { *m = SearchTopicReq{} }
func (m *SearchTopicReq) String() string { return proto.CompactTextString(m) }
func (*SearchTopicReq) ProtoMessage()    {}
func (*SearchTopicReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{26}
}
func (m *SearchTopicReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchTopicReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchTopicReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchTopicReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchTopicReq.Merge(m, src)
}
func (m *SearchTopicReq) XXX_Size() int {
	return m.Size()
}
func (m *SearchTopicReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchTopicReq.DiscardUnknown(m)
}

var xxx_messageInfo_SearchTopicReq proto.InternalMessageInfo

func (m *SearchTopicReq) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type SearchTopicResp struct {
	TopicList            []*share_message.Topic `protobuf:"bytes,1,rep,name=TopicList" json:"TopicList,omitempty" bson:"TopicList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-" bson:"-"`
	XXX_unrecognized     []byte                 `json:"-" bson:"-"`
	XXX_sizecache        int32                  `json:"-" bson:"-"`
}

func (m *SearchTopicResp) Reset()         { *m = SearchTopicResp{} }
func (m *SearchTopicResp) String() string { return proto.CompactTextString(m) }
func (*SearchTopicResp) ProtoMessage()    {}
func (*SearchTopicResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{27}
}
func (m *SearchTopicResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchTopicResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchTopicResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchTopicResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchTopicResp.Merge(m, src)
}
func (m *SearchTopicResp) XXX_Size() int {
	return m.Size()
}
func (m *SearchTopicResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchTopicResp.DiscardUnknown(m)
}

var xxx_messageInfo_SearchTopicResp proto.InternalMessageInfo

func (m *SearchTopicResp) GetTopicList() []*share_message.Topic {
	if m != nil {
		return m.TopicList
	}
	return nil
}

// 热门推荐,不包含自定义
type SearchHotTopicResp struct {
	TopicList            []*share_message.Topic `protobuf:"bytes,1,rep,name=TopicList" json:"TopicList,omitempty" bson:"TopicList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-" bson:"-"`
	XXX_unrecognized     []byte                 `json:"-" bson:"-"`
	XXX_sizecache        int32                  `json:"-" bson:"-"`
}

func (m *SearchHotTopicResp) Reset()         { *m = SearchHotTopicResp{} }
func (m *SearchHotTopicResp) String() string { return proto.CompactTextString(m) }
func (*SearchHotTopicResp) ProtoMessage()    {}
func (*SearchHotTopicResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{28}
}
func (m *SearchHotTopicResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchHotTopicResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchHotTopicResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchHotTopicResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchHotTopicResp.Merge(m, src)
}
func (m *SearchHotTopicResp) XXX_Size() int {
	return m.Size()
}
func (m *SearchHotTopicResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchHotTopicResp.DiscardUnknown(m)
}

var xxx_messageInfo_SearchHotTopicResp proto.InternalMessageInfo

func (m *SearchHotTopicResp) GetTopicList() []*share_message.Topic {
	if m != nil {
		return m.TopicList
	}
	return nil
}

// 话题,刷新话题
type FlushTopicReq struct {
	Page                 *int64   `protobuf:"varint,1,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	PageSize             *int64   `protobuf:"varint,2,opt,name=PageSize" json:"PageSize,omitempty" bson:"PageSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *FlushTopicReq) Reset()         { *m = FlushTopicReq{} }
func (m *FlushTopicReq) String() string { return proto.CompactTextString(m) }
func (*FlushTopicReq) ProtoMessage()    {}
func (*FlushTopicReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{29}
}
func (m *FlushTopicReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlushTopicReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlushTopicReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlushTopicReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlushTopicReq.Merge(m, src)
}
func (m *FlushTopicReq) XXX_Size() int {
	return m.Size()
}
func (m *FlushTopicReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FlushTopicReq.DiscardUnknown(m)
}

var xxx_messageInfo_FlushTopicReq proto.InternalMessageInfo

func (m *FlushTopicReq) GetPage() int64 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *FlushTopicReq) GetPageSize() int64 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

// 话题包含着呦动态列表.
type TopicDynamicList struct {
	Topic                  *share_message.Topic                    `protobuf:"bytes,1,opt,name=Topic" json:"Topic,omitempty" bson:"Topic,omitempty"`
	DynamicList            []*share_message.DynamicData            `protobuf:"bytes,2,rep,name=DynamicList" json:"DynamicList,omitempty" bson:"DynamicList,omitempty"`
	TopicParticipatePlayer []*share_message.TopicParticipatePlayer `protobuf:"bytes,3,rep,name=TopicParticipatePlayer" json:"TopicParticipatePlayer,omitempty" bson:"TopicParticipatePlayer,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                                `json:"-" bson:"-"`
	XXX_unrecognized       []byte                                  `json:"-" bson:"-"`
	XXX_sizecache          int32                                   `json:"-" bson:"-"`
}

func (m *TopicDynamicList) Reset()         { *m = TopicDynamicList{} }
func (m *TopicDynamicList) String() string { return proto.CompactTextString(m) }
func (*TopicDynamicList) ProtoMessage()    {}
func (*TopicDynamicList) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{30}
}
func (m *TopicDynamicList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicDynamicList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicDynamicList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicDynamicList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicDynamicList.Merge(m, src)
}
func (m *TopicDynamicList) XXX_Size() int {
	return m.Size()
}
func (m *TopicDynamicList) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicDynamicList.DiscardUnknown(m)
}

var xxx_messageInfo_TopicDynamicList proto.InternalMessageInfo

func (m *TopicDynamicList) GetTopic() *share_message.Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *TopicDynamicList) GetDynamicList() []*share_message.DynamicData {
	if m != nil {
		return m.DynamicList
	}
	return nil
}

func (m *TopicDynamicList) GetTopicParticipatePlayer() []*share_message.TopicParticipatePlayer {
	if m != nil {
		return m.TopicParticipatePlayer
	}
	return nil
}

type FlushTopicResp struct {
	TopicDynamicList     []*TopicDynamicList `protobuf:"bytes,1,rep,name=TopicDynamicList" json:"TopicDynamicList,omitempty" bson:"TopicDynamicList,omitempty"`
	Count                *int64              `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty" bson:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-" bson:"-"`
	XXX_unrecognized     []byte              `json:"-" bson:"-"`
	XXX_sizecache        int32               `json:"-" bson:"-"`
}

func (m *FlushTopicResp) Reset()         { *m = FlushTopicResp{} }
func (m *FlushTopicResp) String() string { return proto.CompactTextString(m) }
func (*FlushTopicResp) ProtoMessage()    {}
func (*FlushTopicResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{31}
}
func (m *FlushTopicResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlushTopicResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlushTopicResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlushTopicResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlushTopicResp.Merge(m, src)
}
func (m *FlushTopicResp) XXX_Size() int {
	return m.Size()
}
func (m *FlushTopicResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FlushTopicResp.DiscardUnknown(m)
}

var xxx_messageInfo_FlushTopicResp proto.InternalMessageInfo

func (m *FlushTopicResp) GetTopicDynamicList() []*TopicDynamicList {
	if m != nil {
		return m.TopicDynamicList
	}
	return nil
}

func (m *FlushTopicResp) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

// 热门话题列表(官方)
type HotTopicListReq struct {
	Page                 *int64   `protobuf:"varint,1,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	PageSize             *int64   `protobuf:"varint,2,opt,name=PageSize" json:"PageSize,omitempty" bson:"PageSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *HotTopicListReq) Reset()         { *m = HotTopicListReq{} }
func (m *HotTopicListReq) String() string { return proto.CompactTextString(m) }
func (*HotTopicListReq) ProtoMessage()    {}
func (*HotTopicListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{32}
}
func (m *HotTopicListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HotTopicListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HotTopicListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HotTopicListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HotTopicListReq.Merge(m, src)
}
func (m *HotTopicListReq) XXX_Size() int {
	return m.Size()
}
func (m *HotTopicListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HotTopicListReq.DiscardUnknown(m)
}

var xxx_messageInfo_HotTopicListReq proto.InternalMessageInfo

func (m *HotTopicListReq) GetPage() int64 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *HotTopicListReq) GetPageSize() int64 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

type HotTopicListResp struct {
	TopicList            []*share_message.Topic `protobuf:"bytes,1,rep,name=TopicList" json:"TopicList,omitempty" bson:"TopicList,omitempty"`
	Count                *int64                 `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty" bson:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-" bson:"-"`
	XXX_unrecognized     []byte                 `json:"-" bson:"-"`
	XXX_sizecache        int32                  `json:"-" bson:"-"`
}

func (m *HotTopicListResp) Reset()         { *m = HotTopicListResp{} }
func (m *HotTopicListResp) String() string { return proto.CompactTextString(m) }
func (*HotTopicListResp) ProtoMessage()    {}
func (*HotTopicListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{33}
}
func (m *HotTopicListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HotTopicListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HotTopicListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HotTopicListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HotTopicListResp.Merge(m, src)
}
func (m *HotTopicListResp) XXX_Size() int {
	return m.Size()
}
func (m *HotTopicListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_HotTopicListResp.DiscardUnknown(m)
}

var xxx_messageInfo_HotTopicListResp proto.InternalMessageInfo

func (m *HotTopicListResp) GetTopicList() []*share_message.Topic {
	if m != nil {
		return m.TopicList
	}
	return nil
}

func (m *HotTopicListResp) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

//关注页推荐用户
type AttentionRecommendPlayerResp struct {
	PlayerList           []*share_message.TopicParticipatePlayer `protobuf:"bytes,1,rep,name=PlayerList" json:"PlayerList,omitempty" bson:"PlayerList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-" bson:"-"`
	XXX_unrecognized     []byte                                  `json:"-" bson:"-"`
	XXX_sizecache        int32                                   `json:"-" bson:"-"`
}

func (m *AttentionRecommendPlayerResp) Reset()         { *m = AttentionRecommendPlayerResp{} }
func (m *AttentionRecommendPlayerResp) String() string { return proto.CompactTextString(m) }
func (*AttentionRecommendPlayerResp) ProtoMessage()    {}
func (*AttentionRecommendPlayerResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{34}
}
func (m *AttentionRecommendPlayerResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttentionRecommendPlayerResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttentionRecommendPlayerResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttentionRecommendPlayerResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttentionRecommendPlayerResp.Merge(m, src)
}
func (m *AttentionRecommendPlayerResp) XXX_Size() int {
	return m.Size()
}
func (m *AttentionRecommendPlayerResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AttentionRecommendPlayerResp.DiscardUnknown(m)
}

var xxx_messageInfo_AttentionRecommendPlayerResp proto.InternalMessageInfo

func (m *AttentionRecommendPlayerResp) GetPlayerList() []*share_message.TopicParticipatePlayer {
	if m != nil {
		return m.PlayerList
	}
	return nil
}

// 社交广场关注页的请求.
type SquareAttentionReq struct {
	Page                 *int64   `protobuf:"varint,1,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	PageSize             *int64   `protobuf:"varint,2,opt,name=PageSize" json:"PageSize,omitempty" bson:"PageSize,omitempty"`
	HasAttentionTopic    *bool    `protobuf:"varint,3,opt,name=HasAttentionTopic" json:"HasAttentionTopic,omitempty" bson:"HasAttentionTopic,omitempty"`
	HasAttentionPlayer   *bool    `protobuf:"varint,4,opt,name=HasAttentionPlayer" json:"HasAttentionPlayer,omitempty" bson:"HasAttentionPlayer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *SquareAttentionReq) Reset()         { *m = SquareAttentionReq{} }
func (m *SquareAttentionReq) String() string { return proto.CompactTextString(m) }
func (*SquareAttentionReq) ProtoMessage()    {}
func (*SquareAttentionReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{35}
}
func (m *SquareAttentionReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SquareAttentionReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SquareAttentionReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SquareAttentionReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SquareAttentionReq.Merge(m, src)
}
func (m *SquareAttentionReq) XXX_Size() int {
	return m.Size()
}
func (m *SquareAttentionReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SquareAttentionReq.DiscardUnknown(m)
}

var xxx_messageInfo_SquareAttentionReq proto.InternalMessageInfo

func (m *SquareAttentionReq) GetPage() int64 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *SquareAttentionReq) GetPageSize() int64 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *SquareAttentionReq) GetHasAttentionTopic() bool {
	if m != nil && m.HasAttentionTopic != nil {
		return *m.HasAttentionTopic
	}
	return false
}

func (m *SquareAttentionReq) GetHasAttentionPlayer() bool {
	if m != nil && m.HasAttentionPlayer != nil {
		return *m.HasAttentionPlayer
	}
	return false
}

type SquareAttentionResp struct {
	TopicList            []*share_message.Topic                  `protobuf:"bytes,1,rep,name=TopicList" json:"TopicList,omitempty" bson:"TopicList,omitempty"`
	DynamicList          []*share_message.DynamicData            `protobuf:"bytes,2,rep,name=DynamicList" json:"DynamicList,omitempty" bson:"DynamicList,omitempty"`
	TopicTypeList        []*OneTopicType                         `protobuf:"bytes,3,rep,name=TopicTypeList" json:"TopicTypeList,omitempty" bson:"TopicTypeList,omitempty"`
	PlayerList           []*share_message.TopicParticipatePlayer `protobuf:"bytes,4,rep,name=PlayerList" json:"PlayerList,omitempty" bson:"PlayerList,omitempty"`
	HasAttentionTopic    *bool                                   `protobuf:"varint,5,opt,name=HasAttentionTopic" json:"HasAttentionTopic,omitempty" bson:"HasAttentionTopic,omitempty"`
	HasAttentionPlayer   *bool                                   `protobuf:"varint,6,opt,name=HasAttentionPlayer" json:"HasAttentionPlayer,omitempty" bson:"HasAttentionPlayer,omitempty"`
	Count                *int64                                  `protobuf:"varint,7,opt,name=Count" json:"Count,omitempty" bson:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-" bson:"-"`
	XXX_unrecognized     []byte                                  `json:"-" bson:"-"`
	XXX_sizecache        int32                                   `json:"-" bson:"-"`
}

func (m *SquareAttentionResp) Reset()         { *m = SquareAttentionResp{} }
func (m *SquareAttentionResp) String() string { return proto.CompactTextString(m) }
func (*SquareAttentionResp) ProtoMessage()    {}
func (*SquareAttentionResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{36}
}
func (m *SquareAttentionResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SquareAttentionResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SquareAttentionResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SquareAttentionResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SquareAttentionResp.Merge(m, src)
}
func (m *SquareAttentionResp) XXX_Size() int {
	return m.Size()
}
func (m *SquareAttentionResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SquareAttentionResp.DiscardUnknown(m)
}

var xxx_messageInfo_SquareAttentionResp proto.InternalMessageInfo

func (m *SquareAttentionResp) GetTopicList() []*share_message.Topic {
	if m != nil {
		return m.TopicList
	}
	return nil
}

func (m *SquareAttentionResp) GetDynamicList() []*share_message.DynamicData {
	if m != nil {
		return m.DynamicList
	}
	return nil
}

func (m *SquareAttentionResp) GetTopicTypeList() []*OneTopicType {
	if m != nil {
		return m.TopicTypeList
	}
	return nil
}

func (m *SquareAttentionResp) GetPlayerList() []*share_message.TopicParticipatePlayer {
	if m != nil {
		return m.PlayerList
	}
	return nil
}

func (m *SquareAttentionResp) GetHasAttentionTopic() bool {
	if m != nil && m.HasAttentionTopic != nil {
		return *m.HasAttentionTopic
	}
	return false
}

func (m *SquareAttentionResp) GetHasAttentionPlayer() bool {
	if m != nil && m.HasAttentionPlayer != nil {
		return *m.HasAttentionPlayer
	}
	return false
}

func (m *SquareAttentionResp) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

// 广场按钮旁边的话题头部话题列表.
type TopicHeadResp struct {
	TopicList            []*share_message.Topic `protobuf:"bytes,1,rep,name=TopicList" json:"TopicList,omitempty" bson:"TopicList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-" bson:"-"`
	XXX_unrecognized     []byte                 `json:"-" bson:"-"`
	XXX_sizecache        int32                  `json:"-" bson:"-"`
}

func (m *TopicHeadResp) Reset()         { *m = TopicHeadResp{} }
func (m *TopicHeadResp) String() string { return proto.CompactTextString(m) }
func (*TopicHeadResp) ProtoMessage()    {}
func (*TopicHeadResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{37}
}
func (m *TopicHeadResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicHeadResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicHeadResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicHeadResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicHeadResp.Merge(m, src)
}
func (m *TopicHeadResp) XXX_Size() int {
	return m.Size()
}
func (m *TopicHeadResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicHeadResp.DiscardUnknown(m)
}

var xxx_messageInfo_TopicHeadResp proto.InternalMessageInfo

func (m *TopicHeadResp) GetTopicList() []*share_message.Topic {
	if m != nil {
		return m.TopicList
	}
	return nil
}

//话题贡献榜
type TopicDevoteListReq struct {
	DataType             *int64   `protobuf:"varint,1,opt,name=DataType" json:"DataType,omitempty" bson:"DataType,omitempty"`
	Page                 *int64   `protobuf:"varint,2,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	PageSize             *int64   `protobuf:"varint,3,opt,name=PageSize" json:"PageSize,omitempty" bson:"PageSize,omitempty"`
	TopicName            *string  `protobuf:"bytes,6,opt,name=TopicName" json:"TopicName,omitempty" bson:"TopicName,omitempty"`
	TopicId              *int64   `protobuf:"varint,7,opt,name=TopicId" json:"TopicId,omitempty" bson:"TopicId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TopicDevoteListReq) Reset()         { *m = TopicDevoteListReq{} }
func (m *TopicDevoteListReq) String() string { return proto.CompactTextString(m) }
func (*TopicDevoteListReq) ProtoMessage()    {}
func (*TopicDevoteListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{38}
}
func (m *TopicDevoteListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicDevoteListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicDevoteListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicDevoteListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicDevoteListReq.Merge(m, src)
}
func (m *TopicDevoteListReq) XXX_Size() int {
	return m.Size()
}
func (m *TopicDevoteListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicDevoteListReq.DiscardUnknown(m)
}

var xxx_messageInfo_TopicDevoteListReq proto.InternalMessageInfo

func (m *TopicDevoteListReq) GetDataType() int64 {
	if m != nil && m.DataType != nil {
		return *m.DataType
	}
	return 0
}

func (m *TopicDevoteListReq) GetPage() int64 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *TopicDevoteListReq) GetPageSize() int64 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *TopicDevoteListReq) GetTopicName() string {
	if m != nil && m.TopicName != nil {
		return *m.TopicName
	}
	return ""
}

func (m *TopicDevoteListReq) GetTopicId() int64 {
	if m != nil && m.TopicId != nil {
		return *m.TopicId
	}
	return 0
}

type TopicDevoteListResp struct {
	DevoteList           []*share_message.TopicDevote `protobuf:"bytes,1,rep,name=DevoteList" json:"DevoteList,omitempty" bson:"DevoteList,omitempty"`
	Count                *int64                       `protobuf:"varint,7,opt,name=Count" json:"Count,omitempty" bson:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-" bson:"-"`
	XXX_unrecognized     []byte                       `json:"-" bson:"-"`
	XXX_sizecache        int32                        `json:"-" bson:"-"`
}

func (m *TopicDevoteListResp) Reset()         { *m = TopicDevoteListResp{} }
func (m *TopicDevoteListResp) String() string { return proto.CompactTextString(m) }
func (*TopicDevoteListResp) ProtoMessage()    {}
func (*TopicDevoteListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{39}
}
func (m *TopicDevoteListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicDevoteListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicDevoteListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicDevoteListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicDevoteListResp.Merge(m, src)
}
func (m *TopicDevoteListResp) XXX_Size() int {
	return m.Size()
}
func (m *TopicDevoteListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicDevoteListResp.DiscardUnknown(m)
}

var xxx_messageInfo_TopicDevoteListResp proto.InternalMessageInfo

func (m *TopicDevoteListResp) GetDevoteList() []*share_message.TopicDevote {
	if m != nil {
		return m.DevoteList
	}
	return nil
}

func (m *TopicDevoteListResp) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

//获取申请话题主条件
type TopicMasterConditionReq struct {
	TopicId              *int64   `protobuf:"varint,1,opt,name=TopicId" json:"TopicId,omitempty" bson:"TopicId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TopicMasterConditionReq) Reset()         { *m = TopicMasterConditionReq{} }
func (m *TopicMasterConditionReq) String() string { return proto.CompactTextString(m) }
func (*TopicMasterConditionReq) ProtoMessage()    {}
func (*TopicMasterConditionReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{40}
}
func (m *TopicMasterConditionReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicMasterConditionReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicMasterConditionReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicMasterConditionReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicMasterConditionReq.Merge(m, src)
}
func (m *TopicMasterConditionReq) XXX_Size() int {
	return m.Size()
}
func (m *TopicMasterConditionReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicMasterConditionReq.DiscardUnknown(m)
}

var xxx_messageInfo_TopicMasterConditionReq proto.InternalMessageInfo

func (m *TopicMasterConditionReq) GetTopicId() int64 {
	if m != nil && m.TopicId != nil {
		return *m.TopicId
	}
	return 0
}

type TopicMasterConditionResp struct {
	Registered           *bool    `protobuf:"varint,1,opt,name=Registered" json:"Registered,omitempty" bson:"Registered,omitempty"`
	Follow               *bool    `protobuf:"varint,2,opt,name=Follow" json:"Follow,omitempty" bson:"Follow,omitempty"`
	Dynamic              *bool    `protobuf:"varint,3,opt,name=Dynamic" json:"Dynamic,omitempty" bson:"Dynamic,omitempty"`
	GeneralStatus        *bool    `protobuf:"varint,20,opt,name=GeneralStatus" json:"GeneralStatus,omitempty" bson:"GeneralStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TopicMasterConditionResp) Reset()         { *m = TopicMasterConditionResp{} }
func (m *TopicMasterConditionResp) String() string { return proto.CompactTextString(m) }
func (*TopicMasterConditionResp) ProtoMessage()    {}
func (*TopicMasterConditionResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{41}
}
func (m *TopicMasterConditionResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicMasterConditionResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicMasterConditionResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicMasterConditionResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicMasterConditionResp.Merge(m, src)
}
func (m *TopicMasterConditionResp) XXX_Size() int {
	return m.Size()
}
func (m *TopicMasterConditionResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicMasterConditionResp.DiscardUnknown(m)
}

var xxx_messageInfo_TopicMasterConditionResp proto.InternalMessageInfo

func (m *TopicMasterConditionResp) GetRegistered() bool {
	if m != nil && m.Registered != nil {
		return *m.Registered
	}
	return false
}

func (m *TopicMasterConditionResp) GetFollow() bool {
	if m != nil && m.Follow != nil {
		return *m.Follow
	}
	return false
}

func (m *TopicMasterConditionResp) GetDynamic() bool {
	if m != nil && m.Dynamic != nil {
		return *m.Dynamic
	}
	return false
}

func (m *TopicMasterConditionResp) GetGeneralStatus() bool {
	if m != nil && m.GeneralStatus != nil {
		return *m.GeneralStatus
	}
	return false
}

//申请话题主
type ApplyTopicMasterReq struct {
	TopicId              *int64   `protobuf:"varint,2,opt,name=TopicId" json:"TopicId,omitempty" bson:"TopicId,omitempty"`
	IsManageExp          *bool    `protobuf:"varint,4,opt,name=IsManageExp" json:"IsManageExp,omitempty" bson:"IsManageExp,omitempty"`
	Reason               *string  `protobuf:"bytes,5,opt,name=Reason" json:"Reason,omitempty" bson:"Reason,omitempty"`
	ContactDetails       *string  `protobuf:"bytes,6,opt,name=ContactDetails" json:"ContactDetails,omitempty" bson:"ContactDetails,omitempty"`
	TopicName            *string  `protobuf:"bytes,9,opt,name=TopicName" json:"TopicName,omitempty" bson:"TopicName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ApplyTopicMasterReq) Reset()         { *m = ApplyTopicMasterReq{} }
func (m *ApplyTopicMasterReq) String() string { return proto.CompactTextString(m) }
func (*ApplyTopicMasterReq) ProtoMessage()    {}
func (*ApplyTopicMasterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{42}
}
func (m *ApplyTopicMasterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyTopicMasterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyTopicMasterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyTopicMasterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyTopicMasterReq.Merge(m, src)
}
func (m *ApplyTopicMasterReq) XXX_Size() int {
	return m.Size()
}
func (m *ApplyTopicMasterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyTopicMasterReq.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyTopicMasterReq proto.InternalMessageInfo

func (m *ApplyTopicMasterReq) GetTopicId() int64 {
	if m != nil && m.TopicId != nil {
		return *m.TopicId
	}
	return 0
}

func (m *ApplyTopicMasterReq) GetIsManageExp() bool {
	if m != nil && m.IsManageExp != nil {
		return *m.IsManageExp
	}
	return false
}

func (m *ApplyTopicMasterReq) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

func (m *ApplyTopicMasterReq) GetContactDetails() string {
	if m != nil && m.ContactDetails != nil {
		return *m.ContactDetails
	}
	return ""
}

func (m *ApplyTopicMasterReq) GetTopicName() string {
	if m != nil && m.TopicName != nil {
		return *m.TopicName
	}
	return ""
}

type ApplyTopicMasterResp struct {
	Result               *int32   `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ApplyTopicMasterResp) Reset()         { *m = ApplyTopicMasterResp{} }
func (m *ApplyTopicMasterResp) String() string { return proto.CompactTextString(m) }
func (*ApplyTopicMasterResp) ProtoMessage()    {}
func (*ApplyTopicMasterResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{43}
}
func (m *ApplyTopicMasterResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyTopicMasterResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyTopicMasterResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyTopicMasterResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyTopicMasterResp.Merge(m, src)
}
func (m *ApplyTopicMasterResp) XXX_Size() int {
	return m.Size()
}
func (m *ApplyTopicMasterResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyTopicMasterResp.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyTopicMasterResp proto.InternalMessageInfo

func (m *ApplyTopicMasterResp) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

//题主修改话题信息
type TopicMasterEditReq struct {
	TopicId              *int64   `protobuf:"varint,1,opt,name=TopicId" json:"TopicId,omitempty" bson:"TopicId,omitempty"`
	TopicName            *string  `protobuf:"bytes,2,opt,name=TopicName" json:"TopicName,omitempty" bson:"TopicName,omitempty"`
	HeadURL              *string  `protobuf:"bytes,4,opt,name=HeadURL" json:"HeadURL,omitempty" bson:"HeadURL,omitempty"`
	Description          *string  `protobuf:"bytes,10,opt,name=Description" json:"Description,omitempty" bson:"Description,omitempty"`
	BgUrl                *string  `protobuf:"bytes,19,opt,name=BgUrl" json:"BgUrl,omitempty" bson:"BgUrl,omitempty"`
	TopicRule            *string  `protobuf:"bytes,24,opt,name=TopicRule" json:"TopicRule,omitempty" bson:"TopicRule,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TopicMasterEditReq) Reset()         { *m = TopicMasterEditReq{} }
func (m *TopicMasterEditReq) String() string { return proto.CompactTextString(m) }
func (*TopicMasterEditReq) ProtoMessage()    {}
func (*TopicMasterEditReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{44}
}
func (m *TopicMasterEditReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicMasterEditReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicMasterEditReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicMasterEditReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicMasterEditReq.Merge(m, src)
}
func (m *TopicMasterEditReq) XXX_Size() int {
	return m.Size()
}
func (m *TopicMasterEditReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicMasterEditReq.DiscardUnknown(m)
}

var xxx_messageInfo_TopicMasterEditReq proto.InternalMessageInfo

func (m *TopicMasterEditReq) GetTopicId() int64 {
	if m != nil && m.TopicId != nil {
		return *m.TopicId
	}
	return 0
}

func (m *TopicMasterEditReq) GetTopicName() string {
	if m != nil && m.TopicName != nil {
		return *m.TopicName
	}
	return ""
}

func (m *TopicMasterEditReq) GetHeadURL() string {
	if m != nil && m.HeadURL != nil {
		return *m.HeadURL
	}
	return ""
}

func (m *TopicMasterEditReq) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *TopicMasterEditReq) GetBgUrl() string {
	if m != nil && m.BgUrl != nil {
		return *m.BgUrl
	}
	return ""
}

func (m *TopicMasterEditReq) GetTopicRule() string {
	if m != nil && m.TopicRule != nil {
		return *m.TopicRule
	}
	return ""
}

type TopicMasterEditResp struct {
	Result               *int32   `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TopicMasterEditResp) Reset()         { *m = TopicMasterEditResp{} }
func (m *TopicMasterEditResp) String() string { return proto.CompactTextString(m) }
func (*TopicMasterEditResp) ProtoMessage()    {}
func (*TopicMasterEditResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{45}
}
func (m *TopicMasterEditResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicMasterEditResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicMasterEditResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicMasterEditResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicMasterEditResp.Merge(m, src)
}
func (m *TopicMasterEditResp) XXX_Size() int {
	return m.Size()
}
func (m *TopicMasterEditResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicMasterEditResp.DiscardUnknown(m)
}

var xxx_messageInfo_TopicMasterEditResp proto.InternalMessageInfo

func (m *TopicMasterEditResp) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

// 话题置顶
type TopicTopReq struct {
	TopicId              *int64   `protobuf:"varint,1,opt,name=TopicId" json:"TopicId,omitempty" bson:"TopicId,omitempty"`
	LogId                *int64   `protobuf:"varint,2,opt,name=LogId" json:"LogId,omitempty" bson:"LogId,omitempty"`
	TopicName            *string  `protobuf:"bytes,9,opt,name=TopicName" json:"TopicName,omitempty" bson:"TopicName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TopicTopReq) Reset()         { *m = TopicTopReq{} }
func (m *TopicTopReq) String() string { return proto.CompactTextString(m) }
func (*TopicTopReq) ProtoMessage()    {}
func (*TopicTopReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{46}
}
func (m *TopicTopReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicTopReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicTopReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicTopReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicTopReq.Merge(m, src)
}
func (m *TopicTopReq) XXX_Size() int {
	return m.Size()
}
func (m *TopicTopReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicTopReq.DiscardUnknown(m)
}

var xxx_messageInfo_TopicTopReq proto.InternalMessageInfo

func (m *TopicTopReq) GetTopicId() int64 {
	if m != nil && m.TopicId != nil {
		return *m.TopicId
	}
	return 0
}

func (m *TopicTopReq) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *TopicTopReq) GetTopicName() string {
	if m != nil && m.TopicName != nil {
		return *m.TopicName
	}
	return ""
}

type TopicTopResp struct {
	Result               *int32   `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TopicTopResp) Reset()         { *m = TopicTopResp{} }
func (m *TopicTopResp) String() string { return proto.CompactTextString(m) }
func (*TopicTopResp) ProtoMessage()    {}
func (*TopicTopResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{47}
}
func (m *TopicTopResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicTopResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicTopResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicTopResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicTopResp.Merge(m, src)
}
func (m *TopicTopResp) XXX_Size() int {
	return m.Size()
}
func (m *TopicTopResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicTopResp.DiscardUnknown(m)
}

var xxx_messageInfo_TopicTopResp proto.InternalMessageInfo

func (m *TopicTopResp) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

// 取消话题置顶
type TopicTopCancelReq struct {
	TopicId              *int64   `protobuf:"varint,1,opt,name=TopicId" json:"TopicId,omitempty" bson:"TopicId,omitempty"`
	LogId                *int64   `protobuf:"varint,2,opt,name=LogId" json:"LogId,omitempty" bson:"LogId,omitempty"`
	TopicName            *string  `protobuf:"bytes,9,opt,name=TopicName" json:"TopicName,omitempty" bson:"TopicName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TopicTopCancelReq) Reset()         { *m = TopicTopCancelReq{} }
func (m *TopicTopCancelReq) String() string { return proto.CompactTextString(m) }
func (*TopicTopCancelReq) ProtoMessage()    {}
func (*TopicTopCancelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{48}
}
func (m *TopicTopCancelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicTopCancelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicTopCancelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicTopCancelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicTopCancelReq.Merge(m, src)
}
func (m *TopicTopCancelReq) XXX_Size() int {
	return m.Size()
}
func (m *TopicTopCancelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicTopCancelReq.DiscardUnknown(m)
}

var xxx_messageInfo_TopicTopCancelReq proto.InternalMessageInfo

func (m *TopicTopCancelReq) GetTopicId() int64 {
	if m != nil && m.TopicId != nil {
		return *m.TopicId
	}
	return 0
}

func (m *TopicTopCancelReq) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *TopicTopCancelReq) GetTopicName() string {
	if m != nil && m.TopicName != nil {
		return *m.TopicName
	}
	return ""
}

type TopicTopCancelResp struct {
	Result               *int32   `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TopicTopCancelResp) Reset()         { *m = TopicTopCancelResp{} }
func (m *TopicTopCancelResp) String() string { return proto.CompactTextString(m) }
func (*TopicTopCancelResp) ProtoMessage()    {}
func (*TopicTopCancelResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{49}
}
func (m *TopicTopCancelResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicTopCancelResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicTopCancelResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicTopCancelResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicTopCancelResp.Merge(m, src)
}
func (m *TopicTopCancelResp) XXX_Size() int {
	return m.Size()
}
func (m *TopicTopCancelResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicTopCancelResp.DiscardUnknown(m)
}

var xxx_messageInfo_TopicTopCancelResp proto.InternalMessageInfo

func (m *TopicTopCancelResp) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

//话题排行榜规则说明
type TopicLeaderBoardDescriptionResp struct {
	Rule                 []string `protobuf:"bytes,1,rep,name=Rule" json:"Rule,omitempty" bson:"Rule,omitempty"`
	Introduction         []string `protobuf:"bytes,2,rep,name=Introduction" json:"Introduction,omitempty" bson:"Introduction,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TopicLeaderBoardDescriptionResp) Reset()         { *m = TopicLeaderBoardDescriptionResp{} }
func (m *TopicLeaderBoardDescriptionResp) String() string { return proto.CompactTextString(m) }
func (*TopicLeaderBoardDescriptionResp) ProtoMessage()    {}
func (*TopicLeaderBoardDescriptionResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{50}
}
func (m *TopicLeaderBoardDescriptionResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicLeaderBoardDescriptionResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicLeaderBoardDescriptionResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicLeaderBoardDescriptionResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicLeaderBoardDescriptionResp.Merge(m, src)
}
func (m *TopicLeaderBoardDescriptionResp) XXX_Size() int {
	return m.Size()
}
func (m *TopicLeaderBoardDescriptionResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicLeaderBoardDescriptionResp.DiscardUnknown(m)
}

var xxx_messageInfo_TopicLeaderBoardDescriptionResp proto.InternalMessageInfo

func (m *TopicLeaderBoardDescriptionResp) GetRule() []string {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (m *TopicLeaderBoardDescriptionResp) GetIntroduction() []string {
	if m != nil {
		return m.Introduction
	}
	return nil
}

//退出话题主
type QuitTopicMasterReq struct {
	TopicId              *int64   `protobuf:"varint,1,opt,name=TopicId" json:"TopicId,omitempty" bson:"TopicId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *QuitTopicMasterReq) Reset()         { *m = QuitTopicMasterReq{} }
func (m *QuitTopicMasterReq) String() string { return proto.CompactTextString(m) }
func (*QuitTopicMasterReq) ProtoMessage()    {}
func (*QuitTopicMasterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{51}
}
func (m *QuitTopicMasterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuitTopicMasterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuitTopicMasterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuitTopicMasterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuitTopicMasterReq.Merge(m, src)
}
func (m *QuitTopicMasterReq) XXX_Size() int {
	return m.Size()
}
func (m *QuitTopicMasterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QuitTopicMasterReq.DiscardUnknown(m)
}

var xxx_messageInfo_QuitTopicMasterReq proto.InternalMessageInfo

func (m *QuitTopicMasterReq) GetTopicId() int64 {
	if m != nil && m.TopicId != nil {
		return *m.TopicId
	}
	return 0
}

type QuitTopicMasterResp struct {
	Result               *int32   `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *QuitTopicMasterResp) Reset()         { *m = QuitTopicMasterResp{} }
func (m *QuitTopicMasterResp) String() string { return proto.CompactTextString(m) }
func (*QuitTopicMasterResp) ProtoMessage()    {}
func (*QuitTopicMasterResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{52}
}
func (m *QuitTopicMasterResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuitTopicMasterResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuitTopicMasterResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuitTopicMasterResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuitTopicMasterResp.Merge(m, src)
}
func (m *QuitTopicMasterResp) XXX_Size() int {
	return m.Size()
}
func (m *QuitTopicMasterResp) XXX_DiscardUnknown() {
	xxx_messageInfo_QuitTopicMasterResp.DiscardUnknown(m)
}

var xxx_messageInfo_QuitTopicMasterResp proto.InternalMessageInfo

func (m *QuitTopicMasterResp) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

// 话题主删除话题中的动态
type TopicMasterDelDynamicReq struct {
	TopicId              *int64   `protobuf:"varint,1,opt,name=TopicId" json:"TopicId,omitempty" bson:"TopicId,omitempty"`
	LogId                *int64   `protobuf:"varint,2,opt,name=LogId" json:"LogId,omitempty" bson:"LogId,omitempty"`
	DelReasonId          *int32   `protobuf:"varint,3,opt,name=DelReasonId" json:"DelReasonId,omitempty" bson:"DelReasonId,omitempty"`
	DelReasonMsg         *string  `protobuf:"bytes,4,opt,name=DelReasonMsg" json:"DelReasonMsg,omitempty" bson:"DelReasonMsg,omitempty"`
	TopicName            *string  `protobuf:"bytes,9,opt,name=TopicName" json:"TopicName,omitempty" bson:"TopicName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TopicMasterDelDynamicReq) Reset()         { *m = TopicMasterDelDynamicReq{} }
func (m *TopicMasterDelDynamicReq) String() string { return proto.CompactTextString(m) }
func (*TopicMasterDelDynamicReq) ProtoMessage()    {}
func (*TopicMasterDelDynamicReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{53}
}
func (m *TopicMasterDelDynamicReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicMasterDelDynamicReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicMasterDelDynamicReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicMasterDelDynamicReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicMasterDelDynamicReq.Merge(m, src)
}
func (m *TopicMasterDelDynamicReq) XXX_Size() int {
	return m.Size()
}
func (m *TopicMasterDelDynamicReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicMasterDelDynamicReq.DiscardUnknown(m)
}

var xxx_messageInfo_TopicMasterDelDynamicReq proto.InternalMessageInfo

func (m *TopicMasterDelDynamicReq) GetTopicId() int64 {
	if m != nil && m.TopicId != nil {
		return *m.TopicId
	}
	return 0
}

func (m *TopicMasterDelDynamicReq) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *TopicMasterDelDynamicReq) GetDelReasonId() int32 {
	if m != nil && m.DelReasonId != nil {
		return *m.DelReasonId
	}
	return 0
}

func (m *TopicMasterDelDynamicReq) GetDelReasonMsg() string {
	if m != nil && m.DelReasonMsg != nil {
		return *m.DelReasonMsg
	}
	return ""
}

func (m *TopicMasterDelDynamicReq) GetTopicName() string {
	if m != nil && m.TopicName != nil {
		return *m.TopicName
	}
	return ""
}

type TopicMasterDelDynamicResp struct {
	Result               *int32   `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TopicMasterDelDynamicResp) Reset()         { *m = TopicMasterDelDynamicResp{} }
func (m *TopicMasterDelDynamicResp) String() string { return proto.CompactTextString(m) }
func (*TopicMasterDelDynamicResp) ProtoMessage()    {}
func (*TopicMasterDelDynamicResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{54}
}
func (m *TopicMasterDelDynamicResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicMasterDelDynamicResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicMasterDelDynamicResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicMasterDelDynamicResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicMasterDelDynamicResp.Merge(m, src)
}
func (m *TopicMasterDelDynamicResp) XXX_Size() int {
	return m.Size()
}
func (m *TopicMasterDelDynamicResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicMasterDelDynamicResp.DiscardUnknown(m)
}

var xxx_messageInfo_TopicMasterDelDynamicResp proto.InternalMessageInfo

func (m *TopicMasterDelDynamicResp) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*AllInfo)(nil), "client_hall.AllInfo")
	proto.RegisterType((*NewVersionAllInfo)(nil), "client_hall.NewVersionAllInfo")
	proto.RegisterType((*FlushInfo)(nil), "client_hall.FlushInfo")
	proto.RegisterType((*MessageMainInfo)(nil), "client_hall.MessageMainInfo")
	proto.RegisterType((*ZanList)(nil), "client_hall.ZanList")
	proto.RegisterType((*AttentionList)(nil), "client_hall.AttentionList")
	proto.RegisterType((*UnReadInfo)(nil), "client_hall.UnReadInfo")
	proto.RegisterType((*NewUnReadMessageRespForApi)(nil), "client_hall.NewUnReadMessageRespForApi")
	proto.RegisterType((*DynamicTopReq)(nil), "client_hall.DynamicTopReq")
	proto.RegisterType((*FirstLoginSquareReply)(nil), "client_hall.FirstLoginSquareReply")
	proto.RegisterType((*FirstLoginSquareReq)(nil), "client_hall.FirstLoginSquareReq")
	proto.RegisterType((*AdvDetailReply)(nil), "client_hall.AdvDetailReply")
	proto.RegisterType((*OneTopicType)(nil), "client_hall.OneTopicType")
	proto.RegisterType((*AllTopic)(nil), "client_hall.AllTopic")
	proto.RegisterType((*TopicTypeListResp)(nil), "client_hall.TopicTypeListResp")
	proto.RegisterType((*TopicListReq)(nil), "client_hall.TopicListReq")
	proto.RegisterType((*TopicListResp)(nil), "client_hall.TopicListResp")
	proto.RegisterType((*TopicDetailReq)(nil), "client_hall.TopicDetailReq")
	proto.RegisterType((*TopicDetailResp)(nil), "client_hall.TopicDetailResp")
	proto.RegisterType((*TopicMainPageListReq)(nil), "client_hall.TopicMainPageListReq")
	proto.RegisterType((*TopicMainPageListResp)(nil), "client_hall.TopicMainPageListResp")
	proto.RegisterType((*TopicParticipateListReq)(nil), "client_hall.TopicParticipateListReq")
	proto.RegisterType((*TopicParticipateListResp)(nil), "client_hall.TopicParticipateListResp")
	proto.RegisterType((*AttentionTopicReq)(nil), "client_hall.AttentionTopicReq")
	proto.RegisterType((*MyAttentionTopicListReq)(nil), "client_hall.MyAttentionTopicListReq")
	proto.RegisterType((*MyAttentionTopicListResp)(nil), "client_hall.MyAttentionTopicListResp")
	proto.RegisterType((*SearchTopicReq)(nil), "client_hall.SearchTopicReq")
	proto.RegisterType((*SearchTopicResp)(nil), "client_hall.SearchTopicResp")
	proto.RegisterType((*SearchHotTopicResp)(nil), "client_hall.SearchHotTopicResp")
	proto.RegisterType((*FlushTopicReq)(nil), "client_hall.FlushTopicReq")
	proto.RegisterType((*TopicDynamicList)(nil), "client_hall.TopicDynamicList")
	proto.RegisterType((*FlushTopicResp)(nil), "client_hall.FlushTopicResp")
	proto.RegisterType((*HotTopicListReq)(nil), "client_hall.HotTopicListReq")
	proto.RegisterType((*HotTopicListResp)(nil), "client_hall.HotTopicListResp")
	proto.RegisterType((*AttentionRecommendPlayerResp)(nil), "client_hall.AttentionRecommendPlayerResp")
	proto.RegisterType((*SquareAttentionReq)(nil), "client_hall.SquareAttentionReq")
	proto.RegisterType((*SquareAttentionResp)(nil), "client_hall.SquareAttentionResp")
	proto.RegisterType((*TopicHeadResp)(nil), "client_hall.TopicHeadResp")
	proto.RegisterType((*TopicDevoteListReq)(nil), "client_hall.TopicDevoteListReq")
	proto.RegisterType((*TopicDevoteListResp)(nil), "client_hall.TopicDevoteListResp")
	proto.RegisterType((*TopicMasterConditionReq)(nil), "client_hall.TopicMasterConditionReq")
	proto.RegisterType((*TopicMasterConditionResp)(nil), "client_hall.TopicMasterConditionResp")
	proto.RegisterType((*ApplyTopicMasterReq)(nil), "client_hall.ApplyTopicMasterReq")
	proto.RegisterType((*ApplyTopicMasterResp)(nil), "client_hall.ApplyTopicMasterResp")
	proto.RegisterType((*TopicMasterEditReq)(nil), "client_hall.TopicMasterEditReq")
	proto.RegisterType((*TopicMasterEditResp)(nil), "client_hall.TopicMasterEditResp")
	proto.RegisterType((*TopicTopReq)(nil), "client_hall.TopicTopReq")
	proto.RegisterType((*TopicTopResp)(nil), "client_hall.TopicTopResp")
	proto.RegisterType((*TopicTopCancelReq)(nil), "client_hall.TopicTopCancelReq")
	proto.RegisterType((*TopicTopCancelResp)(nil), "client_hall.TopicTopCancelResp")
	proto.RegisterType((*TopicLeaderBoardDescriptionResp)(nil), "client_hall.TopicLeaderBoardDescriptionResp")
	proto.RegisterType((*QuitTopicMasterReq)(nil), "client_hall.QuitTopicMasterReq")
	proto.RegisterType((*QuitTopicMasterResp)(nil), "client_hall.QuitTopicMasterResp")
	proto.RegisterType((*TopicMasterDelDynamicReq)(nil), "client_hall.TopicMasterDelDynamicReq")
	proto.RegisterType((*TopicMasterDelDynamicResp)(nil), "client_hall.TopicMasterDelDynamicResp")
}

func init() { proto.RegisterFile("square.proto", fileDescriptor_32f3c81857d39439) }

var fileDescriptor_32f3c81857d39439 = []byte{
	// 2264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0xdd, 0x72, 0xdb, 0xc6,
	0x15, 0x1e, 0x8a, 0x52, 0x2c, 0x1d, 0x91, 0x92, 0xb9, 0x92, 0x2c, 0x0a, 0xb2, 0x68, 0x05, 0x89,
	0x63, 0x27, 0x4e, 0xa5, 0x54, 0xed, 0x24, 0x76, 0x9b, 0xce, 0x84, 0xfa, 0xa7, 0x6b, 0xc9, 0x36,
	0x24, 0xb5, 0xae, 0x32, 0x53, 0x75, 0x03, 0xac, 0x69, 0xa4, 0x20, 0x00, 0x01, 0xa0, 0x64, 0xf5,
	0xaa, 0xef, 0xd1, 0xbb, 0xbe, 0x40, 0xef, 0xf2, 0x0c, 0xbd, 0xec, 0x23, 0x74, 0xfc, 0x06, 0x7d,
	0x83, 0xce, 0xfe, 0x00, 0xc4, 0x2e, 0x16, 0xa4, 0x64, 0xe7, 0x8e, 0xd8, 0x3d, 0xbf, 0xdf, 0x9e,
	0x3d, 0x67, 0xcf, 0x21, 0xd4, 0xe2, 0xf3, 0x3e, 0x8e, 0xc8, 0x5a, 0x18, 0x05, 0x49, 0x80, 0xa6,
	0x6d, 0xcf, 0x25, 0x7e, 0x72, 0xf6, 0x06, 0x7b, 0x9e, 0x01, 0x3f, 0xe0, 0x58, 0x6c, 0x18, 0x35,
	0x3b, 0xe8, 0xf5, 0x02, 0x5f, 0x7c, 0xad, 0x77, 0x71, 0x8f, 0x9c, 0xc5, 0x24, 0xba, 0x20, 0xd1,
	0x3a, 0x5b, 0x5a, 0x8f, 0xdf, 0xe0, 0x88, 0x9c, 0xf5, 0x48, 0x1c, 0xe3, 0x2e, 0x59, 0xc7, 0x9e,
	0x27, 0x31, 0x3c, 0x1e, 0xc5, 0x90, 0xe0, 0x1f, 0x3c, 0x72, 0x16, 0x27, 0x51, 0xdf, 0x4e, 0xce,
	0x92, 0x20, 0x74, 0x6d, 0xce, 0x69, 0xbe, 0x82, 0x5b, 0x6d, 0xcf, 0xeb, 0xf8, 0xaf, 0x03, 0xb4,
	0x06, 0x70, 0xc4, 0x8c, 0xa5, 0x5f, 0xcd, 0xca, 0x6a, 0xf5, 0xe1, 0xf4, 0x86, 0xb1, 0x26, 0xc9,
	0x59, 0xdb, 0xbe, 0xf2, 0x71, 0xcf, 0xb5, 0xb7, 0x71, 0x82, 0xd1, 0x0a, 0x2c, 0xec, 0xba, 0x51,
	0x9c, 0xb4, 0x1d, 0x87, 0xf3, 0x89, 0xcd, 0xe6, 0xd8, 0x6a, 0xe5, 0xe1, 0xa4, 0xf9, 0x16, 0x1a,
	0x87, 0xe4, 0xf2, 0x0f, 0x24, 0x8a, 0xdd, 0xc0, 0x4f, 0x75, 0x7c, 0xad, 0xe8, 0xa8, 0x3c, 0x9c,
	0xde, 0x30, 0xcb, 0x75, 0x3c, 0x73, 0xe3, 0xe4, 0x05, 0xee, 0x92, 0x11, 0xba, 0x50, 0x0d, 0xc6,
	0x8f, 0xaf, 0x42, 0xd2, 0xac, 0xae, 0x56, 0x1e, 0x4e, 0x98, 0x4f, 0x61, 0x6a, 0xd7, 0xeb, 0xc7,
	0x6f, 0x98, 0xc6, 0x3a, 0x4c, 0x3c, 0x0b, 0xba, 0x1d, 0x87, 0x29, 0xab, 0x66, 0x94, 0x94, 0x6f,
	0x02, 0x35, 0x04, 0xe5, 0x80, 0x99, 0xd2, 0xb7, 0x9d, 0x8b, 0x8e, 0xd3, 0x1c, 0xa7, 0xf4, 0xe6,
	0x4f, 0x15, 0x98, 0x3d, 0xe0, 0x86, 0x1d, 0x60, 0xd7, 0x67, 0x22, 0xd7, 0x61, 0x7a, 0x2b, 0xe8,
	0xf5, 0x88, 0x9f, 0x50, 0x1b, 0x4b, 0x90, 0xca, 0x51, 0x50, 0x86, 0x9c, 0x53, 0xcd, 0xb1, 0x91,
	0xd0, 0x2e, 0x40, 0xfd, 0xc4, 0x8f, 0x08, 0x76, 0x84, 0x14, 0x61, 0x5b, 0x03, 0xa6, 0xf8, 0xf2,
	0x29, 0xf6, 0x99, 0x7d, 0x13, 0x68, 0x11, 0x66, 0xf9, 0x52, 0x3b, 0x49, 0x88, 0x9f, 0xb8, 0x81,
	0xdf, 0x9c, 0x60, 0x20, 0xd8, 0x70, 0xeb, 0x14, 0xfb, 0x14, 0x40, 0xf4, 0x80, 0xfd, 0xcc, 0xd9,
	0x7a, 0x47, 0x51, 0x2d, 0x76, 0x6f, 0x6c, 0xa7, 0xb9, 0x0d, 0xf5, 0x4c, 0x2f, 0x53, 0xf5, 0xab,
	0xdc, 0x42, 0x4e, 0xe1, 0x5d, 0x45, 0x86, 0x44, 0x63, 0x1a, 0x00, 0x27, 0xbe, 0x45, 0xb0, 0xc3,
	0xd0, 0x4d, 0x4f, 0xa8, 0xc2, 0xdc, 0x38, 0x03, 0xe3, 0x90, 0x5c, 0xf2, 0x6d, 0x71, 0x0e, 0x16,
	0x89, 0xc3, 0xdd, 0x20, 0x6a, 0x87, 0x6e, 0x11, 0xa7, 0x4a, 0x11, 0xa7, 0xb1, 0x32, 0x9c, 0x78,
	0xb0, 0x7c, 0x09, 0x75, 0xe1, 0xd1, 0x71, 0x10, 0x5a, 0xe4, 0x9c, 0xea, 0xdf, 0x0a, 0x5c, 0x5f,
	0xc4, 0x4b, 0x16, 0x3e, 0x63, 0x2c, 0x1c, 0x5e, 0x89, 0x38, 0x7c, 0x16, 0x74, 0x5d, 0x9f, 0x47,
	0xa2, 0x45, 0x42, 0xef, 0x0a, 0xdd, 0x86, 0xc9, 0x53, 0xec, 0x6f, 0x05, 0x7d, 0x61, 0x44, 0x15,
	0xcd, 0x43, 0x4d, 0x58, 0xc5, 0x57, 0x99, 0x00, 0x6a, 0x47, 0x27, 0xde, 0x8c, 0x82, 0xcb, 0x98,
	0x6c, 0x70, 0x7e, 0x66, 0xc7, 0xa4, 0xb9, 0x06, 0x73, 0x45, 0xc9, 0xe7, 0x3a, 0xfa, 0x0a, 0xa3,
	0x7f, 0x09, 0x33, 0x6d, 0xe7, 0x62, 0x9b, 0x24, 0xd8, 0xf5, 0xb8, 0x09, 0xbf, 0x00, 0x68, 0x3b,
	0x17, 0x47, 0x24, 0x49, 0x5c, 0xbf, 0x2b, 0xee, 0xd6, 0x92, 0x0a, 0x7c, 0x46, 0x40, 0x2d, 0xa6,
	0xe8, 0x0f, 0x6e, 0x83, 0xe9, 0x40, 0xed, 0xb9, 0x4f, 0x8e, 0x69, 0x76, 0xa0, 0xab, 0xe8, 0x11,
	0x4c, 0x65, 0x1f, 0x42, 0x5e, 0x53, 0x91, 0x37, 0x20, 0x7e, 0x20, 0x88, 0x69, 0x18, 0x88, 0xc8,
	0x99, 0xd7, 0x11, 0x9b, 0xdf, 0xc2, 0x64, 0xdb, 0xf3, 0xd8, 0x6f, 0xf4, 0x15, 0xd4, 0x33, 0x09,
	0x8c, 0x91, 0x87, 0xcb, 0xd2, 0x5a, 0x2e, 0x4f, 0xae, 0xe5, 0x6d, 0x32, 0xb7, 0xa1, 0x21, 0x71,
	0xd0, 0x60, 0x40, 0xeb, 0x7a, 0x31, 0xa5, 0xc6, 0x9a, 0x5b, 0x50, 0xcb, 0x8c, 0xa5, 0x28, 0xcf,
	0xc1, 0x74, 0xb6, 0x99, 0x4f, 0x15, 0x34, 0xf7, 0x88, 0x83, 0xbb, 0x0d, 0x93, 0xf4, 0xeb, 0xc8,
	0xfd, 0x1b, 0x3f, 0xb1, 0xaa, 0xb9, 0x27, 0xb4, 0x66, 0x66, 0x48, 0x10, 0x54, 0xca, 0x21, 0xa0,
	0x41, 0x95, 0x8b, 0x09, 0xf3, 0x0b, 0x98, 0x61, 0xeb, 0xe9, 0x61, 0x9e, 0x23, 0x80, 0xb1, 0xbc,
	0x19, 0x87, 0xb8, 0xc7, 0xcd, 0x98, 0x32, 0xff, 0x51, 0x81, 0x59, 0x89, 0x38, 0x0e, 0xd1, 0x27,
	0x30, 0xc1, 0x96, 0xc4, 0x19, 0xe9, 0x75, 0x3e, 0x82, 0xba, 0x45, 0x3c, 0x9c, 0x10, 0x87, 0x7d,
	0xc7, 0xc3, 0xce, 0x08, 0x7d, 0x2d, 0x94, 0x1c, 0xe0, 0x38, 0x21, 0x11, 0xcb, 0xd5, 0x55, 0x26,
	0x7b, 0x45, 0x25, 0x27, 0xb8, 0xf7, 0xc2, 0xc3, 0x57, 0x9c, 0xc8, 0xc4, 0x30, 0x2f, 0xf8, 0x5c,
	0x9f, 0xa2, 0x95, 0xe2, 0x9b, 0xf7, 0x67, 0x16, 0x6e, 0x59, 0xe4, 0x3c, 0x97, 0x84, 0x53, 0x9c,
	0xab, 0x05, 0x9c, 0xc7, 0x25, 0x00, 0x26, 0x18, 0x00, 0x7f, 0x86, 0x05, 0x8d, 0x0a, 0x16, 0x04,
	0x69, 0xf2, 0xca, 0xe1, 0x3f, 0x2c, 0xc9, 0xce, 0x43, 0x4d, 0x7c, 0xe6, 0x0f, 0xe3, 0x08, 0x16,
	0x99, 0xfc, 0x17, 0x38, 0x4a, 0x5c, 0xdb, 0x0d, 0x71, 0xa2, 0xf5, 0x62, 0x44, 0x70, 0x28, 0x46,
	0xff, 0x08, 0x4d, 0xbd, 0xd0, 0x38, 0x44, 0x4f, 0x00, 0x38, 0x82, 0x39, 0xb3, 0xef, 0xeb, 0x4e,
	0x25, 0xc7, 0xcc, 0x19, 0x68, 0xd8, 0xf2, 0x5f, 0x79, 0x07, 0xbe, 0x82, 0x46, 0x96, 0xe3, 0x18,
	0x5f, 0xde, 0xf4, 0x2a, 0x3f, 0x80, 0xe7, 0x21, 0x89, 0x70, 0x92, 0xde, 0xfb, 0x27, 0xb0, 0x78,
	0x70, 0x25, 0xf3, 0xa4, 0x2e, 0xa7, 0x6e, 0x56, 0x0a, 0x6e, 0x72, 0x65, 0x16, 0x34, 0xf5, 0xac,
	0x1f, 0x70, 0x1d, 0x5a, 0x30, 0x73, 0x44, 0x70, 0x64, 0xbf, 0xc9, 0xac, 0x4f, 0xc1, 0xac, 0x30,
	0x30, 0x7f, 0x03, 0xb3, 0xd2, 0xfe, 0x0d, 0x54, 0x99, 0xbf, 0x03, 0xc4, 0x79, 0xf7, 0x83, 0xe4,
	0x3d, 0xd8, 0xd7, 0xa1, 0xce, 0xdf, 0x0b, 0x39, 0xcb, 0x86, 0xe2, 0xf3, 0xaf, 0x0a, 0xdc, 0xe6,
	0xd7, 0x75, 0x10, 0x9a, 0xd7, 0xbb, 0xaf, 0x4a, 0x38, 0x8f, 0x7e, 0x33, 0xec, 0xc0, 0x1d, 0x7d,
	0x98, 0x34, 0xab, 0x37, 0x88, 0x29, 0xf3, 0x15, 0xcc, 0xe4, 0x5d, 0x8c, 0x43, 0xf4, 0x4d, 0xd1,
	0x05, 0x01, 0xd2, 0x8a, 0x94, 0xa7, 0x0b, 0x7e, 0x2a, 0xe7, 0xfa, 0x4b, 0x98, 0x4d, 0x51, 0xbf,
	0x6e, 0x78, 0x3d, 0x85, 0xdb, 0x32, 0xcb, 0x07, 0x84, 0xd5, 0x9f, 0xe0, 0x6e, 0x16, 0xa8, 0x16,
	0xb1, 0x59, 0x69, 0x76, 0xb8, 0xd3, 0x1f, 0x78, 0x0f, 0xcd, 0xbf, 0x02, 0xe2, 0xb5, 0x39, 0xa7,
	0x60, 0xa4, 0x73, 0x68, 0x09, 0x1a, 0xfb, 0x38, 0x96, 0x2f, 0x0f, 0x7f, 0x0c, 0x20, 0x03, 0x50,
	0x7e, 0x4b, 0x9c, 0xe3, 0x38, 0x2b, 0xfc, 0xff, 0x1c, 0x83, 0xb9, 0x82, 0xb6, 0x9b, 0xe0, 0x72,
	0xe3, 0xc8, 0x2a, 0x54, 0xe9, 0xea, 0x88, 0x2a, 0xad, 0x60, 0x39, 0x7e, 0x93, 0x9c, 0xa6, 0x45,
	0x65, 0x62, 0x08, 0x2a, 0x1f, 0xb1, 0xbd, 0xec, 0xb0, 0x6f, 0xb1, 0xc3, 0x7e, 0x2c, 0x4c, 0xde,
	0x27, 0xd8, 0xb9, 0xd9, 0x15, 0xff, 0x11, 0x90, 0xa8, 0xaf, 0x17, 0xc1, 0x20, 0xf5, 0xe7, 0x1f,
	0x4b, 0xd7, 0x2b, 0x00, 0x0d, 0xa1, 0x90, 0x25, 0x2e, 0x6a, 0xe3, 0x14, 0x4d, 0xbc, 0x6c, 0xa9,
	0xe3, 0x08, 0x2b, 0x8f, 0x61, 0xae, 0xa0, 0x2b, 0x0e, 0x69, 0x23, 0x36, 0x58, 0x29, 0x29, 0x64,
	0x39, 0x3e, 0xd5, 0xf7, 0x2f, 0x44, 0x05, 0xe3, 0xc5, 0x7b, 0x2b, 0xf0, 0x1d, 0x37, 0x0d, 0xc9,
	0x9c, 0x05, 0xcc, 0x0b, 0xf3, 0xb5, 0x28, 0x4c, 0x05, 0xda, 0x38, 0x44, 0x08, 0xc0, 0x22, 0x5d,
	0x97, 0x6e, 0x10, 0x4e, 0x3f, 0x89, 0x66, 0xe0, 0xa3, 0xdd, 0xc0, 0xf3, 0x82, 0x4b, 0xd1, 0x78,
	0xcd, 0xc2, 0xad, 0xb4, 0x13, 0xe3, 0x91, 0xbb, 0x00, 0xf5, 0x3d, 0xe2, 0x93, 0x08, 0x7b, 0x47,
	0x09, 0x4e, 0xfa, 0x71, 0x73, 0x9e, 0x05, 0xed, 0x05, 0xcc, 0xb5, 0xc3, 0xd0, 0xbb, 0xca, 0x29,
	0x53, 0xec, 0xe1, 0x38, 0xce, 0xc1, 0x74, 0x27, 0x3e, 0xc0, 0x3e, 0xee, 0x92, 0x9d, 0xb7, 0x21,
	0x8f, 0x78, 0xaa, 0xd4, 0x22, 0x38, 0x16, 0xad, 0xcd, 0x14, 0xba, 0x03, 0x33, 0x5b, 0x81, 0x9f,
	0x60, 0x3b, 0xe1, 0x8f, 0xa0, 0x58, 0xe0, 0x2b, 0x41, 0x3e, 0xc5, 0x6a, 0xc5, 0x67, 0x30, 0x5f,
	0xd4, 0x1b, 0x87, 0x5c, 0x64, 0xdc, 0xf7, 0x44, 0xc7, 0x60, 0xfe, 0xbd, 0x22, 0x8e, 0x9d, 0xd3,
	0xec, 0x38, 0x6e, 0xa2, 0xc3, 0x4b, 0x56, 0x31, 0x96, 0x9e, 0x2a, 0x8d, 0xb2, 0x13, 0xeb, 0x19,
	0x33, 0x77, 0x8a, 0xfa, 0xb0, 0x4d, 0x62, 0x3b, 0x72, 0x43, 0xd6, 0x66, 0x00, 0x5b, 0xac, 0xc3,
	0xc4, 0x66, 0xf7, 0x24, 0xf2, 0x9a, 0x73, 0x92, 0xa9, 0x56, 0xdf, 0x23, 0xcd, 0x26, 0x33, 0xf5,
	0xbe, 0x08, 0x86, 0xbc, 0x05, 0x1a, 0x4b, 0xbf, 0x4b, 0x9f, 0xaa, 0xbc, 0x5b, 0x29, 0x58, 0x28,
	0x37, 0x2c, 0x3a, 0x4c, 0x5a, 0xe2, 0xf1, 0xcb, 0x24, 0x68, 0x34, 0xec, 0xa6, 0x4f, 0xec, 0x20,
	0xdc, 0xc2, 0xbe, 0x4d, 0xbc, 0xf7, 0xd4, 0xf3, 0xa9, 0x80, 0x34, 0x27, 0x47, 0xa3, 0x6d, 0x07,
	0xee, 0xf1, 0x8b, 0x49, 0xb0, 0x43, 0xa2, 0xcd, 0x00, 0x47, 0x4e, 0x0e, 0x3d, 0xc6, 0x52, 0x83,
	0x71, 0x86, 0x13, 0xbd, 0x09, 0x53, 0xf4, 0xd9, 0xd6, 0xf1, 0x93, 0x28, 0x70, 0xfa, 0x36, 0xc3,
	0x97, 0xe6, 0x2f, 0x8a, 0x1e, 0x7a, 0xd9, 0x77, 0x93, 0xf2, 0xf8, 0xe2, 0xf1, 0x7e, 0x1f, 0xe6,
	0x0a, 0x64, 0x1a, 0xa3, 0xde, 0x4a, 0xd7, 0x62, 0x9b, 0x78, 0x22, 0xc8, 0xaf, 0x83, 0x04, 0x3b,
	0x7e, 0x8f, 0x07, 0x6c, 0xc7, 0x11, 0x9d, 0x3b, 0x7d, 0x6b, 0xa6, 0x8b, 0x07, 0x71, 0x57, 0x44,
	0x8a, 0x06, 0xb4, 0x47, 0xb0, 0x54, 0xa2, 0xb9, 0x68, 0xe6, 0xc6, 0x4f, 0xcb, 0xd0, 0xe0, 0xa5,
	0x60, 0x8b, 0x65, 0xe2, 0x8d, 0x7d, 0xec, 0x79, 0xe8, 0x5b, 0x58, 0xb0, 0x42, 0x9b, 0x15, 0x71,
	0x69, 0x56, 0x82, 0xee, 0x48, 0x09, 0x3b, 0x1b, 0x91, 0x18, 0xd3, 0x6b, 0x6c, 0x12, 0xb5, 0xd3,
	0x0b, 0x93, 0x2b, 0x64, 0xc1, 0x3d, 0x2b, 0xb4, 0x07, 0x93, 0x1b, 0x8d, 0x1c, 0x75, 0x60, 0xa3,
	0x10, 0x17, 0x65, 0x1e, 0x83, 0xa1, 0xb5, 0x88, 0xd7, 0xa3, 0xcf, 0x15, 0x71, 0x25, 0x74, 0x16,
	0x39, 0x97, 0xa5, 0x1e, 0xc0, 0x9c, 0x15, 0xda, 0xea, 0x44, 0x08, 0x0d, 0xa9, 0x64, 0x86, 0x91,
	0x22, 0xc0, 0x47, 0x65, 0x6b, 0x16, 0x39, 0xef, 0x93, 0x38, 0x61, 0x73, 0x87, 0x36, 0xdc, 0xb1,
	0x42, 0x7b, 0x9b, 0x78, 0x92, 0xb8, 0x76, 0xe8, 0xa2, 0x21, 0x5c, 0xb2, 0x45, 0xbb, 0xd0, 0xb0,
	0x42, 0x7b, 0x8f, 0x24, 0x82, 0x99, 0xc9, 0x5d, 0x50, 0xb8, 0x3b, 0x6c, 0xcc, 0x61, 0x0c, 0x2b,
	0xb8, 0x07, 0xd0, 0x94, 0xe4, 0xd0, 0x5e, 0x47, 0xcc, 0x12, 0xae, 0x2b, 0x4e, 0x90, 0xb3, 0x77,
	0x98, 0x05, 0x2b, 0x92, 0xb8, 0x23, 0x62, 0x07, 0xbe, 0x83, 0xa3, 0xab, 0x0f, 0x90, 0xd9, 0x81,
	0xf9, 0x82, 0xab, 0x87, 0xe4, 0xf2, 0x7d, 0xbc, 0x7d, 0x01, 0xcb, 0x65, 0xde, 0xde, 0x40, 0x62,
	0xde, 0xb8, 0x13, 0x58, 0x1d, 0xea, 0xf0, 0x7b, 0x8a, 0x7d, 0xca, 0x02, 0x6e, 0x8f, 0x24, 0x3c,
	0x42, 0xc4, 0x38, 0xaa, 0x4c, 0xd2, 0x5d, 0xe9, 0xb6, 0xa9, 0x33, 0xc4, 0xbd, 0x54, 0x16, 0x7f,
	0xc5, 0x9c, 0x62, 0xbe, 0x3c, 0x2c, 0xd4, 0xe6, 0x25, 0x81, 0xe9, 0x70, 0xef, 0x08, 0x96, 0xf2,
	0x82, 0xb2, 0xd7, 0xd1, 0x48, 0x71, 0x86, 0x24, 0x4e, 0x1e, 0xe3, 0x3d, 0x86, 0x3a, 0xbd, 0x0b,
	0xd9, 0xed, 0x43, 0x32, 0xb1, 0x34, 0x30, 0x93, 0xaf, 0xc0, 0x13, 0x76, 0x05, 0x2c, 0x82, 0x9d,
	0xc1, 0x58, 0x00, 0x2d, 0x4a, 0xdc, 0x83, 0x59, 0x9f, 0xcc, 0xfa, 0x3d, 0x83, 0x44, 0x1d, 0x82,
	0xa1, 0x55, 0x39, 0x6b, 0x15, 0x67, 0x64, 0x86, 0x39, 0x82, 0x22, 0xf4, 0xe8, 0xd5, 0xac, 0xb1,
	0x64, 0x21, 0x26, 0x66, 0xa8, 0x7c, 0x30, 0x66, 0x2c, 0xcb, 0xc0, 0xc8, 0x43, 0xb6, 0x5f, 0xc3,
	0x0c, 0x87, 0x3b, 0x9b, 0x61, 0xe5, 0x7d, 0x30, 0x16, 0x64, 0xde, 0x94, 0xe6, 0x65, 0x7a, 0x5b,
	0x94, 0x39, 0xcf, 0xb2, 0xa6, 0x81, 0x4a, 0x37, 0x95, 0x00, 0x52, 0x87, 0x3e, 0x7f, 0x81, 0xc5,
	0x9c, 0xc8, 0xfc, 0x34, 0x04, 0x7d, 0x5c, 0x64, 0x54, 0x06, 0x32, 0x0a, 0x64, 0xfa, 0x81, 0x8a,
	0xcb, 0xb2, 0x76, 0xaa, 0x41, 0x19, 0x5d, 0xa0, 0x4f, 0x8b, 0x12, 0x8a, 0x23, 0x13, 0xe3, 0xfe,
	0x35, 0xa8, 0xe2, 0x10, 0x7d, 0xc7, 0xa2, 0x46, 0x7e, 0xf4, 0xa3, 0x96, 0x3e, 0x40, 0xf5, 0xc5,
	0xe0, 0x35, 0x83, 0x43, 0x37, 0x8b, 0x50, 0x2c, 0x2d, 0x99, 0x74, 0x28, 0x96, 0x96, 0x0e, 0x35,
	0x7e, 0xcf, 0xce, 0x3f, 0x37, 0x7f, 0x50, 0xce, 0x50, 0x9e, 0x5c, 0x28, 0x67, 0xa8, 0x8e, 0x2d,
	0xda, 0xcc, 0x6d, 0x79, 0x20, 0x21, 0xc7, 0xd3, 0x3d, 0x0d, 0xbf, 0x34, 0xba, 0xd8, 0x4c, 0xf3,
	0x88, 0xd4, 0xa1, 0xc9, 0x42, 0x5a, 0xc5, 0x43, 0x90, 0xc6, 0xa7, 0xfb, 0x30, 0x9b, 0x93, 0xc1,
	0xf8, 0x97, 0x8a, 0x2c, 0x29, 0x50, 0x46, 0xd9, 0x16, 0x93, 0x54, 0x4f, 0x0b, 0x3d, 0x77, 0xc6,
	0x28, 0x3e, 0x39, 0x32, 0x6c, 0x96, 0x4b, 0xf7, 0xe2, 0x10, 0x1d, 0x32, 0x9b, 0xf2, 0xcd, 0x3f,
	0x92, 0xb1, 0x54, 0x46, 0x09, 0xc6, 0xca, 0x90, 0xdd, 0x38, 0x44, 0x27, 0xac, 0xc8, 0x94, 0x0d,
	0x00, 0x64, 0xbc, 0x3e, 0xd7, 0x07, 0x9e, 0x6e, 0x68, 0xf0, 0x47, 0x40, 0xf4, 0x04, 0xe5, 0x76,
	0x1c, 0x29, 0xa7, 0x56, 0x18, 0x0d, 0x18, 0xab, 0xc3, 0x09, 0xe2, 0x10, 0x45, 0xf0, 0x89, 0x15,
	0xf2, 0x87, 0xcf, 0x7e, 0x90, 0xd6, 0xb1, 0x62, 0xb7, 0xfc, 0xb3, 0xde, 0xc2, 0x6f, 0x58, 0x8e,
	0xcc, 0xfa, 0x66, 0x19, 0x14, 0xcd, 0xb1, 0x67, 0xcd, 0x35, 0x47, 0x41, 0x69, 0x65, 0x15, 0x14,
	0x8a, 0x4d, 0xb5, 0x82, 0x82, 0xae, 0x13, 0xe6, 0xb7, 0x5a, 0xd7, 0xa1, 0xea, 0x3c, 0x2f, 0x36,
	0xbc, 0x3a, 0xcf, 0x75, 0xad, 0xee, 0x29, 0x7f, 0x4a, 0x2a, 0x9d, 0xa2, 0x52, 0x7a, 0x34, 0x0d,
	0xac, 0xf1, 0xf1, 0x08, 0x0a, 0x19, 0x9c, 0x41, 0x6b, 0xa7, 0x03, 0x47, 0x6a, 0x3d, 0x75, 0xe0,
	0x28, 0x9d, 0xe1, 0x26, 0x4c, 0xa7, 0x82, 0x69, 0x89, 0x6e, 0x6a, 0x6e, 0x39, 0x2f, 0xd0, 0x4b,
	0x25, 0x3b, 0x71, 0x88, 0x8e, 0x59, 0x06, 0x92, 0xdb, 0x34, 0xd4, 0xd2, 0xd2, 0x67, 0xbd, 0xa0,
	0x71, 0x6f, 0xe8, 0x7e, 0x1c, 0xa2, 0xef, 0xa1, 0x95, 0x4a, 0xd5, 0xb7, 0x75, 0x72, 0x68, 0x7d,
	0xa9, 0xc9, 0x28, 0xe5, 0xdd, 0x20, 0xc7, 0x53, 0xe9, 0xe2, 0x14, 0x3c, 0x8b, 0xad, 0xa0, 0x82,
	0xa7, 0xae, 0x09, 0x74, 0xd9, 0xab, 0x5b, 0xdb, 0x7d, 0xa1, 0xd2, 0x38, 0x92, 0x7a, 0x43, 0xe3,
	0xb3, 0xeb, 0x90, 0xc5, 0xe1, 0xc6, 0xff, 0x2a, 0xd0, 0xa0, 0xbd, 0xda, 0x46, 0xbe, 0x7b, 0x43,
	0xbf, 0x65, 0x51, 0x28, 0xb2, 0x81, 0x97, 0xe9, 0x9e, 0x57, 0xdf, 0x14, 0xec, 0xe9, 0x34, 0xc3,
	0x11, 0x3c, 0x0c, 0x2c, 0x92, 0xf4, 0x23, 0x1f, 0x1d, 0x32, 0xe6, 0x43, 0x72, 0x29, 0x5e, 0x9a,
	0xe2, 0x1f, 0xd2, 0x07, 0x12, 0x73, 0xf9, 0x5f, 0xa9, 0x05, 0x79, 0xcf, 0x59, 0xd3, 0x30, 0x68,
	0xed, 0x0a, 0x66, 0xb5, 0x54, 0xc9, 0xf2, 0x5f, 0xfd, 0xaa, 0xc0, 0xcd, 0xda, 0xbf, 0xdf, 0xb5,
	0x2a, 0xff, 0x79, 0xd7, 0xaa, 0xfc, 0xf7, 0x5d, 0xab, 0xf2, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x5c, 0x29, 0x8b, 0x85, 0x18, 0x21, 0x00, 0x00,
}

func (m *AllInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SquareInfo) > 0 {
		for _, msg := range m.SquareInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.FirstAddSquareDynamic != nil {
		dAtA[i] = 0x10
		i++
		if *m.FirstAddSquareDynamic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NewVersionAllInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewVersionAllInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SquareInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSquare(dAtA, i, uint64(m.SquareInfo.Size()))
		n1, err := m.SquareInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.FirstAddSquareDynamic != nil {
		dAtA[i] = 0x10
		i++
		if *m.FirstAddSquareDynamic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Type != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FlushInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlushInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LogId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.LogId))
	}
	if m.Type != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Type))
	}
	if m.FlushType != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.FlushType))
	}
	if m.AdvId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.AdvId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MessageMainInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageMainInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CommentData) > 0 {
		for _, msg := range m.CommentData {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DynamicData) > 0 {
		for _, msg := range m.DynamicData {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.UnreadComment != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.UnreadComment))
	}
	if m.UnreadZan != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.UnreadZan))
	}
	if m.UnreadAttention != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.UnreadAttention))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ZanList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZanList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ZanData) > 0 {
		for _, msg := range m.ZanData {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DynamicData) > 0 {
		for _, msg := range m.DynamicData {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AttentionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttentionList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AttentionData) > 0 {
		for _, msg := range m.AttentionData {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UnReadInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnReadInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NewUnReadMessageRespForApi) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewUnReadMessageRespForApi) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UnreadComment != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.UnreadComment))
	}
	if m.UnreadZan != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.UnreadZan))
	}
	if m.UnreadAttention != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.UnreadAttention))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DynamicTopReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynamicTopReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Coin != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Coin))
	}
	if m.LogId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.LogId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FirstLoginSquareReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FirstLoginSquareReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ZanCount != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.ZanCount))
	}
	if m.CommentCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.CommentCount))
	}
	if m.IsBrowse2Square != nil {
		dAtA[i] = 0x18
		i++
		if *m.IsBrowse2Square {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FirstLoginSquareReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FirstLoginSquareReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsBrowse2Square != nil {
		dAtA[i] = 0x8
		i++
		if *m.IsBrowse2Square {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdvDetailReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvDetailReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AdvSetting != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSquare(dAtA, i, uint64(m.AdvSetting.Size()))
		n2, err := m.AdvSetting.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.DataType != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.DataType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OneTopicType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OneTopicType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TopicType != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSquare(dAtA, i, uint64(m.TopicType.Size()))
		n3, err := m.TopicType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.TopicList) > 0 {
		for _, msg := range m.TopicList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AllTopic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllTopic) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TopicTypeList) > 0 {
		for _, msg := range m.TopicTypeList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicTypeListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicTypeListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TopicTypeList) > 0 {
		for _, msg := range m.TopicTypeList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TopicTypeId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.TopicTypeId))
	}
	if m.Page != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Page))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TopicList) > 0 {
		for _, msg := range m.TopicList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Count != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicDetailReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicDetailReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSquare(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicDetailResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicDetailResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Topic != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSquare(dAtA, i, uint64(m.Topic.Size()))
		n4, err := m.Topic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.RelatedTopics) > 0 {
		for _, msg := range m.RelatedTopics {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TopicMasterInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSquare(dAtA, i, uint64(m.TopicMasterInfo.Size()))
		n5, err := m.TopicMasterInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicMainPageListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicMainPageListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Id))
	}
	if m.ReqType != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.ReqType))
	}
	if m.Page != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Page))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.PageSize))
	}
	if m.Name != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSquare(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicMainPageListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicMainPageListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DynamicList) > 0 {
		for _, msg := range m.DynamicList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.DynamicCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.DynamicCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicParticipateListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicParticipateListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Id))
	}
	if m.Page != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Page))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.PageSize))
	}
	if m.Name != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSquare(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicParticipateListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicParticipateListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerList) > 0 {
		for _, msg := range m.PlayerList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.PlayerCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.PlayerCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AttentionTopicReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttentionTopicReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, num := range m.Id {
			dAtA[i] = 0x8
			i++
			i = encodeVarintSquare(dAtA, i, uint64(num))
		}
	}
	if m.Operate != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Operate))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MyAttentionTopicListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MyAttentionTopicListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Page))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MyAttentionTopicListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MyAttentionTopicListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TopicList) > 0 {
		for _, msg := range m.TopicList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Count != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SearchTopicReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchTopicReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSquare(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SearchTopicResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchTopicResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TopicList) > 0 {
		for _, msg := range m.TopicList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SearchHotTopicResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchHotTopicResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TopicList) > 0 {
		for _, msg := range m.TopicList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FlushTopicReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlushTopicReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Page))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicDynamicList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicDynamicList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Topic != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSquare(dAtA, i, uint64(m.Topic.Size()))
		n6, err := m.Topic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.DynamicList) > 0 {
		for _, msg := range m.DynamicList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.TopicParticipatePlayer) > 0 {
		for _, msg := range m.TopicParticipatePlayer {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FlushTopicResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlushTopicResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TopicDynamicList) > 0 {
		for _, msg := range m.TopicDynamicList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Count != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HotTopicListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HotTopicListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Page))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HotTopicListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HotTopicListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TopicList) > 0 {
		for _, msg := range m.TopicList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Count != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AttentionRecommendPlayerResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttentionRecommendPlayerResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerList) > 0 {
		for _, msg := range m.PlayerList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SquareAttentionReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SquareAttentionReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Page))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.PageSize))
	}
	if m.HasAttentionTopic != nil {
		dAtA[i] = 0x18
		i++
		if *m.HasAttentionTopic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasAttentionPlayer != nil {
		dAtA[i] = 0x20
		i++
		if *m.HasAttentionPlayer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SquareAttentionResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SquareAttentionResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TopicList) > 0 {
		for _, msg := range m.TopicList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DynamicList) > 0 {
		for _, msg := range m.DynamicList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.TopicTypeList) > 0 {
		for _, msg := range m.TopicTypeList {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PlayerList) > 0 {
		for _, msg := range m.PlayerList {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.HasAttentionTopic != nil {
		dAtA[i] = 0x28
		i++
		if *m.HasAttentionTopic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasAttentionPlayer != nil {
		dAtA[i] = 0x30
		i++
		if *m.HasAttentionPlayer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Count != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicHeadResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicHeadResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TopicList) > 0 {
		for _, msg := range m.TopicList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicDevoteListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicDevoteListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DataType != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.DataType))
	}
	if m.Page != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Page))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.PageSize))
	}
	if m.TopicName != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSquare(dAtA, i, uint64(len(*m.TopicName)))
		i += copy(dAtA[i:], *m.TopicName)
	}
	if m.TopicId != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.TopicId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicDevoteListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicDevoteListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DevoteList) > 0 {
		for _, msg := range m.DevoteList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Count != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicMasterConditionReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicMasterConditionReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TopicId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.TopicId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicMasterConditionResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicMasterConditionResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Registered != nil {
		dAtA[i] = 0x8
		i++
		if *m.Registered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Follow != nil {
		dAtA[i] = 0x10
		i++
		if *m.Follow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Dynamic != nil {
		dAtA[i] = 0x18
		i++
		if *m.Dynamic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.GeneralStatus != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if *m.GeneralStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ApplyTopicMasterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyTopicMasterReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TopicId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.TopicId))
	}
	if m.IsManageExp != nil {
		dAtA[i] = 0x20
		i++
		if *m.IsManageExp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Reason != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSquare(dAtA, i, uint64(len(*m.Reason)))
		i += copy(dAtA[i:], *m.Reason)
	}
	if m.ContactDetails != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSquare(dAtA, i, uint64(len(*m.ContactDetails)))
		i += copy(dAtA[i:], *m.ContactDetails)
	}
	if m.TopicName != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSquare(dAtA, i, uint64(len(*m.TopicName)))
		i += copy(dAtA[i:], *m.TopicName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ApplyTopicMasterResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyTopicMasterResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicMasterEditReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicMasterEditReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TopicId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.TopicId))
	}
	if m.TopicName != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSquare(dAtA, i, uint64(len(*m.TopicName)))
		i += copy(dAtA[i:], *m.TopicName)
	}
	if m.HeadURL != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSquare(dAtA, i, uint64(len(*m.HeadURL)))
		i += copy(dAtA[i:], *m.HeadURL)
	}
	if m.Description != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSquare(dAtA, i, uint64(len(*m.Description)))
		i += copy(dAtA[i:], *m.Description)
	}
	if m.BgUrl != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSquare(dAtA, i, uint64(len(*m.BgUrl)))
		i += copy(dAtA[i:], *m.BgUrl)
	}
	if m.TopicRule != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSquare(dAtA, i, uint64(len(*m.TopicRule)))
		i += copy(dAtA[i:], *m.TopicRule)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicMasterEditResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicMasterEditResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicTopReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicTopReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TopicId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.TopicId))
	}
	if m.LogId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.LogId))
	}
	if m.TopicName != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSquare(dAtA, i, uint64(len(*m.TopicName)))
		i += copy(dAtA[i:], *m.TopicName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicTopResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicTopResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicTopCancelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicTopCancelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TopicId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.TopicId))
	}
	if m.LogId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.LogId))
	}
	if m.TopicName != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSquare(dAtA, i, uint64(len(*m.TopicName)))
		i += copy(dAtA[i:], *m.TopicName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicTopCancelResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicTopCancelResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicLeaderBoardDescriptionResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicLeaderBoardDescriptionResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rule) > 0 {
		for _, s := range m.Rule {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Introduction) > 0 {
		for _, s := range m.Introduction {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *QuitTopicMasterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuitTopicMasterReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TopicId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.TopicId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *QuitTopicMasterResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuitTopicMasterResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicMasterDelDynamicReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicMasterDelDynamicReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TopicId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.TopicId))
	}
	if m.LogId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.LogId))
	}
	if m.DelReasonId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.DelReasonId))
	}
	if m.DelReasonMsg != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSquare(dAtA, i, uint64(len(*m.DelReasonMsg)))
		i += copy(dAtA[i:], *m.DelReasonMsg)
	}
	if m.TopicName != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSquare(dAtA, i, uint64(len(*m.TopicName)))
		i += copy(dAtA[i:], *m.TopicName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicMasterDelDynamicResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicMasterDelDynamicResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSquare(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AllInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SquareInfo) > 0 {
		for _, e := range m.SquareInfo {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if m.FirstAddSquareDynamic != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewVersionAllInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SquareInfo != nil {
		l = m.SquareInfo.Size()
		n += 1 + l + sovSquare(uint64(l))
	}
	if m.FirstAddSquareDynamic != nil {
		n += 2
	}
	if m.Type != nil {
		n += 1 + sovSquare(uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlushInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogId != nil {
		n += 1 + sovSquare(uint64(*m.LogId))
	}
	if m.Type != nil {
		n += 1 + sovSquare(uint64(*m.Type))
	}
	if m.FlushType != nil {
		n += 1 + sovSquare(uint64(*m.FlushType))
	}
	if m.AdvId != nil {
		n += 1 + sovSquare(uint64(*m.AdvId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageMainInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CommentData) > 0 {
		for _, e := range m.CommentData {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if len(m.DynamicData) > 0 {
		for _, e := range m.DynamicData {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if m.UnreadComment != nil {
		n += 1 + sovSquare(uint64(*m.UnreadComment))
	}
	if m.UnreadZan != nil {
		n += 1 + sovSquare(uint64(*m.UnreadZan))
	}
	if m.UnreadAttention != nil {
		n += 1 + sovSquare(uint64(*m.UnreadAttention))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ZanList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ZanData) > 0 {
		for _, e := range m.ZanData {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if len(m.DynamicData) > 0 {
		for _, e := range m.DynamicData {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AttentionList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AttentionData) > 0 {
		for _, e := range m.AttentionData {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UnReadInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovSquare(uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewUnReadMessageRespForApi) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnreadComment != nil {
		n += 1 + sovSquare(uint64(*m.UnreadComment))
	}
	if m.UnreadZan != nil {
		n += 1 + sovSquare(uint64(*m.UnreadZan))
	}
	if m.UnreadAttention != nil {
		n += 1 + sovSquare(uint64(*m.UnreadAttention))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynamicTopReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Coin != nil {
		n += 1 + sovSquare(uint64(*m.Coin))
	}
	if m.LogId != nil {
		n += 1 + sovSquare(uint64(*m.LogId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FirstLoginSquareReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ZanCount != nil {
		n += 1 + sovSquare(uint64(*m.ZanCount))
	}
	if m.CommentCount != nil {
		n += 1 + sovSquare(uint64(*m.CommentCount))
	}
	if m.IsBrowse2Square != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FirstLoginSquareReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsBrowse2Square != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdvDetailReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvSetting != nil {
		l = m.AdvSetting.Size()
		n += 1 + l + sovSquare(uint64(l))
	}
	if m.DataType != nil {
		n += 1 + sovSquare(uint64(*m.DataType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OneTopicType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicType != nil {
		l = m.TopicType.Size()
		n += 1 + l + sovSquare(uint64(l))
	}
	if len(m.TopicList) > 0 {
		for _, e := range m.TopicList {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllTopic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TopicTypeList) > 0 {
		for _, e := range m.TopicTypeList {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicTypeListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TopicTypeList) > 0 {
		for _, e := range m.TopicTypeList {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicTypeId != nil {
		n += 1 + sovSquare(uint64(*m.TopicTypeId))
	}
	if m.Page != nil {
		n += 1 + sovSquare(uint64(*m.Page))
	}
	if m.PageSize != nil {
		n += 1 + sovSquare(uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TopicList) > 0 {
		for _, e := range m.TopicList {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if m.Count != nil {
		n += 1 + sovSquare(uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicDetailReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovSquare(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovSquare(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicDetailResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Topic != nil {
		l = m.Topic.Size()
		n += 1 + l + sovSquare(uint64(l))
	}
	if len(m.RelatedTopics) > 0 {
		for _, e := range m.RelatedTopics {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if m.TopicMasterInfo != nil {
		l = m.TopicMasterInfo.Size()
		n += 1 + l + sovSquare(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicMainPageListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovSquare(uint64(*m.Id))
	}
	if m.ReqType != nil {
		n += 1 + sovSquare(uint64(*m.ReqType))
	}
	if m.Page != nil {
		n += 1 + sovSquare(uint64(*m.Page))
	}
	if m.PageSize != nil {
		n += 1 + sovSquare(uint64(*m.PageSize))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovSquare(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicMainPageListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DynamicList) > 0 {
		for _, e := range m.DynamicList {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if m.DynamicCount != nil {
		n += 1 + sovSquare(uint64(*m.DynamicCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicParticipateListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovSquare(uint64(*m.Id))
	}
	if m.Page != nil {
		n += 1 + sovSquare(uint64(*m.Page))
	}
	if m.PageSize != nil {
		n += 1 + sovSquare(uint64(*m.PageSize))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovSquare(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicParticipateListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PlayerList) > 0 {
		for _, e := range m.PlayerList {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if m.PlayerCount != nil {
		n += 1 + sovSquare(uint64(*m.PlayerCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AttentionTopicReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, e := range m.Id {
			n += 1 + sovSquare(uint64(e))
		}
	}
	if m.Operate != nil {
		n += 1 + sovSquare(uint64(*m.Operate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MyAttentionTopicListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		n += 1 + sovSquare(uint64(*m.Page))
	}
	if m.PageSize != nil {
		n += 1 + sovSquare(uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MyAttentionTopicListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TopicList) > 0 {
		for _, e := range m.TopicList {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if m.Count != nil {
		n += 1 + sovSquare(uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchTopicReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovSquare(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchTopicResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TopicList) > 0 {
		for _, e := range m.TopicList {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchHotTopicResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TopicList) > 0 {
		for _, e := range m.TopicList {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlushTopicReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		n += 1 + sovSquare(uint64(*m.Page))
	}
	if m.PageSize != nil {
		n += 1 + sovSquare(uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicDynamicList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Topic != nil {
		l = m.Topic.Size()
		n += 1 + l + sovSquare(uint64(l))
	}
	if len(m.DynamicList) > 0 {
		for _, e := range m.DynamicList {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if len(m.TopicParticipatePlayer) > 0 {
		for _, e := range m.TopicParticipatePlayer {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlushTopicResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TopicDynamicList) > 0 {
		for _, e := range m.TopicDynamicList {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if m.Count != nil {
		n += 1 + sovSquare(uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HotTopicListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		n += 1 + sovSquare(uint64(*m.Page))
	}
	if m.PageSize != nil {
		n += 1 + sovSquare(uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HotTopicListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TopicList) > 0 {
		for _, e := range m.TopicList {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if m.Count != nil {
		n += 1 + sovSquare(uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AttentionRecommendPlayerResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PlayerList) > 0 {
		for _, e := range m.PlayerList {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SquareAttentionReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		n += 1 + sovSquare(uint64(*m.Page))
	}
	if m.PageSize != nil {
		n += 1 + sovSquare(uint64(*m.PageSize))
	}
	if m.HasAttentionTopic != nil {
		n += 2
	}
	if m.HasAttentionPlayer != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SquareAttentionResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TopicList) > 0 {
		for _, e := range m.TopicList {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if len(m.DynamicList) > 0 {
		for _, e := range m.DynamicList {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if len(m.TopicTypeList) > 0 {
		for _, e := range m.TopicTypeList {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if len(m.PlayerList) > 0 {
		for _, e := range m.PlayerList {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if m.HasAttentionTopic != nil {
		n += 2
	}
	if m.HasAttentionPlayer != nil {
		n += 2
	}
	if m.Count != nil {
		n += 1 + sovSquare(uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicHeadResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TopicList) > 0 {
		for _, e := range m.TopicList {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicDevoteListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataType != nil {
		n += 1 + sovSquare(uint64(*m.DataType))
	}
	if m.Page != nil {
		n += 1 + sovSquare(uint64(*m.Page))
	}
	if m.PageSize != nil {
		n += 1 + sovSquare(uint64(*m.PageSize))
	}
	if m.TopicName != nil {
		l = len(*m.TopicName)
		n += 1 + l + sovSquare(uint64(l))
	}
	if m.TopicId != nil {
		n += 1 + sovSquare(uint64(*m.TopicId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicDevoteListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DevoteList) > 0 {
		for _, e := range m.DevoteList {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if m.Count != nil {
		n += 1 + sovSquare(uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicMasterConditionReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != nil {
		n += 1 + sovSquare(uint64(*m.TopicId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicMasterConditionResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Registered != nil {
		n += 2
	}
	if m.Follow != nil {
		n += 2
	}
	if m.Dynamic != nil {
		n += 2
	}
	if m.GeneralStatus != nil {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplyTopicMasterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != nil {
		n += 1 + sovSquare(uint64(*m.TopicId))
	}
	if m.IsManageExp != nil {
		n += 2
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovSquare(uint64(l))
	}
	if m.ContactDetails != nil {
		l = len(*m.ContactDetails)
		n += 1 + l + sovSquare(uint64(l))
	}
	if m.TopicName != nil {
		l = len(*m.TopicName)
		n += 1 + l + sovSquare(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplyTopicMasterResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += 1 + sovSquare(uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicMasterEditReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != nil {
		n += 1 + sovSquare(uint64(*m.TopicId))
	}
	if m.TopicName != nil {
		l = len(*m.TopicName)
		n += 1 + l + sovSquare(uint64(l))
	}
	if m.HeadURL != nil {
		l = len(*m.HeadURL)
		n += 1 + l + sovSquare(uint64(l))
	}
	if m.Description != nil {
		l = len(*m.Description)
		n += 1 + l + sovSquare(uint64(l))
	}
	if m.BgUrl != nil {
		l = len(*m.BgUrl)
		n += 2 + l + sovSquare(uint64(l))
	}
	if m.TopicRule != nil {
		l = len(*m.TopicRule)
		n += 2 + l + sovSquare(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicMasterEditResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += 1 + sovSquare(uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicTopReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != nil {
		n += 1 + sovSquare(uint64(*m.TopicId))
	}
	if m.LogId != nil {
		n += 1 + sovSquare(uint64(*m.LogId))
	}
	if m.TopicName != nil {
		l = len(*m.TopicName)
		n += 1 + l + sovSquare(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicTopResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += 1 + sovSquare(uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicTopCancelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != nil {
		n += 1 + sovSquare(uint64(*m.TopicId))
	}
	if m.LogId != nil {
		n += 1 + sovSquare(uint64(*m.LogId))
	}
	if m.TopicName != nil {
		l = len(*m.TopicName)
		n += 1 + l + sovSquare(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicTopCancelResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += 1 + sovSquare(uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicLeaderBoardDescriptionResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rule) > 0 {
		for _, s := range m.Rule {
			l = len(s)
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if len(m.Introduction) > 0 {
		for _, s := range m.Introduction {
			l = len(s)
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QuitTopicMasterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != nil {
		n += 1 + sovSquare(uint64(*m.TopicId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QuitTopicMasterResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += 1 + sovSquare(uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicMasterDelDynamicReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != nil {
		n += 1 + sovSquare(uint64(*m.TopicId))
	}
	if m.LogId != nil {
		n += 1 + sovSquare(uint64(*m.LogId))
	}
	if m.DelReasonId != nil {
		n += 1 + sovSquare(uint64(*m.DelReasonId))
	}
	if m.DelReasonMsg != nil {
		l = len(*m.DelReasonMsg)
		n += 1 + l + sovSquare(uint64(l))
	}
	if m.TopicName != nil {
		l = len(*m.TopicName)
		n += 1 + l + sovSquare(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicMasterDelDynamicResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += 1 + sovSquare(uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSquare(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSquare(x uint64) (n int) {
	return sovSquare(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AllInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SquareInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SquareInfo = append(m.SquareInfo, &share_message.DynamicData{})
			if err := m.SquareInfo[len(m.SquareInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstAddSquareDynamic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.FirstAddSquareDynamic = &b
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewVersionAllInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewVersionAllInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewVersionAllInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SquareInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SquareInfo == nil {
				m.SquareInfo = &share_message.DynamicDataListPage{}
			}
			if err := m.SquareInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstAddSquareDynamic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.FirstAddSquareDynamic = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlushInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlushInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlushInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlushType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlushType = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdvId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageMainInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageMainInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageMainInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentData = append(m.CommentData, &share_message.CommentData{})
			if err := m.CommentData[len(m.CommentData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DynamicData = append(m.DynamicData, &share_message.DynamicData{})
			if err := m.DynamicData[len(m.DynamicData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadComment", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnreadComment = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadZan", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnreadZan = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadAttention", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnreadAttention = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZanList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZanList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZanList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZanData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZanData = append(m.ZanData, &share_message.ZanData{})
			if err := m.ZanData[len(m.ZanData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DynamicData = append(m.DynamicData, &share_message.DynamicData{})
			if err := m.DynamicData[len(m.DynamicData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttentionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttentionList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttentionList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttentionData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttentionData = append(m.AttentionData, &share_message.AttentionData{})
			if err := m.AttentionData[len(m.AttentionData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnReadInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnReadInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnReadInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewUnReadMessageRespForApi) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewUnReadMessageRespForApi: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewUnReadMessageRespForApi: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadComment", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnreadComment = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadZan", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnreadZan = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadAttention", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnreadAttention = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynamicTopReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynamicTopReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynamicTopReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Coin = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FirstLoginSquareReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FirstLoginSquareReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FirstLoginSquareReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZanCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ZanCount = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommentCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBrowse2Square", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsBrowse2Square = &b
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FirstLoginSquareReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FirstLoginSquareReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FirstLoginSquareReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBrowse2Square", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsBrowse2Square = &b
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvDetailReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvDetailReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvDetailReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdvSetting == nil {
				m.AdvSetting = &share_message.AdvSetting{}
			}
			if err := m.AdvSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OneTopicType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OneTopicType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OneTopicType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopicType == nil {
				m.TopicType = &share_message.TopicType{}
			}
			if err := m.TopicType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicList = append(m.TopicList, &share_message.Topic{})
			if err := m.TopicList[len(m.TopicList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllTopic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllTopic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllTopic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicTypeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicTypeList = append(m.TopicTypeList, &OneTopicType{})
			if err := m.TopicTypeList[len(m.TopicTypeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicTypeListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicTypeListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicTypeListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicTypeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicTypeList = append(m.TopicTypeList, &share_message.TopicType{})
			if err := m.TopicTypeList[len(m.TopicTypeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicTypeId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicTypeId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicList = append(m.TopicList, &share_message.Topic{})
			if err := m.TopicList[len(m.TopicList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicDetailReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicDetailReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicDetailReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicDetailResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicDetailResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicDetailResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Topic == nil {
				m.Topic = &share_message.Topic{}
			}
			if err := m.Topic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelatedTopics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelatedTopics = append(m.RelatedTopics, &share_message.Topic{})
			if err := m.RelatedTopics[len(m.RelatedTopics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicMasterInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopicMasterInfo == nil {
				m.TopicMasterInfo = &share_message.TeamPlayerInfo{}
			}
			if err := m.TopicMasterInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicMainPageListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicMainPageListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicMainPageListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReqType = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicMainPageListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicMainPageListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicMainPageListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DynamicList = append(m.DynamicList, &share_message.DynamicData{})
			if err := m.DynamicList[len(m.DynamicList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DynamicCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicParticipateListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicParticipateListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicParticipateListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicParticipateListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicParticipateListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicParticipateListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerList = append(m.PlayerList, &share_message.TopicParticipatePlayer{})
			if err := m.PlayerList[len(m.PlayerList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttentionTopicReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttentionTopicReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttentionTopicReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSquare
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSquare
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSquare
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSquare
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSquare
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operate", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Operate = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MyAttentionTopicListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MyAttentionTopicListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MyAttentionTopicListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MyAttentionTopicListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MyAttentionTopicListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MyAttentionTopicListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicList = append(m.TopicList, &share_message.Topic{})
			if err := m.TopicList[len(m.TopicList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchTopicReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchTopicReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchTopicReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchTopicResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchTopicResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchTopicResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicList = append(m.TopicList, &share_message.Topic{})
			if err := m.TopicList[len(m.TopicList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchHotTopicResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchHotTopicResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchHotTopicResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicList = append(m.TopicList, &share_message.Topic{})
			if err := m.TopicList[len(m.TopicList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlushTopicReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlushTopicReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlushTopicReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicDynamicList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicDynamicList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicDynamicList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Topic == nil {
				m.Topic = &share_message.Topic{}
			}
			if err := m.Topic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DynamicList = append(m.DynamicList, &share_message.DynamicData{})
			if err := m.DynamicList[len(m.DynamicList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicParticipatePlayer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicParticipatePlayer = append(m.TopicParticipatePlayer, &share_message.TopicParticipatePlayer{})
			if err := m.TopicParticipatePlayer[len(m.TopicParticipatePlayer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlushTopicResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlushTopicResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlushTopicResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicDynamicList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicDynamicList = append(m.TopicDynamicList, &TopicDynamicList{})
			if err := m.TopicDynamicList[len(m.TopicDynamicList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HotTopicListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HotTopicListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HotTopicListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HotTopicListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HotTopicListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HotTopicListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicList = append(m.TopicList, &share_message.Topic{})
			if err := m.TopicList[len(m.TopicList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttentionRecommendPlayerResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttentionRecommendPlayerResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttentionRecommendPlayerResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerList = append(m.PlayerList, &share_message.TopicParticipatePlayer{})
			if err := m.PlayerList[len(m.PlayerList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SquareAttentionReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SquareAttentionReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SquareAttentionReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasAttentionTopic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.HasAttentionTopic = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasAttentionPlayer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.HasAttentionPlayer = &b
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SquareAttentionResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SquareAttentionResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SquareAttentionResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicList = append(m.TopicList, &share_message.Topic{})
			if err := m.TopicList[len(m.TopicList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DynamicList = append(m.DynamicList, &share_message.DynamicData{})
			if err := m.DynamicList[len(m.DynamicList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicTypeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicTypeList = append(m.TopicTypeList, &OneTopicType{})
			if err := m.TopicTypeList[len(m.TopicTypeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerList = append(m.PlayerList, &share_message.TopicParticipatePlayer{})
			if err := m.PlayerList[len(m.PlayerList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasAttentionTopic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.HasAttentionTopic = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasAttentionPlayer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.HasAttentionPlayer = &b
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicHeadResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicHeadResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicHeadResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicList = append(m.TopicList, &share_message.Topic{})
			if err := m.TopicList[len(m.TopicList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicDevoteListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicDevoteListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicDevoteListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataType = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TopicName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicDevoteListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicDevoteListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicDevoteListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevoteList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevoteList = append(m.DevoteList, &share_message.TopicDevote{})
			if err := m.DevoteList[len(m.DevoteList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicMasterConditionReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicMasterConditionReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicMasterConditionReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicMasterConditionResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicMasterConditionResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicMasterConditionResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Registered = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Follow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Follow = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dynamic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Dynamic = &b
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeneralStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.GeneralStatus = &b
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyTopicMasterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyTopicMasterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyTopicMasterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsManageExp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsManageExp = &b
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactDetails", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ContactDetails = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TopicName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyTopicMasterResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyTopicMasterResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyTopicMasterResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicMasterEditReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicMasterEditReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicMasterEditReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TopicName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadURL = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Description = &s
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BgUrl = &s
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicRule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TopicRule = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicMasterEditResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicMasterEditResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicMasterEditResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicTopReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicTopReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicTopReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TopicName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicTopResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicTopResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicTopResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicTopCancelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicTopCancelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicTopCancelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TopicName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicTopCancelResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicTopCancelResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicTopCancelResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicLeaderBoardDescriptionResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicLeaderBoardDescriptionResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicLeaderBoardDescriptionResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rule = append(m.Rule, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Introduction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Introduction = append(m.Introduction, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuitTopicMasterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuitTopicMasterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuitTopicMasterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuitTopicMasterResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuitTopicMasterResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuitTopicMasterResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicMasterDelDynamicReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicMasterDelDynamicReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicMasterDelDynamicReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelReasonId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DelReasonId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelReasonMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DelReasonMsg = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TopicName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicMasterDelDynamicResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicMasterDelDynamicResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicMasterDelDynamicResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSquare(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSquare
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSquare
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSquare
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSquare(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSquare
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSquare = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSquare   = fmt.Errorf("proto: integer overflow")
)
