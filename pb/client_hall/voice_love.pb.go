// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: voice_love.proto

package client_hall

import (
	fmt "fmt"
	share_message "game_server/pb/share_message"
	proto "github.com/akqp2019/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//匹配数据请求，每次返回
type LoveMatchResp struct {
	Cards                []*VoiceCard `protobuf:"bytes,1,rep,name=Cards" json:"Cards,omitempty" bson:"Cards,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" bson:"-"`
	XXX_unrecognized     []byte       `json:"-" bson:"-"`
	XXX_sizecache        int32        `json:"-" bson:"-"`
}

func (m *LoveMatchResp) Reset()         { *m = LoveMatchResp{} }
func (m *LoveMatchResp) String() string { return proto.CompactTextString(m) }
func (*LoveMatchResp) ProtoMessage()    {}
func (*LoveMatchResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{0}
}
func (m *LoveMatchResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoveMatchResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoveMatchResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoveMatchResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoveMatchResp.Merge(m, src)
}
func (m *LoveMatchResp) XXX_Size() int {
	return m.Size()
}
func (m *LoveMatchResp) XXX_DiscardUnknown() {
	xxx_messageInfo_LoveMatchResp.DiscardUnknown(m)
}

var xxx_messageInfo_LoveMatchResp proto.InternalMessageInfo

func (m *LoveMatchResp) GetCards() []*VoiceCard {
	if m != nil {
		return m.Cards
	}
	return nil
}

//语音卡片:
type VoiceCard struct {
	PlayerId             *int64                    `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	NickName             *string                   `protobuf:"bytes,2,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	HeadUrl              *string                   `protobuf:"bytes,3,opt,name=HeadUrl" json:"HeadUrl,omitempty" bson:"HeadUrl,omitempty"`
	Sex                  *int32                    `protobuf:"varint,4,opt,name=Sex" json:"Sex,omitempty" bson:"Sex,omitempty"`
	Constellation        *int32                    `protobuf:"varint,5,opt,name=Constellation" json:"Constellation,omitempty" bson:"Constellation,omitempty"`
	PersonalityTags      []*PersonTag              `protobuf:"bytes,6,rep,name=PersonalityTags" json:"PersonalityTags,omitempty" bson:"PersonalityTags,omitempty"`
	MatchingDegree       *int32                    `protobuf:"varint,7,opt,name=MatchingDegree" json:"MatchingDegree,omitempty" bson:"MatchingDegree,omitempty"`
	ZanNum               *int32                    `protobuf:"varint,8,opt,name=ZanNum" json:"ZanNum,omitempty" bson:"ZanNum,omitempty"`
	VoiceUrl             *string                   `protobuf:"bytes,9,opt,name=VoiceUrl" json:"VoiceUrl,omitempty" bson:"VoiceUrl,omitempty"`
	IsOnLine             *bool                     `protobuf:"varint,10,opt,name=IsOnLine" json:"IsOnLine,omitempty" bson:"IsOnLine,omitempty"`
	BgUrl                *string                   `protobuf:"bytes,11,opt,name=BgUrl" json:"BgUrl,omitempty" bson:"BgUrl,omitempty"`
	Type                 *int32                    `protobuf:"varint,12,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	Content              *string                   `protobuf:"bytes,13,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	CommonTags           []string                  `protobuf:"bytes,14,rep,name=CommonTags" json:"CommonTags,omitempty" bson:"CommonTags,omitempty"`
	AttentionTime        *int64                    `protobuf:"varint,15,opt,name=AttentionTime" json:"AttentionTime,omitempty" bson:"AttentionTime,omitempty"`
	AttentionType        *int32                    `protobuf:"varint,16,opt,name=AttentionType" json:"AttentionType,omitempty" bson:"AttentionType,omitempty"`
	Adv                  *share_message.AdvSetting `protobuf:"bytes,17,opt,name=Adv" json:"Adv,omitempty" bson:"Adv,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-" bson:"-"`
	XXX_unrecognized     []byte                    `json:"-" bson:"-"`
	XXX_sizecache        int32                     `json:"-" bson:"-"`
}

func (m *VoiceCard) Reset()         { *m = VoiceCard{} }
func (m *VoiceCard) String() string { return proto.CompactTextString(m) }
func (*VoiceCard) ProtoMessage()    {}
func (*VoiceCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{1}
}
func (m *VoiceCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoiceCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoiceCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoiceCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoiceCard.Merge(m, src)
}
func (m *VoiceCard) XXX_Size() int {
	return m.Size()
}
func (m *VoiceCard) XXX_DiscardUnknown() {
	xxx_messageInfo_VoiceCard.DiscardUnknown(m)
}

var xxx_messageInfo_VoiceCard proto.InternalMessageInfo

func (m *VoiceCard) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *VoiceCard) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *VoiceCard) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *VoiceCard) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *VoiceCard) GetConstellation() int32 {
	if m != nil && m.Constellation != nil {
		return *m.Constellation
	}
	return 0
}

func (m *VoiceCard) GetPersonalityTags() []*PersonTag {
	if m != nil {
		return m.PersonalityTags
	}
	return nil
}

func (m *VoiceCard) GetMatchingDegree() int32 {
	if m != nil && m.MatchingDegree != nil {
		return *m.MatchingDegree
	}
	return 0
}

func (m *VoiceCard) GetZanNum() int32 {
	if m != nil && m.ZanNum != nil {
		return *m.ZanNum
	}
	return 0
}

func (m *VoiceCard) GetVoiceUrl() string {
	if m != nil && m.VoiceUrl != nil {
		return *m.VoiceUrl
	}
	return ""
}

func (m *VoiceCard) GetIsOnLine() bool {
	if m != nil && m.IsOnLine != nil {
		return *m.IsOnLine
	}
	return false
}

func (m *VoiceCard) GetBgUrl() string {
	if m != nil && m.BgUrl != nil {
		return *m.BgUrl
	}
	return ""
}

func (m *VoiceCard) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *VoiceCard) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *VoiceCard) GetCommonTags() []string {
	if m != nil {
		return m.CommonTags
	}
	return nil
}

func (m *VoiceCard) GetAttentionTime() int64 {
	if m != nil && m.AttentionTime != nil {
		return *m.AttentionTime
	}
	return 0
}

func (m *VoiceCard) GetAttentionType() int32 {
	if m != nil && m.AttentionType != nil {
		return *m.AttentionType
	}
	return 0
}

func (m *VoiceCard) GetAdv() *share_message.AdvSetting {
	if m != nil {
		return m.Adv
	}
	return nil
}

//请求喜欢我的列表
type LoveMeReq struct {
	Page                 *int32   `protobuf:"varint,1,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *LoveMeReq) Reset()         { *m = LoveMeReq{} }
func (m *LoveMeReq) String() string { return proto.CompactTextString(m) }
func (*LoveMeReq) ProtoMessage()    {}
func (*LoveMeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{2}
}
func (m *LoveMeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoveMeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoveMeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoveMeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoveMeReq.Merge(m, src)
}
func (m *LoveMeReq) XXX_Size() int {
	return m.Size()
}
func (m *LoveMeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LoveMeReq.DiscardUnknown(m)
}

var xxx_messageInfo_LoveMeReq proto.InternalMessageInfo

func (m *LoveMeReq) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

//喜欢我的列表
type LoveMeResp struct {
	Page                 *int32       `protobuf:"varint,1,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	Cards                []*VoiceCard `protobuf:"bytes,2,rep,name=Cards" json:"Cards,omitempty" bson:"Cards,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" bson:"-"`
	XXX_unrecognized     []byte       `json:"-" bson:"-"`
	XXX_sizecache        int32        `json:"-" bson:"-"`
}

func (m *LoveMeResp) Reset()         { *m = LoveMeResp{} }
func (m *LoveMeResp) String() string { return proto.CompactTextString(m) }
func (*LoveMeResp) ProtoMessage()    {}
func (*LoveMeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{3}
}
func (m *LoveMeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoveMeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoveMeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoveMeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoveMeResp.Merge(m, src)
}
func (m *LoveMeResp) XXX_Size() int {
	return m.Size()
}
func (m *LoveMeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_LoveMeResp.DiscardUnknown(m)
}

var xxx_messageInfo_LoveMeResp proto.InternalMessageInfo

func (m *LoveMeResp) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *LoveMeResp) GetCards() []*VoiceCard {
	if m != nil {
		return m.Cards
	}
	return nil
}

//请求我喜欢的列表
type MyLoveReq struct {
	Page                 *int32   `protobuf:"varint,1,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *MyLoveReq) Reset()         { *m = MyLoveReq{} }
func (m *MyLoveReq) String() string { return proto.CompactTextString(m) }
func (*MyLoveReq) ProtoMessage()    {}
func (*MyLoveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{4}
}
func (m *MyLoveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MyLoveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MyLoveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MyLoveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MyLoveReq.Merge(m, src)
}
func (m *MyLoveReq) XXX_Size() int {
	return m.Size()
}
func (m *MyLoveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MyLoveReq.DiscardUnknown(m)
}

var xxx_messageInfo_MyLoveReq proto.InternalMessageInfo

func (m *MyLoveReq) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

//我喜欢的列表响应
type MyLoveResp struct {
	Page                 *int32       `protobuf:"varint,1,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	Cards                []*VoiceCard `protobuf:"bytes,2,rep,name=Cards" json:"Cards,omitempty" bson:"Cards,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" bson:"-"`
	XXX_unrecognized     []byte       `json:"-" bson:"-"`
	XXX_sizecache        int32        `json:"-" bson:"-"`
}

func (m *MyLoveResp) Reset()         { *m = MyLoveResp{} }
func (m *MyLoveResp) String() string { return proto.CompactTextString(m) }
func (*MyLoveResp) ProtoMessage()    {}
func (*MyLoveResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{5}
}
func (m *MyLoveResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MyLoveResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MyLoveResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MyLoveResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MyLoveResp.Merge(m, src)
}
func (m *MyLoveResp) XXX_Size() int {
	return m.Size()
}
func (m *MyLoveResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MyLoveResp.DiscardUnknown(m)
}

var xxx_messageInfo_MyLoveResp proto.InternalMessageInfo

func (m *MyLoveResp) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *MyLoveResp) GetCards() []*VoiceCard {
	if m != nil {
		return m.Cards
	}
	return nil
}

//指定玩家请求信息
type PlayerInfoReq struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerInfoReq) Reset()         { *m = PlayerInfoReq{} }
func (m *PlayerInfoReq) String() string { return proto.CompactTextString(m) }
func (*PlayerInfoReq) ProtoMessage()    {}
func (*PlayerInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{6}
}
func (m *PlayerInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerInfoReq.Merge(m, src)
}
func (m *PlayerInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *PlayerInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerInfoReq proto.InternalMessageInfo

func (m *PlayerInfoReq) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

//系统背景图请求
type SystemBgReq struct {
	Url                  *string  `protobuf:"bytes,1,opt,name=Url" json:"Url,omitempty" bson:"Url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *SystemBgReq) Reset()         { *m = SystemBgReq{} }
func (m *SystemBgReq) String() string { return proto.CompactTextString(m) }
func (*SystemBgReq) ProtoMessage()    {}
func (*SystemBgReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{7}
}
func (m *SystemBgReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemBgReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemBgReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemBgReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemBgReq.Merge(m, src)
}
func (m *SystemBgReq) XXX_Size() int {
	return m.Size()
}
func (m *SystemBgReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemBgReq.DiscardUnknown(m)
}

var xxx_messageInfo_SystemBgReq proto.InternalMessageInfo

func (m *SystemBgReq) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

//系统背景图响应
type SystemBgResp struct {
	Url                  *string  `protobuf:"bytes,1,opt,name=Url" json:"Url,omitempty" bson:"Url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *SystemBgResp) Reset()         { *m = SystemBgResp{} }
func (m *SystemBgResp) String() string { return proto.CompactTextString(m) }
func (*SystemBgResp) ProtoMessage()    {}
func (*SystemBgResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{8}
}
func (m *SystemBgResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemBgResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemBgResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemBgResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemBgResp.Merge(m, src)
}
func (m *SystemBgResp) XXX_Size() int {
	return m.Size()
}
func (m *SystemBgResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemBgResp.DiscardUnknown(m)
}

var xxx_messageInfo_SystemBgResp proto.InternalMessageInfo

func (m *SystemBgResp) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

type PersonTag struct {
	Id                   *int32   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	IsHot                *bool    `protobuf:"varint,3,opt,name=IsHot" json:"IsHot,omitempty" bson:"IsHot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PersonTag) Reset()         { *m = PersonTag{} }
func (m *PersonTag) String() string { return proto.CompactTextString(m) }
func (*PersonTag) ProtoMessage()    {}
func (*PersonTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{9}
}
func (m *PersonTag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersonTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PersonTag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PersonTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersonTag.Merge(m, src)
}
func (m *PersonTag) XXX_Size() int {
	return m.Size()
}
func (m *PersonTag) XXX_DiscardUnknown() {
	xxx_messageInfo_PersonTag.DiscardUnknown(m)
}

var xxx_messageInfo_PersonTag proto.InternalMessageInfo

func (m *PersonTag) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PersonTag) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *PersonTag) GetIsHot() bool {
	if m != nil && m.IsHot != nil {
		return *m.IsHot
	}
	return false
}

//系统个性化标签响应
type PersonalityTagReq struct {
	Page                 *int32       `protobuf:"varint,1,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	Num                  *int32       `protobuf:"varint,2,opt,name=Num" json:"Num,omitempty" bson:"Num,omitempty"`
	PersonalityTags      []*PersonTag `protobuf:"bytes,3,rep,name=PersonalityTags" json:"PersonalityTags,omitempty" bson:"PersonalityTags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" bson:"-"`
	XXX_unrecognized     []byte       `json:"-" bson:"-"`
	XXX_sizecache        int32        `json:"-" bson:"-"`
}

func (m *PersonalityTagReq) Reset()         { *m = PersonalityTagReq{} }
func (m *PersonalityTagReq) String() string { return proto.CompactTextString(m) }
func (*PersonalityTagReq) ProtoMessage()    {}
func (*PersonalityTagReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{10}
}
func (m *PersonalityTagReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersonalityTagReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PersonalityTagReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PersonalityTagReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersonalityTagReq.Merge(m, src)
}
func (m *PersonalityTagReq) XXX_Size() int {
	return m.Size()
}
func (m *PersonalityTagReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PersonalityTagReq.DiscardUnknown(m)
}

var xxx_messageInfo_PersonalityTagReq proto.InternalMessageInfo

func (m *PersonalityTagReq) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *PersonalityTagReq) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

func (m *PersonalityTagReq) GetPersonalityTags() []*PersonTag {
	if m != nil {
		return m.PersonalityTags
	}
	return nil
}

//搜索声音短片
type SearchVoiceVideoReq struct {
	Content              *string  `protobuf:"bytes,1,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	Type                 *int32   `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	Page                 *int32   `protobuf:"varint,3,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *SearchVoiceVideoReq) Reset()         { *m = SearchVoiceVideoReq{} }
func (m *SearchVoiceVideoReq) String() string { return proto.CompactTextString(m) }
func (*SearchVoiceVideoReq) ProtoMessage()    {}
func (*SearchVoiceVideoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{11}
}
func (m *SearchVoiceVideoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchVoiceVideoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchVoiceVideoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchVoiceVideoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchVoiceVideoReq.Merge(m, src)
}
func (m *SearchVoiceVideoReq) XXX_Size() int {
	return m.Size()
}
func (m *SearchVoiceVideoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchVoiceVideoReq.DiscardUnknown(m)
}

var xxx_messageInfo_SearchVoiceVideoReq proto.InternalMessageInfo

func (m *SearchVoiceVideoReq) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *SearchVoiceVideoReq) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *SearchVoiceVideoReq) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

//声音片段数据
type VoiceVideo struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	Maker                *string  `protobuf:"bytes,2,opt,name=Maker" json:"Maker,omitempty" bson:"Maker,omitempty"`
	Name                 *string  `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	TagIds               []int32  `protobuf:"varint,4,rep,name=TagIds" json:"TagIds,omitempty" bson:"TagIds,omitempty"`
	Tags                 []string `protobuf:"bytes,5,rep,name=Tags" json:"Tags,omitempty" bson:"Tags,omitempty"`
	Content              *string  `protobuf:"bytes,6,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	MusicUrl             *string  `protobuf:"bytes,7,opt,name=MusicUrl" json:"MusicUrl,omitempty" bson:"MusicUrl,omitempty"`
	ImageUrl             *string  `protobuf:"bytes,8,opt,name=ImageUrl" json:"ImageUrl,omitempty" bson:"ImageUrl,omitempty"`
	Type                 *int32   `protobuf:"varint,9,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	MusicTime            *int64   `protobuf:"varint,10,opt,name=MusicTime" json:"MusicTime,omitempty" bson:"MusicTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *VoiceVideo) Reset()         { *m = VoiceVideo{} }
func (m *VoiceVideo) String() string { return proto.CompactTextString(m) }
func (*VoiceVideo) ProtoMessage()    {}
func (*VoiceVideo) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{12}
}
func (m *VoiceVideo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoiceVideo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoiceVideo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoiceVideo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoiceVideo.Merge(m, src)
}
func (m *VoiceVideo) XXX_Size() int {
	return m.Size()
}
func (m *VoiceVideo) XXX_DiscardUnknown() {
	xxx_messageInfo_VoiceVideo.DiscardUnknown(m)
}

var xxx_messageInfo_VoiceVideo proto.InternalMessageInfo

func (m *VoiceVideo) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *VoiceVideo) GetMaker() string {
	if m != nil && m.Maker != nil {
		return *m.Maker
	}
	return ""
}

func (m *VoiceVideo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *VoiceVideo) GetTagIds() []int32 {
	if m != nil {
		return m.TagIds
	}
	return nil
}

func (m *VoiceVideo) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *VoiceVideo) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *VoiceVideo) GetMusicUrl() string {
	if m != nil && m.MusicUrl != nil {
		return *m.MusicUrl
	}
	return ""
}

func (m *VoiceVideo) GetImageUrl() string {
	if m != nil && m.ImageUrl != nil {
		return *m.ImageUrl
	}
	return ""
}

func (m *VoiceVideo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *VoiceVideo) GetMusicTime() int64 {
	if m != nil && m.MusicTime != nil {
		return *m.MusicTime
	}
	return 0
}

//搜索声音短片响应
type SearchVoiceVideoResp struct {
	Data                 []*VoiceVideo `protobuf:"bytes,1,rep,name=Data" json:"Data,omitempty" bson:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-" bson:"-"`
	XXX_unrecognized     []byte        `json:"-" bson:"-"`
	XXX_sizecache        int32         `json:"-" bson:"-"`
}

func (m *SearchVoiceVideoResp) Reset()         { *m = SearchVoiceVideoResp{} }
func (m *SearchVoiceVideoResp) String() string { return proto.CompactTextString(m) }
func (*SearchVoiceVideoResp) ProtoMessage()    {}
func (*SearchVoiceVideoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{13}
}
func (m *SearchVoiceVideoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchVoiceVideoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchVoiceVideoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchVoiceVideoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchVoiceVideoResp.Merge(m, src)
}
func (m *SearchVoiceVideoResp) XXX_Size() int {
	return m.Size()
}
func (m *SearchVoiceVideoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchVoiceVideoResp.DiscardUnknown(m)
}

var xxx_messageInfo_SearchVoiceVideoResp proto.InternalMessageInfo

func (m *SearchVoiceVideoResp) GetData() []*VoiceVideo {
	if m != nil {
		return m.Data
	}
	return nil
}

//玩家录制音频
type MixVideo struct {
	Id                   *int64      `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	PlayerId             *int64      `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	BgVideo              *VoiceVideo `protobuf:"bytes,3,opt,name=BgVideo" json:"BgVideo,omitempty" bson:"BgVideo,omitempty"`
	MixVoiceUrl          *string     `protobuf:"bytes,4,opt,name=MixVoiceUrl" json:"MixVoiceUrl,omitempty" bson:"MixVoiceUrl,omitempty"`
	IsCard               *bool       `protobuf:"varint,5,opt,name=IsCard" json:"IsCard,omitempty" bson:"IsCard,omitempty"`
	MixTime              *int64      `protobuf:"varint,6,opt,name=MixTime" json:"MixTime,omitempty" bson:"MixTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-" bson:"-"`
	XXX_unrecognized     []byte      `json:"-" bson:"-"`
	XXX_sizecache        int32       `json:"-" bson:"-"`
}

func (m *MixVideo) Reset()         { *m = MixVideo{} }
func (m *MixVideo) String() string { return proto.CompactTextString(m) }
func (*MixVideo) ProtoMessage()    {}
func (*MixVideo) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{14}
}
func (m *MixVideo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MixVideo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MixVideo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MixVideo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MixVideo.Merge(m, src)
}
func (m *MixVideo) XXX_Size() int {
	return m.Size()
}
func (m *MixVideo) XXX_DiscardUnknown() {
	xxx_messageInfo_MixVideo.DiscardUnknown(m)
}

var xxx_messageInfo_MixVideo proto.InternalMessageInfo

func (m *MixVideo) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *MixVideo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *MixVideo) GetBgVideo() *VoiceVideo {
	if m != nil {
		return m.BgVideo
	}
	return nil
}

func (m *MixVideo) GetMixVoiceUrl() string {
	if m != nil && m.MixVoiceUrl != nil {
		return *m.MixVoiceUrl
	}
	return ""
}

func (m *MixVideo) GetIsCard() bool {
	if m != nil && m.IsCard != nil {
		return *m.IsCard
	}
	return false
}

func (m *MixVideo) GetMixTime() int64 {
	if m != nil && m.MixTime != nil {
		return *m.MixTime
	}
	return 0
}

//指定玩家声音名片列表
type VoiceCardListResp struct {
	PlayerId             *int64      `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Cards                []*MixVideo `protobuf:"bytes,2,rep,name=Cards" json:"Cards,omitempty" bson:"Cards,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-" bson:"-"`
	XXX_unrecognized     []byte      `json:"-" bson:"-"`
	XXX_sizecache        int32       `json:"-" bson:"-"`
}

func (m *VoiceCardListResp) Reset()         { *m = VoiceCardListResp{} }
func (m *VoiceCardListResp) String() string { return proto.CompactTextString(m) }
func (*VoiceCardListResp) ProtoMessage()    {}
func (*VoiceCardListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{15}
}
func (m *VoiceCardListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoiceCardListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoiceCardListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoiceCardListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoiceCardListResp.Merge(m, src)
}
func (m *VoiceCardListResp) XXX_Size() int {
	return m.Size()
}
func (m *VoiceCardListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_VoiceCardListResp.DiscardUnknown(m)
}

var xxx_messageInfo_VoiceCardListResp proto.InternalMessageInfo

func (m *VoiceCardListResp) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *VoiceCardListResp) GetCards() []*MixVideo {
	if m != nil {
		return m.Cards
	}
	return nil
}

//指定玩家个性化标签列表
type PersonalityTagsResp struct {
	PlayerId             *int64       `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	PersonalityTags      []*PersonTag `protobuf:"bytes,2,rep,name=PersonalityTags" json:"PersonalityTags,omitempty" bson:"PersonalityTags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" bson:"-"`
	XXX_unrecognized     []byte       `json:"-" bson:"-"`
	XXX_sizecache        int32        `json:"-" bson:"-"`
}

func (m *PersonalityTagsResp) Reset()         { *m = PersonalityTagsResp{} }
func (m *PersonalityTagsResp) String() string { return proto.CompactTextString(m) }
func (*PersonalityTagsResp) ProtoMessage()    {}
func (*PersonalityTagsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{16}
}
func (m *PersonalityTagsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersonalityTagsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PersonalityTagsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PersonalityTagsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersonalityTagsResp.Merge(m, src)
}
func (m *PersonalityTagsResp) XXX_Size() int {
	return m.Size()
}
func (m *PersonalityTagsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PersonalityTagsResp.DiscardUnknown(m)
}

var xxx_messageInfo_PersonalityTagsResp proto.InternalMessageInfo

func (m *PersonalityTagsResp) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PersonalityTagsResp) GetPersonalityTags() []*PersonTag {
	if m != nil {
		return m.PersonalityTags
	}
	return nil
}

//设置语音名片请求
type SetVoiceCard struct {
	MixId                *int64   `protobuf:"varint,1,opt,name=MixId" json:"MixId,omitempty" bson:"MixId,omitempty"`
	PersonalityTags      []int32  `protobuf:"varint,2,rep,name=PersonalityTags" json:"PersonalityTags,omitempty" bson:"PersonalityTags,omitempty"`
	BgUrl                *string  `protobuf:"bytes,3,opt,name=BgUrl" json:"BgUrl,omitempty" bson:"BgUrl,omitempty"`
	Result               *int32   `protobuf:"varint,4,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *SetVoiceCard) Reset()         { *m = SetVoiceCard{} }
func (m *SetVoiceCard) String() string { return proto.CompactTextString(m) }
func (*SetVoiceCard) ProtoMessage()    {}
func (*SetVoiceCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{17}
}
func (m *SetVoiceCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetVoiceCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetVoiceCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetVoiceCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetVoiceCard.Merge(m, src)
}
func (m *SetVoiceCard) XXX_Size() int {
	return m.Size()
}
func (m *SetVoiceCard) XXX_DiscardUnknown() {
	xxx_messageInfo_SetVoiceCard.DiscardUnknown(m)
}

var xxx_messageInfo_SetVoiceCard proto.InternalMessageInfo

func (m *SetVoiceCard) GetMixId() int64 {
	if m != nil && m.MixId != nil {
		return *m.MixId
	}
	return 0
}

func (m *SetVoiceCard) GetPersonalityTags() []int32 {
	if m != nil {
		return m.PersonalityTags
	}
	return nil
}

func (m *SetVoiceCard) GetBgUrl() string {
	if m != nil && m.BgUrl != nil {
		return *m.BgUrl
	}
	return ""
}

func (m *SetVoiceCard) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

//混合两个音频
type MixVoiceVideo struct {
	BgId                 *int64   `protobuf:"varint,1,opt,name=BgId" json:"BgId,omitempty" bson:"BgId,omitempty"`
	MyVoiceUrl           *string  `protobuf:"bytes,2,opt,name=MyVoiceUrl" json:"MyVoiceUrl,omitempty" bson:"MyVoiceUrl,omitempty"`
	MixVideoUrl          *string  `protobuf:"bytes,3,opt,name=MixVideoUrl" json:"MixVideoUrl,omitempty" bson:"MixVideoUrl,omitempty"`
	MixId                *int64   `protobuf:"varint,4,opt,name=MixId" json:"MixId,omitempty" bson:"MixId,omitempty"`
	Result               *int32   `protobuf:"varint,5,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	BgVolume             *int32   `protobuf:"varint,6,opt,name=BgVolume" json:"BgVolume,omitempty" bson:"BgVolume,omitempty"`
	MixVolume            *int32   `protobuf:"varint,7,opt,name=MixVolume" json:"MixVolume,omitempty" bson:"MixVolume,omitempty"`
	MixTime              *int64   `protobuf:"varint,8,opt,name=MixTime" json:"MixTime,omitempty" bson:"MixTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *MixVoiceVideo) Reset()         { *m = MixVoiceVideo{} }
func (m *MixVoiceVideo) String() string { return proto.CompactTextString(m) }
func (*MixVoiceVideo) ProtoMessage()    {}
func (*MixVoiceVideo) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{18}
}
func (m *MixVoiceVideo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MixVoiceVideo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MixVoiceVideo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MixVoiceVideo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MixVoiceVideo.Merge(m, src)
}
func (m *MixVoiceVideo) XXX_Size() int {
	return m.Size()
}
func (m *MixVoiceVideo) XXX_DiscardUnknown() {
	xxx_messageInfo_MixVoiceVideo.DiscardUnknown(m)
}

var xxx_messageInfo_MixVoiceVideo proto.InternalMessageInfo

func (m *MixVoiceVideo) GetBgId() int64 {
	if m != nil && m.BgId != nil {
		return *m.BgId
	}
	return 0
}

func (m *MixVoiceVideo) GetMyVoiceUrl() string {
	if m != nil && m.MyVoiceUrl != nil {
		return *m.MyVoiceUrl
	}
	return ""
}

func (m *MixVoiceVideo) GetMixVideoUrl() string {
	if m != nil && m.MixVideoUrl != nil {
		return *m.MixVideoUrl
	}
	return ""
}

func (m *MixVoiceVideo) GetMixId() int64 {
	if m != nil && m.MixId != nil {
		return *m.MixId
	}
	return 0
}

func (m *MixVoiceVideo) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *MixVoiceVideo) GetBgVolume() int32 {
	if m != nil && m.BgVolume != nil {
		return *m.BgVolume
	}
	return 0
}

func (m *MixVoiceVideo) GetMixVolume() int32 {
	if m != nil && m.MixVolume != nil {
		return *m.MixVolume
	}
	return 0
}

func (m *MixVoiceVideo) GetMixTime() int64 {
	if m != nil && m.MixTime != nil {
		return *m.MixTime
	}
	return 0
}

//请求指定类型音频短片
type GetVoiceVideoReq struct {
	Type                 *int32   `protobuf:"varint,1,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	Page                 *int32   `protobuf:"varint,2,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	PageSize             *int32   `protobuf:"varint,3,opt,name=PageSize" json:"PageSize,omitempty" bson:"PageSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GetVoiceVideoReq) Reset()         { *m = GetVoiceVideoReq{} }
func (m *GetVoiceVideoReq) String() string { return proto.CompactTextString(m) }
func (*GetVoiceVideoReq) ProtoMessage()    {}
func (*GetVoiceVideoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{19}
}
func (m *GetVoiceVideoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVoiceVideoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVoiceVideoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVoiceVideoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVoiceVideoReq.Merge(m, src)
}
func (m *GetVoiceVideoReq) XXX_Size() int {
	return m.Size()
}
func (m *GetVoiceVideoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVoiceVideoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetVoiceVideoReq proto.InternalMessageInfo

func (m *GetVoiceVideoReq) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *GetVoiceVideoReq) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *GetVoiceVideoReq) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

//获取背景音频响应
type GetVoiceVideoResp struct {
	Type                 *int32        `protobuf:"varint,1,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	Page                 *int32        `protobuf:"varint,2,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	PageSize             *int32        `protobuf:"varint,3,opt,name=PageSize" json:"PageSize,omitempty" bson:"PageSize,omitempty"`
	Data                 []*VoiceVideo `protobuf:"bytes,4,rep,name=Data" json:"Data,omitempty" bson:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-" bson:"-"`
	XXX_unrecognized     []byte        `json:"-" bson:"-"`
	XXX_sizecache        int32         `json:"-" bson:"-"`
}

func (m *GetVoiceVideoResp) Reset()         { *m = GetVoiceVideoResp{} }
func (m *GetVoiceVideoResp) String() string { return proto.CompactTextString(m) }
func (*GetVoiceVideoResp) ProtoMessage()    {}
func (*GetVoiceVideoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{20}
}
func (m *GetVoiceVideoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVoiceVideoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVoiceVideoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVoiceVideoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVoiceVideoResp.Merge(m, src)
}
func (m *GetVoiceVideoResp) XXX_Size() int {
	return m.Size()
}
func (m *GetVoiceVideoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVoiceVideoResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetVoiceVideoResp proto.InternalMessageInfo

func (m *GetVoiceVideoResp) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *GetVoiceVideoResp) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *GetVoiceVideoResp) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *GetVoiceVideoResp) GetData() []*VoiceVideo {
	if m != nil {
		return m.Data
	}
	return nil
}

//响应亲密度信息
type IntimacyInfoResp struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	IntimacyLv           *int32   `protobuf:"varint,2,opt,name=IntimacyLv" json:"IntimacyLv,omitempty" bson:"IntimacyLv,omitempty"`
	IntimacyVal          *int64   `protobuf:"varint,3,opt,name=IntimacyVal" json:"IntimacyVal,omitempty" bson:"IntimacyVal,omitempty"`
	IntimacyMaxVal       *int64   `protobuf:"varint,4,opt,name=IntimacyMaxVal" json:"IntimacyMaxVal,omitempty" bson:"IntimacyMaxVal,omitempty"`
	IsShow               *bool    `protobuf:"varint,5,opt,name=IsShow" json:"IsShow,omitempty" bson:"IsShow,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *IntimacyInfoResp) Reset()         { *m = IntimacyInfoResp{} }
func (m *IntimacyInfoResp) String() string { return proto.CompactTextString(m) }
func (*IntimacyInfoResp) ProtoMessage()    {}
func (*IntimacyInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{21}
}
func (m *IntimacyInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IntimacyInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IntimacyInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IntimacyInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntimacyInfoResp.Merge(m, src)
}
func (m *IntimacyInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *IntimacyInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_IntimacyInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_IntimacyInfoResp proto.InternalMessageInfo

func (m *IntimacyInfoResp) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *IntimacyInfoResp) GetIntimacyLv() int32 {
	if m != nil && m.IntimacyLv != nil {
		return *m.IntimacyLv
	}
	return 0
}

func (m *IntimacyInfoResp) GetIntimacyVal() int64 {
	if m != nil && m.IntimacyVal != nil {
		return *m.IntimacyVal
	}
	return 0
}

func (m *IntimacyInfoResp) GetIntimacyMaxVal() int64 {
	if m != nil && m.IntimacyMaxVal != nil {
		return *m.IntimacyMaxVal
	}
	return 0
}

func (m *IntimacyInfoResp) GetIsShow() bool {
	if m != nil && m.IsShow != nil {
		return *m.IsShow
	}
	return false
}

//所有星座响应
type ConstellationResp struct {
	Constellations       []*share_message.InterestTag `protobuf:"bytes,1,rep,name=Constellations" json:"Constellations,omitempty" bson:"Constellations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-" bson:"-"`
	XXX_unrecognized     []byte                       `json:"-" bson:"-"`
	XXX_sizecache        int32                        `json:"-" bson:"-"`
}

func (m *ConstellationResp) Reset()         { *m = ConstellationResp{} }
func (m *ConstellationResp) String() string { return proto.CompactTextString(m) }
func (*ConstellationResp) ProtoMessage()    {}
func (*ConstellationResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{22}
}
func (m *ConstellationResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConstellationResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConstellationResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConstellationResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConstellationResp.Merge(m, src)
}
func (m *ConstellationResp) XXX_Size() int {
	return m.Size()
}
func (m *ConstellationResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ConstellationResp.DiscardUnknown(m)
}

var xxx_messageInfo_ConstellationResp proto.InternalMessageInfo

func (m *ConstellationResp) GetConstellations() []*share_message.InterestTag {
	if m != nil {
		return m.Constellations
	}
	return nil
}

//设置自己的星座
type SetConstellation struct {
	Id                   *int32   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *SetConstellation) Reset()         { *m = SetConstellation{} }
func (m *SetConstellation) String() string { return proto.CompactTextString(m) }
func (*SetConstellation) ProtoMessage()    {}
func (*SetConstellation) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{23}
}
func (m *SetConstellation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetConstellation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetConstellation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetConstellation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetConstellation.Merge(m, src)
}
func (m *SetConstellation) XXX_Size() int {
	return m.Size()
}
func (m *SetConstellation) XXX_DiscardUnknown() {
	xxx_messageInfo_SetConstellation.DiscardUnknown(m)
}

var xxx_messageInfo_SetConstellation proto.InternalMessageInfo

func (m *SetConstellation) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

//匹配共同信息
type PlayerCommonData struct {
	PlayerId             *int64       `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	HeadUrl              *string      `protobuf:"bytes,2,opt,name=HeadUrl" json:"HeadUrl,omitempty" bson:"HeadUrl,omitempty"`
	Tags                 []*PersonTag `protobuf:"bytes,3,rep,name=Tags" json:"Tags,omitempty" bson:"Tags,omitempty"`
	Constellation        *int32       `protobuf:"varint,4,opt,name=Constellation" json:"Constellation,omitempty" bson:"Constellation,omitempty"`
	GuideWord            *string      `protobuf:"bytes,5,opt,name=GuideWord" json:"GuideWord,omitempty" bson:"GuideWord,omitempty"`
	Labels               []int32      `protobuf:"varint,6,rep,name=Labels" json:"Labels,omitempty" bson:"Labels,omitempty"`
	Sex                  *int32       `protobuf:"varint,7,opt,name=Sex" json:"Sex,omitempty" bson:"Sex,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" bson:"-"`
	XXX_unrecognized     []byte       `json:"-" bson:"-"`
	XXX_sizecache        int32        `json:"-" bson:"-"`
}

func (m *PlayerCommonData) Reset()         { *m = PlayerCommonData{} }
func (m *PlayerCommonData) String() string { return proto.CompactTextString(m) }
func (*PlayerCommonData) ProtoMessage()    {}
func (*PlayerCommonData) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{24}
}
func (m *PlayerCommonData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerCommonData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerCommonData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerCommonData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerCommonData.Merge(m, src)
}
func (m *PlayerCommonData) XXX_Size() int {
	return m.Size()
}
func (m *PlayerCommonData) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerCommonData.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerCommonData proto.InternalMessageInfo

func (m *PlayerCommonData) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerCommonData) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *PlayerCommonData) GetTags() []*PersonTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *PlayerCommonData) GetConstellation() int32 {
	if m != nil && m.Constellation != nil {
		return *m.Constellation
	}
	return 0
}

func (m *PlayerCommonData) GetGuideWord() string {
	if m != nil && m.GuideWord != nil {
		return *m.GuideWord
	}
	return ""
}

func (m *PlayerCommonData) GetLabels() []int32 {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *PlayerCommonData) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

//SiHay数据
type SayHiData struct {
	PlayerData           []*PlayerCommonData `protobuf:"bytes,1,rep,name=PlayerData" json:"PlayerData,omitempty" bson:"PlayerData,omitempty"`
	MatchingDegree       *int32              `protobuf:"varint,2,opt,name=MatchingDegree" json:"MatchingDegree,omitempty" bson:"MatchingDegree,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-" bson:"-"`
	XXX_unrecognized     []byte              `json:"-" bson:"-"`
	XXX_sizecache        int32               `json:"-" bson:"-"`
}

func (m *SayHiData) Reset()         { *m = SayHiData{} }
func (m *SayHiData) String() string { return proto.CompactTextString(m) }
func (*SayHiData) ProtoMessage()    {}
func (*SayHiData) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{25}
}
func (m *SayHiData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SayHiData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SayHiData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SayHiData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SayHiData.Merge(m, src)
}
func (m *SayHiData) XXX_Size() int {
	return m.Size()
}
func (m *SayHiData) XXX_DiscardUnknown() {
	xxx_messageInfo_SayHiData.DiscardUnknown(m)
}

var xxx_messageInfo_SayHiData proto.InternalMessageInfo

func (m *SayHiData) GetPlayerData() []*PlayerCommonData {
	if m != nil {
		return m.PlayerData
	}
	return nil
}

func (m *SayHiData) GetMatchingDegree() int32 {
	if m != nil && m.MatchingDegree != nil {
		return *m.MatchingDegree
	}
	return 0
}

//喜欢我数量
type LoveMeData struct {
	Num                  *int32   `protobuf:"varint,1,opt,name=Num" json:"Num,omitempty" bson:"Num,omitempty"`
	TotalNum             *int32   `protobuf:"varint,2,opt,name=TotalNum" json:"TotalNum,omitempty" bson:"TotalNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *LoveMeData) Reset()         { *m = LoveMeData{} }
func (m *LoveMeData) String() string { return proto.CompactTextString(m) }
func (*LoveMeData) ProtoMessage()    {}
func (*LoveMeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{26}
}
func (m *LoveMeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoveMeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoveMeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoveMeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoveMeData.Merge(m, src)
}
func (m *LoveMeData) XXX_Size() int {
	return m.Size()
}
func (m *LoveMeData) XXX_DiscardUnknown() {
	xxx_messageInfo_LoveMeData.DiscardUnknown(m)
}

var xxx_messageInfo_LoveMeData proto.InternalMessageInfo

func (m *LoveMeData) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

func (m *LoveMeData) GetTotalNum() int32 {
	if m != nil && m.TotalNum != nil {
		return *m.TotalNum
	}
	return 0
}

//点赞结果
type VCZanResult struct {
	Result               *bool    `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *VCZanResult) Reset()         { *m = VCZanResult{} }
func (m *VCZanResult) String() string { return proto.CompactTextString(m) }
func (*VCZanResult) ProtoMessage()    {}
func (*VCZanResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{27}
}
func (m *VCZanResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VCZanResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VCZanResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VCZanResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VCZanResult.Merge(m, src)
}
func (m *VCZanResult) XXX_Size() int {
	return m.Size()
}
func (m *VCZanResult) XXX_DiscardUnknown() {
	xxx_messageInfo_VCZanResult.DiscardUnknown(m)
}

var xxx_messageInfo_VCZanResult proto.InternalMessageInfo

func (m *VCZanResult) GetResult() bool {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return false
}

//热门片段响应
type HotEpisodeResp struct {
	Episode              []*PersonTag `protobuf:"bytes,1,rep,name=Episode" json:"Episode,omitempty" bson:"Episode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" bson:"-"`
	XXX_unrecognized     []byte       `json:"-" bson:"-"`
	XXX_sizecache        int32        `json:"-" bson:"-"`
}

func (m *HotEpisodeResp) Reset()         { *m = HotEpisodeResp{} }
func (m *HotEpisodeResp) String() string { return proto.CompactTextString(m) }
func (*HotEpisodeResp) ProtoMessage()    {}
func (*HotEpisodeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{28}
}
func (m *HotEpisodeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HotEpisodeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HotEpisodeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HotEpisodeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HotEpisodeResp.Merge(m, src)
}
func (m *HotEpisodeResp) XXX_Size() int {
	return m.Size()
}
func (m *HotEpisodeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_HotEpisodeResp.DiscardUnknown(m)
}

var xxx_messageInfo_HotEpisodeResp proto.InternalMessageInfo

func (m *HotEpisodeResp) GetEpisode() []*PersonTag {
	if m != nil {
		return m.Episode
	}
	return nil
}

//标签作品请求
type VoiceProduct struct {
	TabId                *int32   `protobuf:"varint,1,opt,name=TabId" json:"TabId,omitempty" bson:"TabId,omitempty"`
	Page                 *int32   `protobuf:"varint,2,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *VoiceProduct) Reset()         { *m = VoiceProduct{} }
func (m *VoiceProduct) String() string { return proto.CompactTextString(m) }
func (*VoiceProduct) ProtoMessage()    {}
func (*VoiceProduct) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{29}
}
func (m *VoiceProduct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoiceProduct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoiceProduct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoiceProduct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoiceProduct.Merge(m, src)
}
func (m *VoiceProduct) XXX_Size() int {
	return m.Size()
}
func (m *VoiceProduct) XXX_DiscardUnknown() {
	xxx_messageInfo_VoiceProduct.DiscardUnknown(m)
}

var xxx_messageInfo_VoiceProduct proto.InternalMessageInfo

func (m *VoiceProduct) GetTabId() int32 {
	if m != nil && m.TabId != nil {
		return *m.TabId
	}
	return 0
}

func (m *VoiceProduct) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

//删除卡片作品
type DelVoiceCard struct {
	MixId                *int64   `protobuf:"varint,1,opt,name=MixId" json:"MixId,omitempty" bson:"MixId,omitempty"`
	NewMixId             *int64   `protobuf:"varint,2,opt,name=NewMixId" json:"NewMixId,omitempty" bson:"NewMixId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DelVoiceCard) Reset()         { *m = DelVoiceCard{} }
func (m *DelVoiceCard) String() string { return proto.CompactTextString(m) }
func (*DelVoiceCard) ProtoMessage()    {}
func (*DelVoiceCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{30}
}
func (m *DelVoiceCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelVoiceCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelVoiceCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelVoiceCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelVoiceCard.Merge(m, src)
}
func (m *DelVoiceCard) XXX_Size() int {
	return m.Size()
}
func (m *DelVoiceCard) XXX_DiscardUnknown() {
	xxx_messageInfo_DelVoiceCard.DiscardUnknown(m)
}

var xxx_messageInfo_DelVoiceCard proto.InternalMessageInfo

func (m *DelVoiceCard) GetMixId() int64 {
	if m != nil && m.MixId != nil {
		return *m.MixId
	}
	return 0
}

func (m *DelVoiceCard) GetNewMixId() int64 {
	if m != nil && m.NewMixId != nil {
		return *m.NewMixId
	}
	return 0
}

//获取会话sayHi信息
type SayHiLog struct {
	SessionId            *string                        `protobuf:"bytes,1,opt,name=SessionId" json:"SessionId,omitempty" bson:"SessionId,omitempty"`
	Log                  *share_message.PersonalChatLog `protobuf:"bytes,2,opt,name=Log" json:"Log,omitempty" bson:"Log,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-" bson:"-"`
	XXX_unrecognized     []byte                         `json:"-" bson:"-"`
	XXX_sizecache        int32                          `json:"-" bson:"-"`
}

func (m *SayHiLog) Reset()         { *m = SayHiLog{} }
func (m *SayHiLog) String() string { return proto.CompactTextString(m) }
func (*SayHiLog) ProtoMessage()    {}
func (*SayHiLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{31}
}
func (m *SayHiLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SayHiLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SayHiLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SayHiLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SayHiLog.Merge(m, src)
}
func (m *SayHiLog) XXX_Size() int {
	return m.Size()
}
func (m *SayHiLog) XXX_DiscardUnknown() {
	xxx_messageInfo_SayHiLog.DiscardUnknown(m)
}

var xxx_messageInfo_SayHiLog proto.InternalMessageInfo

func (m *SayHiLog) GetSessionId() string {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return ""
}

func (m *SayHiLog) GetLog() *share_message.PersonalChatLog {
	if m != nil {
		return m.Log
	}
	return nil
}

type IsFirstLogin struct {
	IsFirstReq           *bool    `protobuf:"varint,1,opt,name=IsFirstReq" json:"IsFirstReq,omitempty" bson:"IsFirstReq,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *IsFirstLogin) Reset()         { *m = IsFirstLogin{} }
func (m *IsFirstLogin) String() string { return proto.CompactTextString(m) }
func (*IsFirstLogin) ProtoMessage()    {}
func (*IsFirstLogin) Descriptor() ([]byte, []int) {
	return fileDescriptor_86bedfb74b417c3a, []int{32}
}
func (m *IsFirstLogin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsFirstLogin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsFirstLogin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsFirstLogin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsFirstLogin.Merge(m, src)
}
func (m *IsFirstLogin) XXX_Size() int {
	return m.Size()
}
func (m *IsFirstLogin) XXX_DiscardUnknown() {
	xxx_messageInfo_IsFirstLogin.DiscardUnknown(m)
}

var xxx_messageInfo_IsFirstLogin proto.InternalMessageInfo

func (m *IsFirstLogin) GetIsFirstReq() bool {
	if m != nil && m.IsFirstReq != nil {
		return *m.IsFirstReq
	}
	return false
}

func init() {
	proto.RegisterType((*LoveMatchResp)(nil), "client_hall.LoveMatchResp")
	proto.RegisterType((*VoiceCard)(nil), "client_hall.VoiceCard")
	proto.RegisterType((*LoveMeReq)(nil), "client_hall.LoveMeReq")
	proto.RegisterType((*LoveMeResp)(nil), "client_hall.LoveMeResp")
	proto.RegisterType((*MyLoveReq)(nil), "client_hall.MyLoveReq")
	proto.RegisterType((*MyLoveResp)(nil), "client_hall.MyLoveResp")
	proto.RegisterType((*PlayerInfoReq)(nil), "client_hall.PlayerInfoReq")
	proto.RegisterType((*SystemBgReq)(nil), "client_hall.SystemBgReq")
	proto.RegisterType((*SystemBgResp)(nil), "client_hall.SystemBgResp")
	proto.RegisterType((*PersonTag)(nil), "client_hall.PersonTag")
	proto.RegisterType((*PersonalityTagReq)(nil), "client_hall.PersonalityTagReq")
	proto.RegisterType((*SearchVoiceVideoReq)(nil), "client_hall.SearchVoiceVideoReq")
	proto.RegisterType((*VoiceVideo)(nil), "client_hall.VoiceVideo")
	proto.RegisterType((*SearchVoiceVideoResp)(nil), "client_hall.SearchVoiceVideoResp")
	proto.RegisterType((*MixVideo)(nil), "client_hall.MixVideo")
	proto.RegisterType((*VoiceCardListResp)(nil), "client_hall.VoiceCardListResp")
	proto.RegisterType((*PersonalityTagsResp)(nil), "client_hall.PersonalityTagsResp")
	proto.RegisterType((*SetVoiceCard)(nil), "client_hall.SetVoiceCard")
	proto.RegisterType((*MixVoiceVideo)(nil), "client_hall.MixVoiceVideo")
	proto.RegisterType((*GetVoiceVideoReq)(nil), "client_hall.GetVoiceVideoReq")
	proto.RegisterType((*GetVoiceVideoResp)(nil), "client_hall.GetVoiceVideoResp")
	proto.RegisterType((*IntimacyInfoResp)(nil), "client_hall.IntimacyInfoResp")
	proto.RegisterType((*ConstellationResp)(nil), "client_hall.ConstellationResp")
	proto.RegisterType((*SetConstellation)(nil), "client_hall.SetConstellation")
	proto.RegisterType((*PlayerCommonData)(nil), "client_hall.PlayerCommonData")
	proto.RegisterType((*SayHiData)(nil), "client_hall.SayHiData")
	proto.RegisterType((*LoveMeData)(nil), "client_hall.LoveMeData")
	proto.RegisterType((*VCZanResult)(nil), "client_hall.VCZanResult")
	proto.RegisterType((*HotEpisodeResp)(nil), "client_hall.HotEpisodeResp")
	proto.RegisterType((*VoiceProduct)(nil), "client_hall.VoiceProduct")
	proto.RegisterType((*DelVoiceCard)(nil), "client_hall.DelVoiceCard")
	proto.RegisterType((*SayHiLog)(nil), "client_hall.SayHiLog")
	proto.RegisterType((*IsFirstLogin)(nil), "client_hall.IsFirstLogin")
}

func init() { proto.RegisterFile("voice_love.proto", fileDescriptor_86bedfb74b417c3a) }

var fileDescriptor_86bedfb74b417c3a = []byte{
	// 1697 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xcd, 0x6e, 0xe3, 0xc8,
	0x11, 0x06, 0xf5, 0x63, 0x4b, 0x25, 0xd9, 0x96, 0xe9, 0x9d, 0x19, 0x9a, 0x8b, 0x31, 0xb4, 0xc4,
	0x26, 0x11, 0x30, 0x81, 0x8d, 0x08, 0x41, 0x82, 0x24, 0x08, 0x10, 0x4b, 0xe3, 0xc8, 0x9a, 0x48,
	0xde, 0x59, 0x49, 0xe3, 0x0d, 0x26, 0x07, 0xa3, 0x47, 0xea, 0xa5, 0x88, 0xa1, 0x48, 0x2e, 0xbb,
	0xe5, 0xb1, 0xf2, 0x04, 0x39, 0xe5, 0x9a, 0x43, 0x6e, 0xb9, 0xe5, 0x4d, 0x72, 0xcc, 0x23, 0x04,
	0xf3, 0x16, 0xb9, 0x05, 0x5d, 0x4d, 0x52, 0x6c, 0x52, 0x92, 0x8d, 0x1c, 0x55, 0xd5, 0x5d, 0xac,
	0xaa, 0xfe, 0xea, 0xab, 0x4f, 0xd0, 0xb8, 0xf7, 0x9d, 0x29, 0xbd, 0x73, 0xfd, 0x7b, 0x7a, 0x1e,
	0x84, 0x3e, 0xf7, 0xf5, 0xda, 0xd4, 0x75, 0xa8, 0xc7, 0xef, 0xe6, 0xc4, 0x75, 0x4d, 0xf8, 0x40,
	0x58, 0xe4, 0x30, 0xdb, 0x36, 0x59, 0xd0, 0x3b, 0x46, 0xc3, 0x7b, 0x1a, 0x5e, 0xa0, 0xe9, 0x82,
	0xcd, 0x49, 0x48, 0xef, 0x16, 0x94, 0x31, 0x62, 0xd3, 0x0b, 0x4e, 0x3e, 0xb8, 0xf4, 0x8e, 0xf1,
	0x70, 0x39, 0xe5, 0xd1, 0x9d, 0x8b, 0xc7, 0xee, 0x10, 0xd7, 0x9d, 0xfa, 0x8b, 0x85, 0xef, 0xc9,
	0x0b, 0xd6, 0x2f, 0xe0, 0x60, 0xe0, 0xdf, 0xd3, 0x21, 0xe1, 0xd3, 0xf9, 0x88, 0xb2, 0x40, 0xff,
	0x11, 0x94, 0xbb, 0x24, 0x9c, 0x31, 0x43, 0x6b, 0x16, 0x5b, 0xb5, 0xf6, 0xf3, 0xf3, 0x54, 0x7a,
	0xe7, 0xb7, 0x22, 0x79, 0xe1, 0xb6, 0xfe, 0x5b, 0x80, 0x6a, 0xf2, 0x4b, 0x6f, 0x40, 0xe5, 0xad,
	0x4b, 0x56, 0x34, 0xec, 0xcf, 0x0c, 0xad, 0xa9, 0xb5, 0x8a, 0xc2, 0x72, 0xe3, 0x4c, 0x3f, 0xde,
	0x90, 0x05, 0x35, 0x0a, 0x4d, 0xad, 0x55, 0xd5, 0x8f, 0x60, 0xff, 0x9a, 0x92, 0xd9, 0xbb, 0xd0,
	0x35, 0x8a, 0x68, 0xa8, 0x41, 0x71, 0x4c, 0x1f, 0x8c, 0x52, 0x53, 0x6b, 0x95, 0xf5, 0x67, 0x70,
	0xd0, 0xf5, 0x3d, 0xc6, 0xa9, 0xeb, 0x12, 0xee, 0xf8, 0x9e, 0x51, 0x46, 0xf3, 0x05, 0x1c, 0xbd,
	0xa5, 0x21, 0xf3, 0x3d, 0xe2, 0x3a, 0x7c, 0x35, 0x21, 0x36, 0x33, 0xf6, 0x36, 0xe4, 0x25, 0xcf,
	0x4c, 0x88, 0xad, 0x3f, 0x87, 0x43, 0xac, 0xc5, 0xf1, 0xec, 0xd7, 0xd4, 0x0e, 0x29, 0x35, 0xf6,
	0x31, 0xd0, 0x21, 0xec, 0xbd, 0x27, 0xde, 0xcd, 0x72, 0x61, 0x54, 0xf0, 0x77, 0x03, 0x2a, 0x98,
	0xbe, 0x48, 0xa7, 0x8a, 0xe9, 0x34, 0xa0, 0xd2, 0x67, 0xdf, 0x78, 0x03, 0xc7, 0xa3, 0x06, 0x34,
	0xb5, 0x56, 0x45, 0x3f, 0x80, 0x72, 0xc7, 0x16, 0x07, 0x6a, 0x78, 0xa0, 0x0e, 0xa5, 0xc9, 0x2a,
	0xa0, 0x46, 0x1d, 0x03, 0x1c, 0xc1, 0x7e, 0xd7, 0xf7, 0x38, 0xf5, 0xb8, 0x71, 0x80, 0x6e, 0x1d,
	0xa0, 0x8b, 0x9d, 0xc5, 0x2c, 0x0f, 0x9b, 0xc5, 0x56, 0x55, 0x54, 0x75, 0xc9, 0xc5, 0x19, 0xc7,
	0xf7, 0x26, 0xce, 0x82, 0x1a, 0x47, 0xd8, 0x1c, 0xc5, 0x2c, 0x42, 0x36, 0x30, 0xe4, 0x8f, 0xa1,
	0x78, 0x39, 0xbb, 0x37, 0x8e, 0x9b, 0x5a, 0xab, 0xd6, 0x3e, 0x3d, 0x57, 0x1e, 0xee, 0xfc, 0x72,
	0x76, 0x3f, 0xa6, 0x9c, 0x3b, 0x9e, 0x6d, 0x9d, 0x42, 0x15, 0xdf, 0x8c, 0x8e, 0xe8, 0x0f, 0x22,
	0xab, 0xb7, 0xc4, 0xa6, 0xd8, 0xf6, 0xb2, 0x75, 0x09, 0x10, 0xbb, 0x58, 0xa0, 0xfa, 0xd6, 0x2f,
	0x5b, 0xd8, 0xf9, 0xb2, 0xa7, 0x50, 0x1d, 0xae, 0x44, 0x90, 0x8d, 0xd1, 0x63, 0xd7, 0xff, 0x1b,
	0xfd, 0x2b, 0x38, 0x88, 0x90, 0xe2, 0x7d, 0xef, 0x8b, 0x2f, 0xe4, 0xa0, 0x63, 0x99, 0x50, 0x1b,
	0xaf, 0x18, 0xa7, 0x8b, 0x8e, 0x2d, 0x0e, 0xd4, 0xa0, 0x28, 0xde, 0x40, 0xf8, 0xaa, 0xd6, 0x97,
	0x50, 0x5f, 0xfb, 0x58, 0xa0, 0x3a, 0x7f, 0x0e, 0xd5, 0x35, 0x10, 0x00, 0x0a, 0x51, 0xc4, 0xb2,
	0xc8, 0x34, 0x05, 0xc4, 0x03, 0x28, 0xf7, 0xd9, 0xb5, 0xcf, 0x11, 0x86, 0x15, 0xeb, 0x0e, 0x8e,
	0x55, 0x88, 0xe5, 0xea, 0x16, 0x5f, 0x11, 0xc8, 0x29, 0x6c, 0x83, 0x64, 0x71, 0x17, 0x24, 0xad,
	0x0e, 0x9c, 0x8c, 0x29, 0x09, 0xa7, 0x73, 0xec, 0xc2, 0xad, 0x33, 0xa3, 0x58, 0x78, 0x0a, 0x40,
	0x9a, 0x82, 0xaf, 0x42, 0x9c, 0x33, 0x66, 0x50, 0xc4, 0xce, 0xff, 0x53, 0x03, 0x58, 0x5f, 0x4f,
	0x15, 0x57, 0x14, 0xe5, 0x0c, 0xc9, 0x47, 0x1a, 0x46, 0xd5, 0xc5, 0xb5, 0xca, 0x19, 0x3b, 0x84,
	0xbd, 0x09, 0xb1, 0xfb, 0x33, 0x66, 0x94, 0x9a, 0x45, 0x19, 0x15, 0x33, 0x2e, 0x23, 0x3c, 0x53,
	0x29, 0xec, 0xc5, 0x33, 0x30, 0x5c, 0x32, 0x67, 0x2a, 0x7a, 0xba, 0x9f, 0x4c, 0xc5, 0x82, 0xd8,
	0x38, 0x27, 0x15, 0x25, 0xcd, 0x2a, 0xa6, 0x79, 0x0c, 0x55, 0xbc, 0x81, 0xe8, 0x06, 0x7c, 0xbf,
	0xdf, 0xc2, 0x17, 0xf9, 0x7a, 0x91, 0x59, 0x4a, 0xaf, 0x09, 0x27, 0x11, 0xb1, 0xbc, 0xc8, 0x03,
	0x04, 0x8f, 0x5a, 0x7f, 0xd1, 0xa0, 0x32, 0x74, 0x1e, 0xf2, 0x85, 0xa6, 0x91, 0x52, 0x40, 0x4b,
	0x0b, 0xf6, 0x3b, 0x36, 0x1e, 0xc4, 0x72, 0xb7, 0x07, 0xd5, 0x4f, 0xa0, 0x26, 0x62, 0xc6, 0x13,
	0x5f, 0x8a, 0x9b, 0xd3, 0x67, 0x02, 0x95, 0x48, 0x36, 0x15, 0xd1, 0x8e, 0xa1, 0xf3, 0x80, 0x95,
	0xec, 0x61, 0x25, 0x7f, 0x80, 0xe3, 0x04, 0xb9, 0x03, 0x87, 0x71, 0x2c, 0x23, 0xcf, 0x75, 0x5f,
	0xab, 0xd0, 0x7f, 0xa6, 0x24, 0x11, 0x97, 0x62, 0xfd, 0x11, 0x4e, 0x32, 0xb8, 0xd9, 0x12, 0x6e,
	0x03, 0xc0, 0x0a, 0x3b, 0x01, 0xf6, 0x0e, 0xea, 0x63, 0xca, 0xd7, 0x6c, 0x2c, 0x10, 0xe1, 0x3c,
	0x24, 0xf1, 0x5e, 0x6c, 0x8e, 0x57, 0x5e, 0xf3, 0x5b, 0x82, 0x95, 0x11, 0x65, 0x4b, 0x97, 0x4b,
	0x4a, 0xb6, 0xfe, 0xae, 0xc1, 0x41, 0xdc, 0x34, 0xd9, 0xc5, 0x3a, 0x94, 0x3a, 0x76, 0x12, 0x57,
	0x17, 0x6c, 0x90, 0xb4, 0x54, 0xa2, 0x2f, 0xea, 0xb3, 0x38, 0xbd, 0x0e, 0x9c, 0xe4, 0x53, 0xc2,
	0x7b, 0xeb, 0xef, 0x94, 0x63, 0x2a, 0xee, 0xd8, 0xb7, 0xbe, 0xbb, 0x8c, 0xfa, 0x2e, 0x41, 0x25,
	0x3e, 0x8c, 0xa6, 0xfd, 0x98, 0x6e, 0xe3, 0xb7, 0xa9, 0xe0, 0xdb, 0xfc, 0x0e, 0x1a, 0xbd, 0xa8,
	0xe8, 0x64, 0xa4, 0x62, 0x68, 0x6a, 0xca, 0x04, 0x15, 0xe2, 0xaf, 0x88, 0x5f, 0x63, 0xe7, 0xcf,
	0xf1, 0x4c, 0xcd, 0xe1, 0x38, 0x13, 0x41, 0x92, 0xda, 0xd3, 0x43, 0x24, 0x90, 0x2e, 0xed, 0x86,
	0xb4, 0x0f, 0x8d, 0xbe, 0xc7, 0x9d, 0x05, 0x99, 0xae, 0x24, 0xed, 0xb1, 0x20, 0x85, 0x6c, 0x5c,
	0x1d, 0xb1, 0x7f, 0x70, 0x1f, 0x7d, 0xec, 0x04, 0x6a, 0xb1, 0xed, 0x96, 0xc8, 0x4e, 0x16, 0xc5,
	0x76, 0x8b, 0x8d, 0x43, 0xf2, 0x20, 0xec, 0x49, 0x4b, 0xfb, 0x6c, 0x3c, 0xf7, 0x3f, 0x49, 0x24,
	0x5b, 0x3d, 0x38, 0x56, 0xb6, 0x29, 0x7e, 0xb1, 0x0d, 0x87, 0x8a, 0x31, 0x5e, 0xf1, 0x66, 0x66,
	0xd3, 0xf4, 0x3d, 0x4e, 0x43, 0xca, 0xb8, 0x80, 0xd6, 0x19, 0x34, 0xc6, 0x94, 0x2b, 0xd7, 0xd2,
	0xcc, 0x6a, 0xfd, 0x43, 0x83, 0x86, 0x84, 0xaf, 0xdc, 0x7d, 0xa2, 0x1b, 0x1b, 0x20, 0x9d, 0xda,
	0xfd, 0x12, 0x27, 0x5f, 0x47, 0x3c, 0xb4, 0x93, 0x39, 0xf3, 0xa2, 0xa0, 0x14, 0xc3, 0xa3, 0xb7,
	0x74, 0x66, 0xf4, 0x3b, 0x3f, 0x1a, 0x5d, 0xc4, 0xee, 0x80, 0x7c, 0xa0, 0xae, 0x94, 0x07, 0xe5,
	0x58, 0x5b, 0x20, 0x76, 0xac, 0x5b, 0xa8, 0x8e, 0xc9, 0xea, 0xda, 0xc1, 0xe4, 0x7e, 0x06, 0x20,
	0x93, 0x4b, 0x71, 0xd1, 0x4b, 0xf5, 0xfb, 0xd9, 0x7a, 0xf2, 0x9a, 0x02, 0x9f, 0xc8, 0x7a, 0x15,
	0x2f, 0x5b, 0x3c, 0x15, 0x2d, 0x09, 0x2d, 0x86, 0xca, 0xc4, 0xe7, 0xc4, 0x4d, 0xd6, 0x86, 0xf5,
	0x12, 0x6a, 0xb7, 0xdd, 0xf7, 0xc4, 0x93, 0xd0, 0x4f, 0x0d, 0x81, 0x86, 0x2f, 0xf6, 0x2b, 0x38,
	0xbc, 0xf6, 0xf9, 0x55, 0xe0, 0x30, 0x7f, 0x26, 0xd7, 0xeb, 0x4f, 0x60, 0x3f, 0xfa, 0xb9, 0x51,
	0x8a, 0xad, 0xc7, 0xff, 0x15, 0xd4, 0x11, 0x6b, 0x6f, 0x43, 0x7f, 0xb6, 0x9c, 0x72, 0x31, 0x6e,
	0x13, 0xf2, 0x21, 0xbd, 0xfc, 0xd6, 0x18, 0xb6, 0x2e, 0xa0, 0xfe, 0x9a, 0xba, 0x5b, 0xb9, 0x42,
	0xc8, 0x36, 0xfa, 0x49, 0x5a, 0x90, 0x63, 0xad, 0x37, 0x50, 0xc1, 0xe6, 0x0d, 0x7c, 0x5b, 0x34,
	0x7e, 0x4c, 0x19, 0x73, 0x7c, 0x2f, 0x81, 0xee, 0x2b, 0x28, 0x0e, 0x7c, 0x1b, 0xcf, 0xd6, 0xda,
	0x67, 0x19, 0x24, 0xc5, 0xb4, 0xd3, 0x9d, 0x13, 0x3e, 0xf0, 0x6d, 0xcb, 0x82, 0x7a, 0x9f, 0xfd,
	0xde, 0x09, 0x99, 0xf8, 0xe5, 0x78, 0x88, 0x7b, 0xf9, 0x7b, 0x44, 0x7f, 0x90, 0x8d, 0x68, 0xff,
	0xad, 0x01, 0x47, 0xa2, 0xab, 0x5d, 0xac, 0xb5, 0x7d, 0x4d, 0x5c, 0x57, 0xff, 0x0d, 0x34, 0x46,
	0xc1, 0xb4, 0x97, 0xe2, 0x38, 0xa6, 0xd7, 0xce, 0x51, 0x2a, 0x5f, 0x2d, 0x02, 0xbe, 0x32, 0x4d,
	0xa5, 0x35, 0xaa, 0xa0, 0x1d, 0xc0, 0x49, 0xf6, 0xf2, 0x0d, 0xfd, 0xa4, 0x9f, 0x2a, 0x57, 0xd2,
	0x69, 0xed, 0x8c, 0xd6, 0x83, 0xa3, 0x51, 0x30, 0x7d, 0x4f, 0xbc, 0x75, 0x0b, 0xcd, 0x0d, 0xe8,
	0x89, 0xd4, 0x8d, 0x69, 0xa8, 0x94, 0x90, 0x02, 0x40, 0x37, 0xae, 0x49, 0x42, 0x48, 0xac, 0x17,
	0xfd, 0x79, 0xfe, 0xc3, 0x42, 0x85, 0x99, 0x2f, 0x36, 0xda, 0x59, 0xb0, 0x0e, 0x22, 0x65, 0xd9,
	0x86, 0x20, 0x89, 0x94, 0xcb, 0x04, 0x49, 0xe9, 0xb8, 0x2b, 0x2c, 0x29, 0xdd, 0xa0, 0x9d, 0x25,
	0x6d, 0x51, 0x76, 0xfa, 0x10, 0x9e, 0x8f, 0x82, 0x69, 0x77, 0x4e, 0x3c, 0x9b, 0xc6, 0x1a, 0x0d,
	0xa5, 0x83, 0xae, 0x36, 0x21, 0xa5, 0xed, 0xcc, 0xd3, 0x2d, 0x1e, 0x16, 0xe8, 0xdf, 0xc1, 0xb3,
	0x51, 0x30, 0x1d, 0xaf, 0x58, 0x66, 0x77, 0xe9, 0x67, 0x1b, 0xc6, 0x20, 0x25, 0xdd, 0xcc, 0x47,
	0xfc, 0xfa, 0x15, 0x1c, 0x8f, 0x82, 0xa9, 0x90, 0x4c, 0xa9, 0xcd, 0xb6, 0x8d, 0xba, 0xcd, 0xad,
	0x8a, 0xe2, 0x0d, 0xb6, 0x5e, 0xdd, 0x8f, 0x66, 0x6e, 0xf3, 0xaf, 0x03, 0xed, 0xf0, 0xe9, 0xdf,
	0x2a, 0xf8, 0x96, 0x36, 0x95, 0x93, 0xb2, 0xab, 0x2e, 0x53, 0x65, 0x7e, 0x8f, 0xbd, 0x47, 0xd4,
	0x67, 0x75, 0x98, 0xde, 0x54, 0x1b, 0x9e, 0x97, 0xa5, 0xe6, 0x57, 0x8f, 0x9c, 0x60, 0x81, 0xfe,
	0x6d, 0x6e, 0xa2, 0x10, 0x78, 0xbb, 0x40, 0x73, 0xb6, 0x19, 0x34, 0x89, 0xa8, 0x7a, 0x87, 0xaf,
	0xdd, 0xa3, 0x3c, 0xfb, 0xda, 0xbb, 0x82, 0x36, 0x77, 0xbc, 0xb4, 0x14, 0x57, 0x6f, 0x40, 0x17,
	0x8f, 0xe4, 0xcf, 0x9c, 0xef, 0x57, 0x6b, 0xa4, 0x66, 0x50, 0x97, 0xaa, 0xc3, 0xdc, 0xee, 0x8a,
	0x48, 0x08, 0xb9, 0x70, 0xe2, 0xcb, 0x44, 0x76, 0x66, 0x97, 0x26, 0x28, 0xfd, 0x1b, 0x4c, 0xa4,
	0x47, 0x79, 0x5a, 0x07, 0xec, 0xbc, 0xae, 0xbe, 0x7f, 0x4e, 0x3e, 0x5c, 0xe1, 0xb4, 0xf5, 0x28,
	0xbf, 0x74, 0x5d, 0x75, 0x3d, 0x2b, 0xc4, 0xa8, 0xf6, 0x3d, 0xaf, 0x09, 0x64, 0xdf, 0xc7, 0x82,
	0x40, 0xd4, 0x28, 0x2f, 0xb3, 0x8d, 0x50, 0xdc, 0xe6, 0x6e, 0xb7, 0xfe, 0xeb, 0xb8, 0x5c, 0xc9,
	0x55, 0x37, 0xf4, 0xd3, 0xcd, 0x72, 0xa1, 0x66, 0xb6, 0x89, 0xd3, 0x70, 0x8f, 0xfe, 0x14, 0xfb,
	0x3c, 0xa2, 0x64, 0x16, 0x31, 0xa3, 0x6f, 0xab, 0x37, 0x95, 0xc6, 0xbe, 0x53, 0xc8, 0x0b, 0x21,
	0xf3, 0x38, 0xc6, 0x1f, 0x07, 0x4e, 0x32, 0x91, 0xeb, 0xa5, 0xfc, 0x84, 0xb8, 0x5f, 0x2a, 0x27,
	0x32, 0xfb, 0xfc, 0x4f, 0xf0, 0x45, 0xc4, 0xd5, 0x64, 0x35, 0x70, 0x3e, 0xd2, 0xa7, 0x87, 0x7d,
	0xc2, 0x48, 0x8e, 0xe2, 0x86, 0x2b, 0x4a, 0xe0, 0x34, 0x3f, 0x75, 0x91, 0xeb, 0x29, 0x31, 0xe5,
	0xaa, 0x53, 0xd4, 0x82, 0x1a, 0x30, 0xed, 0x32, 0xb7, 0xbb, 0xf4, 0xab, 0x78, 0xb8, 0x23, 0xf1,
	0x90, 0xe8, 0x09, 0xf5, 0x9f, 0x52, 0x6c, 0x36, 0x37, 0x9b, 0xdb, 0x7f, 0xd5, 0xa4, 0x32, 0x10,
	0x92, 0xa0, 0x2d, 0xe5, 0x81, 0xde, 0x41, 0x32, 0x97, 0x4b, 0x27, 0x9e, 0x11, 0x7d, 0xf7, 0xe8,
	0x98, 0x87, 0x12, 0x3f, 0x37, 0xfe, 0x88, 0xf2, 0x65, 0xe8, 0xe9, 0xbf, 0x84, 0x43, 0x59, 0xe7,
	0x63, 0x79, 0x65, 0x2e, 0x76, 0xea, 0xff, 0xfa, 0x7c, 0xa6, 0xfd, 0xfb, 0xf3, 0x99, 0xf6, 0x9f,
	0xcf, 0x67, 0xda, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x62, 0x9a, 0x1a, 0xda, 0x13, 0x00,
	0x00,
}

func (m *LoveMatchResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoveMatchResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cards) > 0 {
		for _, msg := range m.Cards {
			dAtA[i] = 0xa
			i++
			i = encodeVarintVoiceLove(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *VoiceCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoiceCard) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.PlayerId))
	}
	if m.NickName != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.HeadUrl != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(len(*m.HeadUrl)))
		i += copy(dAtA[i:], *m.HeadUrl)
	}
	if m.Sex != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.Sex))
	}
	if m.Constellation != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.Constellation))
	}
	if len(m.PersonalityTags) > 0 {
		for _, msg := range m.PersonalityTags {
			dAtA[i] = 0x32
			i++
			i = encodeVarintVoiceLove(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.MatchingDegree != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.MatchingDegree))
	}
	if m.ZanNum != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.ZanNum))
	}
	if m.VoiceUrl != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(len(*m.VoiceUrl)))
		i += copy(dAtA[i:], *m.VoiceUrl)
	}
	if m.IsOnLine != nil {
		dAtA[i] = 0x50
		i++
		if *m.IsOnLine {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BgUrl != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(len(*m.BgUrl)))
		i += copy(dAtA[i:], *m.BgUrl)
	}
	if m.Type != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.Type))
	}
	if m.Content != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if len(m.CommonTags) > 0 {
		for _, s := range m.CommonTags {
			dAtA[i] = 0x72
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.AttentionTime != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.AttentionTime))
	}
	if m.AttentionType != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.AttentionType))
	}
	if m.Adv != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(m.Adv.Size()))
		n1, err := m.Adv.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LoveMeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoveMeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.Page))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LoveMeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoveMeResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.Page))
	}
	if len(m.Cards) > 0 {
		for _, msg := range m.Cards {
			dAtA[i] = 0x12
			i++
			i = encodeVarintVoiceLove(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MyLoveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MyLoveReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.Page))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MyLoveResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MyLoveResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.Page))
	}
	if len(m.Cards) > 0 {
		for _, msg := range m.Cards {
			dAtA[i] = 0x12
			i++
			i = encodeVarintVoiceLove(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SystemBgReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemBgReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Url != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(len(*m.Url)))
		i += copy(dAtA[i:], *m.Url)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SystemBgResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemBgResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Url != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(len(*m.Url)))
		i += copy(dAtA[i:], *m.Url)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PersonTag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersonTag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.IsHot != nil {
		dAtA[i] = 0x18
		i++
		if *m.IsHot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PersonalityTagReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersonalityTagReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.Page))
	}
	if m.Num != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.Num))
	}
	if len(m.PersonalityTags) > 0 {
		for _, msg := range m.PersonalityTags {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintVoiceLove(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SearchVoiceVideoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchVoiceVideoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Content != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.Type != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.Type))
	}
	if m.Page != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.Page))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *VoiceVideo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoiceVideo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.Id))
	}
	if m.Maker != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(len(*m.Maker)))
		i += copy(dAtA[i:], *m.Maker)
	}
	if m.Name != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if len(m.TagIds) > 0 {
		for _, num := range m.TagIds {
			dAtA[i] = 0x20
			i++
			i = encodeVarintVoiceLove(dAtA, i, uint64(num))
		}
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Content != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.MusicUrl != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(len(*m.MusicUrl)))
		i += copy(dAtA[i:], *m.MusicUrl)
	}
	if m.ImageUrl != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(len(*m.ImageUrl)))
		i += copy(dAtA[i:], *m.ImageUrl)
	}
	if m.Type != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.Type))
	}
	if m.MusicTime != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.MusicTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SearchVoiceVideoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchVoiceVideoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintVoiceLove(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MixVideo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MixVideo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.Id))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.PlayerId))
	}
	if m.BgVideo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(m.BgVideo.Size()))
		n2, err := m.BgVideo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.MixVoiceUrl != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(len(*m.MixVoiceUrl)))
		i += copy(dAtA[i:], *m.MixVoiceUrl)
	}
	if m.IsCard != nil {
		dAtA[i] = 0x28
		i++
		if *m.IsCard {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MixTime != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.MixTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *VoiceCardListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoiceCardListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.PlayerId))
	}
	if len(m.Cards) > 0 {
		for _, msg := range m.Cards {
			dAtA[i] = 0x12
			i++
			i = encodeVarintVoiceLove(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PersonalityTagsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersonalityTagsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.PlayerId))
	}
	if len(m.PersonalityTags) > 0 {
		for _, msg := range m.PersonalityTags {
			dAtA[i] = 0x12
			i++
			i = encodeVarintVoiceLove(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetVoiceCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetVoiceCard) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MixId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.MixId))
	}
	if len(m.PersonalityTags) > 0 {
		for _, num := range m.PersonalityTags {
			dAtA[i] = 0x10
			i++
			i = encodeVarintVoiceLove(dAtA, i, uint64(num))
		}
	}
	if m.BgUrl != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(len(*m.BgUrl)))
		i += copy(dAtA[i:], *m.BgUrl)
	}
	if m.Result != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MixVoiceVideo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MixVoiceVideo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BgId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.BgId))
	}
	if m.MyVoiceUrl != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(len(*m.MyVoiceUrl)))
		i += copy(dAtA[i:], *m.MyVoiceUrl)
	}
	if m.MixVideoUrl != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(len(*m.MixVideoUrl)))
		i += copy(dAtA[i:], *m.MixVideoUrl)
	}
	if m.MixId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.MixId))
	}
	if m.Result != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.Result))
	}
	if m.BgVolume != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.BgVolume))
	}
	if m.MixVolume != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.MixVolume))
	}
	if m.MixTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.MixTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetVoiceVideoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVoiceVideoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.Type))
	}
	if m.Page != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.Page))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetVoiceVideoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVoiceVideoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.Type))
	}
	if m.Page != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.Page))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.PageSize))
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x22
			i++
			i = encodeVarintVoiceLove(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IntimacyInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntimacyInfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.IntimacyLv != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.IntimacyLv))
	}
	if m.IntimacyVal != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.IntimacyVal))
	}
	if m.IntimacyMaxVal != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.IntimacyMaxVal))
	}
	if m.IsShow != nil {
		dAtA[i] = 0x28
		i++
		if *m.IsShow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConstellationResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConstellationResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Constellations) > 0 {
		for _, msg := range m.Constellations {
			dAtA[i] = 0xa
			i++
			i = encodeVarintVoiceLove(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetConstellation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetConstellation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.Id))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerCommonData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerCommonData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.PlayerId))
	}
	if m.HeadUrl != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(len(*m.HeadUrl)))
		i += copy(dAtA[i:], *m.HeadUrl)
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintVoiceLove(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Constellation != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.Constellation))
	}
	if m.GuideWord != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(len(*m.GuideWord)))
		i += copy(dAtA[i:], *m.GuideWord)
	}
	if len(m.Labels) > 0 {
		for _, num := range m.Labels {
			dAtA[i] = 0x30
			i++
			i = encodeVarintVoiceLove(dAtA, i, uint64(num))
		}
	}
	if m.Sex != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.Sex))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SayHiData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SayHiData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerData) > 0 {
		for _, msg := range m.PlayerData {
			dAtA[i] = 0xa
			i++
			i = encodeVarintVoiceLove(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.MatchingDegree != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.MatchingDegree))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LoveMeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoveMeData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Num != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.Num))
	}
	if m.TotalNum != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.TotalNum))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *VCZanResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VCZanResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0x8
		i++
		if *m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HotEpisodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HotEpisodeResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Episode) > 0 {
		for _, msg := range m.Episode {
			dAtA[i] = 0xa
			i++
			i = encodeVarintVoiceLove(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *VoiceProduct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoiceProduct) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TabId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.TabId))
	}
	if m.Page != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.Page))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DelVoiceCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelVoiceCard) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MixId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.MixId))
	}
	if m.NewMixId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(*m.NewMixId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SayHiLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SayHiLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SessionId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(len(*m.SessionId)))
		i += copy(dAtA[i:], *m.SessionId)
	}
	if m.Log != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVoiceLove(dAtA, i, uint64(m.Log.Size()))
		n3, err := m.Log.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IsFirstLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsFirstLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsFirstReq != nil {
		dAtA[i] = 0x8
		i++
		if *m.IsFirstReq {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintVoiceLove(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LoveMatchResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cards) > 0 {
		for _, e := range m.Cards {
			l = e.Size()
			n += 1 + l + sovVoiceLove(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoiceCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovVoiceLove(uint64(*m.PlayerId))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovVoiceLove(uint64(l))
	}
	if m.HeadUrl != nil {
		l = len(*m.HeadUrl)
		n += 1 + l + sovVoiceLove(uint64(l))
	}
	if m.Sex != nil {
		n += 1 + sovVoiceLove(uint64(*m.Sex))
	}
	if m.Constellation != nil {
		n += 1 + sovVoiceLove(uint64(*m.Constellation))
	}
	if len(m.PersonalityTags) > 0 {
		for _, e := range m.PersonalityTags {
			l = e.Size()
			n += 1 + l + sovVoiceLove(uint64(l))
		}
	}
	if m.MatchingDegree != nil {
		n += 1 + sovVoiceLove(uint64(*m.MatchingDegree))
	}
	if m.ZanNum != nil {
		n += 1 + sovVoiceLove(uint64(*m.ZanNum))
	}
	if m.VoiceUrl != nil {
		l = len(*m.VoiceUrl)
		n += 1 + l + sovVoiceLove(uint64(l))
	}
	if m.IsOnLine != nil {
		n += 2
	}
	if m.BgUrl != nil {
		l = len(*m.BgUrl)
		n += 1 + l + sovVoiceLove(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovVoiceLove(uint64(*m.Type))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovVoiceLove(uint64(l))
	}
	if len(m.CommonTags) > 0 {
		for _, s := range m.CommonTags {
			l = len(s)
			n += 1 + l + sovVoiceLove(uint64(l))
		}
	}
	if m.AttentionTime != nil {
		n += 1 + sovVoiceLove(uint64(*m.AttentionTime))
	}
	if m.AttentionType != nil {
		n += 2 + sovVoiceLove(uint64(*m.AttentionType))
	}
	if m.Adv != nil {
		l = m.Adv.Size()
		n += 2 + l + sovVoiceLove(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoveMeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		n += 1 + sovVoiceLove(uint64(*m.Page))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoveMeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		n += 1 + sovVoiceLove(uint64(*m.Page))
	}
	if len(m.Cards) > 0 {
		for _, e := range m.Cards {
			l = e.Size()
			n += 1 + l + sovVoiceLove(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MyLoveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		n += 1 + sovVoiceLove(uint64(*m.Page))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MyLoveResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		n += 1 + sovVoiceLove(uint64(*m.Page))
	}
	if len(m.Cards) > 0 {
		for _, e := range m.Cards {
			l = e.Size()
			n += 1 + l + sovVoiceLove(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovVoiceLove(uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SystemBgReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Url != nil {
		l = len(*m.Url)
		n += 1 + l + sovVoiceLove(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SystemBgResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Url != nil {
		l = len(*m.Url)
		n += 1 + l + sovVoiceLove(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PersonTag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovVoiceLove(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovVoiceLove(uint64(l))
	}
	if m.IsHot != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PersonalityTagReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		n += 1 + sovVoiceLove(uint64(*m.Page))
	}
	if m.Num != nil {
		n += 1 + sovVoiceLove(uint64(*m.Num))
	}
	if len(m.PersonalityTags) > 0 {
		for _, e := range m.PersonalityTags {
			l = e.Size()
			n += 1 + l + sovVoiceLove(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchVoiceVideoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovVoiceLove(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovVoiceLove(uint64(*m.Type))
	}
	if m.Page != nil {
		n += 1 + sovVoiceLove(uint64(*m.Page))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoiceVideo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovVoiceLove(uint64(*m.Id))
	}
	if m.Maker != nil {
		l = len(*m.Maker)
		n += 1 + l + sovVoiceLove(uint64(l))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovVoiceLove(uint64(l))
	}
	if len(m.TagIds) > 0 {
		for _, e := range m.TagIds {
			n += 1 + sovVoiceLove(uint64(e))
		}
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovVoiceLove(uint64(l))
		}
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovVoiceLove(uint64(l))
	}
	if m.MusicUrl != nil {
		l = len(*m.MusicUrl)
		n += 1 + l + sovVoiceLove(uint64(l))
	}
	if m.ImageUrl != nil {
		l = len(*m.ImageUrl)
		n += 1 + l + sovVoiceLove(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovVoiceLove(uint64(*m.Type))
	}
	if m.MusicTime != nil {
		n += 1 + sovVoiceLove(uint64(*m.MusicTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchVoiceVideoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovVoiceLove(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MixVideo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovVoiceLove(uint64(*m.Id))
	}
	if m.PlayerId != nil {
		n += 1 + sovVoiceLove(uint64(*m.PlayerId))
	}
	if m.BgVideo != nil {
		l = m.BgVideo.Size()
		n += 1 + l + sovVoiceLove(uint64(l))
	}
	if m.MixVoiceUrl != nil {
		l = len(*m.MixVoiceUrl)
		n += 1 + l + sovVoiceLove(uint64(l))
	}
	if m.IsCard != nil {
		n += 2
	}
	if m.MixTime != nil {
		n += 1 + sovVoiceLove(uint64(*m.MixTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoiceCardListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovVoiceLove(uint64(*m.PlayerId))
	}
	if len(m.Cards) > 0 {
		for _, e := range m.Cards {
			l = e.Size()
			n += 1 + l + sovVoiceLove(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PersonalityTagsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovVoiceLove(uint64(*m.PlayerId))
	}
	if len(m.PersonalityTags) > 0 {
		for _, e := range m.PersonalityTags {
			l = e.Size()
			n += 1 + l + sovVoiceLove(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetVoiceCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MixId != nil {
		n += 1 + sovVoiceLove(uint64(*m.MixId))
	}
	if len(m.PersonalityTags) > 0 {
		for _, e := range m.PersonalityTags {
			n += 1 + sovVoiceLove(uint64(e))
		}
	}
	if m.BgUrl != nil {
		l = len(*m.BgUrl)
		n += 1 + l + sovVoiceLove(uint64(l))
	}
	if m.Result != nil {
		n += 1 + sovVoiceLove(uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MixVoiceVideo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BgId != nil {
		n += 1 + sovVoiceLove(uint64(*m.BgId))
	}
	if m.MyVoiceUrl != nil {
		l = len(*m.MyVoiceUrl)
		n += 1 + l + sovVoiceLove(uint64(l))
	}
	if m.MixVideoUrl != nil {
		l = len(*m.MixVideoUrl)
		n += 1 + l + sovVoiceLove(uint64(l))
	}
	if m.MixId != nil {
		n += 1 + sovVoiceLove(uint64(*m.MixId))
	}
	if m.Result != nil {
		n += 1 + sovVoiceLove(uint64(*m.Result))
	}
	if m.BgVolume != nil {
		n += 1 + sovVoiceLove(uint64(*m.BgVolume))
	}
	if m.MixVolume != nil {
		n += 1 + sovVoiceLove(uint64(*m.MixVolume))
	}
	if m.MixTime != nil {
		n += 1 + sovVoiceLove(uint64(*m.MixTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetVoiceVideoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovVoiceLove(uint64(*m.Type))
	}
	if m.Page != nil {
		n += 1 + sovVoiceLove(uint64(*m.Page))
	}
	if m.PageSize != nil {
		n += 1 + sovVoiceLove(uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetVoiceVideoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovVoiceLove(uint64(*m.Type))
	}
	if m.Page != nil {
		n += 1 + sovVoiceLove(uint64(*m.Page))
	}
	if m.PageSize != nil {
		n += 1 + sovVoiceLove(uint64(*m.PageSize))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovVoiceLove(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IntimacyInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovVoiceLove(uint64(l))
	}
	if m.IntimacyLv != nil {
		n += 1 + sovVoiceLove(uint64(*m.IntimacyLv))
	}
	if m.IntimacyVal != nil {
		n += 1 + sovVoiceLove(uint64(*m.IntimacyVal))
	}
	if m.IntimacyMaxVal != nil {
		n += 1 + sovVoiceLove(uint64(*m.IntimacyMaxVal))
	}
	if m.IsShow != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConstellationResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Constellations) > 0 {
		for _, e := range m.Constellations {
			l = e.Size()
			n += 1 + l + sovVoiceLove(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetConstellation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovVoiceLove(uint64(*m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerCommonData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovVoiceLove(uint64(*m.PlayerId))
	}
	if m.HeadUrl != nil {
		l = len(*m.HeadUrl)
		n += 1 + l + sovVoiceLove(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovVoiceLove(uint64(l))
		}
	}
	if m.Constellation != nil {
		n += 1 + sovVoiceLove(uint64(*m.Constellation))
	}
	if m.GuideWord != nil {
		l = len(*m.GuideWord)
		n += 1 + l + sovVoiceLove(uint64(l))
	}
	if len(m.Labels) > 0 {
		for _, e := range m.Labels {
			n += 1 + sovVoiceLove(uint64(e))
		}
	}
	if m.Sex != nil {
		n += 1 + sovVoiceLove(uint64(*m.Sex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SayHiData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PlayerData) > 0 {
		for _, e := range m.PlayerData {
			l = e.Size()
			n += 1 + l + sovVoiceLove(uint64(l))
		}
	}
	if m.MatchingDegree != nil {
		n += 1 + sovVoiceLove(uint64(*m.MatchingDegree))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoveMeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Num != nil {
		n += 1 + sovVoiceLove(uint64(*m.Num))
	}
	if m.TotalNum != nil {
		n += 1 + sovVoiceLove(uint64(*m.TotalNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VCZanResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HotEpisodeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Episode) > 0 {
		for _, e := range m.Episode {
			l = e.Size()
			n += 1 + l + sovVoiceLove(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoiceProduct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TabId != nil {
		n += 1 + sovVoiceLove(uint64(*m.TabId))
	}
	if m.Page != nil {
		n += 1 + sovVoiceLove(uint64(*m.Page))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DelVoiceCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MixId != nil {
		n += 1 + sovVoiceLove(uint64(*m.MixId))
	}
	if m.NewMixId != nil {
		n += 1 + sovVoiceLove(uint64(*m.NewMixId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SayHiLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionId != nil {
		l = len(*m.SessionId)
		n += 1 + l + sovVoiceLove(uint64(l))
	}
	if m.Log != nil {
		l = m.Log.Size()
		n += 1 + l + sovVoiceLove(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IsFirstLogin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsFirstReq != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovVoiceLove(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVoiceLove(x uint64) (n int) {
	return sovVoiceLove(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LoveMatchResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoveMatchResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoveMatchResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cards = append(m.Cards, &VoiceCard{})
			if err := m.Cards[len(m.Cards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoiceCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoiceCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoiceCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadUrl = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sex = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constellation", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Constellation = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersonalityTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PersonalityTags = append(m.PersonalityTags, &PersonTag{})
			if err := m.PersonalityTags[len(m.PersonalityTags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchingDegree", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MatchingDegree = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZanNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ZanNum = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoiceUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VoiceUrl = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnLine", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOnLine = &b
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BgUrl = &s
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonTags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommonTags = append(m.CommonTags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttentionTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AttentionTime = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttentionType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AttentionType = &v
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adv", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Adv == nil {
				m.Adv = &share_message.AdvSetting{}
			}
			if err := m.Adv.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoveMeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoveMeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoveMeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoveMeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoveMeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoveMeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cards = append(m.Cards, &VoiceCard{})
			if err := m.Cards[len(m.Cards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MyLoveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MyLoveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MyLoveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MyLoveResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MyLoveResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MyLoveResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cards = append(m.Cards, &VoiceCard{})
			if err := m.Cards[len(m.Cards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemBgReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemBgReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemBgReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Url = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemBgResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemBgResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemBgResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Url = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersonTag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersonTag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersonTag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsHot = &b
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersonalityTagReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersonalityTagReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersonalityTagReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Num = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersonalityTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PersonalityTags = append(m.PersonalityTags, &PersonTag{})
			if err := m.PersonalityTags[len(m.PersonalityTags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchVoiceVideoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchVoiceVideoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchVoiceVideoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoiceVideo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoiceVideo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoiceVideo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Maker = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVoiceLove
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TagIds = append(m.TagIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVoiceLove
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVoiceLove
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthVoiceLove
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TagIds) == 0 {
					m.TagIds = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVoiceLove
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TagIds = append(m.TagIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TagIds", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MusicUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MusicUrl = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ImageUrl = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MusicTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MusicTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchVoiceVideoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchVoiceVideoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchVoiceVideoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &VoiceVideo{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MixVideo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MixVideo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MixVideo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgVideo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BgVideo == nil {
				m.BgVideo = &VoiceVideo{}
			}
			if err := m.BgVideo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MixVoiceUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MixVoiceUrl = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCard", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsCard = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MixTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MixTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoiceCardListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoiceCardListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoiceCardListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cards = append(m.Cards, &MixVideo{})
			if err := m.Cards[len(m.Cards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersonalityTagsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersonalityTagsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersonalityTagsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersonalityTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PersonalityTags = append(m.PersonalityTags, &PersonTag{})
			if err := m.PersonalityTags[len(m.PersonalityTags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetVoiceCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetVoiceCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetVoiceCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MixId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MixId = &v
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVoiceLove
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PersonalityTags = append(m.PersonalityTags, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVoiceLove
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVoiceLove
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthVoiceLove
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PersonalityTags) == 0 {
					m.PersonalityTags = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVoiceLove
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PersonalityTags = append(m.PersonalityTags, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PersonalityTags", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BgUrl = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MixVoiceVideo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MixVoiceVideo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MixVoiceVideo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BgId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyVoiceUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MyVoiceUrl = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MixVideoUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MixVideoUrl = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MixId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MixId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgVolume", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BgVolume = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MixVolume", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MixVolume = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MixTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MixTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVoiceVideoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVoiceVideoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVoiceVideoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVoiceVideoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVoiceVideoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVoiceVideoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &VoiceVideo{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IntimacyInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntimacyInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntimacyInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntimacyLv", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IntimacyLv = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntimacyVal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IntimacyVal = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntimacyMaxVal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IntimacyMaxVal = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsShow = &b
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConstellationResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConstellationResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConstellationResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constellations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Constellations = append(m.Constellations, &share_message.InterestTag{})
			if err := m.Constellations[len(m.Constellations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetConstellation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetConstellation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetConstellation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerCommonData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerCommonData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerCommonData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadUrl = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &PersonTag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constellation", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Constellation = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuideWord", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GuideWord = &s
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVoiceLove
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Labels = append(m.Labels, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVoiceLove
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVoiceLove
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthVoiceLove
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Labels) == 0 {
					m.Labels = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVoiceLove
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Labels = append(m.Labels, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sex = &v
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SayHiData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SayHiData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SayHiData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerData = append(m.PlayerData, &PlayerCommonData{})
			if err := m.PlayerData[len(m.PlayerData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchingDegree", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MatchingDegree = &v
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoveMeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoveMeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoveMeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Num = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalNum = &v
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VCZanResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VCZanResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VCZanResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Result = &b
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HotEpisodeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HotEpisodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HotEpisodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Episode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Episode = append(m.Episode, &PersonTag{})
			if err := m.Episode[len(m.Episode)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoiceProduct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoiceProduct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoiceProduct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TabId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelVoiceCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelVoiceCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelVoiceCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MixId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MixId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewMixId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NewMixId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SayHiLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SayHiLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SayHiLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SessionId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVoiceLove
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Log == nil {
				m.Log = &share_message.PersonalChatLog{}
			}
			if err := m.Log.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsFirstLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsFirstLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsFirstLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFirstReq", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsFirstReq = &b
		default:
			iNdEx = preIndex
			skippy, err := skipVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVoiceLove(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVoiceLove
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVoiceLove
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVoiceLove
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthVoiceLove
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVoiceLove
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVoiceLove(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthVoiceLove
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVoiceLove = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVoiceLove   = fmt.Errorf("proto: integer overflow")
)
