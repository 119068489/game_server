// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sport_hall_sport.proto

package client_hall

import (
	fmt "fmt"
	_ "game_server/pb/share_message"
	proto "github.com/akqp2019/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ESPortRoomMsg struct {
	//接收者Id 多个
	RecipientPlayerIds []int64 `protobuf:"varint,1,rep,name=RecipientPlayerIds" json:"RecipientPlayerIds,omitempty" bson:"RecipientPlayerIds,omitempty"`
	//消息
	Msg *string `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty" bson:"Msg,omitempty"`
	//发送者ID
	SenderPlayerId *int64 `protobuf:"varint,3,opt,name=SenderPlayerId" json:"SenderPlayerId,omitempty" bson:"SenderPlayerId,omitempty"`
	//放映厅ID
	VideoId *int64 `protobuf:"varint,4,opt,name=VideoId" json:"VideoId,omitempty" bson:"VideoId,omitempty"`
	//消息ID
	MsgId                *int64   `protobuf:"varint,5,opt,name=MsgId" json:"MsgId,omitempty" bson:"MsgId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESPortRoomMsg) Reset()         { *m = ESPortRoomMsg{} }
func (m *ESPortRoomMsg) String() string { return proto.CompactTextString(m) }
func (*ESPortRoomMsg) ProtoMessage()    {}
func (*ESPortRoomMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_60a36a4d895c3287, []int{0}
}
func (m *ESPortRoomMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESPortRoomMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESPortRoomMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESPortRoomMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESPortRoomMsg.Merge(m, src)
}
func (m *ESPortRoomMsg) XXX_Size() int {
	return m.Size()
}
func (m *ESPortRoomMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ESPortRoomMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ESPortRoomMsg proto.InternalMessageInfo

func (m *ESPortRoomMsg) GetRecipientPlayerIds() []int64 {
	if m != nil {
		return m.RecipientPlayerIds
	}
	return nil
}

func (m *ESPortRoomMsg) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func (m *ESPortRoomMsg) GetSenderPlayerId() int64 {
	if m != nil && m.SenderPlayerId != nil {
		return *m.SenderPlayerId
	}
	return 0
}

func (m *ESPortRoomMsg) GetVideoId() int64 {
	if m != nil && m.VideoId != nil {
		return *m.VideoId
	}
	return 0
}

func (m *ESPortRoomMsg) GetMsgId() int64 {
	if m != nil && m.MsgId != nil {
		return *m.MsgId
	}
	return 0
}

type LotteryRequest struct {
	UniqueGameId         *int64   `protobuf:"varint,1,opt,name=UniqueGameId" json:"UniqueGameId,omitempty" bson:"UniqueGameId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *LotteryRequest) Reset()         { *m = LotteryRequest{} }
func (m *LotteryRequest) String() string { return proto.CompactTextString(m) }
func (*LotteryRequest) ProtoMessage()    {}
func (*LotteryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_60a36a4d895c3287, []int{1}
}
func (m *LotteryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LotteryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LotteryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LotteryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LotteryRequest.Merge(m, src)
}
func (m *LotteryRequest) XXX_Size() int {
	return m.Size()
}
func (m *LotteryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LotteryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LotteryRequest proto.InternalMessageInfo

func (m *LotteryRequest) GetUniqueGameId() int64 {
	if m != nil && m.UniqueGameId != nil {
		return *m.UniqueGameId
	}
	return 0
}

//开奖投注项的结果体
type ItemResult struct {
	//竞猜项 id
	BetNum *string `protobuf:"bytes,1,opt,name=BetNum" json:"BetNum,omitempty" bson:"BetNum,omitempty"`
	//竞猜项是否有结果(0 否 1 是)
	Status *string `protobuf:"bytes,2,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	//该竞猜项是否达成(0未达成，1达成 , -1 无结果)
	Win *string `protobuf:"bytes,3,opt,name=Win" json:"Win,omitempty" bson:"Win,omitempty"`
	//投注状态从1到0  或  从1到3记录; 其他不变(开奖的时候这个时间的前n秒投注为无效单)
	StatusTime           *int64   `protobuf:"varint,4,opt,name=StatusTime" json:"StatusTime,omitempty" bson:"StatusTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ItemResult) Reset()         { *m = ItemResult{} }
func (m *ItemResult) String() string { return proto.CompactTextString(m) }
func (*ItemResult) ProtoMessage()    {}
func (*ItemResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_60a36a4d895c3287, []int{2}
}
func (m *ItemResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemResult.Merge(m, src)
}
func (m *ItemResult) XXX_Size() int {
	return m.Size()
}
func (m *ItemResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemResult.DiscardUnknown(m)
}

var xxx_messageInfo_ItemResult proto.InternalMessageInfo

func (m *ItemResult) GetBetNum() string {
	if m != nil && m.BetNum != nil {
		return *m.BetNum
	}
	return ""
}

func (m *ItemResult) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *ItemResult) GetWin() string {
	if m != nil && m.Win != nil {
		return *m.Win
	}
	return ""
}

func (m *ItemResult) GetStatusTime() int64 {
	if m != nil && m.StatusTime != nil {
		return *m.StatusTime
	}
	return 0
}

func init() {
	proto.RegisterType((*ESPortRoomMsg)(nil), "client_hall.ESPortRoomMsg")
	proto.RegisterType((*LotteryRequest)(nil), "client_hall.LotteryRequest")
	proto.RegisterType((*ItemResult)(nil), "client_hall.ItemResult")
}

func init() { proto.RegisterFile("sport_hall_sport.proto", fileDescriptor_60a36a4d895c3287) }

var fileDescriptor_60a36a4d895c3287 = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x51, 0xd1, 0x6a, 0xd4, 0x40,
	0x14, 0x25, 0xc6, 0x2a, 0x7b, 0x77, 0xbb, 0xe2, 0x20, 0x6b, 0x08, 0xb8, 0xae, 0x7d, 0x90, 0x45,
	0x30, 0x0b, 0x7d, 0xf5, 0xad, 0x5a, 0x34, 0xd0, 0xb5, 0x25, 0x69, 0xeb, 0x93, 0x84, 0x31, 0xb9,
	0x9b, 0x0d, 0xcc, 0x64, 0xd2, 0xb9, 0x13, 0x61, 0x7f, 0xc1, 0x2f, 0xf3, 0xd1, 0x4f, 0x90, 0xfd,
	0x12, 0xc9, 0x4c, 0x84, 0x76, 0x15, 0xf6, 0xa1, 0x6f, 0x33, 0x73, 0xce, 0x3d, 0x73, 0xce, 0x3d,
	0x30, 0xa1, 0x46, 0x69, 0x93, 0xad, 0xb9, 0x10, 0x99, 0x3d, 0x46, 0x8d, 0x56, 0x46, 0xb1, 0x61,
	0x2e, 0x2a, 0xac, 0x1d, 0x10, 0x3e, 0x75, 0x24, 0xde, 0x34, 0x62, 0xe3, 0xf0, 0x70, 0x51, 0x72,
	0x89, 0x19, 0xa1, 0xfe, 0x8e, 0x7a, 0x61, 0x9f, 0x16, 0xb4, 0xe6, 0x1a, 0x33, 0x89, 0x44, 0xbc,
	0xc4, 0x05, 0x17, 0x22, 0x57, 0x52, 0xaa, 0xba, 0x1f, 0x78, 0xb7, 0x6f, 0xc0, 0xf0, 0x6f, 0x02,
	0x33, 0x32, 0xba, 0xcd, 0x4d, 0x86, 0x6f, 0xed, 0x97, 0xe4, 0x86, 0x8f, 0x1a, 0x38, 0x3c, 0x4d,
	0x2f, 0x94, 0x36, 0x89, 0x52, 0x72, 0x49, 0x25, 0x0b, 0x81, 0x25, 0x98, 0x57, 0x4d, 0xe7, 0xf1,
	0x42, 0xf0, 0x0d, 0xea, 0xb8, 0xa0, 0xc0, 0x9b, 0xf9, 0x73, 0x9f, 0x0d, 0xc1, 0x5f, 0x52, 0x19,
	0x3c, 0x98, 0x79, 0xf3, 0x01, 0x9b, 0xc0, 0x38, 0xc5, 0xba, 0x40, 0xfd, 0x97, 0x15, 0xf8, 0x33,
	0x6f, 0xee, 0xb3, 0x27, 0xf0, 0xf8, 0xba, 0x2a, 0x50, 0xc5, 0x45, 0xf0, 0xd0, 0x3e, 0x1c, 0xc2,
	0xc1, 0x92, 0xca, 0xb8, 0x08, 0x0e, 0xba, 0xeb, 0xd1, 0x6b, 0x18, 0x9f, 0x29, 0x63, 0x50, 0x6f,
	0x12, 0xbc, 0x69, 0x91, 0x0c, 0x7b, 0x06, 0xa3, 0xab, 0xba, 0xba, 0x69, 0xf1, 0x23, 0x97, 0x18,
	0x17, 0x81, 0x67, 0x79, 0x4b, 0x80, 0xd8, 0xa0, 0x4c, 0x90, 0x5a, 0x61, 0xd8, 0x18, 0x1e, 0x9d,
	0xa0, 0xf9, 0xdc, 0x4a, 0x8b, 0x0e, 0xba, 0x7b, 0x6a, 0xb8, 0x69, 0xa9, 0x77, 0x33, 0x04, 0xff,
	0x4b, 0x55, 0x5b, 0x0b, 0x03, 0xc6, 0x00, 0x1c, 0x78, 0x59, 0x49, 0x74, 0x2e, 0x8e, 0x7f, 0xf8,
	0x30, 0xfa, 0xc4, 0x85, 0x38, 0x3e, 0x4d, 0x6d, 0x7e, 0x76, 0x05, 0x93, 0xa4, 0xc9, 0x5d, 0x78,
	0x72, 0x19, 0xce, 0xeb, 0xb3, 0xaa, 0x46, 0x16, 0x46, 0x77, 0xf6, 0x17, 0x39, 0xb0, 0x53, 0xc4,
	0xf0, 0x65, 0x74, 0xab, 0xbe, 0xc8, 0x69, 0xbd, 0xb7, 0x6d, 0xf4, 0x46, 0xaf, 0xe1, 0xf9, 0x3f,
	0xb2, 0xab, 0xd5, 0xfd, 0x75, 0x05, 0xbc, 0xb8, 0xa5, 0xdb, 0xd2, 0xba, 0x5b, 0xd6, 0xb9, 0x2e,
	0x50, 0xa7, 0x1b, 0xea, 0x8a, 0x7b, 0xb3, 0xa3, 0x7e, 0xd9, 0xb5, 0xde, 0xf3, 0x77, 0xb8, 0xfb,
	0x7f, 0xfb, 0xda, 0xa7, 0xe8, 0x80, 0x0f, 0xdc, 0x70, 0xb7, 0xce, 0xb8, 0x5e, 0x29, 0xf6, 0xea,
	0x3f, 0xb3, 0x77, 0x29, 0x7b, 0xe5, 0x4f, 0x46, 0x3f, 0xb7, 0x53, 0xef, 0xd7, 0x76, 0xea, 0xfd,
	0xde, 0x4e, 0xbd, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x7e, 0x08, 0x85, 0x2a, 0x03, 0x00,
	0x00,
}

func (m *ESPortRoomMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESPortRoomMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RecipientPlayerIds) > 0 {
		for _, num := range m.RecipientPlayerIds {
			dAtA[i] = 0x8
			i++
			i = encodeVarintSportHallSport(dAtA, i, uint64(num))
		}
	}
	if m.Msg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSportHallSport(dAtA, i, uint64(len(*m.Msg)))
		i += copy(dAtA[i:], *m.Msg)
	}
	if m.SenderPlayerId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSportHallSport(dAtA, i, uint64(*m.SenderPlayerId))
	}
	if m.VideoId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSportHallSport(dAtA, i, uint64(*m.VideoId))
	}
	if m.MsgId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSportHallSport(dAtA, i, uint64(*m.MsgId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LotteryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UniqueGameId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportHallSport(dAtA, i, uint64(*m.UniqueGameId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ItemResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BetNum != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSportHallSport(dAtA, i, uint64(len(*m.BetNum)))
		i += copy(dAtA[i:], *m.BetNum)
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSportHallSport(dAtA, i, uint64(len(*m.Status)))
		i += copy(dAtA[i:], *m.Status)
	}
	if m.Win != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSportHallSport(dAtA, i, uint64(len(*m.Win)))
		i += copy(dAtA[i:], *m.Win)
	}
	if m.StatusTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSportHallSport(dAtA, i, uint64(*m.StatusTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSportHallSport(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ESPortRoomMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RecipientPlayerIds) > 0 {
		for _, e := range m.RecipientPlayerIds {
			n += 1 + sovSportHallSport(uint64(e))
		}
	}
	if m.Msg != nil {
		l = len(*m.Msg)
		n += 1 + l + sovSportHallSport(uint64(l))
	}
	if m.SenderPlayerId != nil {
		n += 1 + sovSportHallSport(uint64(*m.SenderPlayerId))
	}
	if m.VideoId != nil {
		n += 1 + sovSportHallSport(uint64(*m.VideoId))
	}
	if m.MsgId != nil {
		n += 1 + sovSportHallSport(uint64(*m.MsgId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LotteryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UniqueGameId != nil {
		n += 1 + sovSportHallSport(uint64(*m.UniqueGameId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ItemResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BetNum != nil {
		l = len(*m.BetNum)
		n += 1 + l + sovSportHallSport(uint64(l))
	}
	if m.Status != nil {
		l = len(*m.Status)
		n += 1 + l + sovSportHallSport(uint64(l))
	}
	if m.Win != nil {
		l = len(*m.Win)
		n += 1 + l + sovSportHallSport(uint64(l))
	}
	if m.StatusTime != nil {
		n += 1 + sovSportHallSport(uint64(*m.StatusTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSportHallSport(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSportHallSport(x uint64) (n int) {
	return sovSportHallSport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ESPortRoomMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportHallSport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESPortRoomMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESPortRoomMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSportHallSport
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RecipientPlayerIds = append(m.RecipientPlayerIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSportHallSport
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSportHallSport
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSportHallSport
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RecipientPlayerIds) == 0 {
					m.RecipientPlayerIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSportHallSport
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RecipientPlayerIds = append(m.RecipientPlayerIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientPlayerIds", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportHallSport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportHallSport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportHallSport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Msg = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderPlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportHallSport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SenderPlayerId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportHallSport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VideoId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportHallSport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MsgId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportHallSport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportHallSport
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportHallSport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LotteryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportHallSport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueGameId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportHallSport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniqueGameId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportHallSport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportHallSport
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportHallSport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportHallSport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportHallSport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportHallSport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportHallSport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetNum = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportHallSport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportHallSport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportHallSport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Status = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportHallSport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportHallSport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportHallSport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Win = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportHallSport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StatusTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportHallSport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportHallSport
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportHallSport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSportHallSport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSportHallSport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSportHallSport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSportHallSport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSportHallSport
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSportHallSport
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSportHallSport
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSportHallSport(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSportHallSport
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSportHallSport = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSportHallSport   = fmt.Errorf("proto: integer overflow")
)
