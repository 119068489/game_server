// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sport_apply.proto

package client_hall

import (
	fmt "fmt"
	share_message "game_server/pb/share_message"
	proto "github.com/akqp2019/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//获取比赛相关列表
type ESportGameViewPageRequest struct {
	UniqueGameId *int64 `protobuf:"varint,1,opt,name=UniqueGameId" json:"UniqueGameId,omitempty" bson:"UniqueGameId,omitempty"`
	//页码
	Page *int32 `protobuf:"varint,2,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	//页尺寸
	PageSize             *int32   `protobuf:"varint,3,opt,name=PageSize" json:"PageSize,omitempty" bson:"PageSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESportGameViewPageRequest) Reset()         { *m = ESportGameViewPageRequest{} }
func (m *ESportGameViewPageRequest) String() string { return proto.CompactTextString(m) }
func (*ESportGameViewPageRequest) ProtoMessage()    {}
func (*ESportGameViewPageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{0}
}
func (m *ESportGameViewPageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportGameViewPageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportGameViewPageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportGameViewPageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportGameViewPageRequest.Merge(m, src)
}
func (m *ESportGameViewPageRequest) XXX_Size() int {
	return m.Size()
}
func (m *ESportGameViewPageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportGameViewPageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ESportGameViewPageRequest proto.InternalMessageInfo

func (m *ESportGameViewPageRequest) GetUniqueGameId() int64 {
	if m != nil && m.UniqueGameId != nil {
		return *m.UniqueGameId
	}
	return 0
}

func (m *ESportGameViewPageRequest) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *ESportGameViewPageRequest) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

//数据状态更改
type ESportDataStatusInfo struct {
	//菜单ID
	MenuId *int32 `protobuf:"varint,1,opt,name=MenuId" json:"MenuId,omitempty" bson:"MenuId,omitempty"`
	//数据ID
	DataId *int64 `protobuf:"varint,2,opt,name=DataId" json:"DataId,omitempty" bson:"DataId,omitempty"`
	//状态
	Status               *int32   `protobuf:"varint,3,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESportDataStatusInfo) Reset()         { *m = ESportDataStatusInfo{} }
func (m *ESportDataStatusInfo) String() string { return proto.CompactTextString(m) }
func (*ESportDataStatusInfo) ProtoMessage()    {}
func (*ESportDataStatusInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{1}
}
func (m *ESportDataStatusInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportDataStatusInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportDataStatusInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportDataStatusInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportDataStatusInfo.Merge(m, src)
}
func (m *ESportDataStatusInfo) XXX_Size() int {
	return m.Size()
}
func (m *ESportDataStatusInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportDataStatusInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ESportDataStatusInfo proto.InternalMessageInfo

func (m *ESportDataStatusInfo) GetMenuId() int32 {
	if m != nil && m.MenuId != nil {
		return *m.MenuId
	}
	return 0
}

func (m *ESportDataStatusInfo) GetDataId() int64 {
	if m != nil && m.DataId != nil {
		return *m.DataId
	}
	return 0
}

func (m *ESportDataStatusInfo) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

//通用列表请求
type ESportPageRequest struct {
	//菜单ID（可选）
	MenuId *int32 `protobuf:"varint,1,opt,name=MenuId" json:"MenuId,omitempty" bson:"MenuId,omitempty"`
	//类型ID（可选）
	TypeId *int64 `protobuf:"varint,2,opt,name=TypeId" json:"TypeId,omitempty" bson:"TypeId,omitempty"`
	//labelId（可选）
	LabelId *int64 `protobuf:"varint,7,opt,name=LabelId" json:"LabelId,omitempty" bson:"LabelId,omitempty"`
	//页码
	Page *int32 `protobuf:"varint,3,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	//页尺寸
	PageSize *int32 `protobuf:"varint,4,opt,name=PageSize" json:"PageSize,omitempty" bson:"PageSize,omitempty"`
	//排序字段
	OrderField *string `protobuf:"bytes,5,opt,name=OrderField" json:"OrderField,omitempty" bson:"OrderField,omitempty"`
	//升序或者降序
	AscOrDesc            *string  `protobuf:"bytes,6,opt,name=AscOrDesc" json:"AscOrDesc,omitempty" bson:"AscOrDesc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESportPageRequest) Reset()         { *m = ESportPageRequest{} }
func (m *ESportPageRequest) String() string { return proto.CompactTextString(m) }
func (*ESportPageRequest) ProtoMessage()    {}
func (*ESportPageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{2}
}
func (m *ESportPageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportPageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportPageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportPageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportPageRequest.Merge(m, src)
}
func (m *ESportPageRequest) XXX_Size() int {
	return m.Size()
}
func (m *ESportPageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportPageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ESportPageRequest proto.InternalMessageInfo

func (m *ESportPageRequest) GetMenuId() int32 {
	if m != nil && m.MenuId != nil {
		return *m.MenuId
	}
	return 0
}

func (m *ESportPageRequest) GetTypeId() int64 {
	if m != nil && m.TypeId != nil {
		return *m.TypeId
	}
	return 0
}

func (m *ESportPageRequest) GetLabelId() int64 {
	if m != nil && m.LabelId != nil {
		return *m.LabelId
	}
	return 0
}

func (m *ESportPageRequest) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *ESportPageRequest) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *ESportPageRequest) GetOrderField() string {
	if m != nil && m.OrderField != nil {
		return *m.OrderField
	}
	return ""
}

func (m *ESportPageRequest) GetAscOrDesc() string {
	if m != nil && m.AscOrDesc != nil {
		return *m.AscOrDesc
	}
	return ""
}

//記錄埋点停留时长
type ESPortsBpsDurationData struct {
	//底部导航模块按钮  当前 PageType = 1000的时候生效  1 消息、2 通讯录、3 广场、4电竞、 5我的
	NavigationId *int32 `protobuf:"varint,1,opt,name=NavigationId" json:"NavigationId,omitempty" bson:"NavigationId,omitempty"`
	//菜單id  100= 系统消息，其他301等等按照原来的意思
	MenuId *int32 `protobuf:"varint,2,opt,name=MenuId" json:"MenuId,omitempty" bson:"MenuId,omitempty"`
	//标签数据ID 当 PageType = 3000 ， LabelId= -1000 的时候  就是等于玩家点中了 标签筛选按钮
	LabelId *int64 `protobuf:"varint,3,opt,name=LabelId" json:"LabelId,omitempty" bson:"LabelId,omitempty"`
	//扩展tabId
	ExTabId *int64 `protobuf:"varint,4,opt,name=ExTabId" json:"ExTabId,omitempty" bson:"ExTabId,omitempty"`
	//内容详细页Id
	DataId *int64 `protobuf:"varint,5,opt,name=DataId" json:"DataId,omitempty" bson:"DataId,omitempty"`
	//内容子页Id
	ExId *int64 `protobuf:"varint,6,opt,name=ExId" json:"ExId,omitempty" bson:"ExId,omitempty"`
	//數據類型：
	//1000、人单次进入电竞时长
	//2000、菜单
	//3000、自定标签
	//4000、扩展tabId
	//5000、内容页
	//6000、内容页子页
	PageType *int32 `protobuf:"varint,7,opt,name=PageType" json:"PageType,omitempty" bson:"PageType,omitempty"`
	//操作类型 1进入，2退出并结算
	Opt                  *int32   `protobuf:"varint,8,opt,name=Opt" json:"Opt,omitempty" bson:"Opt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESPortsBpsDurationData) Reset()         { *m = ESPortsBpsDurationData{} }
func (m *ESPortsBpsDurationData) String() string { return proto.CompactTextString(m) }
func (*ESPortsBpsDurationData) ProtoMessage()    {}
func (*ESPortsBpsDurationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{3}
}
func (m *ESPortsBpsDurationData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESPortsBpsDurationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESPortsBpsDurationData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESPortsBpsDurationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESPortsBpsDurationData.Merge(m, src)
}
func (m *ESPortsBpsDurationData) XXX_Size() int {
	return m.Size()
}
func (m *ESPortsBpsDurationData) XXX_DiscardUnknown() {
	xxx_messageInfo_ESPortsBpsDurationData.DiscardUnknown(m)
}

var xxx_messageInfo_ESPortsBpsDurationData proto.InternalMessageInfo

func (m *ESPortsBpsDurationData) GetNavigationId() int32 {
	if m != nil && m.NavigationId != nil {
		return *m.NavigationId
	}
	return 0
}

func (m *ESPortsBpsDurationData) GetMenuId() int32 {
	if m != nil && m.MenuId != nil {
		return *m.MenuId
	}
	return 0
}

func (m *ESPortsBpsDurationData) GetLabelId() int64 {
	if m != nil && m.LabelId != nil {
		return *m.LabelId
	}
	return 0
}

func (m *ESPortsBpsDurationData) GetExTabId() int64 {
	if m != nil && m.ExTabId != nil {
		return *m.ExTabId
	}
	return 0
}

func (m *ESPortsBpsDurationData) GetDataId() int64 {
	if m != nil && m.DataId != nil {
		return *m.DataId
	}
	return 0
}

func (m *ESPortsBpsDurationData) GetExId() int64 {
	if m != nil && m.ExId != nil {
		return *m.ExId
	}
	return 0
}

func (m *ESPortsBpsDurationData) GetPageType() int32 {
	if m != nil && m.PageType != nil {
		return *m.PageType
	}
	return 0
}

func (m *ESPortsBpsDurationData) GetOpt() int32 {
	if m != nil && m.Opt != nil {
		return *m.Opt
	}
	return 0
}

//記錄埋点停留列表时长
type ESPortsBpsDurationRequest struct {
	List                 []*ESPortsBpsDurationData `protobuf:"bytes,1,rep,name=List" json:"List,omitempty" bson:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-" bson:"-"`
	XXX_unrecognized     []byte                    `json:"-" bson:"-"`
	XXX_sizecache        int32                     `json:"-" bson:"-"`
}

func (m *ESPortsBpsDurationRequest) Reset()         { *m = ESPortsBpsDurationRequest{} }
func (m *ESPortsBpsDurationRequest) String() string { return proto.CompactTextString(m) }
func (*ESPortsBpsDurationRequest) ProtoMessage()    {}
func (*ESPortsBpsDurationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{4}
}
func (m *ESPortsBpsDurationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESPortsBpsDurationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESPortsBpsDurationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESPortsBpsDurationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESPortsBpsDurationRequest.Merge(m, src)
}
func (m *ESPortsBpsDurationRequest) XXX_Size() int {
	return m.Size()
}
func (m *ESPortsBpsDurationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ESPortsBpsDurationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ESPortsBpsDurationRequest proto.InternalMessageInfo

func (m *ESPortsBpsDurationRequest) GetList() []*ESPortsBpsDurationData {
	if m != nil {
		return m.List
	}
	return nil
}

//埋点点击
type ESPortsBpsClickRequest struct {
	//底部导航模块按钮  当前 PageType = 1000的时候生效  1 消息、2 通讯录、3 广场、4电竞、 5我的
	NavigationId *int32 `protobuf:"varint,1,opt,name=NavigationId" json:"NavigationId,omitempty" bson:"NavigationId,omitempty"`
	//菜單id  100= 系统消息，其他301等等按照原来的意思
	MenuId *int32 `protobuf:"varint,2,opt,name=MenuId" json:"MenuId,omitempty" bson:"MenuId,omitempty"`
	//标签数据ID   当 PageType 等于 3000  LabelId= -1000  就是等于玩家点中了 标签筛选按钮
	LabelId *int64 `protobuf:"varint,3,opt,name=LabelId" json:"LabelId,omitempty" bson:"LabelId,omitempty"`
	//扩展tabId
	ExTabId *int64 `protobuf:"varint,4,opt,name=ExTabId" json:"ExTabId,omitempty" bson:"ExTabId,omitempty"`
	//内容详细页Id
	DataId *int64 `protobuf:"varint,5,opt,name=DataId" json:"DataId,omitempty" bson:"DataId,omitempty"`
	//内容子页Id
	ExId *int64 `protobuf:"varint,6,opt,name=ExId" json:"ExId,omitempty" bson:"ExId,omitempty"`
	//点击哪个按钮 按钮ID 小于1 没有点击按钮  》=1开始 就点击了按钮
	ButtonId *int32 `protobuf:"varint,7,opt,name=ButtonId" json:"ButtonId,omitempty" bson:"ButtonId,omitempty"`
	//數據類型：
	//1000、進入电竞模块点击
	//2000、菜单
	//3000、标签
	//4000、扩展tabId
	//5000、内容页
	//6000、内容页子页
	PageType *int32 `protobuf:"varint,8,opt,name=PageType" json:"PageType,omitempty" bson:"PageType,omitempty"`
	// 1 轮播图  2 内容详细页  3 申请放映厅  针对DataId 使用
	DataType             *int32   `protobuf:"varint,9,opt,name=DataType" json:"DataType,omitempty" bson:"DataType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESPortsBpsClickRequest) Reset()         { *m = ESPortsBpsClickRequest{} }
func (m *ESPortsBpsClickRequest) String() string { return proto.CompactTextString(m) }
func (*ESPortsBpsClickRequest) ProtoMessage()    {}
func (*ESPortsBpsClickRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{5}
}
func (m *ESPortsBpsClickRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESPortsBpsClickRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESPortsBpsClickRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESPortsBpsClickRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESPortsBpsClickRequest.Merge(m, src)
}
func (m *ESPortsBpsClickRequest) XXX_Size() int {
	return m.Size()
}
func (m *ESPortsBpsClickRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ESPortsBpsClickRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ESPortsBpsClickRequest proto.InternalMessageInfo

func (m *ESPortsBpsClickRequest) GetNavigationId() int32 {
	if m != nil && m.NavigationId != nil {
		return *m.NavigationId
	}
	return 0
}

func (m *ESPortsBpsClickRequest) GetMenuId() int32 {
	if m != nil && m.MenuId != nil {
		return *m.MenuId
	}
	return 0
}

func (m *ESPortsBpsClickRequest) GetLabelId() int64 {
	if m != nil && m.LabelId != nil {
		return *m.LabelId
	}
	return 0
}

func (m *ESPortsBpsClickRequest) GetExTabId() int64 {
	if m != nil && m.ExTabId != nil {
		return *m.ExTabId
	}
	return 0
}

func (m *ESPortsBpsClickRequest) GetDataId() int64 {
	if m != nil && m.DataId != nil {
		return *m.DataId
	}
	return 0
}

func (m *ESPortsBpsClickRequest) GetExId() int64 {
	if m != nil && m.ExId != nil {
		return *m.ExId
	}
	return 0
}

func (m *ESPortsBpsClickRequest) GetButtonId() int32 {
	if m != nil && m.ButtonId != nil {
		return *m.ButtonId
	}
	return 0
}

func (m *ESPortsBpsClickRequest) GetPageType() int32 {
	if m != nil && m.PageType != nil {
		return *m.PageType
	}
	return 0
}

func (m *ESPortsBpsClickRequest) GetDataType() int32 {
	if m != nil && m.DataType != nil {
		return *m.DataType
	}
	return 0
}

//埋点点击擴展数据
type ESPortsBpsClickRequestEx struct {
	//客户端点击的时间
	ClientClickTime *int64 `protobuf:"varint,1,opt,name=ClientClickTime" json:"ClientClickTime,omitempty" bson:"ClientClickTime,omitempty"`
	//點擊的數據
	BpsData              *ESPortsBpsClickRequest `protobuf:"bytes,2,opt,name=BpsData" json:"BpsData,omitempty" bson:"BpsData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-" bson:"-"`
	XXX_unrecognized     []byte                  `json:"-" bson:"-"`
	XXX_sizecache        int32                   `json:"-" bson:"-"`
}

func (m *ESPortsBpsClickRequestEx) Reset()         { *m = ESPortsBpsClickRequestEx{} }
func (m *ESPortsBpsClickRequestEx) String() string { return proto.CompactTextString(m) }
func (*ESPortsBpsClickRequestEx) ProtoMessage()    {}
func (*ESPortsBpsClickRequestEx) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{6}
}
func (m *ESPortsBpsClickRequestEx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESPortsBpsClickRequestEx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESPortsBpsClickRequestEx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESPortsBpsClickRequestEx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESPortsBpsClickRequestEx.Merge(m, src)
}
func (m *ESPortsBpsClickRequestEx) XXX_Size() int {
	return m.Size()
}
func (m *ESPortsBpsClickRequestEx) XXX_DiscardUnknown() {
	xxx_messageInfo_ESPortsBpsClickRequestEx.DiscardUnknown(m)
}

var xxx_messageInfo_ESPortsBpsClickRequestEx proto.InternalMessageInfo

func (m *ESPortsBpsClickRequestEx) GetClientClickTime() int64 {
	if m != nil && m.ClientClickTime != nil {
		return *m.ClientClickTime
	}
	return 0
}

func (m *ESPortsBpsClickRequestEx) GetBpsData() *ESPortsBpsClickRequest {
	if m != nil {
		return m.BpsData
	}
	return nil
}

//埋点点击擴展数据列表
type ESPortsBpsClickListRequest struct {
	//客户端发送的时间
	ClientTime *int64 `protobuf:"varint,1,opt,name=ClientTime" json:"ClientTime,omitempty" bson:"ClientTime,omitempty"`
	//點擊的數據
	BpsDataList          []*ESPortsBpsClickRequestEx `protobuf:"bytes,2,rep,name=BpsDataList" json:"BpsDataList,omitempty" bson:"BpsDataList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-" bson:"-"`
	XXX_unrecognized     []byte                      `json:"-" bson:"-"`
	XXX_sizecache        int32                       `json:"-" bson:"-"`
}

func (m *ESPortsBpsClickListRequest) Reset()         { *m = ESPortsBpsClickListRequest{} }
func (m *ESPortsBpsClickListRequest) String() string { return proto.CompactTextString(m) }
func (*ESPortsBpsClickListRequest) ProtoMessage()    {}
func (*ESPortsBpsClickListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{7}
}
func (m *ESPortsBpsClickListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESPortsBpsClickListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESPortsBpsClickListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESPortsBpsClickListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESPortsBpsClickListRequest.Merge(m, src)
}
func (m *ESPortsBpsClickListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ESPortsBpsClickListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ESPortsBpsClickListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ESPortsBpsClickListRequest proto.InternalMessageInfo

func (m *ESPortsBpsClickListRequest) GetClientTime() int64 {
	if m != nil && m.ClientTime != nil {
		return *m.ClientTime
	}
	return 0
}

func (m *ESPortsBpsClickListRequest) GetBpsDataList() []*ESPortsBpsClickRequestEx {
	if m != nil {
		return m.BpsDataList
	}
	return nil
}

//通用ID数据请求
type ESportInfoRequest struct {
	//菜单ID（可选）
	MenuId *int32 `protobuf:"varint,1,opt,name=MenuId" json:"MenuId,omitempty" bson:"MenuId,omitempty"`
	//类型ID（可选）
	GameTypeId *int64 `protobuf:"varint,2,opt,name=GameTypeId" json:"GameTypeId,omitempty" bson:"GameTypeId,omitempty"`
	//数据唯一ID（可选）
	DataId *int64 `protobuf:"varint,3,opt,name=DataId" json:"DataId,omitempty" bson:"DataId,omitempty"`
	//扩展唯一ID（可选）
	ExtId                *int64   `protobuf:"varint,4,opt,name=ExtId" json:"ExtId,omitempty" bson:"ExtId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESportInfoRequest) Reset()         { *m = ESportInfoRequest{} }
func (m *ESportInfoRequest) String() string { return proto.CompactTextString(m) }
func (*ESportInfoRequest) ProtoMessage()    {}
func (*ESportInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{8}
}
func (m *ESportInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportInfoRequest.Merge(m, src)
}
func (m *ESportInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *ESportInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ESportInfoRequest proto.InternalMessageInfo

func (m *ESportInfoRequest) GetMenuId() int32 {
	if m != nil && m.MenuId != nil {
		return *m.MenuId
	}
	return 0
}

func (m *ESportInfoRequest) GetGameTypeId() int64 {
	if m != nil && m.GameTypeId != nil {
		return *m.GameTypeId
	}
	return 0
}

func (m *ESportInfoRequest) GetDataId() int64 {
	if m != nil && m.DataId != nil {
		return *m.DataId
	}
	return 0
}

func (m *ESportInfoRequest) GetExtId() int64 {
	if m != nil && m.ExtId != nil {
		return *m.ExtId
	}
	return 0
}

//通用ID数据请求
type ESportVideoRequest struct {
	//菜单ID（可选）
	MenuId *int32 `protobuf:"varint,1,opt,name=MenuId" json:"MenuId,omitempty" bson:"MenuId,omitempty"`
	//视频类型
	VideoType *int64 `protobuf:"varint,2,opt,name=VideoType" json:"VideoType,omitempty" bson:"VideoType,omitempty"`
	//数据唯一ID（可选）
	DataId               *int64   `protobuf:"varint,3,opt,name=DataId" json:"DataId,omitempty" bson:"DataId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESportVideoRequest) Reset()         { *m = ESportVideoRequest{} }
func (m *ESportVideoRequest) String() string { return proto.CompactTextString(m) }
func (*ESportVideoRequest) ProtoMessage()    {}
func (*ESportVideoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{9}
}
func (m *ESportVideoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportVideoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportVideoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportVideoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportVideoRequest.Merge(m, src)
}
func (m *ESportVideoRequest) XXX_Size() int {
	return m.Size()
}
func (m *ESportVideoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportVideoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ESportVideoRequest proto.InternalMessageInfo

func (m *ESportVideoRequest) GetMenuId() int32 {
	if m != nil && m.MenuId != nil {
		return *m.MenuId
	}
	return 0
}

func (m *ESportVideoRequest) GetVideoType() int64 {
	if m != nil && m.VideoType != nil {
		return *m.VideoType
	}
	return 0
}

func (m *ESportVideoRequest) GetDataId() int64 {
	if m != nil && m.DataId != nil {
		return *m.DataId
	}
	return 0
}

//通用列表请求
type ESportVideoPageRequest struct {
	//菜单ID（可选）
	MenuId *int32 `protobuf:"varint,1,opt,name=MenuId" json:"MenuId,omitempty" bson:"MenuId,omitempty"`
	//类型ID（可选）
	VideoType *int32 `protobuf:"varint,2,opt,name=VideoType" json:"VideoType,omitempty" bson:"VideoType,omitempty"`
	//类型ID（可选）
	TypeId *int64 `protobuf:"varint,3,opt,name=TypeId" json:"TypeId,omitempty" bson:"TypeId,omitempty"`
	//labelId（可选）
	LabelId *int64 `protobuf:"varint,4,opt,name=LabelId" json:"LabelId,omitempty" bson:"LabelId,omitempty"`
	//页码
	Page *int32 `protobuf:"varint,5,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	//页尺寸
	PageSize *int32 `protobuf:"varint,6,opt,name=PageSize" json:"PageSize,omitempty" bson:"PageSize,omitempty"`
	//排序字段
	OrderField *string `protobuf:"bytes,7,opt,name=OrderField" json:"OrderField,omitempty" bson:"OrderField,omitempty"`
	//升序或者降序
	AscOrDesc            *string  `protobuf:"bytes,8,opt,name=AscOrDesc" json:"AscOrDesc,omitempty" bson:"AscOrDesc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESportVideoPageRequest) Reset()         { *m = ESportVideoPageRequest{} }
func (m *ESportVideoPageRequest) String() string { return proto.CompactTextString(m) }
func (*ESportVideoPageRequest) ProtoMessage()    {}
func (*ESportVideoPageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{10}
}
func (m *ESportVideoPageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportVideoPageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportVideoPageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportVideoPageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportVideoPageRequest.Merge(m, src)
}
func (m *ESportVideoPageRequest) XXX_Size() int {
	return m.Size()
}
func (m *ESportVideoPageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportVideoPageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ESportVideoPageRequest proto.InternalMessageInfo

func (m *ESportVideoPageRequest) GetMenuId() int32 {
	if m != nil && m.MenuId != nil {
		return *m.MenuId
	}
	return 0
}

func (m *ESportVideoPageRequest) GetVideoType() int32 {
	if m != nil && m.VideoType != nil {
		return *m.VideoType
	}
	return 0
}

func (m *ESportVideoPageRequest) GetTypeId() int64 {
	if m != nil && m.TypeId != nil {
		return *m.TypeId
	}
	return 0
}

func (m *ESportVideoPageRequest) GetLabelId() int64 {
	if m != nil && m.LabelId != nil {
		return *m.LabelId
	}
	return 0
}

func (m *ESportVideoPageRequest) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *ESportVideoPageRequest) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *ESportVideoPageRequest) GetOrderField() string {
	if m != nil && m.OrderField != nil {
		return *m.OrderField
	}
	return ""
}

func (m *ESportVideoPageRequest) GetAscOrDesc() string {
	if m != nil && m.AscOrDesc != nil {
		return *m.AscOrDesc
	}
	return ""
}

//同用消息返回
type ESportCommonResult struct {
	Code                 *int32   `protobuf:"varint,1,opt,name=code" json:"code,omitempty" bson:"code,omitempty"`
	Msg                  *string  `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty" bson:"msg,omitempty"`
	DataId               *int64   `protobuf:"varint,3,opt,name=DataId" json:"DataId,omitempty" bson:"DataId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESportCommonResult) Reset()         { *m = ESportCommonResult{} }
func (m *ESportCommonResult) String() string { return proto.CompactTextString(m) }
func (*ESportCommonResult) ProtoMessage()    {}
func (*ESportCommonResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{11}
}
func (m *ESportCommonResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportCommonResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportCommonResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportCommonResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportCommonResult.Merge(m, src)
}
func (m *ESportCommonResult) XXX_Size() int {
	return m.Size()
}
func (m *ESportCommonResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportCommonResult.DiscardUnknown(m)
}

var xxx_messageInfo_ESportCommonResult proto.InternalMessageInfo

func (m *ESportCommonResult) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *ESportCommonResult) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func (m *ESportCommonResult) GetDataId() int64 {
	if m != nil && m.DataId != nil {
		return *m.DataId
	}
	return 0
}

type ESportVideoResult struct {
	Code                 *int32                               `protobuf:"varint,1,opt,name=code" json:"code,omitempty" bson:"code,omitempty"`
	Msg                  *string                              `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty" bson:"msg,omitempty"`
	Data                 *share_message.TableESPortsVideoInfo `protobuf:"bytes,3,opt,name=Data" json:"Data,omitempty" bson:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-" bson:"-"`
	XXX_unrecognized     []byte                               `json:"-" bson:"-"`
	XXX_sizecache        int32                                `json:"-" bson:"-"`
}

func (m *ESportVideoResult) Reset()         { *m = ESportVideoResult{} }
func (m *ESportVideoResult) String() string { return proto.CompactTextString(m) }
func (*ESportVideoResult) ProtoMessage()    {}
func (*ESportVideoResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{12}
}
func (m *ESportVideoResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportVideoResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportVideoResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportVideoResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportVideoResult.Merge(m, src)
}
func (m *ESportVideoResult) XXX_Size() int {
	return m.Size()
}
func (m *ESportVideoResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportVideoResult.DiscardUnknown(m)
}

var xxx_messageInfo_ESportVideoResult proto.InternalMessageInfo

func (m *ESportVideoResult) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *ESportVideoResult) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func (m *ESportVideoResult) GetData() *share_message.TableESPortsVideoInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

type ESportRealTimeResult struct {
	Code                 *int32                                  `protobuf:"varint,1,opt,name=code" json:"code,omitempty" bson:"code,omitempty"`
	Msg                  *string                                 `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty" bson:"msg,omitempty"`
	Data                 *share_message.TableESPortsRealTimeInfo `protobuf:"bytes,3,opt,name=Data" json:"Data,omitempty" bson:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-" bson:"-"`
	XXX_unrecognized     []byte                                  `json:"-" bson:"-"`
	XXX_sizecache        int32                                   `json:"-" bson:"-"`
}

func (m *ESportRealTimeResult) Reset()         { *m = ESportRealTimeResult{} }
func (m *ESportRealTimeResult) String() string { return proto.CompactTextString(m) }
func (*ESportRealTimeResult) ProtoMessage()    {}
func (*ESportRealTimeResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{13}
}
func (m *ESportRealTimeResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportRealTimeResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportRealTimeResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportRealTimeResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportRealTimeResult.Merge(m, src)
}
func (m *ESportRealTimeResult) XXX_Size() int {
	return m.Size()
}
func (m *ESportRealTimeResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportRealTimeResult.DiscardUnknown(m)
}

var xxx_messageInfo_ESportRealTimeResult proto.InternalMessageInfo

func (m *ESportRealTimeResult) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *ESportRealTimeResult) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func (m *ESportRealTimeResult) GetData() *share_message.TableESPortsRealTimeInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

//点赞返回
type ESportThumbsUpResult struct {
	Code *int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty" bson:"code,omitempty"`
	Msg  *string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty" bson:"msg,omitempty"`
	//1已点赞 0未点赞
	IsThumbsUp *int32 `protobuf:"varint,3,opt,name=IsThumbsUp" json:"IsThumbsUp,omitempty" bson:"IsThumbsUp,omitempty"`
	//点赞数
	ThumbsUpCount        *int32   `protobuf:"varint,4,opt,name=ThumbsUpCount" json:"ThumbsUpCount,omitempty" bson:"ThumbsUpCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESportThumbsUpResult) Reset()         { *m = ESportThumbsUpResult{} }
func (m *ESportThumbsUpResult) String() string { return proto.CompactTextString(m) }
func (*ESportThumbsUpResult) ProtoMessage()    {}
func (*ESportThumbsUpResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{14}
}
func (m *ESportThumbsUpResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportThumbsUpResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportThumbsUpResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportThumbsUpResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportThumbsUpResult.Merge(m, src)
}
func (m *ESportThumbsUpResult) XXX_Size() int {
	return m.Size()
}
func (m *ESportThumbsUpResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportThumbsUpResult.DiscardUnknown(m)
}

var xxx_messageInfo_ESportThumbsUpResult proto.InternalMessageInfo

func (m *ESportThumbsUpResult) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *ESportThumbsUpResult) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func (m *ESportThumbsUpResult) GetIsThumbsUp() int32 {
	if m != nil && m.IsThumbsUp != nil {
		return *m.IsThumbsUp
	}
	return 0
}

func (m *ESportThumbsUpResult) GetThumbsUpCount() int32 {
	if m != nil && m.ThumbsUpCount != nil {
		return *m.ThumbsUpCount
	}
	return 0
}

//通用首页数据
type ESportMenuHomeInfo struct {
	//标签
	LabelList            []*share_message.TableESPortsLabel `protobuf:"bytes,1,rep,name=LabelList" json:"LabelList,omitempty" bson:"LabelList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-" bson:"-"`
	XXX_unrecognized     []byte                             `json:"-" bson:"-"`
	XXX_sizecache        int32                              `json:"-" bson:"-"`
}

func (m *ESportMenuHomeInfo) Reset()         { *m = ESportMenuHomeInfo{} }
func (m *ESportMenuHomeInfo) String() string { return proto.CompactTextString(m) }
func (*ESportMenuHomeInfo) ProtoMessage()    {}
func (*ESportMenuHomeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{15}
}
func (m *ESportMenuHomeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportMenuHomeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportMenuHomeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportMenuHomeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportMenuHomeInfo.Merge(m, src)
}
func (m *ESportMenuHomeInfo) XXX_Size() int {
	return m.Size()
}
func (m *ESportMenuHomeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportMenuHomeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ESportMenuHomeInfo proto.InternalMessageInfo

func (m *ESportMenuHomeInfo) GetLabelList() []*share_message.TableESPortsLabel {
	if m != nil {
		return m.LabelList
	}
	return nil
}

//輪播圖數據
type ESportCarouselList struct {
	//轮播图列表
	CarouselList         []*share_message.TableESPortsCarousel `protobuf:"bytes,2,rep,name=CarouselList" json:"CarouselList,omitempty" bson:"CarouselList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-" bson:"-"`
	XXX_unrecognized     []byte                                `json:"-" bson:"-"`
	XXX_sizecache        int32                                 `json:"-" bson:"-"`
}

func (m *ESportCarouselList) Reset()         { *m = ESportCarouselList{} }
func (m *ESportCarouselList) String() string { return proto.CompactTextString(m) }
func (*ESportCarouselList) ProtoMessage()    {}
func (*ESportCarouselList) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{16}
}
func (m *ESportCarouselList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportCarouselList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportCarouselList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportCarouselList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportCarouselList.Merge(m, src)
}
func (m *ESportCarouselList) XXX_Size() int {
	return m.Size()
}
func (m *ESportCarouselList) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportCarouselList.DiscardUnknown(m)
}

var xxx_messageInfo_ESportCarouselList proto.InternalMessageInfo

func (m *ESportCarouselList) GetCarouselList() []*share_message.TableESPortsCarousel {
	if m != nil {
		return m.CarouselList
	}
	return nil
}

//提交申请信息
type ESportMyLiveRoomInfo struct {
	//封面图
	CoverImageUrl *string `protobuf:"bytes,1,opt,name=CoverImageUrl" json:"CoverImageUrl,omitempty" bson:"CoverImageUrl,omitempty"`
	//游戏标签ID（类型选择）
	AppLabelID *int64 `protobuf:"varint,2,opt,name=AppLabelID" json:"AppLabelID,omitempty" bson:"AppLabelID,omitempty"`
	//视频url
	VideoUrl *string `protobuf:"bytes,3,opt,name=VideoUrl" json:"VideoUrl,omitempty" bson:"VideoUrl,omitempty"`
	//标题
	Title *string `protobuf:"bytes,4,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	//状态
	Status *int32 `protobuf:"varint,5,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	//公告
	Content *string `protobuf:"bytes,6,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	//关联比赛表ID
	UniqueGameId *int64 `protobuf:"varint,7,opt,name=UniqueGameId" json:"UniqueGameId,omitempty" bson:"UniqueGameId,omitempty"`
	//关联比赛表标题
	UniqueGameName       *string  `protobuf:"bytes,8,opt,name=UniqueGameName" json:"UniqueGameName,omitempty" bson:"UniqueGameName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESportMyLiveRoomInfo) Reset()         { *m = ESportMyLiveRoomInfo{} }
func (m *ESportMyLiveRoomInfo) String() string { return proto.CompactTextString(m) }
func (*ESportMyLiveRoomInfo) ProtoMessage()    {}
func (*ESportMyLiveRoomInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{17}
}
func (m *ESportMyLiveRoomInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportMyLiveRoomInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportMyLiveRoomInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportMyLiveRoomInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportMyLiveRoomInfo.Merge(m, src)
}
func (m *ESportMyLiveRoomInfo) XXX_Size() int {
	return m.Size()
}
func (m *ESportMyLiveRoomInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportMyLiveRoomInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ESportMyLiveRoomInfo proto.InternalMessageInfo

func (m *ESportMyLiveRoomInfo) GetCoverImageUrl() string {
	if m != nil && m.CoverImageUrl != nil {
		return *m.CoverImageUrl
	}
	return ""
}

func (m *ESportMyLiveRoomInfo) GetAppLabelID() int64 {
	if m != nil && m.AppLabelID != nil {
		return *m.AppLabelID
	}
	return 0
}

func (m *ESportMyLiveRoomInfo) GetVideoUrl() string {
	if m != nil && m.VideoUrl != nil {
		return *m.VideoUrl
	}
	return ""
}

func (m *ESportMyLiveRoomInfo) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *ESportMyLiveRoomInfo) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *ESportMyLiveRoomInfo) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *ESportMyLiveRoomInfo) GetUniqueGameId() int64 {
	if m != nil && m.UniqueGameId != nil {
		return *m.UniqueGameId
	}
	return 0
}

func (m *ESportMyLiveRoomInfo) GetUniqueGameName() string {
	if m != nil && m.UniqueGameName != nil {
		return *m.UniqueGameName
	}
	return ""
}

//直播首页数据（放映厅）
type ESportLiveHomeInfo struct {
	//我的放映厅信息 如果是空就是没申请过，如果有数据 就看 Status
	MyLiveInfo *share_message.TableESPortsVideoInfo `protobuf:"bytes,1,opt,name=MyLiveInfo" json:"MyLiveInfo,omitempty" bson:"MyLiveInfo,omitempty"`
	//标签
	LabelList            []*share_message.TableESPortsLabel `protobuf:"bytes,2,rep,name=LabelList" json:"LabelList,omitempty" bson:"LabelList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-" bson:"-"`
	XXX_unrecognized     []byte                             `json:"-" bson:"-"`
	XXX_sizecache        int32                              `json:"-" bson:"-"`
}

func (m *ESportLiveHomeInfo) Reset()         { *m = ESportLiveHomeInfo{} }
func (m *ESportLiveHomeInfo) String() string { return proto.CompactTextString(m) }
func (*ESportLiveHomeInfo) ProtoMessage()    {}
func (*ESportLiveHomeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{18}
}
func (m *ESportLiveHomeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportLiveHomeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportLiveHomeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportLiveHomeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportLiveHomeInfo.Merge(m, src)
}
func (m *ESportLiveHomeInfo) XXX_Size() int {
	return m.Size()
}
func (m *ESportLiveHomeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportLiveHomeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ESportLiveHomeInfo proto.InternalMessageInfo

func (m *ESportLiveHomeInfo) GetMyLiveInfo() *share_message.TableESPortsVideoInfo {
	if m != nil {
		return m.MyLiveInfo
	}
	return nil
}

func (m *ESportLiveHomeInfo) GetLabelList() []*share_message.TableESPortsLabel {
	if m != nil {
		return m.LabelList
	}
	return nil
}

type ESportCommentInfo struct {
	//类型ID
	MenuId *int32 `protobuf:"varint,1,opt,name=MenuId" json:"MenuId,omitempty" bson:"MenuId,omitempty"`
	//父ID
	ParentId *int64 `protobuf:"varint,2,opt,name=ParentId" json:"ParentId,omitempty" bson:"ParentId,omitempty"`
	//某个评论的ID
	CommentId *int64  `protobuf:"varint,9,opt,name=CommentId" json:"CommentId,omitempty" bson:"CommentId,omitempty"`
	Content   *string `protobuf:"bytes,3,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	//被回复的用户ID
	ReplyPlayerId        *int64   `protobuf:"varint,4,opt,name=ReplyPlayerId" json:"ReplyPlayerId,omitempty" bson:"ReplyPlayerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESportCommentInfo) Reset()         { *m = ESportCommentInfo{} }
func (m *ESportCommentInfo) String() string { return proto.CompactTextString(m) }
func (*ESportCommentInfo) ProtoMessage()    {}
func (*ESportCommentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{19}
}
func (m *ESportCommentInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportCommentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportCommentInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportCommentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportCommentInfo.Merge(m, src)
}
func (m *ESportCommentInfo) XXX_Size() int {
	return m.Size()
}
func (m *ESportCommentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportCommentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ESportCommentInfo proto.InternalMessageInfo

func (m *ESportCommentInfo) GetMenuId() int32 {
	if m != nil && m.MenuId != nil {
		return *m.MenuId
	}
	return 0
}

func (m *ESportCommentInfo) GetParentId() int64 {
	if m != nil && m.ParentId != nil {
		return *m.ParentId
	}
	return 0
}

func (m *ESportCommentInfo) GetCommentId() int64 {
	if m != nil && m.CommentId != nil {
		return *m.CommentId
	}
	return 0
}

func (m *ESportCommentInfo) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *ESportCommentInfo) GetReplyPlayerId() int64 {
	if m != nil && m.ReplyPlayerId != nil {
		return *m.ReplyPlayerId
	}
	return 0
}

type ESportDeleteCommentInfo struct {
	//类型ID
	MenuId *int32 `protobuf:"varint,1,opt,name=MenuId" json:"MenuId,omitempty" bson:"MenuId,omitempty"`
	//父ID
	ParentId *int64 `protobuf:"varint,2,opt,name=ParentId" json:"ParentId,omitempty" bson:"ParentId,omitempty"`
	//某个评论的ID
	PCommentId *int64 `protobuf:"varint,3,opt,name=PCommentId" json:"PCommentId,omitempty" bson:"PCommentId,omitempty"`
	//某个评论的ID
	CommentId *int64 `protobuf:"varint,4,opt,name=CommentId" json:"CommentId,omitempty" bson:"CommentId,omitempty"`
	//1 评论 2 二级回复
	CommentType          *int32   `protobuf:"varint,5,opt,name=CommentType" json:"CommentType,omitempty" bson:"CommentType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESportDeleteCommentInfo) Reset()         { *m = ESportDeleteCommentInfo{} }
func (m *ESportDeleteCommentInfo) String() string { return proto.CompactTextString(m) }
func (*ESportDeleteCommentInfo) ProtoMessage()    {}
func (*ESportDeleteCommentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{20}
}
func (m *ESportDeleteCommentInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportDeleteCommentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportDeleteCommentInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportDeleteCommentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportDeleteCommentInfo.Merge(m, src)
}
func (m *ESportDeleteCommentInfo) XXX_Size() int {
	return m.Size()
}
func (m *ESportDeleteCommentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportDeleteCommentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ESportDeleteCommentInfo proto.InternalMessageInfo

func (m *ESportDeleteCommentInfo) GetMenuId() int32 {
	if m != nil && m.MenuId != nil {
		return *m.MenuId
	}
	return 0
}

func (m *ESportDeleteCommentInfo) GetParentId() int64 {
	if m != nil && m.ParentId != nil {
		return *m.ParentId
	}
	return 0
}

func (m *ESportDeleteCommentInfo) GetPCommentId() int64 {
	if m != nil && m.PCommentId != nil {
		return *m.PCommentId
	}
	return 0
}

func (m *ESportDeleteCommentInfo) GetCommentId() int64 {
	if m != nil && m.CommentId != nil {
		return *m.CommentId
	}
	return 0
}

func (m *ESportDeleteCommentInfo) GetCommentType() int32 {
	if m != nil && m.CommentType != nil {
		return *m.CommentType
	}
	return 0
}

type ESportCommentRequest struct {
	//类型ID
	MenuId *int32 `protobuf:"varint,1,opt,name=MenuId" json:"MenuId,omitempty" bson:"MenuId,omitempty"`
	//父ID
	ParentId *int64 `protobuf:"varint,2,opt,name=ParentId" json:"ParentId,omitempty" bson:"ParentId,omitempty"`
	//某个评论的ID
	CommentId *int64 `protobuf:"varint,3,opt,name=CommentId" json:"CommentId,omitempty" bson:"CommentId,omitempty"`
	//页码
	Page *int32 `protobuf:"varint,4,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	//页尺寸
	PageSize             *int32   `protobuf:"varint,5,opt,name=PageSize" json:"PageSize,omitempty" bson:"PageSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESportCommentRequest) Reset()         { *m = ESportCommentRequest{} }
func (m *ESportCommentRequest) String() string { return proto.CompactTextString(m) }
func (*ESportCommentRequest) ProtoMessage()    {}
func (*ESportCommentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{21}
}
func (m *ESportCommentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportCommentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportCommentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportCommentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportCommentRequest.Merge(m, src)
}
func (m *ESportCommentRequest) XXX_Size() int {
	return m.Size()
}
func (m *ESportCommentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportCommentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ESportCommentRequest proto.InternalMessageInfo

func (m *ESportCommentRequest) GetMenuId() int32 {
	if m != nil && m.MenuId != nil {
		return *m.MenuId
	}
	return 0
}

func (m *ESportCommentRequest) GetParentId() int64 {
	if m != nil && m.ParentId != nil {
		return *m.ParentId
	}
	return 0
}

func (m *ESportCommentRequest) GetCommentId() int64 {
	if m != nil && m.CommentId != nil {
		return *m.CommentId
	}
	return 0
}

func (m *ESportCommentRequest) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *ESportCommentRequest) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

//父信息的评论
type ESportCommentListResult struct {
	//数据总数
	Total *int32 `protobuf:"varint,1,opt,name=Total" json:"Total,omitempty" bson:"Total,omitempty"`
	//
	List                 []*share_message.TableESportComment `protobuf:"bytes,2,rep,name=List" json:"List,omitempty" bson:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-" bson:"-"`
	XXX_unrecognized     []byte                              `json:"-" bson:"-"`
	XXX_sizecache        int32                               `json:"-" bson:"-"`
}

func (m *ESportCommentListResult) Reset()         { *m = ESportCommentListResult{} }
func (m *ESportCommentListResult) String() string { return proto.CompactTextString(m) }
func (*ESportCommentListResult) ProtoMessage()    {}
func (*ESportCommentListResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{22}
}
func (m *ESportCommentListResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportCommentListResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportCommentListResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportCommentListResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportCommentListResult.Merge(m, src)
}
func (m *ESportCommentListResult) XXX_Size() int {
	return m.Size()
}
func (m *ESportCommentListResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportCommentListResult.DiscardUnknown(m)
}

var xxx_messageInfo_ESportCommentListResult proto.InternalMessageInfo

func (m *ESportCommentListResult) GetTotal() int32 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *ESportCommentListResult) GetList() []*share_message.TableESportComment {
	if m != nil {
		return m.List
	}
	return nil
}

//评论的回复的
type ESportCommentReplyListResult struct {
	//数据总数
	Total *int32 `protobuf:"varint,1,opt,name=Total" json:"Total,omitempty" bson:"Total,omitempty"`
	//
	List                 []*share_message.TableESportComment `protobuf:"bytes,2,rep,name=List" json:"List,omitempty" bson:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-" bson:"-"`
	XXX_unrecognized     []byte                              `json:"-" bson:"-"`
	XXX_sizecache        int32                               `json:"-" bson:"-"`
}

func (m *ESportCommentReplyListResult) Reset()         { *m = ESportCommentReplyListResult{} }
func (m *ESportCommentReplyListResult) String() string { return proto.CompactTextString(m) }
func (*ESportCommentReplyListResult) ProtoMessage()    {}
func (*ESportCommentReplyListResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{23}
}
func (m *ESportCommentReplyListResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportCommentReplyListResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportCommentReplyListResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportCommentReplyListResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportCommentReplyListResult.Merge(m, src)
}
func (m *ESportCommentReplyListResult) XXX_Size() int {
	return m.Size()
}
func (m *ESportCommentReplyListResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportCommentReplyListResult.DiscardUnknown(m)
}

var xxx_messageInfo_ESportCommentReplyListResult proto.InternalMessageInfo

func (m *ESportCommentReplyListResult) GetTotal() int32 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *ESportCommentReplyListResult) GetList() []*share_message.TableESportComment {
	if m != nil {
		return m.List
	}
	return nil
}

//资讯列表
type ESportRealtimeListResult struct {
	//数据总数
	Total *int32 `protobuf:"varint,1,opt,name=Total" json:"Total,omitempty" bson:"Total,omitempty"`
	//
	List                 []*share_message.TableESPortsRealTimeInfo `protobuf:"bytes,2,rep,name=List" json:"List,omitempty" bson:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-" bson:"-"`
	XXX_unrecognized     []byte                                    `json:"-" bson:"-"`
	XXX_sizecache        int32                                     `json:"-" bson:"-"`
}

func (m *ESportRealtimeListResult) Reset()         { *m = ESportRealtimeListResult{} }
func (m *ESportRealtimeListResult) String() string { return proto.CompactTextString(m) }
func (*ESportRealtimeListResult) ProtoMessage()    {}
func (*ESportRealtimeListResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{24}
}
func (m *ESportRealtimeListResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportRealtimeListResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportRealtimeListResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportRealtimeListResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportRealtimeListResult.Merge(m, src)
}
func (m *ESportRealtimeListResult) XXX_Size() int {
	return m.Size()
}
func (m *ESportRealtimeListResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportRealtimeListResult.DiscardUnknown(m)
}

var xxx_messageInfo_ESportRealtimeListResult proto.InternalMessageInfo

func (m *ESportRealtimeListResult) GetTotal() int32 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *ESportRealtimeListResult) GetList() []*share_message.TableESPortsRealTimeInfo {
	if m != nil {
		return m.List
	}
	return nil
}

//比赛视图列表
type ESPortsGameItemViewResult struct {
	//数据总数
	Total *int32 `protobuf:"varint,1,opt,name=Total" json:"Total,omitempty" bson:"Total,omitempty"`
	//
	List                 []*share_message.ESPortsGameItemView `protobuf:"bytes,2,rep,name=List" json:"List,omitempty" bson:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-" bson:"-"`
	XXX_unrecognized     []byte                               `json:"-" bson:"-"`
	XXX_sizecache        int32                                `json:"-" bson:"-"`
}

func (m *ESPortsGameItemViewResult) Reset()         { *m = ESPortsGameItemViewResult{} }
func (m *ESPortsGameItemViewResult) String() string { return proto.CompactTextString(m) }
func (*ESPortsGameItemViewResult) ProtoMessage()    {}
func (*ESPortsGameItemViewResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{25}
}
func (m *ESPortsGameItemViewResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESPortsGameItemViewResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESPortsGameItemViewResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESPortsGameItemViewResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESPortsGameItemViewResult.Merge(m, src)
}
func (m *ESPortsGameItemViewResult) XXX_Size() int {
	return m.Size()
}
func (m *ESPortsGameItemViewResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ESPortsGameItemViewResult.DiscardUnknown(m)
}

var xxx_messageInfo_ESPortsGameItemViewResult proto.InternalMessageInfo

func (m *ESPortsGameItemViewResult) GetTotal() int32 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *ESPortsGameItemViewResult) GetList() []*share_message.ESPortsGameItemView {
	if m != nil {
		return m.List
	}
	return nil
}

type ESportLabelList struct {
	//标签
	LabelList            []*share_message.TableESPortsLabel `protobuf:"bytes,1,rep,name=LabelList" json:"LabelList,omitempty" bson:"LabelList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-" bson:"-"`
	XXX_unrecognized     []byte                             `json:"-" bson:"-"`
	XXX_sizecache        int32                              `json:"-" bson:"-"`
}

func (m *ESportLabelList) Reset()         { *m = ESportLabelList{} }
func (m *ESportLabelList) String() string { return proto.CompactTextString(m) }
func (*ESportLabelList) ProtoMessage()    {}
func (*ESportLabelList) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{26}
}
func (m *ESportLabelList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportLabelList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportLabelList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportLabelList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportLabelList.Merge(m, src)
}
func (m *ESportLabelList) XXX_Size() int {
	return m.Size()
}
func (m *ESportLabelList) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportLabelList.DiscardUnknown(m)
}

var xxx_messageInfo_ESportLabelList proto.InternalMessageInfo

func (m *ESportLabelList) GetLabelList() []*share_message.TableESPortsLabel {
	if m != nil {
		return m.LabelList
	}
	return nil
}

//直播或视频（放映厅）列表
type ESportVideoListResult struct {
	//数据总数
	Total *int32 `protobuf:"varint,1,opt,name=Total" json:"Total,omitempty" bson:"Total,omitempty"`
	//列表
	List                 []*share_message.TableESPortsVideoInfo `protobuf:"bytes,2,rep,name=List" json:"List,omitempty" bson:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-" bson:"-"`
	XXX_unrecognized     []byte                                 `json:"-" bson:"-"`
	XXX_sizecache        int32                                  `json:"-" bson:"-"`
}

func (m *ESportVideoListResult) Reset()         { *m = ESportVideoListResult{} }
func (m *ESportVideoListResult) String() string { return proto.CompactTextString(m) }
func (*ESportVideoListResult) ProtoMessage()    {}
func (*ESportVideoListResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{27}
}
func (m *ESportVideoListResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportVideoListResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportVideoListResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportVideoListResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportVideoListResult.Merge(m, src)
}
func (m *ESportVideoListResult) XXX_Size() int {
	return m.Size()
}
func (m *ESportVideoListResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportVideoListResult.DiscardUnknown(m)
}

var xxx_messageInfo_ESportVideoListResult proto.InternalMessageInfo

func (m *ESportVideoListResult) GetTotal() int32 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *ESportVideoListResult) GetList() []*share_message.TableESPortsVideoInfo {
	if m != nil {
		return m.List
	}
	return nil
}

type ESPortsSysMsgList struct {
	PlayerId   *int64                              `protobuf:"varint,4,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	SysMsgList []*share_message.TableESPortsSysMsg `protobuf:"bytes,1,rep,name=SysMsgList" json:"SysMsgList,omitempty" bson:"SysMsgList,omitempty"`
	//未结算订单列表
	UnPayed []*share_message.TableESPortsGameOrderSysMsg `protobuf:"bytes,2,rep,name=UnPayed" json:"UnPayed,omitempty" bson:"UnPayed,omitempty"`
	//已结算订单列表
	Payed                []*share_message.TableESPortsGameOrderSysMsg `protobuf:"bytes,3,rep,name=Payed" json:"Payed,omitempty" bson:"Payed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-" bson:"-"`
	XXX_unrecognized     []byte                                       `json:"-" bson:"-"`
	XXX_sizecache        int32                                        `json:"-" bson:"-"`
}

func (m *ESPortsSysMsgList) Reset()         { *m = ESPortsSysMsgList{} }
func (m *ESPortsSysMsgList) String() string { return proto.CompactTextString(m) }
func (*ESPortsSysMsgList) ProtoMessage()    {}
func (*ESPortsSysMsgList) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{28}
}
func (m *ESPortsSysMsgList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESPortsSysMsgList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESPortsSysMsgList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESPortsSysMsgList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESPortsSysMsgList.Merge(m, src)
}
func (m *ESPortsSysMsgList) XXX_Size() int {
	return m.Size()
}
func (m *ESPortsSysMsgList) XXX_DiscardUnknown() {
	xxx_messageInfo_ESPortsSysMsgList.DiscardUnknown(m)
}

var xxx_messageInfo_ESPortsSysMsgList proto.InternalMessageInfo

func (m *ESPortsSysMsgList) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *ESPortsSysMsgList) GetSysMsgList() []*share_message.TableESPortsSysMsg {
	if m != nil {
		return m.SysMsgList
	}
	return nil
}

func (m *ESPortsSysMsgList) GetUnPayed() []*share_message.TableESPortsGameOrderSysMsg {
	if m != nil {
		return m.UnPayed
	}
	return nil
}

func (m *ESPortsSysMsgList) GetPayed() []*share_message.TableESPortsGameOrderSysMsg {
	if m != nil {
		return m.Payed
	}
	return nil
}

//电竞币兑换页面返回数据
type ESPortsCoinViewResult struct {
	// 错误码 1成功 1以外失败
	Code *int32 `protobuf:"varint,1,opt,name=Code" json:"Code,omitempty" bson:"Code,omitempty"`
	// 错误提示
	Msg *string `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty" bson:"Msg,omitempty"`
	//活动类型：1-日常赠送,2-首充赠送,3-活动赠送
	Type *int32 `protobuf:"varint,3,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	//显示的banner
	BannerUrl *string `protobuf:"bytes,4,opt,name=BannerUrl" json:"BannerUrl,omitempty" bson:"BannerUrl,omitempty"`
	//电竞币兑换页内容
	ExChangeList         []*ExChangeObject `protobuf:"bytes,5,rep,name=ExChangeList" json:"ExChangeList,omitempty" bson:"ExChangeList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-" bson:"-"`
	XXX_unrecognized     []byte            `json:"-" bson:"-"`
	XXX_sizecache        int32             `json:"-" bson:"-"`
}

func (m *ESPortsCoinViewResult) Reset()         { *m = ESPortsCoinViewResult{} }
func (m *ESPortsCoinViewResult) String() string { return proto.CompactTextString(m) }
func (*ESPortsCoinViewResult) ProtoMessage()    {}
func (*ESPortsCoinViewResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{29}
}
func (m *ESPortsCoinViewResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESPortsCoinViewResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESPortsCoinViewResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESPortsCoinViewResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESPortsCoinViewResult.Merge(m, src)
}
func (m *ESPortsCoinViewResult) XXX_Size() int {
	return m.Size()
}
func (m *ESPortsCoinViewResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ESPortsCoinViewResult.DiscardUnknown(m)
}

var xxx_messageInfo_ESPortsCoinViewResult proto.InternalMessageInfo

func (m *ESPortsCoinViewResult) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *ESPortsCoinViewResult) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func (m *ESPortsCoinViewResult) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *ESPortsCoinViewResult) GetBannerUrl() string {
	if m != nil && m.BannerUrl != nil {
		return *m.BannerUrl
	}
	return ""
}

func (m *ESPortsCoinViewResult) GetExChangeList() []*ExChangeObject {
	if m != nil {
		return m.ExChangeList
	}
	return nil
}

//电竞币兑换页豆腐块中的对象实体
type ExChangeObject struct {
	//电竞币额度
	ESportCoin *int64 `protobuf:"varint,1,opt,name=ESportCoin" json:"ESportCoin,omitempty" bson:"ESportCoin,omitempty"`
	//硬币额度
	Coin *int64 `protobuf:"varint,2,opt,name=Coin" json:"Coin,omitempty" bson:"Coin,omitempty"`
	//日常赠送额度
	DailyGive *int64 `protobuf:"varint,3,opt,name=DailyGive" json:"DailyGive,omitempty" bson:"DailyGive,omitempty"`
	//首充赠送额度
	FirstGive *int64 `protobuf:"varint,4,opt,name=FirstGive" json:"FirstGive,omitempty" bson:"FirstGive,omitempty"`
	//活动赠送概率
	Rate                 []*share_message.ExchangeRate `protobuf:"bytes,5,rep,name=Rate" json:"Rate,omitempty" bson:"Rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-" bson:"-"`
	XXX_unrecognized     []byte                        `json:"-" bson:"-"`
	XXX_sizecache        int32                         `json:"-" bson:"-"`
}

func (m *ExChangeObject) Reset()         { *m = ExChangeObject{} }
func (m *ExChangeObject) String() string { return proto.CompactTextString(m) }
func (*ExChangeObject) ProtoMessage()    {}
func (*ExChangeObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{30}
}
func (m *ExChangeObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExChangeObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExChangeObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExChangeObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExChangeObject.Merge(m, src)
}
func (m *ExChangeObject) XXX_Size() int {
	return m.Size()
}
func (m *ExChangeObject) XXX_DiscardUnknown() {
	xxx_messageInfo_ExChangeObject.DiscardUnknown(m)
}

var xxx_messageInfo_ExChangeObject proto.InternalMessageInfo

func (m *ExChangeObject) GetESportCoin() int64 {
	if m != nil && m.ESportCoin != nil {
		return *m.ESportCoin
	}
	return 0
}

func (m *ExChangeObject) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *ExChangeObject) GetDailyGive() int64 {
	if m != nil && m.DailyGive != nil {
		return *m.DailyGive
	}
	return 0
}

func (m *ExChangeObject) GetFirstGive() int64 {
	if m != nil && m.FirstGive != nil {
		return *m.FirstGive
	}
	return 0
}

func (m *ExChangeObject) GetRate() []*share_message.ExchangeRate {
	if m != nil {
		return m.Rate
	}
	return nil
}

//电竞币兑换动作请求
type ESPortsCoinExChangeRequest struct {
	//活动类型：1-日常赠送,2-首充赠送,3-活动赠送
	Type *int32 `protobuf:"varint,1,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	//豆腐块中的对象实体
	ExChangeObject       *ExChangeObject `protobuf:"bytes,2,opt,name=exChangeObject" json:"exChangeObject,omitempty" bson:"exChangeObject,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-" bson:"-"`
	XXX_unrecognized     []byte          `json:"-" bson:"-"`
	XXX_sizecache        int32           `json:"-" bson:"-"`
}

func (m *ESPortsCoinExChangeRequest) Reset()         { *m = ESPortsCoinExChangeRequest{} }
func (m *ESPortsCoinExChangeRequest) String() string { return proto.CompactTextString(m) }
func (*ESPortsCoinExChangeRequest) ProtoMessage()    {}
func (*ESPortsCoinExChangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{31}
}
func (m *ESPortsCoinExChangeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESPortsCoinExChangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESPortsCoinExChangeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESPortsCoinExChangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESPortsCoinExChangeRequest.Merge(m, src)
}
func (m *ESPortsCoinExChangeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ESPortsCoinExChangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ESPortsCoinExChangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ESPortsCoinExChangeRequest proto.InternalMessageInfo

func (m *ESPortsCoinExChangeRequest) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *ESPortsCoinExChangeRequest) GetExChangeObject() *ExChangeObject {
	if m != nil {
		return m.ExChangeObject
	}
	return nil
}

//电竞币兑换动作返回数据
type ESPortsCoinExChangeResult struct {
	// 错误码 1成功 1以外失败 (12 :硬币余额不足  16:活动停止)
	Code *int32 `protobuf:"varint,1,opt,name=Code" json:"Code,omitempty" bson:"Code,omitempty"`
	// 错误提示
	Msg *string `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty" bson:"Msg,omitempty"`
	//活动类型：1-日常赠送,2-首充赠送,3-活动赠送
	Type *int32 `protobuf:"varint,3,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	//显示的banner
	BannerUrl *string `protobuf:"bytes,4,opt,name=BannerUrl" json:"BannerUrl,omitempty" bson:"BannerUrl,omitempty"`
	//电竞币兑换页内容(Code 1成功 ,16活动停止 设置值)
	ExChangeList []*ExChangeObject `protobuf:"bytes,5,rep,name=ExChangeList" json:"ExChangeList,omitempty" bson:"ExChangeList,omitempty"`
	//赠送电竞币总数
	GiveTotalCoins       *int64   `protobuf:"varint,6,opt,name=GiveTotalCoins" json:"GiveTotalCoins,omitempty" bson:"GiveTotalCoins,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESPortsCoinExChangeResult) Reset()         { *m = ESPortsCoinExChangeResult{} }
func (m *ESPortsCoinExChangeResult) String() string { return proto.CompactTextString(m) }
func (*ESPortsCoinExChangeResult) ProtoMessage()    {}
func (*ESPortsCoinExChangeResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{32}
}
func (m *ESPortsCoinExChangeResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESPortsCoinExChangeResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESPortsCoinExChangeResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESPortsCoinExChangeResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESPortsCoinExChangeResult.Merge(m, src)
}
func (m *ESPortsCoinExChangeResult) XXX_Size() int {
	return m.Size()
}
func (m *ESPortsCoinExChangeResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ESPortsCoinExChangeResult.DiscardUnknown(m)
}

var xxx_messageInfo_ESPortsCoinExChangeResult proto.InternalMessageInfo

func (m *ESPortsCoinExChangeResult) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *ESPortsCoinExChangeResult) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func (m *ESPortsCoinExChangeResult) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *ESPortsCoinExChangeResult) GetBannerUrl() string {
	if m != nil && m.BannerUrl != nil {
		return *m.BannerUrl
	}
	return ""
}

func (m *ESPortsCoinExChangeResult) GetExChangeList() []*ExChangeObject {
	if m != nil {
		return m.ExChangeList
	}
	return nil
}

func (m *ESPortsCoinExChangeResult) GetGiveTotalCoins() int64 {
	if m != nil && m.GiveTotalCoins != nil {
		return *m.GiveTotalCoins
	}
	return 0
}

//电竞币兑换流水请求参数
type ESPortsCoinExChangeRecordRequest struct {
	//页码
	Page *int32 `protobuf:"varint,1,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	//页尺寸
	PageSize             *int32   `protobuf:"varint,2,opt,name=PageSize" json:"PageSize,omitempty" bson:"PageSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESPortsCoinExChangeRecordRequest) Reset()         { *m = ESPortsCoinExChangeRecordRequest{} }
func (m *ESPortsCoinExChangeRecordRequest) String() string { return proto.CompactTextString(m) }
func (*ESPortsCoinExChangeRecordRequest) ProtoMessage()    {}
func (*ESPortsCoinExChangeRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{33}
}
func (m *ESPortsCoinExChangeRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESPortsCoinExChangeRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESPortsCoinExChangeRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESPortsCoinExChangeRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESPortsCoinExChangeRecordRequest.Merge(m, src)
}
func (m *ESPortsCoinExChangeRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *ESPortsCoinExChangeRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ESPortsCoinExChangeRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ESPortsCoinExChangeRecordRequest proto.InternalMessageInfo

func (m *ESPortsCoinExChangeRecordRequest) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *ESPortsCoinExChangeRecordRequest) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

//电竞币兑换流水返回数据
type ESPortsCoinExChangeRecordResult struct {
	// 错误码 1成功 1以外失败
	Code *int32 `protobuf:"varint,1,opt,name=Code" json:"Code,omitempty" bson:"Code,omitempty"`
	// 错误提示
	Msg *string `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty" bson:"Msg,omitempty"`
	//数据总数
	Total *int32 `protobuf:"varint,3,opt,name=Total" json:"Total,omitempty" bson:"Total,omitempty"`
	//电竞币兑换流水列表
	ExChangeRecordList   []*ExChangeRecordObject `protobuf:"bytes,4,rep,name=ExChangeRecordList" json:"ExChangeRecordList,omitempty" bson:"ExChangeRecordList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-" bson:"-"`
	XXX_unrecognized     []byte                  `json:"-" bson:"-"`
	XXX_sizecache        int32                   `json:"-" bson:"-"`
}

func (m *ESPortsCoinExChangeRecordResult) Reset()         { *m = ESPortsCoinExChangeRecordResult{} }
func (m *ESPortsCoinExChangeRecordResult) String() string { return proto.CompactTextString(m) }
func (*ESPortsCoinExChangeRecordResult) ProtoMessage()    {}
func (*ESPortsCoinExChangeRecordResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{34}
}
func (m *ESPortsCoinExChangeRecordResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESPortsCoinExChangeRecordResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESPortsCoinExChangeRecordResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESPortsCoinExChangeRecordResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESPortsCoinExChangeRecordResult.Merge(m, src)
}
func (m *ESPortsCoinExChangeRecordResult) XXX_Size() int {
	return m.Size()
}
func (m *ESPortsCoinExChangeRecordResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ESPortsCoinExChangeRecordResult.DiscardUnknown(m)
}

var xxx_messageInfo_ESPortsCoinExChangeRecordResult proto.InternalMessageInfo

func (m *ESPortsCoinExChangeRecordResult) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *ESPortsCoinExChangeRecordResult) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func (m *ESPortsCoinExChangeRecordResult) GetTotal() int32 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *ESPortsCoinExChangeRecordResult) GetExChangeRecordList() []*ExChangeRecordObject {
	if m != nil {
		return m.ExChangeRecordList
	}
	return nil
}

type ExChangeRecordObject struct {
	// 电竞币
	ChangeESportCoin *int64 `protobuf:"varint,1,opt,name=ChangeESportCoin" json:"ChangeESportCoin,omitempty" bson:"ChangeESportCoin,omitempty"`
	// 时间(毫秒)
	CreateTime *int64 `protobuf:"varint,2,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	//title
	Title                *string  `protobuf:"bytes,3,opt,name=title" json:"title,omitempty" bson:"title,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ExChangeRecordObject) Reset()         { *m = ExChangeRecordObject{} }
func (m *ExChangeRecordObject) String() string { return proto.CompactTextString(m) }
func (*ExChangeRecordObject) ProtoMessage()    {}
func (*ExChangeRecordObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{35}
}
func (m *ExChangeRecordObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExChangeRecordObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExChangeRecordObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExChangeRecordObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExChangeRecordObject.Merge(m, src)
}
func (m *ExChangeRecordObject) XXX_Size() int {
	return m.Size()
}
func (m *ExChangeRecordObject) XXX_DiscardUnknown() {
	xxx_messageInfo_ExChangeRecordObject.DiscardUnknown(m)
}

var xxx_messageInfo_ExChangeRecordObject proto.InternalMessageInfo

func (m *ExChangeRecordObject) GetChangeESportCoin() int64 {
	if m != nil && m.ChangeESportCoin != nil {
		return *m.ChangeESportCoin
	}
	return 0
}

func (m *ExChangeRecordObject) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ExChangeRecordObject) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

//取得api平台号返回数据
type RpcESPortsApiOriginResult struct {
	// 错误码 1成功 1以外失败
	Code *int32 `protobuf:"varint,1,opt,name=Code" json:"Code,omitempty" bson:"Code,omitempty"`
	// 错误提示
	Msg *string `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty" bson:"Msg,omitempty"`
	//api来源 90001:野子科技, 90002:破晓字节
	ApiOrigin            *int32   `protobuf:"varint,3,opt,name=ApiOrigin" json:"ApiOrigin,omitempty" bson:"ApiOrigin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RpcESPortsApiOriginResult) Reset()         { *m = RpcESPortsApiOriginResult{} }
func (m *RpcESPortsApiOriginResult) String() string { return proto.CompactTextString(m) }
func (*RpcESPortsApiOriginResult) ProtoMessage()    {}
func (*RpcESPortsApiOriginResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_8910b1377b3aad44, []int{36}
}
func (m *RpcESPortsApiOriginResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcESPortsApiOriginResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcESPortsApiOriginResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcESPortsApiOriginResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcESPortsApiOriginResult.Merge(m, src)
}
func (m *RpcESPortsApiOriginResult) XXX_Size() int {
	return m.Size()
}
func (m *RpcESPortsApiOriginResult) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcESPortsApiOriginResult.DiscardUnknown(m)
}

var xxx_messageInfo_RpcESPortsApiOriginResult proto.InternalMessageInfo

func (m *RpcESPortsApiOriginResult) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *RpcESPortsApiOriginResult) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func (m *RpcESPortsApiOriginResult) GetApiOrigin() int32 {
	if m != nil && m.ApiOrigin != nil {
		return *m.ApiOrigin
	}
	return 0
}

func init() {
	proto.RegisterType((*ESportGameViewPageRequest)(nil), "client_hall.ESportGameViewPageRequest")
	proto.RegisterType((*ESportDataStatusInfo)(nil), "client_hall.ESportDataStatusInfo")
	proto.RegisterType((*ESportPageRequest)(nil), "client_hall.ESportPageRequest")
	proto.RegisterType((*ESPortsBpsDurationData)(nil), "client_hall.ESPortsBpsDurationData")
	proto.RegisterType((*ESPortsBpsDurationRequest)(nil), "client_hall.ESPortsBpsDurationRequest")
	proto.RegisterType((*ESPortsBpsClickRequest)(nil), "client_hall.ESPortsBpsClickRequest")
	proto.RegisterType((*ESPortsBpsClickRequestEx)(nil), "client_hall.ESPortsBpsClickRequestEx")
	proto.RegisterType((*ESPortsBpsClickListRequest)(nil), "client_hall.ESPortsBpsClickListRequest")
	proto.RegisterType((*ESportInfoRequest)(nil), "client_hall.ESportInfoRequest")
	proto.RegisterType((*ESportVideoRequest)(nil), "client_hall.ESportVideoRequest")
	proto.RegisterType((*ESportVideoPageRequest)(nil), "client_hall.ESportVideoPageRequest")
	proto.RegisterType((*ESportCommonResult)(nil), "client_hall.ESportCommonResult")
	proto.RegisterType((*ESportVideoResult)(nil), "client_hall.ESportVideoResult")
	proto.RegisterType((*ESportRealTimeResult)(nil), "client_hall.ESportRealTimeResult")
	proto.RegisterType((*ESportThumbsUpResult)(nil), "client_hall.ESportThumbsUpResult")
	proto.RegisterType((*ESportMenuHomeInfo)(nil), "client_hall.ESportMenuHomeInfo")
	proto.RegisterType((*ESportCarouselList)(nil), "client_hall.ESportCarouselList")
	proto.RegisterType((*ESportMyLiveRoomInfo)(nil), "client_hall.ESportMyLiveRoomInfo")
	proto.RegisterType((*ESportLiveHomeInfo)(nil), "client_hall.ESportLiveHomeInfo")
	proto.RegisterType((*ESportCommentInfo)(nil), "client_hall.ESportCommentInfo")
	proto.RegisterType((*ESportDeleteCommentInfo)(nil), "client_hall.ESportDeleteCommentInfo")
	proto.RegisterType((*ESportCommentRequest)(nil), "client_hall.ESportCommentRequest")
	proto.RegisterType((*ESportCommentListResult)(nil), "client_hall.ESportCommentListResult")
	proto.RegisterType((*ESportCommentReplyListResult)(nil), "client_hall.ESportCommentReplyListResult")
	proto.RegisterType((*ESportRealtimeListResult)(nil), "client_hall.ESportRealtimeListResult")
	proto.RegisterType((*ESPortsGameItemViewResult)(nil), "client_hall.ESPortsGameItemViewResult")
	proto.RegisterType((*ESportLabelList)(nil), "client_hall.ESportLabelList")
	proto.RegisterType((*ESportVideoListResult)(nil), "client_hall.ESportVideoListResult")
	proto.RegisterType((*ESPortsSysMsgList)(nil), "client_hall.ESPortsSysMsgList")
	proto.RegisterType((*ESPortsCoinViewResult)(nil), "client_hall.ESPortsCoinViewResult")
	proto.RegisterType((*ExChangeObject)(nil), "client_hall.ExChangeObject")
	proto.RegisterType((*ESPortsCoinExChangeRequest)(nil), "client_hall.ESPortsCoinExChangeRequest")
	proto.RegisterType((*ESPortsCoinExChangeResult)(nil), "client_hall.ESPortsCoinExChangeResult")
	proto.RegisterType((*ESPortsCoinExChangeRecordRequest)(nil), "client_hall.ESPortsCoinExChangeRecordRequest")
	proto.RegisterType((*ESPortsCoinExChangeRecordResult)(nil), "client_hall.ESPortsCoinExChangeRecordResult")
	proto.RegisterType((*ExChangeRecordObject)(nil), "client_hall.ExChangeRecordObject")
	proto.RegisterType((*RpcESPortsApiOriginResult)(nil), "client_hall.RpcESPortsApiOriginResult")
}

func init() { proto.RegisterFile("sport_apply.proto", fileDescriptor_8910b1377b3aad44) }

var fileDescriptor_8910b1377b3aad44 = []byte{
	// 1951 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0xdd, 0x72, 0x1b, 0x49,
	0x15, 0x2e, 0x65, 0xa4, 0xd8, 0x3e, 0xfe, 0x49, 0xdc, 0x1b, 0x3b, 0x5a, 0x93, 0x72, 0x9c, 0xc9,
	0x6e, 0x36, 0xa1, 0x58, 0x87, 0xf5, 0x92, 0x2a, 0x96, 0x2d, 0xa0, 0x6c, 0x59, 0x4e, 0x44, 0xf9,
	0x0f, 0xdb, 0x31, 0xbb, 0xcb, 0x2e, 0xda, 0xb6, 0xd4, 0x2b, 0x0f, 0x3b, 0x9a, 0x99, 0x9d, 0x69,
	0xd9, 0x16, 0x5c, 0x52, 0xc5, 0x05, 0x3c, 0x03, 0x37, 0xf0, 0x04, 0x54, 0xf1, 0x06, 0xdc, 0x70,
	0xc9, 0x05, 0x0f, 0x40, 0xe5, 0x31, 0xb8, 0xa2, 0xfa, 0x74, 0xb7, 0xd4, 0x2d, 0xb5, 0x34, 0x8a,
	0x09, 0x70, 0x67, 0xf5, 0xcf, 0x77, 0xce, 0xf9, 0xce, 0x4f, 0x9f, 0x33, 0x86, 0xc5, 0x2c, 0x89,
	0x53, 0x5e, 0xa7, 0x49, 0x12, 0x76, 0xd7, 0x93, 0x34, 0xe6, 0x31, 0x99, 0x6d, 0x84, 0x01, 0x8b,
	0x78, 0xfd, 0x9c, 0x86, 0xe1, 0xca, 0xc7, 0x2d, 0xda, 0x66, 0xf5, 0x8c, 0xa5, 0x17, 0x2c, 0x7d,
	0x8a, 0xfb, 0x4f, 0xb3, 0x73, 0x9a, 0xb2, 0x7a, 0x9b, 0x65, 0x19, 0x6d, 0xb1, 0xa7, 0x9c, 0x9e,
	0x85, 0xac, 0x9e, 0xf1, 0xb4, 0xd3, 0xe0, 0x75, 0xf6, 0x3e, 0xc2, 0x65, 0x12, 0x69, 0xe5, 0x47,
	0xd7, 0xba, 0x5c, 0xcf, 0xda, 0xea, 0x3e, 0x9c, 0xd1, 0x8c, 0xc9, 0xbf, 0xfd, 0x9f, 0xc2, 0xdb,
	0xd5, 0x63, 0xb1, 0xff, 0x9c, 0xb6, 0xd9, 0x69, 0xc0, 0x2e, 0x0f, 0x69, 0x8b, 0x1d, 0xb1, 0x6f,
	0x3a, 0x2c, 0xe3, 0xe4, 0x0e, 0xcc, 0xbd, 0x8c, 0x82, 0x6f, 0x3a, 0x4c, 0x6c, 0xd6, 0x9a, 0xe5,
	0xc2, 0x5a, 0xe1, 0xb1, 0x47, 0xe6, 0xa0, 0x28, 0x0e, 0x95, 0x6f, 0xac, 0x15, 0x1e, 0x97, 0xc8,
	0x6d, 0x98, 0x16, 0xbf, 0x8e, 0x83, 0x5f, 0xb1, 0xb2, 0x27, 0x56, 0xfc, 0x1d, 0xb8, 0x23, 0x21,
	0xb7, 0x29, 0xa7, 0xc7, 0x9c, 0xf2, 0x4e, 0x56, 0x8b, 0xbe, 0x8a, 0xc9, 0x02, 0xdc, 0xdc, 0x63,
	0x51, 0x47, 0xe1, 0x94, 0xc4, 0x6f, 0x71, 0xa2, 0xd6, 0x44, 0x24, 0x4f, 0xfc, 0x96, 0xa7, 0x15,
	0xce, 0xef, 0x0b, 0xb0, 0x28, 0x81, 0x4c, 0x9d, 0x1c, 0x28, 0x27, 0xdd, 0x84, 0xf5, 0x50, 0x6e,
	0xc1, 0xd4, 0x2e, 0x3d, 0x63, 0x61, 0xad, 0x59, 0x9e, 0xb2, 0xd4, 0xf5, 0x86, 0xd4, 0x2d, 0xe2,
	0x0a, 0x01, 0x38, 0x48, 0x9b, 0x2c, 0xdd, 0x09, 0x58, 0xd8, 0x2c, 0x97, 0xd6, 0x0a, 0x8f, 0x67,
	0xc8, 0x22, 0xcc, 0x6c, 0x66, 0x8d, 0x83, 0x74, 0x9b, 0x65, 0x8d, 0xf2, 0x4d, 0xb1, 0xe4, 0xff,
	0xa1, 0x00, 0xcb, 0xd5, 0xe3, 0x43, 0xc1, 0xe4, 0x56, 0x92, 0x6d, 0x77, 0x52, 0xca, 0x83, 0x38,
	0x12, 0x06, 0x08, 0x9a, 0xf6, 0xe9, 0x45, 0xd0, 0xc2, 0x15, 0x53, 0x31, 0xa5, 0xa8, 0x24, 0xca,
	0x50, 0xcc, 0xd3, 0x9a, 0x56, 0xaf, 0x4e, 0xe8, 0x59, 0xad, 0x89, 0x9a, 0x78, 0x06, 0x21, 0x25,
	0xad, 0x79, 0xf5, 0xaa, 0xd6, 0x44, 0x05, 0x3c, 0xad, 0xb9, 0x30, 0x16, 0x2d, 0x2b, 0x91, 0x59,
	0xf0, 0x0e, 0x12, 0x5e, 0x9e, 0x46, 0xb6, 0xf6, 0x85, 0x23, 0x07, 0xd5, 0xd3, 0xa4, 0x7d, 0x00,
	0xc5, 0xdd, 0x20, 0xe3, 0xe5, 0xc2, 0x9a, 0xf7, 0x78, 0x76, 0xe3, 0xe1, 0xba, 0x11, 0x8a, 0xeb,
	0x6e, 0xa3, 0xfc, 0xbf, 0x58, 0xf6, 0x56, 0xc2, 0xa0, 0xf1, 0xb5, 0x11, 0x16, 0xff, 0x1b, 0x7b,
	0xb7, 0x3a, 0x9c, 0xa3, 0x84, 0x29, 0xd3, 0x77, 0xc8, 0xc0, 0xb4, 0x5e, 0x11, 0x08, 0xb8, 0x32,
	0x83, 0x34, 0x04, 0x50, 0x76, 0x6b, 0x5d, 0xbd, 0x22, 0x77, 0xe1, 0x56, 0x05, 0x0d, 0xc7, 0xf5,
	0x93, 0xa0, 0xcd, 0x54, 0x44, 0x7f, 0x0f, 0xa6, 0x84, 0xf9, 0x94, 0x53, 0xd4, 0x7d, 0x34, 0x43,
	0x26, 0xa0, 0x1f, 0xc2, 0xca, 0xc0, 0x8e, 0xe0, 0x58, 0x93, 0x44, 0x00, 0xa4, 0x30, 0x43, 0xce,
	0x0f, 0x60, 0x56, 0xc9, 0x41, 0x6f, 0xdc, 0x40, 0x6f, 0xbc, 0x3b, 0x81, 0xac, 0xea, 0x95, 0x7f,
	0xaa, 0x93, 0x41, 0xe4, 0xd2, 0xa8, 0x64, 0x20, 0x00, 0x22, 0x55, 0xad, 0x84, 0xe8, 0xb3, 0x2c,
	0xdd, 0x30, 0x0f, 0xa5, 0xea, 0x15, 0xd7, 0x4e, 0xf0, 0x9f, 0x03, 0x91, 0xb8, 0xa7, 0x41, 0x93,
	0x8d, 0x04, 0x5e, 0x84, 0x19, 0xdc, 0x47, 0xa6, 0x9d, 0xb8, 0xfe, 0x9f, 0x30, 0x60, 0x7a, 0x48,
	0xe3, 0x72, 0x76, 0x08, 0xcd, 0x4c, 0x63, 0x6f, 0x30, 0x8d, 0x8b, 0x56, 0x1a, 0x97, 0x86, 0xd2,
	0xf8, 0xa6, 0x23, 0x8d, 0xa7, 0x86, 0xd3, 0x78, 0x1a, 0xd3, 0xf8, 0xc7, 0xda, 0xdc, 0x4a, 0xdc,
	0x6e, 0x8b, 0x04, 0xc9, 0x3a, 0x21, 0x17, 0xe0, 0x8d, 0xb8, 0xc9, 0x94, 0x7a, 0xb3, 0xe0, 0xb5,
	0xb3, 0x16, 0x2a, 0x36, 0x33, 0x64, 0xe6, 0x99, 0xf6, 0x83, 0xe2, 0x2b, 0xef, 0xfe, 0x06, 0x14,
	0x31, 0xb0, 0x3c, 0x0c, 0xac, 0x77, 0xd6, 0xad, 0x4a, 0xbd, 0x7e, 0x22, 0x2a, 0xb5, 0xf2, 0x39,
	0x02, 0x0a, 0xef, 0xfa, 0xe7, 0xba, 0x82, 0x1e, 0x31, 0x1a, 0x8a, 0xf8, 0xc9, 0x17, 0xf3, 0xcc,
	0x12, 0xf3, 0xde, 0x18, 0x31, 0x1a, 0x13, 0x25, 0x7d, 0xae, 0x25, 0x9d, 0x9c, 0x77, 0xda, 0x67,
	0xd9, 0xcb, 0x24, 0x5f, 0x12, 0x01, 0xa8, 0x65, 0xfa, 0xb8, 0xaa, 0xaa, 0x4b, 0x30, 0xaf, 0x57,
	0x2a, 0x71, 0x27, 0xe2, 0xb2, 0xb4, 0xfa, 0x35, 0x4d, 0xb6, 0xf0, 0xfe, 0x8b, 0x58, 0xca, 0x24,
	0x1f, 0xc2, 0x0c, 0xba, 0xd6, 0xa8, 0x48, 0x6b, 0x63, 0xf4, 0xc5, 0xb3, 0xfe, 0x41, 0xcf, 0x6f,
	0x34, 0x8d, 0x3b, 0x99, 0xbc, 0x4d, 0x3e, 0x82, 0x39, 0xf3, 0xb7, 0xca, 0xa8, 0x87, 0x63, 0xd0,
	0xf4, 0x71, 0xff, 0xcf, 0x05, 0x6d, 0xfa, 0x5e, 0x77, 0x37, 0xb8, 0x60, 0x47, 0x71, 0xdc, 0x46,
	0xf5, 0x96, 0x60, 0xbe, 0x12, 0x5f, 0xb0, 0xb4, 0xd6, 0xa6, 0x2d, 0xf6, 0x32, 0x0d, 0x91, 0x03,
	0x34, 0x7b, 0x33, 0x49, 0x64, 0x4c, 0x6e, 0xab, 0x14, 0xb8, 0x0d, 0xd3, 0xe8, 0x34, 0x71, 0xca,
	0xc3, 0x53, 0xf3, 0x50, 0x3a, 0x09, 0x78, 0x28, 0xdf, 0x96, 0x19, 0xe3, 0x49, 0x2b, 0xe9, 0x9a,
	0x58, 0x89, 0x23, 0xce, 0x22, 0x2e, 0x5f, 0x95, 0xa1, 0x17, 0x56, 0x3e, 0x59, 0xcb, 0xb0, 0xd0,
	0x5f, 0xdd, 0xa7, 0x6d, 0xa6, 0x82, 0xf7, 0x37, 0x05, 0xcd, 0x82, 0xd0, 0xb8, 0x47, 0xe8, 0xf7,
	0x01, 0xa4, 0x0d, 0xe2, 0x17, 0xaa, 0x3b, 0x61, 0xa0, 0xd9, 0xae, 0xb8, 0x31, 0xa1, 0x2b, 0x12,
	0x9d, 0x01, 0x22, 0x85, 0x58, 0xc4, 0x9d, 0x8f, 0x3b, 0x26, 0x68, 0x2a, 0x76, 0x75, 0x1d, 0x5a,
	0x84, 0x19, 0x7d, 0xa1, 0x89, 0xc5, 0xda, 0x33, 0xe9, 0x90, 0xf4, 0x2d, 0xc1, 0xfc, 0x11, 0x4b,
	0xc2, 0xee, 0x61, 0x48, 0xbb, 0x2c, 0xed, 0xd5, 0xa8, 0x4b, 0xb8, 0xab, 0x3a, 0x0a, 0x16, 0x32,
	0xce, 0x5e, 0x4f, 0x2e, 0x01, 0x38, 0xec, 0x0b, 0xf6, 0x86, 0x75, 0x91, 0xf5, 0xe5, 0x2d, 0x98,
	0x55, 0x4b, 0x58, 0x95, 0xd0, 0x5f, 0xfe, 0xd7, 0x3a, 0x46, 0xd4, 0xd6, 0xa8, 0x82, 0x96, 0x63,
	0xad, 0x67, 0x55, 0xb0, 0xe2, 0x50, 0x05, 0x93, 0xc2, 0x3e, 0xd5, 0x56, 0xaa, 0x8b, 0xf2, 0x35,
	0xc1, 0x74, 0x14, 0x61, 0x15, 0x73, 0x1a, 0x2a, 0x71, 0x4f, 0xd5, 0x73, 0x2e, 0x3d, 0xf6, 0xc0,
	0xed, 0x31, 0x03, 0xc9, 0xff, 0x05, 0xdc, 0x1b, 0xb0, 0x23, 0x09, 0xbb, 0x6f, 0x10, 0xff, 0x4b,
	0xf1, 0xea, 0xea, 0x82, 0xc5, 0x83, 0x36, 0x1b, 0x8d, 0xfd, 0xcc, 0xc2, 0x7e, 0x8d, 0x42, 0xa5,
	0xdb, 0x1b, 0xcc, 0x14, 0xce, 0xda, 0xa2, 0x59, 0x75, 0x8b, 0xf8, 0xae, 0x25, 0xc2, 0x1f, 0x10,
	0xe1, 0x80, 0xf1, 0x77, 0xe0, 0x96, 0xca, 0x2b, 0x9d, 0x0d, 0xd7, 0xab, 0x52, 0x9f, 0xc1, 0x92,
	0xf1, 0x38, 0x8c, 0x26, 0x61, 0xc3, 0xd2, 0x70, 0xb2, 0x47, 0xe1, 0x1f, 0xd8, 0x0e, 0xe3, 0xe2,
	0x71, 0x37, 0xdb, 0xcb, 0x5a, 0xa8, 0xa6, 0x08, 0x23, 0x2b, 0x59, 0xc8, 0x33, 0x80, 0xfe, 0xbe,
	0xd2, 0xfc, 0xc1, 0x18, 0x09, 0xf2, 0x30, 0xf9, 0x18, 0xa6, 0x5e, 0x46, 0x87, 0xb4, 0xcb, 0x9a,
	0x4a, 0xab, 0x6f, 0x8f, 0xb9, 0x23, 0xc8, 0xc3, 0xd7, 0x56, 0x5d, 0xfe, 0x08, 0x4a, 0xf2, 0xaa,
	0xf7, 0xba, 0x57, 0xfd, 0xdf, 0x16, 0x04, 0x67, 0xb2, 0x36, 0xc7, 0x41, 0x64, 0x78, 0x75, 0x0e,
	0x8a, 0x15, 0xeb, 0x0d, 0xda, 0xeb, 0xbd, 0x41, 0x73, 0x50, 0xc4, 0x2c, 0xf5, 0x74, 0x3b, 0xb1,
	0x45, 0xa3, 0x88, 0xa5, 0xa2, 0x0e, 0xcb, 0xc2, 0xfb, 0x01, 0xcc, 0x55, 0xaf, 0x2a, 0xe7, 0x34,
	0x6a, 0x61, 0x28, 0x96, 0x4b, 0xa8, 0xd7, 0xb7, 0xec, 0x56, 0x4b, 0x1d, 0x38, 0x38, 0xfb, 0x25,
	0x6b, 0x70, 0x51, 0x5c, 0x17, 0xec, 0x25, 0x51, 0x3a, 0x74, 0x9c, 0x07, 0x51, 0x7f, 0xfa, 0xc1,
	0x5f, 0xbd, 0x34, 0xdf, 0xa6, 0x41, 0xd8, 0x7d, 0x1e, 0x5c, 0xb0, 0x7e, 0x6d, 0xd9, 0x09, 0xd2,
	0x8c, 0xe3, 0x92, 0x74, 0xc9, 0x13, 0x28, 0x1e, 0x51, 0xce, 0x7a, 0x5a, 0x0c, 0x04, 0xe4, 0x55,
	0x03, 0x85, 0x8a, 0x23, 0x7e, 0xbd, 0xd7, 0x54, 0x0a, 0x29, 0x5a, 0x1f, 0x5d, 0x77, 0xb4, 0xdd,
	0x92, 0x92, 0x0f, 0x61, 0x81, 0x59, 0x0a, 0xab, 0xee, 0x75, 0xac, 0x99, 0x7f, 0x2c, 0xf4, 0x32,
	0xc9, 0x96, 0xf0, 0x7f, 0xe0, 0x5c, 0x3c, 0x74, 0x82, 0x26, 0x4c, 0x0d, 0xa1, 0x4d, 0x26, 0x7b,
	0x7f, 0x7f, 0x0b, 0xd6, 0x9c, 0x3a, 0x36, 0xe2, 0xb4, 0x69, 0x70, 0x81, 0xe5, 0xb4, 0x30, 0x54,
	0x4e, 0xb1, 0xa3, 0xf4, 0x7f, 0x57, 0x80, 0xfb, 0x63, 0x40, 0xf2, 0xcc, 0xed, 0x65, 0xac, 0xb4,
	0xf7, 0x87, 0x40, 0x6c, 0x04, 0x34, 0xb1, 0xa8, 0xb2, 0xcb, 0x65, 0xa2, 0x3c, 0xa6, 0x58, 0x3f,
	0x86, 0x3b, 0xae, 0x75, 0x52, 0x86, 0xdb, 0x72, 0x75, 0x28, 0xce, 0xc4, 0xfc, 0x90, 0x32, 0xca,
	0x19, 0xce, 0x0f, 0x37, 0x74, 0xeb, 0xce, 0xb1, 0xbb, 0xc0, 0xd7, 0xd2, 0xaf, 0xc1, 0xdb, 0x47,
	0x49, 0x43, 0xd9, 0xb8, 0x99, 0x04, 0x07, 0x69, 0xd0, 0x0a, 0xa2, 0x7c, 0xd3, 0x44, 0x5b, 0xac,
	0x4f, 0x4b, 0xf3, 0x36, 0xfe, 0xba, 0x0c, 0x0b, 0x72, 0x5c, 0xd9, 0x90, 0x9a, 0x64, 0xe4, 0x67,
	0x70, 0x07, 0xd1, 0xf1, 0xe3, 0x00, 0xe3, 0xbd, 0x6e, 0x63, 0x75, 0x60, 0x5e, 0x19, 0x98, 0x49,
	0x56, 0xee, 0x3b, 0xf6, 0xad, 0xfe, 0x8f, 0x42, 0xd9, 0x04, 0x36, 0x9f, 0x0c, 0x27, 0xb8, 0x31,
	0x49, 0xac, 0xbc, 0xeb, 0xd8, 0x77, 0xbc, 0x39, 0x5f, 0xb8, 0x45, 0x4c, 0xa4, 0xff, 0x83, 0x11,
	0x22, 0x8c, 0x3e, 0xfc, 0x14, 0x16, 0x7b, 0xf0, 0xba, 0xef, 0xbd, 0x16, 0xee, 0x40, 0xd7, 0x6d,
	0x52, 0x7e, 0xcc, 0xa2, 0xa6, 0x7a, 0x5e, 0x9d, 0xd0, 0x46, 0x13, 0xe4, 0xa4, 0xdc, 0x9a, 0x6f,
	0xea, 0xb0, 0xdc, 0x03, 0xb6, 0x7a, 0x28, 0xf2, 0x8e, 0xe3, 0xea, 0x50, 0x97, 0x95, 0x2f, 0xa0,
	0x01, 0x6f, 0x99, 0x84, 0x6b, 0xf4, 0x07, 0xa3, 0x15, 0xd7, 0xb4, 0x3c, 0x19, 0x77, 0xc4, 0xee,
	0x52, 0xce, 0x6d, 0xaf, 0x9a, 0xa7, 0xde, 0xb0, 0xa4, 0x4f, 0x6c, 0x49, 0x9b, 0x61, 0xd8, 0x6f,
	0x0c, 0xf2, 0xfc, 0x7c, 0xcf, 0xb1, 0xdf, 0xbf, 0xfd, 0xf3, 0x01, 0x1b, 0xcc, 0x69, 0xe6, 0x3a,
	0x99, 0x65, 0x01, 0x7c, 0x01, 0xf7, 0xfa, 0xf1, 0x43, 0x2f, 0x70, 0x7c, 0x40, 0xd1, 0x95, 0x38,
	0xfa, 0x2a, 0x68, 0x91, 0xb1, 0xaa, 0xe5, 0x3b, 0xf9, 0x13, 0x23, 0x8a, 0x9e, 0x33, 0x6e, 0x74,
	0x21, 0x79, 0x9a, 0xaf, 0xba, 0xbe, 0x71, 0x18, 0xf7, 0xbf, 0x84, 0x25, 0x13, 0xb9, 0xd7, 0x3d,
	0x91, 0x87, 0x0e, 0xe0, 0xc1, 0xcf, 0x0b, 0x2b, 0xfe, 0xa8, 0x43, 0x96, 0x47, 0x87, 0x25, 0x60,
	0x39, 0xb8, 0x3f, 0xea, 0xf2, 0x28, 0xdd, 0x07, 0x67, 0xff, 0x00, 0x56, 0x4d, 0xe4, 0xbd, 0xee,
	0x8b, 0x20, 0xe3, 0x71, 0xda, 0xfd, 0x2f, 0x18, 0x31, 0x10, 0x3c, 0xd6, 0x10, 0x78, 0x9d, 0xe0,
	0xb1, 0x00, 0x3e, 0x35, 0xbc, 0xbb, 0xd9, 0x6c, 0xee, 0xc4, 0x61, 0x18, 0x5f, 0x8a, 0x13, 0xd7,
	0x8b, 0x4b, 0x33, 0x70, 0xce, 0x8c, 0xb8, 0x44, 0x8a, 0xfa, 0xe0, 0x13, 0x55, 0xfd, 0x49, 0xb8,
	0xf9, 0xdc, 0x54, 0x3f, 0x49, 0xc2, 0xee, 0x41, 0xc2, 0x22, 0x54, 0xdf, 0x55, 0x1a, 0xec, 0x99,
	0x3f, 0xdf, 0x02, 0x93, 0x79, 0x51, 0x99, 0xf5, 0x6d, 0xd1, 0xfc, 0xfe, 0xc7, 0xd5, 0xf9, 0x14,
	0x48, 0x0f, 0x7c, 0x97, 0x51, 0x41, 0xca, 0x05, 0x23, 0x79, 0xd7, 0xf2, 0x71, 0x03, 0xb8, 0x6f,
	0xd2, 0x6e, 0x34, 0xe0, 0xa2, 0xcb, 0x9e, 0x88, 0xf9, 0x47, 0xae, 0xc4, 0x75, 0x4c, 0x60, 0x2d,
	0xd5, 0x8a, 0x28, 0x51, 0x52, 0x86, 0x8e, 0xff, 0x47, 0x0e, 0x21, 0x8e, 0x7f, 0x37, 0x4c, 0xe4,
	0xe6, 0xcf, 0x14, 0x57, 0xd6, 0x57, 0x52, 0x32, 0xc9, 0xf7, 0xda, 0x49, 0xc2, 0x74, 0x79, 0x18,
	0x1b, 0x2d, 0x78, 0x6f, 0x1c, 0xbe, 0xf1, 0xd5, 0x37, 0x5f, 0x86, 0xae, 0x74, 0x83, 0xdf, 0xdc,
	0xc9, 0xa3, 0x9c, 0x8f, 0xf2, 0x13, 0x4b, 0xa8, 0x9a, 0x0c, 0xe9, 0x91, 0x8a, 0xcc, 0xae, 0xe3,
	0x3f, 0x7d, 0xaa, 0xed, 0x84, 0x77, 0x87, 0x88, 0x76, 0x4d, 0x5f, 0x81, 0x49, 0x86, 0xd9, 0x40,
	0xbb, 0xc9, 0x70, 0x4c, 0x2b, 0xee, 0xe0, 0x71, 0x0c, 0x1d, 0xbf, 0x56, 0xe5, 0x61, 0x44, 0xaf,
	0x4e, 0xde, 0xcf, 0xc7, 0x31, 0x06, 0x83, 0x95, 0xef, 0x4c, 0x7a, 0x1c, 0x85, 0xff, 0x44, 0x75,
	0x2e, 0x76, 0x13, 0x6d, 0xf3, 0x65, 0x1b, 0x32, 0xb2, 0xe7, 0xde, 0xf8, 0x97, 0x18, 0x21, 0x65,
	0xfb, 0xbc, 0x21, 0xbb, 0x69, 0xf2, 0xc2, 0x28, 0x4b, 0xfb, 0xec, 0x52, 0xbc, 0x79, 0x72, 0xec,
	0x23, 0x39, 0x6f, 0xe2, 0xca, 0x82, 0xd4, 0x60, 0x3f, 0x3e, 0x62, 0xbc, 0x93, 0x46, 0xe4, 0xd0,
	0x68, 0xb1, 0xf6, 0xd9, 0xa5, 0xae, 0x3e, 0x4f, 0xc6, 0x7d, 0x94, 0xe8, 0x57, 0xa9, 0xdd, 0xb8,
	0x35, 0x84, 0xb8, 0x0b, 0x77, 0xfb, 0x5d, 0xa1, 0xfd, 0xbf, 0x3a, 0x57, 0xcd, 0xb4, 0x8f, 0x0c,
	0xa2, 0x6d, 0xcd, 0xfd, 0xed, 0xd5, 0x6a, 0xe1, 0xef, 0xaf, 0x56, 0x0b, 0xff, 0x7c, 0xb5, 0x5a,
	0xf8, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x40, 0x3d, 0x52, 0x6f, 0x01, 0x1d, 0x00, 0x00,
}

func (m *ESportGameViewPageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportGameViewPageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UniqueGameId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.UniqueGameId))
	}
	if m.Page != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.Page))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESportDataStatusInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportDataStatusInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MenuId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.MenuId))
	}
	if m.DataId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.DataId))
	}
	if m.Status != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.Status))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESportPageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportPageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MenuId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.MenuId))
	}
	if m.TypeId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.TypeId))
	}
	if m.Page != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.Page))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.PageSize))
	}
	if m.OrderField != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(len(*m.OrderField)))
		i += copy(dAtA[i:], *m.OrderField)
	}
	if m.AscOrDesc != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(len(*m.AscOrDesc)))
		i += copy(dAtA[i:], *m.AscOrDesc)
	}
	if m.LabelId != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.LabelId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESPortsBpsDurationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESPortsBpsDurationData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NavigationId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.NavigationId))
	}
	if m.MenuId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.MenuId))
	}
	if m.LabelId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.LabelId))
	}
	if m.ExTabId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.ExTabId))
	}
	if m.DataId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.DataId))
	}
	if m.ExId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.ExId))
	}
	if m.PageType != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.PageType))
	}
	if m.Opt != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.Opt))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESPortsBpsDurationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESPortsBpsDurationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSportApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESPortsBpsClickRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESPortsBpsClickRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NavigationId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.NavigationId))
	}
	if m.MenuId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.MenuId))
	}
	if m.LabelId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.LabelId))
	}
	if m.ExTabId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.ExTabId))
	}
	if m.DataId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.DataId))
	}
	if m.ExId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.ExId))
	}
	if m.ButtonId != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.ButtonId))
	}
	if m.PageType != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.PageType))
	}
	if m.DataType != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.DataType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESPortsBpsClickRequestEx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESPortsBpsClickRequestEx) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClientClickTime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.ClientClickTime))
	}
	if m.BpsData != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(m.BpsData.Size()))
		n1, err := m.BpsData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESPortsBpsClickListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESPortsBpsClickListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClientTime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.ClientTime))
	}
	if len(m.BpsDataList) > 0 {
		for _, msg := range m.BpsDataList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSportApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESportInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MenuId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.MenuId))
	}
	if m.GameTypeId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.GameTypeId))
	}
	if m.DataId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.DataId))
	}
	if m.ExtId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.ExtId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESportVideoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportVideoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MenuId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.MenuId))
	}
	if m.VideoType != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.VideoType))
	}
	if m.DataId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.DataId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESportVideoPageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportVideoPageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MenuId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.MenuId))
	}
	if m.VideoType != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.VideoType))
	}
	if m.TypeId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.TypeId))
	}
	if m.LabelId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.LabelId))
	}
	if m.Page != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.Page))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.PageSize))
	}
	if m.OrderField != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(len(*m.OrderField)))
		i += copy(dAtA[i:], *m.OrderField)
	}
	if m.AscOrDesc != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(len(*m.AscOrDesc)))
		i += copy(dAtA[i:], *m.AscOrDesc)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESportCommonResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportCommonResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.Code))
	}
	if m.Msg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(len(*m.Msg)))
		i += copy(dAtA[i:], *m.Msg)
	}
	if m.DataId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.DataId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESportVideoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportVideoResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.Code))
	}
	if m.Msg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(len(*m.Msg)))
		i += copy(dAtA[i:], *m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(m.Data.Size()))
		n2, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESportRealTimeResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportRealTimeResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.Code))
	}
	if m.Msg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(len(*m.Msg)))
		i += copy(dAtA[i:], *m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(m.Data.Size()))
		n3, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESportThumbsUpResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportThumbsUpResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.Code))
	}
	if m.Msg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(len(*m.Msg)))
		i += copy(dAtA[i:], *m.Msg)
	}
	if m.IsThumbsUp != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.IsThumbsUp))
	}
	if m.ThumbsUpCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.ThumbsUpCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESportMenuHomeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportMenuHomeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LabelList) > 0 {
		for _, msg := range m.LabelList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSportApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESportCarouselList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportCarouselList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CarouselList) > 0 {
		for _, msg := range m.CarouselList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSportApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESportMyLiveRoomInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportMyLiveRoomInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CoverImageUrl != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(len(*m.CoverImageUrl)))
		i += copy(dAtA[i:], *m.CoverImageUrl)
	}
	if m.AppLabelID != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.AppLabelID))
	}
	if m.VideoUrl != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(len(*m.VideoUrl)))
		i += copy(dAtA[i:], *m.VideoUrl)
	}
	if m.Title != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.Status != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.Status))
	}
	if m.Content != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.UniqueGameId != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.UniqueGameId))
	}
	if m.UniqueGameName != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(len(*m.UniqueGameName)))
		i += copy(dAtA[i:], *m.UniqueGameName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESportLiveHomeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportLiveHomeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MyLiveInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(m.MyLiveInfo.Size()))
		n4, err := m.MyLiveInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.LabelList) > 0 {
		for _, msg := range m.LabelList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSportApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESportCommentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportCommentInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MenuId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.MenuId))
	}
	if m.ParentId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.ParentId))
	}
	if m.Content != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.ReplyPlayerId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.ReplyPlayerId))
	}
	if m.CommentId != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.CommentId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESportDeleteCommentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportDeleteCommentInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MenuId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.MenuId))
	}
	if m.ParentId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.ParentId))
	}
	if m.PCommentId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.PCommentId))
	}
	if m.CommentId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.CommentId))
	}
	if m.CommentType != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.CommentType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESportCommentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportCommentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MenuId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.MenuId))
	}
	if m.ParentId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.ParentId))
	}
	if m.CommentId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.CommentId))
	}
	if m.Page != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.Page))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESportCommentListResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportCommentListResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.Total))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSportApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESportCommentReplyListResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportCommentReplyListResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.Total))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSportApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESportRealtimeListResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportRealtimeListResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.Total))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSportApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESPortsGameItemViewResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESPortsGameItemViewResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.Total))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSportApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESportLabelList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportLabelList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LabelList) > 0 {
		for _, msg := range m.LabelList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSportApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESportVideoListResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportVideoListResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.Total))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSportApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESPortsSysMsgList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESPortsSysMsgList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SysMsgList) > 0 {
		for _, msg := range m.SysMsgList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSportApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.UnPayed) > 0 {
		for _, msg := range m.UnPayed {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSportApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Payed) > 0 {
		for _, msg := range m.Payed {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSportApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESPortsCoinViewResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESPortsCoinViewResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.Code))
	}
	if m.Msg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(len(*m.Msg)))
		i += copy(dAtA[i:], *m.Msg)
	}
	if m.Type != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.Type))
	}
	if m.BannerUrl != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(len(*m.BannerUrl)))
		i += copy(dAtA[i:], *m.BannerUrl)
	}
	if len(m.ExChangeList) > 0 {
		for _, msg := range m.ExChangeList {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintSportApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ExChangeObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExChangeObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ESportCoin != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.ESportCoin))
	}
	if m.Coin != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.Coin))
	}
	if m.DailyGive != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.DailyGive))
	}
	if m.FirstGive != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.FirstGive))
	}
	if len(m.Rate) > 0 {
		for _, msg := range m.Rate {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintSportApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESPortsCoinExChangeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESPortsCoinExChangeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.Type))
	}
	if m.ExChangeObject != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(m.ExChangeObject.Size()))
		n5, err := m.ExChangeObject.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESPortsCoinExChangeResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESPortsCoinExChangeResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.Code))
	}
	if m.Msg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(len(*m.Msg)))
		i += copy(dAtA[i:], *m.Msg)
	}
	if m.Type != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.Type))
	}
	if m.BannerUrl != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(len(*m.BannerUrl)))
		i += copy(dAtA[i:], *m.BannerUrl)
	}
	if len(m.ExChangeList) > 0 {
		for _, msg := range m.ExChangeList {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintSportApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.GiveTotalCoins != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.GiveTotalCoins))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESPortsCoinExChangeRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESPortsCoinExChangeRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.Page))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESPortsCoinExChangeRecordResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESPortsCoinExChangeRecordResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.Code))
	}
	if m.Msg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(len(*m.Msg)))
		i += copy(dAtA[i:], *m.Msg)
	}
	if m.Total != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.Total))
	}
	if len(m.ExChangeRecordList) > 0 {
		for _, msg := range m.ExChangeRecordList {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSportApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ExChangeRecordObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExChangeRecordObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChangeESportCoin != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.ChangeESportCoin))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Title != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RpcESPortsApiOriginResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcESPortsApiOriginResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.Code))
	}
	if m.Msg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(len(*m.Msg)))
		i += copy(dAtA[i:], *m.Msg)
	}
	if m.ApiOrigin != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSportApply(dAtA, i, uint64(*m.ApiOrigin))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSportApply(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ESportGameViewPageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UniqueGameId != nil {
		n += 1 + sovSportApply(uint64(*m.UniqueGameId))
	}
	if m.Page != nil {
		n += 1 + sovSportApply(uint64(*m.Page))
	}
	if m.PageSize != nil {
		n += 1 + sovSportApply(uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESportDataStatusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MenuId != nil {
		n += 1 + sovSportApply(uint64(*m.MenuId))
	}
	if m.DataId != nil {
		n += 1 + sovSportApply(uint64(*m.DataId))
	}
	if m.Status != nil {
		n += 1 + sovSportApply(uint64(*m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESportPageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MenuId != nil {
		n += 1 + sovSportApply(uint64(*m.MenuId))
	}
	if m.TypeId != nil {
		n += 1 + sovSportApply(uint64(*m.TypeId))
	}
	if m.Page != nil {
		n += 1 + sovSportApply(uint64(*m.Page))
	}
	if m.PageSize != nil {
		n += 1 + sovSportApply(uint64(*m.PageSize))
	}
	if m.OrderField != nil {
		l = len(*m.OrderField)
		n += 1 + l + sovSportApply(uint64(l))
	}
	if m.AscOrDesc != nil {
		l = len(*m.AscOrDesc)
		n += 1 + l + sovSportApply(uint64(l))
	}
	if m.LabelId != nil {
		n += 1 + sovSportApply(uint64(*m.LabelId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESPortsBpsDurationData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NavigationId != nil {
		n += 1 + sovSportApply(uint64(*m.NavigationId))
	}
	if m.MenuId != nil {
		n += 1 + sovSportApply(uint64(*m.MenuId))
	}
	if m.LabelId != nil {
		n += 1 + sovSportApply(uint64(*m.LabelId))
	}
	if m.ExTabId != nil {
		n += 1 + sovSportApply(uint64(*m.ExTabId))
	}
	if m.DataId != nil {
		n += 1 + sovSportApply(uint64(*m.DataId))
	}
	if m.ExId != nil {
		n += 1 + sovSportApply(uint64(*m.ExId))
	}
	if m.PageType != nil {
		n += 1 + sovSportApply(uint64(*m.PageType))
	}
	if m.Opt != nil {
		n += 1 + sovSportApply(uint64(*m.Opt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESPortsBpsDurationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovSportApply(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESPortsBpsClickRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NavigationId != nil {
		n += 1 + sovSportApply(uint64(*m.NavigationId))
	}
	if m.MenuId != nil {
		n += 1 + sovSportApply(uint64(*m.MenuId))
	}
	if m.LabelId != nil {
		n += 1 + sovSportApply(uint64(*m.LabelId))
	}
	if m.ExTabId != nil {
		n += 1 + sovSportApply(uint64(*m.ExTabId))
	}
	if m.DataId != nil {
		n += 1 + sovSportApply(uint64(*m.DataId))
	}
	if m.ExId != nil {
		n += 1 + sovSportApply(uint64(*m.ExId))
	}
	if m.ButtonId != nil {
		n += 1 + sovSportApply(uint64(*m.ButtonId))
	}
	if m.PageType != nil {
		n += 1 + sovSportApply(uint64(*m.PageType))
	}
	if m.DataType != nil {
		n += 1 + sovSportApply(uint64(*m.DataType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESPortsBpsClickRequestEx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientClickTime != nil {
		n += 1 + sovSportApply(uint64(*m.ClientClickTime))
	}
	if m.BpsData != nil {
		l = m.BpsData.Size()
		n += 1 + l + sovSportApply(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESPortsBpsClickListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientTime != nil {
		n += 1 + sovSportApply(uint64(*m.ClientTime))
	}
	if len(m.BpsDataList) > 0 {
		for _, e := range m.BpsDataList {
			l = e.Size()
			n += 1 + l + sovSportApply(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESportInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MenuId != nil {
		n += 1 + sovSportApply(uint64(*m.MenuId))
	}
	if m.GameTypeId != nil {
		n += 1 + sovSportApply(uint64(*m.GameTypeId))
	}
	if m.DataId != nil {
		n += 1 + sovSportApply(uint64(*m.DataId))
	}
	if m.ExtId != nil {
		n += 1 + sovSportApply(uint64(*m.ExtId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESportVideoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MenuId != nil {
		n += 1 + sovSportApply(uint64(*m.MenuId))
	}
	if m.VideoType != nil {
		n += 1 + sovSportApply(uint64(*m.VideoType))
	}
	if m.DataId != nil {
		n += 1 + sovSportApply(uint64(*m.DataId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESportVideoPageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MenuId != nil {
		n += 1 + sovSportApply(uint64(*m.MenuId))
	}
	if m.VideoType != nil {
		n += 1 + sovSportApply(uint64(*m.VideoType))
	}
	if m.TypeId != nil {
		n += 1 + sovSportApply(uint64(*m.TypeId))
	}
	if m.LabelId != nil {
		n += 1 + sovSportApply(uint64(*m.LabelId))
	}
	if m.Page != nil {
		n += 1 + sovSportApply(uint64(*m.Page))
	}
	if m.PageSize != nil {
		n += 1 + sovSportApply(uint64(*m.PageSize))
	}
	if m.OrderField != nil {
		l = len(*m.OrderField)
		n += 1 + l + sovSportApply(uint64(l))
	}
	if m.AscOrDesc != nil {
		l = len(*m.AscOrDesc)
		n += 1 + l + sovSportApply(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESportCommonResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != nil {
		n += 1 + sovSportApply(uint64(*m.Code))
	}
	if m.Msg != nil {
		l = len(*m.Msg)
		n += 1 + l + sovSportApply(uint64(l))
	}
	if m.DataId != nil {
		n += 1 + sovSportApply(uint64(*m.DataId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESportVideoResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != nil {
		n += 1 + sovSportApply(uint64(*m.Code))
	}
	if m.Msg != nil {
		l = len(*m.Msg)
		n += 1 + l + sovSportApply(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovSportApply(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESportRealTimeResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != nil {
		n += 1 + sovSportApply(uint64(*m.Code))
	}
	if m.Msg != nil {
		l = len(*m.Msg)
		n += 1 + l + sovSportApply(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovSportApply(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESportThumbsUpResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != nil {
		n += 1 + sovSportApply(uint64(*m.Code))
	}
	if m.Msg != nil {
		l = len(*m.Msg)
		n += 1 + l + sovSportApply(uint64(l))
	}
	if m.IsThumbsUp != nil {
		n += 1 + sovSportApply(uint64(*m.IsThumbsUp))
	}
	if m.ThumbsUpCount != nil {
		n += 1 + sovSportApply(uint64(*m.ThumbsUpCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESportMenuHomeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LabelList) > 0 {
		for _, e := range m.LabelList {
			l = e.Size()
			n += 1 + l + sovSportApply(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESportCarouselList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CarouselList) > 0 {
		for _, e := range m.CarouselList {
			l = e.Size()
			n += 1 + l + sovSportApply(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESportMyLiveRoomInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CoverImageUrl != nil {
		l = len(*m.CoverImageUrl)
		n += 1 + l + sovSportApply(uint64(l))
	}
	if m.AppLabelID != nil {
		n += 1 + sovSportApply(uint64(*m.AppLabelID))
	}
	if m.VideoUrl != nil {
		l = len(*m.VideoUrl)
		n += 1 + l + sovSportApply(uint64(l))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovSportApply(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovSportApply(uint64(*m.Status))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovSportApply(uint64(l))
	}
	if m.UniqueGameId != nil {
		n += 1 + sovSportApply(uint64(*m.UniqueGameId))
	}
	if m.UniqueGameName != nil {
		l = len(*m.UniqueGameName)
		n += 1 + l + sovSportApply(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESportLiveHomeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MyLiveInfo != nil {
		l = m.MyLiveInfo.Size()
		n += 1 + l + sovSportApply(uint64(l))
	}
	if len(m.LabelList) > 0 {
		for _, e := range m.LabelList {
			l = e.Size()
			n += 1 + l + sovSportApply(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESportCommentInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MenuId != nil {
		n += 1 + sovSportApply(uint64(*m.MenuId))
	}
	if m.ParentId != nil {
		n += 1 + sovSportApply(uint64(*m.ParentId))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovSportApply(uint64(l))
	}
	if m.ReplyPlayerId != nil {
		n += 1 + sovSportApply(uint64(*m.ReplyPlayerId))
	}
	if m.CommentId != nil {
		n += 1 + sovSportApply(uint64(*m.CommentId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESportDeleteCommentInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MenuId != nil {
		n += 1 + sovSportApply(uint64(*m.MenuId))
	}
	if m.ParentId != nil {
		n += 1 + sovSportApply(uint64(*m.ParentId))
	}
	if m.PCommentId != nil {
		n += 1 + sovSportApply(uint64(*m.PCommentId))
	}
	if m.CommentId != nil {
		n += 1 + sovSportApply(uint64(*m.CommentId))
	}
	if m.CommentType != nil {
		n += 1 + sovSportApply(uint64(*m.CommentType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESportCommentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MenuId != nil {
		n += 1 + sovSportApply(uint64(*m.MenuId))
	}
	if m.ParentId != nil {
		n += 1 + sovSportApply(uint64(*m.ParentId))
	}
	if m.CommentId != nil {
		n += 1 + sovSportApply(uint64(*m.CommentId))
	}
	if m.Page != nil {
		n += 1 + sovSportApply(uint64(*m.Page))
	}
	if m.PageSize != nil {
		n += 1 + sovSportApply(uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESportCommentListResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != nil {
		n += 1 + sovSportApply(uint64(*m.Total))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovSportApply(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESportCommentReplyListResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != nil {
		n += 1 + sovSportApply(uint64(*m.Total))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovSportApply(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESportRealtimeListResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != nil {
		n += 1 + sovSportApply(uint64(*m.Total))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovSportApply(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESPortsGameItemViewResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != nil {
		n += 1 + sovSportApply(uint64(*m.Total))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovSportApply(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESportLabelList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LabelList) > 0 {
		for _, e := range m.LabelList {
			l = e.Size()
			n += 1 + l + sovSportApply(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESportVideoListResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != nil {
		n += 1 + sovSportApply(uint64(*m.Total))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovSportApply(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESPortsSysMsgList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SysMsgList) > 0 {
		for _, e := range m.SysMsgList {
			l = e.Size()
			n += 1 + l + sovSportApply(uint64(l))
		}
	}
	if len(m.UnPayed) > 0 {
		for _, e := range m.UnPayed {
			l = e.Size()
			n += 1 + l + sovSportApply(uint64(l))
		}
	}
	if len(m.Payed) > 0 {
		for _, e := range m.Payed {
			l = e.Size()
			n += 1 + l + sovSportApply(uint64(l))
		}
	}
	if m.PlayerId != nil {
		n += 1 + sovSportApply(uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESPortsCoinViewResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != nil {
		n += 1 + sovSportApply(uint64(*m.Code))
	}
	if m.Msg != nil {
		l = len(*m.Msg)
		n += 1 + l + sovSportApply(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovSportApply(uint64(*m.Type))
	}
	if m.BannerUrl != nil {
		l = len(*m.BannerUrl)
		n += 1 + l + sovSportApply(uint64(l))
	}
	if len(m.ExChangeList) > 0 {
		for _, e := range m.ExChangeList {
			l = e.Size()
			n += 1 + l + sovSportApply(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExChangeObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ESportCoin != nil {
		n += 1 + sovSportApply(uint64(*m.ESportCoin))
	}
	if m.Coin != nil {
		n += 1 + sovSportApply(uint64(*m.Coin))
	}
	if m.DailyGive != nil {
		n += 1 + sovSportApply(uint64(*m.DailyGive))
	}
	if m.FirstGive != nil {
		n += 1 + sovSportApply(uint64(*m.FirstGive))
	}
	if len(m.Rate) > 0 {
		for _, e := range m.Rate {
			l = e.Size()
			n += 1 + l + sovSportApply(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESPortsCoinExChangeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovSportApply(uint64(*m.Type))
	}
	if m.ExChangeObject != nil {
		l = m.ExChangeObject.Size()
		n += 1 + l + sovSportApply(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESPortsCoinExChangeResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != nil {
		n += 1 + sovSportApply(uint64(*m.Code))
	}
	if m.Msg != nil {
		l = len(*m.Msg)
		n += 1 + l + sovSportApply(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovSportApply(uint64(*m.Type))
	}
	if m.BannerUrl != nil {
		l = len(*m.BannerUrl)
		n += 1 + l + sovSportApply(uint64(l))
	}
	if len(m.ExChangeList) > 0 {
		for _, e := range m.ExChangeList {
			l = e.Size()
			n += 1 + l + sovSportApply(uint64(l))
		}
	}
	if m.GiveTotalCoins != nil {
		n += 1 + sovSportApply(uint64(*m.GiveTotalCoins))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESPortsCoinExChangeRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		n += 1 + sovSportApply(uint64(*m.Page))
	}
	if m.PageSize != nil {
		n += 1 + sovSportApply(uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESPortsCoinExChangeRecordResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != nil {
		n += 1 + sovSportApply(uint64(*m.Code))
	}
	if m.Msg != nil {
		l = len(*m.Msg)
		n += 1 + l + sovSportApply(uint64(l))
	}
	if m.Total != nil {
		n += 1 + sovSportApply(uint64(*m.Total))
	}
	if len(m.ExChangeRecordList) > 0 {
		for _, e := range m.ExChangeRecordList {
			l = e.Size()
			n += 1 + l + sovSportApply(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExChangeRecordObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangeESportCoin != nil {
		n += 1 + sovSportApply(uint64(*m.ChangeESportCoin))
	}
	if m.CreateTime != nil {
		n += 1 + sovSportApply(uint64(*m.CreateTime))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovSportApply(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RpcESPortsApiOriginResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != nil {
		n += 1 + sovSportApply(uint64(*m.Code))
	}
	if m.Msg != nil {
		l = len(*m.Msg)
		n += 1 + l + sovSportApply(uint64(l))
	}
	if m.ApiOrigin != nil {
		n += 1 + sovSportApply(uint64(*m.ApiOrigin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSportApply(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSportApply(x uint64) (n int) {
	return sovSportApply(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ESportGameViewPageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportGameViewPageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportGameViewPageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueGameId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniqueGameId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESportDataStatusInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportDataStatusInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportDataStatusInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MenuId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MenuId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESportPageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportPageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportPageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MenuId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MenuId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TypeId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OrderField = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AscOrDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AscOrDesc = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LabelId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESPortsBpsDurationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESPortsBpsDurationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESPortsBpsDurationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NavigationId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NavigationId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MenuId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MenuId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LabelId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExTabId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExTabId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageType = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opt", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Opt = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESPortsBpsDurationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESPortsBpsDurationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESPortsBpsDurationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ESPortsBpsDurationData{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESPortsBpsClickRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESPortsBpsClickRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESPortsBpsClickRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NavigationId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NavigationId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MenuId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MenuId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LabelId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExTabId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExTabId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ButtonId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageType = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESPortsBpsClickRequestEx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESPortsBpsClickRequestEx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESPortsBpsClickRequestEx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientClickTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClientClickTime = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BpsData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BpsData == nil {
				m.BpsData = &ESPortsBpsClickRequest{}
			}
			if err := m.BpsData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESPortsBpsClickListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESPortsBpsClickListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESPortsBpsClickListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClientTime = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BpsDataList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BpsDataList = append(m.BpsDataList, &ESPortsBpsClickRequestEx{})
			if err := m.BpsDataList[len(m.BpsDataList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESportInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MenuId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MenuId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameTypeId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GameTypeId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExtId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESportVideoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportVideoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportVideoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MenuId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MenuId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoType", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VideoType = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESportVideoPageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportVideoPageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportVideoPageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MenuId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MenuId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VideoType = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TypeId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LabelId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OrderField = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AscOrDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AscOrDesc = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESportCommonResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportCommonResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportCommonResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Code = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Msg = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESportVideoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportVideoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportVideoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Code = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Msg = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &share_message.TableESPortsVideoInfo{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESportRealTimeResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportRealTimeResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportRealTimeResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Code = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Msg = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &share_message.TableESPortsRealTimeInfo{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESportThumbsUpResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportThumbsUpResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportThumbsUpResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Code = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Msg = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsThumbsUp", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsThumbsUp = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbsUpCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThumbsUpCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESportMenuHomeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportMenuHomeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportMenuHomeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelList = append(m.LabelList, &share_message.TableESPortsLabel{})
			if err := m.LabelList[len(m.LabelList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESportCarouselList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportCarouselList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportCarouselList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarouselList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CarouselList = append(m.CarouselList, &share_message.TableESPortsCarousel{})
			if err := m.CarouselList[len(m.CarouselList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESportMyLiveRoomInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportMyLiveRoomInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportMyLiveRoomInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CoverImageUrl = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppLabelID = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VideoUrl = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueGameId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniqueGameId = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueGameName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UniqueGameName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESportLiveHomeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportLiveHomeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportLiveHomeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyLiveInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MyLiveInfo == nil {
				m.MyLiveInfo = &share_message.TableESPortsVideoInfo{}
			}
			if err := m.MyLiveInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelList = append(m.LabelList, &share_message.TableESPortsLabel{})
			if err := m.LabelList[len(m.LabelList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESportCommentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportCommentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportCommentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MenuId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MenuId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ParentId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyPlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReplyPlayerId = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommentId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESportDeleteCommentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportDeleteCommentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportDeleteCommentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MenuId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MenuId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ParentId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PCommentId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PCommentId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommentId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommentType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESportCommentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportCommentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportCommentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MenuId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MenuId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ParentId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommentId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESportCommentListResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportCommentListResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportCommentListResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Total = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.TableESportComment{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESportCommentReplyListResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportCommentReplyListResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportCommentReplyListResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Total = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.TableESportComment{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESportRealtimeListResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportRealtimeListResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportRealtimeListResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Total = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.TableESPortsRealTimeInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESPortsGameItemViewResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESPortsGameItemViewResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESPortsGameItemViewResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Total = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.ESPortsGameItemView{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESportLabelList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportLabelList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportLabelList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelList = append(m.LabelList, &share_message.TableESPortsLabel{})
			if err := m.LabelList[len(m.LabelList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESportVideoListResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportVideoListResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportVideoListResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Total = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.TableESPortsVideoInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESPortsSysMsgList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESPortsSysMsgList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESPortsSysMsgList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SysMsgList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SysMsgList = append(m.SysMsgList, &share_message.TableESPortsSysMsg{})
			if err := m.SysMsgList[len(m.SysMsgList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnPayed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnPayed = append(m.UnPayed, &share_message.TableESPortsGameOrderSysMsg{})
			if err := m.UnPayed[len(m.UnPayed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payed = append(m.Payed, &share_message.TableESPortsGameOrderSysMsg{})
			if err := m.Payed[len(m.Payed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESPortsCoinViewResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESPortsCoinViewResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESPortsCoinViewResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Code = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Msg = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannerUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BannerUrl = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExChangeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExChangeList = append(m.ExChangeList, &ExChangeObject{})
			if err := m.ExChangeList[len(m.ExChangeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExChangeObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExChangeObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExChangeObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ESportCoin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ESportCoin = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Coin = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyGive", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DailyGive = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstGive", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstGive = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rate = append(m.Rate, &share_message.ExchangeRate{})
			if err := m.Rate[len(m.Rate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESPortsCoinExChangeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESPortsCoinExChangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESPortsCoinExChangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExChangeObject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExChangeObject == nil {
				m.ExChangeObject = &ExChangeObject{}
			}
			if err := m.ExChangeObject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESPortsCoinExChangeResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESPortsCoinExChangeResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESPortsCoinExChangeResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Code = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Msg = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannerUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BannerUrl = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExChangeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExChangeList = append(m.ExChangeList, &ExChangeObject{})
			if err := m.ExChangeList[len(m.ExChangeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveTotalCoins", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GiveTotalCoins = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESPortsCoinExChangeRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESPortsCoinExChangeRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESPortsCoinExChangeRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESPortsCoinExChangeRecordResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESPortsCoinExChangeRecordResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESPortsCoinExChangeRecordResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Code = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Msg = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Total = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExChangeRecordList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExChangeRecordList = append(m.ExChangeRecordList, &ExChangeRecordObject{})
			if err := m.ExChangeRecordList[len(m.ExChangeRecordList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExChangeRecordObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExChangeRecordObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExChangeRecordObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeESportCoin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangeESportCoin = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcESPortsApiOriginResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RpcESPortsApiOriginResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RpcESPortsApiOriginResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Code = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Msg = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiOrigin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ApiOrigin = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSportApply(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSportApply
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSportApply
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSportApply
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSportApply
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSportApply
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSportApply(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSportApply
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSportApply = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSportApply   = fmt.Errorf("proto: integer overflow")
)
