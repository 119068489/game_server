// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: coin_shop.proto

package client_hall

import (
	fmt "fmt"
	share_message "game_server/pb/share_message"
	proto "github.com/akqp2019/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PropsItemList struct {
	Items                []*share_message.PropsItem `protobuf:"bytes,1,rep,name=Items" json:"Items,omitempty" bson:"Items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-" bson:"-"`
	XXX_unrecognized     []byte                     `json:"-" bson:"-"`
	XXX_sizecache        int32                      `json:"-" bson:"-"`
}

func (m *PropsItemList) Reset()         { *m = PropsItemList{} }
func (m *PropsItemList) String() string { return proto.CompactTextString(m) }
func (*PropsItemList) ProtoMessage()    {}
func (*PropsItemList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0f9f78342300d8d, []int{0}
}
func (m *PropsItemList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PropsItemList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PropsItemList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PropsItemList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PropsItemList.Merge(m, src)
}
func (m *PropsItemList) XXX_Size() int {
	return m.Size()
}
func (m *PropsItemList) XXX_DiscardUnknown() {
	xxx_messageInfo_PropsItemList.DiscardUnknown(m)
}

var xxx_messageInfo_PropsItemList proto.InternalMessageInfo

func (m *PropsItemList) GetItems() []*share_message.PropsItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type CoinRechargeList struct {
	Way                  *int32                        `protobuf:"varint,1,opt,name=way" json:"way,omitempty" bson:"way,omitempty"`
	Items                []*share_message.CoinRecharge `protobuf:"bytes,2,rep,name=Items" json:"Items,omitempty" bson:"Items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-" bson:"-"`
	XXX_unrecognized     []byte                        `json:"-" bson:"-"`
	XXX_sizecache        int32                         `json:"-" bson:"-"`
}

func (m *CoinRechargeList) Reset()         { *m = CoinRechargeList{} }
func (m *CoinRechargeList) String() string { return proto.CompactTextString(m) }
func (*CoinRechargeList) ProtoMessage()    {}
func (*CoinRechargeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0f9f78342300d8d, []int{1}
}
func (m *CoinRechargeList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinRechargeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinRechargeList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinRechargeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinRechargeList.Merge(m, src)
}
func (m *CoinRechargeList) XXX_Size() int {
	return m.Size()
}
func (m *CoinRechargeList) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinRechargeList.DiscardUnknown(m)
}

var xxx_messageInfo_CoinRechargeList proto.InternalMessageInfo

func (m *CoinRechargeList) GetWay() int32 {
	if m != nil && m.Way != nil {
		return *m.Way
	}
	return 0
}

func (m *CoinRechargeList) GetItems() []*share_message.CoinRecharge {
	if m != nil {
		return m.Items
	}
	return nil
}

type CoinShopList struct {
	Type                 *int32                       `protobuf:"varint,1,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	Items                []*share_message.CoinProduct `protobuf:"bytes,2,rep,name=Items" json:"Items,omitempty" bson:"Items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-" bson:"-"`
	XXX_unrecognized     []byte                       `json:"-" bson:"-"`
	XXX_sizecache        int32                        `json:"-" bson:"-"`
}

func (m *CoinShopList) Reset()         { *m = CoinShopList{} }
func (m *CoinShopList) String() string { return proto.CompactTextString(m) }
func (*CoinShopList) ProtoMessage()    {}
func (*CoinShopList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0f9f78342300d8d, []int{2}
}
func (m *CoinShopList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinShopList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinShopList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinShopList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinShopList.Merge(m, src)
}
func (m *CoinShopList) XXX_Size() int {
	return m.Size()
}
func (m *CoinShopList) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinShopList.DiscardUnknown(m)
}

var xxx_messageInfo_CoinShopList proto.InternalMessageInfo

func (m *CoinShopList) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CoinShopList) GetItems() []*share_message.CoinProduct {
	if m != nil {
		return m.Items
	}
	return nil
}

type CoinRechargeReq struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	PassWord             *string  `protobuf:"bytes,2,opt,name=PassWord" json:"PassWord,omitempty" bson:"PassWord,omitempty"`
	IsCheck              *bool    `protobuf:"varint,3,opt,name=IsCheck" json:"IsCheck,omitempty" bson:"IsCheck,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *CoinRechargeReq) Reset()         { *m = CoinRechargeReq{} }
func (m *CoinRechargeReq) String() string { return proto.CompactTextString(m) }
func (*CoinRechargeReq) ProtoMessage()    {}
func (*CoinRechargeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0f9f78342300d8d, []int{3}
}
func (m *CoinRechargeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinRechargeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinRechargeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinRechargeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinRechargeReq.Merge(m, src)
}
func (m *CoinRechargeReq) XXX_Size() int {
	return m.Size()
}
func (m *CoinRechargeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinRechargeReq.DiscardUnknown(m)
}

var xxx_messageInfo_CoinRechargeReq proto.InternalMessageInfo

func (m *CoinRechargeReq) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CoinRechargeReq) GetPassWord() string {
	if m != nil && m.PassWord != nil {
		return *m.PassWord
	}
	return ""
}

func (m *CoinRechargeReq) GetIsCheck() bool {
	if m != nil && m.IsCheck != nil {
		return *m.IsCheck
	}
	return false
}

type CoinRechargeResp struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	Result               *int32   `protobuf:"varint,2,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *CoinRechargeResp) Reset()         { *m = CoinRechargeResp{} }
func (m *CoinRechargeResp) String() string { return proto.CompactTextString(m) }
func (*CoinRechargeResp) ProtoMessage()    {}
func (*CoinRechargeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0f9f78342300d8d, []int{4}
}
func (m *CoinRechargeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinRechargeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinRechargeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinRechargeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinRechargeResp.Merge(m, src)
}
func (m *CoinRechargeResp) XXX_Size() int {
	return m.Size()
}
func (m *CoinRechargeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinRechargeResp.DiscardUnknown(m)
}

var xxx_messageInfo_CoinRechargeResp proto.InternalMessageInfo

func (m *CoinRechargeResp) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CoinRechargeResp) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

type BuyCoinItem struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	Num                  *int32   `protobuf:"varint,2,opt,name=Num" json:"Num,omitempty" bson:"Num,omitempty"`
	Way                  *int32   `protobuf:"varint,3,opt,name=Way" json:"Way,omitempty" bson:"Way,omitempty"`
	Result               *int32   `protobuf:"varint,4,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	IsBuy                *bool    `protobuf:"varint,5,opt,name=IsBuy" json:"IsBuy,omitempty" bson:"IsBuy,omitempty"`
	Reason               *string  `protobuf:"bytes,6,opt,name=Reason" json:"Reason,omitempty" bson:"Reason,omitempty"`
	PassWord             *string  `protobuf:"bytes,7,opt,name=PassWord" json:"PassWord,omitempty" bson:"PassWord,omitempty"`
	IsCheck              *bool    `protobuf:"varint,8,opt,name=IsCheck" json:"IsCheck,omitempty" bson:"IsCheck,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *BuyCoinItem) Reset()         { *m = BuyCoinItem{} }
func (m *BuyCoinItem) String() string { return proto.CompactTextString(m) }
func (*BuyCoinItem) ProtoMessage()    {}
func (*BuyCoinItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0f9f78342300d8d, []int{5}
}
func (m *BuyCoinItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuyCoinItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuyCoinItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuyCoinItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuyCoinItem.Merge(m, src)
}
func (m *BuyCoinItem) XXX_Size() int {
	return m.Size()
}
func (m *BuyCoinItem) XXX_DiscardUnknown() {
	xxx_messageInfo_BuyCoinItem.DiscardUnknown(m)
}

var xxx_messageInfo_BuyCoinItem proto.InternalMessageInfo

func (m *BuyCoinItem) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BuyCoinItem) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

func (m *BuyCoinItem) GetWay() int32 {
	if m != nil && m.Way != nil {
		return *m.Way
	}
	return 0
}

func (m *BuyCoinItem) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *BuyCoinItem) GetIsBuy() bool {
	if m != nil && m.IsBuy != nil {
		return *m.IsBuy
	}
	return false
}

func (m *BuyCoinItem) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

func (m *BuyCoinItem) GetPassWord() string {
	if m != nil && m.PassWord != nil {
		return *m.PassWord
	}
	return ""
}

func (m *BuyCoinItem) GetIsCheck() bool {
	if m != nil && m.IsCheck != nil {
		return *m.IsCheck
	}
	return false
}

type UseCoinItem struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	Way                  *int32   `protobuf:"varint,2,opt,name=Way" json:"Way,omitempty" bson:"Way,omitempty"`
	Result               *int32   `protobuf:"varint,3,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *UseCoinItem) Reset()         { *m = UseCoinItem{} }
func (m *UseCoinItem) String() string { return proto.CompactTextString(m) }
func (*UseCoinItem) ProtoMessage()    {}
func (*UseCoinItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0f9f78342300d8d, []int{6}
}
func (m *UseCoinItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UseCoinItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UseCoinItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UseCoinItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UseCoinItem.Merge(m, src)
}
func (m *UseCoinItem) XXX_Size() int {
	return m.Size()
}
func (m *UseCoinItem) XXX_DiscardUnknown() {
	xxx_messageInfo_UseCoinItem.DiscardUnknown(m)
}

var xxx_messageInfo_UseCoinItem proto.InternalMessageInfo

func (m *UseCoinItem) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *UseCoinItem) GetWay() int32 {
	if m != nil && m.Way != nil {
		return *m.Way
	}
	return 0
}

func (m *UseCoinItem) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

//装备属性,返回前端用
type Equipment struct {
	BagId                *int64   `protobuf:"varint,1,opt,name=BagId" json:"BagId,omitempty" bson:"BagId,omitempty"`
	PropsId              *int64   `protobuf:"varint,2,opt,name=PropsId" json:"PropsId,omitempty" bson:"PropsId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *Equipment) Reset()         { *m = Equipment{} }
func (m *Equipment) String() string { return proto.CompactTextString(m) }
func (*Equipment) ProtoMessage()    {}
func (*Equipment) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0f9f78342300d8d, []int{7}
}
func (m *Equipment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Equipment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Equipment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Equipment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Equipment.Merge(m, src)
}
func (m *Equipment) XXX_Size() int {
	return m.Size()
}
func (m *Equipment) XXX_DiscardUnknown() {
	xxx_messageInfo_Equipment.DiscardUnknown(m)
}

var xxx_messageInfo_Equipment proto.InternalMessageInfo

func (m *Equipment) GetBagId() int64 {
	if m != nil && m.BagId != nil {
		return *m.BagId
	}
	return 0
}

func (m *Equipment) GetPropsId() int64 {
	if m != nil && m.PropsId != nil {
		return *m.PropsId
	}
	return 0
}

type EquipmentReq struct {
	Id                   *int64     `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	GJ                   *Equipment `protobuf:"bytes,2,opt,name=GJ" json:"GJ,omitempty" bson:"GJ,omitempty"`
	QP                   *Equipment `protobuf:"bytes,3,opt,name=QP" json:"QP,omitempty" bson:"QP,omitempty"`
	MP                   *Equipment `protobuf:"bytes,4,opt,name=MP" json:"MP,omitempty" bson:"MP,omitempty"`
	QTX                  *Equipment `protobuf:"bytes,5,opt,name=QTX" json:"QTX,omitempty" bson:"QTX,omitempty"`
	MZBS                 *Equipment `protobuf:"bytes,6,opt,name=MZBS" json:"MZBS,omitempty" bson:"MZBS,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-" bson:"-"`
	XXX_unrecognized     []byte     `json:"-" bson:"-"`
	XXX_sizecache        int32      `json:"-" bson:"-"`
}

func (m *EquipmentReq) Reset()         { *m = EquipmentReq{} }
func (m *EquipmentReq) String() string { return proto.CompactTextString(m) }
func (*EquipmentReq) ProtoMessage()    {}
func (*EquipmentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0f9f78342300d8d, []int{8}
}
func (m *EquipmentReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EquipmentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EquipmentReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EquipmentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquipmentReq.Merge(m, src)
}
func (m *EquipmentReq) XXX_Size() int {
	return m.Size()
}
func (m *EquipmentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EquipmentReq.DiscardUnknown(m)
}

var xxx_messageInfo_EquipmentReq proto.InternalMessageInfo

func (m *EquipmentReq) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *EquipmentReq) GetGJ() *Equipment {
	if m != nil {
		return m.GJ
	}
	return nil
}

func (m *EquipmentReq) GetQP() *Equipment {
	if m != nil {
		return m.QP
	}
	return nil
}

func (m *EquipmentReq) GetMP() *Equipment {
	if m != nil {
		return m.MP
	}
	return nil
}

func (m *EquipmentReq) GetQTX() *Equipment {
	if m != nil {
		return m.QTX
	}
	return nil
}

func (m *EquipmentReq) GetMZBS() *Equipment {
	if m != nil {
		return m.MZBS
	}
	return nil
}

type BagItems struct {
	Type                 *int32                         `protobuf:"varint,1,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	Items                []*share_message.PlayerBagItem `protobuf:"bytes,2,rep,name=items" json:"items,omitempty" bson:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-" bson:"-"`
	XXX_unrecognized     []byte                         `json:"-" bson:"-"`
	XXX_sizecache        int32                          `json:"-" bson:"-"`
}

func (m *BagItems) Reset()         { *m = BagItems{} }
func (m *BagItems) String() string { return proto.CompactTextString(m) }
func (*BagItems) ProtoMessage()    {}
func (*BagItems) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0f9f78342300d8d, []int{9}
}
func (m *BagItems) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BagItems) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BagItems.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BagItems) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BagItems.Merge(m, src)
}
func (m *BagItems) XXX_Size() int {
	return m.Size()
}
func (m *BagItems) XXX_DiscardUnknown() {
	xxx_messageInfo_BagItems.DiscardUnknown(m)
}

var xxx_messageInfo_BagItems proto.InternalMessageInfo

func (m *BagItems) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *BagItems) GetItems() []*share_message.PlayerBagItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type NewBagItemsTip struct {
	Types                []int32  `protobuf:"varint,1,rep,name=Types" json:"Types,omitempty" bson:"Types,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *NewBagItemsTip) Reset()         { *m = NewBagItemsTip{} }
func (m *NewBagItemsTip) String() string { return proto.CompactTextString(m) }
func (*NewBagItemsTip) ProtoMessage()    {}
func (*NewBagItemsTip) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0f9f78342300d8d, []int{10}
}
func (m *NewBagItemsTip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBagItemsTip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBagItemsTip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBagItemsTip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBagItemsTip.Merge(m, src)
}
func (m *NewBagItemsTip) XXX_Size() int {
	return m.Size()
}
func (m *NewBagItemsTip) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBagItemsTip.DiscardUnknown(m)
}

var xxx_messageInfo_NewBagItemsTip proto.InternalMessageInfo

func (m *NewBagItemsTip) GetTypes() []int32 {
	if m != nil {
		return m.Types
	}
	return nil
}

// 用户充值活动请求
type RechargeActReq struct {
	ActCfgId *int64                      `protobuf:"varint,1,opt,name=ActCfgId" json:"ActCfgId,omitempty" bson:"ActCfgId,omitempty"`
	GiveType *int32                      `protobuf:"varint,2,opt,name=GiveType" json:"GiveType,omitempty" bson:"GiveType,omitempty"`
	PassWord *string                     `protobuf:"bytes,3,opt,name=PassWord" json:"PassWord,omitempty" bson:"PassWord,omitempty"`
	PayWay   *int32                      `protobuf:"varint,4,opt,name=PayWay" json:"PayWay,omitempty" bson:"PayWay,omitempty"`
	PayInfo  *share_message.PayOrderInfo `protobuf:"bytes,5,opt,name=PayInfo" json:"PayInfo,omitempty" bson:"PayInfo,omitempty"`
	//以下参数无需传递
	OrderId              *string  `protobuf:"bytes,20,opt,name=OrderId" json:"OrderId,omitempty" bson:"OrderId,omitempty"`
	BankCard             *string  `protobuf:"bytes,21,opt,name=BankCard" json:"BankCard,omitempty" bson:"BankCard,omitempty"`
	OrderAmount          *int64   `protobuf:"varint,22,opt,name=OrderAmount" json:"OrderAmount,omitempty" bson:"OrderAmount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RechargeActReq) Reset()         { *m = RechargeActReq{} }
func (m *RechargeActReq) String() string { return proto.CompactTextString(m) }
func (*RechargeActReq) ProtoMessage()    {}
func (*RechargeActReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0f9f78342300d8d, []int{11}
}
func (m *RechargeActReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RechargeActReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RechargeActReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RechargeActReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RechargeActReq.Merge(m, src)
}
func (m *RechargeActReq) XXX_Size() int {
	return m.Size()
}
func (m *RechargeActReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RechargeActReq.DiscardUnknown(m)
}

var xxx_messageInfo_RechargeActReq proto.InternalMessageInfo

func (m *RechargeActReq) GetActCfgId() int64 {
	if m != nil && m.ActCfgId != nil {
		return *m.ActCfgId
	}
	return 0
}

func (m *RechargeActReq) GetGiveType() int32 {
	if m != nil && m.GiveType != nil {
		return *m.GiveType
	}
	return 0
}

func (m *RechargeActReq) GetPassWord() string {
	if m != nil && m.PassWord != nil {
		return *m.PassWord
	}
	return ""
}

func (m *RechargeActReq) GetPayWay() int32 {
	if m != nil && m.PayWay != nil {
		return *m.PayWay
	}
	return 0
}

func (m *RechargeActReq) GetPayInfo() *share_message.PayOrderInfo {
	if m != nil {
		return m.PayInfo
	}
	return nil
}

func (m *RechargeActReq) GetOrderId() string {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return ""
}

func (m *RechargeActReq) GetBankCard() string {
	if m != nil && m.BankCard != nil {
		return *m.BankCard
	}
	return ""
}

func (m *RechargeActReq) GetOrderAmount() int64 {
	if m != nil && m.OrderAmount != nil {
		return *m.OrderAmount
	}
	return 0
}

func init() {
	proto.RegisterType((*PropsItemList)(nil), "client_hall.PropsItemList")
	proto.RegisterType((*CoinRechargeList)(nil), "client_hall.CoinRechargeList")
	proto.RegisterType((*CoinShopList)(nil), "client_hall.CoinShopList")
	proto.RegisterType((*CoinRechargeReq)(nil), "client_hall.CoinRechargeReq")
	proto.RegisterType((*CoinRechargeResp)(nil), "client_hall.CoinRechargeResp")
	proto.RegisterType((*BuyCoinItem)(nil), "client_hall.BuyCoinItem")
	proto.RegisterType((*UseCoinItem)(nil), "client_hall.UseCoinItem")
	proto.RegisterType((*Equipment)(nil), "client_hall.Equipment")
	proto.RegisterType((*EquipmentReq)(nil), "client_hall.EquipmentReq")
	proto.RegisterType((*BagItems)(nil), "client_hall.BagItems")
	proto.RegisterType((*NewBagItemsTip)(nil), "client_hall.NewBagItemsTip")
	proto.RegisterType((*RechargeActReq)(nil), "client_hall.RechargeActReq")
}

func init() { proto.RegisterFile("coin_shop.proto", fileDescriptor_b0f9f78342300d8d) }

var fileDescriptor_b0f9f78342300d8d = []byte{
	// 852 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xe1, 0x6e, 0xe3, 0x44,
	0x10, 0x96, 0xe3, 0xba, 0xcd, 0x8d, 0xd3, 0x24, 0x6c, 0xaf, 0x95, 0xcf, 0x77, 0x94, 0xc8, 0x20,
	0x11, 0x38, 0x94, 0x4a, 0xf9, 0x81, 0x40, 0x80, 0xb8, 0x24, 0xad, 0x42, 0x0e, 0x12, 0x7c, 0xbe,
	0xc2, 0x21, 0xfe, 0x44, 0x7b, 0xce, 0x36, 0xb1, 0xce, 0xb1, 0x5d, 0xef, 0xfa, 0x4e, 0x7e, 0x00,
	0x5e, 0x80, 0xb7, 0x41, 0xe2, 0x01, 0xf8, 0x09, 0x6f, 0x80, 0xfa, 0x24, 0x68, 0xd7, 0x4e, 0xea,
	0xf5, 0xd5, 0x01, 0xfe, 0xd9, 0x3b, 0x33, 0xdf, 0xcc, 0x7c, 0xf3, 0xcd, 0x40, 0xcb, 0x0d, 0xbd,
	0x60, 0x4e, 0x57, 0x61, 0xd4, 0x8b, 0xe2, 0x90, 0x85, 0x48, 0x77, 0x7d, 0x8f, 0x04, 0x6c, 0xbe,
	0xc2, 0xbe, 0x6f, 0xc2, 0x4b, 0x4c, 0x49, 0x66, 0x30, 0xfb, 0x4b, 0xbc, 0x26, 0x73, 0x4a, 0xe2,
	0xd7, 0x24, 0x3e, 0x13, 0x4f, 0x67, 0x74, 0x85, 0x63, 0x32, 0x5f, 0x13, 0x4a, 0xf1, 0x92, 0x9c,
	0x31, 0xfc, 0xd2, 0x27, 0x73, 0xca, 0xe2, 0xc4, 0x65, 0x79, 0xcc, 0x97, 0xff, 0x27, 0x66, 0x5e,
	0x2a, 0xc5, 0xfa, 0x0c, 0x0e, 0xed, 0x38, 0x8c, 0xe8, 0x84, 0x91, 0xf5, 0x77, 0x1e, 0x65, 0xe8,
	0x43, 0xd0, 0xf8, 0x37, 0x35, 0x94, 0x8e, 0xda, 0xd5, 0xfb, 0x46, 0x4f, 0x02, 0xeb, 0x6d, 0x9d,
	0xad, 0x6f, 0xa1, 0x3d, 0x0a, 0xbd, 0xc0, 0x21, 0xee, 0x0a, 0xc7, 0x4b, 0x22, 0x82, 0x75, 0x50,
	0xdf, 0xe0, 0xd4, 0x50, 0x3a, 0x4a, 0x57, 0x43, 0x1f, 0x6f, 0x90, 0x6a, 0x02, 0xe9, 0x61, 0x09,
	0xa9, 0x18, 0x6c, 0x8d, 0xa1, 0xc1, 0xff, 0x9f, 0xaf, 0xc2, 0x48, 0x00, 0x35, 0x60, 0xef, 0x32,
	0x8d, 0x48, 0x8e, 0xf4, 0x91, 0x8c, 0x64, 0xde, 0x81, 0x64, 0xc7, 0xe1, 0x22, 0x71, 0x99, 0xf5,
	0x04, 0x5a, 0x45, 0x60, 0x87, 0x5c, 0x23, 0x80, 0xda, 0x64, 0x21, 0x90, 0x54, 0xd4, 0x86, 0xba,
	0x8d, 0x29, 0x7d, 0x11, 0xc6, 0x0b, 0xa3, 0xd6, 0x51, 0xba, 0xf7, 0x50, 0x0b, 0x0e, 0x26, 0x74,
	0xb4, 0x22, 0xee, 0x2b, 0x43, 0xed, 0x28, 0xdd, 0xba, 0xd5, 0x93, 0xfb, 0x72, 0x08, 0x8d, 0x24,
	0x88, 0x26, 0xec, 0x3b, 0x84, 0x26, 0x3e, 0x13, 0x00, 0x9a, 0xf5, 0x8b, 0x02, 0xfa, 0x30, 0x49,
	0x79, 0x0c, 0x2f, 0x52, 0xf2, 0xd5, 0x41, 0x9d, 0x25, 0xeb, 0xcc, 0x91, 0xff, 0xbc, 0xc0, 0xa9,
	0xc8, 0xa2, 0x15, 0x50, 0xf6, 0xc4, 0xff, 0x21, 0x68, 0x13, 0x3a, 0x4c, 0x52, 0x43, 0xe3, 0x45,
	0x64, 0x66, 0x4c, 0xc3, 0xc0, 0xd8, 0x17, 0x55, 0x16, 0xeb, 0x3e, 0x28, 0xd7, 0x5d, 0x17, 0x75,
	0x7f, 0x0a, 0xfa, 0x0f, 0x94, 0x54, 0x95, 0xc1, 0x33, 0xd7, 0x4a, 0x99, 0x45, 0x25, 0xd6, 0x63,
	0xb8, 0x77, 0x71, 0x9d, 0x78, 0xd1, 0x9a, 0x04, 0x8c, 0x97, 0x31, 0xc4, 0xcb, 0x6d, 0x60, 0x0b,
	0x0e, 0xb2, 0x81, 0x67, 0x6c, 0xa9, 0xd6, 0x5f, 0x0a, 0x34, 0xb6, 0xde, 0x65, 0x72, 0x2d, 0xa8,
	0x8d, 0x9f, 0x0a, 0x47, 0xbd, 0x7f, 0xd2, 0x2b, 0x68, 0xbc, 0x77, 0x9b, 0xc0, 0x82, 0xda, 0x33,
	0x5b, 0x64, 0xde, 0xe9, 0x33, 0xb5, 0x05, 0x2f, 0xd5, 0x3e, 0xef, 0x83, 0xfa, 0xec, 0xf2, 0x27,
	0xc1, 0x56, 0xb5, 0xd3, 0x07, 0xb0, 0x37, 0xfd, 0x79, 0xf8, 0x5c, 0x70, 0x58, 0xe9, 0x65, 0x5d,
	0x40, 0x9d, 0xf7, 0xcc, 0x05, 0x56, 0xd2, 0xdd, 0x63, 0xd0, 0xbc, 0x82, 0xee, 0x1e, 0x95, 0x77,
	0xc1, 0xc7, 0x29, 0x89, 0xf3, 0x58, 0xeb, 0x3d, 0x68, 0xce, 0xc8, 0x9b, 0x0d, 0xd2, 0xa5, 0x17,
	0x71, 0x32, 0x39, 0x58, 0xb6, 0x4a, 0x9a, 0xf5, 0xbb, 0x02, 0xcd, 0x8d, 0xaa, 0x06, 0xae, 0x60,
	0xaf, 0x0d, 0xf5, 0x81, 0xcb, 0x46, 0x57, 0xcb, 0xa2, 0x40, 0xc7, 0xde, 0x6b, 0x22, 0x8a, 0xc8,
	0xe6, 0x55, 0x1c, 0xbd, 0x2a, 0x46, 0xdf, 0x84, 0x7d, 0x1b, 0xa7, 0x7c, 0xa2, 0x99, 0x76, 0x3e,
	0x81, 0x03, 0x1b, 0xa7, 0x93, 0xe0, 0x2a, 0xcc, 0xf9, 0x28, 0xaf, 0x9a, 0x8d, 0xd3, 0xef, 0xe3,
	0x05, 0x89, 0xb9, 0x0b, 0x9f, 0x69, 0xf6, 0xb3, 0x30, 0xee, 0x6f, 0xb4, 0x35, 0xc4, 0xc1, 0xab,
	0x11, 0x8e, 0x17, 0xc6, 0xb1, 0x78, 0x39, 0x02, 0x5d, 0xb8, 0x0c, 0xd6, 0x61, 0x12, 0x30, 0xe3,
	0x84, 0x57, 0xd6, 0xff, 0x4d, 0x83, 0xa3, 0xcd, 0x8e, 0x8e, 0x04, 0x91, 0xfd, 0x6f, 0xb0, 0xef,
	0xa3, 0x2f, 0xa0, 0xed, 0x44, 0xee, 0x98, 0xb0, 0xed, 0x69, 0xa0, 0x48, 0xef, 0x89, 0xa3, 0x76,
	0xb1, 0x8e, 0x58, 0x6a, 0x9a, 0x12, 0xef, 0xf2, 0xb5, 0xf9, 0x11, 0x4e, 0xb2, 0xe0, 0xb7, 0x4e,
	0xc9, 0xbb, 0x52, 0x54, 0xd9, 0x6c, 0xee, 0x36, 0xa3, 0xa7, 0x80, 0x6e, 0x71, 0xb7, 0x57, 0xe5,
	0xc1, 0x5b, 0x41, 0x1b, 0x93, 0x59, 0x6d, 0x42, 0x33, 0x68, 0x39, 0x91, 0x5b, 0x4c, 0x81, 0x1e,
	0x55, 0x66, 0x77, 0xc8, 0xf5, 0x8e, 0xda, 0xc4, 0x31, 0x39, 0x87, 0xa6, 0x13, 0xb9, 0xc5, 0x93,
	0x61, 0x48, 0x01, 0x05, 0x8b, 0x59, 0x69, 0xc9, 0x51, 0x8a, 0x1b, 0x2f, 0xfb, 0x16, 0x2c, 0x66,
	0xa5, 0x05, 0x4d, 0xe1, 0x38, 0x1f, 0x9e, 0xd0, 0xf2, 0xed, 0xea, 0x3c, 0xb8, 0x7b, 0x59, 0x78,
	0x7b, 0xd5, 0x26, 0x74, 0x0e, 0xf7, 0x8b, 0x70, 0xdb, 0xb5, 0x3a, 0x96, 0xdb, 0xc8, 0x9f, 0xcd,
	0xbb, 0x9f, 0x91, 0x2d, 0x86, 0x57, 0xe4, 0x6d, 0xe0, 0x32, 0xf4, 0x50, 0x72, 0x96, 0x17, 0xe9,
	0x5f, 0x28, 0xef, 0xff, 0x5a, 0x83, 0x23, 0x2e, 0xd6, 0xbe, 0x2c, 0x60, 0xf4, 0x15, 0x1c, 0x3a,
	0x91, 0x7b, 0x4e, 0xfc, 0x3c, 0x37, 0xda, 0xb9, 0xe2, 0x66, 0x33, 0x93, 0xf5, 0x2c, 0x74, 0x08,
	0x4b, 0xe2, 0x00, 0x7d, 0x2e, 0xa4, 0x3f, 0x0d, 0x17, 0xde, 0x55, 0xba, 0x41, 0xa8, 0x68, 0xb5,
	0x1c, 0xfa, 0xb5, 0xe8, 0x31, 0x0b, 0xfd, 0x4f, 0xac, 0x97, 0x01, 0x9e, 0xc0, 0x3b, 0x4e, 0xe4,
	0x96, 0x2e, 0x8e, 0xcc, 0x91, 0x6c, 0x2c, 0x23, 0x0c, 0x1b, 0x7f, 0xdc, 0x9c, 0x2a, 0x7f, 0xde,
	0x9c, 0x2a, 0x7f, 0xdf, 0x9c, 0x2a, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xee, 0x66, 0x27, 0xdf,
	0xa5, 0x08, 0x00, 0x00,
}

func (m *PropsItemList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PropsItemList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCoinShop(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CoinRechargeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinRechargeList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Way != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(*m.Way))
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCoinShop(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CoinShopList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinShopList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(*m.Type))
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCoinShop(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CoinRechargeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinRechargeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(*m.Id))
	}
	if m.PassWord != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(len(*m.PassWord)))
		i += copy(dAtA[i:], *m.PassWord)
	}
	if m.IsCheck != nil {
		dAtA[i] = 0x18
		i++
		if *m.IsCheck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CoinRechargeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinRechargeResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(*m.Id))
	}
	if m.Result != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BuyCoinItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyCoinItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(*m.Id))
	}
	if m.Num != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(*m.Num))
	}
	if m.Way != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(*m.Way))
	}
	if m.Result != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(*m.Result))
	}
	if m.IsBuy != nil {
		dAtA[i] = 0x28
		i++
		if *m.IsBuy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Reason != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(len(*m.Reason)))
		i += copy(dAtA[i:], *m.Reason)
	}
	if m.PassWord != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(len(*m.PassWord)))
		i += copy(dAtA[i:], *m.PassWord)
	}
	if m.IsCheck != nil {
		dAtA[i] = 0x40
		i++
		if *m.IsCheck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UseCoinItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UseCoinItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(*m.Id))
	}
	if m.Way != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(*m.Way))
	}
	if m.Result != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Equipment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Equipment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BagId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(*m.BagId))
	}
	if m.PropsId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(*m.PropsId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EquipmentReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipmentReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(*m.Id))
	}
	if m.GJ != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(m.GJ.Size()))
		n1, err := m.GJ.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.QP != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(m.QP.Size()))
		n2, err := m.QP.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.MP != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(m.MP.Size()))
		n3, err := m.MP.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.QTX != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(m.QTX.Size()))
		n4, err := m.QTX.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.MZBS != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(m.MZBS.Size()))
		n5, err := m.MZBS.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BagItems) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BagItems) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(*m.Type))
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCoinShop(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NewBagItemsTip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBagItemsTip) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Types) > 0 {
		for _, num := range m.Types {
			dAtA[i] = 0x8
			i++
			i = encodeVarintCoinShop(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RechargeActReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RechargeActReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActCfgId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(*m.ActCfgId))
	}
	if m.GiveType != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(*m.GiveType))
	}
	if m.PassWord != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(len(*m.PassWord)))
		i += copy(dAtA[i:], *m.PassWord)
	}
	if m.PayWay != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(*m.PayWay))
	}
	if m.PayInfo != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(m.PayInfo.Size()))
		n6, err := m.PayInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.OrderId != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(len(*m.OrderId)))
		i += copy(dAtA[i:], *m.OrderId)
	}
	if m.BankCard != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(len(*m.BankCard)))
		i += copy(dAtA[i:], *m.BankCard)
	}
	if m.OrderAmount != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCoinShop(dAtA, i, uint64(*m.OrderAmount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintCoinShop(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PropsItemList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCoinShop(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CoinRechargeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Way != nil {
		n += 1 + sovCoinShop(uint64(*m.Way))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCoinShop(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CoinShopList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovCoinShop(uint64(*m.Type))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCoinShop(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CoinRechargeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovCoinShop(uint64(*m.Id))
	}
	if m.PassWord != nil {
		l = len(*m.PassWord)
		n += 1 + l + sovCoinShop(uint64(l))
	}
	if m.IsCheck != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CoinRechargeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovCoinShop(uint64(*m.Id))
	}
	if m.Result != nil {
		n += 1 + sovCoinShop(uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BuyCoinItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovCoinShop(uint64(*m.Id))
	}
	if m.Num != nil {
		n += 1 + sovCoinShop(uint64(*m.Num))
	}
	if m.Way != nil {
		n += 1 + sovCoinShop(uint64(*m.Way))
	}
	if m.Result != nil {
		n += 1 + sovCoinShop(uint64(*m.Result))
	}
	if m.IsBuy != nil {
		n += 2
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovCoinShop(uint64(l))
	}
	if m.PassWord != nil {
		l = len(*m.PassWord)
		n += 1 + l + sovCoinShop(uint64(l))
	}
	if m.IsCheck != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UseCoinItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovCoinShop(uint64(*m.Id))
	}
	if m.Way != nil {
		n += 1 + sovCoinShop(uint64(*m.Way))
	}
	if m.Result != nil {
		n += 1 + sovCoinShop(uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Equipment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BagId != nil {
		n += 1 + sovCoinShop(uint64(*m.BagId))
	}
	if m.PropsId != nil {
		n += 1 + sovCoinShop(uint64(*m.PropsId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EquipmentReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovCoinShop(uint64(*m.Id))
	}
	if m.GJ != nil {
		l = m.GJ.Size()
		n += 1 + l + sovCoinShop(uint64(l))
	}
	if m.QP != nil {
		l = m.QP.Size()
		n += 1 + l + sovCoinShop(uint64(l))
	}
	if m.MP != nil {
		l = m.MP.Size()
		n += 1 + l + sovCoinShop(uint64(l))
	}
	if m.QTX != nil {
		l = m.QTX.Size()
		n += 1 + l + sovCoinShop(uint64(l))
	}
	if m.MZBS != nil {
		l = m.MZBS.Size()
		n += 1 + l + sovCoinShop(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BagItems) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovCoinShop(uint64(*m.Type))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCoinShop(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewBagItemsTip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Types) > 0 {
		for _, e := range m.Types {
			n += 1 + sovCoinShop(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RechargeActReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActCfgId != nil {
		n += 1 + sovCoinShop(uint64(*m.ActCfgId))
	}
	if m.GiveType != nil {
		n += 1 + sovCoinShop(uint64(*m.GiveType))
	}
	if m.PassWord != nil {
		l = len(*m.PassWord)
		n += 1 + l + sovCoinShop(uint64(l))
	}
	if m.PayWay != nil {
		n += 1 + sovCoinShop(uint64(*m.PayWay))
	}
	if m.PayInfo != nil {
		l = m.PayInfo.Size()
		n += 1 + l + sovCoinShop(uint64(l))
	}
	if m.OrderId != nil {
		l = len(*m.OrderId)
		n += 2 + l + sovCoinShop(uint64(l))
	}
	if m.BankCard != nil {
		l = len(*m.BankCard)
		n += 2 + l + sovCoinShop(uint64(l))
	}
	if m.OrderAmount != nil {
		n += 2 + sovCoinShop(uint64(*m.OrderAmount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCoinShop(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCoinShop(x uint64) (n int) {
	return sovCoinShop(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PropsItemList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoinShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PropsItemList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PropsItemList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoinShop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &share_message.PropsItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoinShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoinShop
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoinShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinRechargeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoinShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinRechargeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinRechargeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Way", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Way = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoinShop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &share_message.CoinRecharge{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoinShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoinShop
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoinShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinShopList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoinShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinShopList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinShopList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoinShop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &share_message.CoinProduct{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoinShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoinShop
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoinShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinRechargeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoinShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinRechargeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinRechargeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassWord", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoinShop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PassWord = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCheck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsCheck = &b
		default:
			iNdEx = preIndex
			skippy, err := skipCoinShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoinShop
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoinShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinRechargeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoinShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinRechargeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinRechargeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCoinShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoinShop
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoinShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyCoinItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoinShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyCoinItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyCoinItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Num = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Way", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Way = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBuy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsBuy = &b
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoinShop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassWord", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoinShop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PassWord = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCheck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsCheck = &b
		default:
			iNdEx = preIndex
			skippy, err := skipCoinShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoinShop
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoinShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UseCoinItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoinShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UseCoinItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UseCoinItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Way", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Way = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCoinShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoinShop
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoinShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Equipment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoinShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Equipment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Equipment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BagId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BagId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropsId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PropsId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCoinShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoinShop
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoinShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipmentReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoinShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipmentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipmentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GJ", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoinShop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GJ == nil {
				m.GJ = &Equipment{}
			}
			if err := m.GJ.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoinShop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QP == nil {
				m.QP = &Equipment{}
			}
			if err := m.QP.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoinShop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MP == nil {
				m.MP = &Equipment{}
			}
			if err := m.MP.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QTX", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoinShop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QTX == nil {
				m.QTX = &Equipment{}
			}
			if err := m.QTX.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MZBS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoinShop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MZBS == nil {
				m.MZBS = &Equipment{}
			}
			if err := m.MZBS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoinShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoinShop
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoinShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BagItems) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoinShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BagItems: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BagItems: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoinShop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &share_message.PlayerBagItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoinShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoinShop
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoinShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBagItemsTip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoinShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewBagItemsTip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewBagItemsTip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCoinShop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Types = append(m.Types, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCoinShop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCoinShop
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCoinShop
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Types) == 0 {
					m.Types = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCoinShop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Types = append(m.Types, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCoinShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoinShop
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoinShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RechargeActReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoinShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RechargeActReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RechargeActReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActCfgId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActCfgId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GiveType = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassWord", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoinShop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PassWord = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayWay", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayWay = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoinShop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PayInfo == nil {
				m.PayInfo = &share_message.PayOrderInfo{}
			}
			if err := m.PayInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoinShop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OrderId = &s
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankCard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoinShop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankCard = &s
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderAmount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderAmount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCoinShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoinShop
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoinShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCoinShop(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCoinShop
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoinShop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCoinShop
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCoinShop
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCoinShop
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCoinShop(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCoinShop
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCoinShop = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCoinShop   = fmt.Errorf("proto: integer overflow")
)
