// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sport_game_apply.proto

package client_hall

import (
	fmt "fmt"
	share_message "game_server/pb/share_message"
	proto "github.com/akqp2019/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Game_Class int32

const (
	//今日
	Game_Class_GAME_TODAY Game_Class = 0
	//赛前
	Game_Class_GAME_BEFORE Game_Class = 1
	//滚盘
	Game_Class_GAME_ROLL Game_Class = 2
	//已结束
	Game_Class_GAME_OVER Game_Class = 3
)

var Game_Class_name = map[int32]string{
	0: "GAME_TODAY",
	1: "GAME_BEFORE",
	2: "GAME_ROLL",
	3: "GAME_OVER",
}

var Game_Class_value = map[string]int32{
	"GAME_TODAY":  0,
	"GAME_BEFORE": 1,
	"GAME_ROLL":   2,
	"GAME_OVER":   3,
}

func (x Game_Class) Enum() *Game_Class {
	p := new(Game_Class)
	*p = x
	return p
}

func (x Game_Class) String() string {
	return proto.EnumName(Game_Class_name, int32(x))
}

func (x *Game_Class) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Game_Class_value, data, "Game_Class")
	if err != nil {
		return err
	}
	*x = Game_Class(value)
	return nil
}

func (Game_Class) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b9383f2617796243, []int{0}
}

//比赛列表请求参数
type ESportGameListRequest struct {
	//类型Type
	LabelType *int32 `protobuf:"varint,1,opt,name=LabelType" json:"LabelType,omitempty" bson:"LabelType,omitempty"`
	//labelId
	LabelId *int64 `protobuf:"varint,2,opt,name=LabelId" json:"LabelId,omitempty" bson:"LabelId,omitempty"`
	//比赛查询分类
	GameClass *Game_Class `protobuf:"varint,3,opt,name=GameClass,enum=client_hall.Game_Class" json:"GameClass,omitempty" bson:"GameClass,omitempty"`
	//页码
	Page *int32 `protobuf:"varint,4,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	//页尺寸
	PageSize             *int32   `protobuf:"varint,5,opt,name=PageSize" json:"PageSize,omitempty" bson:"PageSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESportGameListRequest) Reset()         { *m = ESportGameListRequest{} }
func (m *ESportGameListRequest) String() string { return proto.CompactTextString(m) }
func (*ESportGameListRequest) ProtoMessage()    {}
func (*ESportGameListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9383f2617796243, []int{0}
}
func (m *ESportGameListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportGameListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportGameListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportGameListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportGameListRequest.Merge(m, src)
}
func (m *ESportGameListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ESportGameListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportGameListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ESportGameListRequest proto.InternalMessageInfo

func (m *ESportGameListRequest) GetLabelType() int32 {
	if m != nil && m.LabelType != nil {
		return *m.LabelType
	}
	return 0
}

func (m *ESportGameListRequest) GetLabelId() int64 {
	if m != nil && m.LabelId != nil {
		return *m.LabelId
	}
	return 0
}

func (m *ESportGameListRequest) GetGameClass() Game_Class {
	if m != nil && m.GameClass != nil {
		return *m.GameClass
	}
	return Game_Class_GAME_TODAY
}

func (m *ESportGameListRequest) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *ESportGameListRequest) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

//比赛列表返回的实体
type ESportGameObject struct {
	//数据库对应的比赛表中id
	UniqueGameId *int64 `protobuf:"varint,1,opt,name=UniqueGameId" json:"UniqueGameId,omitempty" bson:"UniqueGameId,omitempty"`
	//比赛图标
	GameIcon *string `protobuf:"bytes,2,opt,name=GameIcon" json:"GameIcon,omitempty" bson:"GameIcon,omitempty"`
	//比赛名称
	GameName *string `protobuf:"bytes,3,opt,name=GameName" json:"GameName,omitempty" bson:"GameName,omitempty"`
	//队伍A信息
	TeamAInfo *TeamObject `protobuf:"bytes,4,opt,name=TeamAInfo" json:"TeamAInfo,omitempty" bson:"TeamAInfo,omitempty"`
	//队伍A得分
	ScoreA *string `protobuf:"bytes,5,opt,name=ScoreA" json:"ScoreA,omitempty" bson:"ScoreA,omitempty"`
	//队伍B得分
	ScoreB *string `protobuf:"bytes,6,opt,name=ScoreB" json:"ScoreB,omitempty" bson:"ScoreB,omitempty"`
	//队伍B信息
	TeamBInfo *TeamObject `protobuf:"bytes,7,opt,name=TeamBInfo" json:"TeamBInfo,omitempty" bson:"TeamBInfo,omitempty"`
	//比赛开始时间(时间戳)
	BeginTime *int64 `protobuf:"varint,8,opt,name=BeginTime" json:"BeginTime,omitempty" bson:"BeginTime,omitempty"`
	//比赛开始时间string
	BeginTimeStr *string `protobuf:"bytes,9,opt,name=BeginTimeStr" json:"BeginTimeStr,omitempty" bson:"BeginTimeStr,omitempty"`
	//比赛状态 0 未开始，1 进行中，2 已结束
	GameStatus *string `protobuf:"bytes,10,opt,name=GameStatus" json:"GameStatus,omitempty" bson:"GameStatus,omitempty"`
	//是否有滚盘 0 否 ,1 是(目前可不用)
	HaveRoll *int32 `protobuf:"varint,11,opt,name=HaveRoll" json:"HaveRoll,omitempty" bson:"HaveRoll,omitempty"`
	//是否有放映厅 0否,1是(详情也用于判断放映厅按钮):该值不是轮询的值
	HaveVideoHall *int32 `protobuf:"varint,12,opt,name=HaveVideoHall" json:"HaveVideoHall,omitempty" bson:"HaveVideoHall,omitempty"`
	//以下数据是给予轮询以及查询别的表用(app用不到可以忽视)
	//对应本项目的标签id 10001:王者荣耀,10002:dota2,10003:英雄联盟,10004:CSGO
	AppLabelId *int32 `protobuf:"varint,13,opt,name=AppLabelId" json:"AppLabelId,omitempty" bson:"AppLabelId,omitempty"`
	//api接口来源 90001:野子科技
	ApiOrigin *int32 `protobuf:"varint,14,opt,name=ApiOrigin" json:"ApiOrigin,omitempty" bson:"ApiOrigin,omitempty"`
	//比赛 id(api过来的内部id)
	GameId *string `protobuf:"bytes,15,opt,name=GameId" json:"GameId,omitempty" bson:"GameId,omitempty"`
	//是否开奖 0：未开奖 1:已开奖
	IsLottery *int32 `protobuf:"varint,16,opt,name=IsLottery" json:"IsLottery,omitempty" bson:"IsLottery,omitempty"`
	//历史记录id(绑定两队历史数据的id)
	HistoryId            *int64   `protobuf:"varint,17,opt,name=HistoryId" json:"HistoryId,omitempty" bson:"HistoryId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESportGameObject) Reset()         { *m = ESportGameObject{} }
func (m *ESportGameObject) String() string { return proto.CompactTextString(m) }
func (*ESportGameObject) ProtoMessage()    {}
func (*ESportGameObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9383f2617796243, []int{1}
}
func (m *ESportGameObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportGameObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportGameObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportGameObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportGameObject.Merge(m, src)
}
func (m *ESportGameObject) XXX_Size() int {
	return m.Size()
}
func (m *ESportGameObject) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportGameObject.DiscardUnknown(m)
}

var xxx_messageInfo_ESportGameObject proto.InternalMessageInfo

func (m *ESportGameObject) GetUniqueGameId() int64 {
	if m != nil && m.UniqueGameId != nil {
		return *m.UniqueGameId
	}
	return 0
}

func (m *ESportGameObject) GetGameIcon() string {
	if m != nil && m.GameIcon != nil {
		return *m.GameIcon
	}
	return ""
}

func (m *ESportGameObject) GetGameName() string {
	if m != nil && m.GameName != nil {
		return *m.GameName
	}
	return ""
}

func (m *ESportGameObject) GetTeamAInfo() *TeamObject {
	if m != nil {
		return m.TeamAInfo
	}
	return nil
}

func (m *ESportGameObject) GetScoreA() string {
	if m != nil && m.ScoreA != nil {
		return *m.ScoreA
	}
	return ""
}

func (m *ESportGameObject) GetScoreB() string {
	if m != nil && m.ScoreB != nil {
		return *m.ScoreB
	}
	return ""
}

func (m *ESportGameObject) GetTeamBInfo() *TeamObject {
	if m != nil {
		return m.TeamBInfo
	}
	return nil
}

func (m *ESportGameObject) GetBeginTime() int64 {
	if m != nil && m.BeginTime != nil {
		return *m.BeginTime
	}
	return 0
}

func (m *ESportGameObject) GetBeginTimeStr() string {
	if m != nil && m.BeginTimeStr != nil {
		return *m.BeginTimeStr
	}
	return ""
}

func (m *ESportGameObject) GetGameStatus() string {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return ""
}

func (m *ESportGameObject) GetHaveRoll() int32 {
	if m != nil && m.HaveRoll != nil {
		return *m.HaveRoll
	}
	return 0
}

func (m *ESportGameObject) GetHaveVideoHall() int32 {
	if m != nil && m.HaveVideoHall != nil {
		return *m.HaveVideoHall
	}
	return 0
}

func (m *ESportGameObject) GetAppLabelId() int32 {
	if m != nil && m.AppLabelId != nil {
		return *m.AppLabelId
	}
	return 0
}

func (m *ESportGameObject) GetApiOrigin() int32 {
	if m != nil && m.ApiOrigin != nil {
		return *m.ApiOrigin
	}
	return 0
}

func (m *ESportGameObject) GetGameId() string {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return ""
}

func (m *ESportGameObject) GetIsLottery() int32 {
	if m != nil && m.IsLottery != nil {
		return *m.IsLottery
	}
	return 0
}

func (m *ESportGameObject) GetHistoryId() int64 {
	if m != nil && m.HistoryId != nil {
		return *m.HistoryId
	}
	return 0
}

//战队信息结构
type TeamObject struct {
	TeamId               *string  `protobuf:"bytes,1,opt,name=TeamId" json:"TeamId,omitempty" bson:"TeamId,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Icon                 *string  `protobuf:"bytes,3,opt,name=Icon" json:"Icon,omitempty" bson:"Icon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TeamObject) Reset()         { *m = TeamObject{} }
func (m *TeamObject) String() string { return proto.CompactTextString(m) }
func (*TeamObject) ProtoMessage()    {}
func (*TeamObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9383f2617796243, []int{2}
}
func (m *TeamObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamObject.Merge(m, src)
}
func (m *TeamObject) XXX_Size() int {
	return m.Size()
}
func (m *TeamObject) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamObject.DiscardUnknown(m)
}

var xxx_messageInfo_TeamObject proto.InternalMessageInfo

func (m *TeamObject) GetTeamId() string {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return ""
}

func (m *TeamObject) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *TeamObject) GetIcon() string {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return ""
}

//比赛列表结果信息
type ESportGameListResult struct {
	// 错误码 1成功 1以外失败
	Code *int32 `protobuf:"varint,1,opt,name=Code" json:"Code,omitempty" bson:"Code,omitempty"`
	// 错误提示
	Msg *string `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty" bson:"Msg,omitempty"`
	//数据总数
	Total *int32 `protobuf:"varint,3,opt,name=Total" json:"Total,omitempty" bson:"Total,omitempty"`
	//返回的比赛列表
	GameList             []*ESportGameObject `protobuf:"bytes,4,rep,name=GameList" json:"GameList,omitempty" bson:"GameList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-" bson:"-"`
	XXX_unrecognized     []byte              `json:"-" bson:"-"`
	XXX_sizecache        int32               `json:"-" bson:"-"`
}

func (m *ESportGameListResult) Reset()         { *m = ESportGameListResult{} }
func (m *ESportGameListResult) String() string { return proto.CompactTextString(m) }
func (*ESportGameListResult) ProtoMessage()    {}
func (*ESportGameListResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9383f2617796243, []int{3}
}
func (m *ESportGameListResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportGameListResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportGameListResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportGameListResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportGameListResult.Merge(m, src)
}
func (m *ESportGameListResult) XXX_Size() int {
	return m.Size()
}
func (m *ESportGameListResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportGameListResult.DiscardUnknown(m)
}

var xxx_messageInfo_ESportGameListResult proto.InternalMessageInfo

func (m *ESportGameListResult) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *ESportGameListResult) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func (m *ESportGameListResult) GetTotal() int32 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *ESportGameListResult) GetGameList() []*ESportGameObject {
	if m != nil {
		return m.GameList
	}
	return nil
}

//获取比赛详情数据请求
type GameDetailRequest struct {
	//列表中对应的
	UniqueGameId *int64 `protobuf:"varint,1,opt,name=UniqueGameId" json:"UniqueGameId,omitempty" bson:"UniqueGameId,omitempty"`
	//轮询标识 0:否 1:轮询
	PollFlag             *int32   `protobuf:"varint,2,opt,name=PollFlag" json:"PollFlag,omitempty" bson:"PollFlag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GameDetailRequest) Reset()         { *m = GameDetailRequest{} }
func (m *GameDetailRequest) String() string { return proto.CompactTextString(m) }
func (*GameDetailRequest) ProtoMessage()    {}
func (*GameDetailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9383f2617796243, []int{4}
}
func (m *GameDetailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameDetailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameDetailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameDetailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameDetailRequest.Merge(m, src)
}
func (m *GameDetailRequest) XXX_Size() int {
	return m.Size()
}
func (m *GameDetailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GameDetailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GameDetailRequest proto.InternalMessageInfo

func (m *GameDetailRequest) GetUniqueGameId() int64 {
	if m != nil && m.UniqueGameId != nil {
		return *m.UniqueGameId
	}
	return 0
}

func (m *GameDetailRequest) GetPollFlag() int32 {
	if m != nil && m.PollFlag != nil {
		return *m.PollFlag
	}
	return 0
}

//竞猜购物车请求的结构
type GameGuessCartRequestObj struct {
	//列表中对应的
	UniqueGameId *int64 `protobuf:"varint,1,opt,name=UniqueGameId" json:"UniqueGameId,omitempty" bson:"UniqueGameId,omitempty"`
	//对应本项目的标签id 10001:王者荣耀,10002:dota2,10003:英雄联盟,10004:CSGO
	AppLabelId *int32 `protobuf:"varint,2,opt,name=AppLabelId" json:"AppLabelId,omitempty" bson:"AppLabelId,omitempty"`
	//api接口来源 90001:野子科技
	ApiOrigin *int32 `protobuf:"varint,3,opt,name=ApiOrigin" json:"ApiOrigin,omitempty" bson:"ApiOrigin,omitempty"`
	//比赛 id(api过来的内部id)
	GameId *string `protobuf:"bytes,4,opt,name=GameId" json:"GameId,omitempty" bson:"GameId,omitempty"`
	//动态盘口表中的唯一的id
	UniqueGameGuessId *int64 `protobuf:"varint,5,opt,name=UniqueGameGuessId" json:"UniqueGameGuessId,omitempty" bson:"UniqueGameGuessId,omitempty"`
	//竞猜项 id(全局唯一)
	BetNum *string `protobuf:"bytes,6,opt,name=BetNum" json:"BetNum,omitempty" bson:"BetNum,omitempty"`
	//1:早盘,2:滚盘(app内部区分用)
	MornRollGuessFlag    *int32   `protobuf:"varint,7,opt,name=MornRollGuessFlag" json:"MornRollGuessFlag,omitempty" bson:"MornRollGuessFlag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GameGuessCartRequestObj) Reset()         { *m = GameGuessCartRequestObj{} }
func (m *GameGuessCartRequestObj) String() string { return proto.CompactTextString(m) }
func (*GameGuessCartRequestObj) ProtoMessage()    {}
func (*GameGuessCartRequestObj) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9383f2617796243, []int{5}
}
func (m *GameGuessCartRequestObj) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameGuessCartRequestObj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameGuessCartRequestObj.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameGuessCartRequestObj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameGuessCartRequestObj.Merge(m, src)
}
func (m *GameGuessCartRequestObj) XXX_Size() int {
	return m.Size()
}
func (m *GameGuessCartRequestObj) XXX_DiscardUnknown() {
	xxx_messageInfo_GameGuessCartRequestObj.DiscardUnknown(m)
}

var xxx_messageInfo_GameGuessCartRequestObj proto.InternalMessageInfo

func (m *GameGuessCartRequestObj) GetUniqueGameId() int64 {
	if m != nil && m.UniqueGameId != nil {
		return *m.UniqueGameId
	}
	return 0
}

func (m *GameGuessCartRequestObj) GetAppLabelId() int32 {
	if m != nil && m.AppLabelId != nil {
		return *m.AppLabelId
	}
	return 0
}

func (m *GameGuessCartRequestObj) GetApiOrigin() int32 {
	if m != nil && m.ApiOrigin != nil {
		return *m.ApiOrigin
	}
	return 0
}

func (m *GameGuessCartRequestObj) GetGameId() string {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return ""
}

func (m *GameGuessCartRequestObj) GetUniqueGameGuessId() int64 {
	if m != nil && m.UniqueGameGuessId != nil {
		return *m.UniqueGameGuessId
	}
	return 0
}

func (m *GameGuessCartRequestObj) GetBetNum() string {
	if m != nil && m.BetNum != nil {
		return *m.BetNum
	}
	return ""
}

func (m *GameGuessCartRequestObj) GetMornRollGuessFlag() int32 {
	if m != nil && m.MornRollGuessFlag != nil {
		return *m.MornRollGuessFlag
	}
	return 0
}

//竞猜购物车轮询请求
type GameGuessCartRequest struct {
	GuessCartsReq        []*GameGuessCartRequestObj `protobuf:"bytes,1,rep,name=guessCartsReq" json:"guessCartsReq,omitempty" bson:"guessCartsReq,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-" bson:"-"`
	XXX_unrecognized     []byte                     `json:"-" bson:"-"`
	XXX_sizecache        int32                      `json:"-" bson:"-"`
}

func (m *GameGuessCartRequest) Reset()         { *m = GameGuessCartRequest{} }
func (m *GameGuessCartRequest) String() string { return proto.CompactTextString(m) }
func (*GameGuessCartRequest) ProtoMessage()    {}
func (*GameGuessCartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9383f2617796243, []int{6}
}
func (m *GameGuessCartRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameGuessCartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameGuessCartRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameGuessCartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameGuessCartRequest.Merge(m, src)
}
func (m *GameGuessCartRequest) XXX_Size() int {
	return m.Size()
}
func (m *GameGuessCartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GameGuessCartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GameGuessCartRequest proto.InternalMessageInfo

func (m *GameGuessCartRequest) GetGuessCartsReq() []*GameGuessCartRequestObj {
	if m != nil {
		return m.GuessCartsReq
	}
	return nil
}

//竞猜购物车返回的结构体
type GameGuessCartResultObj struct {
	//列表中对应的
	UniqueGameId *int64 `protobuf:"varint,1,opt,name=UniqueGameId" json:"UniqueGameId,omitempty" bson:"UniqueGameId,omitempty"`
	//竞猜项 id(全局唯一)
	BetNum *string `protobuf:"bytes,2,opt,name=BetNum" json:"BetNum,omitempty" bson:"BetNum,omitempty"`
	//实时赔率
	Odds *string `protobuf:"bytes,3,opt,name=Odds" json:"Odds,omitempty" bson:"Odds,omitempty"`
	//比赛状态 0 未开始，1 进行中，2 已结束(后端通过begin_time组合封装过)
	GameStatus *string `protobuf:"bytes,4,opt,name=GameStatus" json:"GameStatus,omitempty" bson:"GameStatus,omitempty"`
	//投注状态(1:可投注,2:封盘):这个是通过组合判断过的值给app页面用
	BetStatus            *string  `protobuf:"bytes,5,opt,name=BetStatus" json:"BetStatus,omitempty" bson:"BetStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GameGuessCartResultObj) Reset()         { *m = GameGuessCartResultObj{} }
func (m *GameGuessCartResultObj) String() string { return proto.CompactTextString(m) }
func (*GameGuessCartResultObj) ProtoMessage()    {}
func (*GameGuessCartResultObj) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9383f2617796243, []int{7}
}
func (m *GameGuessCartResultObj) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameGuessCartResultObj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameGuessCartResultObj.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameGuessCartResultObj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameGuessCartResultObj.Merge(m, src)
}
func (m *GameGuessCartResultObj) XXX_Size() int {
	return m.Size()
}
func (m *GameGuessCartResultObj) XXX_DiscardUnknown() {
	xxx_messageInfo_GameGuessCartResultObj.DiscardUnknown(m)
}

var xxx_messageInfo_GameGuessCartResultObj proto.InternalMessageInfo

func (m *GameGuessCartResultObj) GetUniqueGameId() int64 {
	if m != nil && m.UniqueGameId != nil {
		return *m.UniqueGameId
	}
	return 0
}

func (m *GameGuessCartResultObj) GetBetNum() string {
	if m != nil && m.BetNum != nil {
		return *m.BetNum
	}
	return ""
}

func (m *GameGuessCartResultObj) GetOdds() string {
	if m != nil && m.Odds != nil {
		return *m.Odds
	}
	return ""
}

func (m *GameGuessCartResultObj) GetGameStatus() string {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return ""
}

func (m *GameGuessCartResultObj) GetBetStatus() string {
	if m != nil && m.BetStatus != nil {
		return *m.BetStatus
	}
	return ""
}

//竞猜购物车轮询返回结果
type GameGuessCartResult struct {
	// 错误码 1成功 1以外失败
	Code *int32 `protobuf:"varint,1,opt,name=Code" json:"Code,omitempty" bson:"Code,omitempty"`
	// 提示
	Msg *string `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty" bson:"Msg,omitempty"`
	//返回结果
	GuessCartsRst        []*GameGuessCartResultObj `protobuf:"bytes,3,rep,name=guessCartsRst" json:"guessCartsRst,omitempty" bson:"guessCartsRst,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-" bson:"-"`
	XXX_unrecognized     []byte                    `json:"-" bson:"-"`
	XXX_sizecache        int32                     `json:"-" bson:"-"`
}

func (m *GameGuessCartResult) Reset()         { *m = GameGuessCartResult{} }
func (m *GameGuessCartResult) String() string { return proto.CompactTextString(m) }
func (*GameGuessCartResult) ProtoMessage()    {}
func (*GameGuessCartResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9383f2617796243, []int{8}
}
func (m *GameGuessCartResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameGuessCartResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameGuessCartResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameGuessCartResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameGuessCartResult.Merge(m, src)
}
func (m *GameGuessCartResult) XXX_Size() int {
	return m.Size()
}
func (m *GameGuessCartResult) XXX_DiscardUnknown() {
	xxx_messageInfo_GameGuessCartResult.DiscardUnknown(m)
}

var xxx_messageInfo_GameGuessCartResult proto.InternalMessageInfo

func (m *GameGuessCartResult) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *GameGuessCartResult) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func (m *GameGuessCartResult) GetGuessCartsRst() []*GameGuessCartResultObj {
	if m != nil {
		return m.GuessCartsRst
	}
	return nil
}

//返回详情页数据
type ESportGameDetailResult struct {
	// 错误码 1成功 1以外失败
	Code *int32 `protobuf:"varint,1,opt,name=Code" json:"Code,omitempty" bson:"Code,omitempty"`
	// 错误提示
	Msg *string `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty" bson:"Msg,omitempty"`
	//返回详情页头部数据
	GameDetailHead *ESportGameObject `protobuf:"bytes,3,opt,name=GameDetailHead" json:"GameDetailHead,omitempty" bson:"GameDetailHead,omitempty"`
	//竞猜内容相关数据
	//最大限额:该值不是轮询的值
	MaxAmount *int64 `protobuf:"varint,4,opt,name=MaxAmount" json:"MaxAmount,omitempty" bson:"MaxAmount,omitempty"`
	//动态盘口表中的唯一的id
	UniqueGameGuessId *int64 `protobuf:"varint,5,opt,name=UniqueGameGuessId" json:"UniqueGameGuessId,omitempty" bson:"UniqueGameGuessId,omitempty"`
	//1:早盘,2:滚盘(app内部区分用)
	MornRollGuessFlag *int32 `protobuf:"varint,6,opt,name=MornRollGuessFlag" json:"MornRollGuessFlag,omitempty" bson:"MornRollGuessFlag,omitempty"`
	//竞猜局数
	GuessOddsNums        []*share_message.GameGuessOddsNumObject `protobuf:"bytes,7,rep,name=guessOddsNums" json:"guessOddsNums,omitempty" bson:"guessOddsNums,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-" bson:"-"`
	XXX_unrecognized     []byte                                  `json:"-" bson:"-"`
	XXX_sizecache        int32                                   `json:"-" bson:"-"`
}

func (m *ESportGameDetailResult) Reset()         { *m = ESportGameDetailResult{} }
func (m *ESportGameDetailResult) String() string { return proto.CompactTextString(m) }
func (*ESportGameDetailResult) ProtoMessage()    {}
func (*ESportGameDetailResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9383f2617796243, []int{9}
}
func (m *ESportGameDetailResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportGameDetailResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportGameDetailResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportGameDetailResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportGameDetailResult.Merge(m, src)
}
func (m *ESportGameDetailResult) XXX_Size() int {
	return m.Size()
}
func (m *ESportGameDetailResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportGameDetailResult.DiscardUnknown(m)
}

var xxx_messageInfo_ESportGameDetailResult proto.InternalMessageInfo

func (m *ESportGameDetailResult) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *ESportGameDetailResult) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func (m *ESportGameDetailResult) GetGameDetailHead() *ESportGameObject {
	if m != nil {
		return m.GameDetailHead
	}
	return nil
}

func (m *ESportGameDetailResult) GetMaxAmount() int64 {
	if m != nil && m.MaxAmount != nil {
		return *m.MaxAmount
	}
	return 0
}

func (m *ESportGameDetailResult) GetUniqueGameGuessId() int64 {
	if m != nil && m.UniqueGameGuessId != nil {
		return *m.UniqueGameGuessId
	}
	return 0
}

func (m *ESportGameDetailResult) GetMornRollGuessFlag() int32 {
	if m != nil && m.MornRollGuessFlag != nil {
		return *m.MornRollGuessFlag
	}
	return 0
}

func (m *ESportGameDetailResult) GetGuessOddsNums() []*share_message.GameGuessOddsNumObject {
	if m != nil {
		return m.GuessOddsNums
	}
	return nil
}

//投注请求参数
type GameGuessBetRequest struct {
	GuessBets            []*GameGuessBetObject `protobuf:"bytes,1,rep,name=guessBets" json:"guessBets,omitempty" bson:"guessBets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-" bson:"-"`
	XXX_unrecognized     []byte                `json:"-" bson:"-"`
	XXX_sizecache        int32                 `json:"-" bson:"-"`
}

func (m *GameGuessBetRequest) Reset()         { *m = GameGuessBetRequest{} }
func (m *GameGuessBetRequest) String() string { return proto.CompactTextString(m) }
func (*GameGuessBetRequest) ProtoMessage()    {}
func (*GameGuessBetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9383f2617796243, []int{10}
}
func (m *GameGuessBetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameGuessBetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameGuessBetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameGuessBetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameGuessBetRequest.Merge(m, src)
}
func (m *GameGuessBetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GameGuessBetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GameGuessBetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GameGuessBetRequest proto.InternalMessageInfo

func (m *GameGuessBetRequest) GetGuessBets() []*GameGuessBetObject {
	if m != nil {
		return m.GuessBets
	}
	return nil
}

//投注请求结构体
type GameGuessBetObject struct {
	//竞猜中返回的UniqueGameId即比赛表中的唯一主键id
	UniqueGameId *int64 `protobuf:"varint,1,opt,name=UniqueGameId" json:"UniqueGameId,omitempty" bson:"UniqueGameId,omitempty"`
	//竞猜中返回的1:早盘,2:滚盘(app内部区分用)
	MornRollGuessFlag *int32 `protobuf:"varint,2,opt,name=MornRollGuessFlag" json:"MornRollGuessFlag,omitempty" bson:"MornRollGuessFlag,omitempty"`
	//竞猜中返回的动态盘口表中的唯一的id
	UniqueGameGuessId *int64 `protobuf:"varint,3,opt,name=UniqueGameGuessId" json:"UniqueGameGuessId,omitempty" bson:"UniqueGameGuessId,omitempty"`
	//传页面显示的比赛名称(比赛表中赛事名+赛事阶段+"-BO"+赛制)
	GameName *string `protobuf:"bytes,4,opt,name=gameName" json:"gameName,omitempty" bson:"gameName,omitempty"`
	//传页面显示的队伍A名称
	TeamAName *string `protobuf:"bytes,5,opt,name=teamAName" json:"teamAName,omitempty" bson:"teamAName,omitempty"`
	//传页面显示的队伍B名称
	TeamBName *string `protobuf:"bytes,6,opt,name=teamBName" json:"teamBName,omitempty" bson:"teamBName,omitempty"`
	//竞猜内容 id
	BetId *string `protobuf:"bytes,7,opt,name=BetId" json:"BetId,omitempty" bson:"BetId,omitempty"`
	//竞猜内容
	BetTitle *string `protobuf:"bytes,8,opt,name=BetTitle" json:"BetTitle,omitempty" bson:"BetTitle,omitempty"`
	//竞猜项 id(全局唯一)
	BetNum *string `protobuf:"bytes,9,opt,name=BetNum" json:"BetNum,omitempty" bson:"BetNum,omitempty"`
	//竞猜项名称
	BetName *string `protobuf:"bytes,10,opt,name=BetName" json:"BetName,omitempty" bson:"BetName,omitempty"`
	//实时赔率
	Odds *string `protobuf:"bytes,11,opt,name=Odds" json:"Odds,omitempty" bson:"Odds,omitempty"`
	//用户投注金额
	BetAmount            *int64   `protobuf:"varint,12,opt,name=BetAmount" json:"BetAmount,omitempty" bson:"BetAmount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GameGuessBetObject) Reset()         { *m = GameGuessBetObject{} }
func (m *GameGuessBetObject) String() string { return proto.CompactTextString(m) }
func (*GameGuessBetObject) ProtoMessage()    {}
func (*GameGuessBetObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9383f2617796243, []int{11}
}
func (m *GameGuessBetObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameGuessBetObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameGuessBetObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameGuessBetObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameGuessBetObject.Merge(m, src)
}
func (m *GameGuessBetObject) XXX_Size() int {
	return m.Size()
}
func (m *GameGuessBetObject) XXX_DiscardUnknown() {
	xxx_messageInfo_GameGuessBetObject.DiscardUnknown(m)
}

var xxx_messageInfo_GameGuessBetObject proto.InternalMessageInfo

func (m *GameGuessBetObject) GetUniqueGameId() int64 {
	if m != nil && m.UniqueGameId != nil {
		return *m.UniqueGameId
	}
	return 0
}

func (m *GameGuessBetObject) GetMornRollGuessFlag() int32 {
	if m != nil && m.MornRollGuessFlag != nil {
		return *m.MornRollGuessFlag
	}
	return 0
}

func (m *GameGuessBetObject) GetUniqueGameGuessId() int64 {
	if m != nil && m.UniqueGameGuessId != nil {
		return *m.UniqueGameGuessId
	}
	return 0
}

func (m *GameGuessBetObject) GetGameName() string {
	if m != nil && m.GameName != nil {
		return *m.GameName
	}
	return ""
}

func (m *GameGuessBetObject) GetTeamAName() string {
	if m != nil && m.TeamAName != nil {
		return *m.TeamAName
	}
	return ""
}

func (m *GameGuessBetObject) GetTeamBName() string {
	if m != nil && m.TeamBName != nil {
		return *m.TeamBName
	}
	return ""
}

func (m *GameGuessBetObject) GetBetId() string {
	if m != nil && m.BetId != nil {
		return *m.BetId
	}
	return ""
}

func (m *GameGuessBetObject) GetBetTitle() string {
	if m != nil && m.BetTitle != nil {
		return *m.BetTitle
	}
	return ""
}

func (m *GameGuessBetObject) GetBetNum() string {
	if m != nil && m.BetNum != nil {
		return *m.BetNum
	}
	return ""
}

func (m *GameGuessBetObject) GetBetName() string {
	if m != nil && m.BetName != nil {
		return *m.BetName
	}
	return ""
}

func (m *GameGuessBetObject) GetOdds() string {
	if m != nil && m.Odds != nil {
		return *m.Odds
	}
	return ""
}

func (m *GameGuessBetObject) GetBetAmount() int64 {
	if m != nil && m.BetAmount != nil {
		return *m.BetAmount
	}
	return 0
}

//投注返回结果
type GameGuessBetResult struct {
	// 错误码 1成功 1以外失败
	Code *int32 `protobuf:"varint,1,opt,name=Code" json:"Code,omitempty" bson:"Code,omitempty"`
	// 提示
	Msg *string `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty" bson:"Msg,omitempty"`
	//最大限额:当后端确认超额就返回最新的限制额度 Code=11的时候
	MaxAmount            *int64   `protobuf:"varint,3,opt,name=MaxAmount" json:"MaxAmount,omitempty" bson:"MaxAmount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GameGuessBetResult) Reset()         { *m = GameGuessBetResult{} }
func (m *GameGuessBetResult) String() string { return proto.CompactTextString(m) }
func (*GameGuessBetResult) ProtoMessage()    {}
func (*GameGuessBetResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9383f2617796243, []int{12}
}
func (m *GameGuessBetResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameGuessBetResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameGuessBetResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameGuessBetResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameGuessBetResult.Merge(m, src)
}
func (m *GameGuessBetResult) XXX_Size() int {
	return m.Size()
}
func (m *GameGuessBetResult) XXX_DiscardUnknown() {
	xxx_messageInfo_GameGuessBetResult.DiscardUnknown(m)
}

var xxx_messageInfo_GameGuessBetResult proto.InternalMessageInfo

func (m *GameGuessBetResult) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *GameGuessBetResult) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func (m *GameGuessBetResult) GetMaxAmount() int64 {
	if m != nil && m.MaxAmount != nil {
		return *m.MaxAmount
	}
	return 0
}

//比赛历史数据请求
type GameHistoryRequest struct {
	//历史记录id
	HistoryId            *int64   `protobuf:"varint,1,opt,name=HistoryId" json:"HistoryId,omitempty" bson:"HistoryId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GameHistoryRequest) Reset()         { *m = GameHistoryRequest{} }
func (m *GameHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*GameHistoryRequest) ProtoMessage()    {}
func (*GameHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9383f2617796243, []int{13}
}
func (m *GameHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameHistoryRequest.Merge(m, src)
}
func (m *GameHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *GameHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GameHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GameHistoryRequest proto.InternalMessageInfo

func (m *GameHistoryRequest) GetHistoryId() int64 {
	if m != nil && m.HistoryId != nil {
		return *m.HistoryId
	}
	return 0
}

//比赛历史数据返回
type GameHistoryResult struct {
	// 错误码 1成功 1以外失败
	Code *int32 `protobuf:"varint,1,opt,name=Code" json:"Code,omitempty" bson:"Code,omitempty"`
	// 提示
	Msg *string `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty" bson:"Msg,omitempty"`
	//比赛历史数据
	HisData              *share_message.RecentData `protobuf:"bytes,3,opt,name=HisData" json:"HisData,omitempty" bson:"HisData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-" bson:"-"`
	XXX_unrecognized     []byte                    `json:"-" bson:"-"`
	XXX_sizecache        int32                     `json:"-" bson:"-"`
}

func (m *GameHistoryResult) Reset()         { *m = GameHistoryResult{} }
func (m *GameHistoryResult) String() string { return proto.CompactTextString(m) }
func (*GameHistoryResult) ProtoMessage()    {}
func (*GameHistoryResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9383f2617796243, []int{14}
}
func (m *GameHistoryResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameHistoryResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameHistoryResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameHistoryResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameHistoryResult.Merge(m, src)
}
func (m *GameHistoryResult) XXX_Size() int {
	return m.Size()
}
func (m *GameHistoryResult) XXX_DiscardUnknown() {
	xxx_messageInfo_GameHistoryResult.DiscardUnknown(m)
}

var xxx_messageInfo_GameHistoryResult proto.InternalMessageInfo

func (m *GameHistoryResult) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *GameHistoryResult) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func (m *GameHistoryResult) GetHisData() *share_message.RecentData {
	if m != nil {
		return m.HisData
	}
	return nil
}

//比赛实时数据请求
type GameRealTimeRequest struct {
	//比赛的唯一id
	UniqueGameId *int64 `protobuf:"varint,1,opt,name=UniqueGameId" json:"UniqueGameId,omitempty" bson:"UniqueGameId,omitempty"`
	//比赛的局数
	GameRound            *int32   `protobuf:"varint,2,opt,name=game_round" json:"game_round,omitempty" bson:"game_round,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GameRealTimeRequest) Reset()         { *m = GameRealTimeRequest{} }
func (m *GameRealTimeRequest) String() string { return proto.CompactTextString(m) }
func (*GameRealTimeRequest) ProtoMessage()    {}
func (*GameRealTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9383f2617796243, []int{15}
}
func (m *GameRealTimeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameRealTimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameRealTimeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameRealTimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameRealTimeRequest.Merge(m, src)
}
func (m *GameRealTimeRequest) XXX_Size() int {
	return m.Size()
}
func (m *GameRealTimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GameRealTimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GameRealTimeRequest proto.InternalMessageInfo

func (m *GameRealTimeRequest) GetUniqueGameId() int64 {
	if m != nil && m.UniqueGameId != nil {
		return *m.UniqueGameId
	}
	return 0
}

func (m *GameRealTimeRequest) GetGameRound() int32 {
	if m != nil && m.GameRound != nil {
		return *m.GameRound
	}
	return 0
}

//比赛实时数据返回
type GameRealTimeResult struct {
	//错误码 1成功 1以外失败
	Code *int32 `protobuf:"varint,1,opt,name=Code" json:"Code,omitempty" bson:"Code,omitempty"`
	// 提示
	Msg *string `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty" bson:"Msg,omitempty"`
	//当前局数的比赛实时数据
	RealTimeData *GameRealTimeData `protobuf:"bytes,3,opt,name=RealTimeData" json:"RealTimeData,omitempty" bson:"RealTimeData,omitempty"`
	//比赛的局数
	GameRounds           *int32   `protobuf:"varint,4,opt,name=gameRounds" json:"gameRounds,omitempty" bson:"gameRounds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GameRealTimeResult) Reset()         { *m = GameRealTimeResult{} }
func (m *GameRealTimeResult) String() string { return proto.CompactTextString(m) }
func (*GameRealTimeResult) ProtoMessage()    {}
func (*GameRealTimeResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9383f2617796243, []int{16}
}
func (m *GameRealTimeResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameRealTimeResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameRealTimeResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameRealTimeResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameRealTimeResult.Merge(m, src)
}
func (m *GameRealTimeResult) XXX_Size() int {
	return m.Size()
}
func (m *GameRealTimeResult) XXX_DiscardUnknown() {
	xxx_messageInfo_GameRealTimeResult.DiscardUnknown(m)
}

var xxx_messageInfo_GameRealTimeResult proto.InternalMessageInfo

func (m *GameRealTimeResult) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *GameRealTimeResult) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func (m *GameRealTimeResult) GetRealTimeData() *GameRealTimeData {
	if m != nil {
		return m.RealTimeData
	}
	return nil
}

func (m *GameRealTimeResult) GetGameRounds() int32 {
	if m != nil && m.GameRounds != nil {
		return *m.GameRounds
	}
	return 0
}

//总局数redis结构
type GameRounds struct {
	//总局数
	GameRounds           *int32   `protobuf:"varint,1,opt,name=GameRounds" json:"GameRounds,omitempty" bson:"GameRounds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GameRounds) Reset()         { *m = GameRounds{} }
func (m *GameRounds) String() string { return proto.CompactTextString(m) }
func (*GameRounds) ProtoMessage()    {}
func (*GameRounds) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9383f2617796243, []int{17}
}
func (m *GameRounds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameRounds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameRounds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameRounds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameRounds.Merge(m, src)
}
func (m *GameRounds) XXX_Size() int {
	return m.Size()
}
func (m *GameRounds) XXX_DiscardUnknown() {
	xxx_messageInfo_GameRounds.DiscardUnknown(m)
}

var xxx_messageInfo_GameRounds proto.InternalMessageInfo

func (m *GameRounds) GetGameRounds() int32 {
	if m != nil && m.GameRounds != nil {
		return *m.GameRounds
	}
	return 0
}

//实时数据结构
type GameRealTimeData struct {
	//当前局数
	GameRound *int32 `protobuf:"varint,1,opt,name=game_round" json:"game_round,omitempty" bson:"game_round,omitempty"`
	//比赛状态(当前局数的比赛状态:1:进行中 2:已结束)
	GameStatus *int32 `protobuf:"varint,2,opt,name=game_status" json:"game_status,omitempty" bson:"game_status,omitempty"`
	//本局用时:单位秒(对应数据库:持续时间)
	Duration *int32 `protobuf:"varint,3,opt,name=duration" json:"duration,omitempty" bson:"duration,omitempty"`
	//战队a信息
	TeamA *RealTimeTeamObject `protobuf:"bytes,4,opt,name=team_a" json:"team_a,omitempty" bson:"team_a,omitempty"`
	//战队b信息
	TeamB *RealTimeTeamObject `protobuf:"bytes,5,opt,name=team_b" json:"team_b,omitempty" bson:"team_b,omitempty"`
	//战队a队员信息
	PlayerAInfo []*RealTimePlayerObject `protobuf:"bytes,6,rep,name=player_a_info" json:"player_a_info,omitempty" bson:"player_a_info,omitempty"`
	//战队b队员信息
	PlayerBInfo []*RealTimePlayerObject `protobuf:"bytes,7,rep,name=player_b_info" json:"player_b_info,omitempty" bson:"player_b_info,omitempty"`
	//(扩展字段)一塔 0:无、1:A队一塔 2:B队一塔
	FirstTower *int32 `protobuf:"varint,8,opt,name=first_tower" json:"first_tower,omitempty" bson:"first_tower,omitempty"`
	//(扩展字段)一小龙  0:无、1:A队一小龙 2:B队一小龙
	FirstSmallDragon *int32 `protobuf:"varint,9,opt,name=first_small_dragon" json:"first_small_dragon,omitempty" bson:"first_small_dragon,omitempty"`
	//(扩展字段)先五杀  0:无、1:A队先五杀 2:B队先五杀
	FirstFiveKill *int32 `protobuf:"varint,10,opt,name=first_five_kill" json:"first_five_kill,omitempty" bson:"first_five_kill,omitempty"`
	//(扩展字段)一大龙  0:无、1:A队一大龙 2:B队一大龙
	FirstBigDragon *int32 `protobuf:"varint,11,opt,name=first_big_dragon" json:"first_big_dragon,omitempty" bson:"first_big_dragon,omitempty"`
	//(扩展字段)先十杀  0:无、1:A队先十杀 2:B队先十杀
	FirstTenKill         *int32   `protobuf:"varint,12,opt,name=first_ten_kill" json:"first_ten_kill,omitempty" bson:"first_ten_kill,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GameRealTimeData) Reset()         { *m = GameRealTimeData{} }
func (m *GameRealTimeData) String() string { return proto.CompactTextString(m) }
func (*GameRealTimeData) ProtoMessage()    {}
func (*GameRealTimeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9383f2617796243, []int{18}
}
func (m *GameRealTimeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameRealTimeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameRealTimeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameRealTimeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameRealTimeData.Merge(m, src)
}
func (m *GameRealTimeData) XXX_Size() int {
	return m.Size()
}
func (m *GameRealTimeData) XXX_DiscardUnknown() {
	xxx_messageInfo_GameRealTimeData.DiscardUnknown(m)
}

var xxx_messageInfo_GameRealTimeData proto.InternalMessageInfo

func (m *GameRealTimeData) GetGameRound() int32 {
	if m != nil && m.GameRound != nil {
		return *m.GameRound
	}
	return 0
}

func (m *GameRealTimeData) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *GameRealTimeData) GetDuration() int32 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

func (m *GameRealTimeData) GetTeamA() *RealTimeTeamObject {
	if m != nil {
		return m.TeamA
	}
	return nil
}

func (m *GameRealTimeData) GetTeamB() *RealTimeTeamObject {
	if m != nil {
		return m.TeamB
	}
	return nil
}

func (m *GameRealTimeData) GetPlayerAInfo() []*RealTimePlayerObject {
	if m != nil {
		return m.PlayerAInfo
	}
	return nil
}

func (m *GameRealTimeData) GetPlayerBInfo() []*RealTimePlayerObject {
	if m != nil {
		return m.PlayerBInfo
	}
	return nil
}

func (m *GameRealTimeData) GetFirstTower() int32 {
	if m != nil && m.FirstTower != nil {
		return *m.FirstTower
	}
	return 0
}

func (m *GameRealTimeData) GetFirstSmallDragon() int32 {
	if m != nil && m.FirstSmallDragon != nil {
		return *m.FirstSmallDragon
	}
	return 0
}

func (m *GameRealTimeData) GetFirstFiveKill() int32 {
	if m != nil && m.FirstFiveKill != nil {
		return *m.FirstFiveKill
	}
	return 0
}

func (m *GameRealTimeData) GetFirstBigDragon() int32 {
	if m != nil && m.FirstBigDragon != nil {
		return *m.FirstBigDragon
	}
	return 0
}

func (m *GameRealTimeData) GetFirstTenKill() int32 {
	if m != nil && m.FirstTenKill != nil {
		return *m.FirstTenKill
	}
	return 0
}

//实时数据战队信息结构
type RealTimeTeamObject struct {
	//战队类型:blue蓝队、red:红队
	Faction *string `protobuf:"bytes,1,opt,name=faction" json:"faction,omitempty" bson:"faction,omitempty"`
	//击杀人头
	Score *int32 `protobuf:"varint,2,opt,name=score" json:"score,omitempty" bson:"score,omitempty"`
	//当前经济
	Glod *int32 `protobuf:"varint,3,opt,name=glod" json:"glod,omitempty" bson:"glod,omitempty"`
	//塔状态:推掉对方塔数
	TowerState *int32 `protobuf:"varint,4,opt,name=tower_state" json:"tower_state,omitempty" bson:"tower_state,omitempty"`
	//击杀小龙数
	Drakes *int32 `protobuf:"varint,5,opt,name=drakes" json:"drakes,omitempty" bson:"drakes,omitempty"`
	//击杀大龙数
	NahsorBarons *int32 `protobuf:"varint,6,opt,name=nahsor_barons" json:"nahsor_barons,omitempty" bson:"nahsor_barons,omitempty"`
	//选取的英雄
	PickInfos []*share_message.RealTimeHeroObject `protobuf:"bytes,7,rep,name=pickInfos" json:"pickInfos,omitempty" bson:"pickInfos,omitempty"`
	//禁用的英雄
	BanInfos []*share_message.RealTimeHeroObject `protobuf:"bytes,8,rep,name=banInfos" json:"banInfos,omitempty" bson:"banInfos,omitempty"`
	//经济曲线数据
	GoldTimeData         []*share_message.GoldTimeData `protobuf:"bytes,9,rep,name=gold_time_data" json:"gold_time_data,omitempty" bson:"gold_time_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-" bson:"-"`
	XXX_unrecognized     []byte                        `json:"-" bson:"-"`
	XXX_sizecache        int32                         `json:"-" bson:"-"`
}

func (m *RealTimeTeamObject) Reset()         { *m = RealTimeTeamObject{} }
func (m *RealTimeTeamObject) String() string { return proto.CompactTextString(m) }
func (*RealTimeTeamObject) ProtoMessage()    {}
func (*RealTimeTeamObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9383f2617796243, []int{19}
}
func (m *RealTimeTeamObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RealTimeTeamObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RealTimeTeamObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RealTimeTeamObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RealTimeTeamObject.Merge(m, src)
}
func (m *RealTimeTeamObject) XXX_Size() int {
	return m.Size()
}
func (m *RealTimeTeamObject) XXX_DiscardUnknown() {
	xxx_messageInfo_RealTimeTeamObject.DiscardUnknown(m)
}

var xxx_messageInfo_RealTimeTeamObject proto.InternalMessageInfo

func (m *RealTimeTeamObject) GetFaction() string {
	if m != nil && m.Faction != nil {
		return *m.Faction
	}
	return ""
}

func (m *RealTimeTeamObject) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *RealTimeTeamObject) GetGlod() int32 {
	if m != nil && m.Glod != nil {
		return *m.Glod
	}
	return 0
}

func (m *RealTimeTeamObject) GetTowerState() int32 {
	if m != nil && m.TowerState != nil {
		return *m.TowerState
	}
	return 0
}

func (m *RealTimeTeamObject) GetDrakes() int32 {
	if m != nil && m.Drakes != nil {
		return *m.Drakes
	}
	return 0
}

func (m *RealTimeTeamObject) GetNahsorBarons() int32 {
	if m != nil && m.NahsorBarons != nil {
		return *m.NahsorBarons
	}
	return 0
}

func (m *RealTimeTeamObject) GetPickInfos() []*share_message.RealTimeHeroObject {
	if m != nil {
		return m.PickInfos
	}
	return nil
}

func (m *RealTimeTeamObject) GetBanInfos() []*share_message.RealTimeHeroObject {
	if m != nil {
		return m.BanInfos
	}
	return nil
}

func (m *RealTimeTeamObject) GetGoldTimeData() []*share_message.GoldTimeData {
	if m != nil {
		return m.GoldTimeData
	}
	return nil
}

//实时数据中队员信息结构
type RealTimePlayerObject struct {
	//队员名称
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty" bson:"name,omitempty"`
	//队员使用英雄
	HeroInfo *share_message.RealTimeHeroObject `protobuf:"bytes,2,opt,name=heroInfo" json:"heroInfo,omitempty" bson:"heroInfo,omitempty"`
	//击杀(KDA中的K)
	Kills *int32 `protobuf:"varint,3,opt,name=kills" json:"kills,omitempty" bson:"kills,omitempty"`
	//死亡(KDA中的D)
	Death *int32 `protobuf:"varint,4,opt,name=death" json:"death,omitempty" bson:"death,omitempty"`
	//助攻(KDA中的A)
	Assists *int32 `protobuf:"varint,5,opt,name=assists" json:"assists,omitempty" bson:"assists,omitempty"`
	//队员的经济
	Gold *int32 `protobuf:"varint,6,opt,name=gold" json:"gold,omitempty" bson:"gold,omitempty"`
	//补刀数(WZRY没有值)
	Subsidy *int32 `protobuf:"varint,7,opt,name=subsidy" json:"subsidy,omitempty" bson:"subsidy,omitempty"`
	//装备栏道具
	ItemInfos []*share_message.RealTimeItemObject `protobuf:"bytes,8,rep,name=itemInfos" json:"itemInfos,omitempty" bson:"itemInfos,omitempty"`
	//队员照片
	Photo                *string  `protobuf:"bytes,9,opt,name=photo" json:"photo,omitempty" bson:"photo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RealTimePlayerObject) Reset()         { *m = RealTimePlayerObject{} }
func (m *RealTimePlayerObject) String() string { return proto.CompactTextString(m) }
func (*RealTimePlayerObject) ProtoMessage()    {}
func (*RealTimePlayerObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9383f2617796243, []int{20}
}
func (m *RealTimePlayerObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RealTimePlayerObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RealTimePlayerObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RealTimePlayerObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RealTimePlayerObject.Merge(m, src)
}
func (m *RealTimePlayerObject) XXX_Size() int {
	return m.Size()
}
func (m *RealTimePlayerObject) XXX_DiscardUnknown() {
	xxx_messageInfo_RealTimePlayerObject.DiscardUnknown(m)
}

var xxx_messageInfo_RealTimePlayerObject proto.InternalMessageInfo

func (m *RealTimePlayerObject) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *RealTimePlayerObject) GetHeroInfo() *share_message.RealTimeHeroObject {
	if m != nil {
		return m.HeroInfo
	}
	return nil
}

func (m *RealTimePlayerObject) GetKills() int32 {
	if m != nil && m.Kills != nil {
		return *m.Kills
	}
	return 0
}

func (m *RealTimePlayerObject) GetDeath() int32 {
	if m != nil && m.Death != nil {
		return *m.Death
	}
	return 0
}

func (m *RealTimePlayerObject) GetAssists() int32 {
	if m != nil && m.Assists != nil {
		return *m.Assists
	}
	return 0
}

func (m *RealTimePlayerObject) GetGold() int32 {
	if m != nil && m.Gold != nil {
		return *m.Gold
	}
	return 0
}

func (m *RealTimePlayerObject) GetSubsidy() int32 {
	if m != nil && m.Subsidy != nil {
		return *m.Subsidy
	}
	return 0
}

func (m *RealTimePlayerObject) GetItemInfos() []*share_message.RealTimeItemObject {
	if m != nil {
		return m.ItemInfos
	}
	return nil
}

func (m *RealTimePlayerObject) GetPhoto() string {
	if m != nil && m.Photo != nil {
		return *m.Photo
	}
	return ""
}

func init() {
	proto.RegisterEnum("client_hall.Game_Class", Game_Class_name, Game_Class_value)
	proto.RegisterType((*ESportGameListRequest)(nil), "client_hall.ESportGameListRequest")
	proto.RegisterType((*ESportGameObject)(nil), "client_hall.ESportGameObject")
	proto.RegisterType((*TeamObject)(nil), "client_hall.TeamObject")
	proto.RegisterType((*ESportGameListResult)(nil), "client_hall.ESportGameListResult")
	proto.RegisterType((*GameDetailRequest)(nil), "client_hall.GameDetailRequest")
	proto.RegisterType((*GameGuessCartRequestObj)(nil), "client_hall.GameGuessCartRequestObj")
	proto.RegisterType((*GameGuessCartRequest)(nil), "client_hall.GameGuessCartRequest")
	proto.RegisterType((*GameGuessCartResultObj)(nil), "client_hall.GameGuessCartResultObj")
	proto.RegisterType((*GameGuessCartResult)(nil), "client_hall.GameGuessCartResult")
	proto.RegisterType((*ESportGameDetailResult)(nil), "client_hall.ESportGameDetailResult")
	proto.RegisterType((*GameGuessBetRequest)(nil), "client_hall.GameGuessBetRequest")
	proto.RegisterType((*GameGuessBetObject)(nil), "client_hall.GameGuessBetObject")
	proto.RegisterType((*GameGuessBetResult)(nil), "client_hall.GameGuessBetResult")
	proto.RegisterType((*GameHistoryRequest)(nil), "client_hall.GameHistoryRequest")
	proto.RegisterType((*GameHistoryResult)(nil), "client_hall.GameHistoryResult")
	proto.RegisterType((*GameRealTimeRequest)(nil), "client_hall.GameRealTimeRequest")
	proto.RegisterType((*GameRealTimeResult)(nil), "client_hall.GameRealTimeResult")
	proto.RegisterType((*GameRounds)(nil), "client_hall.GameRounds")
	proto.RegisterType((*GameRealTimeData)(nil), "client_hall.GameRealTimeData")
	proto.RegisterType((*RealTimeTeamObject)(nil), "client_hall.RealTimeTeamObject")
	proto.RegisterType((*RealTimePlayerObject)(nil), "client_hall.RealTimePlayerObject")
}

func init() { proto.RegisterFile("sport_game_apply.proto", fileDescriptor_b9383f2617796243) }

var fileDescriptor_b9383f2617796243 = []byte{
	// 1519 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xdd, 0x6e, 0xdb, 0x46,
	0x16, 0x5e, 0x5a, 0x7f, 0xe6, 0xd1, 0x3f, 0xed, 0x38, 0xb4, 0x17, 0x71, 0x14, 0x66, 0x17, 0x6b,
	0x04, 0x58, 0x1b, 0x50, 0x76, 0x81, 0x60, 0xb3, 0x40, 0x60, 0x39, 0x4e, 0x2c, 0xac, 0x1d, 0x05,
	0xb2, 0x37, 0xc0, 0x66, 0x91, 0x12, 0x23, 0x71, 0x2c, 0x33, 0x21, 0x39, 0x32, 0x67, 0x94, 0xc6,
	0x7d, 0x81, 0xbc, 0x45, 0xfb, 0x02, 0x7d, 0x90, 0x5e, 0xb6, 0x6f, 0x50, 0xe4, 0xba, 0x37, 0xbd,
	0xee, 0x4d, 0x31, 0x67, 0x86, 0x92, 0x28, 0x4b, 0x96, 0xd1, 0xcb, 0x39, 0x3c, 0xbf, 0xdf, 0x7c,
	0xe7, 0xcc, 0x21, 0x6c, 0xf0, 0x21, 0x8b, 0x85, 0x3b, 0x20, 0x21, 0x75, 0xc9, 0x70, 0x18, 0x5c,
	0xed, 0x0e, 0x63, 0x26, 0x98, 0x55, 0xec, 0x07, 0x3e, 0x8d, 0x84, 0x7b, 0x41, 0x82, 0x60, 0xeb,
	0x29, 0x7e, 0xe6, 0x34, 0xfe, 0x48, 0xe3, 0x3d, 0xfc, 0xbe, 0xc7, 0x2f, 0x48, 0x4c, 0xdd, 0x90,
	0x72, 0x4e, 0x06, 0x74, 0x4f, 0x90, 0x5e, 0x40, 0x5d, 0x2e, 0xe2, 0x51, 0x5f, 0xb8, 0xf4, 0xef,
	0xe8, 0x93, 0x2b, 0x4f, 0x5b, 0xcd, 0x65, 0xc6, 0x14, 0xd5, 0x0f, 0x58, 0x18, 0xb2, 0x48, 0xdb,
	0x3c, 0xfb, 0x43, 0x01, 0x5d, 0x32, 0xf4, 0x95, 0x03, 0xe7, 0xb3, 0x01, 0x77, 0x0e, 0x4f, 0xa5,
	0xf4, 0x25, 0x09, 0xe9, 0xb1, 0xcf, 0x45, 0x97, 0x5e, 0x8e, 0x28, 0x17, 0x56, 0x1d, 0xcc, 0x63,
	0xd2, 0xa3, 0xc1, 0xd9, 0xd5, 0x90, 0xda, 0x46, 0xc3, 0xd8, 0xc9, 0x59, 0x55, 0x28, 0xa0, 0xa8,
	0xed, 0xd9, 0x2b, 0x0d, 0x63, 0x27, 0x63, 0x3d, 0x02, 0x53, 0x9a, 0x1d, 0x04, 0x84, 0x73, 0x3b,
	0xd3, 0x30, 0x76, 0x2a, 0xcd, 0xbb, 0xbb, 0x53, 0x80, 0xec, 0xca, 0xaf, 0x2e, 0x7e, 0xb6, 0x4a,
	0x90, 0x7d, 0x4d, 0x06, 0xd4, 0xce, 0xa2, 0xab, 0x1a, 0xac, 0xca, 0xd3, 0xa9, 0xff, 0x0d, 0xb5,
	0x73, 0x52, 0xe2, 0x7c, 0xce, 0x40, 0x6d, 0x92, 0x49, 0xa7, 0xf7, 0x9e, 0xf6, 0x85, 0xb5, 0x0e,
	0xa5, 0xff, 0x46, 0xfe, 0xe5, 0x88, 0x4a, 0x59, 0xdb, 0xc3, 0x3c, 0x32, 0xd2, 0x18, 0xcf, 0x7d,
	0x16, 0x61, 0x22, 0x66, 0x22, 0x79, 0x45, 0x42, 0x8a, 0x79, 0x98, 0x32, 0xb5, 0x33, 0x4a, 0xc2,
	0xfd, 0x76, 0x74, 0xce, 0x30, 0x66, 0x71, 0x26, 0x35, 0xf9, 0x55, 0x47, 0xa9, 0x40, 0xfe, 0xb4,
	0xcf, 0x62, 0xba, 0x8f, 0xa9, 0x98, 0xe3, 0x73, 0xcb, 0xce, 0x4f, 0xfb, 0x6a, 0xa1, 0xaf, 0xc2,
	0xcd, 0xbe, 0xea, 0x60, 0xb6, 0xe8, 0xc0, 0x8f, 0xce, 0xfc, 0x90, 0xda, 0xab, 0x98, 0xee, 0x3a,
	0x94, 0xc6, 0xa2, 0x53, 0x11, 0xdb, 0x26, 0x3a, 0xb5, 0x00, 0x64, 0xca, 0xa7, 0x82, 0x88, 0x11,
	0xb7, 0x21, 0x29, 0xe3, 0x88, 0x7c, 0xa4, 0x5d, 0x16, 0x04, 0x76, 0x11, 0x71, 0xba, 0x03, 0x65,
	0x29, 0x79, 0xe3, 0x7b, 0x94, 0x1d, 0x91, 0x20, 0xb0, 0x4b, 0x28, 0xb6, 0x00, 0xf6, 0x87, 0xc3,
	0xe4, 0x32, 0xca, 0x28, 0xab, 0x83, 0xb9, 0x3f, 0xf4, 0x3b, 0xb1, 0x3f, 0xf0, 0x23, 0xbb, 0x82,
	0xa2, 0x0a, 0xe4, 0x35, 0x70, 0x55, 0xf4, 0x5f, 0x07, 0xb3, 0xcd, 0x8f, 0x99, 0x10, 0x34, 0xbe,
	0xb2, 0x6b, 0x89, 0xd5, 0x91, 0xcf, 0x05, 0x8b, 0xaf, 0xda, 0x9e, 0x5d, 0x97, 0xf9, 0x3a, 0x4f,
	0x00, 0xd2, 0xe0, 0xc8, 0x93, 0x06, 0xdf, 0x94, 0xf7, 0x88, 0x30, 0xaf, 0x24, 0x27, 0xbc, 0x06,
	0x04, 0xdd, 0xb9, 0x84, 0xf5, 0x59, 0x32, 0xf1, 0x51, 0x20, 0xa4, 0xd6, 0x01, 0xf3, 0x12, 0x1a,
	0x15, 0x21, 0x73, 0xc2, 0x07, 0xda, 0x41, 0x19, 0x72, 0x67, 0x4c, 0x90, 0x00, 0x3d, 0xe4, 0xac,
	0x3d, 0x75, 0x91, 0xd2, 0xd6, 0xce, 0x36, 0x32, 0x3b, 0xc5, 0xe6, 0xbd, 0x14, 0xd2, 0xb3, 0x0c,
	0x71, 0x9e, 0x42, 0x5d, 0x9e, 0x9e, 0x53, 0x41, 0xfc, 0x20, 0xe1, 0xee, 0x42, 0xda, 0xbc, 0x66,
	0x41, 0xf0, 0x22, 0x20, 0x2a, 0x78, 0xce, 0xf9, 0xde, 0x80, 0xbb, 0x52, 0xe5, 0xe5, 0x88, 0x72,
	0x7e, 0x40, 0xe2, 0x84, 0xfc, 0x9d, 0xde, 0xfb, 0x05, 0x3e, 0xd2, 0xc0, 0xaf, 0x5c, 0x07, 0x3e,
	0x33, 0x03, 0x7c, 0x16, 0xab, 0xdc, 0x84, 0xfa, 0xc4, 0x19, 0x46, 0x6b, 0x7b, 0x48, 0xb6, 0x8c,
	0x54, 0x6d, 0x51, 0xf1, 0x6a, 0x14, 0x6a, 0xb2, 0x6d, 0x42, 0xfd, 0x84, 0xc5, 0x91, 0xe4, 0x00,
	0x2a, 0x62, 0xba, 0x05, 0x4c, 0xf7, 0x14, 0xd6, 0xe7, 0x65, 0x6b, 0x3d, 0x85, 0xf2, 0x20, 0x91,
	0xf1, 0x2e, 0xbd, 0xb4, 0x0d, 0x44, 0xee, 0x2f, 0xd7, 0x5a, 0x71, 0x4e, 0x9d, 0x0e, 0x87, 0x8d,
	0x99, 0x4f, 0xf2, 0xca, 0x16, 0x23, 0x30, 0xc9, 0x77, 0xcc, 0x80, 0x8e, 0xe7, 0x71, 0xdd, 0x76,
	0x69, 0x56, 0x67, 0x13, 0xd6, 0xb5, 0xa8, 0xd0, 0x22, 0xec, 0x30, 0x27, 0x80, 0xb5, 0x39, 0x41,
	0x6f, 0xe2, 0xc9, 0xbf, 0x52, 0x35, 0x72, 0x61, 0x67, 0xb0, 0xc6, 0x87, 0x37, 0xd5, 0xa8, 0x0b,
	0x71, 0x7e, 0x35, 0x60, 0x63, 0x42, 0x9c, 0x84, 0x2a, 0xcb, 0x22, 0xfe, 0x13, 0x2a, 0x13, 0xf5,
	0x23, 0x4a, 0x3c, 0x2c, 0x71, 0x19, 0x21, 0x65, 0xb5, 0x27, 0xe4, 0xd3, 0x7e, 0xc8, 0x46, 0x91,
	0x40, 0x00, 0x32, 0x37, 0xdd, 0xfe, 0xdc, 0xdb, 0xce, 0x63, 0x32, 0xff, 0xd6, 0x15, 0x4b, 0x74,
	0x5f, 0x8d, 0x42, 0x6e, 0x17, 0xb0, 0xe2, 0xbf, 0xee, 0xa6, 0x26, 0xfc, 0xa4, 0x66, 0xad, 0xa7,
	0xfb, 0xa2, 0x3d, 0x85, 0x70, 0x8b, 0x8e, 0xa9, 0xd2, 0x04, 0x73, 0xa0, 0x45, 0x5c, 0xd3, 0xe4,
	0xfe, 0x7c, 0x08, 0x5b, 0x54, 0x68, 0x57, 0xbf, 0x19, 0x60, 0x5d, 0x17, 0x2f, 0xa0, 0xc7, 0xdc,
	0x82, 0x54, 0x9f, 0xcc, 0x85, 0x21, 0x93, 0xb4, 0xe6, 0x20, 0x99, 0xdf, 0x63, 0xd2, 0x08, 0x39,
	0xbf, 0x51, 0x94, 0x9b, 0x16, 0xb5, 0x50, 0x94, 0x4f, 0xa6, 0x47, 0x8b, 0x8a, 0xb6, 0x87, 0x0d,
	0x82, 0xf3, 0xb3, 0x45, 0xc5, 0x99, 0x2f, 0x02, 0x35, 0x7b, 0xcd, 0x29, 0xb6, 0xaa, 0xa9, 0x5b,
	0x85, 0x82, 0x3c, 0x4b, 0x0f, 0x90, 0xa2, 0x6f, 0x71, 0x8a, 0xaa, 0xfa, 0xf2, 0x4a, 0x38, 0x0d,
	0x5b, 0xe9, 0xe2, 0x97, 0xf3, 0x26, 0x45, 0x00, 0x2c, 0xcf, 0xf9, 0x9b, 0xf2, 0xa1, 0x07, 0xed,
	0xd4, 0x0b, 0x3b, 0x19, 0xbd, 0x88, 0x9e, 0xf3, 0x56, 0x4d, 0xb3, 0xb1, 0xe2, 0xb2, 0x58, 0x8f,
	0xa0, 0x70, 0xe4, 0xf3, 0xe7, 0x44, 0x10, 0x4d, 0xce, 0xcd, 0x19, 0x76, 0x74, 0x69, 0x9f, 0x46,
	0x42, 0x2a, 0x38, 0xcf, 0x14, 0x23, 0xba, 0x94, 0x04, 0xf2, 0x25, 0xba, 0x79, 0x56, 0x5a, 0x00,
	0xb8, 0x5a, 0xc4, 0x6c, 0x14, 0xe9, 0x39, 0xe7, 0x7c, 0x52, 0x55, 0x4c, 0x1c, 0x2c, 0xcb, 0xee,
	0x31, 0x94, 0x12, 0xe5, 0xa9, 0x14, 0xef, 0x5d, 0xe3, 0xdb, 0xb4, 0x52, 0x12, 0xb9, 0x2b, 0x03,
	0xab, 0x09, 0x92, 0x73, 0x1a, 0x6a, 0xaa, 0x28, 0x59, 0x32, 0x63, 0xb4, 0x06, 0xc6, 0x75, 0xbe,
	0xcb, 0x40, 0x6d, 0x91, 0x2b, 0x5d, 0x84, 0x4a, 0x70, 0x0d, 0x8a, 0x6a, 0x67, 0x52, 0xe3, 0x68,
	0x25, 0xd9, 0x46, 0xbc, 0x51, 0x4c, 0x84, 0xcf, 0xa2, 0xf1, 0x3b, 0x94, 0x97, 0x5c, 0x73, 0x89,
	0xde, 0x1d, 0xd2, 0x4d, 0x92, 0x44, 0x99, 0x7a, 0x26, 0x13, 0x83, 0x1e, 0x92, 0xf5, 0x16, 0x06,
	0x4f, 0xa0, 0x3c, 0x0c, 0xc8, 0x15, 0x8d, 0x5d, 0xe2, 0xfa, 0x72, 0xb1, 0xc8, 0x63, 0x37, 0x3e,
	0x98, 0x6b, 0xf7, 0x1a, 0x35, 0xaf, 0x59, 0xf6, 0x94, 0x65, 0xe1, 0xb6, 0x96, 0x6b, 0x50, 0x3c,
	0xf7, 0x63, 0x2e, 0x5c, 0xc1, 0xbe, 0xa6, 0x31, 0xb6, 0x48, 0xce, 0xda, 0x02, 0x4b, 0x09, 0x79,
	0x48, 0x82, 0xc0, 0xf5, 0x62, 0x32, 0x60, 0x11, 0xb6, 0x4b, 0xce, 0xba, 0x0b, 0x55, 0xf5, 0xed,
	0xdc, 0xff, 0x48, 0xdd, 0x0f, 0x7e, 0x10, 0x60, 0xdb, 0xe4, 0x2c, 0x1b, 0x6a, 0xea, 0x43, 0xcf,
	0x1f, 0x24, 0x26, 0x6a, 0x63, 0xd9, 0x80, 0x8a, 0x8e, 0x41, 0x23, 0x65, 0x81, 0x2b, 0x8b, 0xf3,
	0xed, 0x0a, 0x58, 0x73, 0x60, 0xa8, 0x42, 0xe1, 0x9c, 0xf4, 0x11, 0x79, 0x23, 0x69, 0x69, 0x2e,
	0x97, 0x2f, 0x7d, 0x35, 0x25, 0xc8, 0x0e, 0x02, 0xe6, 0xe9, 0x6b, 0x59, 0x83, 0x22, 0xa6, 0x8e,
	0xd7, 0x97, 0xec, 0x92, 0x15, 0xc8, 0x7b, 0x31, 0xf9, 0x40, 0xd5, 0xe3, 0x82, 0x3b, 0x53, 0x44,
	0x2e, 0x38, 0x8b, 0xdd, 0x1e, 0x89, 0x59, 0xc4, 0xf5, 0x3c, 0xfd, 0x07, 0x98, 0x43, 0xbf, 0xff,
	0x41, 0x2e, 0x71, 0x7c, 0x0c, 0xd9, 0x6c, 0xb7, 0xa8, 0xfc, 0x8e, 0x68, 0xcc, 0x74, 0x7e, 0x8f,
	0x61, 0xb5, 0x47, 0x22, 0x65, 0xb4, 0x7a, 0x7b, 0xa3, 0xca, 0x80, 0x05, 0x9e, 0x2b, 0xfc, 0x90,
	0xba, 0x9e, 0xa4, 0xbe, 0x89, 0xa6, 0x7f, 0x9e, 0x9d, 0xdd, 0x2c, 0xf0, 0x12, 0xb6, 0x3a, 0xbf,
	0x18, 0xb0, 0x3e, 0xf7, 0xd6, 0x4a, 0x90, 0x8d, 0xe4, 0xc0, 0x32, 0x74, 0x53, 0xad, 0x5e, 0xd0,
	0x98, 0xe1, 0x2e, 0xba, 0x82, 0x54, 0xbb, 0x45, 0x42, 0x65, 0xc8, 0xc9, 0xab, 0xe0, 0x1a, 0xc6,
	0x32, 0xe4, 0x3c, 0x4a, 0xc4, 0x85, 0x06, 0xb0, 0x0a, 0x05, 0xc2, 0xb9, 0xcf, 0x45, 0x82, 0xa0,
	0x04, 0x9d, 0x05, 0x9e, 0x06, 0xae, 0x0a, 0x05, 0x3e, 0xea, 0x71, 0xdf, 0xbb, 0x52, 0x7b, 0x88,
	0x44, 0xd2, 0x17, 0x34, 0xbc, 0x0d, 0x28, 0x6d, 0x41, 0xc3, 0x49, 0x0e, 0xc3, 0x0b, 0x26, 0x98,
	0x9a, 0xc4, 0x8f, 0xfe, 0xa3, 0xba, 0x58, 0xff, 0x1d, 0x54, 0x00, 0x5e, 0xee, 0x9f, 0x1c, 0xba,
	0x67, 0x9d, 0xe7, 0xfb, 0xff, 0xab, 0xfd, 0xc9, 0xaa, 0x42, 0x11, 0xcf, 0xad, 0xc3, 0x17, 0x9d,
	0xee, 0x61, 0xcd, 0xb0, 0xca, 0x60, 0xa2, 0xa0, 0xdb, 0x39, 0x3e, 0xae, 0xad, 0x8c, 0x8f, 0x9d,
	0x37, 0x87, 0xdd, 0x5a, 0xa6, 0xf9, 0x53, 0x16, 0xac, 0x03, 0x64, 0x7f, 0x53, 0x3d, 0xc8, 0x5c,
	0xfa, 0xb6, 0xde, 0xc1, 0x7a, 0x77, 0xd8, 0xd7, 0x4f, 0x34, 0x1d, 0x6f, 0xa5, 0x96, 0xb3, 0xe0,
	0x09, 0x9f, 0xfa, 0xff, 0xd9, 0x7a, 0x70, 0xa3, 0x0e, 0x8e, 0xbe, 0x77, 0xb0, 0x31, 0xeb, 0x5e,
	0x6d, 0x0b, 0xd6, 0xf6, 0xb5, 0x19, 0x97, 0x5a, 0x50, 0xb7, 0x1e, 0x2e, 0x70, 0x9e, 0xda, 0x4d,
	0x3c, 0xb8, 0x37, 0xeb, 0x7e, 0xbc, 0xdc, 0xc8, 0x45, 0xd6, 0x7a, 0xb0, 0x74, 0xc1, 0xdb, 0x6a,
	0x2c, 0xdb, 0x8f, 0xac, 0xb7, 0x70, 0x67, 0x12, 0x65, 0xea, 0xa1, 0xb3, 0x1a, 0x0b, 0xf7, 0x82,
	0xc4, 0xf9, 0xfd, 0x1b, 0x34, 0xd0, 0xf7, 0xff, 0xc1, 0x4e, 0xf9, 0xd6, 0xef, 0x1a, 0x0e, 0xe7,
	0xeb, 0xc6, 0xe9, 0xe7, 0x71, 0x6b, 0x7b, 0xb1, 0x02, 0x3a, 0xff, 0x0a, 0x36, 0x53, 0xce, 0x53,
	0xa3, 0xbf, 0xb1, 0xf0, 0x91, 0x59, 0x9c, 0x7c, 0xfa, 0x61, 0x6b, 0xae, 0x83, 0x35, 0xc5, 0xa5,
	0xa6, 0xa2, 0x57, 0xab, 0xf4, 0xc3, 0x97, 0x6d, 0xe3, 0xc7, 0x2f, 0xdb, 0xc6, 0xcf, 0x5f, 0xb6,
	0x8d, 0xdf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x65, 0x0b, 0x2b, 0x16, 0x10, 0x00, 0x00,
}

func (m *ESportGameListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportGameListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LabelType != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.LabelType))
	}
	if m.LabelId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.LabelId))
	}
	if m.GameClass != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.GameClass))
	}
	if m.Page != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.Page))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESportGameObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportGameObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UniqueGameId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.UniqueGameId))
	}
	if m.GameIcon != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.GameIcon)))
		i += copy(dAtA[i:], *m.GameIcon)
	}
	if m.GameName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.GameName)))
		i += copy(dAtA[i:], *m.GameName)
	}
	if m.TeamAInfo != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(m.TeamAInfo.Size()))
		n1, err := m.TeamAInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.ScoreA != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.ScoreA)))
		i += copy(dAtA[i:], *m.ScoreA)
	}
	if m.ScoreB != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.ScoreB)))
		i += copy(dAtA[i:], *m.ScoreB)
	}
	if m.TeamBInfo != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(m.TeamBInfo.Size()))
		n2, err := m.TeamBInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.BeginTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.BeginTime))
	}
	if m.BeginTimeStr != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.BeginTimeStr)))
		i += copy(dAtA[i:], *m.BeginTimeStr)
	}
	if m.GameStatus != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.GameStatus)))
		i += copy(dAtA[i:], *m.GameStatus)
	}
	if m.HaveRoll != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.HaveRoll))
	}
	if m.HaveVideoHall != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.HaveVideoHall))
	}
	if m.AppLabelId != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.AppLabelId))
	}
	if m.ApiOrigin != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.ApiOrigin))
	}
	if m.GameId != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.GameId)))
		i += copy(dAtA[i:], *m.GameId)
	}
	if m.IsLottery != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.IsLottery))
	}
	if m.HistoryId != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.HistoryId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TeamObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TeamId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.TeamId)))
		i += copy(dAtA[i:], *m.TeamId)
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Icon != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.Icon)))
		i += copy(dAtA[i:], *m.Icon)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESportGameListResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportGameListResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.Code))
	}
	if m.Msg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.Msg)))
		i += copy(dAtA[i:], *m.Msg)
	}
	if m.Total != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.Total))
	}
	if len(m.GameList) > 0 {
		for _, msg := range m.GameList {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSportGameApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameDetailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameDetailRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UniqueGameId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.UniqueGameId))
	}
	if m.PollFlag != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.PollFlag))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameGuessCartRequestObj) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameGuessCartRequestObj) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UniqueGameId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.UniqueGameId))
	}
	if m.AppLabelId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.AppLabelId))
	}
	if m.ApiOrigin != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.ApiOrigin))
	}
	if m.GameId != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.GameId)))
		i += copy(dAtA[i:], *m.GameId)
	}
	if m.UniqueGameGuessId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.UniqueGameGuessId))
	}
	if m.BetNum != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.BetNum)))
		i += copy(dAtA[i:], *m.BetNum)
	}
	if m.MornRollGuessFlag != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.MornRollGuessFlag))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameGuessCartRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameGuessCartRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GuessCartsReq) > 0 {
		for _, msg := range m.GuessCartsReq {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSportGameApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameGuessCartResultObj) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameGuessCartResultObj) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UniqueGameId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.UniqueGameId))
	}
	if m.BetNum != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.BetNum)))
		i += copy(dAtA[i:], *m.BetNum)
	}
	if m.Odds != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.Odds)))
		i += copy(dAtA[i:], *m.Odds)
	}
	if m.GameStatus != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.GameStatus)))
		i += copy(dAtA[i:], *m.GameStatus)
	}
	if m.BetStatus != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.BetStatus)))
		i += copy(dAtA[i:], *m.BetStatus)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameGuessCartResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameGuessCartResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.Code))
	}
	if m.Msg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.Msg)))
		i += copy(dAtA[i:], *m.Msg)
	}
	if len(m.GuessCartsRst) > 0 {
		for _, msg := range m.GuessCartsRst {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSportGameApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESportGameDetailResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportGameDetailResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.Code))
	}
	if m.Msg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.Msg)))
		i += copy(dAtA[i:], *m.Msg)
	}
	if m.GameDetailHead != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(m.GameDetailHead.Size()))
		n3, err := m.GameDetailHead.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.MaxAmount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.MaxAmount))
	}
	if m.UniqueGameGuessId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.UniqueGameGuessId))
	}
	if m.MornRollGuessFlag != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.MornRollGuessFlag))
	}
	if len(m.GuessOddsNums) > 0 {
		for _, msg := range m.GuessOddsNums {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintSportGameApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameGuessBetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameGuessBetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GuessBets) > 0 {
		for _, msg := range m.GuessBets {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSportGameApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameGuessBetObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameGuessBetObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UniqueGameId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.UniqueGameId))
	}
	if m.MornRollGuessFlag != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.MornRollGuessFlag))
	}
	if m.UniqueGameGuessId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.UniqueGameGuessId))
	}
	if m.GameName != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.GameName)))
		i += copy(dAtA[i:], *m.GameName)
	}
	if m.TeamAName != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.TeamAName)))
		i += copy(dAtA[i:], *m.TeamAName)
	}
	if m.TeamBName != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.TeamBName)))
		i += copy(dAtA[i:], *m.TeamBName)
	}
	if m.BetId != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.BetId)))
		i += copy(dAtA[i:], *m.BetId)
	}
	if m.BetTitle != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.BetTitle)))
		i += copy(dAtA[i:], *m.BetTitle)
	}
	if m.BetNum != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.BetNum)))
		i += copy(dAtA[i:], *m.BetNum)
	}
	if m.BetName != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.BetName)))
		i += copy(dAtA[i:], *m.BetName)
	}
	if m.Odds != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.Odds)))
		i += copy(dAtA[i:], *m.Odds)
	}
	if m.BetAmount != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.BetAmount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameGuessBetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameGuessBetResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.Code))
	}
	if m.Msg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.Msg)))
		i += copy(dAtA[i:], *m.Msg)
	}
	if m.MaxAmount != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.MaxAmount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HistoryId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.HistoryId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameHistoryResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameHistoryResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.Code))
	}
	if m.Msg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.Msg)))
		i += copy(dAtA[i:], *m.Msg)
	}
	if m.HisData != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(m.HisData.Size()))
		n4, err := m.HisData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameRealTimeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameRealTimeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UniqueGameId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.UniqueGameId))
	}
	if m.GameRound != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.GameRound))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameRealTimeResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameRealTimeResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.Code))
	}
	if m.Msg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.Msg)))
		i += copy(dAtA[i:], *m.Msg)
	}
	if m.RealTimeData != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(m.RealTimeData.Size()))
		n5, err := m.RealTimeData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.GameRounds != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.GameRounds))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameRounds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameRounds) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GameRounds != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.GameRounds))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameRealTimeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameRealTimeData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GameRound != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.GameRound))
	}
	if m.GameStatus != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.GameStatus))
	}
	if m.Duration != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.Duration))
	}
	if m.TeamA != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(m.TeamA.Size()))
		n6, err := m.TeamA.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.TeamB != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(m.TeamB.Size()))
		n7, err := m.TeamB.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.PlayerAInfo) > 0 {
		for _, msg := range m.PlayerAInfo {
			dAtA[i] = 0x32
			i++
			i = encodeVarintSportGameApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PlayerBInfo) > 0 {
		for _, msg := range m.PlayerBInfo {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintSportGameApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.FirstTower != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.FirstTower))
	}
	if m.FirstSmallDragon != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.FirstSmallDragon))
	}
	if m.FirstFiveKill != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.FirstFiveKill))
	}
	if m.FirstBigDragon != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.FirstBigDragon))
	}
	if m.FirstTenKill != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.FirstTenKill))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RealTimeTeamObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RealTimeTeamObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Faction != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.Faction)))
		i += copy(dAtA[i:], *m.Faction)
	}
	if m.Score != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.Score))
	}
	if m.Glod != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.Glod))
	}
	if m.TowerState != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.TowerState))
	}
	if m.Drakes != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.Drakes))
	}
	if m.NahsorBarons != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.NahsorBarons))
	}
	if len(m.PickInfos) > 0 {
		for _, msg := range m.PickInfos {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintSportGameApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.BanInfos) > 0 {
		for _, msg := range m.BanInfos {
			dAtA[i] = 0x42
			i++
			i = encodeVarintSportGameApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GoldTimeData) > 0 {
		for _, msg := range m.GoldTimeData {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintSportGameApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RealTimePlayerObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RealTimePlayerObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.HeroInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(m.HeroInfo.Size()))
		n8, err := m.HeroInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Kills != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.Kills))
	}
	if m.Death != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.Death))
	}
	if m.Assists != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.Assists))
	}
	if m.Gold != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.Gold))
	}
	if m.Subsidy != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(*m.Subsidy))
	}
	if len(m.ItemInfos) > 0 {
		for _, msg := range m.ItemInfos {
			dAtA[i] = 0x42
			i++
			i = encodeVarintSportGameApply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Photo != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSportGameApply(dAtA, i, uint64(len(*m.Photo)))
		i += copy(dAtA[i:], *m.Photo)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSportGameApply(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ESportGameListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LabelType != nil {
		n += 1 + sovSportGameApply(uint64(*m.LabelType))
	}
	if m.LabelId != nil {
		n += 1 + sovSportGameApply(uint64(*m.LabelId))
	}
	if m.GameClass != nil {
		n += 1 + sovSportGameApply(uint64(*m.GameClass))
	}
	if m.Page != nil {
		n += 1 + sovSportGameApply(uint64(*m.Page))
	}
	if m.PageSize != nil {
		n += 1 + sovSportGameApply(uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESportGameObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UniqueGameId != nil {
		n += 1 + sovSportGameApply(uint64(*m.UniqueGameId))
	}
	if m.GameIcon != nil {
		l = len(*m.GameIcon)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.GameName != nil {
		l = len(*m.GameName)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.TeamAInfo != nil {
		l = m.TeamAInfo.Size()
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.ScoreA != nil {
		l = len(*m.ScoreA)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.ScoreB != nil {
		l = len(*m.ScoreB)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.TeamBInfo != nil {
		l = m.TeamBInfo.Size()
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.BeginTime != nil {
		n += 1 + sovSportGameApply(uint64(*m.BeginTime))
	}
	if m.BeginTimeStr != nil {
		l = len(*m.BeginTimeStr)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.GameStatus != nil {
		l = len(*m.GameStatus)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.HaveRoll != nil {
		n += 1 + sovSportGameApply(uint64(*m.HaveRoll))
	}
	if m.HaveVideoHall != nil {
		n += 1 + sovSportGameApply(uint64(*m.HaveVideoHall))
	}
	if m.AppLabelId != nil {
		n += 1 + sovSportGameApply(uint64(*m.AppLabelId))
	}
	if m.ApiOrigin != nil {
		n += 1 + sovSportGameApply(uint64(*m.ApiOrigin))
	}
	if m.GameId != nil {
		l = len(*m.GameId)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.IsLottery != nil {
		n += 2 + sovSportGameApply(uint64(*m.IsLottery))
	}
	if m.HistoryId != nil {
		n += 2 + sovSportGameApply(uint64(*m.HistoryId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeamObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamId != nil {
		l = len(*m.TeamId)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.Icon != nil {
		l = len(*m.Icon)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESportGameListResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != nil {
		n += 1 + sovSportGameApply(uint64(*m.Code))
	}
	if m.Msg != nil {
		l = len(*m.Msg)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.Total != nil {
		n += 1 + sovSportGameApply(uint64(*m.Total))
	}
	if len(m.GameList) > 0 {
		for _, e := range m.GameList {
			l = e.Size()
			n += 1 + l + sovSportGameApply(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameDetailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UniqueGameId != nil {
		n += 1 + sovSportGameApply(uint64(*m.UniqueGameId))
	}
	if m.PollFlag != nil {
		n += 1 + sovSportGameApply(uint64(*m.PollFlag))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameGuessCartRequestObj) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UniqueGameId != nil {
		n += 1 + sovSportGameApply(uint64(*m.UniqueGameId))
	}
	if m.AppLabelId != nil {
		n += 1 + sovSportGameApply(uint64(*m.AppLabelId))
	}
	if m.ApiOrigin != nil {
		n += 1 + sovSportGameApply(uint64(*m.ApiOrigin))
	}
	if m.GameId != nil {
		l = len(*m.GameId)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.UniqueGameGuessId != nil {
		n += 1 + sovSportGameApply(uint64(*m.UniqueGameGuessId))
	}
	if m.BetNum != nil {
		l = len(*m.BetNum)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.MornRollGuessFlag != nil {
		n += 1 + sovSportGameApply(uint64(*m.MornRollGuessFlag))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameGuessCartRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GuessCartsReq) > 0 {
		for _, e := range m.GuessCartsReq {
			l = e.Size()
			n += 1 + l + sovSportGameApply(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameGuessCartResultObj) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UniqueGameId != nil {
		n += 1 + sovSportGameApply(uint64(*m.UniqueGameId))
	}
	if m.BetNum != nil {
		l = len(*m.BetNum)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.Odds != nil {
		l = len(*m.Odds)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.GameStatus != nil {
		l = len(*m.GameStatus)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.BetStatus != nil {
		l = len(*m.BetStatus)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameGuessCartResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != nil {
		n += 1 + sovSportGameApply(uint64(*m.Code))
	}
	if m.Msg != nil {
		l = len(*m.Msg)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if len(m.GuessCartsRst) > 0 {
		for _, e := range m.GuessCartsRst {
			l = e.Size()
			n += 1 + l + sovSportGameApply(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESportGameDetailResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != nil {
		n += 1 + sovSportGameApply(uint64(*m.Code))
	}
	if m.Msg != nil {
		l = len(*m.Msg)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.GameDetailHead != nil {
		l = m.GameDetailHead.Size()
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.MaxAmount != nil {
		n += 1 + sovSportGameApply(uint64(*m.MaxAmount))
	}
	if m.UniqueGameGuessId != nil {
		n += 1 + sovSportGameApply(uint64(*m.UniqueGameGuessId))
	}
	if m.MornRollGuessFlag != nil {
		n += 1 + sovSportGameApply(uint64(*m.MornRollGuessFlag))
	}
	if len(m.GuessOddsNums) > 0 {
		for _, e := range m.GuessOddsNums {
			l = e.Size()
			n += 1 + l + sovSportGameApply(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameGuessBetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GuessBets) > 0 {
		for _, e := range m.GuessBets {
			l = e.Size()
			n += 1 + l + sovSportGameApply(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameGuessBetObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UniqueGameId != nil {
		n += 1 + sovSportGameApply(uint64(*m.UniqueGameId))
	}
	if m.MornRollGuessFlag != nil {
		n += 1 + sovSportGameApply(uint64(*m.MornRollGuessFlag))
	}
	if m.UniqueGameGuessId != nil {
		n += 1 + sovSportGameApply(uint64(*m.UniqueGameGuessId))
	}
	if m.GameName != nil {
		l = len(*m.GameName)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.TeamAName != nil {
		l = len(*m.TeamAName)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.TeamBName != nil {
		l = len(*m.TeamBName)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.BetId != nil {
		l = len(*m.BetId)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.BetTitle != nil {
		l = len(*m.BetTitle)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.BetNum != nil {
		l = len(*m.BetNum)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.BetName != nil {
		l = len(*m.BetName)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.Odds != nil {
		l = len(*m.Odds)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.BetAmount != nil {
		n += 1 + sovSportGameApply(uint64(*m.BetAmount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameGuessBetResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != nil {
		n += 1 + sovSportGameApply(uint64(*m.Code))
	}
	if m.Msg != nil {
		l = len(*m.Msg)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.MaxAmount != nil {
		n += 1 + sovSportGameApply(uint64(*m.MaxAmount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HistoryId != nil {
		n += 1 + sovSportGameApply(uint64(*m.HistoryId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameHistoryResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != nil {
		n += 1 + sovSportGameApply(uint64(*m.Code))
	}
	if m.Msg != nil {
		l = len(*m.Msg)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.HisData != nil {
		l = m.HisData.Size()
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameRealTimeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UniqueGameId != nil {
		n += 1 + sovSportGameApply(uint64(*m.UniqueGameId))
	}
	if m.GameRound != nil {
		n += 1 + sovSportGameApply(uint64(*m.GameRound))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameRealTimeResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != nil {
		n += 1 + sovSportGameApply(uint64(*m.Code))
	}
	if m.Msg != nil {
		l = len(*m.Msg)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.RealTimeData != nil {
		l = m.RealTimeData.Size()
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.GameRounds != nil {
		n += 1 + sovSportGameApply(uint64(*m.GameRounds))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameRounds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameRounds != nil {
		n += 1 + sovSportGameApply(uint64(*m.GameRounds))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameRealTimeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameRound != nil {
		n += 1 + sovSportGameApply(uint64(*m.GameRound))
	}
	if m.GameStatus != nil {
		n += 1 + sovSportGameApply(uint64(*m.GameStatus))
	}
	if m.Duration != nil {
		n += 1 + sovSportGameApply(uint64(*m.Duration))
	}
	if m.TeamA != nil {
		l = m.TeamA.Size()
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.TeamB != nil {
		l = m.TeamB.Size()
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if len(m.PlayerAInfo) > 0 {
		for _, e := range m.PlayerAInfo {
			l = e.Size()
			n += 1 + l + sovSportGameApply(uint64(l))
		}
	}
	if len(m.PlayerBInfo) > 0 {
		for _, e := range m.PlayerBInfo {
			l = e.Size()
			n += 1 + l + sovSportGameApply(uint64(l))
		}
	}
	if m.FirstTower != nil {
		n += 1 + sovSportGameApply(uint64(*m.FirstTower))
	}
	if m.FirstSmallDragon != nil {
		n += 1 + sovSportGameApply(uint64(*m.FirstSmallDragon))
	}
	if m.FirstFiveKill != nil {
		n += 1 + sovSportGameApply(uint64(*m.FirstFiveKill))
	}
	if m.FirstBigDragon != nil {
		n += 1 + sovSportGameApply(uint64(*m.FirstBigDragon))
	}
	if m.FirstTenKill != nil {
		n += 1 + sovSportGameApply(uint64(*m.FirstTenKill))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RealTimeTeamObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Faction != nil {
		l = len(*m.Faction)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.Score != nil {
		n += 1 + sovSportGameApply(uint64(*m.Score))
	}
	if m.Glod != nil {
		n += 1 + sovSportGameApply(uint64(*m.Glod))
	}
	if m.TowerState != nil {
		n += 1 + sovSportGameApply(uint64(*m.TowerState))
	}
	if m.Drakes != nil {
		n += 1 + sovSportGameApply(uint64(*m.Drakes))
	}
	if m.NahsorBarons != nil {
		n += 1 + sovSportGameApply(uint64(*m.NahsorBarons))
	}
	if len(m.PickInfos) > 0 {
		for _, e := range m.PickInfos {
			l = e.Size()
			n += 1 + l + sovSportGameApply(uint64(l))
		}
	}
	if len(m.BanInfos) > 0 {
		for _, e := range m.BanInfos {
			l = e.Size()
			n += 1 + l + sovSportGameApply(uint64(l))
		}
	}
	if len(m.GoldTimeData) > 0 {
		for _, e := range m.GoldTimeData {
			l = e.Size()
			n += 1 + l + sovSportGameApply(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RealTimePlayerObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.HeroInfo != nil {
		l = m.HeroInfo.Size()
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.Kills != nil {
		n += 1 + sovSportGameApply(uint64(*m.Kills))
	}
	if m.Death != nil {
		n += 1 + sovSportGameApply(uint64(*m.Death))
	}
	if m.Assists != nil {
		n += 1 + sovSportGameApply(uint64(*m.Assists))
	}
	if m.Gold != nil {
		n += 1 + sovSportGameApply(uint64(*m.Gold))
	}
	if m.Subsidy != nil {
		n += 1 + sovSportGameApply(uint64(*m.Subsidy))
	}
	if len(m.ItemInfos) > 0 {
		for _, e := range m.ItemInfos {
			l = e.Size()
			n += 1 + l + sovSportGameApply(uint64(l))
		}
	}
	if m.Photo != nil {
		l = len(*m.Photo)
		n += 1 + l + sovSportGameApply(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSportGameApply(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSportGameApply(x uint64) (n int) {
	return sovSportGameApply(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ESportGameListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportGameApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportGameListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportGameListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LabelType = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LabelId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameClass", wireType)
			}
			var v Game_Class
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Game_Class(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GameClass = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportGameApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESportGameObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportGameApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportGameObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportGameObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueGameId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniqueGameId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GameIcon = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GameName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamAInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamAInfo == nil {
				m.TeamAInfo = &TeamObject{}
			}
			if err := m.TeamAInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ScoreA = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ScoreB = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamBInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamBInfo == nil {
				m.TeamBInfo = &TeamObject{}
			}
			if err := m.TeamBInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeginTime = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTimeStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BeginTimeStr = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GameStatus = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveRoll", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveRoll = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveVideoHall", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveVideoHall = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppLabelId = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiOrigin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ApiOrigin = &v
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GameId = &s
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLottery", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLottery = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HistoryId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportGameApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportGameApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Icon = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportGameApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESportGameListResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportGameApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportGameListResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportGameListResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Code = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Msg = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Total = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameList = append(m.GameList, &ESportGameObject{})
			if err := m.GameList[len(m.GameList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportGameApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameDetailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportGameApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameDetailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameDetailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueGameId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniqueGameId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollFlag", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PollFlag = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportGameApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameGuessCartRequestObj) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportGameApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameGuessCartRequestObj: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameGuessCartRequestObj: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueGameId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniqueGameId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppLabelId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiOrigin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ApiOrigin = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GameId = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueGameGuessId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniqueGameGuessId = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetNum = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MornRollGuessFlag", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MornRollGuessFlag = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportGameApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameGuessCartRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportGameApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameGuessCartRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameGuessCartRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuessCartsReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuessCartsReq = append(m.GuessCartsReq, &GameGuessCartRequestObj{})
			if err := m.GuessCartsReq[len(m.GuessCartsReq)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportGameApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameGuessCartResultObj) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportGameApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameGuessCartResultObj: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameGuessCartResultObj: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueGameId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniqueGameId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetNum = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Odds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Odds = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GameStatus = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetStatus = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportGameApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameGuessCartResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportGameApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameGuessCartResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameGuessCartResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Code = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Msg = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuessCartsRst", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuessCartsRst = append(m.GuessCartsRst, &GameGuessCartResultObj{})
			if err := m.GuessCartsRst[len(m.GuessCartsRst)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportGameApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESportGameDetailResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportGameApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportGameDetailResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportGameDetailResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Code = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Msg = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameDetailHead", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GameDetailHead == nil {
				m.GameDetailHead = &ESportGameObject{}
			}
			if err := m.GameDetailHead.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAmount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxAmount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueGameGuessId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniqueGameGuessId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MornRollGuessFlag", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MornRollGuessFlag = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuessOddsNums", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuessOddsNums = append(m.GuessOddsNums, &share_message.GameGuessOddsNumObject{})
			if err := m.GuessOddsNums[len(m.GuessOddsNums)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportGameApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameGuessBetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportGameApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameGuessBetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameGuessBetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuessBets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuessBets = append(m.GuessBets, &GameGuessBetObject{})
			if err := m.GuessBets[len(m.GuessBets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportGameApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameGuessBetObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportGameApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameGuessBetObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameGuessBetObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueGameId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniqueGameId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MornRollGuessFlag", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MornRollGuessFlag = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueGameGuessId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniqueGameGuessId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GameName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamAName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamAName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamBName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamBName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetId = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetTitle = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetNum = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetName = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Odds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Odds = &s
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetAmount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BetAmount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportGameApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameGuessBetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportGameApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameGuessBetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameGuessBetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Code = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Msg = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAmount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxAmount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportGameApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportGameApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HistoryId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportGameApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameHistoryResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportGameApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameHistoryResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameHistoryResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Code = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Msg = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HisData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HisData == nil {
				m.HisData = &share_message.RecentData{}
			}
			if err := m.HisData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportGameApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameRealTimeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportGameApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameRealTimeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameRealTimeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueGameId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniqueGameId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameRound", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GameRound = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportGameApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameRealTimeResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportGameApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameRealTimeResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameRealTimeResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Code = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Msg = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealTimeData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RealTimeData == nil {
				m.RealTimeData = &GameRealTimeData{}
			}
			if err := m.RealTimeData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameRounds", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GameRounds = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportGameApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameRounds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportGameApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameRounds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameRounds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameRounds", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GameRounds = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportGameApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameRealTimeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportGameApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameRealTimeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameRealTimeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameRound", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GameRound = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStatus", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GameStatus = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Duration = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamA", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamA == nil {
				m.TeamA = &RealTimeTeamObject{}
			}
			if err := m.TeamA.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamB == nil {
				m.TeamB = &RealTimeTeamObject{}
			}
			if err := m.TeamB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerAInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerAInfo = append(m.PlayerAInfo, &RealTimePlayerObject{})
			if err := m.PlayerAInfo[len(m.PlayerAInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerBInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerBInfo = append(m.PlayerBInfo, &RealTimePlayerObject{})
			if err := m.PlayerBInfo[len(m.PlayerBInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstTower", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstTower = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstSmallDragon", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstSmallDragon = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstFiveKill", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstFiveKill = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstBigDragon", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstBigDragon = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstTenKill", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstTenKill = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSportGameApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RealTimeTeamObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportGameApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RealTimeTeamObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RealTimeTeamObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Faction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Faction = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Score = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Glod", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Glod = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TowerState", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TowerState = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Drakes", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Drakes = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NahsorBarons", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NahsorBarons = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PickInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PickInfos = append(m.PickInfos, &share_message.RealTimeHeroObject{})
			if err := m.PickInfos[len(m.PickInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BanInfos = append(m.BanInfos, &share_message.RealTimeHeroObject{})
			if err := m.BanInfos[len(m.BanInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldTimeData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoldTimeData = append(m.GoldTimeData, &share_message.GoldTimeData{})
			if err := m.GoldTimeData[len(m.GoldTimeData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportGameApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RealTimePlayerObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportGameApply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RealTimePlayerObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RealTimePlayerObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeroInfo == nil {
				m.HeroInfo = &share_message.RealTimeHeroObject{}
			}
			if err := m.HeroInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kills", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Kills = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Death", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Death = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assists", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Assists = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Gold = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subsidy", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Subsidy = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemInfos = append(m.ItemInfos, &share_message.RealTimeItemObject{})
			if err := m.ItemInfos[len(m.ItemInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportGameApply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Photo = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportGameApply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSportGameApply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSportGameApply(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSportGameApply
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSportGameApply
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSportGameApply
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSportGameApply
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSportGameApply
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSportGameApply(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSportGameApply
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSportGameApply = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSportGameApply   = fmt.Errorf("proto: integer overflow")
)
