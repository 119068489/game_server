// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common.proto

package client_server

import (
	fmt "fmt"
	share_message "game_server/pb/share_message"
	github_com_akqp2019_protobuf_proto "github.com/akqp2019/protobuf/proto"
	proto "github.com/akqp2019/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ToastMsg struct {
	Text                 *string  `protobuf:"bytes,1,req,name=Text" json:"Text,omitempty" bson:"Text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ToastMsg) Reset()         { *m = ToastMsg{} }
func (m *ToastMsg) String() string { return proto.CompactTextString(m) }
func (*ToastMsg) ProtoMessage()    {}
func (*ToastMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}
func (m *ToastMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ToastMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ToastMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ToastMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToastMsg.Merge(m, src)
}
func (m *ToastMsg) XXX_Size() int {
	return m.Size()
}
func (m *ToastMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ToastMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ToastMsg proto.InternalMessageInfo

func (m *ToastMsg) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

type NTP struct {
	T1                   *int64   `protobuf:"varint,1,req,name=T1" json:"T1,omitempty" bson:"T1,omitempty"`
	T2                   *int64   `protobuf:"varint,2,opt,name=T2" json:"T2,omitempty" bson:"T2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *NTP) Reset()         { *m = NTP{} }
func (m *NTP) String() string { return proto.CompactTextString(m) }
func (*NTP) ProtoMessage()    {}
func (*NTP) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{1}
}
func (m *NTP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NTP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NTP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NTP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NTP.Merge(m, src)
}
func (m *NTP) XXX_Size() int {
	return m.Size()
}
func (m *NTP) XXX_DiscardUnknown() {
	xxx_messageInfo_NTP.DiscardUnknown(m)
}

var xxx_messageInfo_NTP proto.InternalMessageInfo

func (m *NTP) GetT1() int64 {
	if m != nil && m.T1 != nil {
		return *m.T1
	}
	return 0
}

func (m *NTP) GetT2() int64 {
	if m != nil && m.T2 != nil {
		return *m.T2
	}
	return 0
}

type AllPersonalChatLog struct {
	PlayerId             *int64                           `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	PersonalChatLog      []*share_message.PersonalChatLog `protobuf:"bytes,2,rep,name=PersonalChatLog" json:"PersonalChatLog,omitempty" bson:"PersonalChatLog,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-" bson:"-"`
	XXX_unrecognized     []byte                           `json:"-" bson:"-"`
	XXX_sizecache        int32                            `json:"-" bson:"-"`
}

func (m *AllPersonalChatLog) Reset()         { *m = AllPersonalChatLog{} }
func (m *AllPersonalChatLog) String() string { return proto.CompactTextString(m) }
func (*AllPersonalChatLog) ProtoMessage()    {}
func (*AllPersonalChatLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{2}
}
func (m *AllPersonalChatLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllPersonalChatLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllPersonalChatLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllPersonalChatLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllPersonalChatLog.Merge(m, src)
}
func (m *AllPersonalChatLog) XXX_Size() int {
	return m.Size()
}
func (m *AllPersonalChatLog) XXX_DiscardUnknown() {
	xxx_messageInfo_AllPersonalChatLog.DiscardUnknown(m)
}

var xxx_messageInfo_AllPersonalChatLog proto.InternalMessageInfo

func (m *AllPersonalChatLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *AllPersonalChatLog) GetPersonalChatLog() []*share_message.PersonalChatLog {
	if m != nil {
		return m.PersonalChatLog
	}
	return nil
}

type AssistantInfo struct {
	AssistantInfoList    []*AssistantMsg `protobuf:"bytes,1,rep,name=assistantInfoList" json:"assistantInfoList,omitempty" bson:"assistantInfoList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-" bson:"-"`
	XXX_unrecognized     []byte          `json:"-" bson:"-"`
	XXX_sizecache        int32           `json:"-" bson:"-"`
}

func (m *AssistantInfo) Reset()         { *m = AssistantInfo{} }
func (m *AssistantInfo) String() string { return proto.CompactTextString(m) }
func (*AssistantInfo) ProtoMessage()    {}
func (*AssistantInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{3}
}
func (m *AssistantInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssistantInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssistantInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssistantInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssistantInfo.Merge(m, src)
}
func (m *AssistantInfo) XXX_Size() int {
	return m.Size()
}
func (m *AssistantInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AssistantInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AssistantInfo proto.InternalMessageInfo

func (m *AssistantInfo) GetAssistantInfoList() []*AssistantMsg {
	if m != nil {
		return m.AssistantInfoList
	}
	return nil
}

type AssistantMsg struct {
	MsgType  *int32 `protobuf:"varint,1,opt,name=MsgType" json:"MsgType,omitempty" bson:"MsgType,omitempty"`
	DateTime *int64 `protobuf:"varint,2,opt,name=DateTime" json:"DateTime,omitempty" bson:"DateTime,omitempty"`
	//
	AddPalType *int32  `protobuf:"varint,3,opt,name=AddPalType" json:"AddPalType,omitempty" bson:"AddPalType,omitempty"`
	NickName   *string `protobuf:"bytes,4,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	HeadIcon   *string `protobuf:"bytes,5,opt,name=HeadIcon" json:"HeadIcon,omitempty" bson:"HeadIcon,omitempty"`
	Account    *string `protobuf:"bytes,6,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	Phone      *string `protobuf:"bytes,7,opt,name=Phone" json:"Phone,omitempty" bson:"Phone,omitempty"`
	//
	SysContent *string `protobuf:"bytes,8,opt,name=SysContent" json:"SysContent,omitempty" bson:"SysContent,omitempty"`
	//
	Title                *string  `protobuf:"bytes,9,opt,name=title" json:"title,omitempty" bson:"title,omitempty"`
	SysNoticeContent     *string  `protobuf:"bytes,10,opt,name=SysNoticeContent" json:"SysNoticeContent,omitempty" bson:"SysNoticeContent,omitempty"`
	AddFriendType        *int32   `protobuf:"varint,11,opt,name=AddFriendType" json:"AddFriendType,omitempty" bson:"AddFriendType,omitempty"`
	Signature            *string  `protobuf:"bytes,12,opt,name=Signature" json:"Signature,omitempty" bson:"Signature,omitempty"`
	Photo                []string `protobuf:"bytes,13,rep,name=Photo" json:"Photo,omitempty" bson:"Photo,omitempty"`
	PlayerId             *int64   `protobuf:"varint,14,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	LogId                *int64   `protobuf:"varint,15,opt,name=log_id" json:"log_id,omitempty" bson:"log_id,omitempty"`
	NoticeId             *int64   `protobuf:"varint,16,opt,name=notice_id" json:"notice_id,omitempty" bson:"notice_id,omitempty"`
	Sex                  *int32   `protobuf:"varint,17,opt,name=Sex" json:"Sex,omitempty" bson:"Sex,omitempty"`
	Types                *int32   `protobuf:"varint,18,opt,name=Types" json:"Types,omitempty" bson:"Types,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *AssistantMsg) Reset()         { *m = AssistantMsg{} }
func (m *AssistantMsg) String() string { return proto.CompactTextString(m) }
func (*AssistantMsg) ProtoMessage()    {}
func (*AssistantMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{4}
}
func (m *AssistantMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssistantMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssistantMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssistantMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssistantMsg.Merge(m, src)
}
func (m *AssistantMsg) XXX_Size() int {
	return m.Size()
}
func (m *AssistantMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_AssistantMsg.DiscardUnknown(m)
}

var xxx_messageInfo_AssistantMsg proto.InternalMessageInfo

func (m *AssistantMsg) GetMsgType() int32 {
	if m != nil && m.MsgType != nil {
		return *m.MsgType
	}
	return 0
}

func (m *AssistantMsg) GetDateTime() int64 {
	if m != nil && m.DateTime != nil {
		return *m.DateTime
	}
	return 0
}

func (m *AssistantMsg) GetAddPalType() int32 {
	if m != nil && m.AddPalType != nil {
		return *m.AddPalType
	}
	return 0
}

func (m *AssistantMsg) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *AssistantMsg) GetHeadIcon() string {
	if m != nil && m.HeadIcon != nil {
		return *m.HeadIcon
	}
	return ""
}

func (m *AssistantMsg) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *AssistantMsg) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *AssistantMsg) GetSysContent() string {
	if m != nil && m.SysContent != nil {
		return *m.SysContent
	}
	return ""
}

func (m *AssistantMsg) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *AssistantMsg) GetSysNoticeContent() string {
	if m != nil && m.SysNoticeContent != nil {
		return *m.SysNoticeContent
	}
	return ""
}

func (m *AssistantMsg) GetAddFriendType() int32 {
	if m != nil && m.AddFriendType != nil {
		return *m.AddFriendType
	}
	return 0
}

func (m *AssistantMsg) GetSignature() string {
	if m != nil && m.Signature != nil {
		return *m.Signature
	}
	return ""
}

func (m *AssistantMsg) GetPhoto() []string {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *AssistantMsg) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *AssistantMsg) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *AssistantMsg) GetNoticeId() int64 {
	if m != nil && m.NoticeId != nil {
		return *m.NoticeId
	}
	return 0
}

func (m *AssistantMsg) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *AssistantMsg) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

type AllPlayerMsg struct {
	Myself               *PlayerMsg                       `protobuf:"bytes,1,opt,name=Myself" json:"Myself,omitempty" bson:"Myself,omitempty"`
	Friends              []*PlayerMsg                     `protobuf:"bytes,2,rep,name=Friends" json:"Friends,omitempty" bson:"Friends,omitempty"`
	Teams                []*TeamMsg                       `protobuf:"bytes,3,rep,name=Teams" json:"Teams,omitempty" bson:"Teams,omitempty"`
	ChatMsg              []*AllPersonalChatLog            `protobuf:"bytes,4,rep,name=ChatMsg" json:"ChatMsg,omitempty" bson:"ChatMsg,omitempty"`
	AllAddPlayerMsg      *share_message.AllAddPlayerMsg   `protobuf:"bytes,5,opt,name=AllAddPlayerMsg" json:"AllAddPlayerMsg,omitempty" bson:"AllAddPlayerMsg,omitempty"`
	IsNearBy             *bool                            `protobuf:"varint,6,opt,name=IsNearBy" json:"IsNearBy,omitempty" bson:"IsNearBy,omitempty"`
	Pay                  []*share_message.PlatformChannel `protobuf:"bytes,7,rep,name=Pay" json:"Pay,omitempty" bson:"Pay,omitempty"`
	ShopAddr             *string                          `protobuf:"bytes,8,opt,name=ShopAddr" json:"ShopAddr,omitempty" bson:"ShopAddr,omitempty"`
	AssistantInfoList    []*AssistantMsg                  `protobuf:"bytes,9,rep,name=assistantInfoList" json:"assistantInfoList,omitempty" bson:"assistantInfoList,omitempty"`
	PayConfig            []*share_message.PaymentSetting  `protobuf:"bytes,10,rep,name=PayConfig" json:"PayConfig,omitempty" bson:"PayConfig,omitempty"`
	LimitConfig          *share_message.SysParameter      `protobuf:"bytes,11,opt,name=LimitConfig" json:"LimitConfig,omitempty" bson:"LimitConfig,omitempty"`
	LabelMsg             *LabelMsg                        `protobuf:"bytes,12,opt,name=LabelMsg" json:"LabelMsg,omitempty" bson:"LabelMsg,omitempty"`
	RecommendInfo        *RecommendInfo                   `protobuf:"bytes,13,opt,name=RecommendInfo" json:"RecommendInfo,omitempty" bson:"RecommendInfo,omitempty"`
	TweetsListResponse   *TweetsListResponse              `protobuf:"bytes,14,opt,name=tweetsListResponse" json:"tweetsListResponse,omitempty" bson:"tweetsListResponse,omitempty"`
	RandName             *string                          `protobuf:"bytes,15,opt,name=RandName" json:"RandName,omitempty" bson:"RandName,omitempty"`
	SquareAddr           *string                          `protobuf:"bytes,16,opt,name=SquareAddr" json:"SquareAddr,omitempty" bson:"SquareAddr,omitempty"`
	FanNum               *int32                           `protobuf:"varint,17,opt,name=FanNum" json:"FanNum,omitempty" bson:"FanNum,omitempty"`
	AttentionNum         *int32                           `protobuf:"varint,18,opt,name=AttentionNum" json:"AttentionNum,omitempty" bson:"AttentionNum,omitempty"`
	ZanNum               *int32                           `protobuf:"varint,19,opt,name=ZanNum" json:"ZanNum,omitempty" bson:"ZanNum,omitempty"`
	Types                *int32                           `protobuf:"varint,20,opt,name=Types" json:"Types,omitempty" bson:"Types,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-" bson:"-"`
	XXX_unrecognized     []byte                           `json:"-" bson:"-"`
	XXX_sizecache        int32                            `json:"-" bson:"-"`
}

func (m *AllPlayerMsg) Reset()         { *m = AllPlayerMsg{} }
func (m *AllPlayerMsg) String() string { return proto.CompactTextString(m) }
func (*AllPlayerMsg) ProtoMessage()    {}
func (*AllPlayerMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{5}
}
func (m *AllPlayerMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllPlayerMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllPlayerMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllPlayerMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllPlayerMsg.Merge(m, src)
}
func (m *AllPlayerMsg) XXX_Size() int {
	return m.Size()
}
func (m *AllPlayerMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_AllPlayerMsg.DiscardUnknown(m)
}

var xxx_messageInfo_AllPlayerMsg proto.InternalMessageInfo

func (m *AllPlayerMsg) GetMyself() *PlayerMsg {
	if m != nil {
		return m.Myself
	}
	return nil
}

func (m *AllPlayerMsg) GetFriends() []*PlayerMsg {
	if m != nil {
		return m.Friends
	}
	return nil
}

func (m *AllPlayerMsg) GetTeams() []*TeamMsg {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *AllPlayerMsg) GetChatMsg() []*AllPersonalChatLog {
	if m != nil {
		return m.ChatMsg
	}
	return nil
}

func (m *AllPlayerMsg) GetAllAddPlayerMsg() *share_message.AllAddPlayerMsg {
	if m != nil {
		return m.AllAddPlayerMsg
	}
	return nil
}

func (m *AllPlayerMsg) GetIsNearBy() bool {
	if m != nil && m.IsNearBy != nil {
		return *m.IsNearBy
	}
	return false
}

func (m *AllPlayerMsg) GetPay() []*share_message.PlatformChannel {
	if m != nil {
		return m.Pay
	}
	return nil
}

func (m *AllPlayerMsg) GetShopAddr() string {
	if m != nil && m.ShopAddr != nil {
		return *m.ShopAddr
	}
	return ""
}

func (m *AllPlayerMsg) GetAssistantInfoList() []*AssistantMsg {
	if m != nil {
		return m.AssistantInfoList
	}
	return nil
}

func (m *AllPlayerMsg) GetPayConfig() []*share_message.PaymentSetting {
	if m != nil {
		return m.PayConfig
	}
	return nil
}

func (m *AllPlayerMsg) GetLimitConfig() *share_message.SysParameter {
	if m != nil {
		return m.LimitConfig
	}
	return nil
}

func (m *AllPlayerMsg) GetLabelMsg() *LabelMsg {
	if m != nil {
		return m.LabelMsg
	}
	return nil
}

func (m *AllPlayerMsg) GetRecommendInfo() *RecommendInfo {
	if m != nil {
		return m.RecommendInfo
	}
	return nil
}

func (m *AllPlayerMsg) GetTweetsListResponse() *TweetsListResponse {
	if m != nil {
		return m.TweetsListResponse
	}
	return nil
}

func (m *AllPlayerMsg) GetRandName() string {
	if m != nil && m.RandName != nil {
		return *m.RandName
	}
	return ""
}

func (m *AllPlayerMsg) GetSquareAddr() string {
	if m != nil && m.SquareAddr != nil {
		return *m.SquareAddr
	}
	return ""
}

func (m *AllPlayerMsg) GetFanNum() int32 {
	if m != nil && m.FanNum != nil {
		return *m.FanNum
	}
	return 0
}

func (m *AllPlayerMsg) GetAttentionNum() int32 {
	if m != nil && m.AttentionNum != nil {
		return *m.AttentionNum
	}
	return 0
}

func (m *AllPlayerMsg) GetZanNum() int32 {
	if m != nil && m.ZanNum != nil {
		return *m.ZanNum
	}
	return 0
}

func (m *AllPlayerMsg) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

type RecommendPlayerInfo struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty" bson:"playerId,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Sex                  *int32   `protobuf:"varint,3,opt,name=Sex" json:"Sex,omitempty" bson:"Sex,omitempty"`
	HeadIcon             *string  `protobuf:"bytes,4,opt,name=HeadIcon" json:"HeadIcon,omitempty" bson:"HeadIcon,omitempty"`
	Type                 *int32   `protobuf:"varint,5,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RecommendPlayerInfo) Reset()         { *m = RecommendPlayerInfo{} }
func (m *RecommendPlayerInfo) String() string { return proto.CompactTextString(m) }
func (*RecommendPlayerInfo) ProtoMessage()    {}
func (*RecommendPlayerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{6}
}
func (m *RecommendPlayerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecommendPlayerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecommendPlayerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecommendPlayerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecommendPlayerInfo.Merge(m, src)
}
func (m *RecommendPlayerInfo) XXX_Size() int {
	return m.Size()
}
func (m *RecommendPlayerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RecommendPlayerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RecommendPlayerInfo proto.InternalMessageInfo

func (m *RecommendPlayerInfo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *RecommendPlayerInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *RecommendPlayerInfo) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *RecommendPlayerInfo) GetHeadIcon() string {
	if m != nil && m.HeadIcon != nil {
		return *m.HeadIcon
	}
	return ""
}

func (m *RecommendPlayerInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

type RecommendTeamInfo struct {
	TeamId               *int64                 `protobuf:"varint,1,opt,name=TeamId" json:"TeamId,omitempty" bson:"TeamId,omitempty"`
	Name                 *string                `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	MemberInfo           []*RecommendPlayerInfo `protobuf:"bytes,3,rep,name=MemberInfo" json:"MemberInfo,omitempty" bson:"MemberInfo,omitempty"`
	OwnerId              *int64                 `protobuf:"varint,4,opt,name=OwnerId" json:"OwnerId,omitempty" bson:"OwnerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-" bson:"-"`
	XXX_unrecognized     []byte                 `json:"-" bson:"-"`
	XXX_sizecache        int32                  `json:"-" bson:"-"`
}

func (m *RecommendTeamInfo) Reset()         { *m = RecommendTeamInfo{} }
func (m *RecommendTeamInfo) String() string { return proto.CompactTextString(m) }
func (*RecommendTeamInfo) ProtoMessage()    {}
func (*RecommendTeamInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{7}
}
func (m *RecommendTeamInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecommendTeamInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecommendTeamInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecommendTeamInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecommendTeamInfo.Merge(m, src)
}
func (m *RecommendTeamInfo) XXX_Size() int {
	return m.Size()
}
func (m *RecommendTeamInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RecommendTeamInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RecommendTeamInfo proto.InternalMessageInfo

func (m *RecommendTeamInfo) GetTeamId() int64 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *RecommendTeamInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *RecommendTeamInfo) GetMemberInfo() []*RecommendPlayerInfo {
	if m != nil {
		return m.MemberInfo
	}
	return nil
}

func (m *RecommendTeamInfo) GetOwnerId() int64 {
	if m != nil && m.OwnerId != nil {
		return *m.OwnerId
	}
	return 0
}

type RecommendInfo struct {
	TeamInfo             []*RecommendTeamInfo   `protobuf:"bytes,1,rep,name=TeamInfo" json:"TeamInfo,omitempty" bson:"TeamInfo,omitempty"`
	PlayerInfo           []*RecommendPlayerInfo `protobuf:"bytes,2,rep,name=PlayerInfo" json:"PlayerInfo,omitempty" bson:"PlayerInfo,omitempty"`
	Photo                *string                `protobuf:"bytes,3,opt,name=Photo" json:"Photo,omitempty" bson:"Photo,omitempty"`
	PlayTime             *int32                 `protobuf:"varint,4,opt,name=PlayTime" json:"PlayTime,omitempty" bson:"PlayTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-" bson:"-"`
	XXX_unrecognized     []byte                 `json:"-" bson:"-"`
	XXX_sizecache        int32                  `json:"-" bson:"-"`
}

func (m *RecommendInfo) Reset()         { *m = RecommendInfo{} }
func (m *RecommendInfo) String() string { return proto.CompactTextString(m) }
func (*RecommendInfo) ProtoMessage()    {}
func (*RecommendInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{8}
}
func (m *RecommendInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecommendInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecommendInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecommendInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecommendInfo.Merge(m, src)
}
func (m *RecommendInfo) XXX_Size() int {
	return m.Size()
}
func (m *RecommendInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RecommendInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RecommendInfo proto.InternalMessageInfo

func (m *RecommendInfo) GetTeamInfo() []*RecommendTeamInfo {
	if m != nil {
		return m.TeamInfo
	}
	return nil
}

func (m *RecommendInfo) GetPlayerInfo() []*RecommendPlayerInfo {
	if m != nil {
		return m.PlayerInfo
	}
	return nil
}

func (m *RecommendInfo) GetPhoto() string {
	if m != nil && m.Photo != nil {
		return *m.Photo
	}
	return ""
}

func (m *RecommendInfo) GetPlayTime() int32 {
	if m != nil && m.PlayTime != nil {
		return *m.PlayTime
	}
	return 0
}

type LabelMsg struct {
	LabelInfo            []*share_message.InterestTag  `protobuf:"bytes,1,rep,name=LabelInfo" json:"LabelInfo,omitempty" bson:"LabelInfo,omitempty"`
	Max                  *int32                        `protobuf:"varint,2,opt,name=Max" json:"Max,omitempty" bson:"Max,omitempty"`
	Min                  *int32                        `protobuf:"varint,3,opt,name=Min" json:"Min,omitempty" bson:"Min,omitempty"`
	InterestType         []*share_message.InterestType `protobuf:"bytes,4,rep,name=InterestType" json:"InterestType,omitempty" bson:"InterestType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-" bson:"-"`
	XXX_unrecognized     []byte                        `json:"-" bson:"-"`
	XXX_sizecache        int32                         `json:"-" bson:"-"`
}

func (m *LabelMsg) Reset()         { *m = LabelMsg{} }
func (m *LabelMsg) String() string { return proto.CompactTextString(m) }
func (*LabelMsg) ProtoMessage()    {}
func (*LabelMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{9}
}
func (m *LabelMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LabelMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LabelMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelMsg.Merge(m, src)
}
func (m *LabelMsg) XXX_Size() int {
	return m.Size()
}
func (m *LabelMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelMsg.DiscardUnknown(m)
}

var xxx_messageInfo_LabelMsg proto.InternalMessageInfo

func (m *LabelMsg) GetLabelInfo() []*share_message.InterestTag {
	if m != nil {
		return m.LabelInfo
	}
	return nil
}

func (m *LabelMsg) GetMax() int32 {
	if m != nil && m.Max != nil {
		return *m.Max
	}
	return 0
}

func (m *LabelMsg) GetMin() int32 {
	if m != nil && m.Min != nil {
		return *m.Min
	}
	return 0
}

func (m *LabelMsg) GetInterestType() []*share_message.InterestType {
	if m != nil {
		return m.InterestType
	}
	return nil
}

type AllPlayerInfo struct {
	PlayerMsg            []*PlayerMsg `protobuf:"bytes,1,rep,name=PlayerMsg" json:"PlayerMsg,omitempty" bson:"PlayerMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" bson:"-"`
	XXX_unrecognized     []byte       `json:"-" bson:"-"`
	XXX_sizecache        int32        `json:"-" bson:"-"`
}

func (m *AllPlayerInfo) Reset()         { *m = AllPlayerInfo{} }
func (m *AllPlayerInfo) String() string { return proto.CompactTextString(m) }
func (*AllPlayerInfo) ProtoMessage()    {}
func (*AllPlayerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{10}
}
func (m *AllPlayerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllPlayerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllPlayerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllPlayerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllPlayerInfo.Merge(m, src)
}
func (m *AllPlayerInfo) XXX_Size() int {
	return m.Size()
}
func (m *AllPlayerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AllPlayerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AllPlayerInfo proto.InternalMessageInfo

func (m *AllPlayerInfo) GetPlayerMsg() []*PlayerMsg {
	if m != nil {
		return m.PlayerMsg
	}
	return nil
}

type ReadInfo struct {
	LogId                *int64   `protobuf:"varint,1,opt,name=LogId" json:"LogId,omitempty" bson:"LogId,omitempty"`
	Type                 *int32   `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	TeamId               *int64   `protobuf:"varint,3,opt,name=TeamId" json:"TeamId,omitempty" bson:"TeamId,omitempty"`
	FriendId             []int64  `protobuf:"varint,4,rep,name=FriendId" json:"FriendId,omitempty" bson:"FriendId,omitempty"`
	PlayerId             *int64   `protobuf:"varint,5,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	SessionId            *string  `protobuf:"bytes,6,opt,name=SessionId" json:"SessionId,omitempty" bson:"SessionId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ReadInfo) Reset()         { *m = ReadInfo{} }
func (m *ReadInfo) String() string { return proto.CompactTextString(m) }
func (*ReadInfo) ProtoMessage()    {}
func (*ReadInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{11}
}
func (m *ReadInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadInfo.Merge(m, src)
}
func (m *ReadInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReadInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReadInfo proto.InternalMessageInfo

func (m *ReadInfo) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *ReadInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *ReadInfo) GetTeamId() int64 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *ReadInfo) GetFriendId() []int64 {
	if m != nil {
		return m.FriendId
	}
	return nil
}

func (m *ReadInfo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *ReadInfo) GetSessionId() string {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return ""
}

type ChangePlayerInfo struct {
	Type                 *int32                       `protobuf:"varint,1,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	Value                *int32                       `protobuf:"varint,2,opt,name=Value" json:"Value,omitempty" bson:"Value,omitempty"`
	Value1               *string                      `protobuf:"bytes,3,opt,name=Value1" json:"Value1,omitempty" bson:"Value1,omitempty"`
	Photo                []string                     `protobuf:"bytes,4,rep,name=Photo" json:"Photo,omitempty" bson:"Photo,omitempty"`
	PlayerSetting        *share_message.PlayerSetting `protobuf:"bytes,5,opt,name=PlayerSetting" json:"PlayerSetting,omitempty" bson:"PlayerSetting,omitempty"`
	PlayerId             *int64                       `protobuf:"varint,6,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	BackgroundImageURL   *string                      `protobuf:"bytes,7,opt,name=BackgroundImageURL" json:"BackgroundImageURL,omitempty" bson:"BackgroundImageURL,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-" bson:"-"`
	XXX_unrecognized     []byte                       `json:"-" bson:"-"`
	XXX_sizecache        int32                        `json:"-" bson:"-"`
}

func (m *ChangePlayerInfo) Reset()         { *m = ChangePlayerInfo{} }
func (m *ChangePlayerInfo) String() string { return proto.CompactTextString(m) }
func (*ChangePlayerInfo) ProtoMessage()    {}
func (*ChangePlayerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{12}
}
func (m *ChangePlayerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangePlayerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangePlayerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangePlayerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangePlayerInfo.Merge(m, src)
}
func (m *ChangePlayerInfo) XXX_Size() int {
	return m.Size()
}
func (m *ChangePlayerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangePlayerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChangePlayerInfo proto.InternalMessageInfo

func (m *ChangePlayerInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *ChangePlayerInfo) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *ChangePlayerInfo) GetValue1() string {
	if m != nil && m.Value1 != nil {
		return *m.Value1
	}
	return ""
}

func (m *ChangePlayerInfo) GetPhoto() []string {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *ChangePlayerInfo) GetPlayerSetting() *share_message.PlayerSetting {
	if m != nil {
		return m.PlayerSetting
	}
	return nil
}

func (m *ChangePlayerInfo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *ChangePlayerInfo) GetBackgroundImageURL() string {
	if m != nil && m.BackgroundImageURL != nil {
		return *m.BackgroundImageURL
	}
	return ""
}

type PlayerMsg struct {
	PlayerId             *int64                          `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Gold                 *int64                          `protobuf:"varint,2,opt,name=Gold" json:"Gold,omitempty" bson:"Gold,omitempty"`
	NickName             *string                         `protobuf:"bytes,3,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	HeadIcon             *string                         `protobuf:"bytes,4,opt,name=HeadIcon" json:"HeadIcon,omitempty" bson:"HeadIcon,omitempty"`
	Sex                  *int32                          `protobuf:"varint,5,opt,name=Sex" json:"Sex,omitempty" bson:"Sex,omitempty"`
	Account              *string                         `protobuf:"bytes,6,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	PeopleID             *string                         `protobuf:"bytes,7,opt,name=PeopleID" json:"PeopleID,omitempty" bson:"PeopleID,omitempty"`
	Phone                *string                         `protobuf:"bytes,8,opt,name=Phone" json:"Phone,omitempty" bson:"Phone,omitempty"`
	Photo                []string                        `protobuf:"bytes,9,rep,name=Photo" json:"Photo,omitempty" bson:"Photo,omitempty"`
	Email                *string                         `protobuf:"bytes,10,opt,name=Email" json:"Email,omitempty" bson:"Email,omitempty"`
	FriendSetting        *share_message.FriendSetting    `protobuf:"bytes,11,opt,name=FriendSetting" json:"FriendSetting,omitempty" bson:"FriendSetting,omitempty"`
	BankInfo             []*share_message.BankInfo       `protobuf:"bytes,12,rep,name=BankInfo" json:"BankInfo,omitempty" bson:"BankInfo,omitempty"`
	RealName             *string                         `protobuf:"bytes,13,opt,name=RealName" json:"RealName,omitempty" bson:"RealName,omitempty"`
	Signature            *string                         `protobuf:"bytes,14,opt,name=Signature" json:"Signature,omitempty" bson:"Signature,omitempty"`
	Provice              *string                         `protobuf:"bytes,15,opt,name=Provice" json:"Provice,omitempty" bson:"Provice,omitempty"`
	City                 *string                         `protobuf:"bytes,16,opt,name=City" json:"City,omitempty" bson:"City,omitempty"`
	Area                 *string                         `protobuf:"bytes,17,opt,name=Area" json:"Area,omitempty" bson:"Area,omitempty"`
	IsPayPassword        *bool                           `protobuf:"varint,18,opt,name=IsPayPassword" json:"IsPayPassword,omitempty" bson:"IsPayPassword,omitempty"`
	PlayerSetting        *share_message.PlayerSetting    `protobuf:"bytes,19,opt,name=PlayerSetting" json:"PlayerSetting,omitempty" bson:"PlayerSetting,omitempty"`
	BlackList            []int64                         `protobuf:"varint,20,rep,name=BlackList" json:"BlackList,omitempty" bson:"BlackList,omitempty"`
	AddType              *share_message.AddFriend_Type   `protobuf:"varint,21,opt,name=AddType,enum=share_message.AddFriend_Type" json:"AddType,omitempty" bson:"AddType,omitempty"`
	ClearLocalLogTime    *int64                          `protobuf:"varint,22,opt,name=ClearLocalLogTime" json:"ClearLocalLogTime,omitempty" bson:"ClearLocalLogTime,omitempty"`
	IsVisitor            *bool                           `protobuf:"varint,23,opt,name=IsVisitor" json:"IsVisitor,omitempty" bson:"IsVisitor,omitempty"`
	IsLoginPassword      *bool                           `protobuf:"varint,24,opt,name=IsLoginPassword" json:"IsLoginPassword,omitempty" bson:"IsLoginPassword,omitempty"`
	OpenWindows          *int32                          `protobuf:"varint,25,opt,name=OpenWindows" json:"OpenWindows,omitempty" bson:"OpenWindows,omitempty"`
	FreeTimes            *int32                          `protobuf:"varint,26,opt,name=FreeTimes" json:"FreeTimes,omitempty" bson:"FreeTimes,omitempty"`
	ReName               *string                         `protobuf:"bytes,27,opt,name=ReName" json:"ReName,omitempty" bson:"ReName,omitempty"`
	IsMark               *bool                           `protobuf:"varint,28,opt,name=IsMark" json:"IsMark,omitempty" bson:"IsMark,omitempty"`
	IsBindWechat         *bool                           `protobuf:"varint,29,opt,name=IsBindWechat" json:"IsBindWechat,omitempty" bson:"IsBindWechat,omitempty"`
	Emoticons            []*share_message.PlayerEmoticon `protobuf:"bytes,30,rep,name=emoticons" json:"emoticons,omitempty" bson:"emoticons,omitempty"`
	LabelInfo            []*share_message.LabelInfo      `protobuf:"bytes,31,rep,name=LabelInfo" json:"LabelInfo,omitempty" bson:"LabelInfo,omitempty"`
	AreaCode             *string                         `protobuf:"bytes,32,opt,name=AreaCode" json:"AreaCode,omitempty" bson:"AreaCode,omitempty"`
	BackgroundImageURL   *string                         `protobuf:"bytes,33,opt,name=BackgroundImageURL" json:"BackgroundImageURL,omitempty" bson:"BackgroundImageURL,omitempty"`
	Coin                 *int64                          `protobuf:"varint,34,opt,name=Coin" json:"Coin,omitempty" bson:"Coin,omitempty"`
	BCoin                *int64                          `protobuf:"varint,35,opt,name=BCoin" json:"BCoin,omitempty" bson:"BCoin,omitempty"`
	YoungPassWord        *string                         `protobuf:"bytes,36,opt,name=YoungPassWord" json:"YoungPassWord,omitempty" bson:"YoungPassWord,omitempty"`
	Types                *int32                          `protobuf:"varint,37,opt,name=Types" json:"Types,omitempty" bson:"Types,omitempty"`
	IsCanRoam            *bool                           `protobuf:"varint,38,opt,name=IsCanRoam" json:"IsCanRoam,omitempty" bson:"IsCanRoam,omitempty"`
	Constellation        *int32                          `protobuf:"varint,39,opt,name=Constellation" json:"Constellation,omitempty" bson:"Constellation,omitempty"`
	ESportCoin           *int64                          `protobuf:"varint,40,opt,name=ESportCoin" json:"ESportCoin,omitempty" bson:"ESportCoin,omitempty"`
	MixId                *int64                          `protobuf:"varint,41,opt,name=MixId" json:"MixId,omitempty" bson:"MixId,omitempty"`
	IsSetPersonalTags    *bool                           `protobuf:"varint,42,opt,name=IsSetPersonalTags" json:"IsSetPersonalTags,omitempty" bson:"IsSetPersonalTags,omitempty"`
	Diamond              *int64                          `protobuf:"varint,43,opt,name=Diamond" json:"Diamond,omitempty" bson:"Diamond,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-" bson:"-"`
	XXX_unrecognized     []byte                          `json:"-" bson:"-"`
	XXX_sizecache        int32                           `json:"-" bson:"-"`
}

func (m *PlayerMsg) Reset()         { *m = PlayerMsg{} }
func (m *PlayerMsg) String() string { return proto.CompactTextString(m) }
func (*PlayerMsg) ProtoMessage()    {}
func (*PlayerMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{13}
}
func (m *PlayerMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerMsg.Merge(m, src)
}
func (m *PlayerMsg) XXX_Size() int {
	return m.Size()
}
func (m *PlayerMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerMsg.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerMsg proto.InternalMessageInfo

func (m *PlayerMsg) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerMsg) GetGold() int64 {
	if m != nil && m.Gold != nil {
		return *m.Gold
	}
	return 0
}

func (m *PlayerMsg) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *PlayerMsg) GetHeadIcon() string {
	if m != nil && m.HeadIcon != nil {
		return *m.HeadIcon
	}
	return ""
}

func (m *PlayerMsg) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *PlayerMsg) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *PlayerMsg) GetPeopleID() string {
	if m != nil && m.PeopleID != nil {
		return *m.PeopleID
	}
	return ""
}

func (m *PlayerMsg) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *PlayerMsg) GetPhoto() []string {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *PlayerMsg) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

func (m *PlayerMsg) GetFriendSetting() *share_message.FriendSetting {
	if m != nil {
		return m.FriendSetting
	}
	return nil
}

func (m *PlayerMsg) GetBankInfo() []*share_message.BankInfo {
	if m != nil {
		return m.BankInfo
	}
	return nil
}

func (m *PlayerMsg) GetRealName() string {
	if m != nil && m.RealName != nil {
		return *m.RealName
	}
	return ""
}

func (m *PlayerMsg) GetSignature() string {
	if m != nil && m.Signature != nil {
		return *m.Signature
	}
	return ""
}

func (m *PlayerMsg) GetProvice() string {
	if m != nil && m.Provice != nil {
		return *m.Provice
	}
	return ""
}

func (m *PlayerMsg) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

func (m *PlayerMsg) GetArea() string {
	if m != nil && m.Area != nil {
		return *m.Area
	}
	return ""
}

func (m *PlayerMsg) GetIsPayPassword() bool {
	if m != nil && m.IsPayPassword != nil {
		return *m.IsPayPassword
	}
	return false
}

func (m *PlayerMsg) GetPlayerSetting() *share_message.PlayerSetting {
	if m != nil {
		return m.PlayerSetting
	}
	return nil
}

func (m *PlayerMsg) GetBlackList() []int64 {
	if m != nil {
		return m.BlackList
	}
	return nil
}

func (m *PlayerMsg) GetAddType() share_message.AddFriend_Type {
	if m != nil && m.AddType != nil {
		return *m.AddType
	}
	return share_message.AddFriend_Type_ACCOUNT
}

func (m *PlayerMsg) GetClearLocalLogTime() int64 {
	if m != nil && m.ClearLocalLogTime != nil {
		return *m.ClearLocalLogTime
	}
	return 0
}

func (m *PlayerMsg) GetIsVisitor() bool {
	if m != nil && m.IsVisitor != nil {
		return *m.IsVisitor
	}
	return false
}

func (m *PlayerMsg) GetIsLoginPassword() bool {
	if m != nil && m.IsLoginPassword != nil {
		return *m.IsLoginPassword
	}
	return false
}

func (m *PlayerMsg) GetOpenWindows() int32 {
	if m != nil && m.OpenWindows != nil {
		return *m.OpenWindows
	}
	return 0
}

func (m *PlayerMsg) GetFreeTimes() int32 {
	if m != nil && m.FreeTimes != nil {
		return *m.FreeTimes
	}
	return 0
}

func (m *PlayerMsg) GetReName() string {
	if m != nil && m.ReName != nil {
		return *m.ReName
	}
	return ""
}

func (m *PlayerMsg) GetIsMark() bool {
	if m != nil && m.IsMark != nil {
		return *m.IsMark
	}
	return false
}

func (m *PlayerMsg) GetIsBindWechat() bool {
	if m != nil && m.IsBindWechat != nil {
		return *m.IsBindWechat
	}
	return false
}

func (m *PlayerMsg) GetEmoticons() []*share_message.PlayerEmoticon {
	if m != nil {
		return m.Emoticons
	}
	return nil
}

func (m *PlayerMsg) GetLabelInfo() []*share_message.LabelInfo {
	if m != nil {
		return m.LabelInfo
	}
	return nil
}

func (m *PlayerMsg) GetAreaCode() string {
	if m != nil && m.AreaCode != nil {
		return *m.AreaCode
	}
	return ""
}

func (m *PlayerMsg) GetBackgroundImageURL() string {
	if m != nil && m.BackgroundImageURL != nil {
		return *m.BackgroundImageURL
	}
	return ""
}

func (m *PlayerMsg) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *PlayerMsg) GetBCoin() int64 {
	if m != nil && m.BCoin != nil {
		return *m.BCoin
	}
	return 0
}

func (m *PlayerMsg) GetYoungPassWord() string {
	if m != nil && m.YoungPassWord != nil {
		return *m.YoungPassWord
	}
	return ""
}

func (m *PlayerMsg) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *PlayerMsg) GetIsCanRoam() bool {
	if m != nil && m.IsCanRoam != nil {
		return *m.IsCanRoam
	}
	return false
}

func (m *PlayerMsg) GetConstellation() int32 {
	if m != nil && m.Constellation != nil {
		return *m.Constellation
	}
	return 0
}

func (m *PlayerMsg) GetESportCoin() int64 {
	if m != nil && m.ESportCoin != nil {
		return *m.ESportCoin
	}
	return 0
}

func (m *PlayerMsg) GetMixId() int64 {
	if m != nil && m.MixId != nil {
		return *m.MixId
	}
	return 0
}

func (m *PlayerMsg) GetIsSetPersonalTags() bool {
	if m != nil && m.IsSetPersonalTags != nil {
		return *m.IsSetPersonalTags
	}
	return false
}

func (m *PlayerMsg) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

type NewFriends struct {
	Friends              []*PlayerMsg `protobuf:"bytes,1,rep,name=Friends" json:"Friends,omitempty" bson:"Friends,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" bson:"-"`
	XXX_unrecognized     []byte       `json:"-" bson:"-"`
	XXX_sizecache        int32        `json:"-" bson:"-"`
}

func (m *NewFriends) Reset()         { *m = NewFriends{} }
func (m *NewFriends) String() string { return proto.CompactTextString(m) }
func (*NewFriends) ProtoMessage()    {}
func (*NewFriends) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{14}
}
func (m *NewFriends) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewFriends) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewFriends.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewFriends) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewFriends.Merge(m, src)
}
func (m *NewFriends) XXX_Size() int {
	return m.Size()
}
func (m *NewFriends) XXX_DiscardUnknown() {
	xxx_messageInfo_NewFriends.DiscardUnknown(m)
}

var xxx_messageInfo_NewFriends proto.InternalMessageInfo

func (m *NewFriends) GetFriends() []*PlayerMsg {
	if m != nil {
		return m.Friends
	}
	return nil
}

type TeamMsg struct {
	Team                 *share_message.TeamData           `protobuf:"bytes,1,opt,name=Team" json:"Team,omitempty" bson:"Team,omitempty"`
	TeamChatInfo         *share_message.TeamChatInfo       `protobuf:"bytes,2,opt,name=TeamChatInfo" json:"TeamChatInfo,omitempty" bson:"TeamChatInfo,omitempty"`
	Members              []*share_message.PersonalTeamData `protobuf:"bytes,3,rep,name=Members" json:"Members,omitempty" bson:"Members,omitempty"`
	Setting              *share_message.TeamSetting        `protobuf:"bytes,4,opt,name=Setting" json:"Setting,omitempty" bson:"Setting,omitempty"`
	IsShow               *bool                             `protobuf:"varint,5,opt,name=IsShow" json:"IsShow,omitempty" bson:"IsShow,omitempty"`
	Type                 *int32                            `protobuf:"varint,6,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	MyData               *share_message.PersonalTeamData   `protobuf:"bytes,7,opt,name=MyData" json:"MyData,omitempty" bson:"MyData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-" bson:"-"`
	XXX_unrecognized     []byte                            `json:"-" bson:"-"`
	XXX_sizecache        int32                             `json:"-" bson:"-"`
}

func (m *TeamMsg) Reset()         { *m = TeamMsg{} }
func (m *TeamMsg) String() string { return proto.CompactTextString(m) }
func (*TeamMsg) ProtoMessage()    {}
func (*TeamMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{15}
}
func (m *TeamMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamMsg.Merge(m, src)
}
func (m *TeamMsg) XXX_Size() int {
	return m.Size()
}
func (m *TeamMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TeamMsg proto.InternalMessageInfo

func (m *TeamMsg) GetTeam() *share_message.TeamData {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *TeamMsg) GetTeamChatInfo() *share_message.TeamChatInfo {
	if m != nil {
		return m.TeamChatInfo
	}
	return nil
}

func (m *TeamMsg) GetMembers() []*share_message.PersonalTeamData {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *TeamMsg) GetSetting() *share_message.TeamSetting {
	if m != nil {
		return m.Setting
	}
	return nil
}

func (m *TeamMsg) GetIsShow() bool {
	if m != nil && m.IsShow != nil {
		return *m.IsShow
	}
	return false
}

func (m *TeamMsg) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *TeamMsg) GetMyData() *share_message.PersonalTeamData {
	if m != nil {
		return m.MyData
	}
	return nil
}

type BroadIdReq struct {
	BroadId              *int32   `protobuf:"varint,4,opt,name=BroadId" json:"BroadId,omitempty" bson:"BroadId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *BroadIdReq) Reset()         { *m = BroadIdReq{} }
func (m *BroadIdReq) String() string { return proto.CompactTextString(m) }
func (*BroadIdReq) ProtoMessage()    {}
func (*BroadIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{16}
}
func (m *BroadIdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BroadIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BroadIdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BroadIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadIdReq.Merge(m, src)
}
func (m *BroadIdReq) XXX_Size() int {
	return m.Size()
}
func (m *BroadIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_BroadIdReq proto.InternalMessageInfo

func (m *BroadIdReq) GetBroadId() int32 {
	if m != nil && m.BroadId != nil {
		return *m.BroadId
	}
	return 0
}

// 超时未操作被踢出房间的提示
type PlayerTimeoutBeKick struct {
	Tip                  *string  `protobuf:"bytes,1,opt,name=tip" json:"tip,omitempty" bson:"tip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerTimeoutBeKick) Reset()         { *m = PlayerTimeoutBeKick{} }
func (m *PlayerTimeoutBeKick) String() string { return proto.CompactTextString(m) }
func (*PlayerTimeoutBeKick) ProtoMessage()    {}
func (*PlayerTimeoutBeKick) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{17}
}
func (m *PlayerTimeoutBeKick) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerTimeoutBeKick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerTimeoutBeKick.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerTimeoutBeKick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerTimeoutBeKick.Merge(m, src)
}
func (m *PlayerTimeoutBeKick) XXX_Size() int {
	return m.Size()
}
func (m *PlayerTimeoutBeKick) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerTimeoutBeKick.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerTimeoutBeKick proto.InternalMessageInfo

func (m *PlayerTimeoutBeKick) GetTip() string {
	if m != nil && m.Tip != nil {
		return *m.Tip
	}
	return ""
}

//玩家请求信息
type PlayerReq struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Type                 *int32   `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	CurrentPage          *int32   `protobuf:"varint,3,opt,name=CurrentPage" json:"CurrentPage,omitempty" bson:"CurrentPage,omitempty"`
	PageSize             *int32   `protobuf:"varint,4,opt,name=PageSize" json:"PageSize,omitempty" bson:"PageSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerReq) Reset()         { *m = PlayerReq{} }
func (m *PlayerReq) String() string { return proto.CompactTextString(m) }
func (*PlayerReq) ProtoMessage()    {}
func (*PlayerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{18}
}
func (m *PlayerReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerReq.Merge(m, src)
}
func (m *PlayerReq) XXX_Size() int {
	return m.Size()
}
func (m *PlayerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerReq.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerReq proto.InternalMessageInfo

func (m *PlayerReq) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerReq) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *PlayerReq) GetCurrentPage() int32 {
	if m != nil && m.CurrentPage != nil {
		return *m.CurrentPage
	}
	return 0
}

func (m *PlayerReq) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

type TeamReq struct {
	PlayerIdList         []int64  `protobuf:"varint,1,rep,name=PlayerIdList" json:"PlayerIdList,omitempty" bson:"PlayerIdList,omitempty"`
	TeamId               *int64   `protobuf:"varint,2,opt,name=TeamId" json:"TeamId,omitempty" bson:"TeamId,omitempty"`
	InviteId             *int64   `protobuf:"varint,3,opt,name=InviteId" json:"InviteId,omitempty" bson:"InviteId,omitempty"`
	Type                 *int32   `protobuf:"varint,4,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	TeamName             *string  `protobuf:"bytes,5,opt,name=TeamName" json:"TeamName,omitempty" bson:"TeamName,omitempty"`
	AdminId              *int64   `protobuf:"varint,6,opt,name=AdminId" json:"AdminId,omitempty" bson:"AdminId,omitempty"`
	AdvId                *int64   `protobuf:"varint,7,opt,name=AdvId" json:"AdvId,omitempty" bson:"AdvId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TeamReq) Reset()         { *m = TeamReq{} }
func (m *TeamReq) String() string { return proto.CompactTextString(m) }
func (*TeamReq) ProtoMessage()    {}
func (*TeamReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{19}
}
func (m *TeamReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamReq.Merge(m, src)
}
func (m *TeamReq) XXX_Size() int {
	return m.Size()
}
func (m *TeamReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamReq.DiscardUnknown(m)
}

var xxx_messageInfo_TeamReq proto.InternalMessageInfo

func (m *TeamReq) GetPlayerIdList() []int64 {
	if m != nil {
		return m.PlayerIdList
	}
	return nil
}

func (m *TeamReq) GetTeamId() int64 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *TeamReq) GetInviteId() int64 {
	if m != nil && m.InviteId != nil {
		return *m.InviteId
	}
	return 0
}

func (m *TeamReq) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *TeamReq) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *TeamReq) GetAdminId() int64 {
	if m != nil && m.AdminId != nil {
		return *m.AdminId
	}
	return 0
}

func (m *TeamReq) GetAdvId() int64 {
	if m != nil && m.AdvId != nil {
		return *m.AdvId
	}
	return 0
}

type TeamInfo struct {
	TeamId               *int64   `protobuf:"varint,1,opt,name=TeamId" json:"TeamId,omitempty" bson:"TeamId,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Type                 *int32   `protobuf:"varint,3,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	LogId                *int64   `protobuf:"varint,4,opt,name=LogId" json:"LogId,omitempty" bson:"LogId,omitempty"`
	CurrentPage          *int32   `protobuf:"varint,5,opt,name=CurrentPage" json:"CurrentPage,omitempty" bson:"CurrentPage,omitempty"`
	PageSize             *int32   `protobuf:"varint,6,opt,name=PageSize" json:"PageSize,omitempty" bson:"PageSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TeamInfo) Reset()         { *m = TeamInfo{} }
func (m *TeamInfo) String() string { return proto.CompactTextString(m) }
func (*TeamInfo) ProtoMessage()    {}
func (*TeamInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{20}
}
func (m *TeamInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamInfo.Merge(m, src)
}
func (m *TeamInfo) XXX_Size() int {
	return m.Size()
}
func (m *TeamInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TeamInfo proto.InternalMessageInfo

func (m *TeamInfo) GetTeamId() int64 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *TeamInfo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *TeamInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *TeamInfo) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *TeamInfo) GetCurrentPage() int32 {
	if m != nil && m.CurrentPage != nil {
		return *m.CurrentPage
	}
	return 0
}

func (m *TeamInfo) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

type TeamManagerSetting struct {
	ManageList           []int64                           `protobuf:"varint,1,rep,name=ManageList" json:"ManageList,omitempty" bson:"ManageList,omitempty"`
	MessageSetting       *share_message.MessageSetting     `protobuf:"bytes,2,opt,name=MessageSetting" json:"MessageSetting,omitempty" bson:"MessageSetting,omitempty"`
	ActivityInfo         []*TeamActivity                   `protobuf:"bytes,3,rep,name=ActivityInfo" json:"ActivityInfo,omitempty" bson:"ActivityInfo,omitempty"`
	OutPlayerInfo        []*PlayerMsg                      `protobuf:"bytes,4,rep,name=OutPlayerInfo" json:"OutPlayerInfo,omitempty" bson:"OutPlayerInfo,omitempty"`
	InviteInfo           []*share_message.InviteInfo       `protobuf:"bytes,5,rep,name=InviteInfo" json:"InviteInfo,omitempty" bson:"InviteInfo,omitempty"`
	TeamId               *int64                            `protobuf:"varint,6,opt,name=TeamId" json:"TeamId,omitempty" bson:"TeamId,omitempty"`
	Members              []*share_message.PersonalTeamData `protobuf:"bytes,7,rep,name=Members" json:"Members,omitempty" bson:"Members,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-" bson:"-"`
	XXX_unrecognized     []byte                            `json:"-" bson:"-"`
	XXX_sizecache        int32                             `json:"-" bson:"-"`
}

func (m *TeamManagerSetting) Reset()         { *m = TeamManagerSetting{} }
func (m *TeamManagerSetting) String() string { return proto.CompactTextString(m) }
func (*TeamManagerSetting) ProtoMessage()    {}
func (*TeamManagerSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{21}
}
func (m *TeamManagerSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamManagerSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamManagerSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamManagerSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamManagerSetting.Merge(m, src)
}
func (m *TeamManagerSetting) XXX_Size() int {
	return m.Size()
}
func (m *TeamManagerSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamManagerSetting.DiscardUnknown(m)
}

var xxx_messageInfo_TeamManagerSetting proto.InternalMessageInfo

func (m *TeamManagerSetting) GetManageList() []int64 {
	if m != nil {
		return m.ManageList
	}
	return nil
}

func (m *TeamManagerSetting) GetMessageSetting() *share_message.MessageSetting {
	if m != nil {
		return m.MessageSetting
	}
	return nil
}

func (m *TeamManagerSetting) GetActivityInfo() []*TeamActivity {
	if m != nil {
		return m.ActivityInfo
	}
	return nil
}

func (m *TeamManagerSetting) GetOutPlayerInfo() []*PlayerMsg {
	if m != nil {
		return m.OutPlayerInfo
	}
	return nil
}

func (m *TeamManagerSetting) GetInviteInfo() []*share_message.InviteInfo {
	if m != nil {
		return m.InviteInfo
	}
	return nil
}

func (m *TeamManagerSetting) GetTeamId() int64 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *TeamManagerSetting) GetMembers() []*share_message.PersonalTeamData {
	if m != nil {
		return m.Members
	}
	return nil
}

type TeamActivity struct {
	Day                  *int32   `protobuf:"varint,1,opt,name=Day" json:"Day,omitempty" bson:"Day,omitempty"`
	PlayerId             []int64  `protobuf:"varint,2,rep,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TeamActivity) Reset()         { *m = TeamActivity{} }
func (m *TeamActivity) String() string { return proto.CompactTextString(m) }
func (*TeamActivity) ProtoMessage()    {}
func (*TeamActivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{22}
}
func (m *TeamActivity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamActivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamActivity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamActivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamActivity.Merge(m, src)
}
func (m *TeamActivity) XXX_Size() int {
	return m.Size()
}
func (m *TeamActivity) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamActivity.DiscardUnknown(m)
}

var xxx_messageInfo_TeamActivity proto.InternalMessageInfo

func (m *TeamActivity) GetDay() int32 {
	if m != nil && m.Day != nil {
		return *m.Day
	}
	return 0
}

func (m *TeamActivity) GetPlayerId() []int64 {
	if m != nil {
		return m.PlayerId
	}
	return nil
}

type PasswordInfo struct {
	Password             *string  `protobuf:"bytes,1,opt,name=Password" json:"Password,omitempty" bson:"Password,omitempty"`
	Type                 *int32   `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	OldPassword          *string  `protobuf:"bytes,3,opt,name=OldPassword" json:"OldPassword,omitempty" bson:"OldPassword,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PasswordInfo) Reset()         { *m = PasswordInfo{} }
func (m *PasswordInfo) String() string { return proto.CompactTextString(m) }
func (*PasswordInfo) ProtoMessage()    {}
func (*PasswordInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{23}
}
func (m *PasswordInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PasswordInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PasswordInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PasswordInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PasswordInfo.Merge(m, src)
}
func (m *PasswordInfo) XXX_Size() int {
	return m.Size()
}
func (m *PasswordInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PasswordInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PasswordInfo proto.InternalMessageInfo

func (m *PasswordInfo) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *PasswordInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *PasswordInfo) GetOldPassword() string {
	if m != nil && m.OldPassword != nil {
		return *m.OldPassword
	}
	return ""
}

//验证码请求
type GetCodeRequest struct {
	Phone                *string  `protobuf:"bytes,1,req,name=Phone" json:"Phone,omitempty" bson:"Phone,omitempty"`
	Type                 *int32   `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	AreaCode             *string  `protobuf:"bytes,3,opt,name=AreaCode" json:"AreaCode,omitempty" bson:"AreaCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GetCodeRequest) Reset()         { *m = GetCodeRequest{} }
func (m *GetCodeRequest) String() string { return proto.CompactTextString(m) }
func (*GetCodeRequest) ProtoMessage()    {}
func (*GetCodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{24}
}
func (m *GetCodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCodeRequest.Merge(m, src)
}
func (m *GetCodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCodeRequest proto.InternalMessageInfo

func (m *GetCodeRequest) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *GetCodeRequest) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *GetCodeRequest) GetAreaCode() string {
	if m != nil && m.AreaCode != nil {
		return *m.AreaCode
	}
	return ""
}

//验证码返回
type CodeResponse struct {
	Code                 *string  `protobuf:"bytes,1,opt,name=Code" json:"Code,omitempty" bson:"Code,omitempty"`
	Type                 *int32   `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	Phone                *string  `protobuf:"bytes,3,opt,name=Phone" json:"Phone,omitempty" bson:"Phone,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *CodeResponse) Reset()         { *m = CodeResponse{} }
func (m *CodeResponse) String() string { return proto.CompactTextString(m) }
func (*CodeResponse) ProtoMessage()    {}
func (*CodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{25}
}
func (m *CodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodeResponse.Merge(m, src)
}
func (m *CodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *CodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CodeResponse proto.InternalMessageInfo

func (m *CodeResponse) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

func (m *CodeResponse) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CodeResponse) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

type ClientInfo struct {
	Cid                  *int32   `protobuf:"varint,1,opt,name=Cid" json:"Cid,omitempty" bson:"Cid,omitempty"`
	Sid                  *int32   `protobuf:"varint,2,opt,name=Sid" json:"Sid,omitempty" bson:"Sid,omitempty"`
	Ip                   *string  `protobuf:"bytes,3,opt,name=Ip" json:"Ip,omitempty" bson:"Ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ClientInfo) Reset()         { *m = ClientInfo{} }
func (m *ClientInfo) String() string { return proto.CompactTextString(m) }
func (*ClientInfo) ProtoMessage()    {}
func (*ClientInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{26}
}
func (m *ClientInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientInfo.Merge(m, src)
}
func (m *ClientInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClientInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClientInfo proto.InternalMessageInfo

func (m *ClientInfo) GetCid() int32 {
	if m != nil && m.Cid != nil {
		return *m.Cid
	}
	return 0
}

func (m *ClientInfo) GetSid() int32 {
	if m != nil && m.Sid != nil {
		return *m.Sid
	}
	return 0
}

func (m *ClientInfo) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

type CheckInfo struct {
	Account              *string  `protobuf:"bytes,1,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	HeadIcon             *string  `protobuf:"bytes,2,opt,name=HeadIcon" json:"HeadIcon,omitempty" bson:"HeadIcon,omitempty"`
	Vaild                *bool    `protobuf:"varint,3,opt,name=Vaild" json:"Vaild,omitempty" bson:"Vaild,omitempty"`
	Sex                  *int32   `protobuf:"varint,4,opt,name=Sex" json:"Sex,omitempty" bson:"Sex,omitempty"`
	State                *int32   `protobuf:"varint,5,opt,name=State" json:"State,omitempty" bson:"State,omitempty"`
	ErrMsg               *string  `protobuf:"bytes,6,opt,name=ErrMsg" json:"ErrMsg,omitempty" bson:"ErrMsg,omitempty"`
	IsCheckPhone         *bool    `protobuf:"varint,7,opt,name=IsCheckPhone" json:"IsCheckPhone,omitempty" bson:"IsCheckPhone,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *CheckInfo) Reset()         { *m = CheckInfo{} }
func (m *CheckInfo) String() string { return proto.CompactTextString(m) }
func (*CheckInfo) ProtoMessage()    {}
func (*CheckInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{27}
}
func (m *CheckInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckInfo.Merge(m, src)
}
func (m *CheckInfo) XXX_Size() int {
	return m.Size()
}
func (m *CheckInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CheckInfo proto.InternalMessageInfo

func (m *CheckInfo) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *CheckInfo) GetHeadIcon() string {
	if m != nil && m.HeadIcon != nil {
		return *m.HeadIcon
	}
	return ""
}

func (m *CheckInfo) GetVaild() bool {
	if m != nil && m.Vaild != nil {
		return *m.Vaild
	}
	return false
}

func (m *CheckInfo) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *CheckInfo) GetState() int32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

func (m *CheckInfo) GetErrMsg() string {
	if m != nil && m.ErrMsg != nil {
		return *m.ErrMsg
	}
	return ""
}

func (m *CheckInfo) GetIsCheckPhone() bool {
	if m != nil && m.IsCheckPhone != nil {
		return *m.IsCheckPhone
	}
	return false
}

type ArticleResponse struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	Title                *string  `protobuf:"bytes,2,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	Icon                 *string  `protobuf:"bytes,3,opt,name=Icon" json:"Icon,omitempty" bson:"Icon,omitempty"`
	ArticleAdd           *string  `protobuf:"bytes,4,opt,name=ArticleAdd" json:"ArticleAdd,omitempty" bson:"ArticleAdd,omitempty"`
	ArticleType          *int32   `protobuf:"varint,5,opt,name=ArticleType" json:"ArticleType,omitempty" bson:"ArticleType,omitempty"`
	Location             *int32   `protobuf:"varint,6,opt,name=Location" json:"Location,omitempty" bson:"Location,omitempty"`
	IsMain               *int32   `protobuf:"varint,7,opt,name=IsMain" json:"IsMain,omitempty" bson:"IsMain,omitempty"`
	Profile              *string  `protobuf:"bytes,8,opt,name=Profile" json:"Profile,omitempty" bson:"Profile,omitempty"`
	ObjectId             *int64   `protobuf:"varint,9,opt,name=ObjectId" json:"ObjectId,omitempty" bson:"ObjectId,omitempty"`
	ObjPlayerId          *int64   `protobuf:"varint,10,opt,name=ObjPlayerId" json:"ObjPlayerId,omitempty" bson:"ObjPlayerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ArticleResponse) Reset()         { *m = ArticleResponse{} }
func (m *ArticleResponse) String() string { return proto.CompactTextString(m) }
func (*ArticleResponse) ProtoMessage()    {}
func (*ArticleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{28}
}
func (m *ArticleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleResponse.Merge(m, src)
}
func (m *ArticleResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArticleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleResponse proto.InternalMessageInfo

func (m *ArticleResponse) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ArticleResponse) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *ArticleResponse) GetIcon() string {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return ""
}

func (m *ArticleResponse) GetArticleAdd() string {
	if m != nil && m.ArticleAdd != nil {
		return *m.ArticleAdd
	}
	return ""
}

func (m *ArticleResponse) GetArticleType() int32 {
	if m != nil && m.ArticleType != nil {
		return *m.ArticleType
	}
	return 0
}

func (m *ArticleResponse) GetLocation() int32 {
	if m != nil && m.Location != nil {
		return *m.Location
	}
	return 0
}

func (m *ArticleResponse) GetIsMain() int32 {
	if m != nil && m.IsMain != nil {
		return *m.IsMain
	}
	return 0
}

func (m *ArticleResponse) GetProfile() string {
	if m != nil && m.Profile != nil {
		return *m.Profile
	}
	return ""
}

func (m *ArticleResponse) GetObjectId() int64 {
	if m != nil && m.ObjectId != nil {
		return *m.ObjectId
	}
	return 0
}

func (m *ArticleResponse) GetObjPlayerId() int64 {
	if m != nil && m.ObjPlayerId != nil {
		return *m.ObjPlayerId
	}
	return 0
}

type ArticleListResponse struct {
	ArticleListId        *int64             `protobuf:"varint,1,opt,name=ArticleListId" json:"ArticleListId,omitempty" bson:"ArticleListId,omitempty"`
	ArticleList          []*ArticleResponse `protobuf:"bytes,2,rep,name=ArticleList" json:"ArticleList,omitempty" bson:"ArticleList,omitempty"`
	TweetsId             *int64             `protobuf:"varint,3,opt,name=TweetsId" json:"TweetsId,omitempty" bson:"TweetsId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-" bson:"-"`
	XXX_unrecognized     []byte             `json:"-" bson:"-"`
	XXX_sizecache        int32              `json:"-" bson:"-"`
}

func (m *ArticleListResponse) Reset()         { *m = ArticleListResponse{} }
func (m *ArticleListResponse) String() string { return proto.CompactTextString(m) }
func (*ArticleListResponse) ProtoMessage()    {}
func (*ArticleListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{29}
}
func (m *ArticleListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleListResponse.Merge(m, src)
}
func (m *ArticleListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArticleListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleListResponse proto.InternalMessageInfo

func (m *ArticleListResponse) GetArticleListId() int64 {
	if m != nil && m.ArticleListId != nil {
		return *m.ArticleListId
	}
	return 0
}

func (m *ArticleListResponse) GetArticleList() []*ArticleResponse {
	if m != nil {
		return m.ArticleList
	}
	return nil
}

func (m *ArticleListResponse) GetTweetsId() int64 {
	if m != nil && m.TweetsId != nil {
		return *m.TweetsId
	}
	return 0
}

type TweetsListResponse struct {
	TweetsId             *int64                 `protobuf:"varint,1,opt,name=TweetsId" json:"TweetsId,omitempty" bson:"TweetsId,omitempty"`
	TweetsList           []*ArticleListResponse `protobuf:"bytes,2,rep,name=TweetsList" json:"TweetsList,omitempty" bson:"TweetsList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-" bson:"-"`
	XXX_unrecognized     []byte                 `json:"-" bson:"-"`
	XXX_sizecache        int32                  `json:"-" bson:"-"`
}

func (m *TweetsListResponse) Reset()         { *m = TweetsListResponse{} }
func (m *TweetsListResponse) String() string { return proto.CompactTextString(m) }
func (*TweetsListResponse) ProtoMessage()    {}
func (*TweetsListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{30}
}
func (m *TweetsListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TweetsListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TweetsListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TweetsListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TweetsListResponse.Merge(m, src)
}
func (m *TweetsListResponse) XXX_Size() int {
	return m.Size()
}
func (m *TweetsListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TweetsListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TweetsListResponse proto.InternalMessageInfo

func (m *TweetsListResponse) GetTweetsId() int64 {
	if m != nil && m.TweetsId != nil {
		return *m.TweetsId
	}
	return 0
}

func (m *TweetsListResponse) GetTweetsList() []*ArticleListResponse {
	if m != nil {
		return m.TweetsList
	}
	return nil
}

type TweetsIdsRequest struct {
	TweetsIdList         []int64  `protobuf:"varint,1,rep,name=TweetsIdList" json:"TweetsIdList,omitempty" bson:"TweetsIdList,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TweetsIdsRequest) Reset()         { *m = TweetsIdsRequest{} }
func (m *TweetsIdsRequest) String() string { return proto.CompactTextString(m) }
func (*TweetsIdsRequest) ProtoMessage()    {}
func (*TweetsIdsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{31}
}
func (m *TweetsIdsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TweetsIdsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TweetsIdsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TweetsIdsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TweetsIdsRequest.Merge(m, src)
}
func (m *TweetsIdsRequest) XXX_Size() int {
	return m.Size()
}
func (m *TweetsIdsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TweetsIdsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TweetsIdsRequest proto.InternalMessageInfo

func (m *TweetsIdsRequest) GetTweetsIdList() []int64 {
	if m != nil {
		return m.TweetsIdList
	}
	return nil
}

type MyMainPageInfo struct {
	Fans                 *int32                             `protobuf:"varint,1,opt,name=Fans" json:"Fans,omitempty" bson:"Fans,omitempty"`
	Attentions           *int32                             `protobuf:"varint,2,opt,name=Attentions" json:"Attentions,omitempty" bson:"Attentions,omitempty"`
	Zans                 *int32                             `protobuf:"varint,3,opt,name=Zans" json:"Zans,omitempty" bson:"Zans,omitempty"`
	Icon                 *int32                             `protobuf:"varint,4,opt,name=Icon" json:"Icon,omitempty" bson:"Icon,omitempty"`
	DynamicData          *share_message.DynamicDataListPage `protobuf:"bytes,5,opt,name=DynamicData" json:"DynamicData,omitempty" bson:"DynamicData,omitempty"`
	PlayerId             *int64                             `protobuf:"varint,6,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-" bson:"-"`
	XXX_unrecognized     []byte                             `json:"-" bson:"-"`
	XXX_sizecache        int32                              `json:"-" bson:"-"`
}

func (m *MyMainPageInfo) Reset()         { *m = MyMainPageInfo{} }
func (m *MyMainPageInfo) String() string { return proto.CompactTextString(m) }
func (*MyMainPageInfo) ProtoMessage()    {}
func (*MyMainPageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{32}
}
func (m *MyMainPageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MyMainPageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MyMainPageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MyMainPageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MyMainPageInfo.Merge(m, src)
}
func (m *MyMainPageInfo) XXX_Size() int {
	return m.Size()
}
func (m *MyMainPageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MyMainPageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MyMainPageInfo proto.InternalMessageInfo

func (m *MyMainPageInfo) GetFans() int32 {
	if m != nil && m.Fans != nil {
		return *m.Fans
	}
	return 0
}

func (m *MyMainPageInfo) GetAttentions() int32 {
	if m != nil && m.Attentions != nil {
		return *m.Attentions
	}
	return 0
}

func (m *MyMainPageInfo) GetZans() int32 {
	if m != nil && m.Zans != nil {
		return *m.Zans
	}
	return 0
}

func (m *MyMainPageInfo) GetIcon() int32 {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return 0
}

func (m *MyMainPageInfo) GetDynamicData() *share_message.DynamicDataListPage {
	if m != nil {
		return m.DynamicData
	}
	return nil
}

func (m *MyMainPageInfo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

type AttenInfo struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Type                 *int32   `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *AttenInfo) Reset()         { *m = AttenInfo{} }
func (m *AttenInfo) String() string { return proto.CompactTextString(m) }
func (*AttenInfo) ProtoMessage()    {}
func (*AttenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{33}
}
func (m *AttenInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttenInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttenInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttenInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttenInfo.Merge(m, src)
}
func (m *AttenInfo) XXX_Size() int {
	return m.Size()
}
func (m *AttenInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AttenInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AttenInfo proto.InternalMessageInfo

func (m *AttenInfo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *AttenInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

type ZanInfo struct {
	LogId                *int64   `protobuf:"varint,1,opt,name=LogId" json:"LogId,omitempty" bson:"LogId,omitempty"`
	Type                 *int32   `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ZanInfo) Reset()         { *m = ZanInfo{} }
func (m *ZanInfo) String() string { return proto.CompactTextString(m) }
func (*ZanInfo) ProtoMessage()    {}
func (*ZanInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{34}
}
func (m *ZanInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZanInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZanInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZanInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZanInfo.Merge(m, src)
}
func (m *ZanInfo) XXX_Size() int {
	return m.Size()
}
func (m *ZanInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ZanInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ZanInfo proto.InternalMessageInfo

func (m *ZanInfo) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *ZanInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

type IdInfo struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	MainId               *int64   `protobuf:"varint,2,opt,name=MainId" json:"MainId,omitempty" bson:"MainId,omitempty"`
	SecondId             *int64   `protobuf:"varint,3,opt,name=SecondId" json:"SecondId,omitempty" bson:"SecondId,omitempty"`
	Page                 *int32   `protobuf:"varint,4,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	PageSize             *int32   `protobuf:"varint,5,opt,name=PageSize" json:"PageSize,omitempty" bson:"PageSize,omitempty"`
	HotList              []int64  `protobuf:"varint,6,rep,name=HotList" json:"HotList,omitempty" bson:"HotList,omitempty"`
	JumpMainCommentId    *int64   `protobuf:"varint,7,opt,name=JumpMainCommentId" json:"JumpMainCommentId,omitempty" bson:"JumpMainCommentId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *IdInfo) Reset()         { *m = IdInfo{} }
func (m *IdInfo) String() string { return proto.CompactTextString(m) }
func (*IdInfo) ProtoMessage()    {}
func (*IdInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{35}
}
func (m *IdInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IdInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IdInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IdInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdInfo.Merge(m, src)
}
func (m *IdInfo) XXX_Size() int {
	return m.Size()
}
func (m *IdInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_IdInfo.DiscardUnknown(m)
}

var xxx_messageInfo_IdInfo proto.InternalMessageInfo

func (m *IdInfo) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *IdInfo) GetMainId() int64 {
	if m != nil && m.MainId != nil {
		return *m.MainId
	}
	return 0
}

func (m *IdInfo) GetSecondId() int64 {
	if m != nil && m.SecondId != nil {
		return *m.SecondId
	}
	return 0
}

func (m *IdInfo) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *IdInfo) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *IdInfo) GetHotList() []int64 {
	if m != nil {
		return m.HotList
	}
	return nil
}

func (m *IdInfo) GetJumpMainCommentId() int64 {
	if m != nil && m.JumpMainCommentId != nil {
		return *m.JumpMainCommentId
	}
	return 0
}

type RequestInfo struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RequestInfo) Reset()         { *m = RequestInfo{} }
func (m *RequestInfo) String() string { return proto.CompactTextString(m) }
func (*RequestInfo) ProtoMessage()    {}
func (*RequestInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{36}
}
func (m *RequestInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestInfo.Merge(m, src)
}
func (m *RequestInfo) XXX_Size() int {
	return m.Size()
}
func (m *RequestInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RequestInfo proto.InternalMessageInfo

func (m *RequestInfo) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

type BtnClickInfo struct {
	//
	//1-协议页面同意按钮点击
	//2-协议页面不同意按钮点击
	//3-手机登录注册按钮点击次数
	//4-微信登录注册点击次数
	//5-本机号码一键登录次数
	//6-其他号码登录点击次数
	//7-注册登录页2返回键次数
	//8-获取验证码次数
	//9-重新获取验证码按钮点击次数
	//10-兴趣墙确定按钮点击次数 s
	//11-兴趣墙返回键点击次数 s
	//12-推荐页面跳过按钮点击次数 s
	//13-推荐页面下一步按钮点击次数 s
	//14-进入柠檬畅聊按钮点击次数 s
	BtnType              *int32   `protobuf:"varint,1,opt,name=BtnType" json:"BtnType,omitempty" bson:"BtnType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *BtnClickInfo) Reset()         { *m = BtnClickInfo{} }
func (m *BtnClickInfo) String() string { return proto.CompactTextString(m) }
func (*BtnClickInfo) ProtoMessage()    {}
func (*BtnClickInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{37}
}
func (m *BtnClickInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BtnClickInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BtnClickInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BtnClickInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BtnClickInfo.Merge(m, src)
}
func (m *BtnClickInfo) XXX_Size() int {
	return m.Size()
}
func (m *BtnClickInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BtnClickInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BtnClickInfo proto.InternalMessageInfo

func (m *BtnClickInfo) GetBtnType() int32 {
	if m != nil && m.BtnType != nil {
		return *m.BtnType
	}
	return 0
}

type PageRegLogLoad struct {
	//Type类型
	//1-登录页面浏览次数
	//2-一键登录页面浏览次数
	//3-微信绑定页浏览次数
	//4-手机号注册页浏览次数
	//5-验证码填写页浏览次数
	//6-个人信息页浏览次数
	//7-兴趣墙页的浏览次数
	//8-推荐页的浏览次数
	Type                 *int32   `protobuf:"varint,1,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	Channel              *string  `protobuf:"bytes,2,opt,name=Channel" json:"Channel,omitempty" bson:"Channel,omitempty"`
	Code                 *string  `protobuf:"bytes,3,opt,name=Code" json:"Code,omitempty" bson:"Code,omitempty"`
	Idfa                 *string  `protobuf:"bytes,4,opt,name=Idfa" json:"Idfa,omitempty" bson:"Idfa,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PageRegLogLoad) Reset()         { *m = PageRegLogLoad{} }
func (m *PageRegLogLoad) String() string { return proto.CompactTextString(m) }
func (*PageRegLogLoad) ProtoMessage()    {}
func (*PageRegLogLoad) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{38}
}
func (m *PageRegLogLoad) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageRegLogLoad) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageRegLogLoad.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageRegLogLoad) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageRegLogLoad.Merge(m, src)
}
func (m *PageRegLogLoad) XXX_Size() int {
	return m.Size()
}
func (m *PageRegLogLoad) XXX_DiscardUnknown() {
	xxx_messageInfo_PageRegLogLoad.DiscardUnknown(m)
}

var xxx_messageInfo_PageRegLogLoad proto.InternalMessageInfo

func (m *PageRegLogLoad) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *PageRegLogLoad) GetChannel() string {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return ""
}

func (m *PageRegLogLoad) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

func (m *PageRegLogLoad) GetIdfa() string {
	if m != nil && m.Idfa != nil {
		return *m.Idfa
	}
	return ""
}

func init() {
	proto.RegisterType((*ToastMsg)(nil), "client_server.ToastMsg")
	proto.RegisterType((*NTP)(nil), "client_server.NTP")
	proto.RegisterType((*AllPersonalChatLog)(nil), "client_server.AllPersonalChatLog")
	proto.RegisterType((*AssistantInfo)(nil), "client_server.AssistantInfo")
	proto.RegisterType((*AssistantMsg)(nil), "client_server.AssistantMsg")
	proto.RegisterType((*AllPlayerMsg)(nil), "client_server.AllPlayerMsg")
	proto.RegisterType((*RecommendPlayerInfo)(nil), "client_server.RecommendPlayerInfo")
	proto.RegisterType((*RecommendTeamInfo)(nil), "client_server.RecommendTeamInfo")
	proto.RegisterType((*RecommendInfo)(nil), "client_server.RecommendInfo")
	proto.RegisterType((*LabelMsg)(nil), "client_server.LabelMsg")
	proto.RegisterType((*AllPlayerInfo)(nil), "client_server.AllPlayerInfo")
	proto.RegisterType((*ReadInfo)(nil), "client_server.ReadInfo")
	proto.RegisterType((*ChangePlayerInfo)(nil), "client_server.ChangePlayerInfo")
	proto.RegisterType((*PlayerMsg)(nil), "client_server.PlayerMsg")
	proto.RegisterType((*NewFriends)(nil), "client_server.NewFriends")
	proto.RegisterType((*TeamMsg)(nil), "client_server.TeamMsg")
	proto.RegisterType((*BroadIdReq)(nil), "client_server.BroadIdReq")
	proto.RegisterType((*PlayerTimeoutBeKick)(nil), "client_server.PlayerTimeoutBeKick")
	proto.RegisterType((*PlayerReq)(nil), "client_server.PlayerReq")
	proto.RegisterType((*TeamReq)(nil), "client_server.TeamReq")
	proto.RegisterType((*TeamInfo)(nil), "client_server.TeamInfo")
	proto.RegisterType((*TeamManagerSetting)(nil), "client_server.TeamManagerSetting")
	proto.RegisterType((*TeamActivity)(nil), "client_server.TeamActivity")
	proto.RegisterType((*PasswordInfo)(nil), "client_server.PasswordInfo")
	proto.RegisterType((*GetCodeRequest)(nil), "client_server.GetCodeRequest")
	proto.RegisterType((*CodeResponse)(nil), "client_server.CodeResponse")
	proto.RegisterType((*ClientInfo)(nil), "client_server.ClientInfo")
	proto.RegisterType((*CheckInfo)(nil), "client_server.CheckInfo")
	proto.RegisterType((*ArticleResponse)(nil), "client_server.ArticleResponse")
	proto.RegisterType((*ArticleListResponse)(nil), "client_server.ArticleListResponse")
	proto.RegisterType((*TweetsListResponse)(nil), "client_server.TweetsListResponse")
	proto.RegisterType((*TweetsIdsRequest)(nil), "client_server.TweetsIdsRequest")
	proto.RegisterType((*MyMainPageInfo)(nil), "client_server.MyMainPageInfo")
	proto.RegisterType((*AttenInfo)(nil), "client_server.AttenInfo")
	proto.RegisterType((*ZanInfo)(nil), "client_server.ZanInfo")
	proto.RegisterType((*IdInfo)(nil), "client_server.IdInfo")
	proto.RegisterType((*RequestInfo)(nil), "client_server.RequestInfo")
	proto.RegisterType((*BtnClickInfo)(nil), "client_server.BtnClickInfo")
	proto.RegisterType((*PageRegLogLoad)(nil), "client_server.PageRegLogLoad")
}

func init() { proto.RegisterFile("common.proto", fileDescriptor_555bd8c177793206) }

var fileDescriptor_555bd8c177793206 = []byte{
	// 2524 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x58, 0xcd, 0x6f, 0xdb, 0xc8,
	0x15, 0x87, 0xbe, 0xa5, 0xa7, 0x2f, 0x9b, 0x76, 0x36, 0xb4, 0xb3, 0xc9, 0x7a, 0xd9, 0xee, 0xd6,
	0x69, 0x10, 0x3b, 0x71, 0xd0, 0x04, 0x5b, 0xb4, 0x1b, 0xc8, 0x72, 0x3e, 0xd4, 0x95, 0x6d, 0x41,
	0x52, 0x13, 0x34, 0x87, 0x1a, 0x63, 0x72, 0x2c, 0x73, 0x4d, 0xcd, 0x28, 0x9c, 0x51, 0x1c, 0xed,
	0xa5, 0x68, 0x0f, 0xbd, 0xf7, 0x58, 0xa0, 0xff, 0x44, 0x81, 0x5e, 0x7b, 0xef, 0xa9, 0xd8, 0x7b,
	0x2f, 0x45, 0xfe, 0x80, 0xfe, 0x07, 0x05, 0x8a, 0x79, 0xe4, 0x90, 0x14, 0x25, 0xaf, 0xd3, 0x1b,
	0x67, 0xe6, 0xcd, 0xbc, 0xef, 0xdf, 0x7b, 0x8f, 0x50, 0xb3, 0xf9, 0x78, 0xcc, 0xd9, 0xce, 0xc4,
	0xe7, 0x92, 0x1b, 0x75, 0xdb, 0x73, 0x29, 0x93, 0x27, 0x82, 0xfa, 0xef, 0xa8, 0xbf, 0x09, 0xa7,
	0x44, 0xd0, 0xe0, 0x68, 0x73, 0x77, 0x44, 0xc6, 0x34, 0x3c, 0xd8, 0xc5, 0xad, 0x5d, 0x71, 0x4e,
	0x7c, 0x7a, 0x32, 0xa6, 0x42, 0x90, 0x11, 0xdd, 0x25, 0x9e, 0x97, 0x7c, 0x6b, 0x73, 0xef, 0xba,
	0x0b, 0x92, 0x9c, 0x7a, 0xf4, 0x44, 0x48, 0x7f, 0x6a, 0xcb, 0xf0, 0xce, 0xd7, 0xff, 0xcf, 0x9d,
	0x93, 0x89, 0x47, 0x66, 0xd4, 0x3f, 0x89, 0x85, 0xb4, 0x4c, 0x28, 0x0f, 0x39, 0x11, 0xf2, 0x50,
	0x8c, 0x8c, 0x1a, 0xe4, 0x87, 0xf4, 0xbd, 0x34, 0x33, 0x5b, 0xd9, 0xed, 0x8a, 0x75, 0x1b, 0x72,
	0x47, 0xc3, 0x9e, 0x01, 0x90, 0x1d, 0x3e, 0xc4, 0xad, 0x1c, 0x7e, 0xef, 0x99, 0xd9, 0xad, 0xcc,
	0x76, 0xce, 0x3a, 0x01, 0xa3, 0xe5, 0x79, 0x3d, 0xea, 0x0b, 0xce, 0x88, 0xd7, 0x3e, 0x27, 0xb2,
	0xcb, 0x47, 0xc6, 0x0a, 0x94, 0x7b, 0xc8, 0xa3, 0xe3, 0x98, 0x19, 0x45, 0x67, 0x3c, 0x81, 0x66,
	0x8a, 0xc8, 0xcc, 0x6e, 0xe5, 0xb6, 0xab, 0x7b, 0x77, 0x76, 0xe6, 0x04, 0xdd, 0x49, 0x51, 0x59,
	0x2f, 0xa0, 0xde, 0x12, 0xc2, 0x15, 0x92, 0x30, 0xd9, 0x61, 0x67, 0xdc, 0x78, 0x0c, 0xab, 0x24,
	0xb9, 0xd1, 0x75, 0x85, 0x92, 0x55, 0xbd, 0x75, 0x6b, 0x67, 0xce, 0x0d, 0x3b, 0xd1, 0xc5, 0x43,
	0x31, 0xb2, 0xbe, 0xcf, 0x42, 0x2d, 0xb9, 0x61, 0x34, 0xa1, 0x74, 0x28, 0x46, 0xc3, 0xd9, 0x84,
	0xa2, 0x8c, 0x05, 0x25, 0xf5, 0x01, 0x91, 0x74, 0xe8, 0x8e, 0x69, 0xa0, 0x9d, 0x61, 0x00, 0xb4,
	0x1c, 0xa7, 0x47, 0x3c, 0xa4, 0xca, 0x69, 0xaa, 0x23, 0xd7, 0xbe, 0x38, 0x22, 0x63, 0x6a, 0xe6,
	0xb7, 0x32, 0xdb, 0x15, 0xb5, 0xf3, 0x92, 0x12, 0xa7, 0x63, 0x73, 0x66, 0x16, 0x70, 0xa7, 0x09,
	0xa5, 0x96, 0x6d, 0xf3, 0x29, 0x93, 0x66, 0x11, 0x37, 0xea, 0x50, 0xe8, 0x9d, 0x73, 0x46, 0xcd,
	0x12, 0x2e, 0x0d, 0x80, 0xc1, 0x4c, 0xb4, 0x39, 0x93, 0x94, 0x49, 0xb3, 0xac, 0x49, 0xa4, 0x2b,
	0x3d, 0x6a, 0x56, 0x70, 0x69, 0xc2, 0xca, 0x60, 0x26, 0x8e, 0xb8, 0x74, 0x6d, 0xaa, 0x09, 0x01,
	0x4f, 0x6e, 0x40, 0xbd, 0xe5, 0x38, 0xcf, 0x7d, 0x97, 0x32, 0x07, 0xe5, 0xaa, 0xa2, 0x5c, 0xab,
	0x50, 0x19, 0xb8, 0x23, 0x46, 0xe4, 0xd4, 0xa7, 0x66, 0x2d, 0xc1, 0x55, 0x72, 0xb3, 0xbe, 0x95,
	0x0b, 0xe4, 0x8c, 0xbc, 0xd2, 0x40, 0xfd, 0x1a, 0x50, 0xf4, 0xf8, 0xe8, 0xc4, 0x75, 0xcc, 0x26,
	0xae, 0x57, 0xa1, 0xc2, 0x90, 0xa3, 0xda, 0x5a, 0xc1, 0xad, 0x2a, 0xe4, 0x06, 0xf4, 0xbd, 0xb9,
	0x8a, 0x3c, 0xea, 0x50, 0x50, 0x1c, 0x85, 0x69, 0xa8, 0xa5, 0xf5, 0x9f, 0x02, 0xd4, 0x94, 0xf7,
	0xf1, 0x51, 0x65, 0xd2, 0x6d, 0x28, 0x1e, 0xce, 0x04, 0xf5, 0xce, 0xd0, 0xa2, 0xd5, 0x3d, 0x33,
	0xe5, 0x90, 0x98, 0xf2, 0x2e, 0x94, 0x02, 0x0d, 0x44, 0x18, 0x07, 0x57, 0x93, 0x7e, 0x01, 0x85,
	0x21, 0x25, 0x63, 0x61, 0xe6, 0x90, 0xf0, 0x93, 0x14, 0xa1, 0x3a, 0x53, 0x64, 0x7b, 0x50, 0x52,
	0x31, 0x73, 0x28, 0x46, 0x66, 0x1e, 0x09, 0x3f, 0x4f, 0x47, 0xc3, 0x62, 0x9c, 0x3e, 0x81, 0x66,
	0xcb, 0xf3, 0x94, 0x8b, 0x35, 0x37, 0x74, 0xe0, 0x62, 0x54, 0xa6, 0xa8, 0x94, 0x29, 0x3b, 0xe2,
	0x88, 0x12, 0x7f, 0x7f, 0x86, 0x1e, 0x2e, 0x1b, 0xf7, 0x20, 0xd7, 0x23, 0x33, 0xb3, 0xb4, 0x3c,
	0xa8, 0x3d, 0x22, 0xcf, 0xb8, 0x3f, 0x6e, 0x9f, 0x13, 0xc6, 0xa8, 0xa7, 0xae, 0x0f, 0xce, 0xf9,
	0xa4, 0xe5, 0x38, 0x7e, 0xe8, 0xfd, 0xa5, 0x51, 0x5d, 0xb9, 0x36, 0xaa, 0x8d, 0x07, 0x50, 0xe9,
	0x91, 0x59, 0x9b, 0xb3, 0x33, 0x77, 0x64, 0x02, 0xd2, 0xdf, 0x4e, 0x33, 0x27, 0xb3, 0x31, 0x65,
	0x72, 0x40, 0xa5, 0x74, 0x99, 0xba, 0x51, 0xed, 0xba, 0x63, 0x57, 0x86, 0x77, 0xaa, 0xa8, 0xef,
	0xad, 0xd4, 0x9d, 0xc1, 0x4c, 0xf4, 0x88, 0x4f, 0xc6, 0x54, 0x52, 0xdf, 0xb8, 0x0b, 0xe5, 0x2e,
	0x39, 0xa5, 0x9e, 0x32, 0x4f, 0x0d, 0xc9, 0x6f, 0xa6, 0x44, 0xd2, 0xc7, 0xc6, 0x23, 0xa8, 0xf7,
	0xa9, 0x42, 0x33, 0xca, 0x1c, 0xa5, 0x86, 0x59, 0x47, 0xfa, 0x4f, 0x53, 0xf4, 0x73, 0x34, 0xc6,
	0x2f, 0xc1, 0x90, 0x97, 0x94, 0x4a, 0xa1, 0x94, 0xee, 0x53, 0x31, 0xe1, 0x4c, 0x50, 0x8c, 0xd0,
	0x45, 0x27, 0x0e, 0x17, 0x08, 0x95, 0x31, 0xfb, 0x84, 0x39, 0x98, 0x90, 0xcd, 0x28, 0xbd, 0xde,
	0x4e, 0x89, 0x4f, 0xd1, 0xc0, 0x2b, 0xb8, 0xd7, 0x80, 0xe2, 0x73, 0xc2, 0x8e, 0xa6, 0xe3, 0x30,
	0x94, 0xd7, 0xa1, 0xd6, 0x92, 0x2a, 0xab, 0x5c, 0x8e, 0xbb, 0x18, 0xd1, 0x8a, 0xea, 0x4d, 0x40,
	0xb5, 0x36, 0x1f, 0xf0, 0xeb, 0x18, 0xf0, 0xa7, 0xb0, 0x16, 0x89, 0x1e, 0xa6, 0x92, 0x52, 0x60,
	0x05, 0xca, 0x93, 0x79, 0xb8, 0xab, 0x41, 0x1e, 0xe5, 0xc9, 0x22, 0xef, 0x30, 0x87, 0x22, 0xfc,
	0x88, 0xd0, 0x22, 0xc0, 0x0f, 0x05, 0xb8, 0x2a, 0x8f, 0x0b, 0xc8, 0xe3, 0x3b, 0x58, 0x8d, 0x78,
	0xa8, 0xd8, 0x46, 0x0e, 0x0d, 0x28, 0xe2, 0xf7, 0xf2, 0xf7, 0x1f, 0x03, 0x1c, 0xd2, 0xf1, 0x69,
	0x20, 0x4d, 0x98, 0x26, 0xd6, 0x55, 0x26, 0x4f, 0xc8, 0xdd, 0x84, 0xd2, 0xf1, 0x25, 0x43, 0xb1,
	0xf3, 0x88, 0xe6, 0x7f, 0xc9, 0xa4, 0xfc, 0x67, 0xec, 0x41, 0x59, 0x0b, 0x11, 0x82, 0xec, 0xd6,
	0x55, 0x0f, 0x47, 0xc2, 0x3e, 0x06, 0x88, 0x99, 0x84, 0xe9, 0xfd, 0x31, 0xe2, 0x44, 0x70, 0x95,
	0xd3, 0xb0, 0xaa, 0x0e, 0x11, 0x8e, 0xf3, 0x68, 0x9a, 0x3f, 0x66, 0xe2, 0x48, 0x34, 0xee, 0x43,
	0x05, 0xbf, 0x13, 0xa2, 0x6d, 0xa6, 0xa2, 0xb8, 0xc3, 0x24, 0xf5, 0xa9, 0x90, 0x43, 0x32, 0x52,
	0x3e, 0x38, 0x24, 0xef, 0xd1, 0x60, 0x05, 0x5c, 0xb8, 0x2c, 0x74, 0xc8, 0x43, 0xa8, 0x45, 0x84,
	0xca, 0x0d, 0xf9, 0x30, 0xeb, 0xae, 0x78, 0x6b, 0x36, 0xa1, 0xd6, 0x2f, 0xa0, 0x1e, 0xe1, 0x1e,
	0x8a, 0x7e, 0x0f, 0x2a, 0x31, 0x84, 0x64, 0x7e, 0x18, 0xd0, 0x2c, 0x06, 0xe5, 0xbe, 0x8a, 0x80,
	0x50, 0xe7, 0x2e, 0x1f, 0x25, 0xfd, 0x8a, 0x32, 0x64, 0x75, 0x34, 0x86, 0x5e, 0xcf, 0xe1, 0xe9,
	0x0a, 0x94, 0x03, 0xd0, 0x44, 0x87, 0xe5, 0x82, 0x9d, 0x08, 0xd2, 0x0b, 0x1a, 0xc2, 0x07, 0x54,
	0x08, 0x97, 0xb3, 0x8e, 0x13, 0x14, 0x1f, 0xeb, 0xaf, 0x19, 0x58, 0x51, 0xc8, 0x33, 0xa2, 0x09,
	0x89, 0x35, 0xa7, 0x8c, 0x8e, 0xf3, 0x57, 0xc4, 0x9b, 0x26, 0x18, 0xe3, 0xf2, 0x61, 0xe8, 0x8a,
	0xc8, 0x33, 0x79, 0x2c, 0x24, 0x8f, 0xa0, 0x1e, 0xbc, 0x14, 0x62, 0x4a, 0x08, 0x9a, 0x9f, 0x2e,
	0xa2, 0x5e, 0x4c, 0x33, 0x27, 0x6a, 0x11, 0x45, 0xdd, 0x04, 0x63, 0x9f, 0xd8, 0x17, 0x23, 0x9f,
	0x4f, 0x99, 0xd3, 0x19, 0x93, 0x11, 0xfd, 0x75, 0xbf, 0x1b, 0x54, 0x48, 0xeb, 0x5f, 0xa5, 0x84,
	0x45, 0x53, 0xfd, 0x44, 0x36, 0x30, 0xd4, 0x0b, 0xee, 0x39, 0x61, 0x9d, 0x4e, 0xd6, 0xe4, 0xdc,
	0x42, 0x4d, 0xce, 0x27, 0x93, 0x10, 0x93, 0x6c, 0xb1, 0x40, 0x2b, 0x0e, 0x94, 0x4f, 0x3c, 0xda,
	0x39, 0x08, 0x6b, 0x74, 0x54, 0xb2, 0xcb, 0xf3, 0x26, 0xa8, 0xa0, 0x09, 0xea, 0x50, 0x78, 0x36,
	0x26, 0xae, 0x17, 0xd6, 0xe4, 0x47, 0x50, 0x0f, 0x3c, 0xa3, 0x2d, 0x52, 0x5d, 0x6a, 0x91, 0x39,
	0x1a, 0x85, 0xab, 0xfb, 0x84, 0x5d, 0x60, 0x00, 0xd7, 0x30, 0x66, 0x6e, 0xa6, 0xe8, 0xf5, 0x31,
	0x62, 0x1c, 0x25, 0x1e, 0x2a, 0x58, 0x47, 0x8e, 0x73, 0xe5, 0xbe, 0xa1, 0xbb, 0x8e, 0x9e, 0xcf,
	0xdf, 0xb9, 0xb6, 0xc6, 0xc1, 0x1a, 0xe4, 0xdb, 0xae, 0x9c, 0x85, 0x08, 0x58, 0x83, 0x7c, 0xcb,
	0xa7, 0x04, 0xf1, 0x0f, 0xbb, 0x88, 0x8e, 0xe8, 0x91, 0x59, 0x8f, 0x08, 0x71, 0xc9, 0x7d, 0x07,
	0x01, 0xb0, 0xbc, 0xe8, 0xda, 0xb5, 0x8f, 0x70, 0xed, 0x2a, 0x54, 0xf6, 0x3d, 0x62, 0x5f, 0x60,
	0xd1, 0x5a, 0xc7, 0xc0, 0xdc, 0x81, 0x52, 0xcb, 0x09, 0xda, 0x93, 0x1b, 0x5b, 0x99, 0xed, 0xc6,
	0x42, 0x55, 0x8a, 0x5a, 0x98, 0x13, 0x45, 0x64, 0x6c, 0xc0, 0x6a, 0xdb, 0xa3, 0xc4, 0xef, 0x72,
	0x9b, 0x78, 0x5d, 0x3e, 0xc2, 0xac, 0xff, 0x44, 0x47, 0x74, 0x47, 0xbc, 0x72, 0x85, 0x2b, 0xb9,
	0x6f, 0xde, 0x44, 0x29, 0x6f, 0x42, 0xb3, 0x23, 0xba, 0x7c, 0xe4, 0xb2, 0x48, 0x7c, 0x13, 0x0f,
	0xd6, 0xa0, 0x7a, 0x3c, 0xa1, 0xec, 0xb5, 0xcb, 0x1c, 0x7e, 0x29, 0xcc, 0x0d, 0xdd, 0x19, 0x3d,
	0xf7, 0x29, 0xf6, 0x75, 0xc2, 0xdc, 0xd4, 0x01, 0xde, 0xa7, 0x68, 0xcd, 0x5b, 0xba, 0x3a, 0x74,
	0xc4, 0x21, 0xf1, 0x2f, 0xcc, 0x4f, 0xf1, 0x9d, 0x75, 0xa8, 0x75, 0xc4, 0xbe, 0xcb, 0x9c, 0xd7,
	0xd4, 0x3e, 0x27, 0xd2, 0xbc, 0x8d, 0xbb, 0x0f, 0xa0, 0x42, 0xc7, 0xaa, 0x3f, 0xe2, 0x4c, 0x98,
	0x77, 0x96, 0x17, 0x5b, 0x34, 0xcc, 0xb3, 0x90, 0x4a, 0xe1, 0x42, 0x0c, 0x52, 0x9f, 0x85, 0xb8,
	0x30, 0x7f, 0x23, 0x3a, 0x57, 0x4e, 0x56, 0x0e, 0x6a, 0x73, 0x87, 0x9a, 0x5b, 0x28, 0xd6, 0xf2,
	0x0c, 0xf9, 0x3c, 0x72, 0x2e, 0x77, 0x99, 0x69, 0xa1, 0x91, 0xea, 0x50, 0xd8, 0xc7, 0xe5, 0x8f,
	0x70, 0x79, 0x03, 0xea, 0xbf, 0xe1, 0x53, 0x36, 0x52, 0xe6, 0x79, 0xad, 0xcc, 0xf3, 0x63, 0x1d,
	0xc4, 0x41, 0x39, 0xfb, 0x42, 0x1b, 0xa6, 0x23, 0xda, 0x84, 0xf5, 0x39, 0x19, 0x9b, 0x5f, 0xa2,
	0x8a, 0x37, 0xa0, 0xde, 0xe6, 0x4c, 0x48, 0xea, 0x79, 0x44, 0x95, 0x46, 0xf3, 0x27, 0x48, 0x69,
	0x00, 0x3c, 0x1b, 0x4c, 0xb8, 0x2f, 0x91, 0xc7, 0xb6, 0x66, 0x79, 0xe8, 0xbe, 0xef, 0x38, 0xe6,
	0x5d, 0x5c, 0x6e, 0xc0, 0x6a, 0x47, 0x0c, 0xa8, 0xd4, 0x3d, 0xd6, 0x90, 0x8c, 0x84, 0xf9, 0x53,
	0x7c, 0xb4, 0x09, 0xa5, 0x03, 0x97, 0x8c, 0x39, 0x73, 0xcc, 0x7b, 0x58, 0x67, 0x9e, 0x00, 0x1c,
	0xd1, 0xcb, 0xb0, 0x01, 0x4c, 0xf6, 0x82, 0xd7, 0x41, 0xe7, 0x9f, 0xb2, 0x50, 0xd2, 0x0d, 0xdf,
	0x17, 0x6a, 0x4e, 0x21, 0xe3, 0xb0, 0xd5, 0x4c, 0xa7, 0x8e, 0x3a, 0x3a, 0x20, 0x92, 0x28, 0x78,
	0x57, 0xdf, 0xaa, 0xe5, 0x0b, 0xeb, 0xd1, 0xb2, 0x86, 0x27, 0x49, 0x62, 0x3c, 0x80, 0x52, 0x50,
	0x4f, 0x75, 0xcf, 0xf9, 0xd9, 0x15, 0x43, 0x4a, 0xc4, 0xe4, 0x1e, 0x94, 0x74, 0xc2, 0xe4, 0xf1,
	0xfd, 0xcd, 0x25, 0xef, 0xeb, 0x74, 0xc1, 0x60, 0x1b, 0x9c, 0xf3, 0x4b, 0x04, 0xa3, 0x72, 0x04,
	0xc5, 0x45, 0x34, 0xf5, 0xae, 0xea, 0xa1, 0xd5, 0xa3, 0x88, 0x43, 0xd7, 0xf3, 0xb6, 0x6e, 0x03,
	0xec, 0xfb, 0x9c, 0x38, 0x1d, 0xa7, 0x4f, 0xdf, 0x2a, 0x5b, 0x87, 0xab, 0xb0, 0x68, 0x5a, 0xb0,
	0x16, 0xd8, 0x4f, 0xc5, 0x3f, 0x9f, 0xca, 0x7d, 0xfa, 0x8d, 0x6b, 0x5f, 0x28, 0x38, 0x94, 0xee,
	0x04, 0x8d, 0x57, 0xb1, 0xfa, 0x1a, 0x6c, 0xd5, 0x0b, 0x8b, 0xc3, 0xdb, 0x7c, 0x55, 0x5a, 0x83,
	0x6a, 0x7b, 0xea, 0xfb, 0x94, 0xc9, 0x1e, 0x19, 0x25, 0xa6, 0x22, 0xb5, 0x1a, 0xb8, 0xdf, 0xe9,
	0x62, 0xfd, 0xfb, 0x4c, 0xe0, 0x2a, 0xf5, 0xe4, 0x3a, 0xd4, 0xf4, 0x93, 0xd1, 0xb8, 0x96, 0x4b,
	0x94, 0xb7, 0x08, 0xc5, 0x3b, 0xec, 0x9d, 0x2b, 0x69, 0x54, 0xf0, 0x34, 0xe3, 0xbc, 0xe6, 0xa1,
	0xe8, 0x31, 0x6d, 0xe3, 0x39, 0xcb, 0x19, 0xbb, 0x2c, 0x2a, 0x29, 0x75, 0x28, 0xb4, 0x9c, 0x77,
	0x1d, 0x07, 0x6d, 0x97, 0xb3, 0x26, 0x71, 0xf7, 0xb2, 0xd0, 0x42, 0x25, 0xd5, 0xcc, 0xce, 0x71,
	0xcb, 0xe9, 0x92, 0x18, 0x54, 0x66, 0x6c, 0x8d, 0xd2, 0x5a, 0x17, 0x16, 0xb4, 0x46, 0xef, 0x59,
	0x7f, 0xcb, 0x82, 0x81, 0x01, 0x4a, 0x18, 0x19, 0xc5, 0x08, 0x69, 0x00, 0x04, 0x3b, 0x09, 0xf5,
	0x7f, 0x06, 0x8d, 0xc3, 0xc0, 0xa7, 0x3a, 0x74, 0x82, 0xd0, 0x4c, 0x43, 0xca, 0x3c, 0x91, 0x8a,
	0xe7, 0x96, 0x2d, 0xdd, 0x77, 0xae, 0x9c, 0x25, 0xda, 0xbd, 0x5b, 0x4b, 0xa6, 0x22, 0x4d, 0x66,
	0xec, 0x42, 0xfd, 0x78, 0x2a, 0x13, 0x3d, 0x59, 0xfe, 0x9a, 0x91, 0xeb, 0x3e, 0x40, 0xe8, 0x09,
	0x45, 0x5d, 0x40, 0xea, 0x8d, 0x85, 0x86, 0x48, 0x13, 0x24, 0x4c, 0x1b, 0x78, 0x21, 0x91, 0x3f,
	0xa5, 0x8f, 0xca, 0x1f, 0xeb, 0x7e, 0x90, 0xa4, 0x91, 0xc4, 0x55, 0xc8, 0x1d, 0x90, 0x59, 0x3c,
	0x97, 0x27, 0x3c, 0x95, 0xdb, 0xce, 0x59, 0x6d, 0xa8, 0x69, 0xe0, 0xd7, 0xc8, 0x19, 0x15, 0x82,
	0xcc, 0x5c, 0x4f, 0x1d, 0x85, 0xec, 0xb1, 0xe7, 0x44, 0x24, 0xd8, 0x22, 0x58, 0x4f, 0xa1, 0xf1,
	0x82, 0x4a, 0x85, 0xb6, 0x7d, 0xfa, 0x76, 0x4a, 0x85, 0x8c, 0x4b, 0x3e, 0xfe, 0xfa, 0x48, 0xbd,
	0x91, 0x44, 0xe7, 0xe0, 0x81, 0xaf, 0xa0, 0x16, 0xdc, 0x0e, 0x07, 0x11, 0x44, 0x64, 0x87, 0x2e,
	0x95, 0x20, 0x7a, 0x3a, 0xb8, 0xba, 0x07, 0xd0, 0x46, 0xdb, 0xa3, 0xf8, 0x55, 0xc8, 0xb5, 0x5d,
	0x27, 0xd4, 0x56, 0xf5, 0x29, 0xae, 0x13, 0x5e, 0x03, 0xc8, 0x76, 0x26, 0xe1, 0x9d, 0xdf, 0x41,
	0xa5, 0x7d, 0x4e, 0xed, 0x0b, 0xdd, 0xba, 0xeb, 0x06, 0x26, 0xb3, 0xd0, 0xf0, 0x64, 0x35, 0xd8,
	0xbf, 0x22, 0xae, 0x17, 0xa8, 0x5b, 0xd6, 0xfd, 0x4f, 0x5e, 0x8b, 0x33, 0x90, 0x44, 0xea, 0x38,
	0x6e, 0x40, 0xf1, 0x99, 0x8f, 0xbd, 0x6b, 0xd0, 0x0d, 0x61, 0xf9, 0x43, 0x66, 0xf1, 0x5f, 0x8b,
	0xb2, 0xf5, 0xf7, 0x0c, 0x34, 0x5b, 0xbe, 0x74, 0x6d, 0x2f, 0xd6, 0x59, 0x09, 0xa8, 0x33, 0x4a,
	0x55, 0x17, 0xfc, 0x83, 0x91, 0xd5, 0x06, 0x40, 0x69, 0x72, 0x7a, 0x26, 0x0b, 0xef, 0xb6, 0x1c,
	0x27, 0x6c, 0xc9, 0xd6, 0xa0, 0x1a, 0xee, 0xc5, 0xf3, 0x8f, 0x52, 0x44, 0x35, 0x01, 0x58, 0x7c,
	0x8a, 0x5a, 0x3a, 0x55, 0x9c, 0x5d, 0x86, 0x72, 0x14, 0xc2, 0x3e, 0xe7, 0xcc, 0xf5, 0x74, 0x6f,
	0xb6, 0x02, 0xe5, 0xe3, 0xd3, 0x6f, 0xa9, 0x2d, 0x3b, 0x0e, 0xfe, 0x3d, 0xc1, 0x6c, 0x3d, 0x3e,
	0xfd, 0x36, 0x8a, 0x1a, 0x40, 0x34, 0x10, 0xb0, 0x16, 0xb2, 0x9b, 0x9b, 0x1f, 0x6f, 0x40, 0x3d,
	0xb1, 0x1d, 0x69, 0xf3, 0x28, 0x12, 0x0e, 0x73, 0x56, 0xff, 0xad, 0x4a, 0xcd, 0xe2, 0x29, 0x73,
	0x28, 0x88, 0xc2, 0x09, 0x55, 0x43, 0x98, 0xf5, 0x5b, 0x30, 0x96, 0xcf, 0xac, 0x11, 0x5d, 0xc0,
	0xee, 0x31, 0x40, 0x4c, 0x77, 0xc5, 0xd0, 0xb4, 0x44, 0x7a, 0x6b, 0x1b, 0x56, 0xf4, 0x4b, 0x42,
	0xc7, 0xf1, 0x3a, 0xd4, 0xf4, 0x5e, 0x8c, 0x37, 0xd6, 0x9f, 0x33, 0xd0, 0x38, 0x9c, 0x29, 0x3b,
	0x2a, 0xcc, 0xd2, 0x43, 0xc0, 0x73, 0xc2, 0x44, 0x18, 0x79, 0xca, 0x45, 0x7a, 0x24, 0x16, 0x61,
	0x00, 0xd6, 0x20, 0xff, 0x46, 0x51, 0xe4, 0xf4, 0x2a, 0xea, 0xa8, 0x0b, 0xc6, 0x13, 0xa8, 0x1e,
	0xcc, 0x18, 0x19, 0xbb, 0x36, 0x96, 0xab, 0x60, 0x08, 0xb0, 0x52, 0xa9, 0x9e, 0xa0, 0x50, 0xb2,
	0x28, 0xd6, 0x8b, 0xa3, 0x80, 0x75, 0x0f, 0x2a, 0xc8, 0x3a, 0xca, 0xe6, 0x1f, 0x28, 0x40, 0xd6,
	0x97, 0x50, 0x7a, 0x43, 0xd8, 0xb5, 0xe3, 0x93, 0xf5, 0x87, 0x0c, 0x14, 0x3b, 0x01, 0x40, 0x24,
	0xc3, 0xb4, 0x01, 0x45, 0x65, 0x84, 0x64, 0xd9, 0x19, 0x50, 0x9b, 0xe3, 0x54, 0x15, 0x95, 0x1d,
	0x04, 0xf9, 0xfc, 0x02, 0xc8, 0x47, 0xd3, 0xc3, 0x4b, 0x2e, 0xd1, 0xb4, 0x45, 0x84, 0xf2, 0x0d,
	0x58, 0xfd, 0xd5, 0x74, 0x3c, 0x51, 0xcf, 0xb6, 0x71, 0xac, 0x95, 0x51, 0x09, 0xda, 0x80, 0x6a,
	0xe8, 0x96, 0xb4, 0x20, 0xd6, 0x67, 0x50, 0xdb, 0x97, 0xac, 0xed, 0xb9, 0x71, 0x4e, 0xef, 0x4b,
	0x16, 0x4f, 0x65, 0xd6, 0x37, 0xd0, 0x50, 0x9c, 0xfb, 0x74, 0xd4, 0xe5, 0xa3, 0x2e, 0x27, 0x4e,
	0x6a, 0x6a, 0x6b, 0xe2, 0x2f, 0x2f, 0xc6, 0xa8, 0x17, 0xa7, 0x5c, 0x8c, 0x4f, 0xe8, 0x2d, 0xe7,
	0x8c, 0x04, 0xc9, 0xb6, 0xf7, 0xdf, 0x0c, 0xd4, 0x03, 0xcc, 0xd9, 0x0b, 0xc2, 0xc9, 0x78, 0x0c,
	0xb5, 0xfe, 0xc4, 0x7e, 0x49, 0x89, 0x2f, 0x4f, 0x29, 0x91, 0x86, 0x91, 0x0a, 0xb7, 0xa3, 0x61,
	0x6f, 0x73, 0xc9, 0x9e, 0xf1, 0x73, 0xa8, 0xf7, 0x27, 0xf6, 0xf0, 0xf9, 0x90, 0x0f, 0x82, 0x87,
	0x36, 0x52, 0x44, 0x31, 0xb4, 0x6d, 0x36, 0x76, 0xf0, 0x2f, 0xf3, 0x11, 0xef, 0x53, 0x39, 0xf5,
	0x99, 0x8a, 0x99, 0xfe, 0xc4, 0xd6, 0x6a, 0x1b, 0xe9, 0xb2, 0x95, 0xb4, 0xc7, 0x66, 0x35, 0xb8,
	0xfb, 0x6c, 0x3c, 0x91, 0x33, 0xe3, 0x29, 0xac, 0xf6, 0x27, 0x76, 0xca, 0x1c, 0xb7, 0xd3, 0x15,
	0x6c, 0xee, 0x78, 0xee, 0x81, 0xbd, 0x7f, 0x66, 0xa1, 0x1e, 0xc8, 0xbb, 0x17, 0xc8, 0x67, 0x3c,
	0x82, 0xb2, 0xd2, 0x83, 0x13, 0x21, 0x8d, 0xf4, 0x1f, 0x2d, 0xfd, 0x37, 0x7c, 0x41, 0x81, 0xaf,
	0xa1, 0xa9, 0x14, 0x50, 0x2d, 0x56, 0x3b, 0xfc, 0x61, 0x9e, 0xee, 0x25, 0x93, 0x87, 0x0b, 0xf7,
	0x9f, 0xc2, 0x9a, 0xd2, 0x03, 0xe3, 0xbb, 0x25, 0xa5, 0x1f, 0x0c, 0xe6, 0xc6, 0x95, 0xb5, 0x78,
	0xe1, 0x81, 0xaf, 0xd0, 0x6b, 0x03, 0xc9, 0x27, 0xc8, 0x67, 0xc1, 0xf8, 0x71, 0x2f, 0xb8, 0x70,
	0xb5, 0x0b, 0x9f, 0x44, 0xbc, 0xe7, 0xbb, 0x41, 0x6b, 0x29, 0xfb, 0x39, 0x9a, 0xf4, 0x6b, 0xfb,
	0xb5, 0x7f, 0x7c, 0xb8, 0x93, 0xf9, 0xfe, 0xc3, 0x9d, 0xcc, 0xbf, 0x3f, 0xdc, 0xc9, 0xfc, 0x2f,
	0x00, 0x00, 0xff, 0xff, 0xbb, 0xe0, 0xf6, 0x38, 0x10, 0x19, 0x00, 0x00,
}

func (m *ToastMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ToastMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Text == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("Text")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Text)))
		i += copy(dAtA[i:], *m.Text)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NTP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NTP) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.T1 == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("T1")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.T1))
	}
	if m.T2 != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.T2))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AllPersonalChatLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllPersonalChatLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.PlayerId))
	}
	if len(m.PersonalChatLog) > 0 {
		for _, msg := range m.PersonalChatLog {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AssistantInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssistantInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AssistantInfoList) > 0 {
		for _, msg := range m.AssistantInfoList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AssistantMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssistantMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MsgType != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.MsgType))
	}
	if m.DateTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.DateTime))
	}
	if m.AddPalType != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.AddPalType))
	}
	if m.NickName != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.HeadIcon != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.HeadIcon)))
		i += copy(dAtA[i:], *m.HeadIcon)
	}
	if m.Account != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.Phone != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Phone)))
		i += copy(dAtA[i:], *m.Phone)
	}
	if m.SysContent != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.SysContent)))
		i += copy(dAtA[i:], *m.SysContent)
	}
	if m.Title != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.SysNoticeContent != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.SysNoticeContent)))
		i += copy(dAtA[i:], *m.SysNoticeContent)
	}
	if m.AddFriendType != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.AddFriendType))
	}
	if m.Signature != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Signature)))
		i += copy(dAtA[i:], *m.Signature)
	}
	if len(m.Photo) > 0 {
		for _, s := range m.Photo {
			dAtA[i] = 0x6a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.PlayerId))
	}
	if m.LogId != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.LogId))
	}
	if m.NoticeId != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.NoticeId))
	}
	if m.Sex != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Sex))
	}
	if m.Types != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Types))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AllPlayerMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllPlayerMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Myself != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Myself.Size()))
		n1, err := m.Myself.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Friends) > 0 {
		for _, msg := range m.Friends {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Teams) > 0 {
		for _, msg := range m.Teams {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ChatMsg) > 0 {
		for _, msg := range m.ChatMsg {
			dAtA[i] = 0x22
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AllAddPlayerMsg != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.AllAddPlayerMsg.Size()))
		n2, err := m.AllAddPlayerMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.IsNearBy != nil {
		dAtA[i] = 0x30
		i++
		if *m.IsNearBy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Pay) > 0 {
		for _, msg := range m.Pay {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ShopAddr != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.ShopAddr)))
		i += copy(dAtA[i:], *m.ShopAddr)
	}
	if len(m.AssistantInfoList) > 0 {
		for _, msg := range m.AssistantInfoList {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PayConfig) > 0 {
		for _, msg := range m.PayConfig {
			dAtA[i] = 0x52
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LimitConfig != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.LimitConfig.Size()))
		n3, err := m.LimitConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.LabelMsg != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.LabelMsg.Size()))
		n4, err := m.LabelMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.RecommendInfo != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.RecommendInfo.Size()))
		n5, err := m.RecommendInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.TweetsListResponse != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.TweetsListResponse.Size()))
		n6, err := m.TweetsListResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.RandName != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.RandName)))
		i += copy(dAtA[i:], *m.RandName)
	}
	if m.SquareAddr != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.SquareAddr)))
		i += copy(dAtA[i:], *m.SquareAddr)
	}
	if m.FanNum != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.FanNum))
	}
	if m.AttentionNum != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.AttentionNum))
	}
	if m.ZanNum != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.ZanNum))
	}
	if m.Types != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Types))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RecommendPlayerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecommendPlayerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Sex != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Sex))
	}
	if m.HeadIcon != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.HeadIcon)))
		i += copy(dAtA[i:], *m.HeadIcon)
	}
	if m.Type != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RecommendTeamInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecommendTeamInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TeamId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.TeamId))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if len(m.MemberInfo) > 0 {
		for _, msg := range m.MemberInfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.OwnerId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.OwnerId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RecommendInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecommendInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TeamInfo) > 0 {
		for _, msg := range m.TeamInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PlayerInfo) > 0 {
		for _, msg := range m.PlayerInfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Photo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Photo)))
		i += copy(dAtA[i:], *m.Photo)
	}
	if m.PlayTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.PlayTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LabelMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LabelInfo) > 0 {
		for _, msg := range m.LabelInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Max != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Max))
	}
	if m.Min != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Min))
	}
	if len(m.InterestType) > 0 {
		for _, msg := range m.InterestType {
			dAtA[i] = 0x22
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AllPlayerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllPlayerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerMsg) > 0 {
		for _, msg := range m.PlayerMsg {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReadInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LogId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.LogId))
	}
	if m.Type != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Type))
	}
	if m.TeamId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.TeamId))
	}
	if len(m.FriendId) > 0 {
		for _, num := range m.FriendId {
			dAtA[i] = 0x20
			i++
			i = encodeVarintCommon(dAtA, i, uint64(num))
		}
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.PlayerId))
	}
	if m.SessionId != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.SessionId)))
		i += copy(dAtA[i:], *m.SessionId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChangePlayerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangePlayerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Type))
	}
	if m.Value != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Value))
	}
	if m.Value1 != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Value1)))
		i += copy(dAtA[i:], *m.Value1)
	}
	if len(m.Photo) > 0 {
		for _, s := range m.Photo {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.PlayerSetting != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.PlayerSetting.Size()))
		n7, err := m.PlayerSetting.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.PlayerId))
	}
	if m.BackgroundImageURL != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.BackgroundImageURL)))
		i += copy(dAtA[i:], *m.BackgroundImageURL)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("PlayerId")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Gold != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Gold))
	}
	if m.NickName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.HeadIcon != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.HeadIcon)))
		i += copy(dAtA[i:], *m.HeadIcon)
	}
	if m.Sex != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Sex))
	}
	if m.Account != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.PeopleID != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.PeopleID)))
		i += copy(dAtA[i:], *m.PeopleID)
	}
	if m.Phone != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Phone)))
		i += copy(dAtA[i:], *m.Phone)
	}
	if len(m.Photo) > 0 {
		for _, s := range m.Photo {
			dAtA[i] = 0x4a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Email != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Email)))
		i += copy(dAtA[i:], *m.Email)
	}
	if m.FriendSetting != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FriendSetting.Size()))
		n8, err := m.FriendSetting.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.BankInfo) > 0 {
		for _, msg := range m.BankInfo {
			dAtA[i] = 0x62
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.RealName != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.RealName)))
		i += copy(dAtA[i:], *m.RealName)
	}
	if m.Signature != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Signature)))
		i += copy(dAtA[i:], *m.Signature)
	}
	if m.Provice != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Provice)))
		i += copy(dAtA[i:], *m.Provice)
	}
	if m.City != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.City)))
		i += copy(dAtA[i:], *m.City)
	}
	if m.Area != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Area)))
		i += copy(dAtA[i:], *m.Area)
	}
	if m.IsPayPassword != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsPayPassword {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PlayerSetting != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.PlayerSetting.Size()))
		n9, err := m.PlayerSetting.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if len(m.BlackList) > 0 {
		for _, num := range m.BlackList {
			dAtA[i] = 0xa0
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintCommon(dAtA, i, uint64(num))
		}
	}
	if m.AddType != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.AddType))
	}
	if m.ClearLocalLogTime != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.ClearLocalLogTime))
	}
	if m.IsVisitor != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsVisitor {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsLoginPassword != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsLoginPassword {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.OpenWindows != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.OpenWindows))
	}
	if m.FreeTimes != nil {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.FreeTimes))
	}
	if m.ReName != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.ReName)))
		i += copy(dAtA[i:], *m.ReName)
	}
	if m.IsMark != nil {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsMark {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsBindWechat != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsBindWechat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Emoticons) > 0 {
		for _, msg := range m.Emoticons {
			dAtA[i] = 0xf2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.LabelInfo) > 0 {
		for _, msg := range m.LabelInfo {
			dAtA[i] = 0xfa
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AreaCode != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.AreaCode)))
		i += copy(dAtA[i:], *m.AreaCode)
	}
	if m.BackgroundImageURL != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.BackgroundImageURL)))
		i += copy(dAtA[i:], *m.BackgroundImageURL)
	}
	if m.Coin != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Coin))
	}
	if m.BCoin != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.BCoin))
	}
	if m.YoungPassWord != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.YoungPassWord)))
		i += copy(dAtA[i:], *m.YoungPassWord)
	}
	if m.Types != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Types))
	}
	if m.IsCanRoam != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x2
		i++
		if *m.IsCanRoam {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Constellation != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Constellation))
	}
	if m.ESportCoin != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.ESportCoin))
	}
	if m.MixId != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.MixId))
	}
	if m.IsSetPersonalTags != nil {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x2
		i++
		if *m.IsSetPersonalTags {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Diamond != nil {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Diamond))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NewFriends) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewFriends) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Friends) > 0 {
		for _, msg := range m.Friends {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TeamMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Team != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Team.Size()))
		n10, err := m.Team.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.TeamChatInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.TeamChatInfo.Size()))
		n11, err := m.TeamChatInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.Members) > 0 {
		for _, msg := range m.Members {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Setting != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Setting.Size()))
		n12, err := m.Setting.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.IsShow != nil {
		dAtA[i] = 0x28
		i++
		if *m.IsShow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Type != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Type))
	}
	if m.MyData != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.MyData.Size()))
		n13, err := m.MyData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BroadIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BroadId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.BroadId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerTimeoutBeKick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerTimeoutBeKick) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tip != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Tip)))
		i += copy(dAtA[i:], *m.Tip)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Type != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Type))
	}
	if m.CurrentPage != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.CurrentPage))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TeamReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerIdList) > 0 {
		for _, num := range m.PlayerIdList {
			dAtA[i] = 0x8
			i++
			i = encodeVarintCommon(dAtA, i, uint64(num))
		}
	}
	if m.TeamId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.TeamId))
	}
	if m.InviteId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.InviteId))
	}
	if m.Type != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Type))
	}
	if m.TeamName != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.TeamName)))
		i += copy(dAtA[i:], *m.TeamName)
	}
	if m.AdminId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.AdminId))
	}
	if m.AdvId != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.AdvId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TeamInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TeamId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.TeamId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Type != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Type))
	}
	if m.LogId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.LogId))
	}
	if m.CurrentPage != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.CurrentPage))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TeamManagerSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamManagerSetting) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ManageList) > 0 {
		for _, num := range m.ManageList {
			dAtA[i] = 0x8
			i++
			i = encodeVarintCommon(dAtA, i, uint64(num))
		}
	}
	if m.MessageSetting != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.MessageSetting.Size()))
		n14, err := m.MessageSetting.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if len(m.ActivityInfo) > 0 {
		for _, msg := range m.ActivityInfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.OutPlayerInfo) > 0 {
		for _, msg := range m.OutPlayerInfo {
			dAtA[i] = 0x22
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.InviteInfo) > 0 {
		for _, msg := range m.InviteInfo {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TeamId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.TeamId))
	}
	if len(m.Members) > 0 {
		for _, msg := range m.Members {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TeamActivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamActivity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Day != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Day))
	}
	if len(m.PlayerId) > 0 {
		for _, num := range m.PlayerId {
			dAtA[i] = 0x10
			i++
			i = encodeVarintCommon(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PasswordInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PasswordInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Password != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Password)))
		i += copy(dAtA[i:], *m.Password)
	}
	if m.Type != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Type))
	}
	if m.OldPassword != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.OldPassword)))
		i += copy(dAtA[i:], *m.OldPassword)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCodeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Phone == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("Phone")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Phone)))
		i += copy(dAtA[i:], *m.Phone)
	}
	if m.Type != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Type))
	}
	if m.AreaCode != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.AreaCode)))
		i += copy(dAtA[i:], *m.AreaCode)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CodeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Code)))
		i += copy(dAtA[i:], *m.Code)
	}
	if m.Type != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Type))
	}
	if m.Phone != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Phone)))
		i += copy(dAtA[i:], *m.Phone)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ClientInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cid != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Cid))
	}
	if m.Sid != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Sid))
	}
	if m.Ip != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Ip)))
		i += copy(dAtA[i:], *m.Ip)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CheckInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.HeadIcon != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.HeadIcon)))
		i += copy(dAtA[i:], *m.HeadIcon)
	}
	if m.Vaild != nil {
		dAtA[i] = 0x18
		i++
		if *m.Vaild {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Sex != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Sex))
	}
	if m.State != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.State))
	}
	if m.ErrMsg != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.ErrMsg)))
		i += copy(dAtA[i:], *m.ErrMsg)
	}
	if m.IsCheckPhone != nil {
		dAtA[i] = 0x38
		i++
		if *m.IsCheckPhone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ArticleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Id))
	}
	if m.Title != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.Icon != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Icon)))
		i += copy(dAtA[i:], *m.Icon)
	}
	if m.ArticleAdd != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.ArticleAdd)))
		i += copy(dAtA[i:], *m.ArticleAdd)
	}
	if m.ArticleType != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.ArticleType))
	}
	if m.Location != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Location))
	}
	if m.IsMain != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.IsMain))
	}
	if m.Profile != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Profile)))
		i += copy(dAtA[i:], *m.Profile)
	}
	if m.ObjectId != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.ObjectId))
	}
	if m.ObjPlayerId != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.ObjPlayerId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ArticleListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ArticleListId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.ArticleListId))
	}
	if len(m.ArticleList) > 0 {
		for _, msg := range m.ArticleList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TweetsId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.TweetsId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TweetsListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TweetsListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TweetsId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.TweetsId))
	}
	if len(m.TweetsList) > 0 {
		for _, msg := range m.TweetsList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TweetsIdsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TweetsIdsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TweetsIdList) > 0 {
		for _, num := range m.TweetsIdList {
			dAtA[i] = 0x8
			i++
			i = encodeVarintCommon(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MyMainPageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MyMainPageInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fans != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Fans))
	}
	if m.Attentions != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Attentions))
	}
	if m.Zans != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Zans))
	}
	if m.Icon != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Icon))
	}
	if m.DynamicData != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.DynamicData.Size()))
		n15, err := m.DynamicData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AttenInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttenInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Type != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ZanInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZanInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LogId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.LogId))
	}
	if m.Type != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IdInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Id))
	}
	if m.MainId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.MainId))
	}
	if m.SecondId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.SecondId))
	}
	if m.Page != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Page))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.PageSize))
	}
	if len(m.HotList) > 0 {
		for _, num := range m.HotList {
			dAtA[i] = 0x30
			i++
			i = encodeVarintCommon(dAtA, i, uint64(num))
		}
	}
	if m.JumpMainCommentId != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.JumpMainCommentId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RequestInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Id))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BtnClickInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BtnClickInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BtnType != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.BtnType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PageRegLogLoad) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageRegLogLoad) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(*m.Type))
	}
	if m.Channel != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Channel)))
		i += copy(dAtA[i:], *m.Channel)
	}
	if m.Code != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Code)))
		i += copy(dAtA[i:], *m.Code)
	}
	if m.Idfa != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Idfa)))
		i += copy(dAtA[i:], *m.Idfa)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ToastMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Text != nil {
		l = len(*m.Text)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NTP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.T1 != nil {
		n += 1 + sovCommon(uint64(*m.T1))
	}
	if m.T2 != nil {
		n += 1 + sovCommon(uint64(*m.T2))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllPersonalChatLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovCommon(uint64(*m.PlayerId))
	}
	if len(m.PersonalChatLog) > 0 {
		for _, e := range m.PersonalChatLog {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AssistantInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AssistantInfoList) > 0 {
		for _, e := range m.AssistantInfoList {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AssistantMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgType != nil {
		n += 1 + sovCommon(uint64(*m.MsgType))
	}
	if m.DateTime != nil {
		n += 1 + sovCommon(uint64(*m.DateTime))
	}
	if m.AddPalType != nil {
		n += 1 + sovCommon(uint64(*m.AddPalType))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.HeadIcon != nil {
		l = len(*m.HeadIcon)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Phone != nil {
		l = len(*m.Phone)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.SysContent != nil {
		l = len(*m.SysContent)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.SysNoticeContent != nil {
		l = len(*m.SysNoticeContent)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.AddFriendType != nil {
		n += 1 + sovCommon(uint64(*m.AddFriendType))
	}
	if m.Signature != nil {
		l = len(*m.Signature)
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Photo) > 0 {
		for _, s := range m.Photo {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.PlayerId != nil {
		n += 1 + sovCommon(uint64(*m.PlayerId))
	}
	if m.LogId != nil {
		n += 1 + sovCommon(uint64(*m.LogId))
	}
	if m.NoticeId != nil {
		n += 2 + sovCommon(uint64(*m.NoticeId))
	}
	if m.Sex != nil {
		n += 2 + sovCommon(uint64(*m.Sex))
	}
	if m.Types != nil {
		n += 2 + sovCommon(uint64(*m.Types))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllPlayerMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Myself != nil {
		l = m.Myself.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Friends) > 0 {
		for _, e := range m.Friends {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.ChatMsg) > 0 {
		for _, e := range m.ChatMsg {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.AllAddPlayerMsg != nil {
		l = m.AllAddPlayerMsg.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.IsNearBy != nil {
		n += 2
	}
	if len(m.Pay) > 0 {
		for _, e := range m.Pay {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.ShopAddr != nil {
		l = len(*m.ShopAddr)
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.AssistantInfoList) > 0 {
		for _, e := range m.AssistantInfoList {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.PayConfig) > 0 {
		for _, e := range m.PayConfig {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.LimitConfig != nil {
		l = m.LimitConfig.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.LabelMsg != nil {
		l = m.LabelMsg.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.RecommendInfo != nil {
		l = m.RecommendInfo.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.TweetsListResponse != nil {
		l = m.TweetsListResponse.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.RandName != nil {
		l = len(*m.RandName)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.SquareAddr != nil {
		l = len(*m.SquareAddr)
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.FanNum != nil {
		n += 2 + sovCommon(uint64(*m.FanNum))
	}
	if m.AttentionNum != nil {
		n += 2 + sovCommon(uint64(*m.AttentionNum))
	}
	if m.ZanNum != nil {
		n += 2 + sovCommon(uint64(*m.ZanNum))
	}
	if m.Types != nil {
		n += 2 + sovCommon(uint64(*m.Types))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecommendPlayerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovCommon(uint64(*m.PlayerId))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Sex != nil {
		n += 1 + sovCommon(uint64(*m.Sex))
	}
	if m.HeadIcon != nil {
		l = len(*m.HeadIcon)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovCommon(uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecommendTeamInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamId != nil {
		n += 1 + sovCommon(uint64(*m.TeamId))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.MemberInfo) > 0 {
		for _, e := range m.MemberInfo {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.OwnerId != nil {
		n += 1 + sovCommon(uint64(*m.OwnerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecommendInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TeamInfo) > 0 {
		for _, e := range m.TeamInfo {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.PlayerInfo) > 0 {
		for _, e := range m.PlayerInfo {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.Photo != nil {
		l = len(*m.Photo)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.PlayTime != nil {
		n += 1 + sovCommon(uint64(*m.PlayTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LabelMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LabelInfo) > 0 {
		for _, e := range m.LabelInfo {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.Max != nil {
		n += 1 + sovCommon(uint64(*m.Max))
	}
	if m.Min != nil {
		n += 1 + sovCommon(uint64(*m.Min))
	}
	if len(m.InterestType) > 0 {
		for _, e := range m.InterestType {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllPlayerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PlayerMsg) > 0 {
		for _, e := range m.PlayerMsg {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReadInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogId != nil {
		n += 1 + sovCommon(uint64(*m.LogId))
	}
	if m.Type != nil {
		n += 1 + sovCommon(uint64(*m.Type))
	}
	if m.TeamId != nil {
		n += 1 + sovCommon(uint64(*m.TeamId))
	}
	if len(m.FriendId) > 0 {
		for _, e := range m.FriendId {
			n += 1 + sovCommon(uint64(e))
		}
	}
	if m.PlayerId != nil {
		n += 1 + sovCommon(uint64(*m.PlayerId))
	}
	if m.SessionId != nil {
		l = len(*m.SessionId)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChangePlayerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovCommon(uint64(*m.Type))
	}
	if m.Value != nil {
		n += 1 + sovCommon(uint64(*m.Value))
	}
	if m.Value1 != nil {
		l = len(*m.Value1)
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Photo) > 0 {
		for _, s := range m.Photo {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.PlayerSetting != nil {
		l = m.PlayerSetting.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.PlayerId != nil {
		n += 1 + sovCommon(uint64(*m.PlayerId))
	}
	if m.BackgroundImageURL != nil {
		l = len(*m.BackgroundImageURL)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovCommon(uint64(*m.PlayerId))
	}
	if m.Gold != nil {
		n += 1 + sovCommon(uint64(*m.Gold))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.HeadIcon != nil {
		l = len(*m.HeadIcon)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Sex != nil {
		n += 1 + sovCommon(uint64(*m.Sex))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.PeopleID != nil {
		l = len(*m.PeopleID)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Phone != nil {
		l = len(*m.Phone)
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Photo) > 0 {
		for _, s := range m.Photo {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.Email != nil {
		l = len(*m.Email)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.FriendSetting != nil {
		l = m.FriendSetting.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.BankInfo) > 0 {
		for _, e := range m.BankInfo {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.RealName != nil {
		l = len(*m.RealName)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Signature != nil {
		l = len(*m.Signature)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Provice != nil {
		l = len(*m.Provice)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.City != nil {
		l = len(*m.City)
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.Area != nil {
		l = len(*m.Area)
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.IsPayPassword != nil {
		n += 3
	}
	if m.PlayerSetting != nil {
		l = m.PlayerSetting.Size()
		n += 2 + l + sovCommon(uint64(l))
	}
	if len(m.BlackList) > 0 {
		for _, e := range m.BlackList {
			n += 2 + sovCommon(uint64(e))
		}
	}
	if m.AddType != nil {
		n += 2 + sovCommon(uint64(*m.AddType))
	}
	if m.ClearLocalLogTime != nil {
		n += 2 + sovCommon(uint64(*m.ClearLocalLogTime))
	}
	if m.IsVisitor != nil {
		n += 3
	}
	if m.IsLoginPassword != nil {
		n += 3
	}
	if m.OpenWindows != nil {
		n += 2 + sovCommon(uint64(*m.OpenWindows))
	}
	if m.FreeTimes != nil {
		n += 2 + sovCommon(uint64(*m.FreeTimes))
	}
	if m.ReName != nil {
		l = len(*m.ReName)
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.IsMark != nil {
		n += 3
	}
	if m.IsBindWechat != nil {
		n += 3
	}
	if len(m.Emoticons) > 0 {
		for _, e := range m.Emoticons {
			l = e.Size()
			n += 2 + l + sovCommon(uint64(l))
		}
	}
	if len(m.LabelInfo) > 0 {
		for _, e := range m.LabelInfo {
			l = e.Size()
			n += 2 + l + sovCommon(uint64(l))
		}
	}
	if m.AreaCode != nil {
		l = len(*m.AreaCode)
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.BackgroundImageURL != nil {
		l = len(*m.BackgroundImageURL)
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.Coin != nil {
		n += 2 + sovCommon(uint64(*m.Coin))
	}
	if m.BCoin != nil {
		n += 2 + sovCommon(uint64(*m.BCoin))
	}
	if m.YoungPassWord != nil {
		l = len(*m.YoungPassWord)
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.Types != nil {
		n += 2 + sovCommon(uint64(*m.Types))
	}
	if m.IsCanRoam != nil {
		n += 3
	}
	if m.Constellation != nil {
		n += 2 + sovCommon(uint64(*m.Constellation))
	}
	if m.ESportCoin != nil {
		n += 2 + sovCommon(uint64(*m.ESportCoin))
	}
	if m.MixId != nil {
		n += 2 + sovCommon(uint64(*m.MixId))
	}
	if m.IsSetPersonalTags != nil {
		n += 3
	}
	if m.Diamond != nil {
		n += 2 + sovCommon(uint64(*m.Diamond))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewFriends) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Friends) > 0 {
		for _, e := range m.Friends {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeamMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Team != nil {
		l = m.Team.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.TeamChatInfo != nil {
		l = m.TeamChatInfo.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.Setting != nil {
		l = m.Setting.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.IsShow != nil {
		n += 2
	}
	if m.Type != nil {
		n += 1 + sovCommon(uint64(*m.Type))
	}
	if m.MyData != nil {
		l = m.MyData.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BroadIdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BroadId != nil {
		n += 1 + sovCommon(uint64(*m.BroadId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerTimeoutBeKick) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tip != nil {
		l = len(*m.Tip)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovCommon(uint64(*m.PlayerId))
	}
	if m.Type != nil {
		n += 1 + sovCommon(uint64(*m.Type))
	}
	if m.CurrentPage != nil {
		n += 1 + sovCommon(uint64(*m.CurrentPage))
	}
	if m.PageSize != nil {
		n += 1 + sovCommon(uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeamReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PlayerIdList) > 0 {
		for _, e := range m.PlayerIdList {
			n += 1 + sovCommon(uint64(e))
		}
	}
	if m.TeamId != nil {
		n += 1 + sovCommon(uint64(*m.TeamId))
	}
	if m.InviteId != nil {
		n += 1 + sovCommon(uint64(*m.InviteId))
	}
	if m.Type != nil {
		n += 1 + sovCommon(uint64(*m.Type))
	}
	if m.TeamName != nil {
		l = len(*m.TeamName)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.AdminId != nil {
		n += 1 + sovCommon(uint64(*m.AdminId))
	}
	if m.AdvId != nil {
		n += 1 + sovCommon(uint64(*m.AdvId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeamInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamId != nil {
		n += 1 + sovCommon(uint64(*m.TeamId))
	}
	if m.PlayerId != nil {
		n += 1 + sovCommon(uint64(*m.PlayerId))
	}
	if m.Type != nil {
		n += 1 + sovCommon(uint64(*m.Type))
	}
	if m.LogId != nil {
		n += 1 + sovCommon(uint64(*m.LogId))
	}
	if m.CurrentPage != nil {
		n += 1 + sovCommon(uint64(*m.CurrentPage))
	}
	if m.PageSize != nil {
		n += 1 + sovCommon(uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeamManagerSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ManageList) > 0 {
		for _, e := range m.ManageList {
			n += 1 + sovCommon(uint64(e))
		}
	}
	if m.MessageSetting != nil {
		l = m.MessageSetting.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.ActivityInfo) > 0 {
		for _, e := range m.ActivityInfo {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.OutPlayerInfo) > 0 {
		for _, e := range m.OutPlayerInfo {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.InviteInfo) > 0 {
		for _, e := range m.InviteInfo {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.TeamId != nil {
		n += 1 + sovCommon(uint64(*m.TeamId))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeamActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Day != nil {
		n += 1 + sovCommon(uint64(*m.Day))
	}
	if len(m.PlayerId) > 0 {
		for _, e := range m.PlayerId {
			n += 1 + sovCommon(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PasswordInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Password != nil {
		l = len(*m.Password)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovCommon(uint64(*m.Type))
	}
	if m.OldPassword != nil {
		l = len(*m.OldPassword)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Phone != nil {
		l = len(*m.Phone)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovCommon(uint64(*m.Type))
	}
	if m.AreaCode != nil {
		l = len(*m.AreaCode)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != nil {
		l = len(*m.Code)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovCommon(uint64(*m.Type))
	}
	if m.Phone != nil {
		l = len(*m.Phone)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cid != nil {
		n += 1 + sovCommon(uint64(*m.Cid))
	}
	if m.Sid != nil {
		n += 1 + sovCommon(uint64(*m.Sid))
	}
	if m.Ip != nil {
		l = len(*m.Ip)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.HeadIcon != nil {
		l = len(*m.HeadIcon)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Vaild != nil {
		n += 2
	}
	if m.Sex != nil {
		n += 1 + sovCommon(uint64(*m.Sex))
	}
	if m.State != nil {
		n += 1 + sovCommon(uint64(*m.State))
	}
	if m.ErrMsg != nil {
		l = len(*m.ErrMsg)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.IsCheckPhone != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArticleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovCommon(uint64(*m.Id))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Icon != nil {
		l = len(*m.Icon)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ArticleAdd != nil {
		l = len(*m.ArticleAdd)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ArticleType != nil {
		n += 1 + sovCommon(uint64(*m.ArticleType))
	}
	if m.Location != nil {
		n += 1 + sovCommon(uint64(*m.Location))
	}
	if m.IsMain != nil {
		n += 1 + sovCommon(uint64(*m.IsMain))
	}
	if m.Profile != nil {
		l = len(*m.Profile)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ObjectId != nil {
		n += 1 + sovCommon(uint64(*m.ObjectId))
	}
	if m.ObjPlayerId != nil {
		n += 1 + sovCommon(uint64(*m.ObjPlayerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArticleListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ArticleListId != nil {
		n += 1 + sovCommon(uint64(*m.ArticleListId))
	}
	if len(m.ArticleList) > 0 {
		for _, e := range m.ArticleList {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.TweetsId != nil {
		n += 1 + sovCommon(uint64(*m.TweetsId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TweetsListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TweetsId != nil {
		n += 1 + sovCommon(uint64(*m.TweetsId))
	}
	if len(m.TweetsList) > 0 {
		for _, e := range m.TweetsList {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TweetsIdsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TweetsIdList) > 0 {
		for _, e := range m.TweetsIdList {
			n += 1 + sovCommon(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MyMainPageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fans != nil {
		n += 1 + sovCommon(uint64(*m.Fans))
	}
	if m.Attentions != nil {
		n += 1 + sovCommon(uint64(*m.Attentions))
	}
	if m.Zans != nil {
		n += 1 + sovCommon(uint64(*m.Zans))
	}
	if m.Icon != nil {
		n += 1 + sovCommon(uint64(*m.Icon))
	}
	if m.DynamicData != nil {
		l = m.DynamicData.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.PlayerId != nil {
		n += 1 + sovCommon(uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AttenInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovCommon(uint64(*m.PlayerId))
	}
	if m.Type != nil {
		n += 1 + sovCommon(uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ZanInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogId != nil {
		n += 1 + sovCommon(uint64(*m.LogId))
	}
	if m.Type != nil {
		n += 1 + sovCommon(uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IdInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovCommon(uint64(*m.Id))
	}
	if m.MainId != nil {
		n += 1 + sovCommon(uint64(*m.MainId))
	}
	if m.SecondId != nil {
		n += 1 + sovCommon(uint64(*m.SecondId))
	}
	if m.Page != nil {
		n += 1 + sovCommon(uint64(*m.Page))
	}
	if m.PageSize != nil {
		n += 1 + sovCommon(uint64(*m.PageSize))
	}
	if len(m.HotList) > 0 {
		for _, e := range m.HotList {
			n += 1 + sovCommon(uint64(e))
		}
	}
	if m.JumpMainCommentId != nil {
		n += 1 + sovCommon(uint64(*m.JumpMainCommentId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovCommon(uint64(*m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BtnClickInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BtnType != nil {
		n += 1 + sovCommon(uint64(*m.BtnType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PageRegLogLoad) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovCommon(uint64(*m.Type))
	}
	if m.Channel != nil {
		l = len(*m.Channel)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Code != nil {
		l = len(*m.Code)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Idfa != nil {
		l = len(*m.Idfa)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCommon(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ToastMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ToastMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ToastMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Text = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("Text")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NTP) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NTP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NTP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T1", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.T1 = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T2", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.T2 = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("T1")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllPersonalChatLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllPersonalChatLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllPersonalChatLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersonalChatLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PersonalChatLog = append(m.PersonalChatLog, &share_message.PersonalChatLog{})
			if err := m.PersonalChatLog[len(m.PersonalChatLog)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssistantInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssistantInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssistantInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssistantInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssistantInfoList = append(m.AssistantInfoList, &AssistantMsg{})
			if err := m.AssistantInfoList[len(m.AssistantInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssistantMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssistantMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssistantMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MsgType = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DateTime = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddPalType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddPalType = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadIcon = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Phone = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SysContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SysContent = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SysNoticeContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SysNoticeContent = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddFriendType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddFriendType = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Signature = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = append(m.Photo, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoticeId = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sex = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllPlayerMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllPlayerMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllPlayerMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Myself", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Myself == nil {
				m.Myself = &PlayerMsg{}
			}
			if err := m.Myself.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Friends", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Friends = append(m.Friends, &PlayerMsg{})
			if err := m.Friends[len(m.Friends)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, &TeamMsg{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatMsg = append(m.ChatMsg, &AllPersonalChatLog{})
			if err := m.ChatMsg[len(m.ChatMsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllAddPlayerMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllAddPlayerMsg == nil {
				m.AllAddPlayerMsg = &share_message.AllAddPlayerMsg{}
			}
			if err := m.AllAddPlayerMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNearBy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsNearBy = &b
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pay = append(m.Pay, &share_message.PlatformChannel{})
			if err := m.Pay[len(m.Pay)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ShopAddr = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssistantInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssistantInfoList = append(m.AssistantInfoList, &AssistantMsg{})
			if err := m.AssistantInfoList[len(m.AssistantInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayConfig = append(m.PayConfig, &share_message.PaymentSetting{})
			if err := m.PayConfig[len(m.PayConfig)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LimitConfig == nil {
				m.LimitConfig = &share_message.SysParameter{}
			}
			if err := m.LimitConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LabelMsg == nil {
				m.LabelMsg = &LabelMsg{}
			}
			if err := m.LabelMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecommendInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecommendInfo == nil {
				m.RecommendInfo = &RecommendInfo{}
			}
			if err := m.RecommendInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TweetsListResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TweetsListResponse == nil {
				m.TweetsListResponse = &TweetsListResponse{}
			}
			if err := m.TweetsListResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RandName = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SquareAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SquareAddr = &s
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FanNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FanNum = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttentionNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AttentionNum = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZanNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ZanNum = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecommendPlayerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecommendPlayerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecommendPlayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sex = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadIcon = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecommendTeamInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecommendTeamInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecommendTeamInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TeamId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberInfo = append(m.MemberInfo, &RecommendPlayerInfo{})
			if err := m.MemberInfo[len(m.MemberInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OwnerId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecommendInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecommendInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecommendInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamInfo = append(m.TeamInfo, &RecommendTeamInfo{})
			if err := m.TeamInfo[len(m.TeamInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerInfo = append(m.PlayerInfo, &RecommendPlayerInfo{})
			if err := m.PlayerInfo[len(m.PlayerInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Photo = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelInfo = append(m.LabelInfo, &share_message.InterestTag{})
			if err := m.LabelInfo[len(m.LabelInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Max = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Min = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterestType = append(m.InterestType, &share_message.InterestType{})
			if err := m.InterestType[len(m.InterestType)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllPlayerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllPlayerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllPlayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerMsg = append(m.PlayerMsg, &PlayerMsg{})
			if err := m.PlayerMsg[len(m.PlayerMsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TeamId = &v
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FriendId = append(m.FriendId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommon
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCommon
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.FriendId) == 0 {
					m.FriendId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FriendId = append(m.FriendId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendId", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SessionId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangePlayerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangePlayerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangePlayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value1 = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = append(m.Photo, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerSetting == nil {
				m.PlayerSetting = &share_message.PlayerSetting{}
			}
			if err := m.PlayerSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackgroundImageURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BackgroundImageURL = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Gold = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadIcon = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sex = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeopleID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PeopleID = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Phone = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = append(m.Photo, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Email = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FriendSetting == nil {
				m.FriendSetting = &share_message.FriendSetting{}
			}
			if err := m.FriendSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankInfo = append(m.BankInfo, &share_message.BankInfo{})
			if err := m.BankInfo[len(m.BankInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RealName = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Signature = &s
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Provice = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.City = &s
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Area = &s
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPayPassword", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsPayPassword = &b
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerSetting == nil {
				m.PlayerSetting = &share_message.PlayerSetting{}
			}
			if err := m.PlayerSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BlackList = append(m.BlackList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommon
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCommon
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BlackList) == 0 {
					m.BlackList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BlackList = append(m.BlackList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BlackList", wireType)
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddType", wireType)
			}
			var v share_message.AddFriend_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= share_message.AddFriend_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddType = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearLocalLogTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearLocalLogTime = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVisitor", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsVisitor = &b
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLoginPassword", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsLoginPassword = &b
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenWindows", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OpenWindows = &v
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeTimes", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FreeTimes = &v
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ReName = &s
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMark", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsMark = &b
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBindWechat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsBindWechat = &b
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emoticons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emoticons = append(m.Emoticons, &share_message.PlayerEmoticon{})
			if err := m.Emoticons[len(m.Emoticons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelInfo = append(m.LabelInfo, &share_message.LabelInfo{})
			if err := m.LabelInfo[len(m.LabelInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AreaCode = &s
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackgroundImageURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BackgroundImageURL = &s
			iNdEx = postIndex
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Coin = &v
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BCoin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BCoin = &v
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YoungPassWord", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.YoungPassWord = &s
			iNdEx = postIndex
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCanRoam", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsCanRoam = &b
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constellation", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Constellation = &v
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ESportCoin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ESportCoin = &v
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MixId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MixId = &v
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSetPersonalTags", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsSetPersonalTags = &b
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("PlayerId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewFriends) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewFriends: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewFriends: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Friends", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Friends = append(m.Friends, &PlayerMsg{})
			if err := m.Friends[len(m.Friends)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &share_message.TeamData{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamChatInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamChatInfo == nil {
				m.TeamChatInfo = &share_message.TeamChatInfo{}
			}
			if err := m.TeamChatInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &share_message.PersonalTeamData{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Setting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Setting == nil {
				m.Setting = &share_message.TeamSetting{}
			}
			if err := m.Setting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsShow = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MyData == nil {
				m.MyData = &share_message.PersonalTeamData{}
			}
			if err := m.MyData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BroadId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerTimeoutBeKick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerTimeoutBeKick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerTimeoutBeKick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Tip = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPage", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurrentPage = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PlayerIdList = append(m.PlayerIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommon
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCommon
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PlayerIdList) == 0 {
					m.PlayerIdList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PlayerIdList = append(m.PlayerIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerIdList", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TeamId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InviteId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdminId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdvId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TeamId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPage", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurrentPage = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamManagerSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamManagerSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamManagerSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ManageList = append(m.ManageList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommon
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCommon
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ManageList) == 0 {
					m.ManageList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ManageList = append(m.ManageList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ManageList", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MessageSetting == nil {
				m.MessageSetting = &share_message.MessageSetting{}
			}
			if err := m.MessageSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityInfo = append(m.ActivityInfo, &TeamActivity{})
			if err := m.ActivityInfo[len(m.ActivityInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutPlayerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutPlayerInfo = append(m.OutPlayerInfo, &PlayerMsg{})
			if err := m.OutPlayerInfo[len(m.OutPlayerInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviteInfo = append(m.InviteInfo, &share_message.InviteInfo{})
			if err := m.InviteInfo[len(m.InviteInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TeamId = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &share_message.PersonalTeamData{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamActivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamActivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamActivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Day = &v
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PlayerId = append(m.PlayerId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommon
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCommon
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PlayerId) == 0 {
					m.PlayerId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PlayerId = append(m.PlayerId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PasswordInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PasswordInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PasswordInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Password = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OldPassword = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCodeRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Phone = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AreaCode = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("Phone")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Code = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Phone = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cid = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sid = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ip = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadIcon = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vaild", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Vaild = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sex = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ErrMsg = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCheckPhone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsCheckPhone = &b
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Icon = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleAdd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ArticleAdd = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ArticleType = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Location = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMain", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMain = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Profile = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ObjectId = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjPlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ObjPlayerId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleListId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ArticleListId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArticleList = append(m.ArticleList, &ArticleResponse{})
			if err := m.ArticleList[len(m.ArticleList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TweetsId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TweetsId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TweetsListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TweetsListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TweetsListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TweetsId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TweetsId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TweetsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TweetsList = append(m.TweetsList, &ArticleListResponse{})
			if err := m.TweetsList[len(m.TweetsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TweetsIdsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TweetsIdsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TweetsIdsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TweetsIdList = append(m.TweetsIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommon
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCommon
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TweetsIdList) == 0 {
					m.TweetsIdList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TweetsIdList = append(m.TweetsIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TweetsIdList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MyMainPageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MyMainPageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MyMainPageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fans", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Fans = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attentions", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Attentions = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zans", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Zans = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Icon = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DynamicData == nil {
				m.DynamicData = &share_message.DynamicDataListPage{}
			}
			if err := m.DynamicData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttenInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttenInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttenInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZanInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZanInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZanInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IdInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MainId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SecondId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HotList = append(m.HotList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommon
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCommon
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.HotList) == 0 {
					m.HotList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HotList = append(m.HotList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HotList", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpMainCommentId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JumpMainCommentId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BtnClickInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BtnClickInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BtnClickInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtnType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BtnType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageRegLogLoad) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageRegLogLoad: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageRegLogLoad: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Channel = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Code = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idfa", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Idfa = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCommon
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCommon(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCommon
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCommon = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon   = fmt.Errorf("proto: integer overflow")
)
