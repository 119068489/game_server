// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server_server.proto

package server_server

import (
	fmt "fmt"
	share_message "game_server/pb/share_message"
	github_com_akqp2019_protobuf_proto "github.com/akqp2019/protobuf/proto"
	proto "github.com/akqp2019/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type NotifyAddCoinReq struct {
	NotifyAddCoin        *string  `protobuf:"bytes,1,opt,name=NotifyAddCoin" json:"NotifyAddCoin,omitempty" bson:"NotifyAddCoin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *NotifyAddCoinReq) Reset()         { *m = NotifyAddCoinReq{} }
func (m *NotifyAddCoinReq) String() string { return proto.CompactTextString(m) }
func (*NotifyAddCoinReq) ProtoMessage()    {}
func (*NotifyAddCoinReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{0}
}
func (m *NotifyAddCoinReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyAddCoinReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyAddCoinReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyAddCoinReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyAddCoinReq.Merge(m, src)
}
func (m *NotifyAddCoinReq) XXX_Size() int {
	return m.Size()
}
func (m *NotifyAddCoinReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyAddCoinReq.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyAddCoinReq proto.InternalMessageInfo

func (m *NotifyAddCoinReq) GetNotifyAddCoin() string {
	if m != nil && m.NotifyAddCoin != nil {
		return *m.NotifyAddCoin
	}
	return ""
}

type MsgToHall struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	RpcName              *string  `protobuf:"bytes,2,opt,name=RpcName" json:"RpcName,omitempty" bson:"RpcName,omitempty"`
	MsgName              *string  `protobuf:"bytes,3,opt,name=MsgName" json:"MsgName,omitempty" bson:"MsgName,omitempty"`
	Msg                  []byte   `protobuf:"bytes,4,opt,name=Msg" json:"Msg,omitempty" bson:"Msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *MsgToHall) Reset()         { *m = MsgToHall{} }
func (m *MsgToHall) String() string { return proto.CompactTextString(m) }
func (*MsgToHall) ProtoMessage()    {}
func (*MsgToHall) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{1}
}
func (m *MsgToHall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgToHall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgToHall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgToHall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgToHall.Merge(m, src)
}
func (m *MsgToHall) XXX_Size() int {
	return m.Size()
}
func (m *MsgToHall) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgToHall.DiscardUnknown(m)
}

var xxx_messageInfo_MsgToHall proto.InternalMessageInfo

func (m *MsgToHall) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *MsgToHall) GetRpcName() string {
	if m != nil && m.RpcName != nil {
		return *m.RpcName
	}
	return ""
}

func (m *MsgToHall) GetMsgName() string {
	if m != nil && m.MsgName != nil {
		return *m.MsgName
	}
	return ""
}

func (m *MsgToHall) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type AddFriend struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	FriendId             *int64   `protobuf:"varint,2,opt,name=FriendId" json:"FriendId,omitempty" bson:"FriendId,omitempty"`
	Type                 *int32   `protobuf:"varint,3,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	OpenWindows          *int32   `protobuf:"varint,4,opt,name=OpenWindows" json:"OpenWindows,omitempty" bson:"OpenWindows,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *AddFriend) Reset()         { *m = AddFriend{} }
func (m *AddFriend) String() string { return proto.CompactTextString(m) }
func (*AddFriend) ProtoMessage()    {}
func (*AddFriend) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{2}
}
func (m *AddFriend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddFriend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddFriend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddFriend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddFriend.Merge(m, src)
}
func (m *AddFriend) XXX_Size() int {
	return m.Size()
}
func (m *AddFriend) XXX_DiscardUnknown() {
	xxx_messageInfo_AddFriend.DiscardUnknown(m)
}

var xxx_messageInfo_AddFriend proto.InternalMessageInfo

func (m *AddFriend) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *AddFriend) GetFriendId() int64 {
	if m != nil && m.FriendId != nil {
		return *m.FriendId
	}
	return 0
}

func (m *AddFriend) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *AddFriend) GetOpenWindows() int32 {
	if m != nil && m.OpenWindows != nil {
		return *m.OpenWindows
	}
	return 0
}

type PlayerIdInfo struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Success              *bool    `protobuf:"varint,2,opt,name=Success" json:"Success,omitempty" bson:"Success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerIdInfo) Reset()         { *m = PlayerIdInfo{} }
func (m *PlayerIdInfo) String() string { return proto.CompactTextString(m) }
func (*PlayerIdInfo) ProtoMessage()    {}
func (*PlayerIdInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{3}
}
func (m *PlayerIdInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerIdInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerIdInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerIdInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerIdInfo.Merge(m, src)
}
func (m *PlayerIdInfo) XXX_Size() int {
	return m.Size()
}
func (m *PlayerIdInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerIdInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerIdInfo proto.InternalMessageInfo

func (m *PlayerIdInfo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerIdInfo) GetSuccess() bool {
	if m != nil && m.Success != nil {
		return *m.Success
	}
	return false
}

type ChatToOtherReq struct {
	Chat                 *share_message.Chat `protobuf:"bytes,1,opt,name=Chat" json:"Chat,omitempty" bson:"Chat,omitempty"`
	PlayerId             *int64              `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-" bson:"-"`
	XXX_unrecognized     []byte              `json:"-" bson:"-"`
	XXX_sizecache        int32               `json:"-" bson:"-"`
}

func (m *ChatToOtherReq) Reset()         { *m = ChatToOtherReq{} }
func (m *ChatToOtherReq) String() string { return proto.CompactTextString(m) }
func (*ChatToOtherReq) ProtoMessage()    {}
func (*ChatToOtherReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{4}
}
func (m *ChatToOtherReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatToOtherReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatToOtherReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatToOtherReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatToOtherReq.Merge(m, src)
}
func (m *ChatToOtherReq) XXX_Size() int {
	return m.Size()
}
func (m *ChatToOtherReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatToOtherReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChatToOtherReq proto.InternalMessageInfo

func (m *ChatToOtherReq) GetChat() *share_message.Chat {
	if m != nil {
		return m.Chat
	}
	return nil
}

func (m *ChatToOtherReq) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

type ReloadDynamicReq struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ReloadDynamicReq) Reset()         { *m = ReloadDynamicReq{} }
func (m *ReloadDynamicReq) String() string { return proto.CompactTextString(m) }
func (*ReloadDynamicReq) ProtoMessage()    {}
func (*ReloadDynamicReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{5}
}
func (m *ReloadDynamicReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReloadDynamicReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReloadDynamicReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReloadDynamicReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReloadDynamicReq.Merge(m, src)
}
func (m *ReloadDynamicReq) XXX_Size() int {
	return m.Size()
}
func (m *ReloadDynamicReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ReloadDynamicReq.DiscardUnknown(m)
}

var xxx_messageInfo_ReloadDynamicReq proto.InternalMessageInfo

func (m *ReloadDynamicReq) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

type ShopOrderRequest struct {
	OrderId              *int64   `protobuf:"varint,1,opt,name=OrderId" json:"OrderId,omitempty" bson:"OrderId,omitempty"`
	Types                *int32   `protobuf:"varint,2,opt,name=Types" json:"Types,omitempty" bson:"Types,omitempty"`
	UserId               *int64   `protobuf:"varint,3,opt,name=UserId" json:"UserId,omitempty" bson:"UserId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ShopOrderRequest) Reset()         { *m = ShopOrderRequest{} }
func (m *ShopOrderRequest) String() string { return proto.CompactTextString(m) }
func (*ShopOrderRequest) ProtoMessage()    {}
func (*ShopOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{6}
}
func (m *ShopOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShopOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShopOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShopOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShopOrderRequest.Merge(m, src)
}
func (m *ShopOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *ShopOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShopOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShopOrderRequest proto.InternalMessageInfo

func (m *ShopOrderRequest) GetOrderId() int64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *ShopOrderRequest) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *ShopOrderRequest) GetUserId() int64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

type AdminInfo struct {
	UserId               *int64   `protobuf:"varint,1,opt,name=UserId" json:"UserId,omitempty" bson:"UserId,omitempty"`
	ServerId             *int32   `protobuf:"varint,2,opt,name=ServerId" json:"ServerId,omitempty" bson:"ServerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *AdminInfo) Reset()         { *m = AdminInfo{} }
func (m *AdminInfo) String() string { return proto.CompactTextString(m) }
func (*AdminInfo) ProtoMessage()    {}
func (*AdminInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{7}
}
func (m *AdminInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminInfo.Merge(m, src)
}
func (m *AdminInfo) XXX_Size() int {
	return m.Size()
}
func (m *AdminInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AdminInfo proto.InternalMessageInfo

func (m *AdminInfo) GetUserId() int64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *AdminInfo) GetServerId() int32 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

type Recharge struct {
	PlayerId             *int64   `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	RechargeGold         *int64   `protobuf:"varint,2,req,name=RechargeGold" json:"RechargeGold,omitempty" bson:"RechargeGold,omitempty"`
	OrderId              *string  `protobuf:"bytes,3,opt,name=OrderId" json:"OrderId,omitempty" bson:"OrderId,omitempty"`
	SourceType           *int32   `protobuf:"varint,4,opt,name=SourceType" json:"SourceType,omitempty" bson:"SourceType,omitempty"`
	Note                 *string  `protobuf:"bytes,5,opt,name=Note" json:"Note,omitempty" bson:"Note,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *Recharge) Reset()         { *m = Recharge{} }
func (m *Recharge) String() string { return proto.CompactTextString(m) }
func (*Recharge) ProtoMessage()    {}
func (*Recharge) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{8}
}
func (m *Recharge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Recharge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Recharge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Recharge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recharge.Merge(m, src)
}
func (m *Recharge) XXX_Size() int {
	return m.Size()
}
func (m *Recharge) XXX_DiscardUnknown() {
	xxx_messageInfo_Recharge.DiscardUnknown(m)
}

var xxx_messageInfo_Recharge proto.InternalMessageInfo

func (m *Recharge) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *Recharge) GetRechargeGold() int64 {
	if m != nil && m.RechargeGold != nil {
		return *m.RechargeGold
	}
	return 0
}

func (m *Recharge) GetOrderId() string {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return ""
}

func (m *Recharge) GetSourceType() int32 {
	if m != nil && m.SourceType != nil {
		return *m.SourceType
	}
	return 0
}

func (m *Recharge) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

type AuditOrder struct {
	OrderId              *string  `protobuf:"bytes,1,req,name=OrderId" json:"OrderId,omitempty" bson:"OrderId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *AuditOrder) Reset()         { *m = AuditOrder{} }
func (m *AuditOrder) String() string { return proto.CompactTextString(m) }
func (*AuditOrder) ProtoMessage()    {}
func (*AuditOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{9}
}
func (m *AuditOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuditOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuditOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuditOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuditOrder.Merge(m, src)
}
func (m *AuditOrder) XXX_Size() int {
	return m.Size()
}
func (m *AuditOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_AuditOrder.DiscardUnknown(m)
}

var xxx_messageInfo_AuditOrder proto.InternalMessageInfo

func (m *AuditOrder) GetOrderId() string {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return ""
}

type SysteamModId struct {
	Id                   *string  `protobuf:"bytes,1,req,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *SysteamModId) Reset()         { *m = SysteamModId{} }
func (m *SysteamModId) String() string { return proto.CompactTextString(m) }
func (*SysteamModId) ProtoMessage()    {}
func (*SysteamModId) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{10}
}
func (m *SysteamModId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SysteamModId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SysteamModId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SysteamModId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SysteamModId.Merge(m, src)
}
func (m *SysteamModId) XXX_Size() int {
	return m.Size()
}
func (m *SysteamModId) XXX_DiscardUnknown() {
	xxx_messageInfo_SysteamModId.DiscardUnknown(m)
}

var xxx_messageInfo_SysteamModId proto.InternalMessageInfo

func (m *SysteamModId) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

type PlayerSI struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Count                *int64   `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty" bson:"Count,omitempty"`
	Account              *string  `protobuf:"bytes,3,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerSI) Reset()         { *m = PlayerSI{} }
func (m *PlayerSI) String() string { return proto.CompactTextString(m) }
func (*PlayerSI) ProtoMessage()    {}
func (*PlayerSI) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{11}
}
func (m *PlayerSI) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerSI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerSI.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerSI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerSI.Merge(m, src)
}
func (m *PlayerSI) XXX_Size() int {
	return m.Size()
}
func (m *PlayerSI) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerSI.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerSI proto.InternalMessageInfo

func (m *PlayerSI) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerSI) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *PlayerSI) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

type EndWaiterMessage struct {
	Mid                  *int64   `protobuf:"varint,1,opt,name=Mid" json:"Mid,omitempty" bson:"Mid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *EndWaiterMessage) Reset()         { *m = EndWaiterMessage{} }
func (m *EndWaiterMessage) String() string { return proto.CompactTextString(m) }
func (*EndWaiterMessage) ProtoMessage()    {}
func (*EndWaiterMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{12}
}
func (m *EndWaiterMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndWaiterMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndWaiterMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndWaiterMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndWaiterMessage.Merge(m, src)
}
func (m *EndWaiterMessage) XXX_Size() int {
	return m.Size()
}
func (m *EndWaiterMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EndWaiterMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EndWaiterMessage proto.InternalMessageInfo

func (m *EndWaiterMessage) GetMid() int64 {
	if m != nil && m.Mid != nil {
		return *m.Mid
	}
	return 0
}

type PlayerIds struct {
	PlayerIds            []int64  `protobuf:"varint,1,rep,name=PlayerIds" json:"PlayerIds,omitempty" bson:"PlayerIds,omitempty"`
	Node                 *string  `protobuf:"bytes,2,opt,name=Node" json:"Node,omitempty" bson:"Node,omitempty"`
	Operator             *string  `protobuf:"bytes,3,opt,name=Operator" json:"Operator,omitempty" bson:"Operator,omitempty"`
	BanOverTime          *int64   `protobuf:"varint,4,opt,name=BanOverTime" json:"BanOverTime,omitempty" bson:"BanOverTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerIds) Reset()         { *m = PlayerIds{} }
func (m *PlayerIds) String() string { return proto.CompactTextString(m) }
func (*PlayerIds) ProtoMessage()    {}
func (*PlayerIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{13}
}
func (m *PlayerIds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerIds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerIds.Merge(m, src)
}
func (m *PlayerIds) XXX_Size() int {
	return m.Size()
}
func (m *PlayerIds) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerIds.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerIds proto.InternalMessageInfo

func (m *PlayerIds) GetPlayerIds() []int64 {
	if m != nil {
		return m.PlayerIds
	}
	return nil
}

func (m *PlayerIds) GetNode() string {
	if m != nil && m.Node != nil {
		return *m.Node
	}
	return ""
}

func (m *PlayerIds) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *PlayerIds) GetBanOverTime() int64 {
	if m != nil && m.BanOverTime != nil {
		return *m.BanOverTime
	}
	return 0
}

type TeamBan struct {
	Ids                  []int64  `protobuf:"varint,1,rep,name=Ids" json:"Ids,omitempty" bson:"Ids,omitempty"`
	BanTime              *int64   `protobuf:"varint,2,opt,name=BanTime" json:"BanTime,omitempty" bson:"BanTime,omitempty"`
	Status               *int32   `protobuf:"varint,3,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	Node                 *string  `protobuf:"bytes,4,opt,name=Node" json:"Node,omitempty" bson:"Node,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TeamBan) Reset()         { *m = TeamBan{} }
func (m *TeamBan) String() string { return proto.CompactTextString(m) }
func (*TeamBan) ProtoMessage()    {}
func (*TeamBan) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{14}
}
func (m *TeamBan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamBan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamBan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamBan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamBan.Merge(m, src)
}
func (m *TeamBan) XXX_Size() int {
	return m.Size()
}
func (m *TeamBan) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamBan.DiscardUnknown(m)
}

var xxx_messageInfo_TeamBan proto.InternalMessageInfo

func (m *TeamBan) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *TeamBan) GetBanTime() int64 {
	if m != nil && m.BanTime != nil {
		return *m.BanTime
	}
	return 0
}

func (m *TeamBan) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *TeamBan) GetNode() string {
	if m != nil && m.Node != nil {
		return *m.Node
	}
	return ""
}

type CreatePlayer struct {
	Site                 *string                   `protobuf:"bytes,1,req,name=Site" json:"Site,omitempty" bson:"Site,omitempty"`
	PlayerBase           *share_message.PlayerBase `protobuf:"bytes,2,req,name=PlayerBase" json:"PlayerBase,omitempty" bson:"PlayerBase,omitempty"`
	ParentId             *int64                    `protobuf:"varint,3,opt,name=ParentId" json:"ParentId,omitempty" bson:"ParentId,omitempty"`
	CreateIp             *string                   `protobuf:"bytes,4,opt,name=CreateIp" json:"CreateIp,omitempty" bson:"CreateIp,omitempty"`
	Phone                *string                   `protobuf:"bytes,5,opt,name=Phone" json:"Phone,omitempty" bson:"Phone,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-" bson:"-"`
	XXX_unrecognized     []byte                    `json:"-" bson:"-"`
	XXX_sizecache        int32                     `json:"-" bson:"-"`
}

func (m *CreatePlayer) Reset()         { *m = CreatePlayer{} }
func (m *CreatePlayer) String() string { return proto.CompactTextString(m) }
func (*CreatePlayer) ProtoMessage()    {}
func (*CreatePlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{15}
}
func (m *CreatePlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePlayer.Merge(m, src)
}
func (m *CreatePlayer) XXX_Size() int {
	return m.Size()
}
func (m *CreatePlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePlayer.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePlayer proto.InternalMessageInfo

func (m *CreatePlayer) GetSite() string {
	if m != nil && m.Site != nil {
		return *m.Site
	}
	return ""
}

func (m *CreatePlayer) GetPlayerBase() *share_message.PlayerBase {
	if m != nil {
		return m.PlayerBase
	}
	return nil
}

func (m *CreatePlayer) GetParentId() int64 {
	if m != nil && m.ParentId != nil {
		return *m.ParentId
	}
	return 0
}

func (m *CreatePlayer) GetCreateIp() string {
	if m != nil && m.CreateIp != nil {
		return *m.CreateIp
	}
	return ""
}

func (m *CreatePlayer) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

//修改群资料请求
type EditTeam struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	MaxMember            *int32   `protobuf:"varint,3,opt,name=MaxMember" json:"MaxMember,omitempty" bson:"MaxMember,omitempty"`
	GongGao              *string  `protobuf:"bytes,4,opt,name=GongGao" json:"GongGao,omitempty" bson:"GongGao,omitempty"`
	IsRecommend          *bool    `protobuf:"varint,5,opt,name=IsRecommend" json:"IsRecommend,omitempty" bson:"IsRecommend,omitempty"`
	Level                *int32   `protobuf:"varint,6,opt,name=Level" json:"Level,omitempty" bson:"Level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *EditTeam) Reset()         { *m = EditTeam{} }
func (m *EditTeam) String() string { return proto.CompactTextString(m) }
func (*EditTeam) ProtoMessage()    {}
func (*EditTeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{16}
}
func (m *EditTeam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EditTeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EditTeam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EditTeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditTeam.Merge(m, src)
}
func (m *EditTeam) XXX_Size() int {
	return m.Size()
}
func (m *EditTeam) XXX_DiscardUnknown() {
	xxx_messageInfo_EditTeam.DiscardUnknown(m)
}

var xxx_messageInfo_EditTeam proto.InternalMessageInfo

func (m *EditTeam) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *EditTeam) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *EditTeam) GetMaxMember() int32 {
	if m != nil && m.MaxMember != nil {
		return *m.MaxMember
	}
	return 0
}

func (m *EditTeam) GetGongGao() string {
	if m != nil && m.GongGao != nil {
		return *m.GongGao
	}
	return ""
}

func (m *EditTeam) GetIsRecommend() bool {
	if m != nil && m.IsRecommend != nil {
		return *m.IsRecommend
	}
	return false
}

func (m *EditTeam) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

//增减群成员请求
type MemberOptRequest struct {
	TeamId               *int64   `protobuf:"varint,1,opt,name=TeamId" json:"TeamId,omitempty" bson:"TeamId,omitempty"`
	PlayerIds            []int64  `protobuf:"varint,2,rep,name=PlayerIds" json:"PlayerIds,omitempty" bson:"PlayerIds,omitempty"`
	Types                *int32   `protobuf:"varint,3,opt,name=Types" json:"Types,omitempty" bson:"Types,omitempty"`
	AdminID              *int64   `protobuf:"varint,4,opt,name=AdminID" json:"AdminID,omitempty" bson:"AdminID,omitempty"`
	PlayerID             *int64   `protobuf:"varint,5,opt,name=PlayerID" json:"PlayerID,omitempty" bson:"PlayerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *MemberOptRequest) Reset()         { *m = MemberOptRequest{} }
func (m *MemberOptRequest) String() string { return proto.CompactTextString(m) }
func (*MemberOptRequest) ProtoMessage()    {}
func (*MemberOptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{17}
}
func (m *MemberOptRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemberOptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemberOptRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemberOptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberOptRequest.Merge(m, src)
}
func (m *MemberOptRequest) XXX_Size() int {
	return m.Size()
}
func (m *MemberOptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberOptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MemberOptRequest proto.InternalMessageInfo

func (m *MemberOptRequest) GetTeamId() int64 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *MemberOptRequest) GetPlayerIds() []int64 {
	if m != nil {
		return m.PlayerIds
	}
	return nil
}

func (m *MemberOptRequest) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *MemberOptRequest) GetAdminID() int64 {
	if m != nil && m.AdminID != nil {
		return *m.AdminID
	}
	return 0
}

func (m *MemberOptRequest) GetPlayerID() int64 {
	if m != nil && m.PlayerID != nil {
		return *m.PlayerID
	}
	return 0
}

type ShopOrderExpressBody struct {
	DateTime             *string  `protobuf:"bytes,1,opt,name=dateTime" json:"dateTime,omitempty" bson:"dateTime,omitempty"`
	Remark               *string  `protobuf:"bytes,2,opt,name=remark" json:"remark,omitempty" bson:"remark,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ShopOrderExpressBody) Reset()         { *m = ShopOrderExpressBody{} }
func (m *ShopOrderExpressBody) String() string { return proto.CompactTextString(m) }
func (*ShopOrderExpressBody) ProtoMessage()    {}
func (*ShopOrderExpressBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{18}
}
func (m *ShopOrderExpressBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShopOrderExpressBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShopOrderExpressBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShopOrderExpressBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShopOrderExpressBody.Merge(m, src)
}
func (m *ShopOrderExpressBody) XXX_Size() int {
	return m.Size()
}
func (m *ShopOrderExpressBody) XXX_DiscardUnknown() {
	xxx_messageInfo_ShopOrderExpressBody.DiscardUnknown(m)
}

var xxx_messageInfo_ShopOrderExpressBody proto.InternalMessageInfo

func (m *ShopOrderExpressBody) GetDateTime() string {
	if m != nil && m.DateTime != nil {
		return *m.DateTime
	}
	return ""
}

func (m *ShopOrderExpressBody) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

type ShopOrderExpressInfos struct {
	ExpressInfos         []*ShopOrderExpressBody `protobuf:"bytes,1,rep,name=expressInfos" json:"expressInfos,omitempty" bson:"expressInfos,omitempty"`
	ExpressPhone         *string                 `protobuf:"bytes,2,opt,name=expressPhone" json:"expressPhone,omitempty" bson:"expressPhone,omitempty"`
	ExpressName          *string                 `protobuf:"bytes,3,opt,name=expressName" json:"expressName,omitempty" bson:"expressName,omitempty"`
	UserId               *int64                  `protobuf:"varint,4,opt,name=userId" json:"userId,omitempty" bson:"userId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-" bson:"-"`
	XXX_unrecognized     []byte                  `json:"-" bson:"-"`
	XXX_sizecache        int32                   `json:"-" bson:"-"`
}

func (m *ShopOrderExpressInfos) Reset()         { *m = ShopOrderExpressInfos{} }
func (m *ShopOrderExpressInfos) String() string { return proto.CompactTextString(m) }
func (*ShopOrderExpressInfos) ProtoMessage()    {}
func (*ShopOrderExpressInfos) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{19}
}
func (m *ShopOrderExpressInfos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShopOrderExpressInfos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShopOrderExpressInfos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShopOrderExpressInfos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShopOrderExpressInfos.Merge(m, src)
}
func (m *ShopOrderExpressInfos) XXX_Size() int {
	return m.Size()
}
func (m *ShopOrderExpressInfos) XXX_DiscardUnknown() {
	xxx_messageInfo_ShopOrderExpressInfos.DiscardUnknown(m)
}

var xxx_messageInfo_ShopOrderExpressInfos proto.InternalMessageInfo

func (m *ShopOrderExpressInfos) GetExpressInfos() []*ShopOrderExpressBody {
	if m != nil {
		return m.ExpressInfos
	}
	return nil
}

func (m *ShopOrderExpressInfos) GetExpressPhone() string {
	if m != nil && m.ExpressPhone != nil {
		return *m.ExpressPhone
	}
	return ""
}

func (m *ShopOrderExpressInfos) GetExpressName() string {
	if m != nil && m.ExpressName != nil {
		return *m.ExpressName
	}
	return ""
}

func (m *ShopOrderExpressInfos) GetUserId() int64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

type AddPlayerFriendInfo struct {
	PlayerID             *int64   `protobuf:"varint,1,opt,name=PlayerID" json:"PlayerID,omitempty" bson:"PlayerID,omitempty"`
	List                 []int64  `protobuf:"varint,2,rep,name=list" json:"list,omitempty" bson:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *AddPlayerFriendInfo) Reset()         { *m = AddPlayerFriendInfo{} }
func (m *AddPlayerFriendInfo) String() string { return proto.CompactTextString(m) }
func (*AddPlayerFriendInfo) ProtoMessage()    {}
func (*AddPlayerFriendInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{20}
}
func (m *AddPlayerFriendInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPlayerFriendInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPlayerFriendInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPlayerFriendInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPlayerFriendInfo.Merge(m, src)
}
func (m *AddPlayerFriendInfo) XXX_Size() int {
	return m.Size()
}
func (m *AddPlayerFriendInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPlayerFriendInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AddPlayerFriendInfo proto.InternalMessageInfo

func (m *AddPlayerFriendInfo) GetPlayerID() int64 {
	if m != nil && m.PlayerID != nil {
		return *m.PlayerID
	}
	return 0
}

func (m *AddPlayerFriendInfo) GetList() []int64 {
	if m != nil {
		return m.List
	}
	return nil
}

type CreateTeamInfo struct {
	PlayerID             *int64   `protobuf:"varint,1,opt,name=PlayerID" json:"PlayerID,omitempty" bson:"PlayerID,omitempty"`
	TeamName             *string  `protobuf:"bytes,2,opt,name=team_name" json:"team_name,omitempty" bson:"team_name,omitempty"`
	AdminID              *int64   `protobuf:"varint,3,opt,name=AdminID" json:"AdminID,omitempty" bson:"AdminID,omitempty"`
	AdminName            *string  `protobuf:"bytes,4,opt,name=AdminName" json:"AdminName,omitempty" bson:"AdminName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *CreateTeamInfo) Reset()         { *m = CreateTeamInfo{} }
func (m *CreateTeamInfo) String() string { return proto.CompactTextString(m) }
func (*CreateTeamInfo) ProtoMessage()    {}
func (*CreateTeamInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{21}
}
func (m *CreateTeamInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTeamInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTeamInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTeamInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTeamInfo.Merge(m, src)
}
func (m *CreateTeamInfo) XXX_Size() int {
	return m.Size()
}
func (m *CreateTeamInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTeamInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTeamInfo proto.InternalMessageInfo

func (m *CreateTeamInfo) GetPlayerID() int64 {
	if m != nil && m.PlayerID != nil {
		return *m.PlayerID
	}
	return 0
}

func (m *CreateTeamInfo) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CreateTeamInfo) GetAdminID() int64 {
	if m != nil && m.AdminID != nil {
		return *m.AdminID
	}
	return 0
}

func (m *CreateTeamInfo) GetAdminName() string {
	if m != nil && m.AdminName != nil {
		return *m.AdminName
	}
	return ""
}

type CreateTeamResult struct {
	TeamID               *int64   `protobuf:"varint,1,opt,name=TeamID" json:"TeamID,omitempty" bson:"TeamID,omitempty"`
	Reason               *string  `protobuf:"bytes,2,opt,name=Reason" json:"Reason,omitempty" bson:"Reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *CreateTeamResult) Reset()         { *m = CreateTeamResult{} }
func (m *CreateTeamResult) String() string { return proto.CompactTextString(m) }
func (*CreateTeamResult) ProtoMessage()    {}
func (*CreateTeamResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{22}
}
func (m *CreateTeamResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTeamResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTeamResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTeamResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTeamResult.Merge(m, src)
}
func (m *CreateTeamResult) XXX_Size() int {
	return m.Size()
}
func (m *CreateTeamResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTeamResult.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTeamResult proto.InternalMessageInfo

func (m *CreateTeamResult) GetTeamID() int64 {
	if m != nil && m.TeamID != nil {
		return *m.TeamID
	}
	return 0
}

func (m *CreateTeamResult) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

type DynamicData struct {
	LogId                *int64       `protobuf:"varint,1,opt,name=LogId" json:"LogId,omitempty" bson:"LogId,omitempty"`
	PlayerId             *int64       `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	HeadIcon             *string      `protobuf:"bytes,3,opt,name=HeadIcon" json:"HeadIcon,omitempty" bson:"HeadIcon,omitempty"`
	Sex                  *int32       `protobuf:"varint,4,opt,name=Sex" json:"Sex,omitempty" bson:"Sex,omitempty"`
	Content              *string      `protobuf:"bytes,5,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	Photo                []string     `protobuf:"bytes,6,rep,name=Photo" json:"Photo,omitempty" bson:"Photo,omitempty"`
	Zan                  *int32       `protobuf:"varint,7,opt,name=Zan" json:"Zan,omitempty" bson:"Zan,omitempty"`
	IsAtten              *bool        `protobuf:"varint,9,opt,name=IsAtten" json:"IsAtten,omitempty" bson:"IsAtten,omitempty"`
	Voice                *string      `protobuf:"bytes,10,opt,name=Voice" json:"Voice,omitempty" bson:"Voice,omitempty"`
	Video                *string      `protobuf:"bytes,11,opt,name=Video" json:"Video,omitempty" bson:"Video,omitempty"`
	CreateTime           *int64       `protobuf:"varint,12,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	CommentNum           *int64       `protobuf:"varint,13,opt,name=CommentNum" json:"CommentNum,omitempty" bson:"CommentNum,omitempty"`
	CommentList          *CommentList `protobuf:"bytes,14,opt,name=CommentList" json:"CommentList,omitempty" bson:"CommentList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" bson:"-"`
	XXX_unrecognized     []byte       `json:"-" bson:"-"`
	XXX_sizecache        int32        `json:"-" bson:"-"`
}

func (m *DynamicData) Reset()         { *m = DynamicData{} }
func (m *DynamicData) String() string { return proto.CompactTextString(m) }
func (*DynamicData) ProtoMessage()    {}
func (*DynamicData) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{23}
}
func (m *DynamicData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynamicData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynamicData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynamicData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynamicData.Merge(m, src)
}
func (m *DynamicData) XXX_Size() int {
	return m.Size()
}
func (m *DynamicData) XXX_DiscardUnknown() {
	xxx_messageInfo_DynamicData.DiscardUnknown(m)
}

var xxx_messageInfo_DynamicData proto.InternalMessageInfo

func (m *DynamicData) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *DynamicData) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *DynamicData) GetHeadIcon() string {
	if m != nil && m.HeadIcon != nil {
		return *m.HeadIcon
	}
	return ""
}

func (m *DynamicData) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *DynamicData) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *DynamicData) GetPhoto() []string {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *DynamicData) GetZan() int32 {
	if m != nil && m.Zan != nil {
		return *m.Zan
	}
	return 0
}

func (m *DynamicData) GetIsAtten() bool {
	if m != nil && m.IsAtten != nil {
		return *m.IsAtten
	}
	return false
}

func (m *DynamicData) GetVoice() string {
	if m != nil && m.Voice != nil {
		return *m.Voice
	}
	return ""
}

func (m *DynamicData) GetVideo() string {
	if m != nil && m.Video != nil {
		return *m.Video
	}
	return ""
}

func (m *DynamicData) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *DynamicData) GetCommentNum() int64 {
	if m != nil && m.CommentNum != nil {
		return *m.CommentNum
	}
	return 0
}

func (m *DynamicData) GetCommentList() *CommentList {
	if m != nil {
		return m.CommentList
	}
	return nil
}

//群管理
type TeamManager struct {
	TeamIds              []int64  `protobuf:"varint,1,rep,name=TeamIds" json:"TeamIds,omitempty" bson:"TeamIds,omitempty"`
	Flag                 *int32   `protobuf:"varint,2,opt,name=Flag" json:"Flag,omitempty" bson:"Flag,omitempty"`
	Hour                 *int32   `protobuf:"varint,3,opt,name=Hour" json:"Hour,omitempty" bson:"Hour,omitempty"`
	Minutes              *int32   `protobuf:"varint,4,opt,name=Minutes" json:"Minutes,omitempty" bson:"Minutes,omitempty"`
	Reason               *string  `protobuf:"bytes,5,opt,name=Reason" json:"Reason,omitempty" bson:"Reason,omitempty"`
	Name                 *string  `protobuf:"bytes,6,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	TeamId               *int64   `protobuf:"varint,7,opt,name=TeamId" json:"TeamId,omitempty" bson:"TeamId,omitempty"`
	NickName             []string `protobuf:"bytes,8,rep,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	CloseTime            *int64   `protobuf:"varint,9,opt,name=CloseTime" json:"CloseTime,omitempty" bson:"CloseTime,omitempty"`
	SendTime             *int64   `protobuf:"varint,10,opt,name=SendTime" json:"SendTime,omitempty" bson:"SendTime,omitempty"`
	Day                  *int32   `protobuf:"varint,11,opt,name=Day" json:"Day,omitempty" bson:"Day,omitempty"`
	LogId                *int64   `protobuf:"varint,12,opt,name=LogId" json:"LogId,omitempty" bson:"LogId,omitempty"`
	PlayerId             *int64   `protobuf:"varint,13,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TeamManager) Reset()         { *m = TeamManager{} }
func (m *TeamManager) String() string { return proto.CompactTextString(m) }
func (*TeamManager) ProtoMessage()    {}
func (*TeamManager) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{24}
}
func (m *TeamManager) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamManager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamManager.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamManager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamManager.Merge(m, src)
}
func (m *TeamManager) XXX_Size() int {
	return m.Size()
}
func (m *TeamManager) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamManager.DiscardUnknown(m)
}

var xxx_messageInfo_TeamManager proto.InternalMessageInfo

func (m *TeamManager) GetTeamIds() []int64 {
	if m != nil {
		return m.TeamIds
	}
	return nil
}

func (m *TeamManager) GetFlag() int32 {
	if m != nil && m.Flag != nil {
		return *m.Flag
	}
	return 0
}

func (m *TeamManager) GetHour() int32 {
	if m != nil && m.Hour != nil {
		return *m.Hour
	}
	return 0
}

func (m *TeamManager) GetMinutes() int32 {
	if m != nil && m.Minutes != nil {
		return *m.Minutes
	}
	return 0
}

func (m *TeamManager) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

func (m *TeamManager) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *TeamManager) GetTeamId() int64 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *TeamManager) GetNickName() []string {
	if m != nil {
		return m.NickName
	}
	return nil
}

func (m *TeamManager) GetCloseTime() int64 {
	if m != nil && m.CloseTime != nil {
		return *m.CloseTime
	}
	return 0
}

func (m *TeamManager) GetSendTime() int64 {
	if m != nil && m.SendTime != nil {
		return *m.SendTime
	}
	return 0
}

func (m *TeamManager) GetDay() int32 {
	if m != nil && m.Day != nil {
		return *m.Day
	}
	return 0
}

func (m *TeamManager) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *TeamManager) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

type CommentList struct {
	CommentInfo          []*CommentData `protobuf:"bytes,1,rep,name=CommentInfo" json:"CommentInfo,omitempty" bson:"CommentInfo,omitempty"`
	Count                *int32         `protobuf:"varint,2,opt,name=count" json:"count,omitempty" bson:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-" bson:"-"`
	XXX_unrecognized     []byte         `json:"-" bson:"-"`
	XXX_sizecache        int32          `json:"-" bson:"-"`
}

func (m *CommentList) Reset()         { *m = CommentList{} }
func (m *CommentList) String() string { return proto.CompactTextString(m) }
func (*CommentList) ProtoMessage()    {}
func (*CommentList) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{25}
}
func (m *CommentList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommentList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommentList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommentList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentList.Merge(m, src)
}
func (m *CommentList) XXX_Size() int {
	return m.Size()
}
func (m *CommentList) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentList.DiscardUnknown(m)
}

var xxx_messageInfo_CommentList proto.InternalMessageInfo

func (m *CommentList) GetCommentInfo() []*CommentData {
	if m != nil {
		return m.CommentInfo
	}
	return nil
}

func (m *CommentList) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

type CommentData struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	LogId                *int64   `protobuf:"varint,2,opt,name=LogId" json:"LogId,omitempty" bson:"LogId,omitempty"`
	PlayerId             *int64   `protobuf:"varint,3,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Content              *string  `protobuf:"bytes,4,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	BelongId             *int64   `protobuf:"varint,5,opt,name=BelongId" json:"BelongId,omitempty" bson:"BelongId,omitempty"`
	CreateTime           *int64   `protobuf:"varint,6,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	TargetId             *int64   `protobuf:"varint,7,opt,name=TargetId" json:"TargetId,omitempty" bson:"TargetId,omitempty"`
	Sex                  *int32   `protobuf:"varint,8,opt,name=Sex" json:"Sex,omitempty" bson:"Sex,omitempty"`
	Name                 *string  `protobuf:"bytes,9,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	OtherName            *string  `protobuf:"bytes,10,opt,name=OtherName" json:"OtherName,omitempty" bson:"OtherName,omitempty"`
	OtherSex             *int32   `protobuf:"varint,11,opt,name=OtherSex" json:"OtherSex,omitempty" bson:"OtherSex,omitempty"`
	TotalNum             *int64   `protobuf:"varint,12,opt,name=TotalNum" json:"TotalNum,omitempty" bson:"TotalNum,omitempty"`
	OwnerId              *int64   `protobuf:"varint,13,opt,name=OwnerId" json:"OwnerId,omitempty" bson:"OwnerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *CommentData) Reset()         { *m = CommentData{} }
func (m *CommentData) String() string { return proto.CompactTextString(m) }
func (*CommentData) ProtoMessage()    {}
func (*CommentData) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{26}
}
func (m *CommentData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommentData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommentData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommentData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentData.Merge(m, src)
}
func (m *CommentData) XXX_Size() int {
	return m.Size()
}
func (m *CommentData) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentData.DiscardUnknown(m)
}

var xxx_messageInfo_CommentData proto.InternalMessageInfo

func (m *CommentData) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CommentData) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *CommentData) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *CommentData) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *CommentData) GetBelongId() int64 {
	if m != nil && m.BelongId != nil {
		return *m.BelongId
	}
	return 0
}

func (m *CommentData) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *CommentData) GetTargetId() int64 {
	if m != nil && m.TargetId != nil {
		return *m.TargetId
	}
	return 0
}

func (m *CommentData) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *CommentData) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CommentData) GetOtherName() string {
	if m != nil && m.OtherName != nil {
		return *m.OtherName
	}
	return ""
}

func (m *CommentData) GetOtherSex() int32 {
	if m != nil && m.OtherSex != nil {
		return *m.OtherSex
	}
	return 0
}

func (m *CommentData) GetTotalNum() int64 {
	if m != nil && m.TotalNum != nil {
		return *m.TotalNum
	}
	return 0
}

func (m *CommentData) GetOwnerId() int64 {
	if m != nil && m.OwnerId != nil {
		return *m.OwnerId
	}
	return 0
}

//后台置顶社交动态
type TopRequest struct {
	LogId                *int64   `protobuf:"varint,1,opt,name=LogId" json:"LogId,omitempty" bson:"LogId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TopRequest) Reset()         { *m = TopRequest{} }
func (m *TopRequest) String() string { return proto.CompactTextString(m) }
func (*TopRequest) ProtoMessage()    {}
func (*TopRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{27}
}
func (m *TopRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopRequest.Merge(m, src)
}
func (m *TopRequest) XXX_Size() int {
	return m.Size()
}
func (m *TopRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TopRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TopRequest proto.InternalMessageInfo

func (m *TopRequest) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

type SysGivePropsRequest struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	ProductId            *int64   `protobuf:"varint,2,opt,name=ProductId" json:"ProductId,omitempty" bson:"ProductId,omitempty"`
	Num                  *int64   `protobuf:"varint,3,opt,name=Num" json:"Num,omitempty" bson:"Num,omitempty"`
	Operator             *string  `protobuf:"bytes,4,opt,name=Operator" json:"Operator,omitempty" bson:"Operator,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *SysGivePropsRequest) Reset()         { *m = SysGivePropsRequest{} }
func (m *SysGivePropsRequest) String() string { return proto.CompactTextString(m) }
func (*SysGivePropsRequest) ProtoMessage()    {}
func (*SysGivePropsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{28}
}
func (m *SysGivePropsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SysGivePropsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SysGivePropsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SysGivePropsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SysGivePropsRequest.Merge(m, src)
}
func (m *SysGivePropsRequest) XXX_Size() int {
	return m.Size()
}
func (m *SysGivePropsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SysGivePropsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SysGivePropsRequest proto.InternalMessageInfo

func (m *SysGivePropsRequest) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *SysGivePropsRequest) GetProductId() int64 {
	if m != nil && m.ProductId != nil {
		return *m.ProductId
	}
	return 0
}

func (m *SysGivePropsRequest) GetNum() int64 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

func (m *SysGivePropsRequest) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

//推送话题动态置顶/取消置顶信息小助手
type TopicDynamicTopLittleHelper struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Title                *string  `protobuf:"bytes,2,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	Content              *string  `protobuf:"bytes,3,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TopicDynamicTopLittleHelper) Reset()         { *m = TopicDynamicTopLittleHelper{} }
func (m *TopicDynamicTopLittleHelper) String() string { return proto.CompactTextString(m) }
func (*TopicDynamicTopLittleHelper) ProtoMessage()    {}
func (*TopicDynamicTopLittleHelper) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd10ddca7ecbb2b, []int{29}
}
func (m *TopicDynamicTopLittleHelper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicDynamicTopLittleHelper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicDynamicTopLittleHelper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicDynamicTopLittleHelper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicDynamicTopLittleHelper.Merge(m, src)
}
func (m *TopicDynamicTopLittleHelper) XXX_Size() int {
	return m.Size()
}
func (m *TopicDynamicTopLittleHelper) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicDynamicTopLittleHelper.DiscardUnknown(m)
}

var xxx_messageInfo_TopicDynamicTopLittleHelper proto.InternalMessageInfo

func (m *TopicDynamicTopLittleHelper) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *TopicDynamicTopLittleHelper) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *TopicDynamicTopLittleHelper) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func init() {
	proto.RegisterType((*NotifyAddCoinReq)(nil), "server_server.NotifyAddCoinReq")
	proto.RegisterType((*MsgToHall)(nil), "server_server.MsgToHall")
	proto.RegisterType((*AddFriend)(nil), "server_server.AddFriend")
	proto.RegisterType((*PlayerIdInfo)(nil), "server_server.PlayerIdInfo")
	proto.RegisterType((*ChatToOtherReq)(nil), "server_server.ChatToOtherReq")
	proto.RegisterType((*ReloadDynamicReq)(nil), "server_server.ReloadDynamicReq")
	proto.RegisterType((*ShopOrderRequest)(nil), "server_server.ShopOrderRequest")
	proto.RegisterType((*AdminInfo)(nil), "server_server.AdminInfo")
	proto.RegisterType((*Recharge)(nil), "server_server.Recharge")
	proto.RegisterType((*AuditOrder)(nil), "server_server.AuditOrder")
	proto.RegisterType((*SysteamModId)(nil), "server_server.SysteamModId")
	proto.RegisterType((*PlayerSI)(nil), "server_server.PlayerSI")
	proto.RegisterType((*EndWaiterMessage)(nil), "server_server.EndWaiterMessage")
	proto.RegisterType((*PlayerIds)(nil), "server_server.PlayerIds")
	proto.RegisterType((*TeamBan)(nil), "server_server.TeamBan")
	proto.RegisterType((*CreatePlayer)(nil), "server_server.CreatePlayer")
	proto.RegisterType((*EditTeam)(nil), "server_server.EditTeam")
	proto.RegisterType((*MemberOptRequest)(nil), "server_server.MemberOptRequest")
	proto.RegisterType((*ShopOrderExpressBody)(nil), "server_server.ShopOrderExpressBody")
	proto.RegisterType((*ShopOrderExpressInfos)(nil), "server_server.ShopOrderExpressInfos")
	proto.RegisterType((*AddPlayerFriendInfo)(nil), "server_server.AddPlayerFriendInfo")
	proto.RegisterType((*CreateTeamInfo)(nil), "server_server.CreateTeamInfo")
	proto.RegisterType((*CreateTeamResult)(nil), "server_server.CreateTeamResult")
	proto.RegisterType((*DynamicData)(nil), "server_server.DynamicData")
	proto.RegisterType((*TeamManager)(nil), "server_server.TeamManager")
	proto.RegisterType((*CommentList)(nil), "server_server.CommentList")
	proto.RegisterType((*CommentData)(nil), "server_server.CommentData")
	proto.RegisterType((*TopRequest)(nil), "server_server.TopRequest")
	proto.RegisterType((*SysGivePropsRequest)(nil), "server_server.SysGivePropsRequest")
	proto.RegisterType((*TopicDynamicTopLittleHelper)(nil), "server_server.TopicDynamicTopLittleHelper")
}

func init() { proto.RegisterFile("server_server.proto", fileDescriptor_8cd10ddca7ecbb2b) }

var fileDescriptor_8cd10ddca7ecbb2b = []byte{
	// 1332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x56, 0xcf, 0x6e, 0xdb, 0x46,
	0x13, 0x87, 0x44, 0xeb, 0xdf, 0x48, 0x96, 0x65, 0x2a, 0x01, 0xf4, 0x39, 0xf8, 0xf2, 0xf9, 0x63,
	0x7b, 0x70, 0x0f, 0xb1, 0x51, 0x03, 0x05, 0x5a, 0xa0, 0x28, 0x6a, 0xc9, 0x8e, 0x2d, 0xc0, 0x92,
	0x02, 0x49, 0x4d, 0x90, 0x5e, 0x8c, 0x0d, 0x39, 0x91, 0x89, 0x50, 0xbb, 0x2c, 0x77, 0xe9, 0x44,
	0x97, 0x1e, 0x7a, 0xef, 0x3b, 0xf4, 0x71, 0x7a, 0xec, 0x13, 0x14, 0x45, 0x0e, 0x7d, 0x8e, 0x62,
	0x67, 0xb9, 0x14, 0x65, 0xab, 0xed, 0x49, 0xd0, 0xcc, 0xee, 0x6f, 0x66, 0x7f, 0xf3, 0x9b, 0x19,
	0x42, 0x57, 0x62, 0x72, 0x87, 0xc9, 0x8d, 0xf9, 0x39, 0x8e, 0x13, 0xa1, 0x84, 0xbb, 0xbb, 0x61,
	0x3c, 0x80, 0x37, 0x4c, 0xa2, 0x71, 0x1d, 0x9c, 0x2c, 0xd8, 0x12, 0x33, 0xc7, 0x09, 0x99, 0x4e,
	0xe4, 0x2d, 0x4b, 0xf0, 0x66, 0x89, 0x52, 0xb2, 0x05, 0x9e, 0xb0, 0x28, 0xf2, 0xc5, 0x72, 0x29,
	0x78, 0x76, 0xe1, 0x9b, 0x7f, 0xbb, 0xa0, 0xd8, 0x9b, 0x08, 0x6f, 0xa4, 0x4a, 0x52, 0x5f, 0xdd,
	0xc4, 0x11, 0x5b, 0x61, 0x72, 0xb3, 0x0e, 0xe8, 0x7d, 0x06, 0x9d, 0xb1, 0x50, 0xe1, 0xdb, 0xd5,
	0x59, 0x10, 0x0c, 0x44, 0xc8, 0xa7, 0xf8, 0x83, 0xfb, 0x18, 0x76, 0x37, 0x6c, 0xbd, 0xd2, 0x61,
	0xe9, 0xa8, 0xe1, 0x5d, 0x43, 0x63, 0x24, 0x17, 0x73, 0x71, 0xc5, 0xa2, 0xc8, 0xed, 0x40, 0xfd,
	0x05, 0x81, 0x0d, 0x03, 0x72, 0x3b, 0xee, 0x1e, 0xd4, 0xa6, 0xb1, 0x3f, 0x66, 0x4b, 0xec, 0x95,
	0xf5, 0x79, 0x6d, 0x18, 0xc9, 0x05, 0x19, 0x1c, 0x32, 0x34, 0xc1, 0x19, 0xc9, 0x45, 0x6f, 0xe7,
	0xb0, 0x74, 0xd4, 0xf2, 0xa6, 0xd0, 0x38, 0x0b, 0x82, 0xe7, 0x49, 0x88, 0x3c, 0xd8, 0x82, 0xd6,
	0x81, 0xba, 0xf1, 0x0d, 0x03, 0x82, 0x73, 0xdc, 0x16, 0xec, 0xcc, 0x57, 0xb1, 0xc1, 0xaa, 0xb8,
	0x5d, 0x68, 0x4e, 0x62, 0xe4, 0xaf, 0x42, 0x1e, 0x88, 0xf7, 0x92, 0x30, 0x2b, 0xde, 0xe7, 0xd0,
	0xb2, 0x30, 0x43, 0xfe, 0x56, 0x6c, 0x4f, 0x72, 0x96, 0xfa, 0x3e, 0x4a, 0x49, 0xa8, 0x75, 0xef,
	0x02, 0xda, 0x83, 0x5b, 0xa6, 0xe6, 0x62, 0xa2, 0x6e, 0x31, 0xd1, 0xaf, 0xff, 0x3f, 0xec, 0x68,
	0x0b, 0x5d, 0x68, 0x9e, 0x76, 0x8f, 0x37, 0xe8, 0x3c, 0xd6, 0xae, 0x0d, 0x5c, 0x4a, 0xce, 0xfb,
	0x14, 0x3a, 0x53, 0x8c, 0x04, 0x0b, 0xce, 0x57, 0x9c, 0x2d, 0x43, 0x5f, 0x03, 0x3d, 0x88, 0xee,
	0xf5, 0xa1, 0x33, 0xbb, 0x15, 0xf1, 0x24, 0x09, 0x28, 0x54, 0x8a, 0x52, 0xe9, 0x8c, 0xe8, 0x7f,
	0x9e, 0xe2, 0x2e, 0x54, 0xf4, 0x3b, 0x4d, 0x82, 0x15, 0xb7, 0x0d, 0xd5, 0xef, 0x24, 0xb9, 0x1d,
	0xc2, 0x78, 0xa6, 0x79, 0x5b, 0x86, 0x9c, 0x1e, 0xb8, 0x76, 0xe6, 0xac, 0xcd, 0x48, 0x0a, 0x59,
	0x62, 0x15, 0x0f, 0xa1, 0x3e, 0x45, 0xff, 0x96, 0x25, 0x0b, 0xbc, 0x97, 0x50, 0xf9, 0xc8, 0x71,
	0x1f, 0x41, 0xcb, 0x7a, 0x2f, 0x45, 0xa4, 0xef, 0x94, 0x0d, 0x49, 0x36, 0x25, 0x53, 0x38, 0x17,
	0x60, 0x26, 0xd2, 0xc4, 0x47, 0x2a, 0x00, 0x71, 0xad, 0xcb, 0x31, 0x16, 0x0a, 0x7b, 0x15, 0xd2,
	0xc6, 0x7f, 0x01, 0xce, 0xd2, 0x20, 0x54, 0x74, 0x6f, 0xf3, 0x4d, 0xe5, 0xa3, 0x86, 0x77, 0x00,
	0xad, 0xd9, 0x4a, 0x2a, 0x64, 0xcb, 0x91, 0x08, 0x86, 0x81, 0x0b, 0x50, 0xce, 0x7d, 0x5f, 0xdb,
	0xac, 0x66, 0xc3, 0x2d, 0x05, 0xdb, 0x85, 0xca, 0x40, 0xa4, 0x5c, 0x65, 0x22, 0xd8, 0x83, 0xda,
	0x99, 0xef, 0x93, 0x81, 0x52, 0xf3, 0xfe, 0x07, 0x9d, 0x0b, 0x1e, 0xbc, 0x62, 0xa1, 0xc2, 0x64,
	0x64, 0x6a, 0x44, 0x3a, 0x0b, 0x2d, 0xe7, 0x33, 0x68, 0x58, 0x48, 0xe9, 0xee, 0x17, 0xfe, 0xf4,
	0x4a, 0x87, 0x8e, 0x91, 0xd5, 0x58, 0x04, 0x56, 0xb3, 0x1d, 0xa8, 0x4f, 0x62, 0x4c, 0x98, 0x12,
	0x49, 0xf6, 0xf6, 0x2e, 0x34, 0xfb, 0x8c, 0x4f, 0xee, 0x30, 0x99, 0x87, 0x4b, 0xf3, 0x78, 0xc7,
	0xbb, 0x80, 0xda, 0x1c, 0xd9, 0xb2, 0xcf, 0xb8, 0x0e, 0xb6, 0x06, 0xdb, 0x83, 0x5a, 0x9f, 0x71,
	0x3a, 0x68, 0xf2, 0x6d, 0x43, 0x75, 0xa6, 0x98, 0x4a, 0x65, 0x26, 0x5b, 0x1b, 0x6d, 0x87, 0x92,
	0xff, 0x11, 0x5a, 0x83, 0x04, 0x99, 0x42, 0x93, 0x94, 0xf6, 0xce, 0x42, 0x85, 0x86, 0x18, 0xf7,
	0x19, 0x80, 0xb1, 0xf7, 0x99, 0x44, 0x2a, 0x4d, 0xf3, 0xf4, 0x3f, 0xf7, 0xe4, 0xb8, 0x3e, 0x40,
	0xdc, 0xb1, 0x04, 0xb9, 0xb2, 0x52, 0xd1, 0x16, 0x03, 0x3f, 0x8c, 0x4d, 0x40, 0xcd, 0xe6, 0x8b,
	0x5b, 0xc1, 0x6d, 0xd5, 0x22, 0xa8, 0x5f, 0x04, 0xa1, 0xd2, 0x4f, 0xc9, 0x4b, 0x92, 0xb5, 0x5a,
	0xa1, 0x8f, 0xf7, 0xa1, 0x31, 0x62, 0x1f, 0x46, 0xb8, 0x7c, 0x83, 0x49, 0xf6, 0x8c, 0x3d, 0xa8,
	0x5d, 0x0a, 0xbe, 0xb8, 0x64, 0x22, 0x03, 0xee, 0x42, 0x73, 0x28, 0xa7, 0xa8, 0x47, 0x13, 0xf2,
	0x80, 0xe0, 0xeb, 0x3a, 0xda, 0x35, 0xde, 0x61, 0xd4, 0xab, 0x92, 0x14, 0x17, 0xd0, 0x31, 0x20,
	0x93, 0x58, 0x59, 0xf5, 0xb7, 0xa1, 0xaa, 0xa3, 0xe7, 0x91, 0x37, 0x0a, 0x54, 0x26, 0x4e, 0xf3,
	0x7e, 0xc8, 0x43, 0x1b, 0xfd, 0x9f, 0x9b, 0x5a, 0x14, 0x34, 0x73, 0x4e, 0x71, 0x1d, 0xef, 0x4b,
	0x78, 0x94, 0xb7, 0xd9, 0xc5, 0x87, 0x38, 0x41, 0x29, 0xfb, 0x22, 0x58, 0xe9, 0x93, 0x01, 0x53,
	0x48, 0xe5, 0xa1, 0x91, 0xa6, 0xc3, 0x27, 0xb8, 0x64, 0xc9, 0x3b, 0xf3, 0x54, 0xef, 0xe7, 0x12,
	0x3c, 0xbe, 0x7f, 0x55, 0x37, 0x9a, 0x74, 0xbf, 0x82, 0x16, 0x16, 0xfe, 0x53, 0xbd, 0x9b, 0xa7,
	0x9f, 0x1c, 0x6f, 0xce, 0xf7, 0xad, 0x61, 0x1f, 0xe5, 0x57, 0x0d, 0xf7, 0x65, 0xcb, 0x58, 0x66,
	0x2d, 0x4c, 0xc8, 0x36, 0x54, 0x53, 0xd3, 0xcf, 0x46, 0x67, 0x5f, 0x40, 0xf7, 0x2c, 0x08, 0xcc,
	0xf3, 0xb2, 0x71, 0xb8, 0x39, 0xd7, 0xce, 0xd7, 0x15, 0x8b, 0x42, 0xa9, 0x0c, 0x65, 0xde, 0x6b,
	0x68, 0x9b, 0xc2, 0x13, 0xb7, 0xdb, 0x6f, 0xec, 0x43, 0x43, 0xf7, 0xe3, 0x0d, 0xdf, 0x18, 0xd8,
	0x96, 0x5a, 0xc7, 0x9e, 0x21, 0x03, 0x65, 0x68, 0x24, 0x7b, 0x0a, 0x9d, 0x35, 0xf4, 0x14, 0x65,
	0x1a, 0xad, 0x8b, 0x68, 0xa1, 0xdb, 0x50, 0x9d, 0x22, 0x93, 0x82, 0x67, 0xac, 0xfe, 0x54, 0x86,
	0x66, 0x36, 0x17, 0xcf, 0x99, 0x62, 0xa4, 0x0b, 0xb1, 0x28, 0x0e, 0xad, 0xcd, 0x69, 0xaa, 0x2d,
	0x57, 0xc8, 0x82, 0xa1, 0x2f, 0xf8, 0x7a, 0x75, 0xcc, 0xf0, 0x43, 0x36, 0x7a, 0xf6, 0xa0, 0x36,
	0x10, 0x5c, 0x21, 0x57, 0x46, 0xc7, 0x99, 0xac, 0x95, 0xe8, 0x55, 0x0f, 0x1d, 0x73, 0xf8, 0x7b,
	0xc6, 0x7b, 0x35, 0x7b, 0x78, 0x28, 0xcf, 0x94, 0x42, 0xde, 0x6b, 0x58, 0x55, 0xbe, 0x14, 0xa1,
	0x8f, 0x3d, 0xb0, 0x77, 0x5f, 0x86, 0x01, 0x8a, 0x5e, 0xd3, 0x8e, 0xba, 0xec, 0x7d, 0x5a, 0x25,
	0x2d, 0x4a, 0x47, 0xdb, 0x48, 0xd8, 0x6a, 0x9c, 0x2e, 0x7b, 0xbb, 0x64, 0x3b, 0x81, 0x66, 0x66,
	0xbb, 0xd6, 0xbc, 0xb7, 0x69, 0x59, 0x1c, 0xdc, 0x93, 0x43, 0xe1, 0x84, 0xf7, 0x7b, 0x09, 0x9a,
	0x9a, 0xa5, 0x11, 0xe3, 0x6c, 0x61, 0x66, 0xa4, 0x51, 0x7e, 0x61, 0x10, 0x3d, 0x8f, 0xd8, 0x22,
	0x1b, 0xfb, 0x2d, 0xd8, 0xb9, 0x12, 0x69, 0xa1, 0xdf, 0x46, 0x21, 0x4f, 0x15, 0x66, 0x9b, 0xae,
	0x40, 0xb1, 0x61, 0xc0, 0x76, 0x6c, 0xd5, 0xca, 0x28, 0xeb, 0xaa, 0x9a, 0xe5, 0x73, 0x1c, 0xfa,
	0xef, 0xe8, 0x44, 0x9d, 0x28, 0xda, 0x87, 0xc6, 0x20, 0x12, 0xd2, 0xbc, 0xb2, 0xb1, 0xde, 0x1d,
	0x3c, 0x20, 0x0b, 0x90, 0xa5, 0x09, 0xce, 0x39, 0x5b, 0x11, 0x31, 0x95, 0x75, 0xd1, 0x5a, 0x0f,
	0x8a, 0x46, 0x8c, 0x78, 0xa3, 0x0d, 0x46, 0x0a, 0x04, 0x69, 0x01, 0x66, 0xfd, 0xf2, 0x37, 0x04,
	0x59, 0x55, 0xf8, 0xf9, 0xa4, 0xaf, 0x78, 0x7f, 0x96, 0x72, 0x00, 0x72, 0x17, 0xe7, 0x53, 0x9e,
	0x4b, 0xf9, 0x41, 0x2e, 0x8e, 0x5d, 0x13, 0x56, 0x21, 0x3b, 0x76, 0xae, 0xf7, 0x31, 0x12, 0x5c,
	0x5f, 0xaa, 0xe4, 0x45, 0x5d, 0x17, 0xba, 0x6a, 0x81, 0xe6, 0x7a, 0x17, 0xaa, 0x9c, 0xb9, 0x4c,
	0x77, 0xf5, 0x7c, 0x78, 0xb3, 0x8c, 0x2f, 0xa2, 0x90, 0xbe, 0x19, 0xc8, 0x04, 0xf9, 0xf6, 0xd0,
	0x26, 0x7d, 0xc5, 0xb0, 0xa6, 0x11, 0x85, 0x62, 0x91, 0x16, 0x4e, 0xcb, 0xa6, 0x36, 0x79, 0xcf,
	0x0b, 0xbc, 0x3d, 0x01, 0x98, 0x8b, 0xd8, 0x0e, 0xc4, 0xcd, 0xde, 0xf0, 0x5e, 0x43, 0x77, 0xb6,
	0x92, 0x97, 0xe1, 0x1d, 0xbe, 0x48, 0x44, 0x2c, 0xed, 0xa9, 0x87, 0x7b, 0x52, 0x0f, 0xce, 0x44,
	0x04, 0xa9, 0xaf, 0x72, 0x5a, 0x9a, 0xe0, 0xe8, 0xb0, 0xf9, 0x2e, 0xc8, 0x17, 0x9b, 0xe9, 0xe4,
	0x09, 0x3c, 0x99, 0x8b, 0x38, 0xf4, 0xb3, 0xce, 0x9c, 0x8b, 0xf8, 0x3a, 0x54, 0x2a, 0xc2, 0x2b,
	0x8c, 0x62, 0x4c, 0xb6, 0xaf, 0xe2, 0x79, 0xa8, 0xa2, 0xc2, 0xb4, 0xb0, 0x1c, 0x53, 0x8f, 0x9e,
	0xfe, 0x52, 0x82, 0x5d, 0xf3, 0xf5, 0x71, 0x6a, 0x7e, 0xdc, 0x6f, 0xc1, 0x9d, 0xc6, 0x7e, 0xfe,
	0xd1, 0x38, 0x88, 0x42, 0xe4, 0xca, 0x3d, 0xb8, 0xb7, 0xc3, 0xc8, 0x6f, 0x7c, 0x07, 0xed, 0x63,
	0xfa, 0x36, 0x1d, 0x8b, 0x29, 0xaa, 0x34, 0xe1, 0xee, 0x08, 0xba, 0x16, 0x21, 0x63, 0x96, 0x80,
	0xb7, 0x42, 0x18, 0xdf, 0xc1, 0x3f, 0xf8, 0xfa, 0xad, 0x5f, 0x3f, 0x3e, 0x2d, 0xfd, 0xf6, 0xf1,
	0x69, 0xe9, 0x8f, 0x8f, 0x4f, 0x4b, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x4e, 0xf9, 0xd7,
	0x9d, 0x0b, 0x00, 0x00,
}

func (m *NotifyAddCoinReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyAddCoinReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NotifyAddCoin != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.NotifyAddCoin)))
		i += copy(dAtA[i:], *m.NotifyAddCoin)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MsgToHall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToHall) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.PlayerId))
	}
	if m.RpcName != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.RpcName)))
		i += copy(dAtA[i:], *m.RpcName)
	}
	if m.MsgName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.MsgName)))
		i += copy(dAtA[i:], *m.MsgName)
	}
	if m.Msg != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddFriend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddFriend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.PlayerId))
	}
	if m.FriendId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.FriendId))
	}
	if m.Type != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.Type))
	}
	if m.OpenWindows != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.OpenWindows))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerIdInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerIdInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Success != nil {
		dAtA[i] = 0x10
		i++
		if *m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChatToOtherReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatToOtherReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Chat != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(m.Chat.Size()))
		n1, err := m.Chat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReloadDynamicReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReloadDynamicReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShopOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrderId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.OrderId))
	}
	if m.Types != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.Types))
	}
	if m.UserId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.UserId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdminInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.UserId))
	}
	if m.ServerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.ServerId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Recharge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Recharge) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("PlayerId")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.PlayerId))
	}
	if m.RechargeGold == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("RechargeGold")
	} else {
		dAtA[i] = 0x10
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.RechargeGold))
	}
	if m.OrderId != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.OrderId)))
		i += copy(dAtA[i:], *m.OrderId)
	}
	if m.SourceType != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.SourceType))
	}
	if m.Note != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.Note)))
		i += copy(dAtA[i:], *m.Note)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AuditOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuditOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrderId == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("OrderId")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.OrderId)))
		i += copy(dAtA[i:], *m.OrderId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SysteamModId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SysteamModId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("Id")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerSI) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerSI) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Count != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.Count))
	}
	if m.Account != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EndWaiterMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndWaiterMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.Mid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerIds) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerIds) > 0 {
		for _, num := range m.PlayerIds {
			dAtA[i] = 0x8
			i++
			i = encodeVarintServerServer(dAtA, i, uint64(num))
		}
	}
	if m.Node != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.Node)))
		i += copy(dAtA[i:], *m.Node)
	}
	if m.Operator != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.Operator)))
		i += copy(dAtA[i:], *m.Operator)
	}
	if m.BanOverTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.BanOverTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TeamBan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamBan) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, num := range m.Ids {
			dAtA[i] = 0x8
			i++
			i = encodeVarintServerServer(dAtA, i, uint64(num))
		}
	}
	if m.BanTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.BanTime))
	}
	if m.Status != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.Status))
	}
	if m.Node != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.Node)))
		i += copy(dAtA[i:], *m.Node)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreatePlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Site == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("Site")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.Site)))
		i += copy(dAtA[i:], *m.Site)
	}
	if m.PlayerBase == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("PlayerBase")
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(m.PlayerBase.Size()))
		n2, err := m.PlayerBase.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.ParentId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.ParentId))
	}
	if m.CreateIp != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.CreateIp)))
		i += copy(dAtA[i:], *m.CreateIp)
	}
	if m.Phone != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.Phone)))
		i += copy(dAtA[i:], *m.Phone)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EditTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditTeam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.MaxMember != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.MaxMember))
	}
	if m.GongGao != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.GongGao)))
		i += copy(dAtA[i:], *m.GongGao)
	}
	if m.IsRecommend != nil {
		dAtA[i] = 0x28
		i++
		if *m.IsRecommend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Level != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.Level))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MemberOptRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberOptRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TeamId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.TeamId))
	}
	if len(m.PlayerIds) > 0 {
		for _, num := range m.PlayerIds {
			dAtA[i] = 0x10
			i++
			i = encodeVarintServerServer(dAtA, i, uint64(num))
		}
	}
	if m.Types != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.Types))
	}
	if m.AdminID != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.AdminID))
	}
	if m.PlayerID != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.PlayerID))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShopOrderExpressBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopOrderExpressBody) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DateTime != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.DateTime)))
		i += copy(dAtA[i:], *m.DateTime)
	}
	if m.Remark != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.Remark)))
		i += copy(dAtA[i:], *m.Remark)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShopOrderExpressInfos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopOrderExpressInfos) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ExpressInfos) > 0 {
		for _, msg := range m.ExpressInfos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintServerServer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ExpressPhone != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.ExpressPhone)))
		i += copy(dAtA[i:], *m.ExpressPhone)
	}
	if m.ExpressName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.ExpressName)))
		i += copy(dAtA[i:], *m.ExpressName)
	}
	if m.UserId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.UserId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddPlayerFriendInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPlayerFriendInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerID != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.PlayerID))
	}
	if len(m.List) > 0 {
		for _, num := range m.List {
			dAtA[i] = 0x10
			i++
			i = encodeVarintServerServer(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateTeamInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTeamInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerID != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.PlayerID))
	}
	if m.TeamName != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.TeamName)))
		i += copy(dAtA[i:], *m.TeamName)
	}
	if m.AdminID != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.AdminID))
	}
	if m.AdminName != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.AdminName)))
		i += copy(dAtA[i:], *m.AdminName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateTeamResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTeamResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TeamID != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.TeamID))
	}
	if m.Reason != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.Reason)))
		i += copy(dAtA[i:], *m.Reason)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DynamicData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynamicData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LogId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.PlayerId))
	}
	if m.HeadIcon != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.HeadIcon)))
		i += copy(dAtA[i:], *m.HeadIcon)
	}
	if m.Sex != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.Sex))
	}
	if m.Content != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if len(m.Photo) > 0 {
		for _, s := range m.Photo {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Zan != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.Zan))
	}
	if m.IsAtten != nil {
		dAtA[i] = 0x48
		i++
		if *m.IsAtten {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Voice != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.Voice)))
		i += copy(dAtA[i:], *m.Voice)
	}
	if m.Video != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.Video)))
		i += copy(dAtA[i:], *m.Video)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.CreateTime))
	}
	if m.CommentNum != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.CommentNum))
	}
	if m.CommentList != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(m.CommentList.Size()))
		n3, err := m.CommentList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TeamManager) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamManager) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TeamIds) > 0 {
		for _, num := range m.TeamIds {
			dAtA[i] = 0x8
			i++
			i = encodeVarintServerServer(dAtA, i, uint64(num))
		}
	}
	if m.Flag != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.Flag))
	}
	if m.Hour != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.Hour))
	}
	if m.Minutes != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.Minutes))
	}
	if m.Reason != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.Reason)))
		i += copy(dAtA[i:], *m.Reason)
	}
	if m.Name != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.TeamId != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.TeamId))
	}
	if len(m.NickName) > 0 {
		for _, s := range m.NickName {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.CloseTime != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.CloseTime))
	}
	if m.SendTime != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.SendTime))
	}
	if m.Day != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.Day))
	}
	if m.LogId != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CommentList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommentList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CommentInfo) > 0 {
		for _, msg := range m.CommentInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintServerServer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Count != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CommentData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommentData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.Id))
	}
	if m.LogId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Content != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.BelongId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.BelongId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.CreateTime))
	}
	if m.TargetId != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.TargetId))
	}
	if m.Sex != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.Sex))
	}
	if m.Name != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.OtherName != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.OtherName)))
		i += copy(dAtA[i:], *m.OtherName)
	}
	if m.OtherSex != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.OtherSex))
	}
	if m.TotalNum != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.TotalNum))
	}
	if m.OwnerId != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.OwnerId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LogId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.LogId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SysGivePropsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SysGivePropsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.PlayerId))
	}
	if m.ProductId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.ProductId))
	}
	if m.Num != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.Num))
	}
	if m.Operator != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.Operator)))
		i += copy(dAtA[i:], *m.Operator)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicDynamicTopLittleHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicDynamicTopLittleHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Title != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.Content != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintServerServer(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintServerServer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NotifyAddCoinReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotifyAddCoin != nil {
		l = len(*m.NotifyAddCoin)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgToHall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovServerServer(uint64(*m.PlayerId))
	}
	if m.RpcName != nil {
		l = len(*m.RpcName)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.MsgName != nil {
		l = len(*m.MsgName)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.Msg != nil {
		l = len(m.Msg)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddFriend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovServerServer(uint64(*m.PlayerId))
	}
	if m.FriendId != nil {
		n += 1 + sovServerServer(uint64(*m.FriendId))
	}
	if m.Type != nil {
		n += 1 + sovServerServer(uint64(*m.Type))
	}
	if m.OpenWindows != nil {
		n += 1 + sovServerServer(uint64(*m.OpenWindows))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerIdInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovServerServer(uint64(*m.PlayerId))
	}
	if m.Success != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChatToOtherReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chat != nil {
		l = m.Chat.Size()
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.PlayerId != nil {
		n += 1 + sovServerServer(uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReloadDynamicReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovServerServer(uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShopOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != nil {
		n += 1 + sovServerServer(uint64(*m.OrderId))
	}
	if m.Types != nil {
		n += 1 + sovServerServer(uint64(*m.Types))
	}
	if m.UserId != nil {
		n += 1 + sovServerServer(uint64(*m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != nil {
		n += 1 + sovServerServer(uint64(*m.UserId))
	}
	if m.ServerId != nil {
		n += 1 + sovServerServer(uint64(*m.ServerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Recharge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovServerServer(uint64(*m.PlayerId))
	}
	if m.RechargeGold != nil {
		n += 1 + sovServerServer(uint64(*m.RechargeGold))
	}
	if m.OrderId != nil {
		l = len(*m.OrderId)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.SourceType != nil {
		n += 1 + sovServerServer(uint64(*m.SourceType))
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AuditOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != nil {
		l = len(*m.OrderId)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SysteamModId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerSI) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovServerServer(uint64(*m.PlayerId))
	}
	if m.Count != nil {
		n += 1 + sovServerServer(uint64(*m.Count))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EndWaiterMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != nil {
		n += 1 + sovServerServer(uint64(*m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerIds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PlayerIds) > 0 {
		for _, e := range m.PlayerIds {
			n += 1 + sovServerServer(uint64(e))
		}
	}
	if m.Node != nil {
		l = len(*m.Node)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.BanOverTime != nil {
		n += 1 + sovServerServer(uint64(*m.BanOverTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeamBan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, e := range m.Ids {
			n += 1 + sovServerServer(uint64(e))
		}
	}
	if m.BanTime != nil {
		n += 1 + sovServerServer(uint64(*m.BanTime))
	}
	if m.Status != nil {
		n += 1 + sovServerServer(uint64(*m.Status))
	}
	if m.Node != nil {
		l = len(*m.Node)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreatePlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Site != nil {
		l = len(*m.Site)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.PlayerBase != nil {
		l = m.PlayerBase.Size()
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.ParentId != nil {
		n += 1 + sovServerServer(uint64(*m.ParentId))
	}
	if m.CreateIp != nil {
		l = len(*m.CreateIp)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.Phone != nil {
		l = len(*m.Phone)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EditTeam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovServerServer(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.MaxMember != nil {
		n += 1 + sovServerServer(uint64(*m.MaxMember))
	}
	if m.GongGao != nil {
		l = len(*m.GongGao)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.IsRecommend != nil {
		n += 2
	}
	if m.Level != nil {
		n += 1 + sovServerServer(uint64(*m.Level))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MemberOptRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamId != nil {
		n += 1 + sovServerServer(uint64(*m.TeamId))
	}
	if len(m.PlayerIds) > 0 {
		for _, e := range m.PlayerIds {
			n += 1 + sovServerServer(uint64(e))
		}
	}
	if m.Types != nil {
		n += 1 + sovServerServer(uint64(*m.Types))
	}
	if m.AdminID != nil {
		n += 1 + sovServerServer(uint64(*m.AdminID))
	}
	if m.PlayerID != nil {
		n += 1 + sovServerServer(uint64(*m.PlayerID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShopOrderExpressBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DateTime != nil {
		l = len(*m.DateTime)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.Remark != nil {
		l = len(*m.Remark)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShopOrderExpressInfos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExpressInfos) > 0 {
		for _, e := range m.ExpressInfos {
			l = e.Size()
			n += 1 + l + sovServerServer(uint64(l))
		}
	}
	if m.ExpressPhone != nil {
		l = len(*m.ExpressPhone)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.ExpressName != nil {
		l = len(*m.ExpressName)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.UserId != nil {
		n += 1 + sovServerServer(uint64(*m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddPlayerFriendInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != nil {
		n += 1 + sovServerServer(uint64(*m.PlayerID))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			n += 1 + sovServerServer(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateTeamInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != nil {
		n += 1 + sovServerServer(uint64(*m.PlayerID))
	}
	if m.TeamName != nil {
		l = len(*m.TeamName)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.AdminID != nil {
		n += 1 + sovServerServer(uint64(*m.AdminID))
	}
	if m.AdminName != nil {
		l = len(*m.AdminName)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateTeamResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamID != nil {
		n += 1 + sovServerServer(uint64(*m.TeamID))
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynamicData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogId != nil {
		n += 1 + sovServerServer(uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		n += 1 + sovServerServer(uint64(*m.PlayerId))
	}
	if m.HeadIcon != nil {
		l = len(*m.HeadIcon)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.Sex != nil {
		n += 1 + sovServerServer(uint64(*m.Sex))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if len(m.Photo) > 0 {
		for _, s := range m.Photo {
			l = len(s)
			n += 1 + l + sovServerServer(uint64(l))
		}
	}
	if m.Zan != nil {
		n += 1 + sovServerServer(uint64(*m.Zan))
	}
	if m.IsAtten != nil {
		n += 2
	}
	if m.Voice != nil {
		l = len(*m.Voice)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.Video != nil {
		l = len(*m.Video)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovServerServer(uint64(*m.CreateTime))
	}
	if m.CommentNum != nil {
		n += 1 + sovServerServer(uint64(*m.CommentNum))
	}
	if m.CommentList != nil {
		l = m.CommentList.Size()
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeamManager) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TeamIds) > 0 {
		for _, e := range m.TeamIds {
			n += 1 + sovServerServer(uint64(e))
		}
	}
	if m.Flag != nil {
		n += 1 + sovServerServer(uint64(*m.Flag))
	}
	if m.Hour != nil {
		n += 1 + sovServerServer(uint64(*m.Hour))
	}
	if m.Minutes != nil {
		n += 1 + sovServerServer(uint64(*m.Minutes))
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.TeamId != nil {
		n += 1 + sovServerServer(uint64(*m.TeamId))
	}
	if len(m.NickName) > 0 {
		for _, s := range m.NickName {
			l = len(s)
			n += 1 + l + sovServerServer(uint64(l))
		}
	}
	if m.CloseTime != nil {
		n += 1 + sovServerServer(uint64(*m.CloseTime))
	}
	if m.SendTime != nil {
		n += 1 + sovServerServer(uint64(*m.SendTime))
	}
	if m.Day != nil {
		n += 1 + sovServerServer(uint64(*m.Day))
	}
	if m.LogId != nil {
		n += 1 + sovServerServer(uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		n += 1 + sovServerServer(uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommentList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CommentInfo) > 0 {
		for _, e := range m.CommentInfo {
			l = e.Size()
			n += 1 + l + sovServerServer(uint64(l))
		}
	}
	if m.Count != nil {
		n += 1 + sovServerServer(uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommentData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovServerServer(uint64(*m.Id))
	}
	if m.LogId != nil {
		n += 1 + sovServerServer(uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		n += 1 + sovServerServer(uint64(*m.PlayerId))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.BelongId != nil {
		n += 1 + sovServerServer(uint64(*m.BelongId))
	}
	if m.CreateTime != nil {
		n += 1 + sovServerServer(uint64(*m.CreateTime))
	}
	if m.TargetId != nil {
		n += 1 + sovServerServer(uint64(*m.TargetId))
	}
	if m.Sex != nil {
		n += 1 + sovServerServer(uint64(*m.Sex))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.OtherName != nil {
		l = len(*m.OtherName)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.OtherSex != nil {
		n += 1 + sovServerServer(uint64(*m.OtherSex))
	}
	if m.TotalNum != nil {
		n += 1 + sovServerServer(uint64(*m.TotalNum))
	}
	if m.OwnerId != nil {
		n += 1 + sovServerServer(uint64(*m.OwnerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogId != nil {
		n += 1 + sovServerServer(uint64(*m.LogId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SysGivePropsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovServerServer(uint64(*m.PlayerId))
	}
	if m.ProductId != nil {
		n += 1 + sovServerServer(uint64(*m.ProductId))
	}
	if m.Num != nil {
		n += 1 + sovServerServer(uint64(*m.Num))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicDynamicTopLittleHelper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovServerServer(uint64(*m.PlayerId))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovServerServer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovServerServer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozServerServer(x uint64) (n int) {
	return sovServerServer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NotifyAddCoinReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyAddCoinReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyAddCoinReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyAddCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NotifyAddCoin = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgToHall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToHall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToHall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpcName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RpcName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MsgName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddFriend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddFriend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddFriend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FriendId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenWindows", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OpenWindows = &v
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerIdInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerIdInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerIdInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Success = &b
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatToOtherReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatToOtherReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatToOtherReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Chat == nil {
				m.Chat = &share_message.Chat{}
			}
			if err := m.Chat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReloadDynamicReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReloadDynamicReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReloadDynamicReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShopOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServerId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Recharge) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Recharge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Recharge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargeGold", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RechargeGold = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OrderId = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SourceType = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("PlayerId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("RechargeGold")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuditOrder) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuditOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuditOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OrderId = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("OrderId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SysteamModId) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SysteamModId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SysteamModId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("Id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerSI) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerSI: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerSI: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndWaiterMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndWaiterMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndWaiterMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mid = &v
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServerServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PlayerIds = append(m.PlayerIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServerServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthServerServer
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthServerServer
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PlayerIds) == 0 {
					m.PlayerIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServerServer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PlayerIds = append(m.PlayerIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerIds", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Node = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanOverTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BanOverTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamBan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamBan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamBan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServerServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServerServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthServerServer
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthServerServer
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServerServer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BanTime = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Node = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePlayer) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Site = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerBase == nil {
				m.PlayerBase = &share_message.PlayerBase{}
			}
			if err := m.PlayerBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ParentId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CreateIp = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Phone = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("Site")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("PlayerBase")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMember", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxMember = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GongGao", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GongGao = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRecommend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsRecommend = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Level = &v
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberOptRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberOptRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberOptRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TeamId = &v
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServerServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PlayerIds = append(m.PlayerIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServerServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthServerServer
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthServerServer
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PlayerIds) == 0 {
					m.PlayerIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServerServer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PlayerIds = append(m.PlayerIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerIds", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdminID = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerID = &v
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShopOrderExpressBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopOrderExpressBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopOrderExpressBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DateTime = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Remark = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShopOrderExpressInfos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopOrderExpressInfos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopOrderExpressInfos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpressInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpressInfos = append(m.ExpressInfos, &ShopOrderExpressBody{})
			if err := m.ExpressInfos[len(m.ExpressInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpressPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ExpressPhone = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpressName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ExpressName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPlayerFriendInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPlayerFriendInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPlayerFriendInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerID = &v
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServerServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.List = append(m.List, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServerServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthServerServer
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthServerServer
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.List) == 0 {
					m.List = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServerServer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.List = append(m.List, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTeamInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTeamInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTeamInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerID = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdminID = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AdminName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTeamResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTeamResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTeamResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TeamID = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynamicData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynamicData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynamicData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadIcon = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sex = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = append(m.Photo, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zan", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Zan = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAtten", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsAtten = &b
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Voice = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Video", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Video = &s
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommentNum = &v
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommentList == nil {
				m.CommentList = &CommentList{}
			}
			if err := m.CommentList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamManager) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamManager: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamManager: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServerServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TeamIds = append(m.TeamIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServerServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthServerServer
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthServerServer
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TeamIds) == 0 {
					m.TeamIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServerServer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TeamIds = append(m.TeamIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Flag = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hour", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hour = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minutes", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Minutes = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TeamId = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = append(m.NickName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CloseTime = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Day = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommentList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommentList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommentList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentInfo = append(m.CommentInfo, &CommentData{})
			if err := m.CommentInfo[len(m.CommentInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommentData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommentData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommentData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BelongId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BelongId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TargetId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sex = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OtherName = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherSex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OtherSex = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalNum = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OwnerId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SysGivePropsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SysGivePropsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SysGivePropsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Num = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicDynamicTopLittleHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicDynamicTopLittleHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicDynamicTopLittleHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServerServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServerServer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServerServer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServerServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthServerServer
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthServerServer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowServerServer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipServerServer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthServerServer
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthServerServer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServerServer   = fmt.Errorf("proto: integer overflow")
)
