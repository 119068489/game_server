// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: brower_backstage.proto

package brower_backstage

import (
	fmt "fmt"
	share_message "game_server/proto/share_message"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//这里是后台的rpc
//common.proto中有常用的rpc请求和返回的数据结构
//
//注册请求
type SigninRequest struct {
	Phone                *string  `protobuf:"bytes,1,req,name=Phone" json:"Phone,omitempty"`
	Types                *int32   `protobuf:"varint,2,opt,name=Types" json:"Types,omitempty"`
	Code                 *string  `protobuf:"bytes,3,opt,name=Code" json:"Code,omitempty"`
	Password             *string  `protobuf:"bytes,4,opt,name=Password" json:"Password,omitempty"`
	Account              *string  `protobuf:"bytes,5,opt,name=Account" json:"Account,omitempty"`
	AreaCode             *string  `protobuf:"bytes,6,opt,name=AreaCode" json:"AreaCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SigninRequest) Reset()         { *m = SigninRequest{} }
func (m *SigninRequest) String() string { return proto.CompactTextString(m) }
func (*SigninRequest) ProtoMessage()    {}
func (*SigninRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{0}
}
func (m *SigninRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigninRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SigninRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SigninRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigninRequest.Merge(m, src)
}
func (m *SigninRequest) XXX_Size() int {
	return m.Size()
}
func (m *SigninRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SigninRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SigninRequest proto.InternalMessageInfo

func (m *SigninRequest) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *SigninRequest) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *SigninRequest) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

func (m *SigninRequest) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *SigninRequest) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *SigninRequest) GetAreaCode() string {
	if m != nil && m.AreaCode != nil {
		return *m.AreaCode
	}
	return ""
}

//注册返回
type SigninResponse struct {
	Url                  *string  `protobuf:"bytes,1,opt,name=Url" json:"Url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SigninResponse) Reset()         { *m = SigninResponse{} }
func (m *SigninResponse) String() string { return proto.CompactTextString(m) }
func (*SigninResponse) ProtoMessage()    {}
func (*SigninResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{1}
}
func (m *SigninResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigninResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SigninResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SigninResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigninResponse.Merge(m, src)
}
func (m *SigninResponse) XXX_Size() int {
	return m.Size()
}
func (m *SigninResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SigninResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SigninResponse proto.InternalMessageInfo

func (m *SigninResponse) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

//登录返回
type LoginResponse struct {
	User                 *share_message.Manager   `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	Power                *share_message.RolePower `protobuf:"bytes,2,opt,name=Power" json:"Power,omitempty"`
	Token                *string                  `protobuf:"bytes,3,opt,name=Token" json:"Token,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *LoginResponse) Reset()         { *m = LoginResponse{} }
func (m *LoginResponse) String() string { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()    {}
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{2}
}
func (m *LoginResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginResponse.Merge(m, src)
}
func (m *LoginResponse) XXX_Size() int {
	return m.Size()
}
func (m *LoginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoginResponse proto.InternalMessageInfo

func (m *LoginResponse) GetUser() *share_message.Manager {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *LoginResponse) GetPower() *share_message.RolePower {
	if m != nil {
		return m.Power
	}
	return nil
}

func (m *LoginResponse) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

//后台管理员列表返回
type GetManagerListResponse struct {
	List                 []*share_message.Manager `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                   `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *GetManagerListResponse) Reset()         { *m = GetManagerListResponse{} }
func (m *GetManagerListResponse) String() string { return proto.CompactTextString(m) }
func (*GetManagerListResponse) ProtoMessage()    {}
func (*GetManagerListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{3}
}
func (m *GetManagerListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetManagerListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetManagerListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetManagerListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetManagerListResponse.Merge(m, src)
}
func (m *GetManagerListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetManagerListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetManagerListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetManagerListResponse proto.InternalMessageInfo

func (m *GetManagerListResponse) GetList() []*share_message.Manager {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *GetManagerListResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//查询管理员日志返回
type ManagerLogResponse struct {
	List                 []*share_message.BackstageOptLog `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                           `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *ManagerLogResponse) Reset()         { *m = ManagerLogResponse{} }
func (m *ManagerLogResponse) String() string { return proto.CompactTextString(m) }
func (*ManagerLogResponse) ProtoMessage()    {}
func (*ManagerLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{4}
}
func (m *ManagerLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManagerLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManagerLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ManagerLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagerLogResponse.Merge(m, src)
}
func (m *ManagerLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *ManagerLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagerLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ManagerLogResponse proto.InternalMessageInfo

func (m *ManagerLogResponse) GetList() []*share_message.BackstageOptLog {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ManagerLogResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type ManagerTypesResponse struct {
	List                 []*share_message.ManagerTypes `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                        `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ManagerTypesResponse) Reset()         { *m = ManagerTypesResponse{} }
func (m *ManagerTypesResponse) String() string { return proto.CompactTextString(m) }
func (*ManagerTypesResponse) ProtoMessage()    {}
func (*ManagerTypesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{5}
}
func (m *ManagerTypesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManagerTypesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManagerTypesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ManagerTypesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagerTypesResponse.Merge(m, src)
}
func (m *ManagerTypesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ManagerTypesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagerTypesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ManagerTypesResponse proto.InternalMessageInfo

func (m *ManagerTypesResponse) GetList() []*share_message.ManagerTypes {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ManagerTypesResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// 查询角色权限列表
type QueryRolePowerList struct {
	List                 []*share_message.RolePower `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                     `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *QueryRolePowerList) Reset()         { *m = QueryRolePowerList{} }
func (m *QueryRolePowerList) String() string { return proto.CompactTextString(m) }
func (*QueryRolePowerList) ProtoMessage()    {}
func (*QueryRolePowerList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{6}
}
func (m *QueryRolePowerList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRolePowerList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRolePowerList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRolePowerList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRolePowerList.Merge(m, src)
}
func (m *QueryRolePowerList) XXX_Size() int {
	return m.Size()
}
func (m *QueryRolePowerList) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRolePowerList.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRolePowerList proto.InternalMessageInfo

func (m *QueryRolePowerList) GetList() []*share_message.RolePower {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *QueryRolePowerList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//后台用户列表请求
type GetPlayerListRequest struct {
	CurPage              *int32   `protobuf:"varint,1,opt,name=CurPage" json:"CurPage,omitempty"`
	PageSize             *int32   `protobuf:"varint,2,opt,name=PageSize" json:"PageSize,omitempty"`
	Keyword              *string  `protobuf:"bytes,3,opt,name=Keyword" json:"Keyword,omitempty"`
	Type                 *int32   `protobuf:"varint,4,opt,name=Type" json:"Type,omitempty"`
	BeginTimestamp       *int64   `protobuf:"varint,5,opt,name=BeginTimestamp" json:"BeginTimestamp,omitempty"`
	EndTimestamp         *int64   `protobuf:"varint,6,opt,name=EndTimestamp" json:"EndTimestamp,omitempty"`
	Sort                 *string  `protobuf:"bytes,7,opt,name=Sort" json:"Sort,omitempty"`
	ListType             *int32   `protobuf:"varint,8,opt,name=ListType" json:"ListType,omitempty"`
	IsOnline             *int32   `protobuf:"varint,9,opt,name=IsOnline" json:"IsOnline,omitempty"`
	Sex                  *int32   `protobuf:"varint,10,opt,name=Sex" json:"Sex,omitempty"`
	Role                 *int32   `protobuf:"varint,11,opt,name=Role" json:"Role,omitempty"`
	Channel              []string `protobuf:"bytes,12,rep,name=channel" json:"channel,omitempty"`
	Label                []int32  `protobuf:"varint,13,rep,name=Label" json:"Label,omitempty"`
	CustomTag            []int32  `protobuf:"varint,14,rep,name=CustomTag" json:"CustomTag,omitempty"`
	GrabTag              []int32  `protobuf:"varint,15,rep,name=GrabTag" json:"GrabTag,omitempty"`
	Status               *int32   `protobuf:"varint,16,opt,name=Status" json:"Status,omitempty"`
	RegType              *int32   `protobuf:"varint,17,opt,name=RegType" json:"RegType,omitempty"`
	DeviceType           *int32   `protobuf:"varint,18,opt,name=DeviceType" json:"DeviceType,omitempty"`
	TimeType             *int32   `protobuf:"varint,19,opt,name=TimeType" json:"TimeType,omitempty"`
	WaiterType           *int32   `protobuf:"varint,20,opt,name=WaiterType" json:"WaiterType,omitempty"`
	PlayerType           *int32   `protobuf:"varint,21,opt,name=PlayerType" json:"PlayerType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPlayerListRequest) Reset()         { *m = GetPlayerListRequest{} }
func (m *GetPlayerListRequest) String() string { return proto.CompactTextString(m) }
func (*GetPlayerListRequest) ProtoMessage()    {}
func (*GetPlayerListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{7}
}
func (m *GetPlayerListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerListRequest.Merge(m, src)
}
func (m *GetPlayerListRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerListRequest proto.InternalMessageInfo

func (m *GetPlayerListRequest) GetCurPage() int32 {
	if m != nil && m.CurPage != nil {
		return *m.CurPage
	}
	return 0
}

func (m *GetPlayerListRequest) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *GetPlayerListRequest) GetKeyword() string {
	if m != nil && m.Keyword != nil {
		return *m.Keyword
	}
	return ""
}

func (m *GetPlayerListRequest) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *GetPlayerListRequest) GetBeginTimestamp() int64 {
	if m != nil && m.BeginTimestamp != nil {
		return *m.BeginTimestamp
	}
	return 0
}

func (m *GetPlayerListRequest) GetEndTimestamp() int64 {
	if m != nil && m.EndTimestamp != nil {
		return *m.EndTimestamp
	}
	return 0
}

func (m *GetPlayerListRequest) GetSort() string {
	if m != nil && m.Sort != nil {
		return *m.Sort
	}
	return ""
}

func (m *GetPlayerListRequest) GetListType() int32 {
	if m != nil && m.ListType != nil {
		return *m.ListType
	}
	return 0
}

func (m *GetPlayerListRequest) GetIsOnline() int32 {
	if m != nil && m.IsOnline != nil {
		return *m.IsOnline
	}
	return 0
}

func (m *GetPlayerListRequest) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *GetPlayerListRequest) GetRole() int32 {
	if m != nil && m.Role != nil {
		return *m.Role
	}
	return 0
}

func (m *GetPlayerListRequest) GetChannel() []string {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *GetPlayerListRequest) GetLabel() []int32 {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *GetPlayerListRequest) GetCustomTag() []int32 {
	if m != nil {
		return m.CustomTag
	}
	return nil
}

func (m *GetPlayerListRequest) GetGrabTag() []int32 {
	if m != nil {
		return m.GrabTag
	}
	return nil
}

func (m *GetPlayerListRequest) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *GetPlayerListRequest) GetRegType() int32 {
	if m != nil && m.RegType != nil {
		return *m.RegType
	}
	return 0
}

func (m *GetPlayerListRequest) GetDeviceType() int32 {
	if m != nil && m.DeviceType != nil {
		return *m.DeviceType
	}
	return 0
}

func (m *GetPlayerListRequest) GetTimeType() int32 {
	if m != nil && m.TimeType != nil {
		return *m.TimeType
	}
	return 0
}

func (m *GetPlayerListRequest) GetWaiterType() int32 {
	if m != nil && m.WaiterType != nil {
		return *m.WaiterType
	}
	return 0
}

func (m *GetPlayerListRequest) GetPlayerType() int32 {
	if m != nil && m.PlayerType != nil {
		return *m.PlayerType
	}
	return 0
}

//后台批量好友用户列表请求
type GetPlayerFriendListRequest struct {
	CurPage              *int32   `protobuf:"varint,1,opt,name=CurPage" json:"CurPage,omitempty"`
	PageSize             *int32   `protobuf:"varint,2,opt,name=PageSize" json:"PageSize,omitempty"`
	Keyword              *string  `protobuf:"bytes,3,opt,name=Keyword" json:"Keyword,omitempty"`
	PlayerId             *int64   `protobuf:"varint,4,opt,name=player_id" json:"player_id,omitempty"`
	Gender               *int32   `protobuf:"varint,6,opt,name=gender" json:"gender,omitempty"`
	Label                *int32   `protobuf:"varint,7,opt,name=label" json:"label,omitempty"`
	Province             *string  `protobuf:"bytes,8,opt,name=province" json:"province,omitempty"`
	City                 *string  `protobuf:"bytes,9,opt,name=city" json:"city,omitempty"`
	Region               *string  `protobuf:"bytes,10,opt,name=region" json:"region,omitempty"`
	Type                 *int32   `protobuf:"varint,11,opt,name=type" json:"type,omitempty"`
	CustomTag            *int32   `protobuf:"varint,12,opt,name=CustomTag" json:"CustomTag,omitempty"`
	GrabTag              *int32   `protobuf:"varint,13,opt,name=GrabTag" json:"GrabTag,omitempty"`
	BeginTimestamp       *int64   `protobuf:"varint,14,opt,name=BeginTimestamp" json:"BeginTimestamp,omitempty"`
	EndTimestamp         *int64   `protobuf:"varint,15,opt,name=EndTimestamp" json:"EndTimestamp,omitempty"`
	PlayerType           *int32   `protobuf:"varint,16,opt,name=PlayerType" json:"PlayerType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPlayerFriendListRequest) Reset()         { *m = GetPlayerFriendListRequest{} }
func (m *GetPlayerFriendListRequest) String() string { return proto.CompactTextString(m) }
func (*GetPlayerFriendListRequest) ProtoMessage()    {}
func (*GetPlayerFriendListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{8}
}
func (m *GetPlayerFriendListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerFriendListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerFriendListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerFriendListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerFriendListRequest.Merge(m, src)
}
func (m *GetPlayerFriendListRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerFriendListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerFriendListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerFriendListRequest proto.InternalMessageInfo

func (m *GetPlayerFriendListRequest) GetCurPage() int32 {
	if m != nil && m.CurPage != nil {
		return *m.CurPage
	}
	return 0
}

func (m *GetPlayerFriendListRequest) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *GetPlayerFriendListRequest) GetKeyword() string {
	if m != nil && m.Keyword != nil {
		return *m.Keyword
	}
	return ""
}

func (m *GetPlayerFriendListRequest) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *GetPlayerFriendListRequest) GetGender() int32 {
	if m != nil && m.Gender != nil {
		return *m.Gender
	}
	return 0
}

func (m *GetPlayerFriendListRequest) GetLabel() int32 {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return 0
}

func (m *GetPlayerFriendListRequest) GetProvince() string {
	if m != nil && m.Province != nil {
		return *m.Province
	}
	return ""
}

func (m *GetPlayerFriendListRequest) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

func (m *GetPlayerFriendListRequest) GetRegion() string {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return ""
}

func (m *GetPlayerFriendListRequest) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *GetPlayerFriendListRequest) GetCustomTag() int32 {
	if m != nil && m.CustomTag != nil {
		return *m.CustomTag
	}
	return 0
}

func (m *GetPlayerFriendListRequest) GetGrabTag() int32 {
	if m != nil && m.GrabTag != nil {
		return *m.GrabTag
	}
	return 0
}

func (m *GetPlayerFriendListRequest) GetBeginTimestamp() int64 {
	if m != nil && m.BeginTimestamp != nil {
		return *m.BeginTimestamp
	}
	return 0
}

func (m *GetPlayerFriendListRequest) GetEndTimestamp() int64 {
	if m != nil && m.EndTimestamp != nil {
		return *m.EndTimestamp
	}
	return 0
}

func (m *GetPlayerFriendListRequest) GetPlayerType() int32 {
	if m != nil && m.PlayerType != nil {
		return *m.PlayerType
	}
	return 0
}

//后台用户列表返回
type GetPlayerListResponse struct {
	List                 []*share_message.PlayerBase `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                      `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *GetPlayerListResponse) Reset()         { *m = GetPlayerListResponse{} }
func (m *GetPlayerListResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlayerListResponse) ProtoMessage()    {}
func (*GetPlayerListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{9}
}
func (m *GetPlayerListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerListResponse.Merge(m, src)
}
func (m *GetPlayerListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerListResponse proto.InternalMessageInfo

func (m *GetPlayerListResponse) GetList() []*share_message.PlayerBase {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *GetPlayerListResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//群列表请求
type GetTeamListRequest struct {
	CurPage              *int32   `protobuf:"varint,1,opt,name=CurPage" json:"CurPage,omitempty"`
	PageSize             *int32   `protobuf:"varint,2,opt,name=PageSize" json:"PageSize,omitempty"`
	Keyword              *string  `protobuf:"bytes,3,opt,name=Keyword" json:"Keyword,omitempty"`
	Type                 *int32   `protobuf:"varint,4,opt,name=Type" json:"Type,omitempty"`
	Status               *bool    `protobuf:"varint,5,opt,name=Status" json:"Status,omitempty"`
	ListType             *int32   `protobuf:"varint,6,opt,name=ListType" json:"ListType,omitempty"`
	State                *int32   `protobuf:"varint,7,opt,name=State" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTeamListRequest) Reset()         { *m = GetTeamListRequest{} }
func (m *GetTeamListRequest) String() string { return proto.CompactTextString(m) }
func (*GetTeamListRequest) ProtoMessage()    {}
func (*GetTeamListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{10}
}
func (m *GetTeamListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTeamListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTeamListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTeamListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTeamListRequest.Merge(m, src)
}
func (m *GetTeamListRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTeamListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTeamListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTeamListRequest proto.InternalMessageInfo

func (m *GetTeamListRequest) GetCurPage() int32 {
	if m != nil && m.CurPage != nil {
		return *m.CurPage
	}
	return 0
}

func (m *GetTeamListRequest) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *GetTeamListRequest) GetKeyword() string {
	if m != nil && m.Keyword != nil {
		return *m.Keyword
	}
	return ""
}

func (m *GetTeamListRequest) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *GetTeamListRequest) GetStatus() bool {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return false
}

func (m *GetTeamListRequest) GetListType() int32 {
	if m != nil && m.ListType != nil {
		return *m.ListType
	}
	return 0
}

func (m *GetTeamListRequest) GetState() int32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

//群列表返回
type GetTeamListResponse struct {
	List                 []*share_message.TeamData `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                    `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *GetTeamListResponse) Reset()         { *m = GetTeamListResponse{} }
func (m *GetTeamListResponse) String() string { return proto.CompactTextString(m) }
func (*GetTeamListResponse) ProtoMessage()    {}
func (*GetTeamListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{11}
}
func (m *GetTeamListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTeamListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTeamListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTeamListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTeamListResponse.Merge(m, src)
}
func (m *GetTeamListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTeamListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTeamListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTeamListResponse proto.InternalMessageInfo

func (m *GetTeamListResponse) GetList() []*share_message.TeamData {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *GetTeamListResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//增减群成员请求
type MemberOptRequest struct {
	TeamId               *int64   `protobuf:"varint,1,opt,name=TeamId" json:"TeamId,omitempty"`
	Account              []string `protobuf:"bytes,2,rep,name=Account" json:"Account,omitempty"`
	Types                *int32   `protobuf:"varint,3,opt,name=Types" json:"Types,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MemberOptRequest) Reset()         { *m = MemberOptRequest{} }
func (m *MemberOptRequest) String() string { return proto.CompactTextString(m) }
func (*MemberOptRequest) ProtoMessage()    {}
func (*MemberOptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{12}
}
func (m *MemberOptRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemberOptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemberOptRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemberOptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberOptRequest.Merge(m, src)
}
func (m *MemberOptRequest) XXX_Size() int {
	return m.Size()
}
func (m *MemberOptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberOptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MemberOptRequest proto.InternalMessageInfo

func (m *MemberOptRequest) GetTeamId() int64 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *MemberOptRequest) GetAccount() []string {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *MemberOptRequest) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

type TeamMemberRequest struct {
	CurPage              *int32   `protobuf:"varint,1,opt,name=CurPage" json:"CurPage,omitempty"`
	PageSize             *int32   `protobuf:"varint,2,opt,name=PageSize" json:"PageSize,omitempty"`
	TeamId               *int64   `protobuf:"varint,3,opt,name=TeamId" json:"TeamId,omitempty"`
	State                *int32   `protobuf:"varint,4,opt,name=State" json:"State,omitempty"`
	Type                 *int32   `protobuf:"varint,5,opt,name=Type" json:"Type,omitempty"`
	Keyword              *string  `protobuf:"bytes,6,opt,name=Keyword" json:"Keyword,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeamMemberRequest) Reset()         { *m = TeamMemberRequest{} }
func (m *TeamMemberRequest) String() string { return proto.CompactTextString(m) }
func (*TeamMemberRequest) ProtoMessage()    {}
func (*TeamMemberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{13}
}
func (m *TeamMemberRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamMemberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamMemberRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamMemberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamMemberRequest.Merge(m, src)
}
func (m *TeamMemberRequest) XXX_Size() int {
	return m.Size()
}
func (m *TeamMemberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamMemberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TeamMemberRequest proto.InternalMessageInfo

func (m *TeamMemberRequest) GetCurPage() int32 {
	if m != nil && m.CurPage != nil {
		return *m.CurPage
	}
	return 0
}

func (m *TeamMemberRequest) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *TeamMemberRequest) GetTeamId() int64 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *TeamMemberRequest) GetState() int32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

func (m *TeamMemberRequest) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *TeamMemberRequest) GetKeyword() string {
	if m != nil && m.Keyword != nil {
		return *m.Keyword
	}
	return ""
}

//群成员返回
type TeamMemberResponse struct {
	List                 []*share_message.PersonalTeamData `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                            `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *TeamMemberResponse) Reset()         { *m = TeamMemberResponse{} }
func (m *TeamMemberResponse) String() string { return proto.CompactTextString(m) }
func (*TeamMemberResponse) ProtoMessage()    {}
func (*TeamMemberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{14}
}
func (m *TeamMemberResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamMemberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamMemberResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamMemberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamMemberResponse.Merge(m, src)
}
func (m *TeamMemberResponse) XXX_Size() int {
	return m.Size()
}
func (m *TeamMemberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamMemberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TeamMemberResponse proto.InternalMessageInfo

func (m *TeamMemberResponse) GetList() []*share_message.PersonalTeamData {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *TeamMemberResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type SourceTypeRequest struct {
	Types                *int32   `protobuf:"varint,1,opt,name=Types" json:"Types,omitempty"`
	Channel              *int32   `protobuf:"varint,2,opt,name=Channel" json:"Channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SourceTypeRequest) Reset()         { *m = SourceTypeRequest{} }
func (m *SourceTypeRequest) String() string { return proto.CompactTextString(m) }
func (*SourceTypeRequest) ProtoMessage()    {}
func (*SourceTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{15}
}
func (m *SourceTypeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SourceTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SourceTypeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SourceTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SourceTypeRequest.Merge(m, src)
}
func (m *SourceTypeRequest) XXX_Size() int {
	return m.Size()
}
func (m *SourceTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SourceTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SourceTypeRequest proto.InternalMessageInfo

func (m *SourceTypeRequest) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *SourceTypeRequest) GetChannel() int32 {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return 0
}

//群成员返回
type SourceTypeResponse struct {
	List                 []*share_message.SourceType `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *SourceTypeResponse) Reset()         { *m = SourceTypeResponse{} }
func (m *SourceTypeResponse) String() string { return proto.CompactTextString(m) }
func (*SourceTypeResponse) ProtoMessage()    {}
func (*SourceTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{16}
}
func (m *SourceTypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SourceTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SourceTypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SourceTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SourceTypeResponse.Merge(m, src)
}
func (m *SourceTypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *SourceTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SourceTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SourceTypeResponse proto.InternalMessageInfo

func (m *SourceTypeResponse) GetList() []*share_message.SourceType {
	if m != nil {
		return m.List
	}
	return nil
}

// 金币变化请求(请求下单)
type AddGoldResult struct {
	PlayerId             *int64   `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	Gold                 *int64   `protobuf:"varint,2,req,name=Gold" json:"Gold,omitempty"`
	ChangeType           *int32   `protobuf:"varint,3,req,name=ChangeType" json:"ChangeType,omitempty"`
	Extra                *int64   `protobuf:"varint,5,opt,name=Extra" json:"Extra,omitempty"`
	SourceType           *int32   `protobuf:"varint,6,opt,name=SourceType" json:"SourceType,omitempty"`
	Channeltype          *int32   `protobuf:"varint,7,opt,name=Channeltype" json:"Channeltype,omitempty"`
	Note                 *string  `protobuf:"bytes,8,opt,name=Note" json:"Note,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddGoldResult) Reset()         { *m = AddGoldResult{} }
func (m *AddGoldResult) String() string { return proto.CompactTextString(m) }
func (*AddGoldResult) ProtoMessage()    {}
func (*AddGoldResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{17}
}
func (m *AddGoldResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddGoldResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddGoldResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddGoldResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddGoldResult.Merge(m, src)
}
func (m *AddGoldResult) XXX_Size() int {
	return m.Size()
}
func (m *AddGoldResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AddGoldResult.DiscardUnknown(m)
}

var xxx_messageInfo_AddGoldResult proto.InternalMessageInfo

func (m *AddGoldResult) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *AddGoldResult) GetGold() int64 {
	if m != nil && m.Gold != nil {
		return *m.Gold
	}
	return 0
}

func (m *AddGoldResult) GetChangeType() int32 {
	if m != nil && m.ChangeType != nil {
		return *m.ChangeType
	}
	return 0
}

func (m *AddGoldResult) GetExtra() int64 {
	if m != nil && m.Extra != nil {
		return *m.Extra
	}
	return 0
}

func (m *AddGoldResult) GetSourceType() int32 {
	if m != nil && m.SourceType != nil {
		return *m.SourceType
	}
	return 0
}

func (m *AddGoldResult) GetChanneltype() int32 {
	if m != nil && m.Channeltype != nil {
		return *m.Channeltype
	}
	return 0
}

func (m *AddGoldResult) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

//金币log请求
type QueryGoldLogRequest struct {
	BeginTimestamp       *int64   `protobuf:"varint,1,opt,name=BeginTimestamp" json:"BeginTimestamp,omitempty"`
	EndTimestamp         *int64   `protobuf:"varint,2,opt,name=EndTimestamp" json:"EndTimestamp,omitempty"`
	CurPage              *int32   `protobuf:"varint,3,opt,name=CurPage" json:"CurPage,omitempty"`
	PageSize             *int32   `protobuf:"varint,4,opt,name=PageSize" json:"PageSize,omitempty"`
	Keyword              *string  `protobuf:"bytes,6,opt,name=Keyword" json:"Keyword,omitempty"`
	KeyType              *int32   `protobuf:"varint,7,opt,name=KeyType" json:"KeyType,omitempty"`
	SourceType           []int32  `protobuf:"varint,8,rep,name=SourceType" json:"SourceType,omitempty"`
	PayType              *int32   `protobuf:"varint,9,opt,name=PayType" json:"PayType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryGoldLogRequest) Reset()         { *m = QueryGoldLogRequest{} }
func (m *QueryGoldLogRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGoldLogRequest) ProtoMessage()    {}
func (*QueryGoldLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{18}
}
func (m *QueryGoldLogRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGoldLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGoldLogRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGoldLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGoldLogRequest.Merge(m, src)
}
func (m *QueryGoldLogRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGoldLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGoldLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGoldLogRequest proto.InternalMessageInfo

func (m *QueryGoldLogRequest) GetBeginTimestamp() int64 {
	if m != nil && m.BeginTimestamp != nil {
		return *m.BeginTimestamp
	}
	return 0
}

func (m *QueryGoldLogRequest) GetEndTimestamp() int64 {
	if m != nil && m.EndTimestamp != nil {
		return *m.EndTimestamp
	}
	return 0
}

func (m *QueryGoldLogRequest) GetCurPage() int32 {
	if m != nil && m.CurPage != nil {
		return *m.CurPage
	}
	return 0
}

func (m *QueryGoldLogRequest) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *QueryGoldLogRequest) GetKeyword() string {
	if m != nil && m.Keyword != nil {
		return *m.Keyword
	}
	return ""
}

func (m *QueryGoldLogRequest) GetKeyType() int32 {
	if m != nil && m.KeyType != nil {
		return *m.KeyType
	}
	return 0
}

func (m *QueryGoldLogRequest) GetSourceType() []int32 {
	if m != nil {
		return m.SourceType
	}
	return nil
}

func (m *QueryGoldLogRequest) GetPayType() int32 {
	if m != nil && m.PayType != nil {
		return *m.PayType
	}
	return 0
}

//金币log返回
type QueryGoldLogResponse struct {
	List                 []*GoldLogList `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32         `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *QueryGoldLogResponse) Reset()         { *m = QueryGoldLogResponse{} }
func (m *QueryGoldLogResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGoldLogResponse) ProtoMessage()    {}
func (*QueryGoldLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{19}
}
func (m *QueryGoldLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGoldLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGoldLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGoldLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGoldLogResponse.Merge(m, src)
}
func (m *QueryGoldLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGoldLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGoldLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGoldLogResponse proto.InternalMessageInfo

func (m *QueryGoldLogResponse) GetList() []*GoldLogList {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *QueryGoldLogResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//金币日志结构
type GoldLogList struct {
	InLine               *share_message.GoldChangeLog  `protobuf:"bytes,1,req,name=InLine" json:"InLine,omitempty"`
	Extend               *share_message.RechargeExtend `protobuf:"bytes,2,opt,name=Extend" json:"Extend,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *GoldLogList) Reset()         { *m = GoldLogList{} }
func (m *GoldLogList) String() string { return proto.CompactTextString(m) }
func (*GoldLogList) ProtoMessage()    {}
func (*GoldLogList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{20}
}
func (m *GoldLogList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoldLogList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoldLogList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoldLogList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoldLogList.Merge(m, src)
}
func (m *GoldLogList) XXX_Size() int {
	return m.Size()
}
func (m *GoldLogList) XXX_DiscardUnknown() {
	xxx_messageInfo_GoldLogList.DiscardUnknown(m)
}

var xxx_messageInfo_GoldLogList proto.InternalMessageInfo

func (m *GoldLogList) GetInLine() *share_message.GoldChangeLog {
	if m != nil {
		return m.InLine
	}
	return nil
}

func (m *GoldLogList) GetExtend() *share_message.RechargeExtend {
	if m != nil {
		return m.Extend
	}
	return nil
}

type PaymentSettingResponse struct {
	List                 []*share_message.PaymentSetting `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                          `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *PaymentSettingResponse) Reset()         { *m = PaymentSettingResponse{} }
func (m *PaymentSettingResponse) String() string { return proto.CompactTextString(m) }
func (*PaymentSettingResponse) ProtoMessage()    {}
func (*PaymentSettingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{21}
}
func (m *PaymentSettingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentSettingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentSettingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentSettingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentSettingResponse.Merge(m, src)
}
func (m *PaymentSettingResponse) XXX_Size() int {
	return m.Size()
}
func (m *PaymentSettingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentSettingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentSettingResponse proto.InternalMessageInfo

func (m *PaymentSettingResponse) GetList() []*share_message.PaymentSetting {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *PaymentSettingResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type PlayerKeepReportResponse struct {
	List                 []*share_message.PlayerKeepReport `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                            `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *PlayerKeepReportResponse) Reset()         { *m = PlayerKeepReportResponse{} }
func (m *PlayerKeepReportResponse) String() string { return proto.CompactTextString(m) }
func (*PlayerKeepReportResponse) ProtoMessage()    {}
func (*PlayerKeepReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{22}
}
func (m *PlayerKeepReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerKeepReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerKeepReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerKeepReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerKeepReportResponse.Merge(m, src)
}
func (m *PlayerKeepReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *PlayerKeepReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerKeepReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerKeepReportResponse proto.InternalMessageInfo

func (m *PlayerKeepReportResponse) GetList() []*share_message.PlayerKeepReport {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *PlayerKeepReportResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type PlayerActiveReportResponse struct {
	List                 []*share_message.PlayerActiveReport `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                              `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *PlayerActiveReportResponse) Reset()         { *m = PlayerActiveReportResponse{} }
func (m *PlayerActiveReportResponse) String() string { return proto.CompactTextString(m) }
func (*PlayerActiveReportResponse) ProtoMessage()    {}
func (*PlayerActiveReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{23}
}
func (m *PlayerActiveReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerActiveReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerActiveReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerActiveReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerActiveReportResponse.Merge(m, src)
}
func (m *PlayerActiveReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *PlayerActiveReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerActiveReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerActiveReportResponse proto.InternalMessageInfo

func (m *PlayerActiveReportResponse) GetList() []*share_message.PlayerActiveReport {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *PlayerActiveReportResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type PlayerBehaviorReportResponse struct {
	List                 []*share_message.PlayerBehaviorReport `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                                `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *PlayerBehaviorReportResponse) Reset()         { *m = PlayerBehaviorReportResponse{} }
func (m *PlayerBehaviorReportResponse) String() string { return proto.CompactTextString(m) }
func (*PlayerBehaviorReportResponse) ProtoMessage()    {}
func (*PlayerBehaviorReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{24}
}
func (m *PlayerBehaviorReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerBehaviorReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerBehaviorReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerBehaviorReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerBehaviorReportResponse.Merge(m, src)
}
func (m *PlayerBehaviorReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *PlayerBehaviorReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerBehaviorReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerBehaviorReportResponse proto.InternalMessageInfo

func (m *PlayerBehaviorReportResponse) GetList() []*share_message.PlayerBehaviorReport {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *PlayerBehaviorReportResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type InOutCashSumReportResponse struct {
	List                 []*share_message.InOutCashSumReport `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                              `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *InOutCashSumReportResponse) Reset()         { *m = InOutCashSumReportResponse{} }
func (m *InOutCashSumReportResponse) String() string { return proto.CompactTextString(m) }
func (*InOutCashSumReportResponse) ProtoMessage()    {}
func (*InOutCashSumReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{25}
}
func (m *InOutCashSumReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InOutCashSumReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InOutCashSumReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InOutCashSumReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InOutCashSumReportResponse.Merge(m, src)
}
func (m *InOutCashSumReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *InOutCashSumReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InOutCashSumReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InOutCashSumReportResponse proto.InternalMessageInfo

func (m *InOutCashSumReportResponse) GetList() []*share_message.InOutCashSumReport {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *InOutCashSumReportResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type RegisterLoginReportResponse struct {
	List                 []*share_message.RegisterLoginReport `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                               `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *RegisterLoginReportResponse) Reset()         { *m = RegisterLoginReportResponse{} }
func (m *RegisterLoginReportResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterLoginReportResponse) ProtoMessage()    {}
func (*RegisterLoginReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{26}
}
func (m *RegisterLoginReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterLoginReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterLoginReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterLoginReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterLoginReportResponse.Merge(m, src)
}
func (m *RegisterLoginReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterLoginReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterLoginReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterLoginReportResponse proto.InternalMessageInfo

func (m *RegisterLoginReportResponse) GetList() []*share_message.RegisterLoginReport {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *RegisterLoginReportResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type OperationChannelReportResponse struct {
	List                 []*share_message.OperationChannelReport `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                                  `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *OperationChannelReportResponse) Reset()         { *m = OperationChannelReportResponse{} }
func (m *OperationChannelReportResponse) String() string { return proto.CompactTextString(m) }
func (*OperationChannelReportResponse) ProtoMessage()    {}
func (*OperationChannelReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{27}
}
func (m *OperationChannelReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationChannelReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationChannelReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperationChannelReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationChannelReportResponse.Merge(m, src)
}
func (m *OperationChannelReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *OperationChannelReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationChannelReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OperationChannelReportResponse proto.InternalMessageInfo

func (m *OperationChannelReportResponse) GetList() []*share_message.OperationChannelReport {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *OperationChannelReportResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type ChannelReportResponse struct {
	List                 []*share_message.ChannelReport `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                         `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ChannelReportResponse) Reset()         { *m = ChannelReportResponse{} }
func (m *ChannelReportResponse) String() string { return proto.CompactTextString(m) }
func (*ChannelReportResponse) ProtoMessage()    {}
func (*ChannelReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{28}
}
func (m *ChannelReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelReportResponse.Merge(m, src)
}
func (m *ChannelReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *ChannelReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelReportResponse proto.InternalMessageInfo

func (m *ChannelReportResponse) GetList() []*share_message.ChannelReport {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ChannelReportResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type ArticleReportResponse struct {
	List                 []*share_message.ArticleReport `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                         `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ArticleReportResponse) Reset()         { *m = ArticleReportResponse{} }
func (m *ArticleReportResponse) String() string { return proto.CompactTextString(m) }
func (*ArticleReportResponse) ProtoMessage()    {}
func (*ArticleReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{29}
}
func (m *ArticleReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleReportResponse.Merge(m, src)
}
func (m *ArticleReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArticleReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleReportResponse proto.InternalMessageInfo

func (m *ArticleReportResponse) GetList() []*share_message.ArticleReport {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ArticleReportResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type SquareReportResponse struct {
	List                 []*share_message.SquareReport `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                        `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *SquareReportResponse) Reset()         { *m = SquareReportResponse{} }
func (m *SquareReportResponse) String() string { return proto.CompactTextString(m) }
func (*SquareReportResponse) ProtoMessage()    {}
func (*SquareReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{30}
}
func (m *SquareReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SquareReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SquareReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SquareReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SquareReportResponse.Merge(m, src)
}
func (m *SquareReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *SquareReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SquareReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SquareReportResponse proto.InternalMessageInfo

func (m *SquareReportResponse) GetList() []*share_message.SquareReport {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SquareReportResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type AdvReportResponse struct {
	List                 []*share_message.AdvReport `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                     `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *AdvReportResponse) Reset()         { *m = AdvReportResponse{} }
func (m *AdvReportResponse) String() string { return proto.CompactTextString(m) }
func (*AdvReportResponse) ProtoMessage()    {}
func (*AdvReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{31}
}
func (m *AdvReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdvReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdvReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdvReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvReportResponse.Merge(m, src)
}
func (m *AdvReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *AdvReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AdvReportResponse proto.InternalMessageInfo

func (m *AdvReportResponse) GetList() []*share_message.AdvReport {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *AdvReportResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type PayTypeResponse struct {
	List                 []*share_message.PayType `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *PayTypeResponse) Reset()         { *m = PayTypeResponse{} }
func (m *PayTypeResponse) String() string { return proto.CompactTextString(m) }
func (*PayTypeResponse) ProtoMessage()    {}
func (*PayTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{32}
}
func (m *PayTypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayTypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayTypeResponse.Merge(m, src)
}
func (m *PayTypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *PayTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PayTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PayTypeResponse proto.InternalMessageInfo

func (m *PayTypeResponse) GetList() []*share_message.PayType {
	if m != nil {
		return m.List
	}
	return nil
}

type PaySceneResponse struct {
	List                 []*share_message.PayScene `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *PaySceneResponse) Reset()         { *m = PaySceneResponse{} }
func (m *PaySceneResponse) String() string { return proto.CompactTextString(m) }
func (*PaySceneResponse) ProtoMessage()    {}
func (*PaySceneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{33}
}
func (m *PaySceneResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaySceneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaySceneResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaySceneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaySceneResponse.Merge(m, src)
}
func (m *PaySceneResponse) XXX_Size() int {
	return m.Size()
}
func (m *PaySceneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PaySceneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PaySceneResponse proto.InternalMessageInfo

func (m *PaySceneResponse) GetList() []*share_message.PayScene {
	if m != nil {
		return m.List
	}
	return nil
}

type PaymentPlatformResponse struct {
	List                 []*share_message.PaymentPlatform `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                           `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *PaymentPlatformResponse) Reset()         { *m = PaymentPlatformResponse{} }
func (m *PaymentPlatformResponse) String() string { return proto.CompactTextString(m) }
func (*PaymentPlatformResponse) ProtoMessage()    {}
func (*PaymentPlatformResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{34}
}
func (m *PaymentPlatformResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentPlatformResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentPlatformResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentPlatformResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentPlatformResponse.Merge(m, src)
}
func (m *PaymentPlatformResponse) XXX_Size() int {
	return m.Size()
}
func (m *PaymentPlatformResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentPlatformResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentPlatformResponse proto.InternalMessageInfo

func (m *PaymentPlatformResponse) GetList() []*share_message.PaymentPlatform {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *PaymentPlatformResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type PlatformChannelRequest struct {
	ListType             *int32   `protobuf:"varint,1,opt,name=ListType" json:"ListType,omitempty"`
	PayType              *int32   `protobuf:"varint,2,opt,name=PayType" json:"PayType,omitempty"`
	Status               *int32   `protobuf:"varint,3,opt,name=Status" json:"Status,omitempty"`
	Types                *int32   `protobuf:"varint,4,opt,name=Types" json:"Types,omitempty"`
	Keyword              *string  `protobuf:"bytes,5,opt,name=Keyword" json:"Keyword,omitempty"`
	CurPage              *int32   `protobuf:"varint,6,req,name=CurPage" json:"CurPage,omitempty"`
	PageSize             *int32   `protobuf:"varint,7,req,name=PageSize" json:"PageSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlatformChannelRequest) Reset()         { *m = PlatformChannelRequest{} }
func (m *PlatformChannelRequest) String() string { return proto.CompactTextString(m) }
func (*PlatformChannelRequest) ProtoMessage()    {}
func (*PlatformChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{35}
}
func (m *PlatformChannelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlatformChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlatformChannelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlatformChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlatformChannelRequest.Merge(m, src)
}
func (m *PlatformChannelRequest) XXX_Size() int {
	return m.Size()
}
func (m *PlatformChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlatformChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlatformChannelRequest proto.InternalMessageInfo

func (m *PlatformChannelRequest) GetListType() int32 {
	if m != nil && m.ListType != nil {
		return *m.ListType
	}
	return 0
}

func (m *PlatformChannelRequest) GetPayType() int32 {
	if m != nil && m.PayType != nil {
		return *m.PayType
	}
	return 0
}

func (m *PlatformChannelRequest) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *PlatformChannelRequest) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *PlatformChannelRequest) GetKeyword() string {
	if m != nil && m.Keyword != nil {
		return *m.Keyword
	}
	return ""
}

func (m *PlatformChannelRequest) GetCurPage() int32 {
	if m != nil && m.CurPage != nil {
		return *m.CurPage
	}
	return 0
}

func (m *PlatformChannelRequest) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

type PlatformChannelResponse struct {
	List                 []*share_message.PlatformChannel `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                           `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *PlatformChannelResponse) Reset()         { *m = PlatformChannelResponse{} }
func (m *PlatformChannelResponse) String() string { return proto.CompactTextString(m) }
func (*PlatformChannelResponse) ProtoMessage()    {}
func (*PlatformChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{36}
}
func (m *PlatformChannelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlatformChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlatformChannelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlatformChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlatformChannelResponse.Merge(m, src)
}
func (m *PlatformChannelResponse) XXX_Size() int {
	return m.Size()
}
func (m *PlatformChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlatformChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlatformChannelResponse proto.InternalMessageInfo

func (m *PlatformChannelResponse) GetList() []*share_message.PlatformChannel {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *PlatformChannelResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type QueryFeaturesRequest struct {
	Recipient            *int32   `protobuf:"varint,1,opt,name=Recipient" json:"Recipient,omitempty"`
	Status               *int32   `protobuf:"varint,2,opt,name=Status" json:"Status,omitempty"`
	Types                *int32   `protobuf:"varint,3,opt,name=Types" json:"Types,omitempty"`
	Keyword              *string  `protobuf:"bytes,4,opt,name=Keyword" json:"Keyword,omitempty"`
	BeginTimestamp       *int64   `protobuf:"varint,5,opt,name=BeginTimestamp" json:"BeginTimestamp,omitempty"`
	EndTimestamp         *int64   `protobuf:"varint,6,opt,name=EndTimestamp" json:"EndTimestamp,omitempty"`
	CurPage              *int32   `protobuf:"varint,7,req,name=CurPage" json:"CurPage,omitempty"`
	PageSize             *int32   `protobuf:"varint,8,req,name=PageSize" json:"PageSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryFeaturesRequest) Reset()         { *m = QueryFeaturesRequest{} }
func (m *QueryFeaturesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeaturesRequest) ProtoMessage()    {}
func (*QueryFeaturesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{37}
}
func (m *QueryFeaturesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeaturesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeaturesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeaturesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeaturesRequest.Merge(m, src)
}
func (m *QueryFeaturesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeaturesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeaturesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeaturesRequest proto.InternalMessageInfo

func (m *QueryFeaturesRequest) GetRecipient() int32 {
	if m != nil && m.Recipient != nil {
		return *m.Recipient
	}
	return 0
}

func (m *QueryFeaturesRequest) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *QueryFeaturesRequest) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *QueryFeaturesRequest) GetKeyword() string {
	if m != nil && m.Keyword != nil {
		return *m.Keyword
	}
	return ""
}

func (m *QueryFeaturesRequest) GetBeginTimestamp() int64 {
	if m != nil && m.BeginTimestamp != nil {
		return *m.BeginTimestamp
	}
	return 0
}

func (m *QueryFeaturesRequest) GetEndTimestamp() int64 {
	if m != nil && m.EndTimestamp != nil {
		return *m.EndTimestamp
	}
	return 0
}

func (m *QueryFeaturesRequest) GetCurPage() int32 {
	if m != nil && m.CurPage != nil {
		return *m.CurPage
	}
	return 0
}

func (m *QueryFeaturesRequest) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

type QueryFeaturesResponse struct {
	List                 []*share_message.AppPushMessage `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                          `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *QueryFeaturesResponse) Reset()         { *m = QueryFeaturesResponse{} }
func (m *QueryFeaturesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeaturesResponse) ProtoMessage()    {}
func (*QueryFeaturesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{38}
}
func (m *QueryFeaturesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeaturesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeaturesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeaturesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeaturesResponse.Merge(m, src)
}
func (m *QueryFeaturesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeaturesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeaturesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeaturesResponse proto.InternalMessageInfo

func (m *QueryFeaturesResponse) GetList() []*share_message.AppPushMessage {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *QueryFeaturesResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type PlayerComplaintResponse struct {
	List                 []*share_message.PlayerComplaint `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                           `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *PlayerComplaintResponse) Reset()         { *m = PlayerComplaintResponse{} }
func (m *PlayerComplaintResponse) String() string { return proto.CompactTextString(m) }
func (*PlayerComplaintResponse) ProtoMessage()    {}
func (*PlayerComplaintResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{39}
}
func (m *PlayerComplaintResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerComplaintResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerComplaintResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerComplaintResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerComplaintResponse.Merge(m, src)
}
func (m *PlayerComplaintResponse) XXX_Size() int {
	return m.Size()
}
func (m *PlayerComplaintResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerComplaintResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerComplaintResponse proto.InternalMessageInfo

func (m *PlayerComplaintResponse) GetList() []*share_message.PlayerComplaint {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *PlayerComplaintResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//===================定义商城结构体开始================
type QueryShopItemResponse struct {
	List                 []*QueryShopItemObject `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                 `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *QueryShopItemResponse) Reset()         { *m = QueryShopItemResponse{} }
func (m *QueryShopItemResponse) String() string { return proto.CompactTextString(m) }
func (*QueryShopItemResponse) ProtoMessage()    {}
func (*QueryShopItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{40}
}
func (m *QueryShopItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShopItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShopItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShopItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShopItemResponse.Merge(m, src)
}
func (m *QueryShopItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryShopItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShopItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShopItemResponse proto.InternalMessageInfo

func (m *QueryShopItemResponse) GetList() []*QueryShopItemObject {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *QueryShopItemResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type QueryShopItemObject struct {
	ItemId               *int64   `protobuf:"varint,1,opt,name=ItemId" json:"ItemId,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	ItemTypeName         *string  `protobuf:"bytes,3,opt,name=ItemTypeName" json:"ItemTypeName,omitempty"`
	Price                *int32   `protobuf:"varint,4,opt,name=Price" json:"Price,omitempty"`
	StockCount           *int32   `protobuf:"varint,5,opt,name=StockCount" json:"StockCount,omitempty"`
	PlayerAccount        *string  `protobuf:"bytes,6,opt,name=PlayerAccount" json:"PlayerAccount,omitempty"`
	State                *int32   `protobuf:"varint,8,opt,name=State" json:"State,omitempty"`
	CreateTime           *int64   `protobuf:"varint,9,opt,name=CreateTime" json:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryShopItemObject) Reset()         { *m = QueryShopItemObject{} }
func (m *QueryShopItemObject) String() string { return proto.CompactTextString(m) }
func (*QueryShopItemObject) ProtoMessage()    {}
func (*QueryShopItemObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{41}
}
func (m *QueryShopItemObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShopItemObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShopItemObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShopItemObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShopItemObject.Merge(m, src)
}
func (m *QueryShopItemObject) XXX_Size() int {
	return m.Size()
}
func (m *QueryShopItemObject) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShopItemObject.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShopItemObject proto.InternalMessageInfo

func (m *QueryShopItemObject) GetItemId() int64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *QueryShopItemObject) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *QueryShopItemObject) GetItemTypeName() string {
	if m != nil && m.ItemTypeName != nil {
		return *m.ItemTypeName
	}
	return ""
}

func (m *QueryShopItemObject) GetPrice() int32 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *QueryShopItemObject) GetStockCount() int32 {
	if m != nil && m.StockCount != nil {
		return *m.StockCount
	}
	return 0
}

func (m *QueryShopItemObject) GetPlayerAccount() string {
	if m != nil && m.PlayerAccount != nil {
		return *m.PlayerAccount
	}
	return ""
}

func (m *QueryShopItemObject) GetState() int32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

func (m *QueryShopItemObject) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

type QueryShopItemRequest struct {
	BeginTimestamp       *int64   `protobuf:"varint,1,opt,name=BeginTimestamp" json:"BeginTimestamp,omitempty"`
	EndTimestamp         *int64   `protobuf:"varint,2,opt,name=EndTimestamp" json:"EndTimestamp,omitempty"`
	CurPage              *int32   `protobuf:"varint,3,req,name=CurPage" json:"CurPage,omitempty"`
	PageSize             *int32   `protobuf:"varint,4,req,name=PageSize" json:"PageSize,omitempty"`
	Keyword              *string  `protobuf:"bytes,6,opt,name=Keyword" json:"Keyword,omitempty"`
	Types                *int32   `protobuf:"varint,7,req,name=Types" json:"Types,omitempty"`
	Status               *int32   `protobuf:"varint,8,req,name=Status" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryShopItemRequest) Reset()         { *m = QueryShopItemRequest{} }
func (m *QueryShopItemRequest) String() string { return proto.CompactTextString(m) }
func (*QueryShopItemRequest) ProtoMessage()    {}
func (*QueryShopItemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{42}
}
func (m *QueryShopItemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShopItemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShopItemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShopItemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShopItemRequest.Merge(m, src)
}
func (m *QueryShopItemRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryShopItemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShopItemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShopItemRequest proto.InternalMessageInfo

func (m *QueryShopItemRequest) GetBeginTimestamp() int64 {
	if m != nil && m.BeginTimestamp != nil {
		return *m.BeginTimestamp
	}
	return 0
}

func (m *QueryShopItemRequest) GetEndTimestamp() int64 {
	if m != nil && m.EndTimestamp != nil {
		return *m.EndTimestamp
	}
	return 0
}

func (m *QueryShopItemRequest) GetCurPage() int32 {
	if m != nil && m.CurPage != nil {
		return *m.CurPage
	}
	return 0
}

func (m *QueryShopItemRequest) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *QueryShopItemRequest) GetKeyword() string {
	if m != nil && m.Keyword != nil {
		return *m.Keyword
	}
	return ""
}

func (m *QueryShopItemRequest) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *QueryShopItemRequest) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

type ShopItemFile struct {
	FileUrl              *string  `protobuf:"bytes,1,req,name=file_url" json:"file_url,omitempty"`
	FileType             *int32   `protobuf:"varint,2,req,name=file_type" json:"file_type,omitempty"`
	FileWidth            *string  `protobuf:"bytes,3,opt,name=file_width" json:"file_width,omitempty"`
	FileHeight           *string  `protobuf:"bytes,4,opt,name=file_height" json:"file_height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShopItemFile) Reset()         { *m = ShopItemFile{} }
func (m *ShopItemFile) String() string { return proto.CompactTextString(m) }
func (*ShopItemFile) ProtoMessage()    {}
func (*ShopItemFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{43}
}
func (m *ShopItemFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShopItemFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShopItemFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShopItemFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShopItemFile.Merge(m, src)
}
func (m *ShopItemFile) XXX_Size() int {
	return m.Size()
}
func (m *ShopItemFile) XXX_DiscardUnknown() {
	xxx_messageInfo_ShopItemFile.DiscardUnknown(m)
}

var xxx_messageInfo_ShopItemFile proto.InternalMessageInfo

func (m *ShopItemFile) GetFileUrl() string {
	if m != nil && m.FileUrl != nil {
		return *m.FileUrl
	}
	return ""
}

func (m *ShopItemFile) GetFileType() int32 {
	if m != nil && m.FileType != nil {
		return *m.FileType
	}
	return 0
}

func (m *ShopItemFile) GetFileWidth() string {
	if m != nil && m.FileWidth != nil {
		return *m.FileWidth
	}
	return ""
}

func (m *ShopItemFile) GetFileHeight() string {
	if m != nil && m.FileHeight != nil {
		return *m.FileHeight
	}
	return ""
}

type QueryShopItemDetailResponse struct {
	ItemId               *int64          `protobuf:"varint,1,opt,name=ItemId" json:"ItemId,omitempty"`
	Name                 *string         `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	ItemFiles            []*ShopItemFile `protobuf:"bytes,3,rep,name=ItemFiles" json:"ItemFiles,omitempty"`
	PlayerAccount        *string         `protobuf:"bytes,4,opt,name=PlayerAccount" json:"PlayerAccount,omitempty"`
	Price                *int32          `protobuf:"varint,5,opt,name=Price" json:"Price,omitempty"`
	ItemTypeName         *string         `protobuf:"bytes,6,opt,name=ItemTypeName" json:"ItemTypeName,omitempty"`
	CategoryLabel        *string         `protobuf:"bytes,7,opt,name=CategoryLabel" json:"CategoryLabel,omitempty"`
	CommonUseLabel       *string         `protobuf:"bytes,8,opt,name=CommonUseLabel" json:"CommonUseLabel,omitempty"`
	GoodCommentRate      *int32          `protobuf:"varint,9,opt,name=goodCommentRate" json:"goodCommentRate,omitempty"`
	StockCount           *int32          `protobuf:"varint,10,opt,name=StockCount" json:"StockCount,omitempty"`
	PaymentCount         *int32          `protobuf:"varint,11,opt,name=PaymentCount" json:"PaymentCount,omitempty"`
	PageViews            *int32          `protobuf:"varint,12,opt,name=PageViews" json:"PageViews,omitempty"`
	SellItemCount        *int32          `protobuf:"varint,13,opt,name=SellItemCount" json:"SellItemCount,omitempty"`
	CreateTime           *int64          `protobuf:"varint,14,opt,name=CreateTime" json:"CreateTime,omitempty"`
	SoldOutTime          *int64          `protobuf:"varint,15,opt,name=SoldOutTime" json:"SoldOutTime,omitempty"`
	State                *int32          `protobuf:"varint,16,opt,name=State" json:"State,omitempty"`
	Title                *string         `protobuf:"bytes,17,opt,name=Title" json:"Title,omitempty"`
	PointCardName        *string         `protobuf:"bytes,18,opt,name=PointCardName" json:"PointCardName,omitempty"`
	ItemType             *int32          `protobuf:"varint,19,opt,name=ItemType" json:"ItemType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *QueryShopItemDetailResponse) Reset()         { *m = QueryShopItemDetailResponse{} }
func (m *QueryShopItemDetailResponse) String() string { return proto.CompactTextString(m) }
func (*QueryShopItemDetailResponse) ProtoMessage()    {}
func (*QueryShopItemDetailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{44}
}
func (m *QueryShopItemDetailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShopItemDetailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShopItemDetailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShopItemDetailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShopItemDetailResponse.Merge(m, src)
}
func (m *QueryShopItemDetailResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryShopItemDetailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShopItemDetailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShopItemDetailResponse proto.InternalMessageInfo

func (m *QueryShopItemDetailResponse) GetItemId() int64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *QueryShopItemDetailResponse) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *QueryShopItemDetailResponse) GetItemFiles() []*ShopItemFile {
	if m != nil {
		return m.ItemFiles
	}
	return nil
}

func (m *QueryShopItemDetailResponse) GetPlayerAccount() string {
	if m != nil && m.PlayerAccount != nil {
		return *m.PlayerAccount
	}
	return ""
}

func (m *QueryShopItemDetailResponse) GetPrice() int32 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *QueryShopItemDetailResponse) GetItemTypeName() string {
	if m != nil && m.ItemTypeName != nil {
		return *m.ItemTypeName
	}
	return ""
}

func (m *QueryShopItemDetailResponse) GetCategoryLabel() string {
	if m != nil && m.CategoryLabel != nil {
		return *m.CategoryLabel
	}
	return ""
}

func (m *QueryShopItemDetailResponse) GetCommonUseLabel() string {
	if m != nil && m.CommonUseLabel != nil {
		return *m.CommonUseLabel
	}
	return ""
}

func (m *QueryShopItemDetailResponse) GetGoodCommentRate() int32 {
	if m != nil && m.GoodCommentRate != nil {
		return *m.GoodCommentRate
	}
	return 0
}

func (m *QueryShopItemDetailResponse) GetStockCount() int32 {
	if m != nil && m.StockCount != nil {
		return *m.StockCount
	}
	return 0
}

func (m *QueryShopItemDetailResponse) GetPaymentCount() int32 {
	if m != nil && m.PaymentCount != nil {
		return *m.PaymentCount
	}
	return 0
}

func (m *QueryShopItemDetailResponse) GetPageViews() int32 {
	if m != nil && m.PageViews != nil {
		return *m.PageViews
	}
	return 0
}

func (m *QueryShopItemDetailResponse) GetSellItemCount() int32 {
	if m != nil && m.SellItemCount != nil {
		return *m.SellItemCount
	}
	return 0
}

func (m *QueryShopItemDetailResponse) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *QueryShopItemDetailResponse) GetSoldOutTime() int64 {
	if m != nil && m.SoldOutTime != nil {
		return *m.SoldOutTime
	}
	return 0
}

func (m *QueryShopItemDetailResponse) GetState() int32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

func (m *QueryShopItemDetailResponse) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *QueryShopItemDetailResponse) GetPointCardName() string {
	if m != nil && m.PointCardName != nil {
		return *m.PointCardName
	}
	return ""
}

func (m *QueryShopItemDetailResponse) GetItemType() int32 {
	if m != nil && m.ItemType != nil {
		return *m.ItemType
	}
	return 0
}

type ShopItemType struct {
	ItemType             *int32   `protobuf:"varint,1,opt,name=ItemType" json:"ItemType,omitempty"`
	TypeName             *string  `protobuf:"bytes,2,opt,name=TypeName" json:"TypeName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShopItemType) Reset()         { *m = ShopItemType{} }
func (m *ShopItemType) String() string { return proto.CompactTextString(m) }
func (*ShopItemType) ProtoMessage()    {}
func (*ShopItemType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{45}
}
func (m *ShopItemType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShopItemType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShopItemType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShopItemType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShopItemType.Merge(m, src)
}
func (m *ShopItemType) XXX_Size() int {
	return m.Size()
}
func (m *ShopItemType) XXX_DiscardUnknown() {
	xxx_messageInfo_ShopItemType.DiscardUnknown(m)
}

var xxx_messageInfo_ShopItemType proto.InternalMessageInfo

func (m *ShopItemType) GetItemType() int32 {
	if m != nil && m.ItemType != nil {
		return *m.ItemType
	}
	return 0
}

func (m *ShopItemType) GetTypeName() string {
	if m != nil && m.TypeName != nil {
		return *m.TypeName
	}
	return ""
}

type ShopItemCategory struct {
	ItemCategory         *string  `protobuf:"bytes,1,opt,name=ItemCategory" json:"ItemCategory,omitempty"`
	CategoryName         *string  `protobuf:"bytes,2,opt,name=CategoryName" json:"CategoryName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShopItemCategory) Reset()         { *m = ShopItemCategory{} }
func (m *ShopItemCategory) String() string { return proto.CompactTextString(m) }
func (*ShopItemCategory) ProtoMessage()    {}
func (*ShopItemCategory) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{46}
}
func (m *ShopItemCategory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShopItemCategory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShopItemCategory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShopItemCategory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShopItemCategory.Merge(m, src)
}
func (m *ShopItemCategory) XXX_Size() int {
	return m.Size()
}
func (m *ShopItemCategory) XXX_DiscardUnknown() {
	xxx_messageInfo_ShopItemCategory.DiscardUnknown(m)
}

var xxx_messageInfo_ShopItemCategory proto.InternalMessageInfo

func (m *ShopItemCategory) GetItemCategory() string {
	if m != nil && m.ItemCategory != nil {
		return *m.ItemCategory
	}
	return ""
}

func (m *ShopItemCategory) GetCategoryName() string {
	if m != nil && m.CategoryName != nil {
		return *m.CategoryName
	}
	return ""
}

type GetShopItemTypeDropDownResponse struct {
	DropDownItemType     []*KeyValueTag `protobuf:"bytes,1,rep,name=DropDownItemType" json:"DropDownItemType,omitempty"`
	DropDownItemCategory []*KeyValue    `protobuf:"bytes,2,rep,name=DropDownItemCategory" json:"DropDownItemCategory,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetShopItemTypeDropDownResponse) Reset()         { *m = GetShopItemTypeDropDownResponse{} }
func (m *GetShopItemTypeDropDownResponse) String() string { return proto.CompactTextString(m) }
func (*GetShopItemTypeDropDownResponse) ProtoMessage()    {}
func (*GetShopItemTypeDropDownResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{47}
}
func (m *GetShopItemTypeDropDownResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetShopItemTypeDropDownResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetShopItemTypeDropDownResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetShopItemTypeDropDownResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetShopItemTypeDropDownResponse.Merge(m, src)
}
func (m *GetShopItemTypeDropDownResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetShopItemTypeDropDownResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetShopItemTypeDropDownResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetShopItemTypeDropDownResponse proto.InternalMessageInfo

func (m *GetShopItemTypeDropDownResponse) GetDropDownItemType() []*KeyValueTag {
	if m != nil {
		return m.DropDownItemType
	}
	return nil
}

func (m *GetShopItemTypeDropDownResponse) GetDropDownItemCategory() []*KeyValue {
	if m != nil {
		return m.DropDownItemCategory
	}
	return nil
}

type QueryShopCommentRequest struct {
	ItemId               *int64   `protobuf:"varint,1,req,name=ItemId" json:"ItemId,omitempty"`
	BeginTimestamp       *int64   `protobuf:"varint,2,opt,name=BeginTimestamp" json:"BeginTimestamp,omitempty"`
	EndTimestamp         *int64   `protobuf:"varint,3,opt,name=EndTimestamp" json:"EndTimestamp,omitempty"`
	CurPage              *int32   `protobuf:"varint,4,req,name=CurPage" json:"CurPage,omitempty"`
	PageSize             *int32   `protobuf:"varint,5,req,name=PageSize" json:"PageSize,omitempty"`
	ComType              *int32   `protobuf:"varint,6,req,name=ComType" json:"ComType,omitempty"`
	Nickname             *string  `protobuf:"bytes,7,opt,name=Nickname" json:"Nickname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryShopCommentRequest) Reset()         { *m = QueryShopCommentRequest{} }
func (m *QueryShopCommentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryShopCommentRequest) ProtoMessage()    {}
func (*QueryShopCommentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{48}
}
func (m *QueryShopCommentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShopCommentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShopCommentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShopCommentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShopCommentRequest.Merge(m, src)
}
func (m *QueryShopCommentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryShopCommentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShopCommentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShopCommentRequest proto.InternalMessageInfo

func (m *QueryShopCommentRequest) GetItemId() int64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *QueryShopCommentRequest) GetBeginTimestamp() int64 {
	if m != nil && m.BeginTimestamp != nil {
		return *m.BeginTimestamp
	}
	return 0
}

func (m *QueryShopCommentRequest) GetEndTimestamp() int64 {
	if m != nil && m.EndTimestamp != nil {
		return *m.EndTimestamp
	}
	return 0
}

func (m *QueryShopCommentRequest) GetCurPage() int32 {
	if m != nil && m.CurPage != nil {
		return *m.CurPage
	}
	return 0
}

func (m *QueryShopCommentRequest) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *QueryShopCommentRequest) GetComType() int32 {
	if m != nil && m.ComType != nil {
		return *m.ComType
	}
	return 0
}

func (m *QueryShopCommentRequest) GetNickname() string {
	if m != nil && m.Nickname != nil {
		return *m.Nickname
	}
	return ""
}

type QueryShopCommentResponse struct {
	List                 []*share_message.TableItemComment `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                            `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *QueryShopCommentResponse) Reset()         { *m = QueryShopCommentResponse{} }
func (m *QueryShopCommentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryShopCommentResponse) ProtoMessage()    {}
func (*QueryShopCommentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{49}
}
func (m *QueryShopCommentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShopCommentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShopCommentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShopCommentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShopCommentResponse.Merge(m, src)
}
func (m *QueryShopCommentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryShopCommentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShopCommentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShopCommentResponse proto.InternalMessageInfo

func (m *QueryShopCommentResponse) GetList() []*share_message.TableItemComment {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *QueryShopCommentResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type EditShopCommentRequest struct {
	CommentId            *int64   `protobuf:"varint,1,req,name=CommentId" json:"CommentId,omitempty"`
	FakeLikeCount        *int32   `protobuf:"varint,2,opt,name=FakeLikeCount" json:"FakeLikeCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EditShopCommentRequest) Reset()         { *m = EditShopCommentRequest{} }
func (m *EditShopCommentRequest) String() string { return proto.CompactTextString(m) }
func (*EditShopCommentRequest) ProtoMessage()    {}
func (*EditShopCommentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{50}
}
func (m *EditShopCommentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EditShopCommentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EditShopCommentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EditShopCommentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditShopCommentRequest.Merge(m, src)
}
func (m *EditShopCommentRequest) XXX_Size() int {
	return m.Size()
}
func (m *EditShopCommentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EditShopCommentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EditShopCommentRequest proto.InternalMessageInfo

func (m *EditShopCommentRequest) GetCommentId() int64 {
	if m != nil && m.CommentId != nil {
		return *m.CommentId
	}
	return 0
}

func (m *EditShopCommentRequest) GetFakeLikeCount() int32 {
	if m != nil && m.FakeLikeCount != nil {
		return *m.FakeLikeCount
	}
	return 0
}

type QueryShopOrderRequest struct {
	TimeTypes            *int32   `protobuf:"varint,1,req,name=TimeTypes" json:"TimeTypes,omitempty"`
	BeginTimestamp       *int64   `protobuf:"varint,2,opt,name=BeginTimestamp" json:"BeginTimestamp,omitempty"`
	EndTimestamp         *int64   `protobuf:"varint,3,opt,name=EndTimestamp" json:"EndTimestamp,omitempty"`
	CurPage              *int32   `protobuf:"varint,4,req,name=CurPage" json:"CurPage,omitempty"`
	PageSize             *int32   `protobuf:"varint,5,req,name=PageSize" json:"PageSize,omitempty"`
	Status               *int32   `protobuf:"varint,6,req,name=Status" json:"Status,omitempty"`
	Types                *int32   `protobuf:"varint,7,req,name=Types" json:"Types,omitempty"`
	Keyword              *string  `protobuf:"bytes,8,opt,name=Keyword" json:"Keyword,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryShopOrderRequest) Reset()         { *m = QueryShopOrderRequest{} }
func (m *QueryShopOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryShopOrderRequest) ProtoMessage()    {}
func (*QueryShopOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{51}
}
func (m *QueryShopOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShopOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShopOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShopOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShopOrderRequest.Merge(m, src)
}
func (m *QueryShopOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryShopOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShopOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShopOrderRequest proto.InternalMessageInfo

func (m *QueryShopOrderRequest) GetTimeTypes() int32 {
	if m != nil && m.TimeTypes != nil {
		return *m.TimeTypes
	}
	return 0
}

func (m *QueryShopOrderRequest) GetBeginTimestamp() int64 {
	if m != nil && m.BeginTimestamp != nil {
		return *m.BeginTimestamp
	}
	return 0
}

func (m *QueryShopOrderRequest) GetEndTimestamp() int64 {
	if m != nil && m.EndTimestamp != nil {
		return *m.EndTimestamp
	}
	return 0
}

func (m *QueryShopOrderRequest) GetCurPage() int32 {
	if m != nil && m.CurPage != nil {
		return *m.CurPage
	}
	return 0
}

func (m *QueryShopOrderRequest) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *QueryShopOrderRequest) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *QueryShopOrderRequest) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *QueryShopOrderRequest) GetKeyword() string {
	if m != nil && m.Keyword != nil {
		return *m.Keyword
	}
	return ""
}

type QueryShopOrderResponse struct {
	List                 []*share_message.TableShopOrder `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                          `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *QueryShopOrderResponse) Reset()         { *m = QueryShopOrderResponse{} }
func (m *QueryShopOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryShopOrderResponse) ProtoMessage()    {}
func (*QueryShopOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{52}
}
func (m *QueryShopOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShopOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShopOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShopOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShopOrderResponse.Merge(m, src)
}
func (m *QueryShopOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryShopOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShopOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShopOrderResponse proto.InternalMessageInfo

func (m *QueryShopOrderResponse) GetList() []*share_message.TableShopOrder {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *QueryShopOrderResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type CancelShopOrderRequest struct {
	OrderId              *int64   `protobuf:"varint,1,req,name=OrderId" json:"OrderId,omitempty"`
	CancelReason         *string  `protobuf:"bytes,2,opt,name=CancelReason" json:"CancelReason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelShopOrderRequest) Reset()         { *m = CancelShopOrderRequest{} }
func (m *CancelShopOrderRequest) String() string { return proto.CompactTextString(m) }
func (*CancelShopOrderRequest) ProtoMessage()    {}
func (*CancelShopOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{53}
}
func (m *CancelShopOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelShopOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelShopOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelShopOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelShopOrderRequest.Merge(m, src)
}
func (m *CancelShopOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *CancelShopOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelShopOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelShopOrderRequest proto.InternalMessageInfo

func (m *CancelShopOrderRequest) GetOrderId() int64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *CancelShopOrderRequest) GetCancelReason() string {
	if m != nil && m.CancelReason != nil {
		return *m.CancelReason
	}
	return ""
}

type SendShopOrderRequest struct {
	OrderId              *int64   `protobuf:"varint,1,req,name=OrderId" json:"OrderId,omitempty"`
	ExpressCom           *string  `protobuf:"bytes,2,req,name=ExpressCom" json:"ExpressCom,omitempty"`
	ExpressCode          *string  `protobuf:"bytes,3,req,name=ExpressCode" json:"ExpressCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendShopOrderRequest) Reset()         { *m = SendShopOrderRequest{} }
func (m *SendShopOrderRequest) String() string { return proto.CompactTextString(m) }
func (*SendShopOrderRequest) ProtoMessage()    {}
func (*SendShopOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{54}
}
func (m *SendShopOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendShopOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendShopOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendShopOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendShopOrderRequest.Merge(m, src)
}
func (m *SendShopOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *SendShopOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendShopOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendShopOrderRequest proto.InternalMessageInfo

func (m *SendShopOrderRequest) GetOrderId() int64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *SendShopOrderRequest) GetExpressCom() string {
	if m != nil && m.ExpressCom != nil {
		return *m.ExpressCom
	}
	return ""
}

func (m *SendShopOrderRequest) GetExpressCode() string {
	if m != nil && m.ExpressCode != nil {
		return *m.ExpressCode
	}
	return ""
}

type ShopOrderExpressCom struct {
	Code                 *string  `protobuf:"bytes,1,opt,name=Code" json:"Code,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShopOrderExpressCom) Reset()         { *m = ShopOrderExpressCom{} }
func (m *ShopOrderExpressCom) String() string { return proto.CompactTextString(m) }
func (*ShopOrderExpressCom) ProtoMessage()    {}
func (*ShopOrderExpressCom) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{55}
}
func (m *ShopOrderExpressCom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShopOrderExpressCom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShopOrderExpressCom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShopOrderExpressCom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShopOrderExpressCom.Merge(m, src)
}
func (m *ShopOrderExpressCom) XXX_Size() int {
	return m.Size()
}
func (m *ShopOrderExpressCom) XXX_DiscardUnknown() {
	xxx_messageInfo_ShopOrderExpressCom.DiscardUnknown(m)
}

var xxx_messageInfo_ShopOrderExpressCom proto.InternalMessageInfo

func (m *ShopOrderExpressCom) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

func (m *ShopOrderExpressCom) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type QueryShopOrderExpressBody struct {
	DateTime             *string  `protobuf:"bytes,1,opt,name=dateTime" json:"dateTime,omitempty"`
	Remark               *string  `protobuf:"bytes,2,opt,name=remark" json:"remark,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryShopOrderExpressBody) Reset()         { *m = QueryShopOrderExpressBody{} }
func (m *QueryShopOrderExpressBody) String() string { return proto.CompactTextString(m) }
func (*QueryShopOrderExpressBody) ProtoMessage()    {}
func (*QueryShopOrderExpressBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{56}
}
func (m *QueryShopOrderExpressBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShopOrderExpressBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShopOrderExpressBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShopOrderExpressBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShopOrderExpressBody.Merge(m, src)
}
func (m *QueryShopOrderExpressBody) XXX_Size() int {
	return m.Size()
}
func (m *QueryShopOrderExpressBody) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShopOrderExpressBody.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShopOrderExpressBody proto.InternalMessageInfo

func (m *QueryShopOrderExpressBody) GetDateTime() string {
	if m != nil && m.DateTime != nil {
		return *m.DateTime
	}
	return ""
}

func (m *QueryShopOrderExpressBody) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

type QueryShopOrderExpressResponse struct {
	ExpressInfos         []*QueryShopOrderExpressBody `protobuf:"bytes,1,rep,name=expressInfos" json:"expressInfos,omitempty"`
	ExpressPhone         *string                      `protobuf:"bytes,2,opt,name=expressPhone" json:"expressPhone,omitempty"`
	ExpressName          *string                      `protobuf:"bytes,3,opt,name=expressName" json:"expressName,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *QueryShopOrderExpressResponse) Reset()         { *m = QueryShopOrderExpressResponse{} }
func (m *QueryShopOrderExpressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryShopOrderExpressResponse) ProtoMessage()    {}
func (*QueryShopOrderExpressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{57}
}
func (m *QueryShopOrderExpressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShopOrderExpressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShopOrderExpressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShopOrderExpressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShopOrderExpressResponse.Merge(m, src)
}
func (m *QueryShopOrderExpressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryShopOrderExpressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShopOrderExpressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShopOrderExpressResponse proto.InternalMessageInfo

func (m *QueryShopOrderExpressResponse) GetExpressInfos() []*QueryShopOrderExpressBody {
	if m != nil {
		return m.ExpressInfos
	}
	return nil
}

func (m *QueryShopOrderExpressResponse) GetExpressPhone() string {
	if m != nil && m.ExpressPhone != nil {
		return *m.ExpressPhone
	}
	return ""
}

func (m *QueryShopOrderExpressResponse) GetExpressName() string {
	if m != nil && m.ExpressName != nil {
		return *m.ExpressName
	}
	return ""
}

type GetExpressComDropDownResponse struct {
	DropDownExpressCom   []*ShopOrderExpressCom `protobuf:"bytes,1,rep,name=DropDownExpressCom" json:"DropDownExpressCom,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetExpressComDropDownResponse) Reset()         { *m = GetExpressComDropDownResponse{} }
func (m *GetExpressComDropDownResponse) String() string { return proto.CompactTextString(m) }
func (*GetExpressComDropDownResponse) ProtoMessage()    {}
func (*GetExpressComDropDownResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{58}
}
func (m *GetExpressComDropDownResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetExpressComDropDownResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetExpressComDropDownResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetExpressComDropDownResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetExpressComDropDownResponse.Merge(m, src)
}
func (m *GetExpressComDropDownResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetExpressComDropDownResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetExpressComDropDownResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetExpressComDropDownResponse proto.InternalMessageInfo

func (m *GetExpressComDropDownResponse) GetDropDownExpressCom() []*ShopOrderExpressCom {
	if m != nil {
		return m.DropDownExpressCom
	}
	return nil
}

type ReleaseEditShopItemObject struct {
	Name              *string         `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	PlayerAccount     *string         `protobuf:"bytes,2,opt,name=PlayerAccount" json:"PlayerAccount,omitempty"`
	ItemType          *int32          `protobuf:"varint,3,opt,name=ItemType" json:"ItemType,omitempty"`
	ItemCategory      *string         `protobuf:"bytes,4,opt,name=ItemCategory" json:"ItemCategory,omitempty"`
	CommonUseLabel    []string        `protobuf:"bytes,5,rep,name=CommonUseLabel" json:"CommonUseLabel,omitempty"`
	Price             *int32          `protobuf:"varint,6,opt,name=Price" json:"Price,omitempty"`
	StockCount        *int32          `protobuf:"varint,7,opt,name=StockCount" json:"StockCount,omitempty"`
	UserName          *string         `protobuf:"bytes,8,opt,name=UserName" json:"UserName,omitempty"`
	Phone             *string         `protobuf:"bytes,9,opt,name=Phone" json:"Phone,omitempty"`
	Address           *string         `protobuf:"bytes,10,opt,name=Address" json:"Address,omitempty"`
	DetailAddress     *string         `protobuf:"bytes,11,opt,name=DetailAddress" json:"DetailAddress,omitempty"`
	FakePaymentCount  *int32          `protobuf:"varint,12,opt,name=FakePaymentCount" json:"FakePaymentCount,omitempty"`
	FakePageViews     *int32          `protobuf:"varint,13,opt,name=FakePageViews" json:"FakePageViews,omitempty"`
	FakeSellItemCount *int32          `protobuf:"varint,14,opt,name=FakeSellItemCount" json:"FakeSellItemCount,omitempty"`
	Title             *string         `protobuf:"bytes,15,opt,name=Title" json:"Title,omitempty"`
	ItemFiles         []*ShopItemFile `protobuf:"bytes,16,rep,name=ItemFiles" json:"ItemFiles,omitempty"`
	State             *int32          `protobuf:"varint,17,opt,name=State" json:"State,omitempty"`
	//===以上是发布商品和修改商品共通的数据内容
	//===以下是修改商品需要的数据内容
	FakeGoodCommentRate *int32 `protobuf:"varint,18,opt,name=FakeGoodCommentRate" json:"FakeGoodCommentRate,omitempty"`
	RealPaymentCount    *int32 `protobuf:"varint,19,opt,name=RealPaymentCount" json:"RealPaymentCount,omitempty"`
	RealPageViews       *int32 `protobuf:"varint,20,opt,name=RealPageViews" json:"RealPageViews,omitempty"`
	RealSellItemCount   *int32 `protobuf:"varint,21,opt,name=RealSellItemCount" json:"RealSellItemCount,omitempty"`
	RealGoodCommentRate *int32 `protobuf:"varint,22,opt,name=RealGoodCommentRate" json:"RealGoodCommentRate,omitempty"`
	ItemId              *int64 `protobuf:"varint,23,opt,name=ItemId" json:"ItemId,omitempty"`
	//点卡的时候新增项目(点卡45的时候才显示)
	PointCardName        *string  `protobuf:"bytes,24,opt,name=PointCardName" json:"PointCardName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseEditShopItemObject) Reset()         { *m = ReleaseEditShopItemObject{} }
func (m *ReleaseEditShopItemObject) String() string { return proto.CompactTextString(m) }
func (*ReleaseEditShopItemObject) ProtoMessage()    {}
func (*ReleaseEditShopItemObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{59}
}
func (m *ReleaseEditShopItemObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReleaseEditShopItemObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReleaseEditShopItemObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReleaseEditShopItemObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseEditShopItemObject.Merge(m, src)
}
func (m *ReleaseEditShopItemObject) XXX_Size() int {
	return m.Size()
}
func (m *ReleaseEditShopItemObject) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseEditShopItemObject.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseEditShopItemObject proto.InternalMessageInfo

func (m *ReleaseEditShopItemObject) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ReleaseEditShopItemObject) GetPlayerAccount() string {
	if m != nil && m.PlayerAccount != nil {
		return *m.PlayerAccount
	}
	return ""
}

func (m *ReleaseEditShopItemObject) GetItemType() int32 {
	if m != nil && m.ItemType != nil {
		return *m.ItemType
	}
	return 0
}

func (m *ReleaseEditShopItemObject) GetItemCategory() string {
	if m != nil && m.ItemCategory != nil {
		return *m.ItemCategory
	}
	return ""
}

func (m *ReleaseEditShopItemObject) GetCommonUseLabel() []string {
	if m != nil {
		return m.CommonUseLabel
	}
	return nil
}

func (m *ReleaseEditShopItemObject) GetPrice() int32 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *ReleaseEditShopItemObject) GetStockCount() int32 {
	if m != nil && m.StockCount != nil {
		return *m.StockCount
	}
	return 0
}

func (m *ReleaseEditShopItemObject) GetUserName() string {
	if m != nil && m.UserName != nil {
		return *m.UserName
	}
	return ""
}

func (m *ReleaseEditShopItemObject) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *ReleaseEditShopItemObject) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *ReleaseEditShopItemObject) GetDetailAddress() string {
	if m != nil && m.DetailAddress != nil {
		return *m.DetailAddress
	}
	return ""
}

func (m *ReleaseEditShopItemObject) GetFakePaymentCount() int32 {
	if m != nil && m.FakePaymentCount != nil {
		return *m.FakePaymentCount
	}
	return 0
}

func (m *ReleaseEditShopItemObject) GetFakePageViews() int32 {
	if m != nil && m.FakePageViews != nil {
		return *m.FakePageViews
	}
	return 0
}

func (m *ReleaseEditShopItemObject) GetFakeSellItemCount() int32 {
	if m != nil && m.FakeSellItemCount != nil {
		return *m.FakeSellItemCount
	}
	return 0
}

func (m *ReleaseEditShopItemObject) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *ReleaseEditShopItemObject) GetItemFiles() []*ShopItemFile {
	if m != nil {
		return m.ItemFiles
	}
	return nil
}

func (m *ReleaseEditShopItemObject) GetState() int32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

func (m *ReleaseEditShopItemObject) GetFakeGoodCommentRate() int32 {
	if m != nil && m.FakeGoodCommentRate != nil {
		return *m.FakeGoodCommentRate
	}
	return 0
}

func (m *ReleaseEditShopItemObject) GetRealPaymentCount() int32 {
	if m != nil && m.RealPaymentCount != nil {
		return *m.RealPaymentCount
	}
	return 0
}

func (m *ReleaseEditShopItemObject) GetRealPageViews() int32 {
	if m != nil && m.RealPageViews != nil {
		return *m.RealPageViews
	}
	return 0
}

func (m *ReleaseEditShopItemObject) GetRealSellItemCount() int32 {
	if m != nil && m.RealSellItemCount != nil {
		return *m.RealSellItemCount
	}
	return 0
}

func (m *ReleaseEditShopItemObject) GetRealGoodCommentRate() int32 {
	if m != nil && m.RealGoodCommentRate != nil {
		return *m.RealGoodCommentRate
	}
	return 0
}

func (m *ReleaseEditShopItemObject) GetItemId() int64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *ReleaseEditShopItemObject) GetPointCardName() string {
	if m != nil && m.PointCardName != nil {
		return *m.PointCardName
	}
	return ""
}

type QueryShopReceiveAddressResponse struct {
	List                 []*share_message.TableReceiveAddress `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                               `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *QueryShopReceiveAddressResponse) Reset()         { *m = QueryShopReceiveAddressResponse{} }
func (m *QueryShopReceiveAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryShopReceiveAddressResponse) ProtoMessage()    {}
func (*QueryShopReceiveAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{60}
}
func (m *QueryShopReceiveAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShopReceiveAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShopReceiveAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShopReceiveAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShopReceiveAddressResponse.Merge(m, src)
}
func (m *QueryShopReceiveAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryShopReceiveAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShopReceiveAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShopReceiveAddressResponse proto.InternalMessageInfo

func (m *QueryShopReceiveAddressResponse) GetList() []*share_message.TableReceiveAddress {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *QueryShopReceiveAddressResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type QueryShopDeliverAddressResponse struct {
	List                 []*share_message.TableDeliverAddress `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                               `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *QueryShopDeliverAddressResponse) Reset()         { *m = QueryShopDeliverAddressResponse{} }
func (m *QueryShopDeliverAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryShopDeliverAddressResponse) ProtoMessage()    {}
func (*QueryShopDeliverAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{61}
}
func (m *QueryShopDeliverAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShopDeliverAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShopDeliverAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShopDeliverAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShopDeliverAddressResponse.Merge(m, src)
}
func (m *QueryShopDeliverAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryShopDeliverAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShopDeliverAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShopDeliverAddressResponse proto.InternalMessageInfo

func (m *QueryShopDeliverAddressResponse) GetList() []*share_message.TableDeliverAddress {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *QueryShopDeliverAddressResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//导入用点卡结构体
type ShopPointCardObject struct {
	CardName             *string  `protobuf:"bytes,1,opt,name=CardName" json:"CardName,omitempty"`
	CardNo               *string  `protobuf:"bytes,2,opt,name=CardNo" json:"CardNo,omitempty"`
	CardPassword         *string  `protobuf:"bytes,3,opt,name=CardPassword" json:"CardPassword,omitempty"`
	SellerAccount        *string  `protobuf:"bytes,4,opt,name=SellerAccount" json:"SellerAccount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShopPointCardObject) Reset()         { *m = ShopPointCardObject{} }
func (m *ShopPointCardObject) String() string { return proto.CompactTextString(m) }
func (*ShopPointCardObject) ProtoMessage()    {}
func (*ShopPointCardObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{62}
}
func (m *ShopPointCardObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShopPointCardObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShopPointCardObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShopPointCardObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShopPointCardObject.Merge(m, src)
}
func (m *ShopPointCardObject) XXX_Size() int {
	return m.Size()
}
func (m *ShopPointCardObject) XXX_DiscardUnknown() {
	xxx_messageInfo_ShopPointCardObject.DiscardUnknown(m)
}

var xxx_messageInfo_ShopPointCardObject proto.InternalMessageInfo

func (m *ShopPointCardObject) GetCardName() string {
	if m != nil && m.CardName != nil {
		return *m.CardName
	}
	return ""
}

func (m *ShopPointCardObject) GetCardNo() string {
	if m != nil && m.CardNo != nil {
		return *m.CardNo
	}
	return ""
}

func (m *ShopPointCardObject) GetCardPassword() string {
	if m != nil && m.CardPassword != nil {
		return *m.CardPassword
	}
	return ""
}

func (m *ShopPointCardObject) GetSellerAccount() string {
	if m != nil && m.SellerAccount != nil {
		return *m.SellerAccount
	}
	return ""
}

//点卡表导入请求
type ImportShopPointCardRequest struct {
	PointCardList        []*ShopPointCardObject `protobuf:"bytes,1,rep,name=PointCardList" json:"PointCardList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ImportShopPointCardRequest) Reset()         { *m = ImportShopPointCardRequest{} }
func (m *ImportShopPointCardRequest) String() string { return proto.CompactTextString(m) }
func (*ImportShopPointCardRequest) ProtoMessage()    {}
func (*ImportShopPointCardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{63}
}
func (m *ImportShopPointCardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImportShopPointCardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImportShopPointCardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImportShopPointCardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportShopPointCardRequest.Merge(m, src)
}
func (m *ImportShopPointCardRequest) XXX_Size() int {
	return m.Size()
}
func (m *ImportShopPointCardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportShopPointCardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImportShopPointCardRequest proto.InternalMessageInfo

func (m *ImportShopPointCardRequest) GetPointCardList() []*ShopPointCardObject {
	if m != nil {
		return m.PointCardList
	}
	return nil
}

//点卡表导入响应
type ImportShopPointCardResponse struct {
	Result               *int32   `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Msg                  []string `protobuf:"bytes,2,rep,name=msg" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImportShopPointCardResponse) Reset()         { *m = ImportShopPointCardResponse{} }
func (m *ImportShopPointCardResponse) String() string { return proto.CompactTextString(m) }
func (*ImportShopPointCardResponse) ProtoMessage()    {}
func (*ImportShopPointCardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{64}
}
func (m *ImportShopPointCardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImportShopPointCardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImportShopPointCardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImportShopPointCardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportShopPointCardResponse.Merge(m, src)
}
func (m *ImportShopPointCardResponse) XXX_Size() int {
	return m.Size()
}
func (m *ImportShopPointCardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportShopPointCardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImportShopPointCardResponse proto.InternalMessageInfo

func (m *ImportShopPointCardResponse) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *ImportShopPointCardResponse) GetMsg() []string {
	if m != nil {
		return m.Msg
	}
	return nil
}

type QueryShopPointCardRequest struct {
	CurPage              *int32   `protobuf:"varint,1,req,name=CurPage" json:"CurPage,omitempty"`
	PageSize             *int32   `protobuf:"varint,2,req,name=PageSize" json:"PageSize,omitempty"`
	Status               *int32   `protobuf:"varint,3,req,name=Status" json:"Status,omitempty"`
	Types                *int32   `protobuf:"varint,4,req,name=Types" json:"Types,omitempty"`
	Keyword              *string  `protobuf:"bytes,5,opt,name=Keyword" json:"Keyword,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryShopPointCardRequest) Reset()         { *m = QueryShopPointCardRequest{} }
func (m *QueryShopPointCardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryShopPointCardRequest) ProtoMessage()    {}
func (*QueryShopPointCardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{65}
}
func (m *QueryShopPointCardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShopPointCardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShopPointCardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShopPointCardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShopPointCardRequest.Merge(m, src)
}
func (m *QueryShopPointCardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryShopPointCardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShopPointCardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShopPointCardRequest proto.InternalMessageInfo

func (m *QueryShopPointCardRequest) GetCurPage() int32 {
	if m != nil && m.CurPage != nil {
		return *m.CurPage
	}
	return 0
}

func (m *QueryShopPointCardRequest) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *QueryShopPointCardRequest) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *QueryShopPointCardRequest) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *QueryShopPointCardRequest) GetKeyword() string {
	if m != nil && m.Keyword != nil {
		return *m.Keyword
	}
	return ""
}

//查询返回用点卡结构体(不直接用表返回是为了不把key返回给前端)
type ResShopPointCardObject struct {
	CardId               *int64   `protobuf:"varint,1,opt,name=CardId" json:"CardId,omitempty"`
	CardName             *string  `protobuf:"bytes,2,opt,name=CardName" json:"CardName,omitempty"`
	CardNo               *string  `protobuf:"bytes,3,opt,name=CardNo" json:"CardNo,omitempty"`
	CardPassword         *string  `protobuf:"bytes,4,opt,name=CardPassword" json:"CardPassword,omitempty"`
	SellerAccount        *string  `protobuf:"bytes,5,opt,name=SellerAccount" json:"SellerAccount,omitempty"`
	CardStatus           *int32   `protobuf:"varint,6,opt,name=CardStatus" json:"CardStatus,omitempty"`
	OrderNo              *int64   `protobuf:"varint,7,opt,name=orderNo" json:"orderNo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResShopPointCardObject) Reset()         { *m = ResShopPointCardObject{} }
func (m *ResShopPointCardObject) String() string { return proto.CompactTextString(m) }
func (*ResShopPointCardObject) ProtoMessage()    {}
func (*ResShopPointCardObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{66}
}
func (m *ResShopPointCardObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResShopPointCardObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResShopPointCardObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResShopPointCardObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResShopPointCardObject.Merge(m, src)
}
func (m *ResShopPointCardObject) XXX_Size() int {
	return m.Size()
}
func (m *ResShopPointCardObject) XXX_DiscardUnknown() {
	xxx_messageInfo_ResShopPointCardObject.DiscardUnknown(m)
}

var xxx_messageInfo_ResShopPointCardObject proto.InternalMessageInfo

func (m *ResShopPointCardObject) GetCardId() int64 {
	if m != nil && m.CardId != nil {
		return *m.CardId
	}
	return 0
}

func (m *ResShopPointCardObject) GetCardName() string {
	if m != nil && m.CardName != nil {
		return *m.CardName
	}
	return ""
}

func (m *ResShopPointCardObject) GetCardNo() string {
	if m != nil && m.CardNo != nil {
		return *m.CardNo
	}
	return ""
}

func (m *ResShopPointCardObject) GetCardPassword() string {
	if m != nil && m.CardPassword != nil {
		return *m.CardPassword
	}
	return ""
}

func (m *ResShopPointCardObject) GetSellerAccount() string {
	if m != nil && m.SellerAccount != nil {
		return *m.SellerAccount
	}
	return ""
}

func (m *ResShopPointCardObject) GetCardStatus() int32 {
	if m != nil && m.CardStatus != nil {
		return *m.CardStatus
	}
	return 0
}

func (m *ResShopPointCardObject) GetOrderNo() int64 {
	if m != nil && m.OrderNo != nil {
		return *m.OrderNo
	}
	return 0
}

//点卡查询返回值
type QueryShopPointCardResponse struct {
	List                 []*ResShopPointCardObject `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                    `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *QueryShopPointCardResponse) Reset()         { *m = QueryShopPointCardResponse{} }
func (m *QueryShopPointCardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryShopPointCardResponse) ProtoMessage()    {}
func (*QueryShopPointCardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{67}
}
func (m *QueryShopPointCardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShopPointCardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShopPointCardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShopPointCardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShopPointCardResponse.Merge(m, src)
}
func (m *QueryShopPointCardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryShopPointCardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShopPointCardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShopPointCardResponse proto.InternalMessageInfo

func (m *QueryShopPointCardResponse) GetList() []*ResShopPointCardObject {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *QueryShopPointCardResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//通过卖家帐号查询存在库存的点卡种类名称的请求值
type GetShopPointCardDropDownRequest struct {
	SellerAccount        *string  `protobuf:"bytes,1,req,name=SellerAccount" json:"SellerAccount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetShopPointCardDropDownRequest) Reset()         { *m = GetShopPointCardDropDownRequest{} }
func (m *GetShopPointCardDropDownRequest) String() string { return proto.CompactTextString(m) }
func (*GetShopPointCardDropDownRequest) ProtoMessage()    {}
func (*GetShopPointCardDropDownRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{68}
}
func (m *GetShopPointCardDropDownRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetShopPointCardDropDownRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetShopPointCardDropDownRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetShopPointCardDropDownRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetShopPointCardDropDownRequest.Merge(m, src)
}
func (m *GetShopPointCardDropDownRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetShopPointCardDropDownRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetShopPointCardDropDownRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetShopPointCardDropDownRequest proto.InternalMessageInfo

func (m *GetShopPointCardDropDownRequest) GetSellerAccount() string {
	if m != nil && m.SellerAccount != nil {
		return *m.SellerAccount
	}
	return ""
}

//通过卖家帐号查询存在库存的点卡种类名称的返回值
type GetShopPointCardDropDownResponse struct {
	DropDownShopPointCard []*KeyValue `protobuf:"bytes,1,rep,name=DropDownShopPointCard" json:"DropDownShopPointCard,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}    `json:"-"`
	XXX_unrecognized      []byte      `json:"-"`
	XXX_sizecache         int32       `json:"-"`
}

func (m *GetShopPointCardDropDownResponse) Reset()         { *m = GetShopPointCardDropDownResponse{} }
func (m *GetShopPointCardDropDownResponse) String() string { return proto.CompactTextString(m) }
func (*GetShopPointCardDropDownResponse) ProtoMessage()    {}
func (*GetShopPointCardDropDownResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{69}
}
func (m *GetShopPointCardDropDownResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetShopPointCardDropDownResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetShopPointCardDropDownResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetShopPointCardDropDownResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetShopPointCardDropDownResponse.Merge(m, src)
}
func (m *GetShopPointCardDropDownResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetShopPointCardDropDownResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetShopPointCardDropDownResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetShopPointCardDropDownResponse proto.InternalMessageInfo

func (m *GetShopPointCardDropDownResponse) GetDropDownShopPointCard() []*KeyValue {
	if m != nil {
		return m.DropDownShopPointCard
	}
	return nil
}

type QueryOrderRequest struct {
	BeginTimestamp       *int64   `protobuf:"varint,1,opt,name=BeginTimestamp" json:"BeginTimestamp,omitempty"`
	EndTimestamp         *int64   `protobuf:"varint,2,opt,name=EndTimestamp" json:"EndTimestamp,omitempty"`
	CurPage              *int32   `protobuf:"varint,3,opt,name=CurPage" json:"CurPage,omitempty"`
	PageSize             *int32   `protobuf:"varint,4,opt,name=PageSize" json:"PageSize,omitempty"`
	Keyword              *string  `protobuf:"bytes,6,opt,name=Keyword" json:"Keyword,omitempty"`
	Types                *int32   `protobuf:"varint,7,opt,name=Types" json:"Types,omitempty"`
	Status               *int32   `protobuf:"varint,8,opt,name=Status" json:"Status,omitempty"`
	SourceType           *int32   `protobuf:"varint,9,opt,name=SourceType" json:"SourceType,omitempty"`
	PayType              *int32   `protobuf:"varint,10,opt,name=PayType" json:"PayType,omitempty"`
	ChangeType           *int32   `protobuf:"varint,11,opt,name=ChangeType" json:"ChangeType,omitempty"`
	PayStatus            *int32   `protobuf:"varint,12,opt,name=PayStatus" json:"PayStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryOrderRequest) Reset()         { *m = QueryOrderRequest{} }
func (m *QueryOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOrderRequest) ProtoMessage()    {}
func (*QueryOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{70}
}
func (m *QueryOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderRequest.Merge(m, src)
}
func (m *QueryOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderRequest proto.InternalMessageInfo

func (m *QueryOrderRequest) GetBeginTimestamp() int64 {
	if m != nil && m.BeginTimestamp != nil {
		return *m.BeginTimestamp
	}
	return 0
}

func (m *QueryOrderRequest) GetEndTimestamp() int64 {
	if m != nil && m.EndTimestamp != nil {
		return *m.EndTimestamp
	}
	return 0
}

func (m *QueryOrderRequest) GetCurPage() int32 {
	if m != nil && m.CurPage != nil {
		return *m.CurPage
	}
	return 0
}

func (m *QueryOrderRequest) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *QueryOrderRequest) GetKeyword() string {
	if m != nil && m.Keyword != nil {
		return *m.Keyword
	}
	return ""
}

func (m *QueryOrderRequest) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *QueryOrderRequest) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *QueryOrderRequest) GetSourceType() int32 {
	if m != nil && m.SourceType != nil {
		return *m.SourceType
	}
	return 0
}

func (m *QueryOrderRequest) GetPayType() int32 {
	if m != nil && m.PayType != nil {
		return *m.PayType
	}
	return 0
}

func (m *QueryOrderRequest) GetChangeType() int32 {
	if m != nil && m.ChangeType != nil {
		return *m.ChangeType
	}
	return 0
}

func (m *QueryOrderRequest) GetPayStatus() int32 {
	if m != nil && m.PayStatus != nil {
		return *m.PayStatus
	}
	return 0
}

type QueryOrderResponse struct {
	List                 []*share_message.Order `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                 `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *QueryOrderResponse) Reset()         { *m = QueryOrderResponse{} }
func (m *QueryOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOrderResponse) ProtoMessage()    {}
func (*QueryOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{71}
}
func (m *QueryOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderResponse.Merge(m, src)
}
func (m *QueryOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderResponse proto.InternalMessageInfo

func (m *QueryOrderResponse) GetList() []*share_message.Order {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *QueryOrderResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type OptOrderRequest struct {
	Oid                  *string  `protobuf:"bytes,1,opt,name=Oid" json:"Oid,omitempty"`
	Opt                  *int32   `protobuf:"varint,2,opt,name=Opt" json:"Opt,omitempty"`
	Note                 *string  `protobuf:"bytes,3,opt,name=Note" json:"Note,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OptOrderRequest) Reset()         { *m = OptOrderRequest{} }
func (m *OptOrderRequest) String() string { return proto.CompactTextString(m) }
func (*OptOrderRequest) ProtoMessage()    {}
func (*OptOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{72}
}
func (m *OptOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OptOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OptOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OptOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptOrderRequest.Merge(m, src)
}
func (m *OptOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *OptOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OptOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OptOrderRequest proto.InternalMessageInfo

func (m *OptOrderRequest) GetOid() string {
	if m != nil && m.Oid != nil {
		return *m.Oid
	}
	return ""
}

func (m *OptOrderRequest) GetOpt() int32 {
	if m != nil && m.Opt != nil {
		return *m.Opt
	}
	return 0
}

func (m *OptOrderRequest) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

type ComplaintListResponse struct {
	List                 []*share_message.PlayerComplaint `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                           `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *ComplaintListResponse) Reset()         { *m = ComplaintListResponse{} }
func (m *ComplaintListResponse) String() string { return proto.CompactTextString(m) }
func (*ComplaintListResponse) ProtoMessage()    {}
func (*ComplaintListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{73}
}
func (m *ComplaintListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplaintListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplaintListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplaintListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplaintListResponse.Merge(m, src)
}
func (m *ComplaintListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ComplaintListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplaintListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ComplaintListResponse proto.InternalMessageInfo

func (m *ComplaintListResponse) GetList() []*share_message.PlayerComplaint {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ComplaintListResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type ReComplaintRequest struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Content              *string  `protobuf:"bytes,2,opt,name=Content" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReComplaintRequest) Reset()         { *m = ReComplaintRequest{} }
func (m *ReComplaintRequest) String() string { return proto.CompactTextString(m) }
func (*ReComplaintRequest) ProtoMessage()    {}
func (*ReComplaintRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{74}
}
func (m *ReComplaintRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReComplaintRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReComplaintRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReComplaintRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReComplaintRequest.Merge(m, src)
}
func (m *ReComplaintRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReComplaintRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReComplaintRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReComplaintRequest proto.InternalMessageInfo

func (m *ReComplaintRequest) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ReComplaintRequest) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

type AddWaiterRequest struct {
	Type                 *int32   `protobuf:"varint,1,opt,name=Type" json:"Type,omitempty"`
	Count                *int32   `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty"`
	Password             *string  `protobuf:"bytes,3,opt,name=Password" json:"Password,omitempty"`
	Payword              *string  `protobuf:"bytes,4,opt,name=Payword" json:"Payword,omitempty"`
	Approve              *bool    `protobuf:"varint,5,opt,name=Approve" json:"Approve,omitempty"`
	Label                []int32  `protobuf:"varint,6,rep,name=Label" json:"Label,omitempty"`
	ChannelNo            *string  `protobuf:"bytes,7,opt,name=ChannelNo" json:"ChannelNo,omitempty"`
	Sex                  *int32   `protobuf:"varint,8,opt,name=Sex" json:"Sex,omitempty"`
	IsCity               *bool    `protobuf:"varint,9,opt,name=IsCity" json:"IsCity,omitempty"`
	IsSlogan             *bool    `protobuf:"varint,10,opt,name=IsSlogan" json:"IsSlogan,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddWaiterRequest) Reset()         { *m = AddWaiterRequest{} }
func (m *AddWaiterRequest) String() string { return proto.CompactTextString(m) }
func (*AddWaiterRequest) ProtoMessage()    {}
func (*AddWaiterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{75}
}
func (m *AddWaiterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWaiterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWaiterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWaiterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWaiterRequest.Merge(m, src)
}
func (m *AddWaiterRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddWaiterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWaiterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddWaiterRequest proto.InternalMessageInfo

func (m *AddWaiterRequest) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *AddWaiterRequest) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *AddWaiterRequest) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *AddWaiterRequest) GetPayword() string {
	if m != nil && m.Payword != nil {
		return *m.Payword
	}
	return ""
}

func (m *AddWaiterRequest) GetApprove() bool {
	if m != nil && m.Approve != nil {
		return *m.Approve
	}
	return false
}

func (m *AddWaiterRequest) GetLabel() []int32 {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *AddWaiterRequest) GetChannelNo() string {
	if m != nil && m.ChannelNo != nil {
		return *m.ChannelNo
	}
	return ""
}

func (m *AddWaiterRequest) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *AddWaiterRequest) GetIsCity() bool {
	if m != nil && m.IsCity != nil {
		return *m.IsCity
	}
	return false
}

func (m *AddWaiterRequest) GetIsSlogan() bool {
	if m != nil && m.IsSlogan != nil {
		return *m.IsSlogan
	}
	return false
}

type AddWaiterResponse struct {
	Account              *string  `protobuf:"bytes,1,opt,name=Account" json:"Account,omitempty"`
	Password             *string  `protobuf:"bytes,3,opt,name=Password" json:"Password,omitempty"`
	Payword              *string  `protobuf:"bytes,4,opt,name=Payword" json:"Payword,omitempty"`
	Approve              *bool    `protobuf:"varint,5,opt,name=Approve" json:"Approve,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddWaiterResponse) Reset()         { *m = AddWaiterResponse{} }
func (m *AddWaiterResponse) String() string { return proto.CompactTextString(m) }
func (*AddWaiterResponse) ProtoMessage()    {}
func (*AddWaiterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{76}
}
func (m *AddWaiterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWaiterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWaiterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWaiterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWaiterResponse.Merge(m, src)
}
func (m *AddWaiterResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddWaiterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWaiterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddWaiterResponse proto.InternalMessageInfo

func (m *AddWaiterResponse) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *AddWaiterResponse) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *AddWaiterResponse) GetPayword() string {
	if m != nil && m.Payword != nil {
		return *m.Payword
	}
	return ""
}

func (m *AddWaiterResponse) GetApprove() bool {
	if m != nil && m.Approve != nil {
		return *m.Approve
	}
	return false
}

type QuerySystemNoticeResponse struct {
	List                 []*share_message.SystemNotice `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                        `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *QuerySystemNoticeResponse) Reset()         { *m = QuerySystemNoticeResponse{} }
func (m *QuerySystemNoticeResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySystemNoticeResponse) ProtoMessage()    {}
func (*QuerySystemNoticeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{77}
}
func (m *QuerySystemNoticeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySystemNoticeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySystemNoticeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySystemNoticeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySystemNoticeResponse.Merge(m, src)
}
func (m *QuerySystemNoticeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySystemNoticeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySystemNoticeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySystemNoticeResponse proto.InternalMessageInfo

func (m *QuerySystemNoticeResponse) GetList() []*share_message.SystemNotice {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *QuerySystemNoticeResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//导出聊天记录返回
type ExportChatRecordResponse struct {
	List                 []*share_message.TeamChatLog `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                       `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ExportChatRecordResponse) Reset()         { *m = ExportChatRecordResponse{} }
func (m *ExportChatRecordResponse) String() string { return proto.CompactTextString(m) }
func (*ExportChatRecordResponse) ProtoMessage()    {}
func (*ExportChatRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{78}
}
func (m *ExportChatRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExportChatRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExportChatRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExportChatRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportChatRecordResponse.Merge(m, src)
}
func (m *ExportChatRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *ExportChatRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportChatRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExportChatRecordResponse proto.InternalMessageInfo

func (m *ExportChatRecordResponse) GetList() []*share_message.TeamChatLog {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ExportChatRecordResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//查询好友信息
type PlayerFriendInfo struct {
	FriendCount          *int32                    `protobuf:"varint,1,opt,name=FriendCount" json:"FriendCount,omitempty"`
	MaxFriendCount       *int32                    `protobuf:"varint,2,opt,name=MaxFriendCount" json:"MaxFriendCount,omitempty"`
	Info                 *share_message.PlayerBase `protobuf:"bytes,3,opt,name=info" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *PlayerFriendInfo) Reset()         { *m = PlayerFriendInfo{} }
func (m *PlayerFriendInfo) String() string { return proto.CompactTextString(m) }
func (*PlayerFriendInfo) ProtoMessage()    {}
func (*PlayerFriendInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{79}
}
func (m *PlayerFriendInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerFriendInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerFriendInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerFriendInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerFriendInfo.Merge(m, src)
}
func (m *PlayerFriendInfo) XXX_Size() int {
	return m.Size()
}
func (m *PlayerFriendInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerFriendInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerFriendInfo proto.InternalMessageInfo

func (m *PlayerFriendInfo) GetFriendCount() int32 {
	if m != nil && m.FriendCount != nil {
		return *m.FriendCount
	}
	return 0
}

func (m *PlayerFriendInfo) GetMaxFriendCount() int32 {
	if m != nil && m.MaxFriendCount != nil {
		return *m.MaxFriendCount
	}
	return 0
}

func (m *PlayerFriendInfo) GetInfo() *share_message.PlayerBase {
	if m != nil {
		return m.Info
	}
	return nil
}

//添加批量好友
type AddPlayerFriendInfo struct {
	PlayerID             *int64   `protobuf:"varint,1,opt,name=PlayerID" json:"PlayerID,omitempty"`
	List                 []int64  `protobuf:"varint,2,rep,name=list" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddPlayerFriendInfo) Reset()         { *m = AddPlayerFriendInfo{} }
func (m *AddPlayerFriendInfo) String() string { return proto.CompactTextString(m) }
func (*AddPlayerFriendInfo) ProtoMessage()    {}
func (*AddPlayerFriendInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{80}
}
func (m *AddPlayerFriendInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPlayerFriendInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPlayerFriendInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPlayerFriendInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPlayerFriendInfo.Merge(m, src)
}
func (m *AddPlayerFriendInfo) XXX_Size() int {
	return m.Size()
}
func (m *AddPlayerFriendInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPlayerFriendInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AddPlayerFriendInfo proto.InternalMessageInfo

func (m *AddPlayerFriendInfo) GetPlayerID() int64 {
	if m != nil && m.PlayerID != nil {
		return *m.PlayerID
	}
	return 0
}

func (m *AddPlayerFriendInfo) GetList() []int64 {
	if m != nil {
		return m.List
	}
	return nil
}

//请求创建群
type CreateTeamInfo struct {
	PlayerID             *int64   `protobuf:"varint,1,opt,name=PlayerID" json:"PlayerID,omitempty"`
	TeamName             *string  `protobuf:"bytes,2,opt,name=team_name" json:"team_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTeamInfo) Reset()         { *m = CreateTeamInfo{} }
func (m *CreateTeamInfo) String() string { return proto.CompactTextString(m) }
func (*CreateTeamInfo) ProtoMessage()    {}
func (*CreateTeamInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{81}
}
func (m *CreateTeamInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTeamInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTeamInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTeamInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTeamInfo.Merge(m, src)
}
func (m *CreateTeamInfo) XXX_Size() int {
	return m.Size()
}
func (m *CreateTeamInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTeamInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTeamInfo proto.InternalMessageInfo

func (m *CreateTeamInfo) GetPlayerID() int64 {
	if m != nil && m.PlayerID != nil {
		return *m.PlayerID
	}
	return 0
}

func (m *CreateTeamInfo) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

//后台拉群用户列表请求
type GetTeamPlayerListRequest struct {
	CurPage              *int32   `protobuf:"varint,1,opt,name=CurPage" json:"CurPage,omitempty"`
	PageSize             *int32   `protobuf:"varint,2,opt,name=PageSize" json:"PageSize,omitempty"`
	Keyword              *string  `protobuf:"bytes,3,opt,name=Keyword" json:"Keyword,omitempty"`
	Type                 *int32   `protobuf:"varint,4,opt,name=Type" json:"Type,omitempty"`
	BeginTimestamp       *int64   `protobuf:"varint,5,opt,name=BeginTimestamp" json:"BeginTimestamp,omitempty"`
	EndTimestamp         *int64   `protobuf:"varint,6,opt,name=EndTimestamp" json:"EndTimestamp,omitempty"`
	Label                *int32   `protobuf:"varint,7,opt,name=label" json:"label,omitempty"`
	Channel              *string  `protobuf:"bytes,8,opt,name=channel" json:"channel,omitempty"`
	TeamId               *int64   `protobuf:"varint,9,opt,name=TeamId" json:"TeamId,omitempty"`
	CustomTag            *int32   `protobuf:"varint,12,opt,name=CustomTag" json:"CustomTag,omitempty"`
	GrabTag              *int32   `protobuf:"varint,13,opt,name=GrabTag" json:"GrabTag,omitempty"`
	PlayerType           *int32   `protobuf:"varint,14,opt,name=PlayerType" json:"PlayerType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTeamPlayerListRequest) Reset()         { *m = GetTeamPlayerListRequest{} }
func (m *GetTeamPlayerListRequest) String() string { return proto.CompactTextString(m) }
func (*GetTeamPlayerListRequest) ProtoMessage()    {}
func (*GetTeamPlayerListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{82}
}
func (m *GetTeamPlayerListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTeamPlayerListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTeamPlayerListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTeamPlayerListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTeamPlayerListRequest.Merge(m, src)
}
func (m *GetTeamPlayerListRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTeamPlayerListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTeamPlayerListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTeamPlayerListRequest proto.InternalMessageInfo

func (m *GetTeamPlayerListRequest) GetCurPage() int32 {
	if m != nil && m.CurPage != nil {
		return *m.CurPage
	}
	return 0
}

func (m *GetTeamPlayerListRequest) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *GetTeamPlayerListRequest) GetKeyword() string {
	if m != nil && m.Keyword != nil {
		return *m.Keyword
	}
	return ""
}

func (m *GetTeamPlayerListRequest) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *GetTeamPlayerListRequest) GetBeginTimestamp() int64 {
	if m != nil && m.BeginTimestamp != nil {
		return *m.BeginTimestamp
	}
	return 0
}

func (m *GetTeamPlayerListRequest) GetEndTimestamp() int64 {
	if m != nil && m.EndTimestamp != nil {
		return *m.EndTimestamp
	}
	return 0
}

func (m *GetTeamPlayerListRequest) GetLabel() int32 {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return 0
}

func (m *GetTeamPlayerListRequest) GetChannel() string {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return ""
}

func (m *GetTeamPlayerListRequest) GetTeamId() int64 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *GetTeamPlayerListRequest) GetCustomTag() int32 {
	if m != nil && m.CustomTag != nil {
		return *m.CustomTag
	}
	return 0
}

func (m *GetTeamPlayerListRequest) GetGrabTag() int32 {
	if m != nil && m.GrabTag != nil {
		return *m.GrabTag
	}
	return 0
}

func (m *GetTeamPlayerListRequest) GetPlayerType() int32 {
	if m != nil && m.PlayerType != nil {
		return *m.PlayerType
	}
	return 0
}

//后台拉群用户列表返回
type GetTeamPlayerListResponse struct {
	List                 []*share_message.PlayerBase `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                      `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	Team                 *share_message.TeamData     `protobuf:"bytes,3,opt,name=Team" json:"Team,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *GetTeamPlayerListResponse) Reset()         { *m = GetTeamPlayerListResponse{} }
func (m *GetTeamPlayerListResponse) String() string { return proto.CompactTextString(m) }
func (*GetTeamPlayerListResponse) ProtoMessage()    {}
func (*GetTeamPlayerListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{83}
}
func (m *GetTeamPlayerListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTeamPlayerListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTeamPlayerListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTeamPlayerListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTeamPlayerListResponse.Merge(m, src)
}
func (m *GetTeamPlayerListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTeamPlayerListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTeamPlayerListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTeamPlayerListResponse proto.InternalMessageInfo

func (m *GetTeamPlayerListResponse) GetList() []*share_message.PlayerBase {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *GetTeamPlayerListResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

func (m *GetTeamPlayerListResponse) GetTeam() *share_message.TeamData {
	if m != nil {
		return m.Team
	}
	return nil
}

//运营渠道列表返回
type OperationListResponse struct {
	List                 []*share_message.OperationChannel `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                            `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *OperationListResponse) Reset()         { *m = OperationListResponse{} }
func (m *OperationListResponse) String() string { return proto.CompactTextString(m) }
func (*OperationListResponse) ProtoMessage()    {}
func (*OperationListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{84}
}
func (m *OperationListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperationListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationListResponse.Merge(m, src)
}
func (m *OperationListResponse) XXX_Size() int {
	return m.Size()
}
func (m *OperationListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OperationListResponse proto.InternalMessageInfo

func (m *OperationListResponse) GetList() []*share_message.OperationChannel {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *OperationListResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//兴趣标签列表返回
type InterestTypeResponse struct {
	List                 []*share_message.InterestType `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                        `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *InterestTypeResponse) Reset()         { *m = InterestTypeResponse{} }
func (m *InterestTypeResponse) String() string { return proto.CompactTextString(m) }
func (*InterestTypeResponse) ProtoMessage()    {}
func (*InterestTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{85}
}
func (m *InterestTypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterestTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterestTypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterestTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterestTypeResponse.Merge(m, src)
}
func (m *InterestTypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *InterestTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InterestTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InterestTypeResponse proto.InternalMessageInfo

func (m *InterestTypeResponse) GetList() []*share_message.InterestType {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *InterestTypeResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//兴趣词列表返回
type InterestTagResponse struct {
	List                 []*share_message.InterestTag `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                       `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *InterestTagResponse) Reset()         { *m = InterestTagResponse{} }
func (m *InterestTagResponse) String() string { return proto.CompactTextString(m) }
func (*InterestTagResponse) ProtoMessage()    {}
func (*InterestTagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{86}
}
func (m *InterestTagResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterestTagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterestTagResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterestTagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterestTagResponse.Merge(m, src)
}
func (m *InterestTagResponse) XXX_Size() int {
	return m.Size()
}
func (m *InterestTagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InterestTagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InterestTagResponse proto.InternalMessageInfo

func (m *InterestTagResponse) GetList() []*share_message.InterestTag {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *InterestTagResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type InterestGroupResponse struct {
	List                 []*share_message.InterestGroup `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                         `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *InterestGroupResponse) Reset()         { *m = InterestGroupResponse{} }
func (m *InterestGroupResponse) String() string { return proto.CompactTextString(m) }
func (*InterestGroupResponse) ProtoMessage()    {}
func (*InterestGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{87}
}
func (m *InterestGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterestGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterestGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterestGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterestGroupResponse.Merge(m, src)
}
func (m *InterestGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *InterestGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InterestGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InterestGroupResponse proto.InternalMessageInfo

func (m *InterestGroupResponse) GetList() []*share_message.InterestGroup {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *InterestGroupResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//自定义标签列表返回
type CustomTagResponse struct {
	List                 []*share_message.CustomTag `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                     `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *CustomTagResponse) Reset()         { *m = CustomTagResponse{} }
func (m *CustomTagResponse) String() string { return proto.CompactTextString(m) }
func (*CustomTagResponse) ProtoMessage()    {}
func (*CustomTagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{88}
}
func (m *CustomTagResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomTagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomTagResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomTagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomTagResponse.Merge(m, src)
}
func (m *CustomTagResponse) XXX_Size() int {
	return m.Size()
}
func (m *CustomTagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomTagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CustomTagResponse proto.InternalMessageInfo

func (m *CustomTagResponse) GetList() []*share_message.CustomTag {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *CustomTagResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//抓取标签列表返回
type GrabTagResponse struct {
	List                 []*share_message.GrabTag `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                   `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *GrabTagResponse) Reset()         { *m = GrabTagResponse{} }
func (m *GrabTagResponse) String() string { return proto.CompactTextString(m) }
func (*GrabTagResponse) ProtoMessage()    {}
func (*GrabTagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{89}
}
func (m *GrabTagResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrabTagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GrabTagResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GrabTagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrabTagResponse.Merge(m, src)
}
func (m *GrabTagResponse) XXX_Size() int {
	return m.Size()
}
func (m *GrabTagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GrabTagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GrabTagResponse proto.InternalMessageInfo

func (m *GrabTagResponse) GetList() []*share_message.GrabTag {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *GrabTagResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//抓取词列表返回
type CrawlWordsResponse struct {
	List                 []*share_message.CrawlWords `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                      `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *CrawlWordsResponse) Reset()         { *m = CrawlWordsResponse{} }
func (m *CrawlWordsResponse) String() string { return proto.CompactTextString(m) }
func (*CrawlWordsResponse) ProtoMessage()    {}
func (*CrawlWordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{90}
}
func (m *CrawlWordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrawlWordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrawlWordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrawlWordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrawlWordsResponse.Merge(m, src)
}
func (m *CrawlWordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *CrawlWordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CrawlWordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CrawlWordsResponse proto.InternalMessageInfo

func (m *CrawlWordsResponse) GetList() []*share_message.CrawlWords {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *CrawlWordsResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//玩家抓取词列表返回
type PlayerCrawlWordsResponse struct {
	List                 []*share_message.PlayerCrawlWords `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *PlayerCrawlWordsResponse) Reset()         { *m = PlayerCrawlWordsResponse{} }
func (m *PlayerCrawlWordsResponse) String() string { return proto.CompactTextString(m) }
func (*PlayerCrawlWordsResponse) ProtoMessage()    {}
func (*PlayerCrawlWordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{91}
}
func (m *PlayerCrawlWordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerCrawlWordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerCrawlWordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerCrawlWordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerCrawlWordsResponse.Merge(m, src)
}
func (m *PlayerCrawlWordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *PlayerCrawlWordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerCrawlWordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerCrawlWordsResponse proto.InternalMessageInfo

func (m *PlayerCrawlWordsResponse) GetList() []*share_message.PlayerCrawlWords {
	if m != nil {
		return m.List
	}
	return nil
}

//运营汇总曲线
type OperationChannelReportLine struct {
	RegCount             []int64  `protobuf:"varint,1,rep,name=RegCount" json:"RegCount,omitempty"`
	LoginCount           []int64  `protobuf:"varint,2,rep,name=LoginCount" json:"LoginCount,omitempty"`
	ShopOrderSumCount    []int64  `protobuf:"varint,3,rep,name=ShopOrderSumCount" json:"ShopOrderSumCount,omitempty"`
	ShopDealSumAmount    []int64  `protobuf:"varint,4,rep,name=ShopDealSumAmount" json:"ShopDealSumAmount,omitempty"`
	RechargeSumAmount    []int64  `protobuf:"varint,5,rep,name=RechargeSumAmount" json:"RechargeSumAmount,omitempty"`
	WithdrawSumAmount    []int64  `protobuf:"varint,6,rep,name=WithdrawSumAmount" json:"WithdrawSumAmount,omitempty"`
	TaxDate              []int64  `protobuf:"varint,11,rep,name=TaxDate" json:"TaxDate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OperationChannelReportLine) Reset()         { *m = OperationChannelReportLine{} }
func (m *OperationChannelReportLine) String() string { return proto.CompactTextString(m) }
func (*OperationChannelReportLine) ProtoMessage()    {}
func (*OperationChannelReportLine) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{92}
}
func (m *OperationChannelReportLine) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationChannelReportLine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationChannelReportLine.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperationChannelReportLine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationChannelReportLine.Merge(m, src)
}
func (m *OperationChannelReportLine) XXX_Size() int {
	return m.Size()
}
func (m *OperationChannelReportLine) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationChannelReportLine.DiscardUnknown(m)
}

var xxx_messageInfo_OperationChannelReportLine proto.InternalMessageInfo

func (m *OperationChannelReportLine) GetRegCount() []int64 {
	if m != nil {
		return m.RegCount
	}
	return nil
}

func (m *OperationChannelReportLine) GetLoginCount() []int64 {
	if m != nil {
		return m.LoginCount
	}
	return nil
}

func (m *OperationChannelReportLine) GetShopOrderSumCount() []int64 {
	if m != nil {
		return m.ShopOrderSumCount
	}
	return nil
}

func (m *OperationChannelReportLine) GetShopDealSumAmount() []int64 {
	if m != nil {
		return m.ShopDealSumAmount
	}
	return nil
}

func (m *OperationChannelReportLine) GetRechargeSumAmount() []int64 {
	if m != nil {
		return m.RechargeSumAmount
	}
	return nil
}

func (m *OperationChannelReportLine) GetWithdrawSumAmount() []int64 {
	if m != nil {
		return m.WithdrawSumAmount
	}
	return nil
}

func (m *OperationChannelReportLine) GetTaxDate() []int64 {
	if m != nil {
		return m.TaxDate
	}
	return nil
}

type OperationChannelReportLineResponse struct {
	Line                 *OperationChannelReportLine `protobuf:"bytes,1,opt,name=Line" json:"Line,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *OperationChannelReportLineResponse) Reset()         { *m = OperationChannelReportLineResponse{} }
func (m *OperationChannelReportLineResponse) String() string { return proto.CompactTextString(m) }
func (*OperationChannelReportLineResponse) ProtoMessage()    {}
func (*OperationChannelReportLineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{93}
}
func (m *OperationChannelReportLineResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationChannelReportLineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationChannelReportLineResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperationChannelReportLineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationChannelReportLineResponse.Merge(m, src)
}
func (m *OperationChannelReportLineResponse) XXX_Size() int {
	return m.Size()
}
func (m *OperationChannelReportLineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationChannelReportLineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OperationChannelReportLineResponse proto.InternalMessageInfo

func (m *OperationChannelReportLineResponse) GetLine() *OperationChannelReportLine {
	if m != nil {
		return m.Line
	}
	return nil
}

//文章信息
type ArticleResponse struct {
	ID                   *int32   `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Title                *string  `protobuf:"bytes,2,opt,name=Title" json:"Title,omitempty"`
	Icon                 *string  `protobuf:"bytes,3,opt,name=Icon" json:"Icon,omitempty"`
	ArticleAdd           *string  `protobuf:"bytes,4,opt,name=ArticleAdd" json:"ArticleAdd,omitempty"`
	Type                 *int32   `protobuf:"varint,5,opt,name=Type" json:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArticleResponse) Reset()         { *m = ArticleResponse{} }
func (m *ArticleResponse) String() string { return proto.CompactTextString(m) }
func (*ArticleResponse) ProtoMessage()    {}
func (*ArticleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{94}
}
func (m *ArticleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleResponse.Merge(m, src)
}
func (m *ArticleResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArticleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleResponse proto.InternalMessageInfo

func (m *ArticleResponse) GetID() int32 {
	if m != nil && m.ID != nil {
		return *m.ID
	}
	return 0
}

func (m *ArticleResponse) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *ArticleResponse) GetIcon() string {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return ""
}

func (m *ArticleResponse) GetArticleAdd() string {
	if m != nil && m.ArticleAdd != nil {
		return *m.ArticleAdd
	}
	return ""
}

func (m *ArticleResponse) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

//推送文章
type ArticleListResponse struct {
	ArticleListID        *int32             `protobuf:"varint,1,req,name=ArticleListID" json:"ArticleListID,omitempty"`
	ArticleList          []*ArticleResponse `protobuf:"bytes,2,rep,name=ArticleList" json:"ArticleList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ArticleListResponse) Reset()         { *m = ArticleListResponse{} }
func (m *ArticleListResponse) String() string { return proto.CompactTextString(m) }
func (*ArticleListResponse) ProtoMessage()    {}
func (*ArticleListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{95}
}
func (m *ArticleListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleListResponse.Merge(m, src)
}
func (m *ArticleListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArticleListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleListResponse proto.InternalMessageInfo

func (m *ArticleListResponse) GetArticleListID() int32 {
	if m != nil && m.ArticleListID != nil {
		return *m.ArticleListID
	}
	return 0
}

func (m *ArticleListResponse) GetArticleList() []*ArticleResponse {
	if m != nil {
		return m.ArticleList
	}
	return nil
}

//查询文章
type QueryArticleResponse struct {
	List                 []*share_message.Article `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                   `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *QueryArticleResponse) Reset()         { *m = QueryArticleResponse{} }
func (m *QueryArticleResponse) String() string { return proto.CompactTextString(m) }
func (*QueryArticleResponse) ProtoMessage()    {}
func (*QueryArticleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{96}
}
func (m *QueryArticleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryArticleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryArticleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryArticleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryArticleResponse.Merge(m, src)
}
func (m *QueryArticleResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryArticleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryArticleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryArticleResponse proto.InternalMessageInfo

func (m *QueryArticleResponse) GetList() []*share_message.Article {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *QueryArticleResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//查询推文
type QueryTweetsResponse struct {
	List                 []*share_message.Tweets `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                  `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *QueryTweetsResponse) Reset()         { *m = QueryTweetsResponse{} }
func (m *QueryTweetsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTweetsResponse) ProtoMessage()    {}
func (*QueryTweetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{97}
}
func (m *QueryTweetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTweetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTweetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTweetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTweetsResponse.Merge(m, src)
}
func (m *QueryTweetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTweetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTweetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTweetsResponse proto.InternalMessageInfo

func (m *QueryTweetsResponse) GetList() []*share_message.Tweets {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *QueryTweetsResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//查询注册推文
type QueryRegisterPushResponse struct {
	List                 []*share_message.RegisterPush `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                        `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *QueryRegisterPushResponse) Reset()         { *m = QueryRegisterPushResponse{} }
func (m *QueryRegisterPushResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRegisterPushResponse) ProtoMessage()    {}
func (*QueryRegisterPushResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{98}
}
func (m *QueryRegisterPushResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisterPushResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisterPushResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisterPushResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisterPushResponse.Merge(m, src)
}
func (m *QueryRegisterPushResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisterPushResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisterPushResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisterPushResponse proto.InternalMessageInfo

func (m *QueryRegisterPushResponse) GetList() []*share_message.RegisterPush {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *QueryRegisterPushResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//添加查询文章请求
type ArticleInfo struct {
	ArticleId            *int64   `protobuf:"varint,1,opt,name=ArticleId" json:"ArticleId,omitempty"`
	ArticleType          *int32   `protobuf:"varint,2,opt,name=ArticleType" json:"ArticleType,omitempty"`
	Title                *string  `protobuf:"bytes,3,opt,name=Title" json:"Title,omitempty"`
	IsMain               *int32   `protobuf:"varint,4,opt,name=IsMain" json:"IsMain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArticleInfo) Reset()         { *m = ArticleInfo{} }
func (m *ArticleInfo) String() string { return proto.CompactTextString(m) }
func (*ArticleInfo) ProtoMessage()    {}
func (*ArticleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{99}
}
func (m *ArticleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleInfo.Merge(m, src)
}
func (m *ArticleInfo) XXX_Size() int {
	return m.Size()
}
func (m *ArticleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleInfo proto.InternalMessageInfo

func (m *ArticleInfo) GetArticleId() int64 {
	if m != nil && m.ArticleId != nil {
		return *m.ArticleId
	}
	return 0
}

func (m *ArticleInfo) GetArticleType() int32 {
	if m != nil && m.ArticleType != nil {
		return *m.ArticleType
	}
	return 0
}

func (m *ArticleInfo) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *ArticleInfo) GetIsMain() int32 {
	if m != nil && m.IsMain != nil {
		return *m.IsMain
	}
	return 0
}

//添加查询文章
type ArticleInfoResponse struct {
	List                 []*ArticleInfo `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ArticleInfoResponse) Reset()         { *m = ArticleInfoResponse{} }
func (m *ArticleInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ArticleInfoResponse) ProtoMessage()    {}
func (*ArticleInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{100}
}
func (m *ArticleInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleInfoResponse.Merge(m, src)
}
func (m *ArticleInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArticleInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleInfoResponse proto.InternalMessageInfo

func (m *ArticleInfoResponse) GetList() []*ArticleInfo {
	if m != nil {
		return m.List
	}
	return nil
}

type ArticleCommentResponse struct {
	List                 []*share_message.ArticleComment `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                          `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *ArticleCommentResponse) Reset()         { *m = ArticleCommentResponse{} }
func (m *ArticleCommentResponse) String() string { return proto.CompactTextString(m) }
func (*ArticleCommentResponse) ProtoMessage()    {}
func (*ArticleCommentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{101}
}
func (m *ArticleCommentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleCommentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleCommentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleCommentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleCommentResponse.Merge(m, src)
}
func (m *ArticleCommentResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArticleCommentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleCommentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleCommentResponse proto.InternalMessageInfo

func (m *ArticleCommentResponse) GetList() []*share_message.ArticleComment {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ArticleCommentResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//小助手文章或者推文查询
type QueryArticleOrTweetsRequest struct {
	Querytype            *int32   `protobuf:"varint,1,opt,name=Querytype" json:"Querytype,omitempty"`
	Keyword              *string  `protobuf:"bytes,2,opt,name=Keyword" json:"Keyword,omitempty"`
	State                *int32   `protobuf:"varint,3,opt,name=State" json:"State,omitempty"`
	IsMain               *int32   `protobuf:"varint,4,opt,name=IsMain" json:"IsMain,omitempty"`
	ArticleType          *int32   `protobuf:"varint,5,opt,name=ArticleType" json:"ArticleType,omitempty"`
	BeginTimestamp       *int64   `protobuf:"varint,6,opt,name=BeginTimestamp" json:"BeginTimestamp,omitempty"`
	EndTimestamp         *int64   `protobuf:"varint,7,opt,name=EndTimestamp" json:"EndTimestamp,omitempty"`
	CurPage              *int32   `protobuf:"varint,8,opt,name=CurPage" json:"CurPage,omitempty"`
	PageSize             *int32   `protobuf:"varint,9,opt,name=PageSize" json:"PageSize,omitempty"`
	Ids                  []int64  `protobuf:"varint,10,rep,name=Ids" json:"Ids,omitempty"`
	Title                *string  `protobuf:"bytes,11,opt,name=title" json:"title,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryArticleOrTweetsRequest) Reset()         { *m = QueryArticleOrTweetsRequest{} }
func (m *QueryArticleOrTweetsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryArticleOrTweetsRequest) ProtoMessage()    {}
func (*QueryArticleOrTweetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{102}
}
func (m *QueryArticleOrTweetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryArticleOrTweetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryArticleOrTweetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryArticleOrTweetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryArticleOrTweetsRequest.Merge(m, src)
}
func (m *QueryArticleOrTweetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryArticleOrTweetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryArticleOrTweetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryArticleOrTweetsRequest proto.InternalMessageInfo

func (m *QueryArticleOrTweetsRequest) GetQuerytype() int32 {
	if m != nil && m.Querytype != nil {
		return *m.Querytype
	}
	return 0
}

func (m *QueryArticleOrTweetsRequest) GetKeyword() string {
	if m != nil && m.Keyword != nil {
		return *m.Keyword
	}
	return ""
}

func (m *QueryArticleOrTweetsRequest) GetState() int32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

func (m *QueryArticleOrTweetsRequest) GetIsMain() int32 {
	if m != nil && m.IsMain != nil {
		return *m.IsMain
	}
	return 0
}

func (m *QueryArticleOrTweetsRequest) GetArticleType() int32 {
	if m != nil && m.ArticleType != nil {
		return *m.ArticleType
	}
	return 0
}

func (m *QueryArticleOrTweetsRequest) GetBeginTimestamp() int64 {
	if m != nil && m.BeginTimestamp != nil {
		return *m.BeginTimestamp
	}
	return 0
}

func (m *QueryArticleOrTweetsRequest) GetEndTimestamp() int64 {
	if m != nil && m.EndTimestamp != nil {
		return *m.EndTimestamp
	}
	return 0
}

func (m *QueryArticleOrTweetsRequest) GetCurPage() int32 {
	if m != nil && m.CurPage != nil {
		return *m.CurPage
	}
	return 0
}

func (m *QueryArticleOrTweetsRequest) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *QueryArticleOrTweetsRequest) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *QueryArticleOrTweetsRequest) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

//客服绩效查询返回
type WaiterPerformanceResponse struct {
	List                 []*share_message.WaiterPerformance `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                             `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *WaiterPerformanceResponse) Reset()         { *m = WaiterPerformanceResponse{} }
func (m *WaiterPerformanceResponse) String() string { return proto.CompactTextString(m) }
func (*WaiterPerformanceResponse) ProtoMessage()    {}
func (*WaiterPerformanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{103}
}
func (m *WaiterPerformanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WaiterPerformanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WaiterPerformanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WaiterPerformanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaiterPerformanceResponse.Merge(m, src)
}
func (m *WaiterPerformanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *WaiterPerformanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WaiterPerformanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WaiterPerformanceResponse proto.InternalMessageInfo

func (m *WaiterPerformanceResponse) GetList() []*share_message.WaiterPerformance {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WaiterPerformanceResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//客服聊天记录列表查询返回
type IMmessageResponse struct {
	List                 []*share_message.IMmessage `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                     `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *IMmessageResponse) Reset()         { *m = IMmessageResponse{} }
func (m *IMmessageResponse) String() string { return proto.CompactTextString(m) }
func (*IMmessageResponse) ProtoMessage()    {}
func (*IMmessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{104}
}
func (m *IMmessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IMmessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IMmessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IMmessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IMmessageResponse.Merge(m, src)
}
func (m *IMmessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *IMmessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IMmessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IMmessageResponse proto.InternalMessageInfo

func (m *IMmessageResponse) GetList() []*share_message.IMmessage {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *IMmessageResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type IMmessageNopageResponse struct {
	List                 []*share_message.IMmessage `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *IMmessageNopageResponse) Reset()         { *m = IMmessageNopageResponse{} }
func (m *IMmessageNopageResponse) String() string { return proto.CompactTextString(m) }
func (*IMmessageNopageResponse) ProtoMessage()    {}
func (*IMmessageNopageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{105}
}
func (m *IMmessageNopageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IMmessageNopageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IMmessageNopageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IMmessageNopageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IMmessageNopageResponse.Merge(m, src)
}
func (m *IMmessageNopageResponse) XXX_Size() int {
	return m.Size()
}
func (m *IMmessageNopageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IMmessageNopageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IMmessageNopageResponse proto.InternalMessageInfo

func (m *IMmessageNopageResponse) GetList() []*share_message.IMmessage {
	if m != nil {
		return m.List
	}
	return nil
}

//客服常见问题列表查询返回
type WaiterFAQResponse struct {
	List                 []*share_message.WaiterFAQ `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                     `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *WaiterFAQResponse) Reset()         { *m = WaiterFAQResponse{} }
func (m *WaiterFAQResponse) String() string { return proto.CompactTextString(m) }
func (*WaiterFAQResponse) ProtoMessage()    {}
func (*WaiterFAQResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{106}
}
func (m *WaiterFAQResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WaiterFAQResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WaiterFAQResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WaiterFAQResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaiterFAQResponse.Merge(m, src)
}
func (m *WaiterFAQResponse) XXX_Size() int {
	return m.Size()
}
func (m *WaiterFAQResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WaiterFAQResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WaiterFAQResponse proto.InternalMessageInfo

func (m *WaiterFAQResponse) GetList() []*share_message.WaiterFAQ {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WaiterFAQResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//客服快捷语列表查询返回
type WaiterFastReplyResponse struct {
	List                 []*share_message.WaiterFastReply `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                           `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *WaiterFastReplyResponse) Reset()         { *m = WaiterFastReplyResponse{} }
func (m *WaiterFastReplyResponse) String() string { return proto.CompactTextString(m) }
func (*WaiterFastReplyResponse) ProtoMessage()    {}
func (*WaiterFastReplyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{107}
}
func (m *WaiterFastReplyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WaiterFastReplyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WaiterFastReplyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WaiterFastReplyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaiterFastReplyResponse.Merge(m, src)
}
func (m *WaiterFastReplyResponse) XXX_Size() int {
	return m.Size()
}
func (m *WaiterFastReplyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WaiterFastReplyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WaiterFastReplyResponse proto.InternalMessageInfo

func (m *WaiterFastReplyResponse) GetList() []*share_message.WaiterFastReply {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WaiterFastReplyResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//群管理
type TeamManager struct {
	TeamIds              []int64  `protobuf:"varint,1,rep,name=TeamIds" json:"TeamIds,omitempty"`
	Flag                 *int32   `protobuf:"varint,2,opt,name=Flag" json:"Flag,omitempty"`
	Hour                 *int32   `protobuf:"varint,3,opt,name=Hour" json:"Hour,omitempty"`
	Minutes              *int32   `protobuf:"varint,4,opt,name=Minutes" json:"Minutes,omitempty"`
	Reason               *string  `protobuf:"bytes,5,opt,name=Reason" json:"Reason,omitempty"`
	Day                  *int32   `protobuf:"varint,6,opt,name=Day" json:"Day,omitempty"`
	TeamId               *int64   `protobuf:"varint,7,opt,name=TeamId" json:"TeamId,omitempty"`
	NickName             []string `protobuf:"bytes,8,rep,name=NickName" json:"NickName,omitempty"`
	CloseTime            *int64   `protobuf:"varint,9,opt,name=CloseTime" json:"CloseTime,omitempty"`
	SendTime             *int64   `protobuf:"varint,10,opt,name=SendTime" json:"SendTime,omitempty"`
	LogId                *int64   `protobuf:"varint,11,opt,name=LogId" json:"LogId,omitempty"`
	PlayerId             *int64   `protobuf:"varint,12,opt,name=PlayerId" json:"PlayerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeamManager) Reset()         { *m = TeamManager{} }
func (m *TeamManager) String() string { return proto.CompactTextString(m) }
func (*TeamManager) ProtoMessage()    {}
func (*TeamManager) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{108}
}
func (m *TeamManager) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamManager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamManager.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamManager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamManager.Merge(m, src)
}
func (m *TeamManager) XXX_Size() int {
	return m.Size()
}
func (m *TeamManager) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamManager.DiscardUnknown(m)
}

var xxx_messageInfo_TeamManager proto.InternalMessageInfo

func (m *TeamManager) GetTeamIds() []int64 {
	if m != nil {
		return m.TeamIds
	}
	return nil
}

func (m *TeamManager) GetFlag() int32 {
	if m != nil && m.Flag != nil {
		return *m.Flag
	}
	return 0
}

func (m *TeamManager) GetHour() int32 {
	if m != nil && m.Hour != nil {
		return *m.Hour
	}
	return 0
}

func (m *TeamManager) GetMinutes() int32 {
	if m != nil && m.Minutes != nil {
		return *m.Minutes
	}
	return 0
}

func (m *TeamManager) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

func (m *TeamManager) GetDay() int32 {
	if m != nil && m.Day != nil {
		return *m.Day
	}
	return 0
}

func (m *TeamManager) GetTeamId() int64 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *TeamManager) GetNickName() []string {
	if m != nil {
		return m.NickName
	}
	return nil
}

func (m *TeamManager) GetCloseTime() int64 {
	if m != nil && m.CloseTime != nil {
		return *m.CloseTime
	}
	return 0
}

func (m *TeamManager) GetSendTime() int64 {
	if m != nil && m.SendTime != nil {
		return *m.SendTime
	}
	return 0
}

func (m *TeamManager) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *TeamManager) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

type CheckScoreRequest struct {
	Type                 *int32   `protobuf:"varint,1,opt,name=Type" json:"Type,omitempty"`
	Key                  *string  `protobuf:"bytes,2,opt,name=Key" json:"Key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckScoreRequest) Reset()         { *m = CheckScoreRequest{} }
func (m *CheckScoreRequest) String() string { return proto.CompactTextString(m) }
func (*CheckScoreRequest) ProtoMessage()    {}
func (*CheckScoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{109}
}
func (m *CheckScoreRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckScoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckScoreRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckScoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckScoreRequest.Merge(m, src)
}
func (m *CheckScoreRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckScoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckScoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckScoreRequest proto.InternalMessageInfo

func (m *CheckScoreRequest) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CheckScoreRequest) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

type CheckScoreResponse struct {
	EvilFlag             *int32   `protobuf:"varint,1,opt,name=EvilFlag" json:"EvilFlag,omitempty"`
	EvilType             *int32   `protobuf:"varint,2,opt,name=EvilType" json:"EvilType,omitempty"`
	Score                *int32   `protobuf:"varint,3,opt,name=Score" json:"Score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckScoreResponse) Reset()         { *m = CheckScoreResponse{} }
func (m *CheckScoreResponse) String() string { return proto.CompactTextString(m) }
func (*CheckScoreResponse) ProtoMessage()    {}
func (*CheckScoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{110}
}
func (m *CheckScoreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckScoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckScoreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckScoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckScoreResponse.Merge(m, src)
}
func (m *CheckScoreResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckScoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckScoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckScoreResponse proto.InternalMessageInfo

func (m *CheckScoreResponse) GetEvilFlag() int32 {
	if m != nil && m.EvilFlag != nil {
		return *m.EvilFlag
	}
	return 0
}

func (m *CheckScoreResponse) GetEvilType() int32 {
	if m != nil && m.EvilType != nil {
		return *m.EvilType
	}
	return 0
}

func (m *CheckScoreResponse) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

//  获取动态详情
type DynamicListRequest struct {
	CurPage              *int32   `protobuf:"varint,1,opt,name=CurPage" json:"CurPage,omitempty"`
	PageSize             *int32   `protobuf:"varint,2,opt,name=PageSize" json:"PageSize,omitempty"`
	Keyword              *string  `protobuf:"bytes,3,opt,name=Keyword" json:"Keyword,omitempty"`
	Type                 *int32   `protobuf:"varint,4,opt,name=Type" json:"Type,omitempty"`
	IsTop                *int32   `protobuf:"varint,5,opt,name=IsTop" json:"IsTop,omitempty"`
	IsBsTop              *int32   `protobuf:"varint,6,opt,name=IsBsTop" json:"IsBsTop,omitempty"`
	IsShield             *int32   `protobuf:"varint,7,opt,name=IsShield" json:"IsShield,omitempty"`
	BeginTimestamp       *int64   `protobuf:"varint,8,opt,name=BeginTimestamp" json:"BeginTimestamp,omitempty"`
	EndTimestamp         *int64   `protobuf:"varint,9,opt,name=EndTimestamp" json:"EndTimestamp,omitempty"`
	LogId                *int32   `protobuf:"varint,10,opt,name=LogId" json:"LogId,omitempty"`
	Status               *int32   `protobuf:"varint,11,opt,name=Status" json:"Status,omitempty"`
	Check                *int32   `protobuf:"varint,31,opt,name=Check" json:"Check,omitempty"`
	ListType             *int32   `protobuf:"varint,32,opt,name=ListType" json:"ListType,omitempty"`
	ReportCountMin       *int64   `protobuf:"varint,33,opt,name=ReportCountMin" json:"ReportCountMin,omitempty"`
	ReportCountMax       *int64   `protobuf:"varint,34,opt,name=ReportCountMax" json:"ReportCountMax,omitempty"`
	TopicType            *int64   `protobuf:"varint,35,opt,name=TopicType" json:"TopicType,omitempty"`
	TopicId              []int64  `protobuf:"varint,36,rep,name=TopicId" json:"TopicId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DynamicListRequest) Reset()         { *m = DynamicListRequest{} }
func (m *DynamicListRequest) String() string { return proto.CompactTextString(m) }
func (*DynamicListRequest) ProtoMessage()    {}
func (*DynamicListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{111}
}
func (m *DynamicListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynamicListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynamicListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynamicListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynamicListRequest.Merge(m, src)
}
func (m *DynamicListRequest) XXX_Size() int {
	return m.Size()
}
func (m *DynamicListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DynamicListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DynamicListRequest proto.InternalMessageInfo

func (m *DynamicListRequest) GetCurPage() int32 {
	if m != nil && m.CurPage != nil {
		return *m.CurPage
	}
	return 0
}

func (m *DynamicListRequest) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *DynamicListRequest) GetKeyword() string {
	if m != nil && m.Keyword != nil {
		return *m.Keyword
	}
	return ""
}

func (m *DynamicListRequest) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *DynamicListRequest) GetIsTop() int32 {
	if m != nil && m.IsTop != nil {
		return *m.IsTop
	}
	return 0
}

func (m *DynamicListRequest) GetIsBsTop() int32 {
	if m != nil && m.IsBsTop != nil {
		return *m.IsBsTop
	}
	return 0
}

func (m *DynamicListRequest) GetIsShield() int32 {
	if m != nil && m.IsShield != nil {
		return *m.IsShield
	}
	return 0
}

func (m *DynamicListRequest) GetBeginTimestamp() int64 {
	if m != nil && m.BeginTimestamp != nil {
		return *m.BeginTimestamp
	}
	return 0
}

func (m *DynamicListRequest) GetEndTimestamp() int64 {
	if m != nil && m.EndTimestamp != nil {
		return *m.EndTimestamp
	}
	return 0
}

func (m *DynamicListRequest) GetLogId() int32 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *DynamicListRequest) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *DynamicListRequest) GetCheck() int32 {
	if m != nil && m.Check != nil {
		return *m.Check
	}
	return 0
}

func (m *DynamicListRequest) GetListType() int32 {
	if m != nil && m.ListType != nil {
		return *m.ListType
	}
	return 0
}

func (m *DynamicListRequest) GetReportCountMin() int64 {
	if m != nil && m.ReportCountMin != nil {
		return *m.ReportCountMin
	}
	return 0
}

func (m *DynamicListRequest) GetReportCountMax() int64 {
	if m != nil && m.ReportCountMax != nil {
		return *m.ReportCountMax
	}
	return 0
}

func (m *DynamicListRequest) GetTopicType() int64 {
	if m != nil && m.TopicType != nil {
		return *m.TopicType
	}
	return 0
}

func (m *DynamicListRequest) GetTopicId() []int64 {
	if m != nil {
		return m.TopicId
	}
	return nil
}

type DynamicListResponse struct {
	List                 []*share_message.DynamicData `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                       `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *DynamicListResponse) Reset()         { *m = DynamicListResponse{} }
func (m *DynamicListResponse) String() string { return proto.CompactTextString(m) }
func (*DynamicListResponse) ProtoMessage()    {}
func (*DynamicListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{112}
}
func (m *DynamicListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynamicListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynamicListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynamicListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynamicListResponse.Merge(m, src)
}
func (m *DynamicListResponse) XXX_Size() int {
	return m.Size()
}
func (m *DynamicListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DynamicListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DynamicListResponse proto.InternalMessageInfo

func (m *DynamicListResponse) GetList() []*share_message.DynamicData {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *DynamicListResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type DirtyWordsResponse struct {
	List                 []*share_message.DirtyWords `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                      `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *DirtyWordsResponse) Reset()         { *m = DirtyWordsResponse{} }
func (m *DirtyWordsResponse) String() string { return proto.CompactTextString(m) }
func (*DirtyWordsResponse) ProtoMessage()    {}
func (*DirtyWordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{113}
}
func (m *DirtyWordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirtyWordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirtyWordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirtyWordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirtyWordsResponse.Merge(m, src)
}
func (m *DirtyWordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *DirtyWordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DirtyWordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DirtyWordsResponse proto.InternalMessageInfo

func (m *DirtyWordsResponse) GetList() []*share_message.DirtyWords {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *DirtyWordsResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type SignatureResponse struct {
	List                 []*share_message.Signature `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                     `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *SignatureResponse) Reset()         { *m = SignatureResponse{} }
func (m *SignatureResponse) String() string { return proto.CompactTextString(m) }
func (*SignatureResponse) ProtoMessage()    {}
func (*SignatureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{114}
}
func (m *SignatureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignatureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignatureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignatureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureResponse.Merge(m, src)
}
func (m *SignatureResponse) XXX_Size() int {
	return m.Size()
}
func (m *SignatureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureResponse proto.InternalMessageInfo

func (m *SignatureResponse) GetList() []*share_message.Signature {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SignatureResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type CommentList struct {
	List                 []*share_message.CommentData `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                       `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *CommentList) Reset()         { *m = CommentList{} }
func (m *CommentList) String() string { return proto.CompactTextString(m) }
func (*CommentList) ProtoMessage()    {}
func (*CommentList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{115}
}
func (m *CommentList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommentList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommentList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommentList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentList.Merge(m, src)
}
func (m *CommentList) XXX_Size() int {
	return m.Size()
}
func (m *CommentList) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentList.DiscardUnknown(m)
}

var xxx_messageInfo_CommentList proto.InternalMessageInfo

func (m *CommentList) GetList() []*share_message.CommentData {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *CommentList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type PlayerFreezeLogResponse struct {
	List                 []*share_message.PlayerFreezeLog `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                           `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *PlayerFreezeLogResponse) Reset()         { *m = PlayerFreezeLogResponse{} }
func (m *PlayerFreezeLogResponse) String() string { return proto.CompactTextString(m) }
func (*PlayerFreezeLogResponse) ProtoMessage()    {}
func (*PlayerFreezeLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{116}
}
func (m *PlayerFreezeLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerFreezeLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerFreezeLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerFreezeLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerFreezeLogResponse.Merge(m, src)
}
func (m *PlayerFreezeLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *PlayerFreezeLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerFreezeLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerFreezeLogResponse proto.InternalMessageInfo

func (m *PlayerFreezeLogResponse) GetList() []*share_message.PlayerFreezeLog {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *PlayerFreezeLogResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type DelDynamicRequest struct {
	List                 []*QueryDataById `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	Note                 *string          `protobuf:"bytes,2,opt,name=Note" json:"Note,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DelDynamicRequest) Reset()         { *m = DelDynamicRequest{} }
func (m *DelDynamicRequest) String() string { return proto.CompactTextString(m) }
func (*DelDynamicRequest) ProtoMessage()    {}
func (*DelDynamicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{117}
}
func (m *DelDynamicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelDynamicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelDynamicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelDynamicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelDynamicRequest.Merge(m, src)
}
func (m *DelDynamicRequest) XXX_Size() int {
	return m.Size()
}
func (m *DelDynamicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DelDynamicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DelDynamicRequest proto.InternalMessageInfo

func (m *DelDynamicRequest) GetList() []*QueryDataById {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *DelDynamicRequest) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

type PlayerCancleAccountListResponse struct {
	List                 []*share_message.PlayerCancleAccount `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                               `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *PlayerCancleAccountListResponse) Reset()         { *m = PlayerCancleAccountListResponse{} }
func (m *PlayerCancleAccountListResponse) String() string { return proto.CompactTextString(m) }
func (*PlayerCancleAccountListResponse) ProtoMessage()    {}
func (*PlayerCancleAccountListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{118}
}
func (m *PlayerCancleAccountListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerCancleAccountListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerCancleAccountListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerCancleAccountListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerCancleAccountListResponse.Merge(m, src)
}
func (m *PlayerCancleAccountListResponse) XXX_Size() int {
	return m.Size()
}
func (m *PlayerCancleAccountListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerCancleAccountListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerCancleAccountListResponse proto.InternalMessageInfo

func (m *PlayerCancleAccountListResponse) GetList() []*share_message.PlayerCancleAccount {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *PlayerCancleAccountListResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type ChatLogRequest struct {
	BeginTimestamp       *int64   `protobuf:"varint,1,opt,name=BeginTimestamp" json:"BeginTimestamp,omitempty"`
	EndTimestamp         *int64   `protobuf:"varint,2,opt,name=EndTimestamp" json:"EndTimestamp,omitempty"`
	Types                *int32   `protobuf:"varint,3,opt,name=Types" json:"Types,omitempty"`
	Keyword1             *string  `protobuf:"bytes,4,opt,name=Keyword1" json:"Keyword1,omitempty"`
	Keyword2             *string  `protobuf:"bytes,5,opt,name=Keyword2" json:"Keyword2,omitempty"`
	Keyword3             *string  `protobuf:"bytes,6,opt,name=Keyword3" json:"Keyword3,omitempty"`
	CurPage              *int32   `protobuf:"varint,7,req,name=CurPage" json:"CurPage,omitempty"`
	PageSize             *int32   `protobuf:"varint,8,req,name=PageSize" json:"PageSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChatLogRequest) Reset()         { *m = ChatLogRequest{} }
func (m *ChatLogRequest) String() string { return proto.CompactTextString(m) }
func (*ChatLogRequest) ProtoMessage()    {}
func (*ChatLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{119}
}
func (m *ChatLogRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatLogRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatLogRequest.Merge(m, src)
}
func (m *ChatLogRequest) XXX_Size() int {
	return m.Size()
}
func (m *ChatLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChatLogRequest proto.InternalMessageInfo

func (m *ChatLogRequest) GetBeginTimestamp() int64 {
	if m != nil && m.BeginTimestamp != nil {
		return *m.BeginTimestamp
	}
	return 0
}

func (m *ChatLogRequest) GetEndTimestamp() int64 {
	if m != nil && m.EndTimestamp != nil {
		return *m.EndTimestamp
	}
	return 0
}

func (m *ChatLogRequest) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *ChatLogRequest) GetKeyword1() string {
	if m != nil && m.Keyword1 != nil {
		return *m.Keyword1
	}
	return ""
}

func (m *ChatLogRequest) GetKeyword2() string {
	if m != nil && m.Keyword2 != nil {
		return *m.Keyword2
	}
	return ""
}

func (m *ChatLogRequest) GetKeyword3() string {
	if m != nil && m.Keyword3 != nil {
		return *m.Keyword3
	}
	return ""
}

func (m *ChatLogRequest) GetCurPage() int32 {
	if m != nil && m.CurPage != nil {
		return *m.CurPage
	}
	return 0
}

func (m *ChatLogRequest) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

type PersonalChatLogResponse struct {
	List                 []*share_message.PersonalChatLog `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                           `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *PersonalChatLogResponse) Reset()         { *m = PersonalChatLogResponse{} }
func (m *PersonalChatLogResponse) String() string { return proto.CompactTextString(m) }
func (*PersonalChatLogResponse) ProtoMessage()    {}
func (*PersonalChatLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{120}
}
func (m *PersonalChatLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersonalChatLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PersonalChatLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PersonalChatLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersonalChatLogResponse.Merge(m, src)
}
func (m *PersonalChatLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *PersonalChatLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PersonalChatLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PersonalChatLogResponse proto.InternalMessageInfo

func (m *PersonalChatLogResponse) GetList() []*share_message.PersonalChatLog {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *PersonalChatLogResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type TeamChatLogResponse struct {
	List                 []*share_message.TeamChatLog `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                       `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *TeamChatLogResponse) Reset()         { *m = TeamChatLogResponse{} }
func (m *TeamChatLogResponse) String() string { return proto.CompactTextString(m) }
func (*TeamChatLogResponse) ProtoMessage()    {}
func (*TeamChatLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{121}
}
func (m *TeamChatLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamChatLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamChatLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamChatLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamChatLogResponse.Merge(m, src)
}
func (m *TeamChatLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *TeamChatLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamChatLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TeamChatLogResponse proto.InternalMessageInfo

func (m *TeamChatLogResponse) GetList() []*share_message.TeamChatLog {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *TeamChatLogResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type PlayerPortraitResponse struct {
	List                 []*NameValueTag `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	Total                *int64          `protobuf:"varint,4,opt,name=Total" json:"Total,omitempty"`
	ManCount             *int64          `protobuf:"varint,2,opt,name=ManCount" json:"ManCount,omitempty"`
	WomanCount           *int64          `protobuf:"varint,3,opt,name=WomanCount" json:"WomanCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PlayerPortraitResponse) Reset()         { *m = PlayerPortraitResponse{} }
func (m *PlayerPortraitResponse) String() string { return proto.CompactTextString(m) }
func (*PlayerPortraitResponse) ProtoMessage()    {}
func (*PlayerPortraitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{122}
}
func (m *PlayerPortraitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerPortraitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerPortraitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerPortraitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerPortraitResponse.Merge(m, src)
}
func (m *PlayerPortraitResponse) XXX_Size() int {
	return m.Size()
}
func (m *PlayerPortraitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerPortraitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerPortraitResponse proto.InternalMessageInfo

func (m *PlayerPortraitResponse) GetList() []*NameValueTag {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *PlayerPortraitResponse) GetTotal() int64 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *PlayerPortraitResponse) GetManCount() int64 {
	if m != nil && m.ManCount != nil {
		return *m.ManCount
	}
	return 0
}

func (m *PlayerPortraitResponse) GetWomanCount() int64 {
	if m != nil && m.WomanCount != nil {
		return *m.WomanCount
	}
	return 0
}

type AdvListResponse struct {
	List                 []*share_message.AdvSetting `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                      `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *AdvListResponse) Reset()         { *m = AdvListResponse{} }
func (m *AdvListResponse) String() string { return proto.CompactTextString(m) }
func (*AdvListResponse) ProtoMessage()    {}
func (*AdvListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{123}
}
func (m *AdvListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdvListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdvListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdvListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvListResponse.Merge(m, src)
}
func (m *AdvListResponse) XXX_Size() int {
	return m.Size()
}
func (m *AdvListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AdvListResponse proto.InternalMessageInfo

func (m *AdvListResponse) GetList() []*share_message.AdvSetting {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *AdvListResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type IndexTipsResponse struct {
	List                 []*share_message.IndexTips `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                     `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *IndexTipsResponse) Reset()         { *m = IndexTipsResponse{} }
func (m *IndexTipsResponse) String() string { return proto.CompactTextString(m) }
func (*IndexTipsResponse) ProtoMessage()    {}
func (*IndexTipsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{124}
}
func (m *IndexTipsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexTipsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexTipsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexTipsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexTipsResponse.Merge(m, src)
}
func (m *IndexTipsResponse) XXX_Size() int {
	return m.Size()
}
func (m *IndexTipsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexTipsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IndexTipsResponse proto.InternalMessageInfo

func (m *IndexTipsResponse) GetList() []*share_message.IndexTips {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *IndexTipsResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type PopSuspendResponse struct {
	List                 []*share_message.PopSuspend `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                      `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *PopSuspendResponse) Reset()         { *m = PopSuspendResponse{} }
func (m *PopSuspendResponse) String() string { return proto.CompactTextString(m) }
func (*PopSuspendResponse) ProtoMessage()    {}
func (*PopSuspendResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{125}
}
func (m *PopSuspendResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PopSuspendResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PopSuspendResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PopSuspendResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PopSuspendResponse.Merge(m, src)
}
func (m *PopSuspendResponse) XXX_Size() int {
	return m.Size()
}
func (m *PopSuspendResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PopSuspendResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PopSuspendResponse proto.InternalMessageInfo

func (m *PopSuspendResponse) GetList() []*share_message.PopSuspend {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *PopSuspendResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type ActivityReportResponse struct {
	List                 []*share_message.ActivityReport `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                          `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *ActivityReportResponse) Reset()         { *m = ActivityReportResponse{} }
func (m *ActivityReportResponse) String() string { return proto.CompactTextString(m) }
func (*ActivityReportResponse) ProtoMessage()    {}
func (*ActivityReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{126}
}
func (m *ActivityReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityReportResponse.Merge(m, src)
}
func (m *ActivityReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *ActivityReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityReportResponse proto.InternalMessageInfo

func (m *ActivityReportResponse) GetList() []*share_message.ActivityReport {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ActivityReportResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type TopicTypeResponse struct {
	List                 []*share_message.TopicType `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                     `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *TopicTypeResponse) Reset()         { *m = TopicTypeResponse{} }
func (m *TopicTypeResponse) String() string { return proto.CompactTextString(m) }
func (*TopicTypeResponse) ProtoMessage()    {}
func (*TopicTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{127}
}
func (m *TopicTypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicTypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicTypeResponse.Merge(m, src)
}
func (m *TopicTypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *TopicTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TopicTypeResponse proto.InternalMessageInfo

func (m *TopicTypeResponse) GetList() []*share_message.TopicType {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *TopicTypeResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type TopicResponse struct {
	List                 []*share_message.Topic `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                 `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *TopicResponse) Reset()         { *m = TopicResponse{} }
func (m *TopicResponse) String() string { return proto.CompactTextString(m) }
func (*TopicResponse) ProtoMessage()    {}
func (*TopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{128}
}
func (m *TopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicResponse.Merge(m, src)
}
func (m *TopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *TopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TopicResponse proto.InternalMessageInfo

func (m *TopicResponse) GetList() []*share_message.Topic {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *TopicResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type TopicApplyListRes struct {
	List                 []*share_message.ApplyEditTopicInfo `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                              `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *TopicApplyListRes) Reset()         { *m = TopicApplyListRes{} }
func (m *TopicApplyListRes) String() string { return proto.CompactTextString(m) }
func (*TopicApplyListRes) ProtoMessage()    {}
func (*TopicApplyListRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{129}
}
func (m *TopicApplyListRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicApplyListRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicApplyListRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicApplyListRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicApplyListRes.Merge(m, src)
}
func (m *TopicApplyListRes) XXX_Size() int {
	return m.Size()
}
func (m *TopicApplyListRes) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicApplyListRes.DiscardUnknown(m)
}

var xxx_messageInfo_TopicApplyListRes proto.InternalMessageInfo

func (m *TopicApplyListRes) GetList() []*share_message.ApplyEditTopicInfo {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *TopicApplyListRes) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type QueryTopicApplyRes struct {
	New                  *share_message.ApplyEditTopicInfo `protobuf:"bytes,1,opt,name=New" json:"New,omitempty"`
	Old                  *share_message.Topic              `protobuf:"bytes,2,opt,name=Old" json:"Old,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *QueryTopicApplyRes) Reset()         { *m = QueryTopicApplyRes{} }
func (m *QueryTopicApplyRes) String() string { return proto.CompactTextString(m) }
func (*QueryTopicApplyRes) ProtoMessage()    {}
func (*QueryTopicApplyRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{130}
}
func (m *QueryTopicApplyRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopicApplyRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopicApplyRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopicApplyRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopicApplyRes.Merge(m, src)
}
func (m *QueryTopicApplyRes) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopicApplyRes) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopicApplyRes.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopicApplyRes proto.InternalMessageInfo

func (m *QueryTopicApplyRes) GetNew() *share_message.ApplyEditTopicInfo {
	if m != nil {
		return m.New
	}
	return nil
}

func (m *QueryTopicApplyRes) GetOld() *share_message.Topic {
	if m != nil {
		return m.Old
	}
	return nil
}

type AuditTopicApplyReq struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"Id,omitempty"`
	Status               *int32   `protobuf:"varint,2,opt,name=Status" json:"Status,omitempty"`
	Note                 []int32  `protobuf:"varint,3,rep,name=Note" json:"Note,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuditTopicApplyReq) Reset()         { *m = AuditTopicApplyReq{} }
func (m *AuditTopicApplyReq) String() string { return proto.CompactTextString(m) }
func (*AuditTopicApplyReq) ProtoMessage()    {}
func (*AuditTopicApplyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{131}
}
func (m *AuditTopicApplyReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuditTopicApplyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuditTopicApplyReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuditTopicApplyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuditTopicApplyReq.Merge(m, src)
}
func (m *AuditTopicApplyReq) XXX_Size() int {
	return m.Size()
}
func (m *AuditTopicApplyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AuditTopicApplyReq.DiscardUnknown(m)
}

var xxx_messageInfo_AuditTopicApplyReq proto.InternalMessageInfo

func (m *AuditTopicApplyReq) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *AuditTopicApplyReq) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *AuditTopicApplyReq) GetNote() []int32 {
	if m != nil {
		return m.Note
	}
	return nil
}

type ApplyTopicMasterRes struct {
	List                 []*share_message.ApplyTopicMaster `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                            `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *ApplyTopicMasterRes) Reset()         { *m = ApplyTopicMasterRes{} }
func (m *ApplyTopicMasterRes) String() string { return proto.CompactTextString(m) }
func (*ApplyTopicMasterRes) ProtoMessage()    {}
func (*ApplyTopicMasterRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{132}
}
func (m *ApplyTopicMasterRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyTopicMasterRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyTopicMasterRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyTopicMasterRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyTopicMasterRes.Merge(m, src)
}
func (m *ApplyTopicMasterRes) XXX_Size() int {
	return m.Size()
}
func (m *ApplyTopicMasterRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyTopicMasterRes.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyTopicMasterRes proto.InternalMessageInfo

func (m *ApplyTopicMasterRes) GetList() []*share_message.ApplyTopicMaster {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ApplyTopicMasterRes) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type RecallReportResponse struct {
	List                 []*share_message.RecallReport `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                        `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *RecallReportResponse) Reset()         { *m = RecallReportResponse{} }
func (m *RecallReportResponse) String() string { return proto.CompactTextString(m) }
func (*RecallReportResponse) ProtoMessage()    {}
func (*RecallReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{133}
}
func (m *RecallReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecallReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecallReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecallReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecallReportResponse.Merge(m, src)
}
func (m *RecallReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecallReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecallReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecallReportResponse proto.InternalMessageInfo

func (m *RecallReportResponse) GetList() []*share_message.RecallReport {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *RecallReportResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type RecallplayerLogResponse struct {
	List                 []*share_message.RecallPlayerLog `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                           `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *RecallplayerLogResponse) Reset()         { *m = RecallplayerLogResponse{} }
func (m *RecallplayerLogResponse) String() string { return proto.CompactTextString(m) }
func (*RecallplayerLogResponse) ProtoMessage()    {}
func (*RecallplayerLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{134}
}
func (m *RecallplayerLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecallplayerLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecallplayerLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecallplayerLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecallplayerLogResponse.Merge(m, src)
}
func (m *RecallplayerLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecallplayerLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecallplayerLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecallplayerLogResponse proto.InternalMessageInfo

func (m *RecallplayerLogResponse) GetList() []*share_message.RecallPlayerLog {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *RecallplayerLogResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type CoinItemListResponse struct {
	List                 []*share_message.CoinRecharge `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                        `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *CoinItemListResponse) Reset()         { *m = CoinItemListResponse{} }
func (m *CoinItemListResponse) String() string { return proto.CompactTextString(m) }
func (*CoinItemListResponse) ProtoMessage()    {}
func (*CoinItemListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{135}
}
func (m *CoinItemListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinItemListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinItemListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinItemListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinItemListResponse.Merge(m, src)
}
func (m *CoinItemListResponse) XXX_Size() int {
	return m.Size()
}
func (m *CoinItemListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinItemListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CoinItemListResponse proto.InternalMessageInfo

func (m *CoinItemListResponse) GetList() []*share_message.CoinRecharge {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *CoinItemListResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type QueryNearSetResponse struct {
	List                 []*share_message.NearSet `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                   `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *QueryNearSetResponse) Reset()         { *m = QueryNearSetResponse{} }
func (m *QueryNearSetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNearSetResponse) ProtoMessage()    {}
func (*QueryNearSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{136}
}
func (m *QueryNearSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNearSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNearSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNearSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNearSetResponse.Merge(m, src)
}
func (m *QueryNearSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNearSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNearSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNearSetResponse proto.InternalMessageInfo

func (m *QueryNearSetResponse) GetList() []*share_message.NearSet {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *QueryNearSetResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type CoinChangeLogResponse struct {
	List                 []*CoinLogList `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32         `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CoinChangeLogResponse) Reset()         { *m = CoinChangeLogResponse{} }
func (m *CoinChangeLogResponse) String() string { return proto.CompactTextString(m) }
func (*CoinChangeLogResponse) ProtoMessage()    {}
func (*CoinChangeLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{137}
}
func (m *CoinChangeLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinChangeLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinChangeLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinChangeLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinChangeLogResponse.Merge(m, src)
}
func (m *CoinChangeLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *CoinChangeLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinChangeLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CoinChangeLogResponse proto.InternalMessageInfo

func (m *CoinChangeLogResponse) GetList() []*CoinLogList {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *CoinChangeLogResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type CoinLogList struct {
	InLine               *share_message.CoinChangeLog `protobuf:"bytes,1,req,name=InLine" json:"InLine,omitempty"`
	Extend               *share_message.GoldExtendLog `protobuf:"bytes,2,opt,name=Extend" json:"Extend,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *CoinLogList) Reset()         { *m = CoinLogList{} }
func (m *CoinLogList) String() string { return proto.CompactTextString(m) }
func (*CoinLogList) ProtoMessage()    {}
func (*CoinLogList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{138}
}
func (m *CoinLogList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinLogList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinLogList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinLogList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinLogList.Merge(m, src)
}
func (m *CoinLogList) XXX_Size() int {
	return m.Size()
}
func (m *CoinLogList) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinLogList.DiscardUnknown(m)
}

var xxx_messageInfo_CoinLogList proto.InternalMessageInfo

func (m *CoinLogList) GetInLine() *share_message.CoinChangeLog {
	if m != nil {
		return m.InLine
	}
	return nil
}

func (m *CoinLogList) GetExtend() *share_message.GoldExtendLog {
	if m != nil {
		return m.Extend
	}
	return nil
}

type CoinProductResponse struct {
	List                 []*share_message.CoinProduct `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                       `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *CoinProductResponse) Reset()         { *m = CoinProductResponse{} }
func (m *CoinProductResponse) String() string { return proto.CompactTextString(m) }
func (*CoinProductResponse) ProtoMessage()    {}
func (*CoinProductResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{139}
}
func (m *CoinProductResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinProductResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinProductResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinProductResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinProductResponse.Merge(m, src)
}
func (m *CoinProductResponse) XXX_Size() int {
	return m.Size()
}
func (m *CoinProductResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinProductResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CoinProductResponse proto.InternalMessageInfo

func (m *CoinProductResponse) GetList() []*share_message.CoinProduct {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *CoinProductResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type PropsItemResponse struct {
	List                 []*share_message.PropsItem `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                     `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *PropsItemResponse) Reset()         { *m = PropsItemResponse{} }
func (m *PropsItemResponse) String() string { return proto.CompactTextString(m) }
func (*PropsItemResponse) ProtoMessage()    {}
func (*PropsItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{140}
}
func (m *PropsItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PropsItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PropsItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PropsItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PropsItemResponse.Merge(m, src)
}
func (m *PropsItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *PropsItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PropsItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PropsItemResponse proto.InternalMessageInfo

func (m *PropsItemResponse) GetList() []*share_message.PropsItem {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *PropsItemResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type PlayerBagItemResponse struct {
	List                 []*share_message.PlayerBagItem `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                         `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *PlayerBagItemResponse) Reset()         { *m = PlayerBagItemResponse{} }
func (m *PlayerBagItemResponse) String() string { return proto.CompactTextString(m) }
func (*PlayerBagItemResponse) ProtoMessage()    {}
func (*PlayerBagItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{141}
}
func (m *PlayerBagItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerBagItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerBagItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerBagItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerBagItemResponse.Merge(m, src)
}
func (m *PlayerBagItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *PlayerBagItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerBagItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerBagItemResponse proto.InternalMessageInfo

func (m *PlayerBagItemResponse) GetList() []*share_message.PlayerBagItem {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *PlayerBagItemResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type PlayerGetPropsLogResponse struct {
	List                 []*share_message.PlayerGetPropsLog `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                             `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *PlayerGetPropsLogResponse) Reset()         { *m = PlayerGetPropsLogResponse{} }
func (m *PlayerGetPropsLogResponse) String() string { return proto.CompactTextString(m) }
func (*PlayerGetPropsLogResponse) ProtoMessage()    {}
func (*PlayerGetPropsLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{142}
}
func (m *PlayerGetPropsLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerGetPropsLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerGetPropsLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerGetPropsLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerGetPropsLogResponse.Merge(m, src)
}
func (m *PlayerGetPropsLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *PlayerGetPropsLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerGetPropsLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerGetPropsLogResponse proto.InternalMessageInfo

func (m *PlayerGetPropsLogResponse) GetList() []*share_message.PlayerGetPropsLog {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *PlayerGetPropsLogResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type CoinProductReportResponse struct {
	List                 []*share_message.CoinProductReport `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                             `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *CoinProductReportResponse) Reset()         { *m = CoinProductReportResponse{} }
func (m *CoinProductReportResponse) String() string { return proto.CompactTextString(m) }
func (*CoinProductReportResponse) ProtoMessage()    {}
func (*CoinProductReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{143}
}
func (m *CoinProductReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinProductReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinProductReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinProductReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinProductReportResponse.Merge(m, src)
}
func (m *CoinProductReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *CoinProductReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinProductReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CoinProductReportResponse proto.InternalMessageInfo

func (m *CoinProductReportResponse) GetList() []*share_message.CoinProductReport {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *CoinProductReportResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type NewsSourceResponse struct {
	List                 []*share_message.TableESPortsRealTimeInfo `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                                    `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *NewsSourceResponse) Reset()         { *m = NewsSourceResponse{} }
func (m *NewsSourceResponse) String() string { return proto.CompactTextString(m) }
func (*NewsSourceResponse) ProtoMessage()    {}
func (*NewsSourceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{144}
}
func (m *NewsSourceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewsSourceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewsSourceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewsSourceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewsSourceResponse.Merge(m, src)
}
func (m *NewsSourceResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewsSourceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewsSourceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewsSourceResponse proto.InternalMessageInfo

func (m *NewsSourceResponse) GetList() []*share_message.TableESPortsRealTimeInfo {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *NewsSourceResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type VideoSourceResponse struct {
	List                 []*share_message.TableESPortsVideoInfo `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                                 `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *VideoSourceResponse) Reset()         { *m = VideoSourceResponse{} }
func (m *VideoSourceResponse) String() string { return proto.CompactTextString(m) }
func (*VideoSourceResponse) ProtoMessage()    {}
func (*VideoSourceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{145}
}
func (m *VideoSourceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoSourceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoSourceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoSourceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoSourceResponse.Merge(m, src)
}
func (m *VideoSourceResponse) XXX_Size() int {
	return m.Size()
}
func (m *VideoSourceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoSourceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VideoSourceResponse proto.InternalMessageInfo

func (m *VideoSourceResponse) GetList() []*share_message.TableESPortsVideoInfo {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *VideoSourceResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type CrawlJobResponse struct {
	List                 []*share_message.TableCrawlJob `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                         `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *CrawlJobResponse) Reset()         { *m = CrawlJobResponse{} }
func (m *CrawlJobResponse) String() string { return proto.CompactTextString(m) }
func (*CrawlJobResponse) ProtoMessage()    {}
func (*CrawlJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{146}
}
func (m *CrawlJobResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrawlJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrawlJobResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrawlJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrawlJobResponse.Merge(m, src)
}
func (m *CrawlJobResponse) XXX_Size() int {
	return m.Size()
}
func (m *CrawlJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CrawlJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CrawlJobResponse proto.InternalMessageInfo

func (m *CrawlJobResponse) GetList() []*share_message.TableCrawlJob {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *CrawlJobResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type SysLabelResponse struct {
	List                 []*share_message.TableESPortsLabel `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                             `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *SysLabelResponse) Reset()         { *m = SysLabelResponse{} }
func (m *SysLabelResponse) String() string { return proto.CompactTextString(m) }
func (*SysLabelResponse) ProtoMessage()    {}
func (*SysLabelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{147}
}
func (m *SysLabelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SysLabelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SysLabelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SysLabelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SysLabelResponse.Merge(m, src)
}
func (m *SysLabelResponse) XXX_Size() int {
	return m.Size()
}
func (m *SysLabelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SysLabelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SysLabelResponse proto.InternalMessageInfo

func (m *SysLabelResponse) GetList() []*share_message.TableESPortsLabel {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SysLabelResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type CarouselResponse struct {
	List                 []*share_message.TableESPortsCarousel `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                                `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *CarouselResponse) Reset()         { *m = CarouselResponse{} }
func (m *CarouselResponse) String() string { return proto.CompactTextString(m) }
func (*CarouselResponse) ProtoMessage()    {}
func (*CarouselResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{148}
}
func (m *CarouselResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CarouselResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CarouselResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CarouselResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CarouselResponse.Merge(m, src)
}
func (m *CarouselResponse) XXX_Size() int {
	return m.Size()
}
func (m *CarouselResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CarouselResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CarouselResponse proto.InternalMessageInfo

func (m *CarouselResponse) GetList() []*share_message.TableESPortsCarousel {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *CarouselResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type GameListResponse struct {
	List                 []*share_message.TableESPortsGame `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                            `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *GameListResponse) Reset()         { *m = GameListResponse{} }
func (m *GameListResponse) String() string { return proto.CompactTextString(m) }
func (*GameListResponse) ProtoMessage()    {}
func (*GameListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{149}
}
func (m *GameListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameListResponse.Merge(m, src)
}
func (m *GameListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GameListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GameListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GameListResponse proto.InternalMessageInfo

func (m *GameListResponse) GetList() []*share_message.TableESPortsGame {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *GameListResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type CommentDelRequest struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Type                 *int32   `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
	Ids64                []int64  `protobuf:"varint,3,rep,name=Ids64" json:"Ids64,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommentDelRequest) Reset()         { *m = CommentDelRequest{} }
func (m *CommentDelRequest) String() string { return proto.CompactTextString(m) }
func (*CommentDelRequest) ProtoMessage()    {}
func (*CommentDelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{150}
}
func (m *CommentDelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommentDelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommentDelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommentDelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentDelRequest.Merge(m, src)
}
func (m *CommentDelRequest) XXX_Size() int {
	return m.Size()
}
func (m *CommentDelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentDelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommentDelRequest proto.InternalMessageInfo

func (m *CommentDelRequest) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CommentDelRequest) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CommentDelRequest) GetIds64() []int64 {
	if m != nil {
		return m.Ids64
	}
	return nil
}

type CommentUploadRequest struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Type                 *int32   `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
	List                 []string `protobuf:"bytes,3,rep,name=List" json:"List,omitempty"`
	Count                *int32   `protobuf:"varint,4,opt,name=Count" json:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommentUploadRequest) Reset()         { *m = CommentUploadRequest{} }
func (m *CommentUploadRequest) String() string { return proto.CompactTextString(m) }
func (*CommentUploadRequest) ProtoMessage()    {}
func (*CommentUploadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{151}
}
func (m *CommentUploadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommentUploadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommentUploadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommentUploadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentUploadRequest.Merge(m, src)
}
func (m *CommentUploadRequest) XXX_Size() int {
	return m.Size()
}
func (m *CommentUploadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentUploadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommentUploadRequest proto.InternalMessageInfo

func (m *CommentUploadRequest) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CommentUploadRequest) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CommentUploadRequest) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *CommentUploadRequest) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

type CommentListResponse struct {
	List                 []*share_message.TableESportComment `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                              `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *CommentListResponse) Reset()         { *m = CommentListResponse{} }
func (m *CommentListResponse) String() string { return proto.CompactTextString(m) }
func (*CommentListResponse) ProtoMessage()    {}
func (*CommentListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{152}
}
func (m *CommentListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommentListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommentListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommentListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentListResponse.Merge(m, src)
}
func (m *CommentListResponse) XXX_Size() int {
	return m.Size()
}
func (m *CommentListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommentListResponse proto.InternalMessageInfo

func (m *CommentListResponse) GetList() []*share_message.TableESportComment {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *CommentListResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type NearReportResponse struct {
	List                 []*share_message.NearReport `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                      `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NearReportResponse) Reset()         { *m = NearReportResponse{} }
func (m *NearReportResponse) String() string { return proto.CompactTextString(m) }
func (*NearReportResponse) ProtoMessage()    {}
func (*NearReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{153}
}
func (m *NearReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NearReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NearReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NearReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NearReportResponse.Merge(m, src)
}
func (m *NearReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *NearReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NearReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NearReportResponse proto.InternalMessageInfo

func (m *NearReportResponse) GetList() []*share_message.NearReport {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *NearReportResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type ButtonClickReportResponse struct {
	List                 []*share_message.ButtonClickReport `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                             `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *ButtonClickReportResponse) Reset()         { *m = ButtonClickReportResponse{} }
func (m *ButtonClickReportResponse) String() string { return proto.CompactTextString(m) }
func (*ButtonClickReportResponse) ProtoMessage()    {}
func (*ButtonClickReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{154}
}
func (m *ButtonClickReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ButtonClickReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ButtonClickReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ButtonClickReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ButtonClickReportResponse.Merge(m, src)
}
func (m *ButtonClickReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *ButtonClickReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ButtonClickReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ButtonClickReportResponse proto.InternalMessageInfo

func (m *ButtonClickReportResponse) GetList() []*share_message.ButtonClickReport {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ButtonClickReportResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type PageRegLogReportResponse struct {
	List                 []*share_message.PageRegLogReport `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                            `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *PageRegLogReportResponse) Reset()         { *m = PageRegLogReportResponse{} }
func (m *PageRegLogReportResponse) String() string { return proto.CompactTextString(m) }
func (*PageRegLogReportResponse) ProtoMessage()    {}
func (*PageRegLogReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{155}
}
func (m *PageRegLogReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageRegLogReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageRegLogReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageRegLogReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageRegLogReportResponse.Merge(m, src)
}
func (m *PageRegLogReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *PageRegLogReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PageRegLogReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PageRegLogReportResponse proto.InternalMessageInfo

func (m *PageRegLogReportResponse) GetList() []*share_message.PageRegLogReport {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *PageRegLogReportResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type VoiceWorkListResponse struct {
	List                 []*share_message.PlayerMixVoiceVideo `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                               `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *VoiceWorkListResponse) Reset()         { *m = VoiceWorkListResponse{} }
func (m *VoiceWorkListResponse) String() string { return proto.CompactTextString(m) }
func (*VoiceWorkListResponse) ProtoMessage()    {}
func (*VoiceWorkListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{156}
}
func (m *VoiceWorkListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoiceWorkListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoiceWorkListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoiceWorkListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoiceWorkListResponse.Merge(m, src)
}
func (m *VoiceWorkListResponse) XXX_Size() int {
	return m.Size()
}
func (m *VoiceWorkListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VoiceWorkListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VoiceWorkListResponse proto.InternalMessageInfo

func (m *VoiceWorkListResponse) GetList() []*share_message.PlayerMixVoiceVideo {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *VoiceWorkListResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type BgVoiceVideoListResponse struct {
	List                 []*share_message.BgVoiceVideo `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                        `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *BgVoiceVideoListResponse) Reset()         { *m = BgVoiceVideoListResponse{} }
func (m *BgVoiceVideoListResponse) String() string { return proto.CompactTextString(m) }
func (*BgVoiceVideoListResponse) ProtoMessage()    {}
func (*BgVoiceVideoListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{157}
}
func (m *BgVoiceVideoListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BgVoiceVideoListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BgVoiceVideoListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BgVoiceVideoListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgVoiceVideoListResponse.Merge(m, src)
}
func (m *BgVoiceVideoListResponse) XXX_Size() int {
	return m.Size()
}
func (m *BgVoiceVideoListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BgVoiceVideoListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BgVoiceVideoListResponse proto.InternalMessageInfo

func (m *BgVoiceVideoListResponse) GetList() []*share_message.BgVoiceVideo {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *BgVoiceVideoListResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type MatchGuideListResponse struct {
	List                 []*share_message.CommStrId `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                     `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *MatchGuideListResponse) Reset()         { *m = MatchGuideListResponse{} }
func (m *MatchGuideListResponse) String() string { return proto.CompactTextString(m) }
func (*MatchGuideListResponse) ProtoMessage()    {}
func (*MatchGuideListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{158}
}
func (m *MatchGuideListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchGuideListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchGuideListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchGuideListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchGuideListResponse.Merge(m, src)
}
func (m *MatchGuideListResponse) XXX_Size() int {
	return m.Size()
}
func (m *MatchGuideListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchGuideListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MatchGuideListResponse proto.InternalMessageInfo

func (m *MatchGuideListResponse) GetList() []*share_message.CommStrId {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *MatchGuideListResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type SystemBgImageListResponse struct {
	List                 []*share_message.SystemBgImage `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                         `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *SystemBgImageListResponse) Reset()         { *m = SystemBgImageListResponse{} }
func (m *SystemBgImageListResponse) String() string { return proto.CompactTextString(m) }
func (*SystemBgImageListResponse) ProtoMessage()    {}
func (*SystemBgImageListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{159}
}
func (m *SystemBgImageListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemBgImageListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemBgImageListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemBgImageListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemBgImageListResponse.Merge(m, src)
}
func (m *SystemBgImageListResponse) XXX_Size() int {
	return m.Size()
}
func (m *SystemBgImageListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemBgImageListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SystemBgImageListResponse proto.InternalMessageInfo

func (m *SystemBgImageListResponse) GetList() []*share_message.SystemBgImage {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SystemBgImageListResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type IntimacyConfigRes struct {
	List                 []*share_message.IntimacyConfig `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *IntimacyConfigRes) Reset()         { *m = IntimacyConfigRes{} }
func (m *IntimacyConfigRes) String() string { return proto.CompactTextString(m) }
func (*IntimacyConfigRes) ProtoMessage()    {}
func (*IntimacyConfigRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{160}
}
func (m *IntimacyConfigRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IntimacyConfigRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IntimacyConfigRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IntimacyConfigRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntimacyConfigRes.Merge(m, src)
}
func (m *IntimacyConfigRes) XXX_Size() int {
	return m.Size()
}
func (m *IntimacyConfigRes) XXX_DiscardUnknown() {
	xxx_messageInfo_IntimacyConfigRes.DiscardUnknown(m)
}

var xxx_messageInfo_IntimacyConfigRes proto.InternalMessageInfo

func (m *IntimacyConfigRes) GetList() []*share_message.IntimacyConfig {
	if m != nil {
		return m.List
	}
	return nil
}

type SportSysNoticeResponse struct {
	List                 []*share_message.TableESPortsSysMsg `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                              `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *SportSysNoticeResponse) Reset()         { *m = SportSysNoticeResponse{} }
func (m *SportSysNoticeResponse) String() string { return proto.CompactTextString(m) }
func (*SportSysNoticeResponse) ProtoMessage()    {}
func (*SportSysNoticeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{161}
}
func (m *SportSysNoticeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SportSysNoticeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SportSysNoticeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SportSysNoticeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SportSysNoticeResponse.Merge(m, src)
}
func (m *SportSysNoticeResponse) XXX_Size() int {
	return m.Size()
}
func (m *SportSysNoticeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SportSysNoticeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SportSysNoticeResponse proto.InternalMessageInfo

func (m *SportSysNoticeResponse) GetList() []*share_message.TableESPortsSysMsg {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SportSysNoticeResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type BetSlipListResponse struct {
	List                 []*share_message.TableESPortsGuessBetRecord `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                                      `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *BetSlipListResponse) Reset()         { *m = BetSlipListResponse{} }
func (m *BetSlipListResponse) String() string { return proto.CompactTextString(m) }
func (*BetSlipListResponse) ProtoMessage()    {}
func (*BetSlipListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{162}
}
func (m *BetSlipListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BetSlipListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BetSlipListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BetSlipListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BetSlipListResponse.Merge(m, src)
}
func (m *BetSlipListResponse) XXX_Size() int {
	return m.Size()
}
func (m *BetSlipListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BetSlipListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BetSlipListResponse proto.InternalMessageInfo

func (m *BetSlipListResponse) GetList() []*share_message.TableESPortsGuessBetRecord {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *BetSlipListResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type BetSlipStatisticsResponse struct {
	List                 []*share_message.BetSlipReport `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                         `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	SumAmount            *int64                         `protobuf:"varint,3,opt,name=SumAmount" json:"SumAmount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *BetSlipStatisticsResponse) Reset()         { *m = BetSlipStatisticsResponse{} }
func (m *BetSlipStatisticsResponse) String() string { return proto.CompactTextString(m) }
func (*BetSlipStatisticsResponse) ProtoMessage()    {}
func (*BetSlipStatisticsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{163}
}
func (m *BetSlipStatisticsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BetSlipStatisticsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BetSlipStatisticsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BetSlipStatisticsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BetSlipStatisticsResponse.Merge(m, src)
}
func (m *BetSlipStatisticsResponse) XXX_Size() int {
	return m.Size()
}
func (m *BetSlipStatisticsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BetSlipStatisticsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BetSlipStatisticsResponse proto.InternalMessageInfo

func (m *BetSlipStatisticsResponse) GetList() []*share_message.BetSlipReport {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *BetSlipStatisticsResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

func (m *BetSlipStatisticsResponse) GetSumAmount() int64 {
	if m != nil && m.SumAmount != nil {
		return *m.SumAmount
	}
	return 0
}

type GameGuessRequest struct {
	LabelId              *int32   `protobuf:"varint,1,opt,name=LabelId" json:"LabelId,omitempty"`
	GameId               *string  `protobuf:"bytes,2,opt,name=GameId" json:"GameId,omitempty"`
	ApiOrigin            *int32   `protobuf:"varint,3,opt,name=ApiOrigin" json:"ApiOrigin,omitempty"`
	MornRollGuessFlag    *int32   `protobuf:"varint,4,opt,name=MornRollGuessFlag" json:"MornRollGuessFlag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameGuessRequest) Reset()         { *m = GameGuessRequest{} }
func (m *GameGuessRequest) String() string { return proto.CompactTextString(m) }
func (*GameGuessRequest) ProtoMessage()    {}
func (*GameGuessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{164}
}
func (m *GameGuessRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameGuessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameGuessRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameGuessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameGuessRequest.Merge(m, src)
}
func (m *GameGuessRequest) XXX_Size() int {
	return m.Size()
}
func (m *GameGuessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GameGuessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GameGuessRequest proto.InternalMessageInfo

func (m *GameGuessRequest) GetLabelId() int32 {
	if m != nil && m.LabelId != nil {
		return *m.LabelId
	}
	return 0
}

func (m *GameGuessRequest) GetGameId() string {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return ""
}

func (m *GameGuessRequest) GetApiOrigin() int32 {
	if m != nil && m.ApiOrigin != nil {
		return *m.ApiOrigin
	}
	return 0
}

func (m *GameGuessRequest) GetMornRollGuessFlag() int32 {
	if m != nil && m.MornRollGuessFlag != nil {
		return *m.MornRollGuessFlag
	}
	return 0
}

type GameGuessResponse struct {
	List1Id              *int64                                  `protobuf:"varint,1,opt,name=List1Id" json:"List1Id,omitempty"`
	List1                []*share_message.GameGuessOddsNumObject `protobuf:"bytes,2,rep,name=List1" json:"List1,omitempty"`
	List2Id              *int64                                  `protobuf:"varint,3,opt,name=List2Id" json:"List2Id,omitempty"`
	List2                []*share_message.GameGuessOddsNumObject `protobuf:"bytes,4,rep,name=List2" json:"List2,omitempty"`
	LivePaths            *share_message.ESPortsGameLivePathObj   `protobuf:"bytes,5,opt,name=live_paths" json:"live_paths,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *GameGuessResponse) Reset()         { *m = GameGuessResponse{} }
func (m *GameGuessResponse) String() string { return proto.CompactTextString(m) }
func (*GameGuessResponse) ProtoMessage()    {}
func (*GameGuessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{165}
}
func (m *GameGuessResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameGuessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameGuessResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameGuessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameGuessResponse.Merge(m, src)
}
func (m *GameGuessResponse) XXX_Size() int {
	return m.Size()
}
func (m *GameGuessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GameGuessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GameGuessResponse proto.InternalMessageInfo

func (m *GameGuessResponse) GetList1Id() int64 {
	if m != nil && m.List1Id != nil {
		return *m.List1Id
	}
	return 0
}

func (m *GameGuessResponse) GetList1() []*share_message.GameGuessOddsNumObject {
	if m != nil {
		return m.List1
	}
	return nil
}

func (m *GameGuessResponse) GetList2Id() int64 {
	if m != nil && m.List2Id != nil {
		return *m.List2Id
	}
	return 0
}

func (m *GameGuessResponse) GetList2() []*share_message.GameGuessOddsNumObject {
	if m != nil {
		return m.List2
	}
	return nil
}

func (m *GameGuessResponse) GetLivePaths() *share_message.ESPortsGameLivePathObj {
	if m != nil {
		return m.LivePaths
	}
	return nil
}

type EditGameGuess struct {
	Id                   *int64          `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Guess                []*NameValueTag `protobuf:"bytes,2,rep,name=Guess" json:"Guess,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *EditGameGuess) Reset()         { *m = EditGameGuess{} }
func (m *EditGameGuess) String() string { return proto.CompactTextString(m) }
func (*EditGameGuess) ProtoMessage()    {}
func (*EditGameGuess) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{166}
}
func (m *EditGameGuess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EditGameGuess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EditGameGuess.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EditGameGuess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditGameGuess.Merge(m, src)
}
func (m *EditGameGuess) XXX_Size() int {
	return m.Size()
}
func (m *EditGameGuess) XXX_DiscardUnknown() {
	xxx_messageInfo_EditGameGuess.DiscardUnknown(m)
}

var xxx_messageInfo_EditGameGuess proto.InternalMessageInfo

func (m *EditGameGuess) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *EditGameGuess) GetGuess() []*NameValueTag {
	if m != nil {
		return m.Guess
	}
	return nil
}

type EditGameGuessRequest struct {
	Id                   *int64           `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Opt                  *string          `protobuf:"bytes,2,opt,name=Opt" json:"Opt,omitempty"`
	Guesses              []*EditGameGuess `protobuf:"bytes,3,rep,name=Guesses" json:"Guesses,omitempty"`
	HistoryId            *int64           `protobuf:"varint,4,opt,name=HistoryId" json:"HistoryId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *EditGameGuessRequest) Reset()         { *m = EditGameGuessRequest{} }
func (m *EditGameGuessRequest) String() string { return proto.CompactTextString(m) }
func (*EditGameGuessRequest) ProtoMessage()    {}
func (*EditGameGuessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{167}
}
func (m *EditGameGuessRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EditGameGuessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EditGameGuessRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EditGameGuessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditGameGuessRequest.Merge(m, src)
}
func (m *EditGameGuessRequest) XXX_Size() int {
	return m.Size()
}
func (m *EditGameGuessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EditGameGuessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EditGameGuessRequest proto.InternalMessageInfo

func (m *EditGameGuessRequest) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *EditGameGuessRequest) GetOpt() string {
	if m != nil && m.Opt != nil {
		return *m.Opt
	}
	return ""
}

func (m *EditGameGuessRequest) GetGuesses() []*EditGameGuess {
	if m != nil {
		return m.Guesses
	}
	return nil
}

func (m *EditGameGuessRequest) GetHistoryId() int64 {
	if m != nil && m.HistoryId != nil {
		return *m.HistoryId
	}
	return 0
}

type RpcBetSlipOperateRequest struct {
	//订单ID
	Id []int64 `protobuf:"varint,1,rep,name=Id" json:"Id,omitempty"`
	//操作(字符串数字) 1:无效，2:违规
	Opt                  *string  `protobuf:"bytes,2,opt,name=Opt" json:"Opt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcBetSlipOperateRequest) Reset()         { *m = RpcBetSlipOperateRequest{} }
func (m *RpcBetSlipOperateRequest) String() string { return proto.CompactTextString(m) }
func (*RpcBetSlipOperateRequest) ProtoMessage()    {}
func (*RpcBetSlipOperateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{168}
}
func (m *RpcBetSlipOperateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcBetSlipOperateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcBetSlipOperateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcBetSlipOperateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBetSlipOperateRequest.Merge(m, src)
}
func (m *RpcBetSlipOperateRequest) XXX_Size() int {
	return m.Size()
}
func (m *RpcBetSlipOperateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBetSlipOperateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBetSlipOperateRequest proto.InternalMessageInfo

func (m *RpcBetSlipOperateRequest) GetId() []int64 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RpcBetSlipOperateRequest) GetOpt() string {
	if m != nil && m.Opt != nil {
		return *m.Opt
	}
	return ""
}

//比赛队伍数据
type GameTeamInfoResponse struct {
	TeamA                []*share_message.APIPlayerDetail `protobuf:"bytes,1,rep,name=TeamA" json:"TeamA,omitempty"`
	TeamB                []*share_message.APIPlayerDetail `protobuf:"bytes,2,rep,name=TeamB" json:"TeamB,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *GameTeamInfoResponse) Reset()         { *m = GameTeamInfoResponse{} }
func (m *GameTeamInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GameTeamInfoResponse) ProtoMessage()    {}
func (*GameTeamInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{169}
}
func (m *GameTeamInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameTeamInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameTeamInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameTeamInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameTeamInfoResponse.Merge(m, src)
}
func (m *GameTeamInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GameTeamInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GameTeamInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GameTeamInfoResponse proto.InternalMessageInfo

func (m *GameTeamInfoResponse) GetTeamA() []*share_message.APIPlayerDetail {
	if m != nil {
		return m.TeamA
	}
	return nil
}

func (m *GameTeamInfoResponse) GetTeamB() []*share_message.APIPlayerDetail {
	if m != nil {
		return m.TeamB
	}
	return nil
}

//比赛实时数据返回
type GameRealTimeResponse struct {
	Id                   *int64                                        `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	LabelId              *int32                                        `protobuf:"varint,2,opt,name=LabelId" json:"LabelId,omitempty"`
	Lol                  []*share_message.TableESPortsLOLRealTimeData  `protobuf:"bytes,3,rep,name=Lol" json:"Lol,omitempty"`
	Wzry                 []*share_message.TableESPortsWZRYRealTimeData `protobuf:"bytes,4,rep,name=Wzry" json:"Wzry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *GameRealTimeResponse) Reset()         { *m = GameRealTimeResponse{} }
func (m *GameRealTimeResponse) String() string { return proto.CompactTextString(m) }
func (*GameRealTimeResponse) ProtoMessage()    {}
func (*GameRealTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{170}
}
func (m *GameRealTimeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameRealTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameRealTimeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameRealTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameRealTimeResponse.Merge(m, src)
}
func (m *GameRealTimeResponse) XXX_Size() int {
	return m.Size()
}
func (m *GameRealTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GameRealTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GameRealTimeResponse proto.InternalMessageInfo

func (m *GameRealTimeResponse) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *GameRealTimeResponse) GetLabelId() int32 {
	if m != nil && m.LabelId != nil {
		return *m.LabelId
	}
	return 0
}

func (m *GameRealTimeResponse) GetLol() []*share_message.TableESPortsLOLRealTimeData {
	if m != nil {
		return m.Lol
	}
	return nil
}

func (m *GameRealTimeResponse) GetWzry() []*share_message.TableESPortsWZRYRealTimeData {
	if m != nil {
		return m.Wzry
	}
	return nil
}

//充值赠送白名单返回
type GiveWhiteListRes struct {
	List                 []*share_message.TableESportsGiveWhiteList `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                                     `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *GiveWhiteListRes) Reset()         { *m = GiveWhiteListRes{} }
func (m *GiveWhiteListRes) String() string { return proto.CompactTextString(m) }
func (*GiveWhiteListRes) ProtoMessage()    {}
func (*GiveWhiteListRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{171}
}
func (m *GiveWhiteListRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GiveWhiteListRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GiveWhiteListRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GiveWhiteListRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GiveWhiteListRes.Merge(m, src)
}
func (m *GiveWhiteListRes) XXX_Size() int {
	return m.Size()
}
func (m *GiveWhiteListRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GiveWhiteListRes.DiscardUnknown(m)
}

var xxx_messageInfo_GiveWhiteListRes proto.InternalMessageInfo

func (m *GiveWhiteListRes) GetList() []*share_message.TableESportsGiveWhiteList {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *GiveWhiteListRes) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//电竞币配置返回
type RechargeEsCfgRes struct {
	List                 []*share_message.TableESportsExchangeCfg `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *RechargeEsCfgRes) Reset()         { *m = RechargeEsCfgRes{} }
func (m *RechargeEsCfgRes) String() string { return proto.CompactTextString(m) }
func (*RechargeEsCfgRes) ProtoMessage()    {}
func (*RechargeEsCfgRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{172}
}
func (m *RechargeEsCfgRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RechargeEsCfgRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RechargeEsCfgRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RechargeEsCfgRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RechargeEsCfgRes.Merge(m, src)
}
func (m *RechargeEsCfgRes) XXX_Size() int {
	return m.Size()
}
func (m *RechargeEsCfgRes) XXX_DiscardUnknown() {
	xxx_messageInfo_RechargeEsCfgRes.DiscardUnknown(m)
}

var xxx_messageInfo_RechargeEsCfgRes proto.InternalMessageInfo

func (m *RechargeEsCfgRes) GetList() []*share_message.TableESportsExchangeCfg {
	if m != nil {
		return m.List
	}
	return nil
}

//电竞埋点报表返回
type PointsReportRes struct {
	Basis                []*share_message.BasisPointsReport        `protobuf:"bytes,1,rep,name=Basis" json:"Basis,omitempty"`
	Menu                 []*share_message.MenuPointsReport         `protobuf:"bytes,2,rep,name=Menu" json:"Menu,omitempty"`
	Label                []*share_message.LabelPointsReport        `protobuf:"bytes,3,rep,name=Label" json:"Label,omitempty"`
	NewsAmuse            []*share_message.NewsAmusePointsReport    `protobuf:"bytes,4,rep,name=NewsAmuse" json:"NewsAmuse,omitempty"`
	VdoHall              []*share_message.VdoHallPointsReport      `protobuf:"bytes,5,rep,name=VdoHall" json:"VdoHall,omitempty"`
	ApplyVdoHall         []*share_message.ApplyVdoHallPointsReport `protobuf:"bytes,6,rep,name=ApplyVdoHall" json:"ApplyVdoHall,omitempty"`
	MatchLs              []*share_message.MatchLsPointsReport      `protobuf:"bytes,7,rep,name=MatchLs" json:"MatchLs,omitempty"`
	MatchDil             []*share_message.MatchDilPointsReport     `protobuf:"bytes,8,rep,name=MatchDil" json:"MatchDil,omitempty"`
	Guess                []*share_message.GuessPointsReport        `protobuf:"bytes,9,rep,name=Guess" json:"Guess,omitempty"`
	Msg                  []*share_message.MsgPointsReport          `protobuf:"bytes,10,rep,name=Msg" json:"Msg,omitempty"`
	EsportCoin           []*share_message.EsportCoinPointsReport   `protobuf:"bytes,11,rep,name=EsportCoin" json:"EsportCoin,omitempty"`
	PageCount            *int32                                    `protobuf:"varint,100,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *PointsReportRes) Reset()         { *m = PointsReportRes{} }
func (m *PointsReportRes) String() string { return proto.CompactTextString(m) }
func (*PointsReportRes) ProtoMessage()    {}
func (*PointsReportRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{173}
}
func (m *PointsReportRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PointsReportRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PointsReportRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PointsReportRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PointsReportRes.Merge(m, src)
}
func (m *PointsReportRes) XXX_Size() int {
	return m.Size()
}
func (m *PointsReportRes) XXX_DiscardUnknown() {
	xxx_messageInfo_PointsReportRes.DiscardUnknown(m)
}

var xxx_messageInfo_PointsReportRes proto.InternalMessageInfo

func (m *PointsReportRes) GetBasis() []*share_message.BasisPointsReport {
	if m != nil {
		return m.Basis
	}
	return nil
}

func (m *PointsReportRes) GetMenu() []*share_message.MenuPointsReport {
	if m != nil {
		return m.Menu
	}
	return nil
}

func (m *PointsReportRes) GetLabel() []*share_message.LabelPointsReport {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *PointsReportRes) GetNewsAmuse() []*share_message.NewsAmusePointsReport {
	if m != nil {
		return m.NewsAmuse
	}
	return nil
}

func (m *PointsReportRes) GetVdoHall() []*share_message.VdoHallPointsReport {
	if m != nil {
		return m.VdoHall
	}
	return nil
}

func (m *PointsReportRes) GetApplyVdoHall() []*share_message.ApplyVdoHallPointsReport {
	if m != nil {
		return m.ApplyVdoHall
	}
	return nil
}

func (m *PointsReportRes) GetMatchLs() []*share_message.MatchLsPointsReport {
	if m != nil {
		return m.MatchLs
	}
	return nil
}

func (m *PointsReportRes) GetMatchDil() []*share_message.MatchDilPointsReport {
	if m != nil {
		return m.MatchDil
	}
	return nil
}

func (m *PointsReportRes) GetGuess() []*share_message.GuessPointsReport {
	if m != nil {
		return m.Guess
	}
	return nil
}

func (m *PointsReportRes) GetMsg() []*share_message.MsgPointsReport {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *PointsReportRes) GetEsportCoin() []*share_message.EsportCoinPointsReport {
	if m != nil {
		return m.EsportCoin
	}
	return nil
}

func (m *PointsReportRes) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//修改比赛实时数据请求
type EditGameRealTimeRequest struct {
	//比赛表中的id
	Id *int64 `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	//这里做复数传输、以防后续能改多个
	RealTimeObject       []*GameRealTimeObject `protobuf:"bytes,2,rep,name=RealTimeObject" json:"RealTimeObject,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *EditGameRealTimeRequest) Reset()         { *m = EditGameRealTimeRequest{} }
func (m *EditGameRealTimeRequest) String() string { return proto.CompactTextString(m) }
func (*EditGameRealTimeRequest) ProtoMessage()    {}
func (*EditGameRealTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{174}
}
func (m *EditGameRealTimeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EditGameRealTimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EditGameRealTimeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EditGameRealTimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditGameRealTimeRequest.Merge(m, src)
}
func (m *EditGameRealTimeRequest) XXX_Size() int {
	return m.Size()
}
func (m *EditGameRealTimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EditGameRealTimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EditGameRealTimeRequest proto.InternalMessageInfo

func (m *EditGameRealTimeRequest) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *EditGameRealTimeRequest) GetRealTimeObject() []*GameRealTimeObject {
	if m != nil {
		return m.RealTimeObject
	}
	return nil
}

//修改比赛实时数据的结构体
type GameRealTimeObject struct {
	//当前局数
	GameRound *int32 `protobuf:"varint,1,opt,name=GameRound" json:"GameRound,omitempty"`
	//一塔 0:无、1:A队一塔 2:B队一塔
	FirstTower *int32 `protobuf:"varint,2,opt,name=FirstTower" json:"FirstTower,omitempty"`
	//一小龙  0:无、1:A队一小龙 2:B队一小龙
	FirstSmallDragon *int32 `protobuf:"varint,3,opt,name=FirstSmallDragon" json:"FirstSmallDragon,omitempty"`
	//先五杀  0:无、1:A队先五杀 2:B队先五杀
	FirstFiveKill *int32 `protobuf:"varint,4,opt,name=FirstFiveKill" json:"FirstFiveKill,omitempty"`
	//一大龙  0:无、1:A队一大龙 2:B队一大龙
	FirstBigDragon *int32 `protobuf:"varint,5,opt,name=FirstBigDragon" json:"FirstBigDragon,omitempty"`
	//先十杀  0:无、1:A队先十杀 2:B队先十杀
	FirstTenKill *int32 `protobuf:"varint,6,opt,name=FirstTenKill" json:"FirstTenKill,omitempty"`
	//LOL不能改、王者荣耀能改项目(击杀小龙数、击杀大龙数)
	//A队击杀小龙数
	TeamADrakes *int32 `protobuf:"varint,7,opt,name=TeamADrakes" json:"TeamADrakes,omitempty"`
	//A队击杀大龙数
	TeamANahsorBarons *int32 `protobuf:"varint,8,opt,name=TeamANahsorBarons" json:"TeamANahsorBarons,omitempty"`
	//B队击杀小龙数
	TeamBDrakes *int32 `protobuf:"varint,9,opt,name=TeamBDrakes" json:"TeamBDrakes,omitempty"`
	//B队击杀大龙数
	TeamBNahsorBarons *int32 `protobuf:"varint,10,opt,name=TeamBNahsorBarons" json:"TeamBNahsorBarons,omitempty"`
	//A队伍人员以及头像信息
	TeamAPlayers []*GameRealTimePlayerObject `protobuf:"bytes,11,rep,name=TeamAPlayers" json:"TeamAPlayers,omitempty"`
	//B队伍人员以及头像信息
	TeamBPlayers         []*GameRealTimePlayerObject `protobuf:"bytes,12,rep,name=TeamBPlayers" json:"TeamBPlayers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *GameRealTimeObject) Reset()         { *m = GameRealTimeObject{} }
func (m *GameRealTimeObject) String() string { return proto.CompactTextString(m) }
func (*GameRealTimeObject) ProtoMessage()    {}
func (*GameRealTimeObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{175}
}
func (m *GameRealTimeObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameRealTimeObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameRealTimeObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameRealTimeObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameRealTimeObject.Merge(m, src)
}
func (m *GameRealTimeObject) XXX_Size() int {
	return m.Size()
}
func (m *GameRealTimeObject) XXX_DiscardUnknown() {
	xxx_messageInfo_GameRealTimeObject.DiscardUnknown(m)
}

var xxx_messageInfo_GameRealTimeObject proto.InternalMessageInfo

func (m *GameRealTimeObject) GetGameRound() int32 {
	if m != nil && m.GameRound != nil {
		return *m.GameRound
	}
	return 0
}

func (m *GameRealTimeObject) GetFirstTower() int32 {
	if m != nil && m.FirstTower != nil {
		return *m.FirstTower
	}
	return 0
}

func (m *GameRealTimeObject) GetFirstSmallDragon() int32 {
	if m != nil && m.FirstSmallDragon != nil {
		return *m.FirstSmallDragon
	}
	return 0
}

func (m *GameRealTimeObject) GetFirstFiveKill() int32 {
	if m != nil && m.FirstFiveKill != nil {
		return *m.FirstFiveKill
	}
	return 0
}

func (m *GameRealTimeObject) GetFirstBigDragon() int32 {
	if m != nil && m.FirstBigDragon != nil {
		return *m.FirstBigDragon
	}
	return 0
}

func (m *GameRealTimeObject) GetFirstTenKill() int32 {
	if m != nil && m.FirstTenKill != nil {
		return *m.FirstTenKill
	}
	return 0
}

func (m *GameRealTimeObject) GetTeamADrakes() int32 {
	if m != nil && m.TeamADrakes != nil {
		return *m.TeamADrakes
	}
	return 0
}

func (m *GameRealTimeObject) GetTeamANahsorBarons() int32 {
	if m != nil && m.TeamANahsorBarons != nil {
		return *m.TeamANahsorBarons
	}
	return 0
}

func (m *GameRealTimeObject) GetTeamBDrakes() int32 {
	if m != nil && m.TeamBDrakes != nil {
		return *m.TeamBDrakes
	}
	return 0
}

func (m *GameRealTimeObject) GetTeamBNahsorBarons() int32 {
	if m != nil && m.TeamBNahsorBarons != nil {
		return *m.TeamBNahsorBarons
	}
	return 0
}

func (m *GameRealTimeObject) GetTeamAPlayers() []*GameRealTimePlayerObject {
	if m != nil {
		return m.TeamAPlayers
	}
	return nil
}

func (m *GameRealTimeObject) GetTeamBPlayers() []*GameRealTimePlayerObject {
	if m != nil {
		return m.TeamBPlayers
	}
	return nil
}

//队伍人员以及头像信息
type GameRealTimePlayerObject struct {
	//队员名称
	Name *string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	//队员照片
	Photo                *string  `protobuf:"bytes,2,opt,name=Photo" json:"Photo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameRealTimePlayerObject) Reset()         { *m = GameRealTimePlayerObject{} }
func (m *GameRealTimePlayerObject) String() string { return proto.CompactTextString(m) }
func (*GameRealTimePlayerObject) ProtoMessage()    {}
func (*GameRealTimePlayerObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{176}
}
func (m *GameRealTimePlayerObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameRealTimePlayerObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameRealTimePlayerObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameRealTimePlayerObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameRealTimePlayerObject.Merge(m, src)
}
func (m *GameRealTimePlayerObject) XXX_Size() int {
	return m.Size()
}
func (m *GameRealTimePlayerObject) XXX_DiscardUnknown() {
	xxx_messageInfo_GameRealTimePlayerObject.DiscardUnknown(m)
}

var xxx_messageInfo_GameRealTimePlayerObject proto.InternalMessageInfo

func (m *GameRealTimePlayerObject) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *GameRealTimePlayerObject) GetPhoto() string {
	if m != nil && m.Photo != nil {
		return *m.Photo
	}
	return ""
}

//金币log返回
type SportCoinLogResponse struct {
	List                 []*SportCoinLogList `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32              `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SportCoinLogResponse) Reset()         { *m = SportCoinLogResponse{} }
func (m *SportCoinLogResponse) String() string { return proto.CompactTextString(m) }
func (*SportCoinLogResponse) ProtoMessage()    {}
func (*SportCoinLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{177}
}
func (m *SportCoinLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SportCoinLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SportCoinLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SportCoinLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SportCoinLogResponse.Merge(m, src)
}
func (m *SportCoinLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *SportCoinLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SportCoinLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SportCoinLogResponse proto.InternalMessageInfo

func (m *SportCoinLogResponse) GetList() []*SportCoinLogList {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SportCoinLogResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//电竞币日志结构
type SportCoinLogList struct {
	InLine               *share_message.ESportCoinChangeLog `protobuf:"bytes,1,req,name=InLine" json:"InLine,omitempty"`
	Extend               *share_message.GoldExtendLog       `protobuf:"bytes,2,opt,name=Extend" json:"Extend,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *SportCoinLogList) Reset()         { *m = SportCoinLogList{} }
func (m *SportCoinLogList) String() string { return proto.CompactTextString(m) }
func (*SportCoinLogList) ProtoMessage()    {}
func (*SportCoinLogList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{178}
}
func (m *SportCoinLogList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SportCoinLogList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SportCoinLogList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SportCoinLogList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SportCoinLogList.Merge(m, src)
}
func (m *SportCoinLogList) XXX_Size() int {
	return m.Size()
}
func (m *SportCoinLogList) XXX_DiscardUnknown() {
	xxx_messageInfo_SportCoinLogList.DiscardUnknown(m)
}

var xxx_messageInfo_SportCoinLogList proto.InternalMessageInfo

func (m *SportCoinLogList) GetInLine() *share_message.ESportCoinChangeLog {
	if m != nil {
		return m.InLine
	}
	return nil
}

func (m *SportCoinLogList) GetExtend() *share_message.GoldExtendLog {
	if m != nil {
		return m.Extend
	}
	return nil
}

type VCBuryingPointReportRes struct {
	List                 []*share_message.VCBuryingPointReport `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                                `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *VCBuryingPointReportRes) Reset()         { *m = VCBuryingPointReportRes{} }
func (m *VCBuryingPointReportRes) String() string { return proto.CompactTextString(m) }
func (*VCBuryingPointReportRes) ProtoMessage()    {}
func (*VCBuryingPointReportRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{179}
}
func (m *VCBuryingPointReportRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VCBuryingPointReportRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VCBuryingPointReportRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VCBuryingPointReportRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VCBuryingPointReportRes.Merge(m, src)
}
func (m *VCBuryingPointReportRes) XXX_Size() int {
	return m.Size()
}
func (m *VCBuryingPointReportRes) XXX_DiscardUnknown() {
	xxx_messageInfo_VCBuryingPointReportRes.DiscardUnknown(m)
}

var xxx_messageInfo_VCBuryingPointReportRes proto.InternalMessageInfo

func (m *VCBuryingPointReportRes) GetList() []*share_message.VCBuryingPointReport {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *VCBuryingPointReportRes) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type AddWishAllowListReq struct {
	Accounts             []string `protobuf:"bytes,1,rep,name=Accounts" json:"Accounts,omitempty"`
	Remark               *string  `protobuf:"bytes,2,opt,name=Remark" json:"Remark,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddWishAllowListReq) Reset()         { *m = AddWishAllowListReq{} }
func (m *AddWishAllowListReq) String() string { return proto.CompactTextString(m) }
func (*AddWishAllowListReq) ProtoMessage()    {}
func (*AddWishAllowListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{180}
}
func (m *AddWishAllowListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWishAllowListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWishAllowListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWishAllowListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWishAllowListReq.Merge(m, src)
}
func (m *AddWishAllowListReq) XXX_Size() int {
	return m.Size()
}
func (m *AddWishAllowListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWishAllowListReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddWishAllowListReq proto.InternalMessageInfo

func (m *AddWishAllowListReq) GetAccounts() []string {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *AddWishAllowListReq) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

//白名单列表
type WishAllowListResp struct {
	List                 []*share_message.WishWhite `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *WishAllowListResp) Reset()         { *m = WishAllowListResp{} }
func (m *WishAllowListResp) String() string { return proto.CompactTextString(m) }
func (*WishAllowListResp) ProtoMessage()    {}
func (*WishAllowListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{181}
}
func (m *WishAllowListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishAllowListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishAllowListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishAllowListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishAllowListResp.Merge(m, src)
}
func (m *WishAllowListResp) XXX_Size() int {
	return m.Size()
}
func (m *WishAllowListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WishAllowListResp.DiscardUnknown(m)
}

var xxx_messageInfo_WishAllowListResp proto.InternalMessageInfo

func (m *WishAllowListResp) GetList() []*share_message.WishWhite {
	if m != nil {
		return m.List
	}
	return nil
}

//许愿池活动报表
type WishPoolActivityReportResp struct {
	List                 []*share_message.WishActivityReport `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                              `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *WishPoolActivityReportResp) Reset()         { *m = WishPoolActivityReportResp{} }
func (m *WishPoolActivityReportResp) String() string { return proto.CompactTextString(m) }
func (*WishPoolActivityReportResp) ProtoMessage()    {}
func (*WishPoolActivityReportResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{182}
}
func (m *WishPoolActivityReportResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishPoolActivityReportResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishPoolActivityReportResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishPoolActivityReportResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishPoolActivityReportResp.Merge(m, src)
}
func (m *WishPoolActivityReportResp) XXX_Size() int {
	return m.Size()
}
func (m *WishPoolActivityReportResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WishPoolActivityReportResp.DiscardUnknown(m)
}

var xxx_messageInfo_WishPoolActivityReportResp proto.InternalMessageInfo

func (m *WishPoolActivityReportResp) GetList() []*share_message.WishActivityReport {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WishPoolActivityReportResp) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type CountMap struct {
	Key                  *string  `protobuf:"bytes,1,opt,name=Key" json:"Key,omitempty"`
	Value                *int32   `protobuf:"varint,2,opt,name=Value" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountMap) Reset()         { *m = CountMap{} }
func (m *CountMap) String() string { return proto.CompactTextString(m) }
func (*CountMap) ProtoMessage()    {}
func (*CountMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{183}
}
func (m *CountMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountMap.Merge(m, src)
}
func (m *CountMap) XXX_Size() int {
	return m.Size()
}
func (m *CountMap) XXX_DiscardUnknown() {
	xxx_messageInfo_CountMap.DiscardUnknown(m)
}

var xxx_messageInfo_CountMap proto.InternalMessageInfo

func (m *CountMap) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *CountMap) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

//累计完成天数的用户数
type DayCountMap struct {
	WeekCount            *int32   `protobuf:"varint,1,opt,name=WeekCount" json:"WeekCount,omitempty"`
	TwoWeekCount         *int32   `protobuf:"varint,2,opt,name=TwoWeekCount" json:"TwoWeekCount,omitempty"`
	ThreeWeekCount       *int32   `protobuf:"varint,3,opt,name=ThreeWeekCount" json:"ThreeWeekCount,omitempty"`
	FourWeekCount        *int32   `protobuf:"varint,4,opt,name=FourWeekCount" json:"FourWeekCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DayCountMap) Reset()         { *m = DayCountMap{} }
func (m *DayCountMap) String() string { return proto.CompactTextString(m) }
func (*DayCountMap) ProtoMessage()    {}
func (*DayCountMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{184}
}
func (m *DayCountMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DayCountMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DayCountMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DayCountMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DayCountMap.Merge(m, src)
}
func (m *DayCountMap) XXX_Size() int {
	return m.Size()
}
func (m *DayCountMap) XXX_DiscardUnknown() {
	xxx_messageInfo_DayCountMap.DiscardUnknown(m)
}

var xxx_messageInfo_DayCountMap proto.InternalMessageInfo

func (m *DayCountMap) GetWeekCount() int32 {
	if m != nil && m.WeekCount != nil {
		return *m.WeekCount
	}
	return 0
}

func (m *DayCountMap) GetTwoWeekCount() int32 {
	if m != nil && m.TwoWeekCount != nil {
		return *m.TwoWeekCount
	}
	return 0
}

func (m *DayCountMap) GetThreeWeekCount() int32 {
	if m != nil && m.ThreeWeekCount != nil {
		return *m.ThreeWeekCount
	}
	return 0
}

func (m *DayCountMap) GetFourWeekCount() int32 {
	if m != nil && m.FourWeekCount != nil {
		return *m.FourWeekCount
	}
	return 0
}

//累计完成次数的用户数
type CounterDataMap struct {
	TenCount             *int32   `protobuf:"varint,1,opt,name=TenCount" json:"TenCount,omitempty"`
	TwentyCount          *int32   `protobuf:"varint,2,opt,name=TwentyCount" json:"TwentyCount,omitempty"`
	ThirtyCount          *int32   `protobuf:"varint,3,opt,name=ThirtyCount" json:"ThirtyCount,omitempty"`
	FortyWeekCount       *int32   `protobuf:"varint,4,opt,name=FortyWeekCount" json:"FortyWeekCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CounterDataMap) Reset()         { *m = CounterDataMap{} }
func (m *CounterDataMap) String() string { return proto.CompactTextString(m) }
func (*CounterDataMap) ProtoMessage()    {}
func (*CounterDataMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_c28ca5a11407b688, []int{185}
}
func (m *CounterDataMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CounterDataMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CounterDataMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CounterDataMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CounterDataMap.Merge(m, src)
}
func (m *CounterDataMap) XXX_Size() int {
	return m.Size()
}
func (m *CounterDataMap) XXX_DiscardUnknown() {
	xxx_messageInfo_CounterDataMap.DiscardUnknown(m)
}

var xxx_messageInfo_CounterDataMap proto.InternalMessageInfo

func (m *CounterDataMap) GetTenCount() int32 {
	if m != nil && m.TenCount != nil {
		return *m.TenCount
	}
	return 0
}

func (m *CounterDataMap) GetTwentyCount() int32 {
	if m != nil && m.TwentyCount != nil {
		return *m.TwentyCount
	}
	return 0
}

func (m *CounterDataMap) GetThirtyCount() int32 {
	if m != nil && m.ThirtyCount != nil {
		return *m.ThirtyCount
	}
	return 0
}

func (m *CounterDataMap) GetFortyWeekCount() int32 {
	if m != nil && m.FortyWeekCount != nil {
		return *m.FortyWeekCount
	}
	return 0
}

func init() {
	proto.RegisterType((*SigninRequest)(nil), "brower_backstage.SigninRequest")
	proto.RegisterType((*SigninResponse)(nil), "brower_backstage.SigninResponse")
	proto.RegisterType((*LoginResponse)(nil), "brower_backstage.LoginResponse")
	proto.RegisterType((*GetManagerListResponse)(nil), "brower_backstage.GetManagerListResponse")
	proto.RegisterType((*ManagerLogResponse)(nil), "brower_backstage.ManagerLogResponse")
	proto.RegisterType((*ManagerTypesResponse)(nil), "brower_backstage.ManagerTypesResponse")
	proto.RegisterType((*QueryRolePowerList)(nil), "brower_backstage.QueryRolePowerList")
	proto.RegisterType((*GetPlayerListRequest)(nil), "brower_backstage.GetPlayerListRequest")
	proto.RegisterType((*GetPlayerFriendListRequest)(nil), "brower_backstage.GetPlayerFriendListRequest")
	proto.RegisterType((*GetPlayerListResponse)(nil), "brower_backstage.GetPlayerListResponse")
	proto.RegisterType((*GetTeamListRequest)(nil), "brower_backstage.GetTeamListRequest")
	proto.RegisterType((*GetTeamListResponse)(nil), "brower_backstage.GetTeamListResponse")
	proto.RegisterType((*MemberOptRequest)(nil), "brower_backstage.MemberOptRequest")
	proto.RegisterType((*TeamMemberRequest)(nil), "brower_backstage.TeamMemberRequest")
	proto.RegisterType((*TeamMemberResponse)(nil), "brower_backstage.TeamMemberResponse")
	proto.RegisterType((*SourceTypeRequest)(nil), "brower_backstage.SourceTypeRequest")
	proto.RegisterType((*SourceTypeResponse)(nil), "brower_backstage.SourceTypeResponse")
	proto.RegisterType((*AddGoldResult)(nil), "brower_backstage.AddGoldResult")
	proto.RegisterType((*QueryGoldLogRequest)(nil), "brower_backstage.QueryGoldLogRequest")
	proto.RegisterType((*QueryGoldLogResponse)(nil), "brower_backstage.QueryGoldLogResponse")
	proto.RegisterType((*GoldLogList)(nil), "brower_backstage.GoldLogList")
	proto.RegisterType((*PaymentSettingResponse)(nil), "brower_backstage.PaymentSettingResponse")
	proto.RegisterType((*PlayerKeepReportResponse)(nil), "brower_backstage.PlayerKeepReportResponse")
	proto.RegisterType((*PlayerActiveReportResponse)(nil), "brower_backstage.PlayerActiveReportResponse")
	proto.RegisterType((*PlayerBehaviorReportResponse)(nil), "brower_backstage.PlayerBehaviorReportResponse")
	proto.RegisterType((*InOutCashSumReportResponse)(nil), "brower_backstage.InOutCashSumReportResponse")
	proto.RegisterType((*RegisterLoginReportResponse)(nil), "brower_backstage.RegisterLoginReportResponse")
	proto.RegisterType((*OperationChannelReportResponse)(nil), "brower_backstage.OperationChannelReportResponse")
	proto.RegisterType((*ChannelReportResponse)(nil), "brower_backstage.ChannelReportResponse")
	proto.RegisterType((*ArticleReportResponse)(nil), "brower_backstage.ArticleReportResponse")
	proto.RegisterType((*SquareReportResponse)(nil), "brower_backstage.SquareReportResponse")
	proto.RegisterType((*AdvReportResponse)(nil), "brower_backstage.AdvReportResponse")
	proto.RegisterType((*PayTypeResponse)(nil), "brower_backstage.PayTypeResponse")
	proto.RegisterType((*PaySceneResponse)(nil), "brower_backstage.PaySceneResponse")
	proto.RegisterType((*PaymentPlatformResponse)(nil), "brower_backstage.PaymentPlatformResponse")
	proto.RegisterType((*PlatformChannelRequest)(nil), "brower_backstage.PlatformChannelRequest")
	proto.RegisterType((*PlatformChannelResponse)(nil), "brower_backstage.PlatformChannelResponse")
	proto.RegisterType((*QueryFeaturesRequest)(nil), "brower_backstage.QueryFeaturesRequest")
	proto.RegisterType((*QueryFeaturesResponse)(nil), "brower_backstage.QueryFeaturesResponse")
	proto.RegisterType((*PlayerComplaintResponse)(nil), "brower_backstage.PlayerComplaintResponse")
	proto.RegisterType((*QueryShopItemResponse)(nil), "brower_backstage.QueryShopItemResponse")
	proto.RegisterType((*QueryShopItemObject)(nil), "brower_backstage.QueryShopItemObject")
	proto.RegisterType((*QueryShopItemRequest)(nil), "brower_backstage.QueryShopItemRequest")
	proto.RegisterType((*ShopItemFile)(nil), "brower_backstage.ShopItemFile")
	proto.RegisterType((*QueryShopItemDetailResponse)(nil), "brower_backstage.QueryShopItemDetailResponse")
	proto.RegisterType((*ShopItemType)(nil), "brower_backstage.ShopItemType")
	proto.RegisterType((*ShopItemCategory)(nil), "brower_backstage.ShopItemCategory")
	proto.RegisterType((*GetShopItemTypeDropDownResponse)(nil), "brower_backstage.GetShopItemTypeDropDownResponse")
	proto.RegisterType((*QueryShopCommentRequest)(nil), "brower_backstage.QueryShopCommentRequest")
	proto.RegisterType((*QueryShopCommentResponse)(nil), "brower_backstage.QueryShopCommentResponse")
	proto.RegisterType((*EditShopCommentRequest)(nil), "brower_backstage.EditShopCommentRequest")
	proto.RegisterType((*QueryShopOrderRequest)(nil), "brower_backstage.QueryShopOrderRequest")
	proto.RegisterType((*QueryShopOrderResponse)(nil), "brower_backstage.QueryShopOrderResponse")
	proto.RegisterType((*CancelShopOrderRequest)(nil), "brower_backstage.CancelShopOrderRequest")
	proto.RegisterType((*SendShopOrderRequest)(nil), "brower_backstage.SendShopOrderRequest")
	proto.RegisterType((*ShopOrderExpressCom)(nil), "brower_backstage.ShopOrderExpressCom")
	proto.RegisterType((*QueryShopOrderExpressBody)(nil), "brower_backstage.QueryShopOrderExpressBody")
	proto.RegisterType((*QueryShopOrderExpressResponse)(nil), "brower_backstage.QueryShopOrderExpressResponse")
	proto.RegisterType((*GetExpressComDropDownResponse)(nil), "brower_backstage.GetExpressComDropDownResponse")
	proto.RegisterType((*ReleaseEditShopItemObject)(nil), "brower_backstage.ReleaseEditShopItemObject")
	proto.RegisterType((*QueryShopReceiveAddressResponse)(nil), "brower_backstage.QueryShopReceiveAddressResponse")
	proto.RegisterType((*QueryShopDeliverAddressResponse)(nil), "brower_backstage.QueryShopDeliverAddressResponse")
	proto.RegisterType((*ShopPointCardObject)(nil), "brower_backstage.ShopPointCardObject")
	proto.RegisterType((*ImportShopPointCardRequest)(nil), "brower_backstage.ImportShopPointCardRequest")
	proto.RegisterType((*ImportShopPointCardResponse)(nil), "brower_backstage.ImportShopPointCardResponse")
	proto.RegisterType((*QueryShopPointCardRequest)(nil), "brower_backstage.QueryShopPointCardRequest")
	proto.RegisterType((*ResShopPointCardObject)(nil), "brower_backstage.ResShopPointCardObject")
	proto.RegisterType((*QueryShopPointCardResponse)(nil), "brower_backstage.QueryShopPointCardResponse")
	proto.RegisterType((*GetShopPointCardDropDownRequest)(nil), "brower_backstage.GetShopPointCardDropDownRequest")
	proto.RegisterType((*GetShopPointCardDropDownResponse)(nil), "brower_backstage.GetShopPointCardDropDownResponse")
	proto.RegisterType((*QueryOrderRequest)(nil), "brower_backstage.QueryOrderRequest")
	proto.RegisterType((*QueryOrderResponse)(nil), "brower_backstage.QueryOrderResponse")
	proto.RegisterType((*OptOrderRequest)(nil), "brower_backstage.OptOrderRequest")
	proto.RegisterType((*ComplaintListResponse)(nil), "brower_backstage.ComplaintListResponse")
	proto.RegisterType((*ReComplaintRequest)(nil), "brower_backstage.ReComplaintRequest")
	proto.RegisterType((*AddWaiterRequest)(nil), "brower_backstage.AddWaiterRequest")
	proto.RegisterType((*AddWaiterResponse)(nil), "brower_backstage.AddWaiterResponse")
	proto.RegisterType((*QuerySystemNoticeResponse)(nil), "brower_backstage.QuerySystemNoticeResponse")
	proto.RegisterType((*ExportChatRecordResponse)(nil), "brower_backstage.ExportChatRecordResponse")
	proto.RegisterType((*PlayerFriendInfo)(nil), "brower_backstage.PlayerFriendInfo")
	proto.RegisterType((*AddPlayerFriendInfo)(nil), "brower_backstage.AddPlayerFriendInfo")
	proto.RegisterType((*CreateTeamInfo)(nil), "brower_backstage.CreateTeamInfo")
	proto.RegisterType((*GetTeamPlayerListRequest)(nil), "brower_backstage.GetTeamPlayerListRequest")
	proto.RegisterType((*GetTeamPlayerListResponse)(nil), "brower_backstage.GetTeamPlayerListResponse")
	proto.RegisterType((*OperationListResponse)(nil), "brower_backstage.OperationListResponse")
	proto.RegisterType((*InterestTypeResponse)(nil), "brower_backstage.InterestTypeResponse")
	proto.RegisterType((*InterestTagResponse)(nil), "brower_backstage.InterestTagResponse")
	proto.RegisterType((*InterestGroupResponse)(nil), "brower_backstage.InterestGroupResponse")
	proto.RegisterType((*CustomTagResponse)(nil), "brower_backstage.CustomTagResponse")
	proto.RegisterType((*GrabTagResponse)(nil), "brower_backstage.GrabTagResponse")
	proto.RegisterType((*CrawlWordsResponse)(nil), "brower_backstage.CrawlWordsResponse")
	proto.RegisterType((*PlayerCrawlWordsResponse)(nil), "brower_backstage.PlayerCrawlWordsResponse")
	proto.RegisterType((*OperationChannelReportLine)(nil), "brower_backstage.OperationChannelReportLine")
	proto.RegisterType((*OperationChannelReportLineResponse)(nil), "brower_backstage.OperationChannelReportLineResponse")
	proto.RegisterType((*ArticleResponse)(nil), "brower_backstage.ArticleResponse")
	proto.RegisterType((*ArticleListResponse)(nil), "brower_backstage.ArticleListResponse")
	proto.RegisterType((*QueryArticleResponse)(nil), "brower_backstage.QueryArticleResponse")
	proto.RegisterType((*QueryTweetsResponse)(nil), "brower_backstage.QueryTweetsResponse")
	proto.RegisterType((*QueryRegisterPushResponse)(nil), "brower_backstage.QueryRegisterPushResponse")
	proto.RegisterType((*ArticleInfo)(nil), "brower_backstage.ArticleInfo")
	proto.RegisterType((*ArticleInfoResponse)(nil), "brower_backstage.ArticleInfoResponse")
	proto.RegisterType((*ArticleCommentResponse)(nil), "brower_backstage.ArticleCommentResponse")
	proto.RegisterType((*QueryArticleOrTweetsRequest)(nil), "brower_backstage.QueryArticleOrTweetsRequest")
	proto.RegisterType((*WaiterPerformanceResponse)(nil), "brower_backstage.WaiterPerformanceResponse")
	proto.RegisterType((*IMmessageResponse)(nil), "brower_backstage.IMmessageResponse")
	proto.RegisterType((*IMmessageNopageResponse)(nil), "brower_backstage.IMmessageNopageResponse")
	proto.RegisterType((*WaiterFAQResponse)(nil), "brower_backstage.WaiterFAQResponse")
	proto.RegisterType((*WaiterFastReplyResponse)(nil), "brower_backstage.WaiterFastReplyResponse")
	proto.RegisterType((*TeamManager)(nil), "brower_backstage.TeamManager")
	proto.RegisterType((*CheckScoreRequest)(nil), "brower_backstage.CheckScoreRequest")
	proto.RegisterType((*CheckScoreResponse)(nil), "brower_backstage.CheckScoreResponse")
	proto.RegisterType((*DynamicListRequest)(nil), "brower_backstage.DynamicListRequest")
	proto.RegisterType((*DynamicListResponse)(nil), "brower_backstage.DynamicListResponse")
	proto.RegisterType((*DirtyWordsResponse)(nil), "brower_backstage.DirtyWordsResponse")
	proto.RegisterType((*SignatureResponse)(nil), "brower_backstage.SignatureResponse")
	proto.RegisterType((*CommentList)(nil), "brower_backstage.CommentList")
	proto.RegisterType((*PlayerFreezeLogResponse)(nil), "brower_backstage.PlayerFreezeLogResponse")
	proto.RegisterType((*DelDynamicRequest)(nil), "brower_backstage.DelDynamicRequest")
	proto.RegisterType((*PlayerCancleAccountListResponse)(nil), "brower_backstage.PlayerCancleAccountListResponse")
	proto.RegisterType((*ChatLogRequest)(nil), "brower_backstage.ChatLogRequest")
	proto.RegisterType((*PersonalChatLogResponse)(nil), "brower_backstage.PersonalChatLogResponse")
	proto.RegisterType((*TeamChatLogResponse)(nil), "brower_backstage.TeamChatLogResponse")
	proto.RegisterType((*PlayerPortraitResponse)(nil), "brower_backstage.PlayerPortraitResponse")
	proto.RegisterType((*AdvListResponse)(nil), "brower_backstage.AdvListResponse")
	proto.RegisterType((*IndexTipsResponse)(nil), "brower_backstage.IndexTipsResponse")
	proto.RegisterType((*PopSuspendResponse)(nil), "brower_backstage.PopSuspendResponse")
	proto.RegisterType((*ActivityReportResponse)(nil), "brower_backstage.ActivityReportResponse")
	proto.RegisterType((*TopicTypeResponse)(nil), "brower_backstage.TopicTypeResponse")
	proto.RegisterType((*TopicResponse)(nil), "brower_backstage.TopicResponse")
	proto.RegisterType((*TopicApplyListRes)(nil), "brower_backstage.TopicApplyListRes")
	proto.RegisterType((*QueryTopicApplyRes)(nil), "brower_backstage.QueryTopicApplyRes")
	proto.RegisterType((*AuditTopicApplyReq)(nil), "brower_backstage.AuditTopicApplyReq")
	proto.RegisterType((*ApplyTopicMasterRes)(nil), "brower_backstage.ApplyTopicMasterRes")
	proto.RegisterType((*RecallReportResponse)(nil), "brower_backstage.RecallReportResponse")
	proto.RegisterType((*RecallplayerLogResponse)(nil), "brower_backstage.RecallplayerLogResponse")
	proto.RegisterType((*CoinItemListResponse)(nil), "brower_backstage.CoinItemListResponse")
	proto.RegisterType((*QueryNearSetResponse)(nil), "brower_backstage.QueryNearSetResponse")
	proto.RegisterType((*CoinChangeLogResponse)(nil), "brower_backstage.CoinChangeLogResponse")
	proto.RegisterType((*CoinLogList)(nil), "brower_backstage.CoinLogList")
	proto.RegisterType((*CoinProductResponse)(nil), "brower_backstage.CoinProductResponse")
	proto.RegisterType((*PropsItemResponse)(nil), "brower_backstage.PropsItemResponse")
	proto.RegisterType((*PlayerBagItemResponse)(nil), "brower_backstage.PlayerBagItemResponse")
	proto.RegisterType((*PlayerGetPropsLogResponse)(nil), "brower_backstage.PlayerGetPropsLogResponse")
	proto.RegisterType((*CoinProductReportResponse)(nil), "brower_backstage.CoinProductReportResponse")
	proto.RegisterType((*NewsSourceResponse)(nil), "brower_backstage.NewsSourceResponse")
	proto.RegisterType((*VideoSourceResponse)(nil), "brower_backstage.VideoSourceResponse")
	proto.RegisterType((*CrawlJobResponse)(nil), "brower_backstage.CrawlJobResponse")
	proto.RegisterType((*SysLabelResponse)(nil), "brower_backstage.SysLabelResponse")
	proto.RegisterType((*CarouselResponse)(nil), "brower_backstage.CarouselResponse")
	proto.RegisterType((*GameListResponse)(nil), "brower_backstage.GameListResponse")
	proto.RegisterType((*CommentDelRequest)(nil), "brower_backstage.CommentDelRequest")
	proto.RegisterType((*CommentUploadRequest)(nil), "brower_backstage.CommentUploadRequest")
	proto.RegisterType((*CommentListResponse)(nil), "brower_backstage.CommentListResponse")
	proto.RegisterType((*NearReportResponse)(nil), "brower_backstage.NearReportResponse")
	proto.RegisterType((*ButtonClickReportResponse)(nil), "brower_backstage.ButtonClickReportResponse")
	proto.RegisterType((*PageRegLogReportResponse)(nil), "brower_backstage.PageRegLogReportResponse")
	proto.RegisterType((*VoiceWorkListResponse)(nil), "brower_backstage.VoiceWorkListResponse")
	proto.RegisterType((*BgVoiceVideoListResponse)(nil), "brower_backstage.BgVoiceVideoListResponse")
	proto.RegisterType((*MatchGuideListResponse)(nil), "brower_backstage.MatchGuideListResponse")
	proto.RegisterType((*SystemBgImageListResponse)(nil), "brower_backstage.SystemBgImageListResponse")
	proto.RegisterType((*IntimacyConfigRes)(nil), "brower_backstage.IntimacyConfigRes")
	proto.RegisterType((*SportSysNoticeResponse)(nil), "brower_backstage.SportSysNoticeResponse")
	proto.RegisterType((*BetSlipListResponse)(nil), "brower_backstage.BetSlipListResponse")
	proto.RegisterType((*BetSlipStatisticsResponse)(nil), "brower_backstage.BetSlipStatisticsResponse")
	proto.RegisterType((*GameGuessRequest)(nil), "brower_backstage.GameGuessRequest")
	proto.RegisterType((*GameGuessResponse)(nil), "brower_backstage.GameGuessResponse")
	proto.RegisterType((*EditGameGuess)(nil), "brower_backstage.EditGameGuess")
	proto.RegisterType((*EditGameGuessRequest)(nil), "brower_backstage.EditGameGuessRequest")
	proto.RegisterType((*RpcBetSlipOperateRequest)(nil), "brower_backstage.RpcBetSlipOperateRequest")
	proto.RegisterType((*GameTeamInfoResponse)(nil), "brower_backstage.GameTeamInfoResponse")
	proto.RegisterType((*GameRealTimeResponse)(nil), "brower_backstage.GameRealTimeResponse")
	proto.RegisterType((*GiveWhiteListRes)(nil), "brower_backstage.GiveWhiteListRes")
	proto.RegisterType((*RechargeEsCfgRes)(nil), "brower_backstage.RechargeEsCfgRes")
	proto.RegisterType((*PointsReportRes)(nil), "brower_backstage.PointsReportRes")
	proto.RegisterType((*EditGameRealTimeRequest)(nil), "brower_backstage.EditGameRealTimeRequest")
	proto.RegisterType((*GameRealTimeObject)(nil), "brower_backstage.GameRealTimeObject")
	proto.RegisterType((*GameRealTimePlayerObject)(nil), "brower_backstage.GameRealTimePlayerObject")
	proto.RegisterType((*SportCoinLogResponse)(nil), "brower_backstage.SportCoinLogResponse")
	proto.RegisterType((*SportCoinLogList)(nil), "brower_backstage.SportCoinLogList")
	proto.RegisterType((*VCBuryingPointReportRes)(nil), "brower_backstage.VCBuryingPointReportRes")
	proto.RegisterType((*AddWishAllowListReq)(nil), "brower_backstage.AddWishAllowListReq")
	proto.RegisterType((*WishAllowListResp)(nil), "brower_backstage.WishAllowListResp")
	proto.RegisterType((*WishPoolActivityReportResp)(nil), "brower_backstage.WishPoolActivityReportResp")
	proto.RegisterType((*CountMap)(nil), "brower_backstage.CountMap")
	proto.RegisterType((*DayCountMap)(nil), "brower_backstage.DayCountMap")
	proto.RegisterType((*CounterDataMap)(nil), "brower_backstage.CounterDataMap")
}

func init() { proto.RegisterFile("brower_backstage.proto", fileDescriptor_c28ca5a11407b688) }

var fileDescriptor_c28ca5a11407b688 = []byte{
	// 11631 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0xbd, 0xcb, 0x6f, 0x1c, 0x49,
	0xd2, 0x18, 0x0e, 0xb2, 0x45, 0x49, 0x4c, 0xea, 0x41, 0x36, 0x45, 0x89, 0xe2, 0xec, 0xcc, 0x68,
	0x5a, 0x1a, 0xcd, 0x5b, 0xb3, 0xa3, 0xd9, 0xdd, 0xd9, 0xd9, 0x79, 0x76, 0x37, 0x25, 0x0e, 0x25,
	0xbe, 0xa6, 0x9b, 0x12, 0x47, 0xf3, 0xd2, 0x14, 0xbb, 0x92, 0xdd, 0xb5, 0xac, 0xae, 0xea, 0xa9,
	0xaa, 0x26, 0xd5, 0xfb, 0x03, 0x7e, 0x27, 0xc3, 0x86, 0x0f, 0xf6, 0xc9, 0x80, 0x2f, 0xf6, 0xcd,
	0xf8, 0x0c, 0xd8, 0xf0, 0xcd, 0xf8, 0x6e, 0x86, 0xaf, 0x86, 0x4f, 0xdf, 0x1f, 0xe0, 0xc3, 0x87,
	0x05, 0x0c, 0xdf, 0xfd, 0x07, 0x18, 0x46, 0x46, 0x3e, 0x2a, 0x33, 0x2b, 0xb3, 0xba, 0xaa, 0xc4,
	0x85, 0x0f, 0x04, 0xd1, 0x59, 0x19, 0x91, 0x99, 0x91, 0x91, 0x91, 0x91, 0x11, 0x99, 0x11, 0xe8,
	0xfa, 0x61, 0x14, 0x9e, 0xe2, 0xe8, 0xf9, 0xa1, 0xd3, 0x3b, 0x8e, 0x13, 0xa7, 0x8f, 0xef, 0x8d,
	0xa2, 0x30, 0x09, 0xeb, 0x8b, 0x7a, 0xf9, 0x1a, 0x3a, 0x74, 0x62, 0xf6, 0x75, 0xed, 0x52, 0x2f,
	0x1c, 0x0e, 0xc3, 0x80, 0xfd, 0x5a, 0x62, 0x75, 0x4f, 0xbd, 0x78, 0xc0, 0x8a, 0x3e, 0xec, 0x3b,
	0x43, 0xfc, 0x3c, 0xc6, 0xd1, 0x09, 0x8e, 0x3e, 0x84, 0xa2, 0x0f, 0xe3, 0x81, 0x13, 0xe1, 0xe7,
	0x43, 0x1c, 0xc7, 0x4e, 0x1f, 0x7f, 0xe8, 0xf8, 0xbe, 0x82, 0xe3, 0xfe, 0x34, 0x00, 0x1c, 0x8f,
	0xc2, 0x28, 0x69, 0x97, 0x82, 0x49, 0x9c, 0x43, 0x1f, 0x3f, 0x8f, 0x93, 0x68, 0xdc, 0x4b, 0x18,
	0xcc, 0x27, 0x65, 0x60, 0x9e, 0xc7, 0x83, 0x70, 0xc4, 0x00, 0xbf, 0x2c, 0x05, 0x38, 0xf2, 0x9d,
	0x09, 0x50, 0x4f, 0x90, 0xec, 0x8f, 0xa5, 0xe0, 0x93, 0x70, 0xe4, 0xf5, 0x18, 0xe4, 0xe7, 0xa5,
	0x20, 0x7b, 0xa1, 0x17, 0xc8, 0xfd, 0xfe, 0xa2, 0x14, 0xf4, 0x49, 0xe8, 0xf5, 0xf0, 0x73, 0x3f,
	0x3c, 0xc1, 0x95, 0xe8, 0x25, 0x71, 0xc0, 0xd7, 0xa5, 0x01, 0x9f, 0x3b, 0xbd, 0xc4, 0x3b, 0xf1,
	0x92, 0x09, 0xc3, 0xf0, 0x59, 0x29, 0x0c, 0xf8, 0x03, 0x60, 0x90, 0x98, 0x01, 0x7f, 0x55, 0x09,
	0xf8, 0xb9, 0x33, 0xf2, 0x5e, 0x0e, 0xc1, 0xe1, 0x88, 0xf5, 0xa0, 0x31, 0x42, 0x97, 0xbb, 0x5e,
	0x3f, 0xf0, 0x82, 0x0e, 0xfe, 0x75, 0x8c, 0xe3, 0xa4, 0x7e, 0x19, 0xcd, 0xed, 0x0d, 0xc2, 0x00,
	0xaf, 0xce, 0xdc, 0x9a, 0x7d, 0x7b, 0x9e, 0xfc, 0xdc, 0x9f, 0x8c, 0x70, 0xbc, 0x3a, 0x7b, 0x6b,
	0xe6, 0xed, 0xb9, 0xfa, 0x25, 0x74, 0xae, 0x1d, 0xba, 0x78, 0xb5, 0x76, 0x6b, 0xe6, 0xed, 0xf9,
	0xfa, 0x22, 0xba, 0xb8, 0xe7, 0xc4, 0xf1, 0x69, 0x18, 0xb9, 0xab, 0xe7, 0xa0, 0xe4, 0x2a, 0xba,
	0xd0, 0xec, 0xf5, 0xc2, 0x71, 0x90, 0xac, 0xce, 0xf1, 0x2a, 0xcd, 0x08, 0x3b, 0x00, 0x74, 0x9e,
	0x94, 0x34, 0x5e, 0x45, 0x57, 0x78, 0x8b, 0xf1, 0x28, 0x0c, 0x62, 0x5c, 0x5f, 0x40, 0xb5, 0x27,
	0x91, 0xbf, 0x3a, 0x03, 0x9f, 0x87, 0xe8, 0xf2, 0x56, 0xd8, 0x97, 0xbe, 0xde, 0x41, 0xe7, 0x9e,
	0xc4, 0x38, 0x82, 0xcf, 0x0b, 0xf7, 0xaf, 0xdf, 0x53, 0xc6, 0x77, 0x6f, 0xdb, 0x09, 0x9c, 0x3e,
	0x8e, 0xea, 0x6f, 0xa1, 0xb9, 0x3d, 0xb2, 0xbc, 0xa1, 0x9f, 0x0b, 0xf7, 0x57, 0xb5, 0x6a, 0x9d,
	0xd0, 0xc7, 0xf0, 0x1d, 0x06, 0x14, 0x1e, 0xe3, 0x80, 0x0e, 0xa1, 0xf1, 0x2d, 0xba, 0xbe, 0x81,
	0x13, 0x86, 0x65, 0xcb, 0x8b, 0x13, 0xb9, 0x5d, 0xf2, 0x7b, 0x75, 0xe6, 0x56, 0x2d, 0xa7, 0xdd,
	0x25, 0x34, 0xbf, 0xe7, 0xf4, 0x71, 0x1b, 0x86, 0x0c, 0x34, 0x6a, 0x3c, 0x41, 0x75, 0x8e, 0x2f,
	0xec, 0x0b, 0x74, 0xef, 0x2b, 0xe8, 0x5e, 0xd3, 0xd0, 0xb5, 0xb8, 0x00, 0xdb, 0x1d, 0x25, 0x5b,
	0x61, 0xdf, 0x84, 0x76, 0x1f, 0x5d, 0x63, 0x68, 0x61, 0x42, 0x04, 0xe2, 0x77, 0x14, 0xc4, 0xaf,
	0x98, 0xfb, 0x09, 0x20, 0x26, 0xac, 0xbb, 0xa8, 0xfe, 0xed, 0x18, 0x47, 0x13, 0x41, 0x20, 0x82,
	0xab, 0x7e, 0x57, 0xc1, 0x69, 0x27, 0xa6, 0x01, 0xe1, 0x3f, 0xad, 0xa1, 0x6b, 0x1b, 0x38, 0xd9,
	0x03, 0xd1, 0x42, 0x09, 0x4a, 0x19, 0xeb, 0x2a, 0xba, 0xd0, 0x1e, 0x47, 0xa4, 0x3a, 0x4c, 0xe5,
	0x1c, 0xe5, 0x9e, 0x3e, 0xee, 0x7a, 0x7f, 0xc1, 0x8c, 0xbb, 0xae, 0xa2, 0x0b, 0x8f, 0xf1, 0x04,
	0xd8, 0x89, 0x32, 0xd8, 0x25, 0x74, 0x8e, 0xf4, 0x1c, 0x98, 0x6b, 0xae, 0x7e, 0x1d, 0x5d, 0x69,
	0xe1, 0xbe, 0x17, 0xec, 0x7b, 0x43, 0x1c, 0x27, 0xce, 0x70, 0x04, 0x3c, 0x56, 0xab, 0x5f, 0x43,
	0x97, 0x1e, 0x04, 0x6e, 0x5a, 0x7a, 0x1e, 0x4a, 0x2f, 0xa1, 0x73, 0xdd, 0x30, 0x4a, 0x56, 0x2f,
	0x70, 0x3e, 0x24, 0x9d, 0x01, 0x6c, 0x17, 0x79, 0xf3, 0x9b, 0xf1, 0x6e, 0xe0, 0x7b, 0x01, 0x5e,
	0x9d, 0x87, 0x92, 0x05, 0x54, 0xeb, 0xe2, 0x17, 0xab, 0x88, 0x73, 0x3a, 0x19, 0xe7, 0xea, 0x02,
	0xef, 0x59, 0x6f, 0xe0, 0x04, 0x01, 0xf6, 0x57, 0x2f, 0xdd, 0xaa, 0xd1, 0x75, 0xb1, 0xe5, 0x1c,
	0x62, 0x7f, 0xf5, 0xf2, 0xad, 0xda, 0xdb, 0x73, 0x84, 0x10, 0xed, 0x71, 0x9c, 0x84, 0xc3, 0x7d,
	0xa7, 0xbf, 0x7a, 0x05, 0x8a, 0xae, 0xa2, 0x0b, 0x1b, 0x91, 0x73, 0x48, 0x0a, 0xae, 0x42, 0xc1,
	0x15, 0x74, 0xbe, 0x9b, 0x38, 0xc9, 0x38, 0x5e, 0x5d, 0xe4, 0x38, 0x3b, 0xb8, 0x0f, 0x3d, 0x5a,
	0x82, 0x82, 0x3a, 0x42, 0xeb, 0xf8, 0xc4, 0xeb, 0x61, 0x28, 0xab, 0xf3, 0x5e, 0x92, 0x81, 0x41,
	0xc9, 0x32, 0xaf, 0x75, 0xe0, 0x78, 0x09, 0x9d, 0xd3, 0xd5, 0x6b, 0xbc, 0x8c, 0x12, 0x1c, 0xca,
	0x56, 0x60, 0x22, 0xfe, 0x6e, 0x16, 0xad, 0x89, 0x89, 0x78, 0x18, 0x79, 0x38, 0x70, 0x5f, 0x76,
	0x3a, 0x96, 0xd0, 0x3c, 0xdb, 0x32, 0x3c, 0xba, 0xe0, 0x6b, 0x64, 0x50, 0x7d, 0x1c, 0xb8, 0x38,
	0x02, 0xaa, 0xcf, 0x11, 0xba, 0xf8, 0x40, 0x97, 0x0b, 0x1c, 0xe9, 0x28, 0x0a, 0x4f, 0xbc, 0xa0,
	0x47, 0xc9, 0x0e, 0x53, 0xda, 0xf3, 0x92, 0x09, 0x90, 0x7c, 0x9e, 0x80, 0x47, 0xb8, 0xef, 0x85,
	0x01, 0x50, 0x1d, 0xbe, 0x26, 0x64, 0x08, 0x94, 0xea, 0x0a, 0x55, 0x2f, 0xf1, 0x3e, 0x71, 0xaa,
	0x5e, 0xb6, 0x30, 0xc5, 0x15, 0x23, 0x53, 0x5c, 0x85, 0x52, 0x95, 0x50, 0x30, 0x0f, 0x8d, 0x2e,
	0x5a, 0xd1, 0x18, 0x96, 0xad, 0xac, 0xb7, 0x94, 0x55, 0x70, 0x53, 0x5b, 0x05, 0x14, 0xa0, 0xe5,
	0xc4, 0xd8, 0xb4, 0x0c, 0xfe, 0xd9, 0x0c, 0xaa, 0x6f, 0xe0, 0x64, 0x1f, 0x3b, 0xc3, 0xb3, 0x5d,
	0x04, 0x29, 0x17, 0x11, 0xe6, 0xbf, 0xa8, 0x30, 0xb6, 0x98, 0x02, 0x52, 0x03, 0xd3, 0x29, 0x68,
	0xec, 0xa2, 0x65, 0xa5, 0x23, 0x6c, 0x70, 0x6f, 0x2a, 0x83, 0xbb, 0xa1, 0x0d, 0x8e, 0x54, 0x5f,
	0x77, 0x12, 0xc7, 0x34, 0xb4, 0x16, 0x5a, 0xdc, 0xc6, 0xc3, 0x43, 0x1c, 0xed, 0x8e, 0xc4, 0xb8,
	0xae, 0xa0, 0xf3, 0x04, 0x64, 0xd3, 0x85, 0x61, 0xd5, 0xe4, 0x7d, 0x60, 0x96, 0xaf, 0x17, 0xba,
	0x8f, 0xd4, 0x00, 0x47, 0x82, 0x96, 0x48, 0x7d, 0x8a, 0xa7, 0x04, 0x71, 0xd2, 0x76, 0x6a, 0xd0,
	0x8e, 0x18, 0xeb, 0x39, 0xbe, 0x68, 0x81, 0x10, 0x73, 0x3a, 0x25, 0xe9, 0xd6, 0xf3, 0x14, 0xd5,
	0xe5, 0x56, 0x19, 0x25, 0x3e, 0x50, 0x28, 0xf1, 0xba, 0x3e, 0xcd, 0x38, 0x8a, 0xc3, 0xc0, 0xf1,
	0xf3, 0x28, 0xf2, 0x31, 0x5a, 0xea, 0x86, 0xe3, 0x88, 0x2e, 0x5c, 0x69, 0x23, 0xa5, 0x23, 0x9e,
	0xe1, 0x9d, 0x69, 0x33, 0x09, 0x42, 0x81, 0xbe, 0x40, 0x75, 0x19, 0xa8, 0x10, 0xcf, 0xa5, 0x00,
	0x8d, 0x7f, 0x3e, 0x83, 0x2e, 0x37, 0x5d, 0x77, 0x23, 0xf4, 0xdd, 0x0e, 0x8e, 0xc7, 0x7e, 0x02,
	0xd4, 0x02, 0x9e, 0x84, 0x59, 0x98, 0xa5, 0x22, 0x90, 0x7c, 0x5f, 0x9d, 0x85, 0x5f, 0x75, 0x84,
	0x48, 0x0f, 0xfa, 0x54, 0x98, 0xd4, 0x6e, 0xcd, 0x52, 0x5e, 0x79, 0xf0, 0x22, 0x89, 0x1c, 0x26,
	0x49, 0xeb, 0x08, 0xa5, 0x4d, 0x30, 0x76, 0x5a, 0x46, 0x0b, 0xac, 0xe3, 0xb0, 0x32, 0x2f, 0x70,
	0x42, 0xef, 0x84, 0x09, 0x5b, 0xd3, 0x8d, 0xff, 0x34, 0x83, 0x96, 0x61, 0x17, 0x21, 0xad, 0xc1,
	0xa6, 0x47, 0x49, 0x90, 0x5d, 0x9b, 0x33, 0xc6, 0xb5, 0x39, 0xcb, 0x79, 0x86, 0x4f, 0x7f, 0x2d,
	0x33, 0xfd, 0xe7, 0x8c, 0x33, 0xca, 0x0a, 0xf6, 0xd3, 0x8e, 0xa9, 0x23, 0xb8, 0xc8, 0x25, 0xf1,
	0x9e, 0x43, 0x2b, 0x81, 0xa0, 0x6f, 0x3c, 0x45, 0xd7, 0xd4, 0xee, 0x32, 0xe2, 0xbf, 0xa7, 0x10,
	0xff, 0xd5, 0x7b, 0x99, 0x53, 0x07, 0x03, 0x80, 0x3d, 0xd2, 0xc0, 0x07, 0x7f, 0x46, 0x0b, 0x72,
	0x8d, 0xf7, 0xd1, 0xf9, 0xcd, 0x60, 0xcb, 0x63, 0xba, 0xd4, 0xc2, 0xfd, 0xdf, 0x68, 0xb3, 0x49,
	0xea, 0xd2, 0x19, 0x21, 0x5b, 0xfe, 0x07, 0xe8, 0xfc, 0x83, 0x17, 0x09, 0x0e, 0x5c, 0xa6, 0xc2,
	0xbc, 0xaa, 0xef, 0xba, 0xb8, 0x37, 0x70, 0xa2, 0x3e, 0xa6, 0x95, 0x1a, 0xdf, 0xa1, 0xeb, 0x7b,
	0xce, 0x64, 0x88, 0x83, 0xa4, 0x8b, 0x93, 0xc4, 0x0b, 0xec, 0xa3, 0xd0, 0xf8, 0x59, 0x01, 0x32,
	0x8d, 0xe2, 0x47, 0xb4, 0x4a, 0xf9, 0xe8, 0x31, 0xc6, 0xa3, 0x0e, 0x26, 0x1a, 0x63, 0xd1, 0xb5,
	0xa2, 0x81, 0x99, 0xb0, 0xff, 0x82, 0xd6, 0x68, 0xb5, 0x26, 0xd1, 0xa3, 0xb1, 0x86, 0xff, 0x43,
	0x05, 0xff, 0x1b, 0x46, 0xfc, 0x32, 0xa0, 0xa9, 0x05, 0x17, 0xfd, 0x86, 0xc9, 0x66, 0x3c, 0x70,
	0x4e, 0xbc, 0x30, 0xd2, 0xda, 0xf8, 0x48, 0x69, 0xe3, 0xb6, 0x59, 0xac, 0x2b, 0xa0, 0x96, 0x71,
	0x6c, 0x06, 0xbb, 0xe3, 0xa4, 0xed, 0xc4, 0x83, 0xee, 0x78, 0x58, 0x6a, 0x1c, 0x59, 0x40, 0x53,
	0x0b, 0x87, 0xe8, 0x95, 0x0e, 0xee, 0x7b, 0x71, 0x02, 0x8a, 0x24, 0xd1, 0x88, 0x95, 0x26, 0x7e,
	0xab, 0x34, 0xd1, 0xc8, 0x70, 0x4b, 0x06, 0xd2, 0xd4, 0xc6, 0x00, 0xbd, 0xb6, 0x3b, 0xc2, 0x91,
	0x93, 0x78, 0x61, 0xc0, 0x56, 0xb9, 0xd6, 0xcc, 0xc7, 0x4a, 0x33, 0x6f, 0x6a, 0xcd, 0x98, 0x81,
	0x4d, 0x2d, 0x3d, 0x45, 0x2b, 0xe6, 0x06, 0xde, 0x55, 0x1a, 0xd0, 0xd7, 0x48, 0x11, 0xbc, 0xcd,
	0x28, 0xf1, 0x7a, 0x3e, 0x2e, 0x85, 0x57, 0x81, 0xb1, 0xa8, 0xdb, 0xdd, 0x5f, 0xc7, 0x4e, 0xa4,
	0xa3, 0xcd, 0x57, 0xb7, 0x65, 0x10, 0x13, 0xd6, 0x1d, 0xb4, 0xd4, 0x74, 0x4f, 0x34, 0x94, 0xf9,
	0xda, 0xb6, 0xa8, 0x6f, 0xc2, 0xf7, 0x09, 0xba, 0xca, 0x44, 0x5b, 0xc1, 0x73, 0x0b, 0xab, 0xdd,
	0xf8, 0x14, 0x2d, 0xee, 0x39, 0x93, 0x6e, 0x0f, 0x07, 0xb8, 0xa0, 0x4a, 0xc0, 0xab, 0x37, 0xbe,
	0x47, 0x37, 0x98, 0x10, 0xd9, 0xf3, 0x9d, 0xe4, 0x28, 0x8c, 0x86, 0x05, 0x0f, 0x39, 0x1a, 0x94,
	0x69, 0x3c, 0xff, 0x72, 0x06, 0x5d, 0xe7, 0xdf, 0xc5, 0xd4, 0xd3, 0xcd, 0x44, 0x56, 0x74, 0xc4,
	0x96, 0xca, 0xe5, 0xfa, 0xac, 0xa6, 0x1b, 0xd5, 0xb8, 0x26, 0x44, 0xb7, 0xe0, 0xcc, 0xee, 0x31,
	0xc7, 0x77, 0x0f, 0xbe, 0xe3, 0x9c, 0x87, 0xed, 0x50, 0xde, 0x71, 0x2e, 0x90, 0x12, 0x18, 0xac,
	0xde, 0x9f, 0x62, 0x83, 0x55, 0xa1, 0x4c, 0x83, 0xfd, 0x0f, 0x33, 0x6c, 0x1f, 0x7a, 0x88, 0x9d,
	0x64, 0x1c, 0x91, 0x33, 0x1d, 0x1d, 0xea, 0x12, 0x9a, 0xef, 0xe0, 0x9e, 0x37, 0xf2, 0x70, 0x90,
	0xb0, 0xb1, 0xa6, 0x43, 0x9b, 0x55, 0x87, 0x56, 0xd3, 0x87, 0x46, 0x0f, 0xe2, 0xe5, 0xce, 0x4a,
	0x12, 0x21, 0x2e, 0x64, 0x08, 0x71, 0x11, 0x08, 0x71, 0x80, 0x56, 0xb4, 0xbe, 0x16, 0xda, 0x6e,
	0x9a, 0xa3, 0xd1, 0xde, 0x38, 0x1e, 0x6c, 0xd3, 0x9f, 0x26, 0x2a, 0x50, 0x0a, 0x4f, 0x70, 0xd4,
	0x0e, 0x87, 0x23, 0xdf, 0xf1, 0x82, 0xa4, 0x38, 0x85, 0x65, 0x28, 0x13, 0xee, 0xe7, 0xac, 0xd3,
	0xdd, 0x41, 0x38, 0xda, 0x4c, 0xf0, 0xd0, 0x2a, 0xd5, 0x32, 0x3b, 0xbd, 0x02, 0xb6, 0x7b, 0xf8,
	0x67, 0xdc, 0x33, 0x36, 0xf0, 0x77, 0x5c, 0xf3, 0xd1, 0xaa, 0x5e, 0x41, 0xe7, 0xc9, 0x2f, 0xa1,
	0x0f, 0x13, 0x7d, 0xc9, 0x19, 0x52, 0x3e, 0x9d, 0x27, 0x93, 0x40, 0xbe, 0x92, 0x09, 0x84, 0x52,
	0xaa, 0xe7, 0x5f, 0x46, 0x73, 0x7b, 0x91, 0xd7, 0xe3, 0xba, 0x0e, 0xd1, 0x64, 0x92, 0xb0, 0x77,
	0xdc, 0x16, 0xd6, 0x94, 0xb9, 0xfa, 0x0a, 0xba, 0xcc, 0xf7, 0x40, 0xaa, 0x5c, 0x9f, 0xe7, 0x90,
	0x54, 0x0b, 0xbe, 0xc8, 0x21, 0xdb, 0x11, 0x76, 0x12, 0x4c, 0xa6, 0x19, 0x54, 0x9e, 0x5a, 0xe3,
	0x5f, 0x73, 0x5e, 0x4b, 0x49, 0xf1, 0xd2, 0x3a, 0xda, 0x6c, 0x46, 0x47, 0x9b, 0x35, 0xe9, 0x68,
	0x82, 0x55, 0x29, 0x6b, 0xa5, 0x9c, 0x4c, 0x19, 0xeb, 0x47, 0x74, 0x89, 0xf7, 0xe9, 0xa1, 0xe7,
	0x63, 0x82, 0xf1, 0xc8, 0xf3, 0xf1, 0xf3, 0x31, 0x98, 0x84, 0x66, 0xe9, 0xb1, 0x13, 0x4a, 0x12,
	0xba, 0xd2, 0x67, 0xe9, 0x10, 0xa1, 0xe8, 0xd4, 0x73, 0x93, 0x01, 0xa3, 0xdf, 0x32, 0x5a, 0x80,
	0xb2, 0x01, 0xf6, 0xfa, 0x83, 0x84, 0xae, 0x83, 0xc6, 0xdf, 0xd7, 0xd0, 0x2b, 0xca, 0xb8, 0xd7,
	0x71, 0xe2, 0x78, 0xe9, 0x22, 0xce, 0x9f, 0xa8, 0x8f, 0xd0, 0x3c, 0xef, 0x17, 0x59, 0x69, 0x94,
	0x0b, 0x33, 0xbc, 0xa2, 0x74, 0x3f, 0x33, 0x45, 0xe7, 0xd4, 0xc9, 0xa5, 0x13, 0xa9, 0x73, 0x00,
	0xa5, 0xd4, 0x0a, 0xba, 0xdc, 0x76, 0x12, 0xdc, 0x0f, 0xa3, 0xc9, 0x96, 0x38, 0x44, 0xc3, 0x5a,
	0xa6, 0x16, 0xe5, 0x27, 0x31, 0xa6, 0xe5, 0xf4, 0x28, 0x7d, 0x03, 0x5d, 0xed, 0x87, 0xa1, 0x4b,
	0xbe, 0xe1, 0x20, 0xe9, 0x10, 0x06, 0x98, 0x37, 0xb0, 0x0e, 0xe2, 0x2d, 0x32, 0xf9, 0x4b, 0x4b,
	0xc5, 0x09, 0x9b, 0x4c, 0xdf, 0x53, 0x0f, 0x9f, 0xc6, 0xec, 0x84, 0xbd, 0x82, 0x2e, 0x77, 0xb1,
	0xef, 0x93, 0xee, 0xd1, 0x9a, 0x97, 0x0d, 0x4c, 0x45, 0xcf, 0xd8, 0xcb, 0x68, 0xa1, 0x1b, 0xfa,
	0xee, 0xee, 0x38, 0x81, 0xc2, 0xab, 0xea, 0x91, 0x6c, 0x51, 0x08, 0x2a, 0x2f, 0xf1, 0xa9, 0x8d,
	0x03, 0x86, 0xb8, 0x17, 0x7a, 0x41, 0xd2, 0x76, 0x22, 0x17, 0x46, 0x5e, 0xe7, 0xe6, 0x19, 0x4e,
	0x0f, 0x6a, 0xe6, 0x68, 0xdc, 0x4f, 0xd9, 0x82, 0x94, 0x2a, 0x35, 0xc4, 0xe9, 0x50, 0xd0, 0x0f,
	0xa6, 0xab, 0xf1, 0x25, 0x5a, 0xe4, 0x30, 0x9c, 0x8e, 0x9c, 0xd2, 0xfc, 0x37, 0xb5, 0x32, 0x92,
	0x52, 0x5e, 0x22, 0xc1, 0xff, 0xab, 0x19, 0xf4, 0xfa, 0x06, 0x4e, 0xe4, 0x76, 0xd7, 0xa3, 0x70,
	0xb4, 0x1e, 0x9e, 0xa6, 0xe6, 0xc8, 0x4f, 0xd0, 0x22, 0x2f, 0x93, 0xfa, 0x63, 0x39, 0x2f, 0x3c,
	0xc6, 0x93, 0xa7, 0x8e, 0x3f, 0xc6, 0xfb, 0x4e, 0xbf, 0xfe, 0x47, 0x74, 0x4d, 0x06, 0x14, 0x1d,
	0x9a, 0x05, 0xe0, 0x35, 0x3b, 0x70, 0xe3, 0xdf, 0xce, 0xa0, 0x1b, 0x82, 0x87, 0xf9, 0x6c, 0xa7,
	0x07, 0x6f, 0xc1, 0xbf, 0xe4, 0x90, 0x97, 0x5d, 0xce, 0xb3, 0xc6, 0xe5, 0x5c, 0xd3, 0x97, 0xf3,
	0xb9, 0xcc, 0x72, 0x9e, 0xe3, 0xcb, 0xb9, 0x1d, 0x0e, 0xd9, 0x79, 0x90, 0x55, 0xd9, 0xf1, 0x7a,
	0xc7, 0x01, 0x21, 0x1b, 0xf0, 0x27, 0x39, 0x30, 0x64, 0xbb, 0x57, 0xe8, 0xc0, 0xb0, 0xef, 0x1c,
	0xfa, 0x98, 0x72, 0x1a, 0x80, 0x99, 0xcd, 0x0d, 0xd7, 0x1f, 0xb8, 0x5e, 0x62, 0x18, 0xfb, 0x12,
	0x9a, 0x67, 0x25, 0x62, 0xf8, 0x2b, 0xe8, 0xf2, 0x43, 0xe7, 0x18, 0x6f, 0x79, 0xc7, 0x0a, 0x8e,
	0xff, 0x38, 0x23, 0x6d, 0x04, 0xbb, 0x91, 0x9b, 0xda, 0x1c, 0x96, 0xd0, 0x3c, 0xb7, 0xaf, 0xc5,
	0x80, 0x63, 0xee, 0xec, 0x49, 0x98, 0x4a, 0xbc, 0xf3, 0xfc, 0xd0, 0x2d, 0x0b, 0x44, 0x49, 0x60,
	0xd2, 0xe3, 0xf4, 0x77, 0xe8, 0xba, 0xde, 0xd9, 0x42, 0x7b, 0x2d, 0x50, 0x53, 0x00, 0x99, 0x68,
	0xf9, 0x15, 0xba, 0xde, 0x76, 0x82, 0x1e, 0xf6, 0x33, 0x74, 0xb8, 0x8a, 0x2e, 0xc0, 0x6f, 0x41,
	0x49, 0x58, 0x21, 0xa4, 0x6a, 0x07, 0x3b, 0x71, 0x18, 0xb0, 0x15, 0xb2, 0x87, 0xae, 0x75, 0x71,
	0xe0, 0x4e, 0x07, 0xaf, 0x23, 0xf4, 0xe0, 0xc5, 0x28, 0xc2, 0x71, 0xdc, 0x0e, 0x87, 0x20, 0xb4,
	0x41, 0x40, 0x8b, 0x32, 0x97, 0x6e, 0x20, 0xf3, 0x8d, 0x8f, 0xd0, 0xb2, 0xc0, 0x96, 0x42, 0x08,
	0x47, 0xc3, 0x0c, 0x37, 0x81, 0x49, 0xcb, 0xf4, 0x0b, 0x74, 0x53, 0xa5, 0x0f, 0x83, 0x6b, 0x85,
	0xee, 0x84, 0x90, 0xdf, 0xe5, 0x52, 0x6a, 0x26, 0xb5, 0x31, 0x0e, 0x9d, 0xe8, 0x98, 0x81, 0xff,
	0x8b, 0x19, 0xf4, 0xaa, 0x11, 0x5e, 0x90, 0xb9, 0x89, 0x2e, 0x61, 0x5a, 0xb4, 0x19, 0x1c, 0x85,
	0x31, 0x23, 0xf7, 0x7b, 0x39, 0x5a, 0x42, 0xa6, 0x1b, 0xd7, 0x04, 0x0a, 0xea, 0x4d, 0x99, 0xe5,
	0x5b, 0x14, 0x2b, 0x4d, 0xf7, 0xfd, 0xc6, 0x21, 0x7a, 0x75, 0x03, 0x27, 0xe9, 0xd8, 0x33, 0x22,
	0xa7, 0x89, 0xea, 0xbc, 0x4c, 0xa2, 0xa9, 0x55, 0x75, 0x31, 0x90, 0xb3, 0xf1, 0xf7, 0xe7, 0xd0,
	0xcd, 0x0e, 0xf6, 0xb1, 0x13, 0x63, 0xbe, 0x98, 0x24, 0x6d, 0x85, 0x93, 0x77, 0x46, 0x88, 0x68,
	0x65, 0x07, 0x9b, 0xcd, 0x88, 0xe8, 0x9a, 0xbc, 0x89, 0x09, 0x49, 0x76, 0xce, 0xb2, 0x5b, 0xcd,
	0x71, 0x0b, 0x20, 0xdd, 0x01, 0xcf, 0x1b, 0xf6, 0x28, 0x61, 0x2d, 0x7e, 0x12, 0xe3, 0x08, 0xfa,
	0x72, 0x51, 0x6c, 0x9b, 0x40, 0xbf, 0x79, 0xe1, 0x5e, 0x72, 0x5d, 0x32, 0x28, 0x66, 0x2f, 0x5e,
	0x41, 0x97, 0xe9, 0x86, 0xce, 0x8b, 0x17, 0xa0, 0x78, 0x15, 0x2d, 0x12, 0x31, 0xa0, 0x6c, 0x78,
	0x62, 0x77, 0xa3, 0x5f, 0xf8, 0xa6, 0x47, 0x77, 0xb7, 0x9b, 0x68, 0x89, 0x14, 0xab, 0x1b, 0xdf,
	0x15, 0x75, 0x03, 0xbb, 0x9a, 0x55, 0x09, 0x16, 0x0b, 0xa9, 0x04, 0x62, 0x47, 0xa4, 0x66, 0xfe,
	0x57, 0xd0, 0x32, 0x69, 0x6b, 0x43, 0xdb, 0xba, 0xa9, 0xbd, 0x7f, 0x15, 0x2d, 0x76, 0xb0, 0xe3,
	0x2b, 0x3d, 0x5f, 0xe6, 0x3d, 0xa7, 0x5f, 0x78, 0xcf, 0xaf, 0xf1, 0x9e, 0x93, 0x62, 0xb5, 0xe7,
	0x2b, 0xbc, 0x21, 0xf2, 0x49, 0x6f, 0xe8, 0x3a, 0x3f, 0x50, 0xb0, 0x8d, 0xe3, 0x06, 0xc8, 0xb1,
	0xcc, 0xc6, 0xbc, 0x0a, 0xcc, 0x79, 0x84, 0x5e, 0x17, 0x4c, 0xde, 0xc1, 0x3d, 0xec, 0x9d, 0x60,
	0x46, 0xea, 0x82, 0x86, 0x08, 0x10, 0x4a, 0x2a, 0xa4, 0x49, 0x32, 0xc9, 0xed, 0xac, 0x63, 0xdf,
	0x3b, 0xc1, 0x51, 0x85, 0x76, 0x54, 0x48, 0xb3, 0x71, 0x08, 0xc4, 0x8d, 0x18, 0x2a, 0x5b, 0x01,
	0x8b, 0xe8, 0xa2, 0x18, 0xb8, 0x90, 0x1a, 0x50, 0x12, 0xa6, 0x3a, 0x3b, 0xf9, 0x2d, 0xfc, 0x9d,
	0x35, 0xce, 0x7f, 0x84, 0xf2, 0x9a, 0xb6, 0xd7, 0xf8, 0x1e, 0xad, 0x6d, 0x0e, 0xc9, 0x99, 0x5d,
	0x69, 0x8b, 0x0b, 0xcb, 0xcf, 0x25, 0x52, 0xe7, 0x9f, 0x42, 0x0c, 0x5d, 0x6d, 0xfc, 0x09, 0xbd,
	0x62, 0xc4, 0x9d, 0x2a, 0xb4, 0x11, 0xd8, 0x83, 0x99, 0x96, 0xb4, 0x80, 0x6a, 0xc3, 0xb8, 0x4f,
	0xad, 0xf0, 0x8d, 0x40, 0x92, 0x9c, 0x99, 0x6e, 0x29, 0xe6, 0xf7, 0xd9, 0x8c, 0xf9, 0x7d, 0x56,
	0x3b, 0x60, 0xcf, 0xaa, 0x07, 0xec, 0x59, 0xc3, 0x01, 0xbb, 0xf1, 0x6f, 0x66, 0xd0, 0xf5, 0x0e,
	0x8e, 0x4d, 0x14, 0x67, 0xf4, 0x15, 0x8a, 0xb7, 0x3c, 0x03, 0xb3, 0xda, 0x0c, 0xd4, 0x8c, 0x33,
	0x70, 0xce, 0x3c, 0x03, 0xf4, 0x68, 0x4f, 0xd4, 0x55, 0x27, 0x72, 0xc5, 0xbe, 0xcb, 0x0e, 0xc9,
	0x21, 0x91, 0x8b, 0x3b, 0x21, 0xc8, 0x9b, 0x5a, 0xa3, 0x8f, 0xd6, 0x4c, 0xe4, 0x60, 0x94, 0xfc,
	0x83, 0xc2, 0x6f, 0x6f, 0x67, 0x67, 0xc7, 0x32, 0x32, 0x03, 0xd7, 0xfd, 0x51, 0xe8, 0x95, 0xa2,
	0x72, 0x2a, 0xe5, 0x29, 0xf5, 0x33, 0xe3, 0x80, 0xb3, 0x4f, 0xe3, 0x27, 0x74, 0xcb, 0x0e, 0xc9,
	0x3a, 0xfa, 0x29, 0x5a, 0xe1, 0x65, 0x4a, 0x45, 0xd6, 0xf3, 0x3c, 0xd5, 0xf2, 0x1f, 0x67, 0xd0,
	0x12, 0x90, 0x40, 0xd9, 0xcd, 0xff, 0xf6, 0x76, 0x7b, 0x49, 0x05, 0x9a, 0xd1, 0xce, 0x84, 0x59,
	0x2b, 0xfe, 0xbc, 0x6e, 0xed, 0x41, 0xe2, 0x44, 0x92, 0xfa, 0x33, 0xa4, 0xf3, 0xcc, 0x84, 0xe1,
	0x02, 0x89, 0xdf, 0x78, 0xcc, 0x3c, 0xdc, 0xaa, 0x26, 0xd5, 0x50, 0x26, 0xf7, 0x9a, 0x6e, 0xd6,
	0xb4, 0x29, 0x50, 0x9f, 0xa2, 0xab, 0xbb, 0xa3, 0x44, 0x21, 0xd6, 0x02, 0xaa, 0xed, 0x7a, 0x2e,
	0x93, 0x1a, 0xe4, 0xc7, 0x28, 0x49, 0x2f, 0x4b, 0x80, 0x93, 0xa4, 0xc6, 0xb4, 0xba, 0x15, 0x61,
	0xab, 0x50, 0x3c, 0x71, 0x2f, 0x6d, 0xe5, 0xf8, 0x08, 0xd5, 0x3b, 0x58, 0xb2, 0x9e, 0xd0, 0x7e,
	0x21, 0x34, 0x2b, 0xbb, 0xe3, 0xda, 0x61, 0x90, 0x60, 0xbe, 0x99, 0x37, 0xfe, 0xf3, 0x0c, 0x5a,
	0x6c, 0xba, 0x2e, 0x75, 0x24, 0x73, 0x08, 0xee, 0x3d, 0x9b, 0xe1, 0xfb, 0x9e, 0xd4, 0x88, 0x72,
	0xd7, 0xa3, 0xc6, 0x37, 0xe3, 0x3d, 0x67, 0xa2, 0x5d, 0xfe, 0x18, 0x8d, 0xa2, 0xf0, 0x04, 0x33,
	0xdf, 0xa4, 0x70, 0x92, 0x9f, 0x17, 0x4e, 0x72, 0x6a, 0x0d, 0x63, 0x2b, 0x70, 0x9e, 0xbb, 0xdc,
	0x2f, 0x8a, 0x2d, 0x29, 0x6e, 0x73, 0xe7, 0xf0, 0x45, 0xea, 0xa1, 0xef, 0xfa, 0x61, 0xdf, 0xa1,
	0xee, 0xe1, 0x8b, 0x8d, 0xef, 0xd0, 0x92, 0xd4, 0x6b, 0x46, 0x3f, 0xc9, 0xd7, 0x38, 0x93, 0xb9,
	0x96, 0x52, 0xb0, 0xab, 0x8d, 0x67, 0x5c, 0x32, 0x4e, 0xe2, 0x04, 0x0f, 0x77, 0xc2, 0xc4, 0xeb,
	0xe1, 0xa2, 0x36, 0x5f, 0x09, 0xc4, 0x34, 0x3d, 0x07, 0x68, 0xf5, 0xc1, 0x0b, 0xb8, 0x16, 0x36,
	0x70, 0x92, 0x0e, 0xee, 0x85, 0x92, 0x8c, 0x79, 0x5b, 0xc1, 0xbc, 0x66, 0xf0, 0xc2, 0x12, 0x20,
	0xcb, 0x8d, 0x90, 0x01, 0x5a, 0x94, 0xbd, 0xfb, 0x44, 0x57, 0x25, 0x1a, 0x26, 0xfd, 0xd5, 0x16,
	0x04, 0x81, 0x13, 0xcd, 0xb6, 0xf3, 0x42, 0x2e, 0xa7, 0x73, 0xfa, 0x16, 0x3a, 0xe7, 0x05, 0x47,
	0x54, 0xbe, 0xe6, 0x39, 0xb8, 0x1b, 0xbf, 0x47, 0xcb, 0x4d, 0xd7, 0xcd, 0x34, 0x96, 0x7a, 0x1c,
	0xd7, 0x53, 0xf3, 0x89, 0x4f, 0xc6, 0x43, 0xb6, 0x9b, 0x5a, 0xe3, 0xf7, 0xe8, 0x0a, 0xb3, 0x19,
	0x60, 0x67, 0x68, 0x81, 0x58, 0x42, 0xf3, 0x09, 0x76, 0x86, 0xcf, 0x83, 0x54, 0xbf, 0xff, 0xdf,
	0x33, 0x68, 0x95, 0xb9, 0xac, 0xff, 0xdf, 0x5f, 0x23, 0xd1, 0x2e, 0x34, 0x48, 0x17, 0x41, 0x2e,
	0xf2, 0x5d, 0x8a, 0x79, 0xa4, 0xe7, 0xf9, 0x78, 0xa6, 0xde, 0x59, 0x50, 0x6f, 0x21, 0x80, 0x9a,
	0xd9, 0xf8, 0xff, 0xd1, 0x4d, 0xc3, 0x98, 0x5f, 0xfe, 0x26, 0x42, 0xfd, 0x4d, 0x74, 0x8e, 0x60,
	0x65, 0x93, 0x6c, 0x73, 0xf4, 0x37, 0x9e, 0xa1, 0x15, 0xe1, 0xcc, 0x51, 0xda, 0xce, 0x3f, 0xc1,
	0xeb, 0x0e, 0x20, 0x8b, 0x2b, 0x65, 0x33, 0x48, 0x70, 0x84, 0xa9, 0xf5, 0xbe, 0xe0, 0xb2, 0x92,
	0x41, 0x4c, 0x58, 0x3b, 0x68, 0x59, 0x54, 0x71, 0xfa, 0x05, 0x57, 0x94, 0x04, 0x61, 0x71, 0x26,
	0xf1, 0x1a, 0x1b, 0x51, 0x38, 0x1e, 0x15, 0x74, 0x26, 0x29, 0x30, 0x16, 0xb7, 0x8f, 0x60, 0x8a,
	0x82, 0x6e, 0x1f, 0x51, 0xdf, 0x84, 0xef, 0x11, 0xba, 0xca, 0x38, 0xaa, 0xa0, 0xdb, 0x87, 0xd5,
	0x36, 0xe1, 0xda, 0x43, 0xf5, 0x76, 0xe4, 0x9c, 0xfa, 0x07, 0x61, 0xe4, 0xc6, 0x05, 0x39, 0x2e,
	0x05, 0x30, 0x61, 0xdc, 0xe4, 0x0e, 0x64, 0x03, 0xde, 0x22, 0x0e, 0xe4, 0x14, 0xac, 0xf1, 0x5f,
	0x67, 0xd0, 0x9a, 0xd9, 0xc7, 0xb8, 0xe5, 0x05, 0x60, 0x14, 0xec, 0xe0, 0x3e, 0x17, 0x75, 0x35,
	0x6a, 0x77, 0x00, 0x97, 0x67, 0x5b, 0xdc, 0x3d, 0xa9, 0x91, 0x23, 0x92, 0x38, 0x13, 0x77, 0xc7,
	0xec, 0x88, 0x54, 0x93, 0x3f, 0xad, 0x93, 0x13, 0xd4, 0x78, 0xd8, 0x1c, 0x32, 0x1d, 0x9e, 0x7d,
	0xe2, 0x2e, 0xf7, 0xf4, 0xd3, 0x1c, 0xff, 0x74, 0xe0, 0x25, 0x03, 0x37, 0x72, 0x4e, 0xd3, 0x4f,
	0xe7, 0xe1, 0xd3, 0x55, 0x74, 0x61, 0xdf, 0x79, 0xb1, 0x4e, 0xce, 0x59, 0x0b, 0x20, 0x03, 0x7f,
	0x41, 0x0d, 0xfb, 0x00, 0x04, 0x59, 0xfe, 0x44, 0xc8, 0x12, 0x60, 0x76, 0xc9, 0xf1, 0xfd, 0xac,
	0xc6, 0x66, 0xc7, 0xd1, 0xf8, 0x11, 0x5d, 0x15, 0xde, 0x4c, 0x86, 0x8e, 0xec, 0xfd, 0xeb, 0xe9,
	0x3e, 0x4e, 0xcf, 0xaf, 0xb3, 0x5c, 0x16, 0x6e, 0xf6, 0x42, 0x76, 0xfd, 0x91, 0x90, 0x8b, 0xc1,
	0x36, 0x5d, 0xbe, 0x37, 0x2a, 0x97, 0x68, 0xc8, 0x81, 0x89, 0xd5, 0x50, 0xa4, 0xc2, 0x0a, 0xba,
	0x2c, 0x15, 0x43, 0x63, 0xe4, 0x04, 0xf0, 0x07, 0xb4, 0x20, 0x15, 0x33, 0xdb, 0xe6, 0x1b, 0xd9,
	0xe1, 0x68, 0x1d, 0x6e, 0xec, 0x32, 0xef, 0x84, 0x3e, 0x90, 0x7c, 0xae, 0x66, 0xb5, 0x4d, 0x3c,
	0xb8, 0xcd, 0xfc, 0x32, 0xfb, 0xa7, 0x18, 0x27, 0x29, 0xfb, 0xdd, 0x56, 0xf0, 0xad, 0xe8, 0xc2,
	0x10, 0x2a, 0x9b, 0xd0, 0x71, 0xf5, 0x80, 0xbb, 0xd5, 0xf7, 0xc6, 0xf1, 0xa0, 0xa0, 0x1c, 0x93,
	0x41, 0xcc, 0xd2, 0x91, 0x93, 0x0c, 0x76, 0xc8, 0x25, 0x34, 0xcf, 0x7f, 0x72, 0xed, 0x6d, 0x59,
	0xd4, 0x90, 0x7c, 0x9d, 0x62, 0x5a, 0x6b, 0x7c, 0x1b, 0xda, 0x8c, 0xb7, 0x1d, 0x2f, 0xa0, 0x9b,
	0x5c, 0xa3, 0x25, 0xa6, 0x8d, 0x60, 0x2d, 0x7e, 0xc3, 0x45, 0x02, 0x6a, 0x7c, 0x87, 0xae, 0xb3,
	0x9f, 0xba, 0x55, 0x77, 0x8a, 0xcf, 0x4f, 0x01, 0x32, 0x8d, 0xf9, 0xaf, 0x33, 0xcc, 0x2b, 0xc3,
	0xaa, 0xee, 0x46, 0x7c, 0x9e, 0x84, 0x55, 0x16, 0x3e, 0x27, 0x8a, 0xb3, 0x97, 0x6f, 0xea, 0xb3,
	0xaa, 0xd3, 0xab, 0x96, 0x2a, 0x8f, 0x29, 0x01, 0x74, 0xa2, 0xcd, 0x59, 0xb6, 0xfe, 0xf3, 0xc6,
	0xad, 0xff, 0x82, 0x7e, 0xb0, 0xb9, 0x98, 0x51, 0x35, 0xc4, 0x95, 0xd1, 0x4d, 0x37, 0x5e, 0x45,
	0xb0, 0xf6, 0x2f, 0xa3, 0xb9, 0x04, 0xa6, 0x04, 0x8c, 0x50, 0x8d, 0x9f, 0xd1, 0x4d, 0xaa, 0xa9,
	0xee, 0xe1, 0xe8, 0x28, 0x8c, 0x86, 0x4e, 0x20, 0xa9, 0x94, 0xf7, 0x14, 0x0a, 0xde, 0xd2, 0x28,
	0x98, 0x81, 0xb3, 0x6c, 0x2a, 0x9b, 0xdb, 0x0c, 0xa2, 0xe0, 0xa6, 0x22, 0xea, 0x9b, 0xf0, 0x35,
	0xd1, 0x0d, 0xf1, 0x7d, 0x27, 0x1c, 0x55, 0xc0, 0x4a, 0xba, 0x44, 0xbb, 0xfe, 0xb0, 0xf9, 0x6d,
	0x41, 0x60, 0x51, 0xdf, 0xe2, 0x1b, 0x66, 0xdf, 0x1d, 0x22, 0x7b, 0x46, 0xfe, 0xa4, 0xe0, 0xa9,
	0x49, 0x83, 0x32, 0xe1, 0xfe, 0x87, 0x19, 0xb4, 0x00, 0xb7, 0x01, 0xd9, 0x4d, 0x6e, 0x22, 0xb9,
	0x41, 0x91, 0x8b, 0xd9, 0x56, 0x72, 0x09, 0x9d, 0x7b, 0xe8, 0x3b, 0xfd, 0xf4, 0x30, 0xf7, 0x4d,
	0x38, 0x8e, 0x52, 0x7f, 0xfb, 0xb6, 0x17, 0x8c, 0x13, 0x71, 0xb7, 0xe0, 0x0a, 0x3a, 0xcf, 0x0c,
	0xe5, 0x73, 0xfc, 0x60, 0xb3, 0xee, 0x4c, 0x98, 0xe1, 0x21, 0xd5, 0x11, 0x2f, 0x70, 0x5b, 0xc7,
	0x8e, 0xd7, 0x3b, 0x66, 0x76, 0xce, 0x1a, 0x75, 0x71, 0xb6, 0xfd, 0x30, 0x96, 0x3c, 0xb6, 0xa4,
	0x52, 0x17, 0x53, 0xa6, 0x84, 0xd3, 0x0f, 0xf0, 0xd7, 0x56, 0xd8, 0xdf, 0x74, 0x81, 0xbf, 0x6a,
	0xca, 0x7d, 0xbf, 0x4b, 0x60, 0xcf, 0xb8, 0x87, 0x96, 0xda, 0x03, 0xdc, 0x3b, 0xee, 0xf6, 0xc2,
	0x08, 0x9b, 0x4f, 0x75, 0x0b, 0xa8, 0xf6, 0x18, 0x4f, 0x98, 0xa2, 0xbd, 0x81, 0xea, 0x72, 0x7d,
	0x46, 0xd9, 0x45, 0x74, 0xf1, 0xc1, 0x89, 0xe7, 0xc3, 0xd8, 0x85, 0x8a, 0x4d, 0x4a, 0x54, 0xe9,
	0x03, 0x40, 0xec, 0x3a, 0xe7, 0x7f, 0x9f, 0x45, 0xf5, 0xf5, 0x49, 0xe0, 0x0c, 0xbd, 0xde, 0xd9,
	0xea, 0xea, 0x97, 0xd1, 0xdc, 0x66, 0xbc, 0x1f, 0x8e, 0xd2, 0x1b, 0x9d, 0x9b, 0x71, 0x0b, 0x0a,
	0xce, 0xa7, 0x97, 0xb8, 0xbb, 0x03, 0x0f, 0xfb, 0x2e, 0x53, 0xd0, 0xb3, 0x4b, 0xfc, 0xa2, 0x71,
	0x89, 0xcf, 0xab, 0x24, 0x45, 0x9a, 0x1d, 0x62, 0x41, 0x9c, 0x81, 0x09, 0x81, 0x56, 0x5f, 0xe7,
	0xad, 0x89, 0x2b, 0x28, 0xb7, 0x78, 0x6b, 0x74, 0x27, 0x06, 0xce, 0xda, 0xf6, 0x82, 0xd5, 0x37,
	0x00, 0xaf, 0x56, 0xee, 0xbc, 0x58, 0x6d, 0xf0, 0xd3, 0xc1, 0x7e, 0x38, 0xf2, 0x7a, 0x80, 0xe2,
	0x36, 0x97, 0x32, 0x50, 0xb4, 0xe9, 0xae, 0xde, 0x01, 0x8d, 0xa1, 0x83, 0x96, 0x15, 0x5a, 0x16,
	0x52, 0x6c, 0x19, 0x84, 0xed, 0x86, 0xea, 0x1e, 0xaa, 0xaf, 0x7b, 0x51, 0x32, 0x29, 0xa3, 0xe4,
	0xa5, 0x00, 0x16, 0xe9, 0xd3, 0xf5, 0xfa, 0x01, 0x5c, 0x06, 0x29, 0xb8, 0xd4, 0x45, 0x7d, 0xb3,
	0x4a, 0xbb, 0xc0, 0x36, 0x0c, 0xb8, 0x3b, 0x99, 0x3f, 0x5a, 0x56, 0xd3, 0x36, 0x5a, 0x71, 0xa5,
	0xe4, 0x61, 0x84, 0xf1, 0x5f, 0x70, 0xf1, 0x67, 0x18, 0x1a, 0x94, 0x99, 0x92, 0x4b, 0xeb, 0xd8,
	0x67, 0xe4, 0xe6, 0x8c, 0xae, 0x6b, 0xb5, 0x66, 0x47, 0x11, 0xe9, 0x6e, 0x6b, 0xb2, 0xe9, 0x0a,
	0xc3, 0xd0, 0x2c, 0x37, 0xb1, 0x33, 0xbd, 0xd7, 0x09, 0x88, 0x22, 0x46, 0x6d, 0x19, 0xca, 0xdc,
	0xe7, 0x9b, 0xbe, 0x0d, 0xd0, 0x96, 0xbb, 0x2a, 0x57, 0x98, 0x35, 0xa1, 0x9a, 0xa1, 0x4f, 0xbb,
	0x73, 0xb4, 0x88, 0x2e, 0xb2, 0xa5, 0xfb, 0x11, 0xd3, 0x1c, 0xd3, 0x92, 0xfb, 0xe9, 0xf3, 0x1f,
	0x56, 0xf2, 0x71, 0x7a, 0x63, 0x77, 0xda, 0x55, 0x23, 0x32, 0x7d, 0xec, 0xd6, 0xb5, 0xe8, 0x6f,
	0xb1, 0xe9, 0x53, 0xa1, 0x2c, 0xa7, 0x46, 0xc9, 0xaa, 0x72, 0x36, 0x76, 0x98, 0xff, 0x0f, 0xee,
	0xac, 0x4d, 0x70, 0xb4, 0x17, 0x46, 0x49, 0xe4, 0x78, 0x76, 0xd3, 0x5e, 0x86, 0x2f, 0xc8, 0x16,
	0x20, 0x6e, 0x08, 0xc0, 0xd3, 0xa4, 0xc4, 0xf1, 0xd9, 0xd3, 0x8a, 0x45, 0x74, 0x71, 0xdb, 0x09,
	0xd2, 0x86, 0xe0, 0x70, 0x73, 0x10, 0x0e, 0x79, 0x19, 0xf8, 0x9f, 0x1b, 0xdb, 0xe8, 0x6a, 0xd3,
	0x3d, 0x29, 0x61, 0x2d, 0x68, 0xba, 0x27, 0x39, 0x97, 0x7f, 0x89, 0x52, 0x11, 0xb8, 0xf8, 0xc5,
	0xbe, 0x37, 0x8a, 0x8b, 0x6e, 0xff, 0xbc, 0xbe, 0x45, 0xf0, 0xec, 0x85, 0xa3, 0xee, 0x38, 0x1e,
	0xe1, 0xc0, 0x2d, 0x6a, 0xcf, 0x10, 0x00, 0x26, 0x8c, 0x44, 0x2b, 0x65, 0x4f, 0xf0, 0xb4, 0x7b,
	0x94, 0x53, 0xb4, 0x52, 0x05, 0xc8, 0x32, 0x76, 0x21, 0x9c, 0x0b, 0x8e, 0x5d, 0xd4, 0x37, 0xe1,
	0x7b, 0x88, 0x2e, 0xc3, 0xf7, 0x82, 0x46, 0x67, 0xa8, 0x6b, 0x36, 0x20, 0xd2, 0x7e, 0x35, 0x47,
	0x23, 0x7f, 0xc2, 0x66, 0x7a, 0xca, 0x0d, 0x63, 0xa8, 0xfa, 0xc0, 0xf5, 0x12, 0xba, 0xb5, 0xb0,
	0x83, 0x85, 0x8e, 0xb8, 0xcf, 0x4c, 0xe3, 0x29, 0x76, 0x82, 0xf9, 0x1e, 0xaa, 0xed, 0xe0, 0x53,
	0x76, 0x14, 0x2d, 0x80, 0xf8, 0x0d, 0x54, 0xdb, 0xf5, 0xf9, 0xad, 0x75, 0xe3, 0xa0, 0x1a, 0x5f,
	0xa2, 0x7a, 0x73, 0xcc, 0x81, 0x58, 0x43, 0xbf, 0x4a, 0x16, 0xea, 0xf9, 0xcc, 0xfd, 0xc6, 0xd4,
	0x76, 0x5e, 0x03, 0x0a, 0x2c, 0x03, 0x14, 0xc0, 0x6f, 0x3b, 0x31, 0x35, 0xff, 0x4e, 0x31, 0x26,
	0xe8, 0x10, 0x16, 0xd3, 0x54, 0x07, 0xf7, 0x1c, 0xdf, 0x2f, 0x75, 0xcb, 0x57, 0x06, 0xb1, 0xec,
	0x3f, 0xb4, 0x0a, 0x7d, 0x2d, 0x55, 0x5c, 0x80, 0x51, 0xa8, 0x3d, 0x0e, 0x65, 0xe9, 0x71, 0x3b,
	0xf4, 0xe0, 0x0a, 0x91, 0xb2, 0xe8, 0xf3, 0x7b, 0x4c, 0x40, 0xb8, 0x35, 0xc3, 0xfc, 0x0c, 0x90,
	0x9e, 0xbf, 0x77, 0xb0, 0x13, 0x75, 0x71, 0xd1, 0x47, 0x90, 0xac, 0xb6, 0x99, 0x67, 0x57, 0x48,
	0x9b, 0xe2, 0x79, 0x43, 0xf1, 0x13, 0x28, 0x01, 0xcb, 0x79, 0x63, 0xe1, 0x11, 0x3d, 0x21, 0xad,
	0x31, 0xed, 0x8d, 0x85, 0xd2, 0x09, 0x52, 0x5b, 0x79, 0x63, 0x61, 0x7a, 0x91, 0x41, 0x2b, 0x6c,
	0x85, 0x7d, 0xb2, 0x57, 0x10, 0xf0, 0xbd, 0x28, 0x74, 0xc7, 0xbd, 0xa2, 0x8a, 0x98, 0x04, 0x61,
	0x91, 0x31, 0x7b, 0x51, 0x38, 0x8a, 0x95, 0xdb, 0xa8, 0xf9, 0x32, 0x46, 0xd4, 0xb7, 0x58, 0x2c,
	0xb9, 0xf9, 0xb7, 0xaf, 0xe0, 0xcc, 0xb7, 0x58, 0x2a, 0x30, 0x26, 0xbc, 0x3f, 0xa3, 0x9b, 0xb4,
	0xce, 0x06, 0x4e, 0xa0, 0x03, 0xf2, 0x1c, 0xe6, 0x1f, 0x5e, 0x33, 0x70, 0x16, 0xfc, 0x0a, 0x6d,
	0x95, 0xd5, 0x97, 0x8f, 0x3f, 0x03, 0x67, 0xc6, 0x5f, 0xdf, 0xc1, 0xa7, 0x31, 0xf5, 0x22, 0x0a,
	0xc4, 0xbf, 0x57, 0x10, 0xbf, 0x65, 0xba, 0x42, 0xf0, 0xa0, 0x4b, 0x76, 0xf1, 0xb8, 0x83, 0x1d,
	0x9f, 0xe8, 0x3f, 0x36, 0xd1, 0xf9, 0x23, 0x5a, 0x7e, 0xea, 0xb9, 0x38, 0xd4, 0x1a, 0xb8, 0xaf,
	0x34, 0x70, 0x27, 0xa7, 0x01, 0x80, 0xb6, 0x61, 0xff, 0x16, 0x2d, 0x82, 0x11, 0xf4, 0x51, 0x78,
	0x58, 0x70, 0x42, 0x01, 0x35, 0x87, 0x31, 0xbf, 0x4a, 0x5e, 0xec, 0x4e, 0x62, 0x70, 0xc7, 0x15,
	0xa4, 0xb3, 0xdc, 0x5b, 0x80, 0x33, 0xef, 0xc6, 0x8b, 0x6d, 0x27, 0x0a, 0xc7, 0xb1, 0x84, 0x36,
	0xff, 0x81, 0x8d, 0x8c, 0x96, 0x83, 0x9a, 0x05, 0xdd, 0xe2, 0x86, 0x33, 0xc4, 0x25, 0x7c, 0x11,
	0x32, 0x66, 0x02, 0x6a, 0xc2, 0xfa, 0x39, 0x5a, 0xe2, 0x87, 0x87, 0xf4, 0x69, 0x81, 0xec, 0x2a,
	0xe5, 0xe7, 0x4f, 0x71, 0xce, 0xdd, 0x74, 0xe3, 0x3f, 0xfc, 0x8e, 0x9a, 0x8b, 0x1b, 0xdb, 0x44,
	0xf8, 0x02, 0xf4, 0x93, 0x91, 0x1f, 0x3a, 0xee, 0x74, 0x04, 0x97, 0x58, 0x8f, 0x6b, 0xfc, 0x0e,
	0x54, 0x5b, 0x5c, 0x13, 0x99, 0x6b, 0x3c, 0x23, 0x02, 0x46, 0x9c, 0x79, 0x0a, 0x3e, 0x1e, 0x62,
	0xa3, 0xe4, 0x71, 0x26, 0x2c, 0x16, 0xb6, 0x3d, 0xc2, 0xff, 0x8e, 0xfe, 0xf4, 0x29, 0x5f, 0xef,
	0x4a, 0x01, 0x2c, 0x2b, 0xb6, 0x35, 0x4e, 0x92, 0x30, 0x68, 0xfb, 0x5e, 0xef, 0xb8, 0xd4, 0x8a,
	0xcd, 0xc0, 0xd9, 0x9e, 0x9d, 0x81, 0xcd, 0xa9, 0x0f, 0xa2, 0xa6, 0xcc, 0xb3, 0x33, 0x0d, 0xcc,
	0x8c, 0x7d, 0xe5, 0x69, 0xe8, 0xf5, 0xf0, 0x41, 0x18, 0x1d, 0x97, 0x3e, 0x5a, 0x6d, 0x7b, 0x2f,
	0x00, 0x18, 0xd6, 0xac, 0x79, 0x15, 0xac, 0xb6, 0xfa, 0x69, 0x95, 0x12, 0x1b, 0xb3, 0x0c, 0x66,
	0xc2, 0xdc, 0x45, 0xd7, 0xb7, 0x9d, 0xa4, 0x37, 0xd8, 0x18, 0x7b, 0xae, 0xba, 0x16, 0xa6, 0xb8,
	0x8f, 0xc2, 0xe1, 0xb0, 0x9b, 0x44, 0x9b, 0xae, 0x59, 0x3f, 0xb9, 0x49, 0x9d, 0xd6, 0xad, 0xfe,
	0xe6, 0xd0, 0xe9, 0xab, 0x78, 0xf3, 0xe5, 0x8c, 0x02, 0x67, 0xc2, 0xfd, 0x35, 0x39, 0x40, 0x24,
	0xde, 0xd0, 0xe9, 0x4d, 0xda, 0x61, 0x70, 0xe4, 0x91, 0x5d, 0x63, 0x8a, 0x66, 0xae, 0xd6, 0x6f,
	0xfc, 0x88, 0xae, 0x03, 0x77, 0x77, 0x27, 0xb1, 0xe6, 0x87, 0x2f, 0xb4, 0x30, 0x60, 0xf9, 0x77,
	0x27, 0xf1, 0x76, 0x6c, 0xdc, 0x78, 0x1c, 0xb4, 0xdc, 0xc2, 0x49, 0xd7, 0xf7, 0x46, 0xca, 0xa8,
	0x3f, 0x51, 0x50, 0xbf, 0x93, 0x27, 0x59, 0xc6, 0x38, 0x8e, 0x5b, 0x98, 0x79, 0xf2, 0x4d, 0x4d,
	0x0c, 0xd1, 0x4d, 0xd6, 0x04, 0x51, 0x69, 0xbd, 0x38, 0xf1, 0x7a, 0x71, 0x41, 0xf2, 0x32, 0x38,
	0x2b, 0x1f, 0x93, 0xa2, 0xd4, 0xe5, 0x44, 0x4f, 0x80, 0x0e, 0x15, 0x94, 0xd0, 0x2f, 0xc9, 0xf2,
	0x06, 0x22, 0x9b, 0x49, 0x25, 0xb0, 0x6c, 0x91, 0x4a, 0x9b, 0xdc, 0x7a, 0xbe, 0x84, 0xe6, 0x9b,
	0x23, 0x6f, 0x37, 0xf2, 0xfa, 0x5e, 0xc0, 0xce, 0xf3, 0x37, 0xd1, 0xd2, 0x76, 0x18, 0x05, 0x9d,
	0xd0, 0xf7, 0x01, 0x17, 0x18, 0x00, 0xa9, 0xa0, 0xfa, 0x1f, 0x33, 0x68, 0x49, 0x6a, 0x23, 0xbd,
	0x78, 0x41, 0x86, 0xf2, 0x91, 0x10, 0x7d, 0xbf, 0x43, 0x73, 0x50, 0xc0, 0xfc, 0x3e, 0xfa, 0x63,
	0x41, 0x81, 0x61, 0xd7, 0x75, 0xe3, 0x9d, 0x31, 0xbf, 0x7d, 0xca, 0xd0, 0xdc, 0x17, 0x8f, 0xba,
	0x19, 0x9a, 0xfb, 0xe0, 0x88, 0x2b, 0x8c, 0xe6, 0x53, 0x84, 0x7c, 0xef, 0x04, 0x3f, 0x1f, 0x39,
	0xc9, 0x80, 0x3e, 0x8e, 0xcf, 0x82, 0x4a, 0x9b, 0xc3, 0x96, 0x77, 0x82, 0xf7, 0x9c, 0x64, 0xb0,
	0x7b, 0xf8, 0xe7, 0xc6, 0x23, 0x74, 0x99, 0x1c, 0x69, 0x04, 0x62, 0x45, 0x9e, 0x7f, 0x80, 0xe6,
	0xa0, 0x90, 0x0d, 0x6a, 0xca, 0x21, 0xbe, 0x91, 0xa0, 0x6b, 0x0a, 0x2e, 0xd3, 0x16, 0x21, 0xdd,
	0x12, 0x9a, 0xaf, 0xff, 0x16, 0x5d, 0x80, 0x8a, 0xe2, 0x85, 0x89, 0xc1, 0x7c, 0xa4, 0xf6, 0x6e,
	0x09, 0xcd, 0x7f, 0xe3, 0xc5, 0x49, 0x18, 0x4d, 0x36, 0x59, 0x18, 0x86, 0xc6, 0xc7, 0x68, 0xb5,
	0x33, 0xea, 0x31, 0xee, 0xa1, 0xbe, 0x42, 0xac, 0xb7, 0x5c, 0xd3, 0x5a, 0x26, 0x5d, 0x25, 0x48,
	0xf9, 0xe5, 0x0c, 0x49, 0xda, 0xce, 0x91, 0xb2, 0xa6, 0xe5, 0x90, 0xd2, 0xdc, 0xdb, 0xa4, 0x62,
	0x91, 0xde, 0xbc, 0xe5, 0xd5, 0x5b, 0x82, 0x40, 0xb9, 0xd5, 0x1b, 0xff, 0x7e, 0x86, 0x36, 0xcb,
	0x35, 0x2c, 0xc5, 0x69, 0x29, 0x5d, 0x58, 0xe2, 0xfc, 0x4b, 0xf9, 0xfe, 0x13, 0x54, 0xdb, 0x0a,
	0x7d, 0x46, 0xa1, 0x77, 0xf3, 0x34, 0x95, 0xdd, 0x2d, 0x8e, 0x19, 0xcc, 0x83, 0x9f, 0xa2, 0x73,
	0x07, 0x7f, 0x81, 0xcb, 0xc9, 0xf4, 0x0e, 0xb7, 0x1d, 0xf2, 0xe0, 0xfb, 0xce, 0x33, 0x19, 0xb4,
	0xf1, 0x13, 0x5a, 0xdc, 0xf0, 0x4e, 0xf0, 0xc1, 0xc0, 0x4b, 0xb8, 0x88, 0xcc, 0x5c, 0x0a, 0xb4,
	0xee, 0xcd, 0xb1, 0x02, 0x6a, 0x12, 0x13, 0xdf, 0xa0, 0x45, 0xf1, 0xa6, 0x3b, 0x6e, 0x1f, 0x81,
	0xa0, 0xfc, 0x9d, 0x82, 0xfe, 0x6e, 0x0e, 0xfa, 0x07, 0x2f, 0x7a, 0x70, 0xac, 0x69, 0x1f, 0xf5,
	0x1b, 0xff, 0xeb, 0x1c, 0xba, 0x0a, 0xb7, 0xfe, 0x62, 0xb1, 0x6f, 0xd6, 0x3f, 0x44, 0x73, 0x2d,
	0x27, 0xf6, 0x62, 0xdb, 0x96, 0x4c, 0xbe, 0xc9, 0x30, 0x64, 0x8f, 0xdd, 0xc6, 0xc1, 0x98, 0xcd,
	0xa2, 0xbe, 0xc7, 0x92, 0x4f, 0x4a, 0xf5, 0x0f, 0xf9, 0xdd, 0xae, 0x9a, 0x11, 0x3f, 0x7c, 0x53,
	0x00, 0x3e, 0x41, 0xf3, 0x44, 0x23, 0x6f, 0x0e, 0xc7, 0x31, 0x66, 0xb3, 0x71, 0x27, 0xa3, 0x80,
	0xb0, 0xef, 0x0a, 0xe0, 0xc7, 0xe8, 0xc2, 0x53, 0x37, 0xfc, 0xc6, 0xf1, 0xe9, 0x4d, 0xf2, 0xec,
	0x26, 0xcd, 0xbe, 0x2a, 0x40, 0x5f, 0xa0, 0x4b, 0x70, 0xfe, 0xe7, 0x90, 0xe7, 0x8d, 0x1a, 0xbf,
	0x5c, 0x45, 0x6f, 0x13, 0xb6, 0xdd, 0xad, 0x78, 0xf5, 0x82, 0xb1, 0x4d, 0xf6, 0x55, 0x01, 0xfa,
	0x3d, 0xba, 0x08, 0xc5, 0xeb, 0x9e, 0x0f, 0x6e, 0x9d, 0xac, 0xee, 0xcb, 0x3f, 0xeb, 0x94, 0xa4,
	0x02, 0x66, 0xde, 0x48, 0x49, 0xf8, 0xa6, 0x00, 0xbc, 0x87, 0x6a, 0xdb, 0x71, 0x1f, 0x9c, 0x8e,
	0xd9, 0xe5, 0xb6, 0x1d, 0xf7, 0x95, 0xca, 0x9f, 0x22, 0xf4, 0x80, 0x05, 0x25, 0xf3, 0x02, 0xb8,
	0x93, 0x60, 0x10, 0x8b, 0xa2, 0x82, 0x02, 0xaa, 0xf0, 0xac, 0x0b, 0x3c, 0xdb, 0x43, 0x37, 0xb8,
	0x2c, 0x4a, 0xd7, 0x6f, 0x56, 0xc0, 0x7d, 0x8e, 0xae, 0xf0, 0xcf, 0x54, 0x3a, 0x33, 0xae, 0xba,
	0x63, 0x08, 0xa9, 0x20, 0xa1, 0x62, 0x37, 0x9c, 0xff, 0xcf, 0x2c, 0xaa, 0x67, 0x8b, 0x49, 0x77,
	0xa0, 0x34, 0x1c, 0x07, 0x7c, 0x57, 0xab, 0x23, 0xf4, 0xd0, 0x8b, 0xe2, 0x64, 0x5f, 0x84, 0x7e,
	0x82, 0x1b, 0xf4, 0x50, 0xd6, 0x1d, 0x3a, 0xbe, 0xbf, 0x1e, 0x39, 0xfd, 0x90, 0x6f, 0x70, 0x2b,
	0xe8, 0x32, 0x7c, 0x79, 0xe8, 0x9d, 0xe0, 0xc7, 0x9e, 0xef, 0xa7, 0xf7, 0xc1, 0xa0, 0xb8, 0xe5,
	0xf5, 0x59, 0x75, 0xf1, 0x46, 0x8f, 0x22, 0xc7, 0x01, 0xd4, 0x16, 0xe1, 0x30, 0x40, 0x38, 0xae,
	0x47, 0xce, 0xb1, 0xb8, 0xbf, 0x7a, 0x93, 0x86, 0x33, 0x69, 0xee, 0x38, 0x83, 0x38, 0x8c, 0x5a,
	0x4e, 0x14, 0x06, 0xfc, 0x2a, 0x2b, 0xab, 0xdf, 0x62, 0xf5, 0xe7, 0xe5, 0xfa, 0x2d, 0xa5, 0x3e,
	0x75, 0x41, 0x7d, 0x8d, 0x2e, 0x01, 0x2a, 0x2a, 0x33, 0x63, 0x36, 0x63, 0xef, 0xe6, 0x13, 0x8e,
	0x56, 0x66, 0x74, 0x62, 0x18, 0x5a, 0x1c, 0xc3, 0xa5, 0xb2, 0x18, 0x1a, 0x9f, 0xa0, 0x55, 0x2b,
	0x76, 0xf5, 0xad, 0x08, 0x7d, 0x9f, 0x91, 0xb0, 0x4b, 0xf2, 0x8d, 0x1f, 0xd0, 0xb5, 0x2e, 0x67,
	0x25, 0xd9, 0x60, 0xa0, 0x2b, 0xd9, 0xd9, 0x8b, 0xee, 0x12, 0x94, 0x4d, 0x5e, 0x26, 0x68, 0x31,
	0x53, 0xed, 0xbe, 0x66, 0xfe, 0x69, 0x64, 0x36, 0x7c, 0x0e, 0x51, 0xd5, 0x08, 0xf4, 0x1c, 0xdd,
	0x78, 0xda, 0x6e, 0x8d, 0xa3, 0x89, 0x17, 0xd0, 0x85, 0x95, 0x8a, 0xd8, 0xfc, 0x73, 0xae, 0x09,
	0xca, 0xfc, 0x84, 0x7f, 0xb9, 0xe9, 0xba, 0x07, 0x5e, 0x3c, 0x68, 0xfa, 0x7e, 0x78, 0xca, 0xfc,
	0xa7, 0x10, 0x38, 0x8d, 0xfa, 0x72, 0xa8, 0x08, 0x9f, 0xa7, 0x2e, 0x66, 0xe9, 0x1d, 0xd3, 0x67,
	0x68, 0x49, 0x83, 0x8a, 0x47, 0xd3, 0x9c, 0xed, 0x5e, 0x3c, 0x80, 0x3d, 0xa9, 0xf1, 0x0b, 0x5a,
	0x23, 0x3f, 0xf6, 0xc2, 0xd0, 0xcf, 0x5a, 0xd3, 0xa7, 0x28, 0xda, 0xd0, 0xea, 0x54, 0x6b, 0xfa,
	0x5d, 0x74, 0x91, 0x39, 0x3f, 0x47, 0xdc, 0xeb, 0x2c, 0x78, 0x06, 0xb4, 0x25, 0x56, 0x0f, 0xa3,
	0x85, 0x75, 0x67, 0x22, 0xaa, 0x2e, 0xa1, 0xf9, 0x03, 0x8c, 0x8f, 0xe5, 0xeb, 0xab, 0xd7, 0xd0,
	0xa5, 0xfd, 0xd3, 0x30, 0x2d, 0x9d, 0xe5, 0xcb, 0x76, 0x7f, 0x10, 0x61, 0x9c, 0x96, 0xa7, 0xab,
	0x3c, 0x1c, 0x47, 0x69, 0xf1, 0x39, 0x76, 0x8f, 0xe9, 0x0a, 0xfc, 0xc4, 0x11, 0xd9, 0xdb, 0x49,
	0x4b, 0x8b, 0xe8, 0xe2, 0x3e, 0x0e, 0xe4, 0x86, 0xc8, 0x5a, 0x3d, 0xc5, 0x41, 0x32, 0x91, 0xdb,
	0x21, 0x85, 0x03, 0x2f, 0xe2, 0x85, 0x35, 0x21, 0x33, 0xc2, 0x28, 0x99, 0x68, 0xad, 0xdc, 0xff,
	0x2f, 0xff, 0x6e, 0x16, 0x2d, 0xb6, 0x80, 0xbb, 0xef, 0x8b, 0x98, 0x6e, 0xf5, 0x0e, 0xba, 0xdc,
	0x19, 0xf5, 0xa8, 0xc9, 0x00, 0x5e, 0x04, 0x19, 0x54, 0x3c, 0xc5, 0xa0, 0xb0, 0x76, 0xcb, 0x5e,
	0x81, 0x2d, 0xa9, 0xaf, 0xd1, 0x62, 0x67, 0xd4, 0x5b, 0xc7, 0x7e, 0x19, 0xb4, 0x0b, 0xf7, 0x20,
	0xd6, 0xe3, 0x83, 0xe1, 0x28, 0x99, 0xd4, 0xbf, 0x43, 0x4b, 0x4a, 0xaf, 0x60, 0x41, 0x19, 0x0c,
	0xb2, 0x92, 0x47, 0x7f, 0xed, 0x8e, 0xad, 0x05, 0xe5, 0x30, 0xf5, 0x3d, 0x8c, 0x77, 0x23, 0x0c,
	0xfb, 0x3e, 0x6e, 0x87, 0x2e, 0xae, 0xdf, 0x36, 0x85, 0xd2, 0xe1, 0x5f, 0x73, 0x70, 0xcb, 0x95,
	0x18, 0xee, 0x6d, 0x84, 0x08, 0x6e, 0x9c, 0x00, 0x62, 0xc3, 0x88, 0x95, 0x70, 0x86, 0x6b, 0xaf,
	0x99, 0x0c, 0xcc, 0x12, 0xba, 0x1d, 0x34, 0xdf, 0x19, 0xf5, 0x28, 0xcc, 0x74, 0x6c, 0xb7, 0xec,
	0x15, 0x18, 0xbe, 0x5d, 0x74, 0x89, 0x76, 0xaf, 0x15, 0x9f, 0x4d, 0x07, 0xff, 0x04, 0xe3, 0x7d,
	0x8a, 0xa3, 0x62, 0xe8, 0x94, 0x19, 0x7e, 0x8c, 0x2e, 0x76, 0x46, 0x3d, 0xb8, 0x0f, 0x59, 0x37,
	0xb4, 0xc3, 0x62, 0xc3, 0x50, 0xc0, 0xd7, 0xad, 0xdf, 0x45, 0x74, 0x90, 0x79, 0x8a, 0x2c, 0x1c,
	0x27, 0x75, 0xb9, 0x19, 0xb5, 0xcd, 0x2f, 0xd0, 0xd5, 0xce, 0xa8, 0x07, 0xce, 0x84, 0xa7, 0x38,
	0x8a, 0xbd, 0x30, 0x50, 0x2b, 0x1b, 0x18, 0x8c, 0xd5, 0x03, 0x75, 0xfd, 0x4b, 0x60, 0xeb, 0x27,
	0x23, 0xd7, 0x49, 0x30, 0x87, 0xcf, 0x07, 0x51, 0x9b, 0xff, 0x0c, 0xe0, 0xa9, 0x57, 0xeb, 0x88,
	0xc6, 0xc5, 0x54, 0xdb, 0x37, 0xbc, 0x86, 0x11, 0x15, 0x3f, 0x67, 0x2b, 0x02, 0x1e, 0x90, 0xf2,
	0xc2, 0x1c, 0x00, 0xb5, 0xe9, 0x43, 0x74, 0xa5, 0x33, 0xea, 0x49, 0xa1, 0x24, 0xeb, 0x77, 0x0d,
	0x1c, 0x6d, 0x08, 0x8d, 0xb8, 0xf6, 0xb6, 0xb1, 0x9e, 0x29, 0x28, 0xe5, 0xef, 0xa1, 0x0d, 0xa2,
	0x82, 0xf1, 0x6b, 0x4b, 0x96, 0xc0, 0x94, 0x6a, 0xd7, 0x7e, 0x07, 0x0b, 0xb2, 0xe9, 0xba, 0xa5,
	0xa0, 0xbe, 0x82, 0xc6, 0x9a, 0xee, 0xd0, 0x0b, 0xe8, 0x95, 0x88, 0xfa, 0xad, 0x29, 0x37, 0x1b,
	0x62, 0x15, 0x41, 0x13, 0x26, 0x03, 0x10, 0x3c, 0xa9, 0x88, 0xe2, 0x19, 0xaa, 0xf3, 0xf9, 0x4c,
	0x83, 0x6a, 0x56, 0x90, 0x52, 0x86, 0x88, 0x9c, 0xdb, 0x68, 0x4d, 0x9a, 0xaf, 0x10, 0x22, 0x31,
	0xc6, 0xfc, 0x65, 0x94, 0xca, 0x34, 0x0d, 0xfb, 0x13, 0x2a, 0x81, 0xee, 0x27, 0x74, 0x4d, 0xeb,
	0x29, 0x0d, 0xba, 0x39, 0xa5, 0xaf, 0x77, 0xad, 0x7d, 0x55, 0xc3, 0x7c, 0x6e, 0xa3, 0x1b, 0x69,
	0x6f, 0x73, 0xba, 0xfa, 0xe6, 0xf4, 0xae, 0xee, 0x3b, 0xfd, 0xfa, 0x57, 0x68, 0x59, 0x65, 0x24,
	0xda, 0xd9, 0xbc, 0xf0, 0xa1, 0xea, 0xc4, 0xb4, 0xd3, 0xe1, 0x92, 0xa9, 0xdb, 0x3d, 0xc1, 0xd1,
	0x89, 0x87, 0x4f, 0xd5, 0xce, 0x18, 0x84, 0x8e, 0x52, 0xf9, 0x17, 0x98, 0x02, 0x43, 0xac, 0x2a,
	0xb8, 0xdd, 0x3d, 0x85, 0x72, 0xb7, 0x4d, 0x9f, 0x03, 0xdc, 0x1e, 0x38, 0x92, 0xe5, 0xf8, 0x3b,
	0xe0, 0x1f, 0xe9, 0xda, 0xff, 0x99, 0x61, 0xfe, 0x06, 0x84, 0x05, 0xbc, 0x4e, 0x6e, 0x45, 0x4e,
	0xe0, 0x02, 0x62, 0x65, 0xf4, 0x77, 0x73, 0x4c, 0x45, 0xf2, 0x5c, 0x3c, 0x83, 0xb9, 0x60, 0x5a,
	0x36, 0x04, 0x24, 0x3d, 0xb3, 0x4e, 0x52, 0xa6, 0x14, 0x0e, 0xe5, 0xad, 0xb0, 0x07, 0x97, 0xc8,
	0x2b, 0x30, 0xa5, 0xb1, 0xe7, 0x8f, 0x28, 0x0d, 0x94, 0xcb, 0x2f, 0x2a, 0x0d, 0x0c, 0xa2, 0xcd,
	0x72, 0x57, 0x86, 0xaa, 0x23, 0x6a, 0x30, 0xda, 0x0a, 0x0b, 0xdd, 0x10, 0xcd, 0xf6, 0x33, 0xe0,
	0x01, 0x2a, 0xd6, 0x53, 0xd4, 0xd6, 0xa8, 0xb6, 0x3a, 0x9f, 0xd7, 0xa9, 0x9e, 0x85, 0x65, 0xe0,
	0x92, 0x52, 0x6c, 0x07, 0xc6, 0x46, 0x64, 0x3f, 0x01, 0xea, 0x84, 0xe3, 0x04, 0x47, 0xf5, 0x69,
	0xd7, 0xc4, 0xd6, 0xec, 0x71, 0x77, 0x37, 0x81, 0x63, 0x36, 0x70, 0xa2, 0x0e, 0xb4, 0x8a, 0x20,
	0xf8, 0x05, 0xb6, 0x86, 0x74, 0x4f, 0x2a, 0xbc, 0x69, 0xbd, 0x35, 0xb5, 0x9e, 0x50, 0xb1, 0x16,
	0xd9, 0xe0, 0xa9, 0xd3, 0x79, 0xb2, 0xe9, 0x4e, 0x1f, 0x7b, 0xce, 0x1b, 0xa7, 0x2e, 0x5a, 0x51,
	0xf1, 0xf1, 0x3b, 0x6f, 0x2f, 0x83, 0xf4, 0x13, 0x20, 0x03, 0x91, 0x87, 0xb4, 0xb0, 0x6e, 0xaf,
	0xab, 0x4e, 0xed, 0xe7, 0xa0, 0xf0, 0x89, 0xd7, 0x71, 0x25, 0x35, 0xb4, 0x03, 0x0e, 0x4d, 0x2f,
	0x2c, 0xd7, 0x0d, 0x1b, 0x8d, 0xfe, 0x4c, 0xd3, 0xb4, 0xf0, 0xb3, 0x8f, 0x22, 0xbf, 0x06, 0x35,
	0x4c, 0xbe, 0xcf, 0x58, 0x96, 0x67, 0x5b, 0xd2, 0xda, 0xae, 0xba, 0x7b, 0xf7, 0x60, 0xd3, 0x82,
	0x1a, 0xfa, 0x3b, 0xd6, 0x29, 0x2b, 0xfb, 0x1d, 0x9b, 0xdc, 0xc8, 0x46, 0x09, 0x1b, 0xa0, 0xdf,
	0x58, 0x1a, 0xd9, 0x4d, 0x06, 0xd3, 0x65, 0x48, 0x89, 0x96, 0x1e, 0xc2, 0x70, 0xe0, 0x46, 0xb9,
	0x3e, 0x9c, 0x29, 0xcf, 0x76, 0x55, 0xb2, 0x6c, 0xa0, 0xeb, 0x0a, 0xb3, 0xa5, 0x6f, 0xbd, 0x4a,
	0xd2, 0x97, 0x0a, 0xa7, 0x14, 0xd1, 0x96, 0x73, 0xe8, 0x97, 0x9e, 0x24, 0xa9, 0x37, 0xec, 0xfe,
	0xa4, 0x97, 0x4c, 0xf6, 0x9d, 0x7e, 0x5c, 0x16, 0xd1, 0x63, 0xb1, 0x30, 0x35, 0x3c, 0x55, 0xe4,
	0xd2, 0x8f, 0x20, 0xe2, 0xe4, 0x47, 0x80, 0x45, 0xce, 0xa7, 0x06, 0xe1, 0x65, 0x7c, 0x7a, 0x98,
	0xaa, 0x3f, 0xca, 0x33, 0xc3, 0xbc, 0x37, 0x88, 0xea, 0x58, 0xb7, 0x80, 0x68, 0x1b, 0x38, 0xc9,
	0xf4, 0xb0, 0xca, 0x60, 0xbf, 0xcf, 0x6a, 0x29, 0xd3, 0xc7, 0xfa, 0x66, 0xce, 0x58, 0xa5, 0x87,
	0x81, 0x5f, 0x08, 0x1e, 0x91, 0x1f, 0x3f, 0xe6, 0x3c, 0x8c, 0x54, 0x07, 0xfa, 0x33, 0x68, 0x10,
	0xca, 0x0b, 0xc7, 0x22, 0x9d, 0x7b, 0xcb, 0xde, 0x39, 0xf5, 0x65, 0x65, 0x13, 0xf0, 0xcb, 0xdd,
	0xa3, 0xaf, 0x28, 0x73, 0xdf, 0x58, 0xaa, 0x5d, 0x7c, 0x00, 0x28, 0xd6, 0xb1, 0xaf, 0xd4, 0x29,
	0xcd, 0xbe, 0x3f, 0x71, 0xf6, 0x7d, 0xf9, 0x79, 0x30, 0xcd, 0xf1, 0x53, 0xd8, 0x06, 0xc5, 0x52,
	0x2f, 0x82, 0xd9, 0x20, 0xe9, 0xb3, 0xcf, 0x48, 0x3f, 0x05, 0xbc, 0x84, 0x80, 0xa9, 0x18, 0xb1,
	0x3e, 0x26, 0xd5, 0x47, 0xcc, 0xd4, 0x08, 0xb5, 0x57, 0x53, 0xf7, 0xd1, 0x82, 0x23, 0xa6, 0xf3,
	0xb2, 0x1f, 0xbe, 0xa4, 0x90, 0xeb, 0xc0, 0x31, 0x94, 0xbd, 0x60, 0x2d, 0x42, 0x36, 0xc3, 0x7b,
	0x43, 0xfd, 0xb5, 0x6c, 0x7a, 0x8e, 0xe6, 0x2f, 0x63, 0x2d, 0x2f, 0x66, 0x4d, 0x26, 0xb3, 0xf4,
	0x7d, 0x6a, 0x45, 0x93, 0x99, 0xe1, 0x5d, 0xec, 0x67, 0x80, 0x19, 0x66, 0x31, 0x7d, 0x5b, 0x6b,
	0x7f, 0x76, 0xab, 0x4b, 0x70, 0xa6, 0x5e, 0xca, 0x44, 0xaa, 0x22, 0x87, 0x9a, 0xdc, 0xa8, 0x28,
	0x75, 0xa2, 0xe4, 0x6c, 0x1d, 0xe9, 0x5b, 0x7e, 0x4a, 0xa8, 0xa9, 0x7c, 0xf5, 0xae, 0x75, 0x2b,
	0xce, 0x12, 0xec, 0x57, 0xf0, 0x78, 0xd3, 0x90, 0xa4, 0x10, 0x91, 0x40, 0x52, 0x61, 0xdf, 0xcf,
	0x51, 0x4d, 0x33, 0x99, 0x10, 0x8a, 0x2b, 0xb2, 0x92, 0x2d, 0x82, 0x3d, 0xbc, 0x0a, 0x8e, 0xc2,
	0xe9, 0xa3, 0x6a, 0xd8, 0x46, 0x25, 0x45, 0x52, 0x68, 0x71, 0x3d, 0x90, 0x96, 0xd5, 0xdf, 0x34,
	0xea, 0x78, 0x3a, 0x98, 0x4a, 0xf9, 0x00, 0x0e, 0xd3, 0x96, 0xa7, 0x24, 0xd3, 0xb8, 0xf4, 0x23,
	0x2b, 0xe9, 0xad, 0x8f, 0x52, 0xa8, 0xfd, 0x44, 0xd2, 0x62, 0x94, 0x07, 0x28, 0x05, 0x1e, 0xa9,
	0xd8, 0x19, 0x47, 0x7b, 0xc7, 0x61, 0x60, 0x41, 0xf5, 0x21, 0x8b, 0x51, 0x89, 0xb3, 0x3c, 0x21,
	0x39, 0x96, 0xd4, 0x45, 0xb5, 0x4a, 0x6b, 0xb2, 0x7b, 0xf8, 0xe7, 0xb3, 0x6d, 0xec, 0x67, 0x90,
	0xb0, 0xd4, 0x1c, 0x29, 0x3d, 0x22, 0x99, 0xde, 0x86, 0x81, 0x01, 0x4c, 0xef, 0x56, 0x7e, 0x86,
	0x55, 0x00, 0x6f, 0xd4, 0xd8, 0x27, 0x70, 0xef, 0xf8, 0x64, 0xc6, 0xa7, 0x37, 0x62, 0xaa, 0x01,
	0xa1, 0xdb, 0x04, 0xfe, 0xe7, 0x92, 0x39, 0x95, 0x65, 0x90, 0xa8, 0xdf, 0x31, 0xae, 0x17, 0x2d,
	0xd3, 0x85, 0x69, 0x00, 0xa6, 0x34, 0x14, 0x8f, 0xa8, 0x70, 0xa7, 0x5f, 0x8a, 0x1d, 0x0d, 0xad,
	0xb9, 0x2a, 0x3e, 0x46, 0x0b, 0x8c, 0x21, 0x49, 0x51, 0xdd, 0x56, 0x4f, 0x65, 0xbb, 0x2f, 0xa1,
	0x03, 0xeb, 0xf8, 0x68, 0x1c, 0xf4, 0x28, 0xdc, 0xd4, 0x0e, 0x68, 0x2a, 0x38, 0xa1, 0x50, 0x9a,
	0x56, 0x62, 0x77, 0x94, 0x98, 0x4e, 0x71, 0x7a, 0xc6, 0x0c, 0x15, 0xc9, 0xf3, 0x54, 0xb2, 0xa4,
	0x98, 0x4c, 0x5e, 0x93, 0x4c, 0xd2, 0x0c, 0xd3, 0xf6, 0x62, 0xc8, 0x71, 0xf1, 0x0b, 0xd5, 0x77,
	0xb5, 0x30, 0x34, 0xd3, 0x84, 0x82, 0x41, 0x1e, 0x5b, 0x23, 0xd9, 0xfc, 0xa2, 0x72, 0x3a, 0x0f,
	0xf8, 0x7c, 0x86, 0x2d, 0x7c, 0x0b, 0xea, 0x44, 0x1a, 0x50, 0x86, 0x37, 0x61, 0xe2, 0x62, 0x25,
	0xea, 0x8c, 0x9d, 0x63, 0x7e, 0x05, 0x2d, 0x5e, 0x74, 0x5a, 0xda, 0x42, 0xde, 0xb5, 0xb2, 0x6f,
	0xd6, 0x12, 0xf2, 0x5e, 0xa1, 0xba, 0x62, 0xa3, 0x47, 0x8c, 0x5f, 0x5a, 0x4e, 0x50, 0x76, 0x73,
	0xfd, 0x02, 0xb6, 0x09, 0x02, 0xfc, 0x24, 0xa8, 0x00, 0xde, 0x81, 0x39, 0x02, 0x39, 0xe2, 0x87,
	0x31, 0x6e, 0x06, 0xee, 0xee, 0x08, 0x1b, 0x8d, 0x81, 0xd2, 0xc3, 0xe8, 0xb5, 0xdf, 0x18, 0xe6,
	0x28, 0x8a, 0x38, 0xf5, 0x9f, 0x00, 0x09, 0x19, 0xcb, 0x9d, 0x1d, 0xda, 0xcf, 0x61, 0x2d, 0x1f,
	0x38, 0x51, 0xb0, 0x45, 0x18, 0xb5, 0xe4, 0x40, 0x7f, 0x4e, 0x6d, 0x89, 0xdd, 0x70, 0x4c, 0xc3,
	0x88, 0x99, 0x96, 0x53, 0x26, 0x6b, 0x8b, 0x69, 0x39, 0x19, 0xb2, 0xb4, 0x7c, 0x9d, 0x1a, 0xbf,
	0x37, 0x70, 0x80, 0x23, 0xc7, 0xff, 0x76, 0x1c, 0x26, 0x8e, 0xaa, 0x73, 0xe9, 0x87, 0x49, 0xa5,
	0x66, 0x7a, 0x00, 0x55, 0x8a, 0xf3, 0x60, 0xd4, 0x21, 0x3a, 0x29, 0xeb, 0x6a, 0x29, 0x3d, 0xa6,
	0x2c, 0x39, 0x93, 0x45, 0xd6, 0x9c, 0x48, 0xa4, 0x0d, 0x07, 0x22, 0xd8, 0xe0, 0xf5, 0x16, 0xf2,
	0x72, 0x8a, 0x58, 0x0e, 0x67, 0x1a, 0x8e, 0x92, 0x33, 0xfa, 0x24, 0x75, 0x2b, 0xb2, 0x28, 0x70,
	0xd3, 0xe5, 0xf4, 0x1b, 0xc6, 0x91, 0x2a, 0x13, 0x99, 0x9e, 0x03, 0x38, 0x56, 0x4b, 0xc2, 0x04,
	0x7d, 0xd3, 0xb8, 0x2c, 0x06, 0x05, 0x50, 0xa5, 0xed, 0x36, 0x8b, 0xd2, 0x68, 0x20, 0xad, 0xc2,
	0x54, 0x87, 0x53, 0x26, 0x5d, 0xc3, 0x27, 0x40, 0x12, 0xd6, 0x77, 0x8a, 0xc3, 0x96, 0xb3, 0xc1,
	0xe4, 0xd7, 0xa3, 0xbd, 0xa7, 0x70, 0x25, 0xbb, 0x1f, 0x48, 0xaa, 0x9a, 0x96, 0xd3, 0xc1, 0x6c,
	0xef, 0x37, 0xe4, 0x73, 0x30, 0x6a, 0x51, 0x96, 0xb4, 0x12, 0x0f, 0x52, 0x0b, 0x95, 0xd6, 0xdc,
	0x94, 0x14, 0x13, 0x6a, 0xb7, 0x1f, 0x02, 0x3f, 0xa7, 0xac, 0x28, 0xb0, 0xbc, 0xc4, 0xf0, 0xb5,
	0x2c, 0x0f, 0x2f, 0x37, 0x7c, 0x4b, 0xa2, 0x89, 0x07, 0xb2, 0xb9, 0x50, 0x69, 0x6e, 0x4a, 0xd2,
	0x09, 0xdb, 0xf0, 0x35, 0x2c, 0x25, 0x87, 0xbf, 0x0d, 0x0a, 0x74, 0xcb, 0x49, 0x7a, 0x03, 0x90,
	0xf7, 0x2f, 0x89, 0x8e, 0x5e, 0x70, 0x60, 0xa9, 0xac, 0x4c, 0x8b, 0x5a, 0xc9, 0x72, 0xa5, 0xc2,
	0xfe, 0x92, 0x4a, 0x05, 0x96, 0x78, 0xa9, 0x6e, 0xcb, 0xe5, 0xa0, 0xa6, 0xa6, 0x32, 0x19, 0x0a,
	0x8d, 0x29, 0xa1, 0xa4, 0x9d, 0x04, 0xe2, 0x47, 0x81, 0x72, 0x70, 0xdb, 0x02, 0x2c, 0xc7, 0x85,
	0xb4, 0xfa, 0xa6, 0xd4, 0x38, 0x94, 0x5f, 0xc0, 0x3e, 0xc7, 0x63, 0x4a, 0xd6, 0xdf, 0x30, 0x45,
	0x7e, 0x52, 0xe2, 0x4d, 0xaa, 0x04, 0xb8, 0x27, 0xb9, 0xb6, 0xd2, 0xfe, 0xd9, 0x6f, 0x67, 0x7c,
	0x05, 0x82, 0x0b, 0xce, 0x0b, 0xd5, 0x1a, 0x74, 0x99, 0x1b, 0xfa, 0x18, 0x67, 0x92, 0x3d, 0x95,
	0x57, 0xf5, 0xac, 0x69, 0xa6, 0x7e, 0x91, 0x3c, 0xa2, 0x7f, 0x9b, 0x16, 0x5c, 0x58, 0x0c, 0x86,
	0x84, 0x52, 0x53, 0xda, 0x78, 0xdf, 0xd6, 0x86, 0x31, 0x9d, 0xd5, 0x00, 0xdd, 0x14, 0xad, 0x1c,
	0x60, 0x7c, 0xfc, 0xb7, 0x6b, 0xc9, 0x93, 0x0e, 0xff, 0xdb, 0x61, 0x90, 0x0c, 0xfe, 0x96, 0x83,
	0xba, 0x21, 0x9a, 0xd2, 0xf2, 0x64, 0x4d, 0x69, 0xe7, 0x9e, 0xad, 0x1d, 0x4b, 0xa6, 0x2e, 0x3a,
	0x49, 0x86, 0x6c, 0x59, 0xe5, 0xc7, 0x93, 0x93, 0xab, 0xeb, 0x08, 0xc4, 0xab, 0x29, 0x61, 0xd6,
	0x94, 0x66, 0x3e, 0x30, 0x85, 0x04, 0xb6, 0x27, 0xec, 0xf2, 0x81, 0x19, 0x2c, 0x19, 0xb3, 0xa6,
	0x34, 0xf5, 0xdb, 0xa2, 0x11, 0xe1, 0xa4, 0x3b, 0x78, 0x60, 0x6e, 0x2e, 0xd3, 0xc8, 0x5b, 0x46,
	0x83, 0x81, 0x01, 0x37, 0xdd, 0x00, 0xf5, 0x0e, 0x14, 0xb9, 0xb4, 0xf0, 0xbb, 0x32, 0x91, 0xed,
	0xb4, 0xb1, 0xa8, 0x29, 0xbb, 0xca, 0x8f, 0xc5, 0x9c, 0x26, 0xec, 0x19, 0x6c, 0x21, 0xfc, 0xa1,
	0xd9, 0x99, 0xa2, 0xfe, 0x0e, 0x50, 0x2b, 0x29, 0xc1, 0xca, 0xbb, 0xaf, 0x8c, 0x49, 0xc8, 0x24,
	0xe5, 0x5f, 0xbb, 0x88, 0x5b, 0x5e, 0xf9, 0xb7, 0x04, 0xd3, 0xe8, 0x30, 0x8b, 0xe4, 0x49, 0x31,
	0xc4, 0x46, 0xa7, 0xb4, 0x9e, 0xe8, 0x2c, 0xb5, 0x18, 0x9a, 0x56, 0x5b, 0x81, 0x14, 0x76, 0xba,
	0xd9, 0xfb, 0x86, 0x62, 0x80, 0x94, 0x76, 0x8a, 0x69, 0x99, 0x09, 0x55, 0x44, 0x5d, 0xf4, 0x2a,
	0x43, 0x64, 0x59, 0x9d, 0xc5, 0xd2, 0xde, 0xe9, 0xce, 0x15, 0x71, 0x46, 0x54, 0xe2, 0x45, 0x94,
	0x67, 0x01, 0x63, 0x84, 0x0a, 0xc9, 0xb5, 0xae, 0x47, 0x8d, 0x28, 0xef, 0xf0, 0xb6, 0x45, 0xab,
	0x38, 0xa4, 0x26, 0x97, 0xcc, 0x83, 0xfb, 0x29, 0x2d, 0xbc, 0x67, 0x8e, 0xea, 0x60, 0x7e, 0xec,
	0x3f, 0x00, 0xa6, 0x90, 0xbe, 0xf3, 0x0c, 0x4d, 0x67, 0xde, 0x12, 0xb5, 0xdf, 0xef, 0x60, 0x27,
	0x3a, 0x9c, 0x14, 0x66, 0x6c, 0x83, 0x1a, 0x67, 0x78, 0x58, 0x4d, 0x09, 0x95, 0x7d, 0xe7, 0x5c,
	0xbe, 0xfb, 0xf6, 0x37, 0xd6, 0x4c, 0x29, 0xd2, 0x1f, 0x3b, 0x57, 0x50, 0x8a, 0x6c, 0xcf, 0xac,
	0x3d, 0x49, 0xac, 0xa8, 0x79, 0xdb, 0x6c, 0xea, 0xb2, 0x96, 0xb9, 0xce, 0x24, 0x1b, 0xcd, 0x59,
	0xe3, 0x52, 0xdb, 0x82, 0xd6, 0x52, 0x7e, 0x02, 0x39, 0x75, 0x89, 0x45, 0xe8, 0x15, 0x61, 0xe6,
	0x91, 0x82, 0x70, 0x97, 0xed, 0xb4, 0x35, 0xb1, 0x8b, 0x29, 0x16, 0xf8, 0x43, 0x21, 0xc3, 0x4c,
	0x4d, 0xe6, 0xc5, 0x06, 0x57, 0xfb, 0xfe, 0x08, 0xb4, 0x81, 0x75, 0xec, 0x9b, 0xd0, 0x94, 0xf6,
	0xb9, 0x5d, 0x11, 0x66, 0x4c, 0x1a, 0xc2, 0xf4, 0x03, 0x0b, 0x02, 0x73, 0xbc, 0xcd, 0x35, 0xdb,
	0xa1, 0x49, 0x8b, 0x9e, 0x7a, 0x9f, 0x7b, 0xa9, 0x58, 0x2b, 0xe6, 0xf8, 0xa9, 0x26, 0x93, 0xe5,
	0x3a, 0xf6, 0x19, 0x4c, 0xc9, 0xa1, 0x7d, 0x0c, 0x07, 0x16, 0x08, 0x84, 0x58, 0xbc, 0xcd, 0x41,
	0x7a, 0x2c, 0xe4, 0x21, 0x62, 0x4b, 0x12, 0xe4, 0x6e, 0x7e, 0x75, 0x83, 0xfd, 0x88, 0x37, 0x64,
	0x89, 0x51, 0x6b, 0xb1, 0x1f, 0x71, 0xa8, 0x92, 0x54, 0xf9, 0x2e, 0x75, 0x7e, 0x76, 0x27, 0xf1,
	0x9e, 0x13, 0x39, 0x43, 0x9c, 0x14, 0xbd, 0x5a, 0x67, 0xe0, 0x51, 0x81, 0x41, 0xb2, 0x4b, 0x2a,
	0xc5, 0x79, 0x30, 0xfa, 0x91, 0x7c, 0x99, 0x9f, 0x30, 0x69, 0x5c, 0x46, 0x88, 0x13, 0x69, 0x3a,
	0x32, 0x67, 0x42, 0x55, 0x1a, 0x5d, 0xe5, 0xd9, 0xf8, 0x94, 0x5f, 0x82, 0x18, 0x6f, 0xba, 0xae,
	0x12, 0x59, 0x37, 0x2f, 0xec, 0xae, 0x2e, 0x35, 0xa4, 0x8d, 0x59, 0xc2, 0x50, 0x92, 0x45, 0x6c,
	0x52, 0xc3, 0x18, 0x22, 0x58, 0x56, 0xd8, 0xd4, 0xe8, 0xb8, 0x15, 0x14, 0x36, 0x73, 0x4c, 0x5e,
	0x61, 0x68, 0xd5, 0x1a, 0x28, 0x7d, 0xe1, 0x5e, 0x98, 0x26, 0xc9, 0x3e, 0xb7, 0x85, 0x1d, 0xb7,
	0x82, 0xca, 0x62, 0x0c, 0x26, 0xf5, 0x07, 0xaa, 0x0f, 0x3b, 0x27, 0x58, 0x60, 0xb6, 0x44, 0x94,
	0xb2, 0xd8, 0x2b, 0x05, 0x58, 0xe9, 0x9b, 0x3d, 0xd7, 0xe4, 0x31, 0x3d, 0x74, 0xe2, 0x64, 0x1f,
	0x47, 0xc3, 0xb3, 0x1a, 0xd7, 0x9f, 0x80, 0xe5, 0xf9, 0xb8, 0x04, 0xf6, 0x42, 0x63, 0x73, 0x2c,
	0x47, 0xa9, 0x4a, 0x37, 0xac, 0xcc, 0x01, 0xfc, 0x53, 0x35, 0x39, 0x13, 0xac, 0x7f, 0x5a, 0x34,
	0x7f, 0x83, 0xd5, 0x7a, 0x03, 0x27, 0x72, 0x27, 0x4b, 0x3f, 0x93, 0x90, 0x2e, 0x51, 0x48, 0x01,
	0x46, 0xcb, 0x2b, 0x61, 0x86, 0x70, 0xa6, 0xe2, 0xf6, 0x8a, 0x84, 0xb8, 0xe2, 0x8b, 0x15, 0xb7,
	0x3a, 0x8a, 0x03, 0xc9, 0xf7, 0x24, 0x02, 0x9e, 0x96, 0x3f, 0x3d, 0x65, 0x83, 0xab, 0xd2, 0x2b,
	0xbd, 0x44, 0x63, 0x10, 0x68, 0x4b, 0x76, 0x8d, 0x62, 0x68, 0xba, 0x6e, 0x65, 0x0c, 0xbd, 0x54,
	0x3a, 0xf0, 0x14, 0x67, 0x56, 0x35, 0x4b, 0xcb, 0x34, 0x6b, 0xd5, 0x0d, 0x33, 0xc9, 0x79, 0x7d,
	0x50, 0xb1, 0x0c, 0x59, 0x5b, 0x8b, 0xed, 0x6f, 0x1f, 0x4c, 0x69, 0x47, 0xcb, 0x00, 0x4b, 0x2f,
	0x00, 0x90, 0x8f, 0x2c, 0x97, 0x69, 0xc9, 0x0b, 0x00, 0x3f, 0x42, 0x6f, 0x2d, 0x69, 0x43, 0xd5,
	0xf5, 0xf1, 0x91, 0xd1, 0x51, 0x9c, 0x9b, 0x6e, 0x74, 0x07, 0x96, 0x0b, 0x4b, 0xdd, 0x27, 0x48,
	0xfe, 0x9e, 0xe9, 0x08, 0x67, 0xc9, 0xee, 0xa7, 0xf6, 0xd6, 0x07, 0xe3, 0xfd, 0x06, 0x4e, 0xe4,
	0x8a, 0x65, 0xa8, 0x5b, 0xa6, 0xe9, 0xfa, 0x63, 0xe1, 0xa2, 0x3a, 0x93, 0xae, 0x2f, 0xcb, 0x6c,
	0xc1, 0xf7, 0xb7, 0x77, 0x72, 0xa6, 0x5b, 0x4d, 0x18, 0x6a, 0x3a, 0x0b, 0x59, 0x13, 0x97, 0x3e,
	0x16, 0xd7, 0x66, 0xe5, 0xc6, 0xde, 0x36, 0xc7, 0x66, 0x31, 0xb4, 0xa5, 0x74, 0x7d, 0x9d, 0xef,
	0xcd, 0x38, 0xc1, 0x32, 0xba, 0x72, 0x9c, 0x76, 0x24, 0x49, 0x16, 0x91, 0xe5, 0xf3, 0xad, 0x69,
	0x59, 0x29, 0x73, 0x34, 0x09, 0x4b, 0x96, 0x51, 0xaa, 0x5d, 0x1a, 0x73, 0x52, 0xaa, 0xfc, 0xfc,
	0xa1, 0x91, 0x9f, 0x73, 0x32, 0x59, 0x6e, 0x80, 0xf8, 0x50, 0x32, 0x88, 0x9a, 0xc4, 0x87, 0x29,
	0xc5, 0xa8, 0x4a, 0x8a, 0x6f, 0x24, 0x05, 0x58, 0x4b, 0x77, 0x59, 0x92, 0xa8, 0x23, 0x55, 0xd8,
	0x68, 0x99, 0x0a, 0xa7, 0xe2, 0xfa, 0x28, 0x87, 0xaa, 0x96, 0x7c, 0x89, 0x5a, 0x8b, 0x5a, 0xce,
	0xc2, 0x97, 0x6a, 0xd1, 0x92, 0x39, 0x71, 0x0c, 0xda, 0xa7, 0x21, 0x6b, 0xa0, 0xe9, 0xa6, 0xa4,
	0x3d, 0x71, 0xa1, 0x49, 0xb2, 0xe6, 0xa5, 0x22, 0x8c, 0xe0, 0x8c, 0x9f, 0xcd, 0xb0, 0x57, 0xcf,
	0xcb, 0xa4, 0x9a, 0x69, 0xf4, 0xfd, 0x62, 0x95, 0x59, 0x9b, 0xff, 0x64, 0x06, 0x6c, 0x02, 0xb6,
	0x9c, 0x79, 0x75, 0xbb, 0x08, 0xb6, 0x65, 0xe6, 0x5b, 0xbb, 0x5f, 0x06, 0x44, 0x91, 0x1e, 0x5a,
	0xae, 0x5d, 0x93, 0xf4, 0x30, 0xa7, 0xe3, 0x55, 0x59, 0xf4, 0x29, 0x98, 0x27, 0xb5, 0x9a, 0x0f,
	0xc3, 0xe8, 0xc0, 0xf1, 0x12, 0xb2, 0x54, 0xaa, 0xe2, 0x7d, 0x86, 0x6e, 0x59, 0xf1, 0x32, 0xde,
	0xad, 0x8a, 0xfa, 0x1b, 0x10, 0x78, 0x1b, 0x38, 0x11, 0xb9, 0x21, 0x20, 0x4a, 0x82, 0x2a, 0x3e,
	0x0c, 0x5a, 0x4f, 0x36, 0xa1, 0xc5, 0x26, 0x6c, 0x21, 0x1b, 0x38, 0xa1, 0x0f, 0x9c, 0xb6, 0xe3,
	0xbe, 0x8a, 0xe4, 0x9d, 0x1c, 0x24, 0x5a, 0x16, 0x8b, 0x5d, 0xde, 0x29, 0x81, 0xaa, 0x35, 0xd9,
	0xf6, 0xa6, 0x1e, 0x6f, 0xec, 0x49, 0x34, 0x9a, 0x20, 0x85, 0x28, 0x36, 0x32, 0x11, 0xdb, 0x71,
	0x9f, 0xdf, 0x76, 0xaf, 0x5b, 0xa1, 0xf4, 0x97, 0x81, 0x29, 0x8a, 0xdd, 0x13, 0xe8, 0x54, 0x01,
	0x14, 0xf6, 0x2e, 0x1d, 0x49, 0xf8, 0xa4, 0xfc, 0x21, 0x45, 0x0e, 0x14, 0x86, 0x55, 0x69, 0xcf,
	0x5f, 0xf2, 0x0c, 0x68, 0x99, 0xcd, 0x53, 0x32, 0x55, 0x7c, 0x4d, 0x4f, 0x75, 0xd2, 0x82, 0xb5,
	0xc3, 0xdf, 0xb3, 0xf5, 0xf0, 0x08, 0x5e, 0xac, 0x96, 0x93, 0xea, 0x5f, 0x80, 0x81, 0x45, 0xbc,
	0x89, 0x2b, 0xbb, 0xd3, 0x7e, 0x2f, 0x8d, 0x8e, 0xdd, 0x99, 0xad, 0xf8, 0x5e, 0x23, 0xcb, 0xd0,
	0xf4, 0x1d, 0x88, 0x48, 0x7b, 0x52, 0x11, 0x6f, 0x36, 0xcd, 0x4a, 0xfa, 0x0e, 0x24, 0x4d, 0xa9,
	0x62, 0x4d, 0xb6, 0xa2, 0x5f, 0x97, 0x4b, 0x29, 0x9e, 0xe6, 0x4c, 0x29, 0xef, 0x46, 0xb0, 0xe5,
	0x6a, 0xe9, 0x48, 0x4c, 0x29, 0xbe, 0xd2, 0xc5, 0x39, 0x75, 0x31, 0xdb, 0x70, 0xa6, 0x97, 0x62,
	0xf4, 0x7e, 0x4f, 0xc9, 0x05, 0x63, 0xb9, 0x14, 0xa3, 0x63, 0x29, 0x7d, 0xe3, 0x50, 0x98, 0x1c,
	0x59, 0x6e, 0x08, 0xd3, 0x3d, 0xe9, 0x6c, 0x8e, 0x14, 0x93, 0xe9, 0xd5, 0x94, 0xfd, 0xe3, 0x49,
	0x6a, 0x40, 0xe2, 0xa9, 0x3e, 0x40, 0x69, 0x2f, 0xa0, 0x30, 0xe4, 0xa5, 0x0a, 0xf9, 0x29, 0x45,
	0x2b, 0xc2, 0xe2, 0x52, 0xb4, 0xc5, 0x7a, 0xff, 0xaa, 0xf9, 0x06, 0x39, 0xcf, 0xe2, 0xf1, 0x99,
	0x14, 0xcd, 0x83, 0x93, 0x25, 0xa7, 0x3b, 0xba, 0xd2, 0xbc, 0x28, 0x94, 0x66, 0x0e, 0x6c, 0x58,
	0x09, 0x99, 0x6c, 0x1c, 0xfa, 0x04, 0xa7, 0xef, 0xb7, 0x9f, 0x04, 0xd5, 0xf1, 0x50, 0xcb, 0x00,
	0x35, 0x69, 0x72, 0x2c, 0x25, 0x79, 0x44, 0xf0, 0x1a, 0x4e, 0xb0, 0x94, 0xc1, 0x24, 0x2e, 0x7f,
	0x8c, 0x5f, 0x84, 0x33, 0xe1, 0x89, 0x87, 0x4f, 0x79, 0x57, 0xca, 0xc9, 0xb7, 0x27, 0xfc, 0x49,
	0x36, 0x84, 0xc7, 0x87, 0x26, 0x0a, 0x74, 0xc2, 0xd0, 0x86, 0x9a, 0xdf, 0xe0, 0x87, 0x54, 0xe1,
	0x13, 0x89, 0x11, 0x2a, 0xca, 0xb7, 0x6c, 0x22, 0x06, 0xf9, 0x15, 0x7f, 0x9a, 0x76, 0xc1, 0x9a,
	0x90, 0x41, 0xf7, 0xf0, 0x2e, 0x29, 0x3d, 0x2b, 0xd2, 0xab, 0xa9, 0xc3, 0xfd, 0x18, 0x2c, 0x07,
	0x52, 0x8f, 0xea, 0xc6, 0xec, 0x07, 0xba, 0xb9, 0xe0, 0xba, 0xd2, 0x13, 0x91, 0xd4, 0xa1, 0x2a,
	0x91, 0x94, 0xac, 0x10, 0x3f, 0x48, 0x0f, 0x09, 0xc4, 0xc7, 0xe9, 0xcc, 0x61, 0xbb, 0xab, 0xa6,
	0x26, 0x86, 0xd8, 0xa0, 0x86, 0x77, 0x35, 0x91, 0x83, 0x49, 0x50, 0x64, 0x73, 0x3d, 0xe8, 0xcf,
	0x1d, 0x6e, 0x10, 0x44, 0x5a, 0x7e, 0x86, 0x8a, 0x6f, 0x2d, 0x4d, 0x89, 0x21, 0xda, 0x60, 0x2a,
	0xc8, 0x24, 0x80, 0x28, 0xb7, 0x48, 0xba, 0x92, 0x17, 0x89, 0x66, 0x58, 0xa9, 0xf0, 0xf0, 0x50,
	0xcf, 0xcd, 0xf2, 0xc7, 0xd4, 0x61, 0xe4, 0x9e, 0x80, 0x08, 0xb6, 0xe7, 0x67, 0x31, 0xf9, 0x8c,
	0x9a, 0xee, 0xc9, 0x6e, 0xd0, 0x1d, 0x60, 0xff, 0xa8, 0xac, 0xd4, 0xe0, 0xd1, 0x7c, 0x4e, 0x76,
	0x8f, 0x8e, 0x2a, 0x21, 0x68, 0x4a, 0xc2, 0x9c, 0x74, 0x32, 0x8c, 0x4a, 0x3b, 0x17, 0x52, 0xbf,
	0x17, 0x1b, 0x7c, 0x49, 0x78, 0xaa, 0x3b, 0x89, 0x84, 0x33, 0x55, 0x75, 0xb2, 0x4c, 0x82, 0x1b,
	0xaa, 0x3b, 0x75, 0x9d, 0x13, 0x9c, 0x26, 0xb3, 0xb1, 0xa6, 0xb9, 0x31, 0xd9, 0x54, 0xe1, 0xf1,
	0x31, 0x87, 0x2c, 0xed, 0xcc, 0x83, 0x40, 0x0b, 0x22, 0xe9, 0x4d, 0xc5, 0x47, 0xa5, 0x86, 0x34,
	0x3b, 0x8f, 0x40, 0x1e, 0x93, 0x61, 0x69, 0xd8, 0x0b, 0x81, 0xab, 0xbd, 0xfc, 0x21, 0xb5, 0xbe,
	0x91, 0xc9, 0x0b, 0x4f, 0x83, 0x33, 0x7c, 0x1b, 0x4d, 0x6f, 0x4a, 0xc9, 0x79, 0x4d, 0x2a, 0xf8,
	0x66, 0x8c, 0x69, 0x51, 0x3e, 0x13, 0x3e, 0x27, 0xfe, 0xb9, 0x9e, 0x97, 0x1b, 0x45, 0x0f, 0x26,
	0xb6, 0x40, 0xb6, 0x49, 0x8f, 0x02, 0x97, 0x14, 0x1f, 0xcf, 0xd3, 0xcd, 0x50, 0x8d, 0x3f, 0x59,
	0xe1, 0x16, 0x9e, 0x31, 0x93, 0x8a, 0xb4, 0xdb, 0x8a, 0x14, 0x21, 0x15, 0x57, 0x44, 0x36, 0x25,
	0x49, 0xba, 0x22, 0xd2, 0xf4, 0x23, 0xd6, 0xc4, 0x24, 0xfa, 0xc0, 0xaf, 0x67, 0xfa, 0x55, 0x54,
	0xc5, 0x28, 0xd4, 0x37, 0x1a, 0x2d, 0x41, 0xba, 0xe7, 0x53, 0x91, 0x13, 0x4d, 0xc9, 0x5d, 0x68,
	0xb4, 0x04, 0xce, 0x2f, 0x3c, 0x91, 0x4b, 0x4e, 0x92, 0x17, 0xfd, 0xe0, 0xb8, 0x98, 0xde, 0x8d,
	0x65, 0xd9, 0x55, 0xca, 0xcf, 0xb7, 0x39, 0xa3, 0x0b, 0x3d, 0xda, 0x67, 0xb2, 0xab, 0x54, 0x3c,
	0xda, 0xdb, 0xb3, 0xbb, 0x50, 0x89, 0xd6, 0xc1, 0xbd, 0x49, 0xcf, 0xa7, 0xb3, 0x5f, 0x7e, 0xab,
	0x81, 0x45, 0x37, 0x81, 0x18, 0xd8, 0x14, 0x43, 0x59, 0x9f, 0xca, 0x0d, 0x79, 0xed, 0x30, 0x52,
	0x37, 0xa3, 0x68, 0xea, 0xa9, 0xb4, 0x88, 0x0b, 0x92, 0x1a, 0x18, 0x5a, 0x4e, 0x5f, 0x19, 0x63,
	0xb9, 0x1e, 0xf6, 0xe8, 0xb3, 0xb7, 0x30, 0xf4, 0x0f, 0xbc, 0x78, 0xd0, 0x0a, 0x5f, 0x88, 0xd5,
	0x37, 0x15, 0xcf, 0xdb, 0x26, 0x45, 0x2e, 0x83, 0x87, 0xa8, 0x31, 0xbb, 0xa2, 0x11, 0xc2, 0x90,
	0x52, 0x85, 0xba, 0x05, 0x87, 0x56, 0x2d, 0xa3, 0x78, 0xd1, 0x13, 0x08, 0xa9, 0x49, 0x4e, 0xbc,
	0x12, 0xbe, 0x92, 0x13, 0xbc, 0x0b, 0x13, 0x4c, 0xf0, 0x74, 0x9c, 0xc4, 0xaa, 0xe2, 0xf3, 0xef,
	0xa4, 0x1b, 0xb9, 0x9f, 0xe3, 0xfa, 0x0e, 0x7d, 0xd8, 0x18, 0x86, 0xfe, 0xd6, 0xb8, 0x77, 0x3c,
	0x31, 0x45, 0xab, 0x14, 0x1f, 0x09, 0xba, 0xfc, 0xef, 0x71, 0xfd, 0x19, 0xec, 0xa9, 0xa4, 0x68,
	0x77, 0x9c, 0x8c, 0xc6, 0x34, 0x53, 0xe4, 0xd4, 0x99, 0xb9, 0x6d, 0xc6, 0x9a, 0xa2, 0x20, 0xa8,
	0x7f, 0x12, 0x34, 0xa4, 0xe5, 0x5e, 0xe1, 0x89, 0xcf, 0x45, 0xef, 0xd1, 0xa5, 0x5e, 0xdf, 0x07,
	0xe6, 0x24, 0xe5, 0xe4, 0x6f, 0x6f, 0x3c, 0x1c, 0x79, 0x41, 0x7f, 0x3a, 0x6e, 0x0b, 0x7d, 0x39,
	0xfc, 0x3a, 0x0b, 0xc5, 0x11, 0xfa, 0x1d, 0x1c, 0xe3, 0x84, 0x87, 0xfe, 0x2d, 0xc9, 0xf4, 0xdf,
	0x8a, 0xbe, 0x6d, 0x94, 0xc1, 0x61, 0x88, 0xa0, 0x29, 0x80, 0x3b, 0x02, 0x25, 0x63, 0xc7, 0x22,
	0xe2, 0xec, 0x55, 0x33, 0x42, 0x0e, 0xfd, 0xa9, 0x8e, 0x93, 0x2c, 0x8b, 0xcc, 0x75, 0x0c, 0xf6,
	0x4d, 0x97, 0xdf, 0x42, 0xcb, 0x91, 0x31, 0xde, 0xc9, 0x6d, 0xb0, 0x60, 0xb7, 0xfe, 0x24, 0xe9,
	0xcf, 0xac, 0xbc, 0x7e, 0xd3, 0x0a, 0xa2, 0x53, 0x9e, 0x45, 0x6a, 0x61, 0x5f, 0x59, 0xea, 0x85,
	0x02, 0x11, 0xcf, 0x6c, 0xf8, 0xeb, 0x38, 0x8d, 0x83, 0xc0, 0x8a, 0x36, 0xc2, 0xd0, 0x8d, 0x5f,
	0x42, 0x01, 0x33, 0xa2, 0x79, 0x0e, 0xf7, 0x1c, 0xe5, 0x66, 0x0e, 0xbc, 0xa0, 0x7d, 0x54, 0xd5,
	0x9e, 0x9a, 0xc5, 0xf1, 0x90, 0xdb, 0x32, 0xd8, 0xa7, 0xc7, 0x27, 0xd5, 0x02, 0x4e, 0xd1, 0x97,
	0x5e, 0x7c, 0xc2, 0xc2, 0x24, 0xc1, 0xd1, 0xa4, 0x6e, 0xef, 0x01, 0xab, 0x41, 0x84, 0xd1, 0x9d,
	0xe9, 0x95, 0xe2, 0x51, 0x1d, 0xf3, 0x88, 0x51, 0x40, 0x1f, 0xd2, 0xf5, 0xd6, 0x84, 0x88, 0x5f,
	0xb7, 0x52, 0x5c, 0x14, 0x99, 0xd6, 0x5d, 0xec, 0xe3, 0x5e, 0x82, 0xa9, 0x6a, 0x7f, 0x94, 0x6a,
	0x85, 0xa4, 0x8e, 0x68, 0xcc, 0xe4, 0x27, 0x97, 0x91, 0x4c, 0xd9, 0x44, 0xf5, 0xaa, 0xf5, 0xa6,
	0x64, 0x8e, 0x11, 0x0d, 0x99, 0xe4, 0xb6, 0x0c, 0xa9, 0x1f, 0x7c, 0x56, 0xd2, 0x99, 0x83, 0xef,
	0x45, 0xd9, 0x7a, 0x4a, 0x33, 0x75, 0x27, 0x75, 0xb1, 0x0a, 0xdc, 0x2c, 0x48, 0x67, 0xa5, 0xb3,
	0x95, 0x01, 0xc9, 0x37, 0xa0, 0xa2, 0x68, 0xe3, 0x87, 0xcf, 0xa6, 0xcd, 0x54, 0xad, 0x61, 0xb2,
	0x86, 0xc8, 0x64, 0x80, 0x4a, 0x84, 0x8f, 0xcf, 0xe6, 0x74, 0xa5, 0x2d, 0x41, 0x68, 0xe2, 0x25,
	0x4c, 0x73, 0x59, 0x1c, 0x0f, 0x81, 0xb5, 0x35, 0x5a, 0xd8, 0xde, 0x68, 0x2b, 0x15, 0x74, 0x23,
	0xfa, 0x75, 0x8d, 0x12, 0xa4, 0xce, 0xd9, 0x11, 0xa2, 0x0f, 0x8e, 0x54, 0x41, 0x08, 0xe6, 0x2d,
	0x97, 0x1e, 0x76, 0x96, 0x57, 0xd5, 0xcd, 0x78, 0x0e, 0xd1, 0x1b, 0xa9, 0xdd, 0x5b, 0xfe, 0xda,
	0x0e, 0xc7, 0x91, 0xc7, 0x02, 0x07, 0xfd, 0xd6, 0x14, 0x4b, 0x3d, 0x0f, 0x42, 0x0f, 0xe6, 0xf0,
	0x1b, 0x73, 0x1b, 0x34, 0x8f, 0xaa, 0xe9, 0x21, 0x2c, 0xad, 0x4c, 0xbf, 0x1b, 0x8d, 0xdc, 0xda,
	0x9e, 0xc0, 0xf4, 0xe3, 0xc2, 0xf4, 0xb1, 0xec, 0x09, 0x19, 0x34, 0x43, 0x7e, 0x09, 0x49, 0xff,
	0x5a, 0x74, 0xfd, 0xbf, 0x3f, 0xbd, 0x21, 0x8a, 0x0a, 0x9a, 0x7b, 0x82, 0x5e, 0x57, 0xd8, 0x53,
	0xae, 0xf6, 0x12, 0xc4, 0x1a, 0xa2, 0xd7, 0xcc, 0xa3, 0x78, 0x12, 0x17, 0x0d, 0x0d, 0xf5, 0xee,
	0xf4, 0x71, 0x08, 0x64, 0x9a, 0x60, 0x4f, 0xa9, 0x69, 0xbb, 0x01, 0x24, 0x6a, 0x95, 0x7b, 0x91,
	0xdc, 0x04, 0xdd, 0x7e, 0x77, 0x94, 0x08, 0xf8, 0xd2, 0x8f, 0x84, 0x7f, 0x14, 0x5b, 0xa9, 0x14,
	0x51, 0xa5, 0xfc, 0x45, 0x67, 0x15, 0x81, 0x74, 0xb7, 0x62, 0x4d, 0xc1, 0x4e, 0x43, 0x93, 0xae,
	0x7b, 0xce, 0x30, 0x0c, 0xdc, 0x6a, 0x8f, 0xd9, 0x53, 0x64, 0x3c, 0xd2, 0x69, 0x45, 0x74, 0xda,
	0xc6, 0xb3, 0x07, 0x0a, 0x37, 0x7d, 0xcf, 0x58, 0x79, 0xe3, 0xd1, 0x90, 0x64, 0x15, 0xaa, 0xe2,
	0x2d, 0xd8, 0xd5, 0x19, 0x09, 0xc7, 0x31, 0x2c, 0x17, 0xb9, 0x01, 0xf9, 0x45, 0x56, 0x91, 0x66,
	0xec, 0xaa, 0x46, 0x06, 0x93, 0x46, 0x30, 0x7a, 0x6a, 0x7d, 0x49, 0x82, 0x69, 0x48, 0x3c, 0x58,
	0xa7, 0x2c, 0xc8, 0x4f, 0xcc, 0xde, 0x0a, 0xf2, 0x7a, 0x15, 0x59, 0xd3, 0x82, 0xa8, 0x97, 0x3e,
	0x48, 0x22, 0x35, 0xf8, 0xec, 0x15, 0xb4, 0xd2, 0xbc, 0x69, 0x6e, 0x47, 0xc7, 0x22, 0xcd, 0x8f,
	0xfc, 0x99, 0x1c, 0xf5, 0x0a, 0x36, 0xf4, 0x4e, 0x7e, 0x43, 0x32, 0xa6, 0x18, 0xdd, 0x36, 0x35,
	0xd6, 0x0a, 0x5f, 0x90, 0x7f, 0x44, 0x30, 0x15, 0x69, 0xf0, 0x83, 0xfc, 0x06, 0x75, 0x6c, 0xcf,
	0x24, 0x67, 0x77, 0xe4, 0x9c, 0xd2, 0x38, 0x50, 0x45, 0xda, 0x31, 0xac, 0x56, 0x0d, 0xc1, 0x4f,
	0xe9, 0xc5, 0xc1, 0xa6, 0xeb, 0x02, 0xe3, 0x17, 0x45, 0x6e, 0x8e, 0xcd, 0xac, 0xa2, 0x90, 0x18,
	0x40, 0xe8, 0x30, 0xc5, 0x5b, 0x78, 0x33, 0x47, 0x5b, 0x92, 0xb0, 0x48, 0x12, 0x80, 0x8c, 0xae,
	0xd4, 0x20, 0x6e, 0x9b, 0x29, 0xa4, 0xe2, 0x78, 0x92, 0xbe, 0x97, 0xf8, 0xc6, 0x39, 0xc1, 0x45,
	0xd7, 0x89, 0x41, 0x2b, 0x57, 0xc0, 0x9f, 0xc0, 0xb6, 0x40, 0xfd, 0xdf, 0xfc, 0x43, 0x01, 0x01,
	0x3b, 0x0d, 0xed, 0x81, 0xbc, 0x31, 0x06, 0xc5, 0x49, 0x61, 0xd4, 0x4d, 0x65, 0xf8, 0xef, 0x52,
	0x2b, 0x24, 0x53, 0xf3, 0xce, 0x8e, 0x12, 0xd7, 0xf4, 0x6d, 0xa2, 0x22, 0x5a, 0x05, 0x5c, 0xce,
	0x5f, 0x22, 0x2c, 0x2c, 0x39, 0xd6, 0x17, 0xdd, 0xbf, 0x97, 0x4e, 0x4f, 0x45, 0x03, 0x91, 0x08,
	0x44, 0xca, 0xe1, 0xab, 0x1e, 0xc6, 0xa9, 0xbd, 0x8a, 0x2b, 0xb7, 0x47, 0xce, 0xd8, 0x07, 0x94,
	0x25, 0xbb, 0xb3, 0xcd, 0x83, 0x0b, 0x9e, 0x8d, 0xad, 0x8a, 0xdf, 0xbb, 0xa8, 0x6e, 0x40, 0xa3,
	0x17, 0xad, 0x98, 0x6e, 0x51, 0x94, 0x99, 0xde, 0x31, 0x3d, 0x7e, 0x51, 0x30, 0x48, 0xba, 0x1b,
	0xf7, 0x5e, 0x48, 0x35, 0x32, 0x17, 0xa2, 0xd8, 0x37, 0xb3, 0xcf, 0x8b, 0x3e, 0x87, 0xd8, 0xf0,
	0x04, 0x8a, 0x92, 0x43, 0xc4, 0xa9, 0x80, 0x65, 0x08, 0x0a, 0x7b, 0xbe, 0xde, 0xb5, 0x0e, 0x34,
	0xeb, 0xfc, 0xa2, 0x23, 0x05, 0xf7, 0x85, 0xd7, 0xc3, 0x5d, 0xdc, 0x4b, 0x32, 0x99, 0x86, 0x5e,
	0x33, 0xf9, 0x92, 0xa4, 0xca, 0xeb, 0x20, 0x37, 0x28, 0x8f, 0x29, 0x1f, 0xa6, 0x00, 0xea, 0x8f,
	0xa2, 0x18, 0xcb, 0x6f, 0x3b, 0x9e, 0x6f, 0xec, 0xc7, 0x1b, 0x66, 0x96, 0x92, 0xeb, 0x3f, 0x94,
	0xd8, 0x5d, 0x2e, 0x9f, 0x0e, 0xaa, 0x33, 0xfc, 0x6a, 0xe6, 0x48, 0x62, 0xec, 0xd3, 0x9d, 0xdc,
	0x83, 0x07, 0x07, 0xd9, 0x83, 0xdd, 0x2c, 0x73, 0x70, 0xe2, 0x9f, 0x0b, 0x21, 0x31, 0x45, 0x83,
	0xe3, 0x2b, 0xd2, 0x99, 0x1c, 0x38, 0x51, 0xd0, 0x3e, 0xd2, 0xae, 0xf4, 0x5a, 0xec, 0x27, 0x52,
	0x75, 0xdd, 0xf8, 0x22, 0x7d, 0x9a, 0x0a, 0x9c, 0x43, 0xb1, 0x76, 0x18, 0xfa, 0xeb, 0xe1, 0x69,
	0x40, 0x13, 0x51, 0x17, 0xa2, 0x98, 0x06, 0xa2, 0x53, 0x4c, 0xfb, 0x5c, 0x08, 0x89, 0xee, 0x77,
	0x7f, 0x5d, 0xea, 0xe0, 0x38, 0x8a, 0x70, 0x00, 0x99, 0xb2, 0x4f, 0x68, 0x06, 0xac, 0x0c, 0xf1,
	0xde, 0xb3, 0x34, 0x61, 0x84, 0xfc, 0x19, 0x35, 0xd4, 0xee, 0x1a, 0x6b, 0x95, 0x41, 0xa9, 0xef,
	0x07, 0xb2, 0x85, 0x6f, 0xec, 0x44, 0xae, 0xe7, 0x64, 0xbb, 0x6c, 0xe1, 0x72, 0xb9, 0xfe, 0x23,
	0x98, 0x26, 0xc9, 0xc2, 0x24, 0x7d, 0x9b, 0x0e, 0x6e, 0x72, 0x82, 0x11, 0x21, 0xc9, 0x38, 0x75,
	0x27, 0x4c, 0xb0, 0x85, 0x75, 0xd4, 0x1a, 0x16, 0x5e, 0xd6, 0xd0, 0x4c, 0xe3, 0x65, 0xad, 0x3a,
	0x4b, 0xd1, 0xe3, 0x4c, 0x78, 0x00, 0x8f, 0xb3, 0x4d, 0xd1, 0x33, 0x86, 0x29, 0xa6, 0x5c, 0x96,
	0xde, 0x73, 0xe0, 0x41, 0x5f, 0x0a, 0x1a, 0xe2, 0x7f, 0x6b, 0xe3, 0x5b, 0x23, 0xc6, 0x0e, 0x8e,
	0xeb, 0xcf, 0xd1, 0x9d, 0xfc, 0x66, 0xe9, 0x5c, 0xd6, 0xdf, 0x35, 0x78, 0x65, 0x2c, 0x10, 0xba,
	0xf9, 0xeb, 0x8d, 0xfc, 0x06, 0xd6, 0xcb, 0x87, 0xa2, 0x3b, 0x50, 0xbd, 0x3f, 0xcd, 0x5e, 0x02,
	0x7b, 0x7c, 0xf9, 0x5b, 0x5f, 0x12, 0x34, 0x90, 0xf7, 0x2b, 0x49, 0xbe, 0xcb, 0x98, 0xd7, 0xcc,
	0x99, 0x35, 0xb3, 0xba, 0xd9, 0x03, 0xe9, 0x01, 0x99, 0x8c, 0xa0, 0xe4, 0x00, 0x69, 0xde, 0x20,
	0x3d, 0xdd, 0xa8, 0x25, 0xda, 0xb8, 0x9e, 0x92, 0xd4, 0x94, 0x35, 0x44, 0xea, 0x91, 0xc0, 0x56,
	0xb2, 0x4f, 0xf4, 0x9a, 0xaf, 0x8a, 0x62, 0xda, 0x33, 0x91, 0x6c, 0xde, 0x53, 0xcd, 0x2a, 0xc2,
	0xe8, 0xc3, 0xec, 0x89, 0xd5, 0xac, 0x22, 0x2a, 0x8e, 0x1d, 0x79, 0xa3, 0x60, 0x9f, 0xb8, 0x75,
	0xba, 0x8a, 0x86, 0xfb, 0x48, 0x76, 0x5b, 0x35, 0x7b, 0x09, 0x11, 0x05, 0x53, 0xfa, 0xa9, 0x47,
	0xf7, 0xe4, 0xcc, 0x5e, 0xff, 0x0c, 0xa6, 0x55, 0x61, 0x2f, 0x82, 0xce, 0x56, 0x5f, 0x7f, 0x56,
	0xf9, 0x2a, 0xb7, 0x80, 0x65, 0x92, 0xc1, 0x16, 0x91, 0x0d, 0xef, 0xdb, 0x35, 0x66, 0x43, 0x66,
	0xd9, 0x43, 0xd5, 0xde, 0xc3, 0x08, 0xd9, 0x19, 0xfb, 0x78, 0xdd, 0x99, 0x54, 0x3c, 0x1f, 0x4b,
	0x48, 0xa0, 0xc3, 0xfb, 0x30, 0x55, 0x9c, 0x83, 0xd5, 0x16, 0xde, 0xb3, 0xb3, 0x7a, 0x5a, 0xd1,
	0x68, 0xd4, 0xdc, 0xd6, 0xb6, 0x76, 0x0d, 0xf1, 0x1b, 0x53, 0xfb, 0xa6, 0x27, 0x90, 0x79, 0xc5,
	0xb4, 0xa2, 0x39, 0xba, 0x92, 0x8b, 0xc8, 0x55, 0x0d, 0xf7, 0x12, 0x32, 0xfa, 0xee, 0xea, 0x6c,
	0x08, 0xfb, 0x14, 0x26, 0x2f, 0x4b, 0x2f, 0xda, 0x46, 0x75, 0xd2, 0xee, 0x02, 0x0b, 0x1a, 0x49,
	0x4b, 0x51, 0x97, 0x25, 0xee, 0x0e, 0x20, 0x34, 0x12, 0x97, 0x22, 0x2c, 0x49, 0xde, 0x01, 0xbc,
	0x94, 0x33, 0x91, 0xf7, 0x00, 0xe3, 0x63, 0x88, 0xb7, 0x78, 0x46, 0x24, 0xfe, 0x1e, 0x8c, 0x95,
	0x59, 0xba, 0xa5, 0xed, 0x54, 0x27, 0xf3, 0x8f, 0xe8, 0x4d, 0x1b, 0x99, 0xc9, 0x39, 0x31, 0x6d,
	0xe2, 0x6e, 0x6e, 0x5f, 0x9b, 0xa7, 0x4e, 0xe4, 0x66, 0xaf, 0xfd, 0x3d, 0x05, 0xec, 0x46, 0x9a,
	0xab, 0xd8, 0x4b, 0xd2, 0x5e, 0x33, 0x47, 0x13, 0xb4, 0xa0, 0x28, 0x15, 0x37, 0xf4, 0xbc, 0x63,
	0x1f, 0x8e, 0x8e, 0xe9, 0x57, 0xd0, 0x96, 0xb2, 0x8d, 0x95, 0x32, 0x2c, 0xbd, 0x3f, 0xa5, 0x3d,
	0x15, 0x99, 0x64, 0x61, 0x55, 0x6a, 0x95, 0xb3, 0x7c, 0x7e, 0x30, 0xa5, 0x4d, 0x0d, 0xdb, 0x73,
	0xd5, 0x99, 0x54, 0x38, 0x9a, 0x58, 0x9e, 0xaf, 0x49, 0x8e, 0x27, 0xc6, 0x5c, 0x7c, 0xf2, 0xa8,
	0x60, 0x27, 0xd8, 0x8b, 0xbc, 0xbf, 0x14, 0x31, 0x05, 0xdc, 0xcb, 0x69, 0x47, 0xc7, 0x95, 0xde,
	0xf7, 0xe2, 0x39, 0x46, 0x2a, 0x5b, 0x5b, 0x4d, 0xf9, 0xb3, 0xda, 0xd2, 0xe6, 0x9a, 0x36, 0x50,
	0xd2, 0x2a, 0xf2, 0x03, 0x8b, 0x8a, 0xe4, 0x44, 0x4e, 0x2f, 0xc1, 0xd1, 0xd9, 0x66, 0xf8, 0xfa,
	0x52, 0xc4, 0x9f, 0x91, 0x1b, 0x28, 0x9e, 0xe2, 0xeb, 0x17, 0x50, 0xe5, 0xe8, 0xd8, 0x9e, 0x86,
	0x5e, 0x0f, 0x1f, 0x84, 0xd1, 0x71, 0x45, 0x7f, 0xb8, 0x02, 0x2f, 0x3d, 0xe2, 0xbd, 0x29, 0x5e,
	0x2c, 0x61, 0xad, 0xa1, 0x92, 0x94, 0x94, 0xa3, 0x58, 0x2b, 0x68, 0x4a, 0x27, 0xab, 0x5b, 0x15,
	0xd9, 0xcf, 0x75, 0x54, 0xe6, 0xdc, 0x35, 0xdb, 0xde, 0x0b, 0xa8, 0xf2, 0xd4, 0x73, 0x71, 0xa8,
	0x5f, 0xe1, 0x58, 0x95, 0x53, 0x52, 0x0a, 0x4c, 0x4f, 0x62, 0x5c, 0x24, 0x3f, 0xd0, 0xd4, 0xd6,
	0xea, 0xfb, 0x70, 0x3f, 0xb2, 0xd5, 0x3f, 0x5b, 0xc6, 0xf9, 0x54, 0x7a, 0xc0, 0x04, 0xb8, 0xcb,
	0xf0, 0xcc, 0x32, 0x74, 0x28, 0xed, 0x63, 0x91, 0x7e, 0x19, 0x2c, 0x7c, 0x3a, 0x0a, 0xc9, 0xc2,
	0xb7, 0x22, 0x75, 0x4e, 0xa2, 0x85, 0x7e, 0x7f, 0x5f, 0xfe, 0xa8, 0xf3, 0xca, 0xf5, 0x94, 0xed,
	0x14, 0x1c, 0x65, 0x73, 0xbc, 0xb0, 0x37, 0x84, 0x0a, 0x8e, 0x92, 0x0c, 0x47, 0x9d, 0xe2, 0xdb,
	0x4e, 0xd2, 0x1b, 0x6c, 0x8c, 0x3d, 0x17, 0x57, 0xf4, 0x3c, 0xaa, 0x08, 0x04, 0xb5, 0xd6, 0x25,
	0x29, 0x95, 0x56, 0xa9, 0xf6, 0xc4, 0x67, 0x1d, 0xfb, 0xd5, 0x51, 0xd0, 0x8c, 0xa6, 0x5d, 0x67,
	0xf2, 0x8d, 0x77, 0xb6, 0x23, 0xfc, 0x4a, 0x62, 0x56, 0x40, 0x5f, 0xb6, 0x67, 0x34, 0xa5, 0xc8,
	0x3a, 0xf6, 0x2b, 0x41, 0xd3, 0x08, 0x9f, 0x34, 0x58, 0x63, 0xab, 0xbf, 0x39, 0x74, 0xfa, 0x55,
	0x1f, 0xd5, 0x67, 0x70, 0x68, 0x21, 0xdc, 0x88, 0x20, 0x57, 0xea, 0x94, 0x3f, 0x51, 0x2f, 0xcb,
	0xa1, 0x25, 0x2b, 0x62, 0x79, 0x94, 0x3a, 0x61, 0x37, 0x83, 0xc4, 0x1b, 0x3a, 0x60, 0xe9, 0xcb,
	0xd8, 0x45, 0x8d, 0xef, 0xab, 0xe4, 0xea, 0x64, 0x7b, 0x7e, 0x2c, 0xd9, 0x6b, 0x35, 0x64, 0x45,
	0xe0, 0x4d, 0x49, 0x65, 0x9f, 0xb6, 0x5b, 0xe3, 0x68, 0xe2, 0x05, 0x7d, 0x08, 0xc2, 0x51, 0x4c,
	0x7b, 0x31, 0x28, 0x82, 0x26, 0x34, 0xa4, 0xc7, 0x34, 0xad, 0x2f, 0xe4, 0x9d, 0xdb, 0x1b, 0xfb,
	0x65, 0xfd, 0x3c, 0xfb, 0xf4, 0x3d, 0x13, 0x81, 0x7e, 0x14, 0x1e, 0x56, 0x74, 0x2e, 0x73, 0x70,
	0xc1, 0x1e, 0xfb, 0xf0, 0x7a, 0x6e, 0x07, 0x9f, 0xc6, 0x34, 0x25, 0x4d, 0xa5, 0xd0, 0xb5, 0x1c,
	0x58, 0x8a, 0x47, 0x40, 0xd6, 0x15, 0x88, 0xb4, 0x62, 0x68, 0x0d, 0x9b, 0x8b, 0x04, 0x2d, 0x3d,
	0xfa, 0x5f, 0x60, 0xbd, 0xad, 0x78, 0x95, 0xc3, 0xd0, 0xd7, 0x36, 0xe0, 0xa4, 0x91, 0xf6, 0x4e,
	0xe3, 0xfa, 0x5b, 0xfa, 0x73, 0x5b, 0xe7, 0xd0, 0xc7, 0x0f, 0xba, 0x7b, 0x61, 0x94, 0xc4, 0x1d,
	0xec, 0xf8, 0xfb, 0xde, 0x10, 0x67, 0x2f, 0xce, 0x7d, 0xcd, 0x85, 0x9c, 0x44, 0xc9, 0x72, 0xd3,
	0x4b, 0x73, 0x38, 0x31, 0x0c, 0x65, 0xd7, 0x15, 0xdd, 0xca, 0x0b, 0x6f, 0x99, 0x05, 0xa9, 0xdd,
	0x64, 0x62, 0xf7, 0x84, 0x6d, 0x4e, 0x77, 0x72, 0x48, 0x03, 0x35, 0xb2, 0x74, 0x11, 0xfe, 0x5f,
	0x99, 0x17, 0xca, 0x11, 0x46, 0x88, 0xd8, 0x4a, 0x3b, 0x24, 0x5b, 0x73, 0x03, 0x7c, 0x5c, 0x65,
	0x93, 0xa6, 0x6d, 0xb7, 0x9c, 0xa0, 0x52, 0xdb, 0x5d, 0xee, 0x2a, 0xde, 0x70, 0x86, 0xb8, 0xe2,
	0x82, 0xe5, 0xa0, 0xd2, 0x43, 0xb5, 0xab, 0x29, 0xd2, 0x8d, 0x31, 0x8e, 0xe3, 0xba, 0x05, 0x0c,
	0x3e, 0xe6, 0xd8, 0x23, 0xa5, 0x3a, 0x4a, 0x28, 0x2d, 0x48, 0x20, 0x25, 0x90, 0xdf, 0x35, 0x47,
	0x27, 0xcb, 0x34, 0xa0, 0x69, 0x72, 0xf5, 0xb4, 0x93, 0x3c, 0x65, 0x5a, 0xa1, 0x7e, 0xde, 0x35,
	0xd7, 0xe1, 0x38, 0xa4, 0x34, 0x0e, 0xd7, 0xd3, 0x16, 0xf8, 0xba, 0x84, 0x17, 0x39, 0x2f, 0xd1,
	0x0a, 0xc7, 0x23, 0xa5, 0x87, 0xbb, 0x21, 0x11, 0x44, 0x69, 0xe6, 0x1d, 0x3b, 0x5d, 0x52, 0x34,
	0xc6, 0xc0, 0x4b, 0x57, 0xe0, 0xa1, 0x61, 0x1a, 0xd0, 0xa2, 0xca, 0x23, 0x43, 0x01, 0x2d, 0x2d,
	0x56, 0xf6, 0x0c, 0x9a, 0xc7, 0x81, 0xbb, 0x6d, 0x85, 0x5b, 0x4f, 0x33, 0x06, 0x69, 0xe6, 0xf7,
	0x45, 0x71, 0x7c, 0xe1, 0x58, 0xee, 0x5a, 0xb1, 0xd0, 0x7a, 0x46, 0x44, 0x82, 0xf1, 0x9b, 0xa3,
	0xd1, 0x96, 0x73, 0x88, 0xfd, 0x0a, 0x8c, 0xdf, 0x9d, 0xc4, 0x00, 0xaa, 0x3d, 0x21, 0x24, 0xd2,
	0x48, 0x60, 0xbd, 0x95, 0x23, 0x90, 0xa0, 0x86, 0xa5, 0x5b, 0x1c, 0xf7, 0xd9, 0x76, 0x4b, 0x60,
	0x2d, 0xd9, 0xad, 0x03, 0xbe, 0x58, 0xda, 0x4e, 0x14, 0x8e, 0xe3, 0x62, 0x91, 0x5a, 0x4d, 0x7b,
	0x3b, 0x03, 0x97, 0x76, 0x36, 0xf1, 0x4e, 0x99, 0x7d, 0xaa, 0xdf, 0xce, 0xe9, 0x1a, 0xaf, 0x64,
	0x3a, 0x62, 0x74, 0x21, 0x22, 0xdb, 0x24, 0xa6, 0x21, 0xc5, 0x2b, 0x28, 0xe0, 0x2a, 0x02, 0x49,
	0xe2, 0xac, 0xf0, 0xe0, 0x7d, 0x6a, 0x0b, 0x6f, 0xe4, 0x74, 0xb4, 0x3b, 0x89, 0xb7, 0xe3, 0xbe,
	0x69, 0x59, 0xb5, 0x70, 0xd2, 0xf5, 0xbd, 0x51, 0xc5, 0x65, 0x25, 0x41, 0x6b, 0x72, 0xa6, 0x85,
	0x93, 0x03, 0x2f, 0xd8, 0x0a, 0xe3, 0x6e, 0xe2, 0x24, 0x5e, 0x9c, 0x78, 0xbd, 0xb8, 0x4a, 0x18,
	0x7e, 0x8a, 0x3f, 0xc5, 0xa1, 0x87, 0xfa, 0xa7, 0xd2, 0xec, 0x6f, 0xd4, 0xc6, 0x0f, 0xbc, 0x0d,
	0xf2, 0x3d, 0x4d, 0x88, 0x52, 0x41, 0x89, 0x22, 0x60, 0xed, 0x81, 0x13, 0x49, 0x51, 0xdc, 0xe9,
	0x1b, 0x37, 0x05, 0x79, 0xcb, 0x89, 0xce, 0x06, 0xf7, 0x16, 0x70, 0x20, 0xc3, 0x4d, 0xa3, 0x09,
	0x63, 0x53, 0x2e, 0xcd, 0x4c, 0x25, 0xa3, 0x6c, 0x62, 0x61, 0x6a, 0xbc, 0x13, 0x0c, 0x59, 0x6d,
	0xab, 0x6e, 0xcb, 0x32, 0x3c, 0xd1, 0xed, 0xd7, 0xb9, 0x17, 0x54, 0xc5, 0x5c, 0xf5, 0x94, 0xf5,
	0x52, 0x58, 0xbe, 0x48, 0x0d, 0xb1, 0xdc, 0x87, 0xfd, 0x20, 0x6e, 0xf6, 0x34, 0x17, 0xa8, 0xd5,
	0xf3, 0xf7, 0xa5, 0xf4, 0xf2, 0x46, 0x85, 0x2f, 0xe6, 0xfc, 0x6b, 0xb3, 0x2b, 0x6d, 0x1c, 0x32,
	0x73, 0x7f, 0xa1, 0x61, 0xbc, 0xbf, 0x90, 0xd6, 0xa6, 0xa7, 0xbb, 0x6b, 0xe9, 0x85, 0x0a, 0x09,
	0xd1, 0x5d, 0xb3, 0x5c, 0x20, 0x0c, 0x17, 0x3f, 0x78, 0xd1, 0x83, 0x3b, 0x5d, 0x19, 0xbf, 0xbe,
	0x20, 0xab, 0x8a, 0xab, 0x92, 0x27, 0x1f, 0xce, 0x74, 0x71, 0x71, 0x57, 0xa6, 0x29, 0x61, 0xa4,
	0x84, 0x82, 0x8c, 0xf5, 0xe7, 0x74, 0xbe, 0x30, 0x8c, 0xa4, 0x1d, 0x12, 0x61, 0xd3, 0xaf, 0x92,
	0xd9, 0x47, 0x02, 0xe7, 0x0b, 0xe8, 0xfe, 0xff, 0xac, 0xa1, 0xc5, 0x16, 0xaf, 0x72, 0xbf, 0x05,
	0x30, 0xf5, 0x2d, 0x50, 0x6d, 0xe1, 0xce, 0xf9, 0x38, 0x36, 0x7a, 0x9a, 0x68, 0xb0, 0x79, 0xeb,
	0x2d, 0x51, 0x25, 0x16, 0xfd, 0x3b, 0x70, 0x7a, 0xd9, 0xc1, 0xa7, 0x80, 0x4c, 0x99, 0xed, 0x2b,
	0xf4, 0xc7, 0x4e, 0xd8, 0xc1, 0xc9, 0x38, 0x0a, 0xd8, 0x65, 0xc0, 0x0e, 0x1e, 0xf9, 0x4e, 0x0f,
	0x43, 0xf5, 0xdc, 0xac, 0xad, 0x19, 0xf8, 0x6d, 0x1a, 0x0e, 0x61, 0x1c, 0x0f, 0xd2, 0x08, 0x85,
	0xf6, 0xa8, 0x86, 0xd3, 0xf4, 0xfd, 0xfa, 0xf7, 0xa0, 0xe2, 0x29, 0xd1, 0x61, 0x79, 0xd0, 0xd7,
	0x0f, 0xa7, 0x45, 0xb7, 0x65, 0x15, 0x45, 0x70, 0x13, 0xbd, 0xab, 0xca, 0x81, 0x1f, 0x06, 0x6a,
	0x60, 0x5e, 0x7e, 0x24, 0xcf, 0x40, 0x7f, 0x48, 0xb3, 0x40, 0xf3, 0x27, 0xe8, 0x53, 0x29, 0xdb,
	0xba, 0xf4, 0xdf, 0xfe, 0xfa, 0xda, 0xcc, 0x3f, 0xfc, 0xf5, 0xb5, 0x99, 0x7f, 0xfc, 0xeb, 0x6b,
	0x33, 0xff, 0x37, 0x00, 0x00, 0xff, 0xff, 0xfe, 0xe2, 0x06, 0x0d, 0xe0, 0xe6, 0x00, 0x00,
}

func (m *SigninRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigninRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SigninRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AreaCode != nil {
		i -= len(*m.AreaCode)
		copy(dAtA[i:], *m.AreaCode)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.AreaCode)))
		i--
		dAtA[i] = 0x32
	}
	if m.Account != nil {
		i -= len(*m.Account)
		copy(dAtA[i:], *m.Account)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Account)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Password != nil {
		i -= len(*m.Password)
		copy(dAtA[i:], *m.Password)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Password)))
		i--
		dAtA[i] = 0x22
	}
	if m.Code != nil {
		i -= len(*m.Code)
		copy(dAtA[i:], *m.Code)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Code)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Types != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Types))
		i--
		dAtA[i] = 0x10
	}
	if m.Phone == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Phone")
	} else {
		i -= len(*m.Phone)
		copy(dAtA[i:], *m.Phone)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Phone)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SigninResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigninResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SigninResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Url != nil {
		i -= len(*m.Url)
		copy(dAtA[i:], *m.Url)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Token != nil {
		i -= len(*m.Token)
		copy(dAtA[i:], *m.Token)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Power != nil {
		{
			size, err := m.Power.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetManagerListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetManagerListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetManagerListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ManagerLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManagerLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ManagerLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ManagerTypesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManagerTypesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ManagerTypesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRolePowerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRolePowerList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRolePowerList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayerType != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PlayerType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.WaiterType != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.WaiterType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.TimeType != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.TimeType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.DeviceType != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.DeviceType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.RegType != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.RegType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Status != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.GrabTag) > 0 {
		for iNdEx := len(m.GrabTag) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(m.GrabTag[iNdEx]))
			i--
			dAtA[i] = 0x78
		}
	}
	if len(m.CustomTag) > 0 {
		for iNdEx := len(m.CustomTag) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(m.CustomTag[iNdEx]))
			i--
			dAtA[i] = 0x70
		}
	}
	if len(m.Label) > 0 {
		for iNdEx := len(m.Label) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(m.Label[iNdEx]))
			i--
			dAtA[i] = 0x68
		}
	}
	if len(m.Channel) > 0 {
		for iNdEx := len(m.Channel) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Channel[iNdEx])
			copy(dAtA[i:], m.Channel[iNdEx])
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(m.Channel[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if m.Role != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Role))
		i--
		dAtA[i] = 0x58
	}
	if m.Sex != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Sex))
		i--
		dAtA[i] = 0x50
	}
	if m.IsOnline != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.IsOnline))
		i--
		dAtA[i] = 0x48
	}
	if m.ListType != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.ListType))
		i--
		dAtA[i] = 0x40
	}
	if m.Sort != nil {
		i -= len(*m.Sort)
		copy(dAtA[i:], *m.Sort)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Sort)))
		i--
		dAtA[i] = 0x3a
	}
	if m.EndTimestamp != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.EndTimestamp))
		i--
		dAtA[i] = 0x30
	}
	if m.BeginTimestamp != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.BeginTimestamp))
		i--
		dAtA[i] = 0x28
	}
	if m.Type != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.Keyword != nil {
		i -= len(*m.Keyword)
		copy(dAtA[i:], *m.Keyword)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Keyword)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PageSize != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if m.CurPage != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.CurPage))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerFriendListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerFriendListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerFriendListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayerType != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PlayerType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.EndTimestamp != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.EndTimestamp))
		i--
		dAtA[i] = 0x78
	}
	if m.BeginTimestamp != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.BeginTimestamp))
		i--
		dAtA[i] = 0x70
	}
	if m.GrabTag != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.GrabTag))
		i--
		dAtA[i] = 0x68
	}
	if m.CustomTag != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.CustomTag))
		i--
		dAtA[i] = 0x60
	}
	if m.Type != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x58
	}
	if m.Region != nil {
		i -= len(*m.Region)
		copy(dAtA[i:], *m.Region)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Region)))
		i--
		dAtA[i] = 0x52
	}
	if m.City != nil {
		i -= len(*m.City)
		copy(dAtA[i:], *m.City)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.City)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Province != nil {
		i -= len(*m.Province)
		copy(dAtA[i:], *m.Province)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Province)))
		i--
		dAtA[i] = 0x42
	}
	if m.Label != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Label))
		i--
		dAtA[i] = 0x38
	}
	if m.Gender != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Gender))
		i--
		dAtA[i] = 0x30
	}
	if m.PlayerId != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PlayerId))
		i--
		dAtA[i] = 0x20
	}
	if m.Keyword != nil {
		i -= len(*m.Keyword)
		copy(dAtA[i:], *m.Keyword)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Keyword)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PageSize != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if m.CurPage != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.CurPage))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetTeamListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTeamListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTeamListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.State))
		i--
		dAtA[i] = 0x38
	}
	if m.ListType != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.ListType))
		i--
		dAtA[i] = 0x30
	}
	if m.Status != nil {
		i--
		if *m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Type != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.Keyword != nil {
		i -= len(*m.Keyword)
		copy(dAtA[i:], *m.Keyword)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Keyword)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PageSize != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if m.CurPage != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.CurPage))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTeamListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTeamListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTeamListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MemberOptRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberOptRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemberOptRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Types != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Types))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Account) > 0 {
		for iNdEx := len(m.Account) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Account[iNdEx])
			copy(dAtA[i:], m.Account[iNdEx])
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(m.Account[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TeamId != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.TeamId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamMemberRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamMemberRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamMemberRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Keyword != nil {
		i -= len(*m.Keyword)
		copy(dAtA[i:], *m.Keyword)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Keyword)))
		i--
		dAtA[i] = 0x32
	}
	if m.Type != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x28
	}
	if m.State != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.TeamId != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.TeamId))
		i--
		dAtA[i] = 0x18
	}
	if m.PageSize != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if m.CurPage != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.CurPage))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamMemberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamMemberResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamMemberResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SourceTypeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SourceTypeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SourceTypeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Channel != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Channel))
		i--
		dAtA[i] = 0x10
	}
	if m.Types != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Types))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SourceTypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SourceTypeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SourceTypeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddGoldResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddGoldResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddGoldResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Note != nil {
		i -= len(*m.Note)
		copy(dAtA[i:], *m.Note)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Note)))
		i--
		dAtA[i] = 0x42
	}
	if m.Channeltype != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Channeltype))
		i--
		dAtA[i] = 0x38
	}
	if m.SourceType != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.SourceType))
		i--
		dAtA[i] = 0x30
	}
	if m.Extra != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Extra))
		i--
		dAtA[i] = 0x28
	}
	if m.ChangeType == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("ChangeType")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.ChangeType))
		i--
		dAtA[i] = 0x18
	}
	if m.Gold == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Gold")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Gold))
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerId == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("PlayerId")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PlayerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGoldLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGoldLogRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGoldLogRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PayType != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PayType))
		i--
		dAtA[i] = 0x48
	}
	if len(m.SourceType) > 0 {
		for iNdEx := len(m.SourceType) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(m.SourceType[iNdEx]))
			i--
			dAtA[i] = 0x40
		}
	}
	if m.KeyType != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.KeyType))
		i--
		dAtA[i] = 0x38
	}
	if m.Keyword != nil {
		i -= len(*m.Keyword)
		copy(dAtA[i:], *m.Keyword)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Keyword)))
		i--
		dAtA[i] = 0x32
	}
	if m.PageSize != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageSize))
		i--
		dAtA[i] = 0x20
	}
	if m.CurPage != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.CurPage))
		i--
		dAtA[i] = 0x18
	}
	if m.EndTimestamp != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.EndTimestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.BeginTimestamp != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.BeginTimestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGoldLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGoldLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGoldLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GoldLogList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoldLogList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoldLogList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Extend != nil {
		{
			size, err := m.Extend.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.InLine == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("InLine")
	} else {
		{
			size, err := m.InLine.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PaymentSettingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentSettingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentSettingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PlayerKeepReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerKeepReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerKeepReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PlayerActiveReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerActiveReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerActiveReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PlayerBehaviorReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerBehaviorReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerBehaviorReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InOutCashSumReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InOutCashSumReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InOutCashSumReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RegisterLoginReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterLoginReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterLoginReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OperationChannelReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationChannelReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationChannelReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChannelReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ArticleReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArticleReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SquareReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SquareReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SquareReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AdvReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdvReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PayTypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayTypeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayTypeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PaySceneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaySceneResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaySceneResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PaymentPlatformResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentPlatformResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentPlatformResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PlatformChannelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlatformChannelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlatformChannelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageSize == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("PageSize")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageSize))
		i--
		dAtA[i] = 0x38
	}
	if m.CurPage == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("CurPage")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.CurPage))
		i--
		dAtA[i] = 0x30
	}
	if m.Keyword != nil {
		i -= len(*m.Keyword)
		copy(dAtA[i:], *m.Keyword)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Keyword)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Types != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Types))
		i--
		dAtA[i] = 0x20
	}
	if m.Status != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.PayType != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PayType))
		i--
		dAtA[i] = 0x10
	}
	if m.ListType != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.ListType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlatformChannelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlatformChannelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlatformChannelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeaturesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeaturesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeaturesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageSize == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("PageSize")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageSize))
		i--
		dAtA[i] = 0x40
	}
	if m.CurPage == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("CurPage")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.CurPage))
		i--
		dAtA[i] = 0x38
	}
	if m.EndTimestamp != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.EndTimestamp))
		i--
		dAtA[i] = 0x30
	}
	if m.BeginTimestamp != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.BeginTimestamp))
		i--
		dAtA[i] = 0x28
	}
	if m.Keyword != nil {
		i -= len(*m.Keyword)
		copy(dAtA[i:], *m.Keyword)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Keyword)))
		i--
		dAtA[i] = 0x22
	}
	if m.Types != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Types))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Recipient != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Recipient))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeaturesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeaturesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeaturesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PlayerComplaintResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerComplaintResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerComplaintResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryShopItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShopItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShopItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryShopItemObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShopItemObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShopItemObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreateTime != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x48
	}
	if m.State != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.State))
		i--
		dAtA[i] = 0x40
	}
	if m.PlayerAccount != nil {
		i -= len(*m.PlayerAccount)
		copy(dAtA[i:], *m.PlayerAccount)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.PlayerAccount)))
		i--
		dAtA[i] = 0x32
	}
	if m.StockCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.StockCount))
		i--
		dAtA[i] = 0x28
	}
	if m.Price != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Price))
		i--
		dAtA[i] = 0x20
	}
	if m.ItemTypeName != nil {
		i -= len(*m.ItemTypeName)
		copy(dAtA[i:], *m.ItemTypeName)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.ItemTypeName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ItemId != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryShopItemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShopItemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShopItemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Status")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x40
	}
	if m.Types == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Types")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Types))
		i--
		dAtA[i] = 0x38
	}
	if m.Keyword != nil {
		i -= len(*m.Keyword)
		copy(dAtA[i:], *m.Keyword)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Keyword)))
		i--
		dAtA[i] = 0x32
	}
	if m.PageSize == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("PageSize")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageSize))
		i--
		dAtA[i] = 0x20
	}
	if m.CurPage == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("CurPage")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.CurPage))
		i--
		dAtA[i] = 0x18
	}
	if m.EndTimestamp != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.EndTimestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.BeginTimestamp != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.BeginTimestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShopItemFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopItemFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShopItemFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FileHeight != nil {
		i -= len(*m.FileHeight)
		copy(dAtA[i:], *m.FileHeight)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.FileHeight)))
		i--
		dAtA[i] = 0x22
	}
	if m.FileWidth != nil {
		i -= len(*m.FileWidth)
		copy(dAtA[i:], *m.FileWidth)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.FileWidth)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FileType == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("file_type")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.FileType))
		i--
		dAtA[i] = 0x10
	}
	if m.FileUrl == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("file_url")
	} else {
		i -= len(*m.FileUrl)
		copy(dAtA[i:], *m.FileUrl)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.FileUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryShopItemDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShopItemDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShopItemDetailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ItemType != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.ItemType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.PointCardName != nil {
		i -= len(*m.PointCardName)
		copy(dAtA[i:], *m.PointCardName)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.PointCardName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.Title != nil {
		i -= len(*m.Title)
		copy(dAtA[i:], *m.Title)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Title)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.State != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.State))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.SoldOutTime != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.SoldOutTime))
		i--
		dAtA[i] = 0x78
	}
	if m.CreateTime != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x70
	}
	if m.SellItemCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.SellItemCount))
		i--
		dAtA[i] = 0x68
	}
	if m.PageViews != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageViews))
		i--
		dAtA[i] = 0x60
	}
	if m.PaymentCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PaymentCount))
		i--
		dAtA[i] = 0x58
	}
	if m.StockCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.StockCount))
		i--
		dAtA[i] = 0x50
	}
	if m.GoodCommentRate != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.GoodCommentRate))
		i--
		dAtA[i] = 0x48
	}
	if m.CommonUseLabel != nil {
		i -= len(*m.CommonUseLabel)
		copy(dAtA[i:], *m.CommonUseLabel)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.CommonUseLabel)))
		i--
		dAtA[i] = 0x42
	}
	if m.CategoryLabel != nil {
		i -= len(*m.CategoryLabel)
		copy(dAtA[i:], *m.CategoryLabel)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.CategoryLabel)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ItemTypeName != nil {
		i -= len(*m.ItemTypeName)
		copy(dAtA[i:], *m.ItemTypeName)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.ItemTypeName)))
		i--
		dAtA[i] = 0x32
	}
	if m.Price != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Price))
		i--
		dAtA[i] = 0x28
	}
	if m.PlayerAccount != nil {
		i -= len(*m.PlayerAccount)
		copy(dAtA[i:], *m.PlayerAccount)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.PlayerAccount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ItemFiles) > 0 {
		for iNdEx := len(m.ItemFiles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ItemFiles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ItemId != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShopItemType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopItemType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShopItemType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TypeName != nil {
		i -= len(*m.TypeName)
		copy(dAtA[i:], *m.TypeName)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.TypeName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ItemType != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.ItemType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShopItemCategory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopItemCategory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShopItemCategory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CategoryName != nil {
		i -= len(*m.CategoryName)
		copy(dAtA[i:], *m.CategoryName)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.CategoryName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ItemCategory != nil {
		i -= len(*m.ItemCategory)
		copy(dAtA[i:], *m.ItemCategory)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.ItemCategory)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetShopItemTypeDropDownResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetShopItemTypeDropDownResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetShopItemTypeDropDownResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DropDownItemCategory) > 0 {
		for iNdEx := len(m.DropDownItemCategory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DropDownItemCategory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DropDownItemType) > 0 {
		for iNdEx := len(m.DropDownItemType) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DropDownItemType[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryShopCommentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShopCommentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShopCommentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Nickname != nil {
		i -= len(*m.Nickname)
		copy(dAtA[i:], *m.Nickname)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Nickname)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ComType == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("ComType")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.ComType))
		i--
		dAtA[i] = 0x30
	}
	if m.PageSize == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("PageSize")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageSize))
		i--
		dAtA[i] = 0x28
	}
	if m.CurPage == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("CurPage")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.CurPage))
		i--
		dAtA[i] = 0x20
	}
	if m.EndTimestamp != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.EndTimestamp))
		i--
		dAtA[i] = 0x18
	}
	if m.BeginTimestamp != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.BeginTimestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.ItemId == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("ItemId")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryShopCommentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShopCommentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShopCommentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EditShopCommentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditShopCommentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EditShopCommentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FakeLikeCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.FakeLikeCount))
		i--
		dAtA[i] = 0x10
	}
	if m.CommentId == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("CommentId")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.CommentId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryShopOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShopOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShopOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Keyword != nil {
		i -= len(*m.Keyword)
		copy(dAtA[i:], *m.Keyword)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Keyword)))
		i--
		dAtA[i] = 0x42
	}
	if m.Types == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Types")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Types))
		i--
		dAtA[i] = 0x38
	}
	if m.Status == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Status")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.PageSize == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("PageSize")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageSize))
		i--
		dAtA[i] = 0x28
	}
	if m.CurPage == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("CurPage")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.CurPage))
		i--
		dAtA[i] = 0x20
	}
	if m.EndTimestamp != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.EndTimestamp))
		i--
		dAtA[i] = 0x18
	}
	if m.BeginTimestamp != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.BeginTimestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.TimeTypes == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("TimeTypes")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.TimeTypes))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryShopOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShopOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShopOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CancelShopOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelShopOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelShopOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CancelReason != nil {
		i -= len(*m.CancelReason)
		copy(dAtA[i:], *m.CancelReason)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.CancelReason)))
		i--
		dAtA[i] = 0x12
	}
	if m.OrderId == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("OrderId")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SendShopOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendShopOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendShopOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExpressCode == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("ExpressCode")
	} else {
		i -= len(*m.ExpressCode)
		copy(dAtA[i:], *m.ExpressCode)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.ExpressCode)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ExpressCom == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("ExpressCom")
	} else {
		i -= len(*m.ExpressCom)
		copy(dAtA[i:], *m.ExpressCom)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.ExpressCom)))
		i--
		dAtA[i] = 0x12
	}
	if m.OrderId == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("OrderId")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShopOrderExpressCom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopOrderExpressCom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShopOrderExpressCom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != nil {
		i -= len(*m.Code)
		copy(dAtA[i:], *m.Code)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryShopOrderExpressBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShopOrderExpressBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShopOrderExpressBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Remark != nil {
		i -= len(*m.Remark)
		copy(dAtA[i:], *m.Remark)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Remark)))
		i--
		dAtA[i] = 0x12
	}
	if m.DateTime != nil {
		i -= len(*m.DateTime)
		copy(dAtA[i:], *m.DateTime)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.DateTime)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryShopOrderExpressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShopOrderExpressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShopOrderExpressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExpressName != nil {
		i -= len(*m.ExpressName)
		copy(dAtA[i:], *m.ExpressName)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.ExpressName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ExpressPhone != nil {
		i -= len(*m.ExpressPhone)
		copy(dAtA[i:], *m.ExpressPhone)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.ExpressPhone)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExpressInfos) > 0 {
		for iNdEx := len(m.ExpressInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExpressInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetExpressComDropDownResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetExpressComDropDownResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetExpressComDropDownResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DropDownExpressCom) > 0 {
		for iNdEx := len(m.DropDownExpressCom) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DropDownExpressCom[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReleaseEditShopItemObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReleaseEditShopItemObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReleaseEditShopItemObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PointCardName != nil {
		i -= len(*m.PointCardName)
		copy(dAtA[i:], *m.PointCardName)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.PointCardName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.ItemId != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.ItemId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.RealGoodCommentRate != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.RealGoodCommentRate))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.RealSellItemCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.RealSellItemCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.RealPageViews != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.RealPageViews))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.RealPaymentCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.RealPaymentCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.FakeGoodCommentRate != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.FakeGoodCommentRate))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.State != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.State))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.ItemFiles) > 0 {
		for iNdEx := len(m.ItemFiles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ItemFiles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if m.Title != nil {
		i -= len(*m.Title)
		copy(dAtA[i:], *m.Title)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Title)))
		i--
		dAtA[i] = 0x7a
	}
	if m.FakeSellItemCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.FakeSellItemCount))
		i--
		dAtA[i] = 0x70
	}
	if m.FakePageViews != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.FakePageViews))
		i--
		dAtA[i] = 0x68
	}
	if m.FakePaymentCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.FakePaymentCount))
		i--
		dAtA[i] = 0x60
	}
	if m.DetailAddress != nil {
		i -= len(*m.DetailAddress)
		copy(dAtA[i:], *m.DetailAddress)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.DetailAddress)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Address != nil {
		i -= len(*m.Address)
		copy(dAtA[i:], *m.Address)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Address)))
		i--
		dAtA[i] = 0x52
	}
	if m.Phone != nil {
		i -= len(*m.Phone)
		copy(dAtA[i:], *m.Phone)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Phone)))
		i--
		dAtA[i] = 0x4a
	}
	if m.UserName != nil {
		i -= len(*m.UserName)
		copy(dAtA[i:], *m.UserName)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.UserName)))
		i--
		dAtA[i] = 0x42
	}
	if m.StockCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.StockCount))
		i--
		dAtA[i] = 0x38
	}
	if m.Price != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Price))
		i--
		dAtA[i] = 0x30
	}
	if len(m.CommonUseLabel) > 0 {
		for iNdEx := len(m.CommonUseLabel) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CommonUseLabel[iNdEx])
			copy(dAtA[i:], m.CommonUseLabel[iNdEx])
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(m.CommonUseLabel[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.ItemCategory != nil {
		i -= len(*m.ItemCategory)
		copy(dAtA[i:], *m.ItemCategory)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.ItemCategory)))
		i--
		dAtA[i] = 0x22
	}
	if m.ItemType != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.ItemType))
		i--
		dAtA[i] = 0x18
	}
	if m.PlayerAccount != nil {
		i -= len(*m.PlayerAccount)
		copy(dAtA[i:], *m.PlayerAccount)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.PlayerAccount)))
		i--
		dAtA[i] = 0x12
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryShopReceiveAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShopReceiveAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShopReceiveAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryShopDeliverAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShopDeliverAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShopDeliverAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ShopPointCardObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopPointCardObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShopPointCardObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SellerAccount != nil {
		i -= len(*m.SellerAccount)
		copy(dAtA[i:], *m.SellerAccount)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.SellerAccount)))
		i--
		dAtA[i] = 0x22
	}
	if m.CardPassword != nil {
		i -= len(*m.CardPassword)
		copy(dAtA[i:], *m.CardPassword)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.CardPassword)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CardNo != nil {
		i -= len(*m.CardNo)
		copy(dAtA[i:], *m.CardNo)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.CardNo)))
		i--
		dAtA[i] = 0x12
	}
	if m.CardName != nil {
		i -= len(*m.CardName)
		copy(dAtA[i:], *m.CardName)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.CardName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImportShopPointCardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportShopPointCardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImportShopPointCardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PointCardList) > 0 {
		for iNdEx := len(m.PointCardList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PointCardList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ImportShopPointCardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportShopPointCardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImportShopPointCardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		for iNdEx := len(m.Msg) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Msg[iNdEx])
			copy(dAtA[i:], m.Msg[iNdEx])
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(m.Msg[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Result != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Result))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryShopPointCardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShopPointCardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShopPointCardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Keyword != nil {
		i -= len(*m.Keyword)
		copy(dAtA[i:], *m.Keyword)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Keyword)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Types == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Types")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Types))
		i--
		dAtA[i] = 0x20
	}
	if m.Status == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Status")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.PageSize == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("PageSize")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if m.CurPage == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("CurPage")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.CurPage))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResShopPointCardObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResShopPointCardObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResShopPointCardObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OrderNo != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.OrderNo))
		i--
		dAtA[i] = 0x38
	}
	if m.CardStatus != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.CardStatus))
		i--
		dAtA[i] = 0x30
	}
	if m.SellerAccount != nil {
		i -= len(*m.SellerAccount)
		copy(dAtA[i:], *m.SellerAccount)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.SellerAccount)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CardPassword != nil {
		i -= len(*m.CardPassword)
		copy(dAtA[i:], *m.CardPassword)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.CardPassword)))
		i--
		dAtA[i] = 0x22
	}
	if m.CardNo != nil {
		i -= len(*m.CardNo)
		copy(dAtA[i:], *m.CardNo)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.CardNo)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CardName != nil {
		i -= len(*m.CardName)
		copy(dAtA[i:], *m.CardName)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.CardName)))
		i--
		dAtA[i] = 0x12
	}
	if m.CardId != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.CardId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryShopPointCardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShopPointCardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShopPointCardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetShopPointCardDropDownRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetShopPointCardDropDownRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetShopPointCardDropDownRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SellerAccount == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("SellerAccount")
	} else {
		i -= len(*m.SellerAccount)
		copy(dAtA[i:], *m.SellerAccount)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.SellerAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetShopPointCardDropDownResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetShopPointCardDropDownResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetShopPointCardDropDownResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DropDownShopPointCard) > 0 {
		for iNdEx := len(m.DropDownShopPointCard) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DropDownShopPointCard[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PayStatus != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PayStatus))
		i--
		dAtA[i] = 0x60
	}
	if m.ChangeType != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.ChangeType))
		i--
		dAtA[i] = 0x58
	}
	if m.PayType != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PayType))
		i--
		dAtA[i] = 0x50
	}
	if m.SourceType != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.SourceType))
		i--
		dAtA[i] = 0x48
	}
	if m.Status != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x40
	}
	if m.Types != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Types))
		i--
		dAtA[i] = 0x38
	}
	if m.Keyword != nil {
		i -= len(*m.Keyword)
		copy(dAtA[i:], *m.Keyword)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Keyword)))
		i--
		dAtA[i] = 0x32
	}
	if m.PageSize != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageSize))
		i--
		dAtA[i] = 0x20
	}
	if m.CurPage != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.CurPage))
		i--
		dAtA[i] = 0x18
	}
	if m.EndTimestamp != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.EndTimestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.BeginTimestamp != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.BeginTimestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OptOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OptOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OptOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Note != nil {
		i -= len(*m.Note)
		copy(dAtA[i:], *m.Note)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Note)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Opt != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Opt))
		i--
		dAtA[i] = 0x10
	}
	if m.Oid != nil {
		i -= len(*m.Oid)
		copy(dAtA[i:], *m.Oid)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Oid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplaintListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplaintListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplaintListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReComplaintRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReComplaintRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReComplaintRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Content != nil {
		i -= len(*m.Content)
		copy(dAtA[i:], *m.Content)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddWaiterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWaiterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWaiterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsSlogan != nil {
		i--
		if *m.IsSlogan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.IsCity != nil {
		i--
		if *m.IsCity {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.Sex != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Sex))
		i--
		dAtA[i] = 0x40
	}
	if m.ChannelNo != nil {
		i -= len(*m.ChannelNo)
		copy(dAtA[i:], *m.ChannelNo)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.ChannelNo)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Label) > 0 {
		for iNdEx := len(m.Label) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(m.Label[iNdEx]))
			i--
			dAtA[i] = 0x30
		}
	}
	if m.Approve != nil {
		i--
		if *m.Approve {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Payword != nil {
		i -= len(*m.Payword)
		copy(dAtA[i:], *m.Payword)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Payword)))
		i--
		dAtA[i] = 0x22
	}
	if m.Password != nil {
		i -= len(*m.Password)
		copy(dAtA[i:], *m.Password)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Password)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Count != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddWaiterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWaiterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWaiterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Approve != nil {
		i--
		if *m.Approve {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Payword != nil {
		i -= len(*m.Payword)
		copy(dAtA[i:], *m.Payword)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Payword)))
		i--
		dAtA[i] = 0x22
	}
	if m.Password != nil {
		i -= len(*m.Password)
		copy(dAtA[i:], *m.Password)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Password)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Account != nil {
		i -= len(*m.Account)
		copy(dAtA[i:], *m.Account)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySystemNoticeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySystemNoticeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySystemNoticeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ExportChatRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExportChatRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExportChatRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PlayerFriendInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerFriendInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerFriendInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MaxFriendCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.MaxFriendCount))
		i--
		dAtA[i] = 0x10
	}
	if m.FriendCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.FriendCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddPlayerFriendInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPlayerFriendInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddPlayerFriendInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(m.List[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	if m.PlayerID != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateTeamInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTeamInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateTeamInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TeamName != nil {
		i -= len(*m.TeamName)
		copy(dAtA[i:], *m.TeamName)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.TeamName)))
		i--
		dAtA[i] = 0x12
	}
	if m.PlayerID != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTeamPlayerListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTeamPlayerListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTeamPlayerListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayerType != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PlayerType))
		i--
		dAtA[i] = 0x70
	}
	if m.GrabTag != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.GrabTag))
		i--
		dAtA[i] = 0x68
	}
	if m.CustomTag != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.CustomTag))
		i--
		dAtA[i] = 0x60
	}
	if m.TeamId != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.TeamId))
		i--
		dAtA[i] = 0x48
	}
	if m.Channel != nil {
		i -= len(*m.Channel)
		copy(dAtA[i:], *m.Channel)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Channel)))
		i--
		dAtA[i] = 0x42
	}
	if m.Label != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Label))
		i--
		dAtA[i] = 0x38
	}
	if m.EndTimestamp != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.EndTimestamp))
		i--
		dAtA[i] = 0x30
	}
	if m.BeginTimestamp != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.BeginTimestamp))
		i--
		dAtA[i] = 0x28
	}
	if m.Type != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.Keyword != nil {
		i -= len(*m.Keyword)
		copy(dAtA[i:], *m.Keyword)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Keyword)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PageSize != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if m.CurPage != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.CurPage))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTeamPlayerListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTeamPlayerListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTeamPlayerListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Team != nil {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OperationListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterestTypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterestTypeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterestTypeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterestTagResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterestTagResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterestTagResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterestGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterestGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterestGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CustomTagResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomTagResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomTagResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GrabTagResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrabTagResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GrabTagResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CrawlWordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrawlWordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrawlWordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PlayerCrawlWordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerCrawlWordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerCrawlWordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OperationChannelReportLine) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationChannelReportLine) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationChannelReportLine) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaxDate) > 0 {
		for iNdEx := len(m.TaxDate) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(m.TaxDate[iNdEx]))
			i--
			dAtA[i] = 0x58
		}
	}
	if len(m.WithdrawSumAmount) > 0 {
		for iNdEx := len(m.WithdrawSumAmount) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(m.WithdrawSumAmount[iNdEx]))
			i--
			dAtA[i] = 0x30
		}
	}
	if len(m.RechargeSumAmount) > 0 {
		for iNdEx := len(m.RechargeSumAmount) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(m.RechargeSumAmount[iNdEx]))
			i--
			dAtA[i] = 0x28
		}
	}
	if len(m.ShopDealSumAmount) > 0 {
		for iNdEx := len(m.ShopDealSumAmount) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(m.ShopDealSumAmount[iNdEx]))
			i--
			dAtA[i] = 0x20
		}
	}
	if len(m.ShopOrderSumCount) > 0 {
		for iNdEx := len(m.ShopOrderSumCount) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(m.ShopOrderSumCount[iNdEx]))
			i--
			dAtA[i] = 0x18
		}
	}
	if len(m.LoginCount) > 0 {
		for iNdEx := len(m.LoginCount) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(m.LoginCount[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	if len(m.RegCount) > 0 {
		for iNdEx := len(m.RegCount) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(m.RegCount[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *OperationChannelReportLineResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationChannelReportLineResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationChannelReportLineResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Line != nil {
		{
			size, err := m.Line.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArticleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArticleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x28
	}
	if m.ArticleAdd != nil {
		i -= len(*m.ArticleAdd)
		copy(dAtA[i:], *m.ArticleAdd)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.ArticleAdd)))
		i--
		dAtA[i] = 0x22
	}
	if m.Icon != nil {
		i -= len(*m.Icon)
		copy(dAtA[i:], *m.Icon)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Icon)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Title != nil {
		i -= len(*m.Title)
		copy(dAtA[i:], *m.Title)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArticleListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArticleListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ArticleList) > 0 {
		for iNdEx := len(m.ArticleList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ArticleList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ArticleListID == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("ArticleListID")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.ArticleListID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryArticleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryArticleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryArticleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTweetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTweetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTweetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisterPushResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisterPushResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisterPushResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ArticleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArticleInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsMain != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.IsMain))
		i--
		dAtA[i] = 0x20
	}
	if m.Title != nil {
		i -= len(*m.Title)
		copy(dAtA[i:], *m.Title)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ArticleType != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.ArticleType))
		i--
		dAtA[i] = 0x10
	}
	if m.ArticleId != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.ArticleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArticleInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArticleInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ArticleCommentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleCommentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArticleCommentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryArticleOrTweetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryArticleOrTweetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryArticleOrTweetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Title != nil {
		i -= len(*m.Title)
		copy(dAtA[i:], *m.Title)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Title)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(m.Ids[iNdEx]))
			i--
			dAtA[i] = 0x50
		}
	}
	if m.PageSize != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageSize))
		i--
		dAtA[i] = 0x48
	}
	if m.CurPage != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.CurPage))
		i--
		dAtA[i] = 0x40
	}
	if m.EndTimestamp != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.EndTimestamp))
		i--
		dAtA[i] = 0x38
	}
	if m.BeginTimestamp != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.BeginTimestamp))
		i--
		dAtA[i] = 0x30
	}
	if m.ArticleType != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.ArticleType))
		i--
		dAtA[i] = 0x28
	}
	if m.IsMain != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.IsMain))
		i--
		dAtA[i] = 0x20
	}
	if m.State != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.Keyword != nil {
		i -= len(*m.Keyword)
		copy(dAtA[i:], *m.Keyword)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Keyword)))
		i--
		dAtA[i] = 0x12
	}
	if m.Querytype != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Querytype))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WaiterPerformanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WaiterPerformanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WaiterPerformanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IMmessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IMmessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMmessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IMmessageNopageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IMmessageNopageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMmessageNopageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WaiterFAQResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WaiterFAQResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WaiterFAQResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WaiterFastReplyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WaiterFastReplyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WaiterFastReplyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TeamManager) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamManager) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamManager) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayerId != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PlayerId))
		i--
		dAtA[i] = 0x60
	}
	if m.LogId != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.LogId))
		i--
		dAtA[i] = 0x58
	}
	if m.SendTime != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.SendTime))
		i--
		dAtA[i] = 0x50
	}
	if m.CloseTime != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.CloseTime))
		i--
		dAtA[i] = 0x48
	}
	if len(m.NickName) > 0 {
		for iNdEx := len(m.NickName) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NickName[iNdEx])
			copy(dAtA[i:], m.NickName[iNdEx])
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(m.NickName[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.TeamId != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.TeamId))
		i--
		dAtA[i] = 0x38
	}
	if m.Day != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Day))
		i--
		dAtA[i] = 0x30
	}
	if m.Reason != nil {
		i -= len(*m.Reason)
		copy(dAtA[i:], *m.Reason)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Reason)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Minutes != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Minutes))
		i--
		dAtA[i] = 0x20
	}
	if m.Hour != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Hour))
		i--
		dAtA[i] = 0x18
	}
	if m.Flag != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Flag))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TeamIds) > 0 {
		for iNdEx := len(m.TeamIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(m.TeamIds[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *CheckScoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckScoreRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckScoreRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Key != nil {
		i -= len(*m.Key)
		copy(dAtA[i:], *m.Key)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckScoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckScoreResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckScoreResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Score != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Score))
		i--
		dAtA[i] = 0x18
	}
	if m.EvilType != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.EvilType))
		i--
		dAtA[i] = 0x10
	}
	if m.EvilFlag != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.EvilFlag))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DynamicListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynamicListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynamicListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TopicId) > 0 {
		for iNdEx := len(m.TopicId) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(m.TopicId[iNdEx]))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xa0
		}
	}
	if m.TopicType != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.TopicType))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if m.ReportCountMax != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.ReportCountMax))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if m.ReportCountMin != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.ReportCountMin))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.ListType != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.ListType))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.Check != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Check))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.Status != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x58
	}
	if m.LogId != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.LogId))
		i--
		dAtA[i] = 0x50
	}
	if m.EndTimestamp != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.EndTimestamp))
		i--
		dAtA[i] = 0x48
	}
	if m.BeginTimestamp != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.BeginTimestamp))
		i--
		dAtA[i] = 0x40
	}
	if m.IsShield != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.IsShield))
		i--
		dAtA[i] = 0x38
	}
	if m.IsBsTop != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.IsBsTop))
		i--
		dAtA[i] = 0x30
	}
	if m.IsTop != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.IsTop))
		i--
		dAtA[i] = 0x28
	}
	if m.Type != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.Keyword != nil {
		i -= len(*m.Keyword)
		copy(dAtA[i:], *m.Keyword)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Keyword)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PageSize != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if m.CurPage != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.CurPage))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DynamicListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynamicListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynamicListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DirtyWordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirtyWordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirtyWordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SignatureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignatureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CommentList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommentList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommentList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PlayerFreezeLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerFreezeLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerFreezeLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DelDynamicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelDynamicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelDynamicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Note != nil {
		i -= len(*m.Note)
		copy(dAtA[i:], *m.Note)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Note)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PlayerCancleAccountListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerCancleAccountListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerCancleAccountListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChatLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatLogRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatLogRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageSize == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("PageSize")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageSize))
		i--
		dAtA[i] = 0x40
	}
	if m.CurPage == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("CurPage")
	} else {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.CurPage))
		i--
		dAtA[i] = 0x38
	}
	if m.Keyword3 != nil {
		i -= len(*m.Keyword3)
		copy(dAtA[i:], *m.Keyword3)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Keyword3)))
		i--
		dAtA[i] = 0x32
	}
	if m.Keyword2 != nil {
		i -= len(*m.Keyword2)
		copy(dAtA[i:], *m.Keyword2)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Keyword2)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Keyword1 != nil {
		i -= len(*m.Keyword1)
		copy(dAtA[i:], *m.Keyword1)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Keyword1)))
		i--
		dAtA[i] = 0x22
	}
	if m.Types != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Types))
		i--
		dAtA[i] = 0x18
	}
	if m.EndTimestamp != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.EndTimestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.BeginTimestamp != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.BeginTimestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PersonalChatLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersonalChatLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersonalChatLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TeamChatLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamChatLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamChatLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PlayerPortraitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerPortraitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerPortraitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Total))
		i--
		dAtA[i] = 0x20
	}
	if m.WomanCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.WomanCount))
		i--
		dAtA[i] = 0x18
	}
	if m.ManCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.ManCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AdvListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdvListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IndexTipsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexTipsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexTipsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PopSuspendResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PopSuspendResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PopSuspendResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ActivityReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TopicTypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicTypeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicTypeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TopicApplyListRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicApplyListRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicApplyListRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTopicApplyRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopicApplyRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopicApplyRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Old != nil {
		{
			size, err := m.Old.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.New != nil {
		{
			size, err := m.New.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuditTopicApplyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuditTopicApplyReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuditTopicApplyReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Note) > 0 {
		for iNdEx := len(m.Note) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(m.Note[iNdEx]))
			i--
			dAtA[i] = 0x18
		}
	}
	if m.Status != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i -= len(*m.Id)
		copy(dAtA[i:], *m.Id)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplyTopicMasterRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyTopicMasterRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplyTopicMasterRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RecallReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecallReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecallReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RecallplayerLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecallplayerLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecallplayerLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CoinItemListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinItemListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinItemListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryNearSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNearSetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNearSetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CoinChangeLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinChangeLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinChangeLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CoinLogList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinLogList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinLogList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Extend != nil {
		{
			size, err := m.Extend.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.InLine == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("InLine")
	} else {
		{
			size, err := m.InLine.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CoinProductResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinProductResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinProductResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PropsItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PropsItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PropsItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PlayerBagItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerBagItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerBagItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PlayerGetPropsLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerGetPropsLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerGetPropsLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CoinProductReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinProductReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinProductReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NewsSourceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewsSourceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewsSourceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VideoSourceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoSourceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoSourceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CrawlJobResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrawlJobResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrawlJobResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SysLabelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SysLabelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SysLabelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CarouselResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CarouselResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CarouselResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GameListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CommentDelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommentDelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommentDelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ids64) > 0 {
		for iNdEx := len(m.Ids64) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(m.Ids64[iNdEx]))
			i--
			dAtA[i] = 0x18
		}
	}
	if m.Type != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommentUploadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommentUploadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommentUploadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Count))
		i--
		dAtA[i] = 0x20
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.List[iNdEx])
			copy(dAtA[i:], m.List[iNdEx])
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(m.List[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Type != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommentListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommentListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommentListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NearReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NearReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NearReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ButtonClickReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ButtonClickReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ButtonClickReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PageRegLogReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageRegLogReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PageRegLogReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VoiceWorkListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoiceWorkListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoiceWorkListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BgVoiceVideoListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BgVoiceVideoListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BgVoiceVideoListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MatchGuideListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchGuideListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MatchGuideListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SystemBgImageListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemBgImageListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemBgImageListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IntimacyConfigRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntimacyConfigRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IntimacyConfigRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SportSysNoticeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SportSysNoticeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SportSysNoticeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BetSlipListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BetSlipListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BetSlipListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BetSlipStatisticsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BetSlipStatisticsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BetSlipStatisticsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SumAmount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.SumAmount))
		i--
		dAtA[i] = 0x18
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GameGuessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameGuessRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameGuessRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MornRollGuessFlag != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.MornRollGuessFlag))
		i--
		dAtA[i] = 0x20
	}
	if m.ApiOrigin != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.ApiOrigin))
		i--
		dAtA[i] = 0x18
	}
	if m.GameId != nil {
		i -= len(*m.GameId)
		copy(dAtA[i:], *m.GameId)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.GameId)))
		i--
		dAtA[i] = 0x12
	}
	if m.LabelId != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.LabelId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameGuessResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameGuessResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameGuessResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LivePaths != nil {
		{
			size, err := m.LivePaths.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.List2) > 0 {
		for iNdEx := len(m.List2) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List2[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.List2Id != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.List2Id))
		i--
		dAtA[i] = 0x18
	}
	if len(m.List1) > 0 {
		for iNdEx := len(m.List1) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List1[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.List1Id != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.List1Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EditGameGuess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditGameGuess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EditGameGuess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Guess) > 0 {
		for iNdEx := len(m.Guess) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Guess[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EditGameGuessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditGameGuessRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EditGameGuessRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HistoryId != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.HistoryId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Guesses) > 0 {
		for iNdEx := len(m.Guesses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Guesses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Opt != nil {
		i -= len(*m.Opt)
		copy(dAtA[i:], *m.Opt)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Opt)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RpcBetSlipOperateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcBetSlipOperateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcBetSlipOperateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Opt != nil {
		i -= len(*m.Opt)
		copy(dAtA[i:], *m.Opt)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Opt)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(m.Id[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *GameTeamInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameTeamInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameTeamInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TeamB) > 0 {
		for iNdEx := len(m.TeamB) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TeamB[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TeamA) > 0 {
		for iNdEx := len(m.TeamA) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TeamA[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GameRealTimeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameRealTimeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameRealTimeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Wzry) > 0 {
		for iNdEx := len(m.Wzry) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Wzry[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Lol) > 0 {
		for iNdEx := len(m.Lol) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Lol[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LabelId != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.LabelId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GiveWhiteListRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiveWhiteListRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GiveWhiteListRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RechargeEsCfgRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RechargeEsCfgRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RechargeEsCfgRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PointsReportRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PointsReportRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PointsReportRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if len(m.EsportCoin) > 0 {
		for iNdEx := len(m.EsportCoin) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EsportCoin[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.Msg) > 0 {
		for iNdEx := len(m.Msg) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Msg[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Guess) > 0 {
		for iNdEx := len(m.Guess) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Guess[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.MatchDil) > 0 {
		for iNdEx := len(m.MatchDil) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MatchDil[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.MatchLs) > 0 {
		for iNdEx := len(m.MatchLs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MatchLs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ApplyVdoHall) > 0 {
		for iNdEx := len(m.ApplyVdoHall) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApplyVdoHall[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.VdoHall) > 0 {
		for iNdEx := len(m.VdoHall) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VdoHall[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.NewsAmuse) > 0 {
		for iNdEx := len(m.NewsAmuse) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NewsAmuse[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Label) > 0 {
		for iNdEx := len(m.Label) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Label[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Menu) > 0 {
		for iNdEx := len(m.Menu) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Menu[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Basis) > 0 {
		for iNdEx := len(m.Basis) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Basis[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EditGameRealTimeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditGameRealTimeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EditGameRealTimeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RealTimeObject) > 0 {
		for iNdEx := len(m.RealTimeObject) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RealTimeObject[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameRealTimeObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameRealTimeObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameRealTimeObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TeamBPlayers) > 0 {
		for iNdEx := len(m.TeamBPlayers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TeamBPlayers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.TeamAPlayers) > 0 {
		for iNdEx := len(m.TeamAPlayers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TeamAPlayers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.TeamBNahsorBarons != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.TeamBNahsorBarons))
		i--
		dAtA[i] = 0x50
	}
	if m.TeamBDrakes != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.TeamBDrakes))
		i--
		dAtA[i] = 0x48
	}
	if m.TeamANahsorBarons != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.TeamANahsorBarons))
		i--
		dAtA[i] = 0x40
	}
	if m.TeamADrakes != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.TeamADrakes))
		i--
		dAtA[i] = 0x38
	}
	if m.FirstTenKill != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.FirstTenKill))
		i--
		dAtA[i] = 0x30
	}
	if m.FirstBigDragon != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.FirstBigDragon))
		i--
		dAtA[i] = 0x28
	}
	if m.FirstFiveKill != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.FirstFiveKill))
		i--
		dAtA[i] = 0x20
	}
	if m.FirstSmallDragon != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.FirstSmallDragon))
		i--
		dAtA[i] = 0x18
	}
	if m.FirstTower != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.FirstTower))
		i--
		dAtA[i] = 0x10
	}
	if m.GameRound != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.GameRound))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameRealTimePlayerObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameRealTimePlayerObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameRealTimePlayerObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Photo != nil {
		i -= len(*m.Photo)
		copy(dAtA[i:], *m.Photo)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Photo)))
		i--
		dAtA[i] = 0x12
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SportCoinLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SportCoinLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SportCoinLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SportCoinLogList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SportCoinLogList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SportCoinLogList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Extend != nil {
		{
			size, err := m.Extend.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.InLine == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("InLine")
	} else {
		{
			size, err := m.InLine.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VCBuryingPointReportRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VCBuryingPointReportRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VCBuryingPointReportRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddWishAllowListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWishAllowListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWishAllowListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Remark != nil {
		i -= len(*m.Remark)
		copy(dAtA[i:], *m.Remark)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Remark)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Accounts[iNdEx])
			copy(dAtA[i:], m.Accounts[iNdEx])
			i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(m.Accounts[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WishAllowListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishAllowListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishAllowListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WishPoolActivityReportResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishPoolActivityReportResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishPoolActivityReportResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerBackstage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CountMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.Value))
		i--
		dAtA[i] = 0x10
	}
	if m.Key != nil {
		i -= len(*m.Key)
		copy(dAtA[i:], *m.Key)
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(len(*m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DayCountMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DayCountMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DayCountMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FourWeekCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.FourWeekCount))
		i--
		dAtA[i] = 0x20
	}
	if m.ThreeWeekCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.ThreeWeekCount))
		i--
		dAtA[i] = 0x18
	}
	if m.TwoWeekCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.TwoWeekCount))
		i--
		dAtA[i] = 0x10
	}
	if m.WeekCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.WeekCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CounterDataMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CounterDataMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CounterDataMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FortyWeekCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.FortyWeekCount))
		i--
		dAtA[i] = 0x20
	}
	if m.ThirtyCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.ThirtyCount))
		i--
		dAtA[i] = 0x18
	}
	if m.TwentyCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.TwentyCount))
		i--
		dAtA[i] = 0x10
	}
	if m.TenCount != nil {
		i = encodeVarintBrowerBackstage(dAtA, i, uint64(*m.TenCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBrowerBackstage(dAtA []byte, offset int, v uint64) int {
	offset -= sovBrowerBackstage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SigninRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Phone != nil {
		l = len(*m.Phone)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Types != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Types))
	}
	if m.Code != nil {
		l = len(*m.Code)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Password != nil {
		l = len(*m.Password)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.AreaCode != nil {
		l = len(*m.AreaCode)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SigninResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Url != nil {
		l = len(*m.Url)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoginResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Power != nil {
		l = m.Power.Size()
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Token != nil {
		l = len(*m.Token)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetManagerListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ManagerLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ManagerTypesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryRolePowerList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPlayerListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurPage != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.CurPage))
	}
	if m.PageSize != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageSize))
	}
	if m.Keyword != nil {
		l = len(*m.Keyword)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Type))
	}
	if m.BeginTimestamp != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.BeginTimestamp))
	}
	if m.EndTimestamp != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.EndTimestamp))
	}
	if m.Sort != nil {
		l = len(*m.Sort)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.ListType != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.ListType))
	}
	if m.IsOnline != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.IsOnline))
	}
	if m.Sex != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Sex))
	}
	if m.Role != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Role))
	}
	if len(m.Channel) > 0 {
		for _, s := range m.Channel {
			l = len(s)
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if len(m.Label) > 0 {
		for _, e := range m.Label {
			n += 1 + sovBrowerBackstage(uint64(e))
		}
	}
	if len(m.CustomTag) > 0 {
		for _, e := range m.CustomTag {
			n += 1 + sovBrowerBackstage(uint64(e))
		}
	}
	if len(m.GrabTag) > 0 {
		for _, e := range m.GrabTag {
			n += 1 + sovBrowerBackstage(uint64(e))
		}
	}
	if m.Status != nil {
		n += 2 + sovBrowerBackstage(uint64(*m.Status))
	}
	if m.RegType != nil {
		n += 2 + sovBrowerBackstage(uint64(*m.RegType))
	}
	if m.DeviceType != nil {
		n += 2 + sovBrowerBackstage(uint64(*m.DeviceType))
	}
	if m.TimeType != nil {
		n += 2 + sovBrowerBackstage(uint64(*m.TimeType))
	}
	if m.WaiterType != nil {
		n += 2 + sovBrowerBackstage(uint64(*m.WaiterType))
	}
	if m.PlayerType != nil {
		n += 2 + sovBrowerBackstage(uint64(*m.PlayerType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPlayerFriendListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurPage != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.CurPage))
	}
	if m.PageSize != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageSize))
	}
	if m.Keyword != nil {
		l = len(*m.Keyword)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.PlayerId != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PlayerId))
	}
	if m.Gender != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Gender))
	}
	if m.Label != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Label))
	}
	if m.Province != nil {
		l = len(*m.Province)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.City != nil {
		l = len(*m.City)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Region != nil {
		l = len(*m.Region)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Type))
	}
	if m.CustomTag != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.CustomTag))
	}
	if m.GrabTag != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.GrabTag))
	}
	if m.BeginTimestamp != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.BeginTimestamp))
	}
	if m.EndTimestamp != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.EndTimestamp))
	}
	if m.PlayerType != nil {
		n += 2 + sovBrowerBackstage(uint64(*m.PlayerType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPlayerListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTeamListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurPage != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.CurPage))
	}
	if m.PageSize != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageSize))
	}
	if m.Keyword != nil {
		l = len(*m.Keyword)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Type))
	}
	if m.Status != nil {
		n += 2
	}
	if m.ListType != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.ListType))
	}
	if m.State != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTeamListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MemberOptRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamId != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.TeamId))
	}
	if len(m.Account) > 0 {
		for _, s := range m.Account {
			l = len(s)
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.Types != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Types))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeamMemberRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurPage != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.CurPage))
	}
	if m.PageSize != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageSize))
	}
	if m.TeamId != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.TeamId))
	}
	if m.State != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.State))
	}
	if m.Type != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Type))
	}
	if m.Keyword != nil {
		l = len(*m.Keyword)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeamMemberResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SourceTypeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Types != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Types))
	}
	if m.Channel != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Channel))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SourceTypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddGoldResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PlayerId))
	}
	if m.Gold != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Gold))
	}
	if m.ChangeType != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.ChangeType))
	}
	if m.Extra != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Extra))
	}
	if m.SourceType != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.SourceType))
	}
	if m.Channeltype != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Channeltype))
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryGoldLogRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeginTimestamp != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.BeginTimestamp))
	}
	if m.EndTimestamp != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.EndTimestamp))
	}
	if m.CurPage != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.CurPage))
	}
	if m.PageSize != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageSize))
	}
	if m.Keyword != nil {
		l = len(*m.Keyword)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.KeyType != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.KeyType))
	}
	if len(m.SourceType) > 0 {
		for _, e := range m.SourceType {
			n += 1 + sovBrowerBackstage(uint64(e))
		}
	}
	if m.PayType != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PayType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryGoldLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GoldLogList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InLine != nil {
		l = m.InLine.Size()
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Extend != nil {
		l = m.Extend.Size()
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaymentSettingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerKeepReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerActiveReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerBehaviorReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InOutCashSumReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegisterLoginReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OperationChannelReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArticleReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SquareReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdvReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayTypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaySceneResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaymentPlatformResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlatformChannelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ListType != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.ListType))
	}
	if m.PayType != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PayType))
	}
	if m.Status != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Status))
	}
	if m.Types != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Types))
	}
	if m.Keyword != nil {
		l = len(*m.Keyword)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.CurPage != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.CurPage))
	}
	if m.PageSize != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlatformChannelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryFeaturesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Recipient != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Recipient))
	}
	if m.Status != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Status))
	}
	if m.Types != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Types))
	}
	if m.Keyword != nil {
		l = len(*m.Keyword)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.BeginTimestamp != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.BeginTimestamp))
	}
	if m.EndTimestamp != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.EndTimestamp))
	}
	if m.CurPage != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.CurPage))
	}
	if m.PageSize != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryFeaturesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerComplaintResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryShopItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryShopItemObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.ItemId))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.ItemTypeName != nil {
		l = len(*m.ItemTypeName)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Price != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Price))
	}
	if m.StockCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.StockCount))
	}
	if m.PlayerAccount != nil {
		l = len(*m.PlayerAccount)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.State != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.State))
	}
	if m.CreateTime != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryShopItemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeginTimestamp != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.BeginTimestamp))
	}
	if m.EndTimestamp != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.EndTimestamp))
	}
	if m.CurPage != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.CurPage))
	}
	if m.PageSize != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageSize))
	}
	if m.Keyword != nil {
		l = len(*m.Keyword)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Types != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Types))
	}
	if m.Status != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShopItemFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileUrl != nil {
		l = len(*m.FileUrl)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.FileType != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.FileType))
	}
	if m.FileWidth != nil {
		l = len(*m.FileWidth)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.FileHeight != nil {
		l = len(*m.FileHeight)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryShopItemDetailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.ItemId))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if len(m.ItemFiles) > 0 {
		for _, e := range m.ItemFiles {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PlayerAccount != nil {
		l = len(*m.PlayerAccount)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Price != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Price))
	}
	if m.ItemTypeName != nil {
		l = len(*m.ItemTypeName)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.CategoryLabel != nil {
		l = len(*m.CategoryLabel)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.CommonUseLabel != nil {
		l = len(*m.CommonUseLabel)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.GoodCommentRate != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.GoodCommentRate))
	}
	if m.StockCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.StockCount))
	}
	if m.PaymentCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PaymentCount))
	}
	if m.PageViews != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageViews))
	}
	if m.SellItemCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.SellItemCount))
	}
	if m.CreateTime != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.CreateTime))
	}
	if m.SoldOutTime != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.SoldOutTime))
	}
	if m.State != nil {
		n += 2 + sovBrowerBackstage(uint64(*m.State))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 2 + l + sovBrowerBackstage(uint64(l))
	}
	if m.PointCardName != nil {
		l = len(*m.PointCardName)
		n += 2 + l + sovBrowerBackstage(uint64(l))
	}
	if m.ItemType != nil {
		n += 2 + sovBrowerBackstage(uint64(*m.ItemType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShopItemType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemType != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.ItemType))
	}
	if m.TypeName != nil {
		l = len(*m.TypeName)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShopItemCategory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemCategory != nil {
		l = len(*m.ItemCategory)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.CategoryName != nil {
		l = len(*m.CategoryName)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetShopItemTypeDropDownResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DropDownItemType) > 0 {
		for _, e := range m.DropDownItemType {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if len(m.DropDownItemCategory) > 0 {
		for _, e := range m.DropDownItemCategory {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryShopCommentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.ItemId))
	}
	if m.BeginTimestamp != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.BeginTimestamp))
	}
	if m.EndTimestamp != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.EndTimestamp))
	}
	if m.CurPage != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.CurPage))
	}
	if m.PageSize != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageSize))
	}
	if m.ComType != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.ComType))
	}
	if m.Nickname != nil {
		l = len(*m.Nickname)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryShopCommentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EditShopCommentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommentId != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.CommentId))
	}
	if m.FakeLikeCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.FakeLikeCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryShopOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeTypes != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.TimeTypes))
	}
	if m.BeginTimestamp != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.BeginTimestamp))
	}
	if m.EndTimestamp != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.EndTimestamp))
	}
	if m.CurPage != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.CurPage))
	}
	if m.PageSize != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageSize))
	}
	if m.Status != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Status))
	}
	if m.Types != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Types))
	}
	if m.Keyword != nil {
		l = len(*m.Keyword)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryShopOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CancelShopOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.OrderId))
	}
	if m.CancelReason != nil {
		l = len(*m.CancelReason)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SendShopOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.OrderId))
	}
	if m.ExpressCom != nil {
		l = len(*m.ExpressCom)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.ExpressCode != nil {
		l = len(*m.ExpressCode)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShopOrderExpressCom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != nil {
		l = len(*m.Code)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryShopOrderExpressBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DateTime != nil {
		l = len(*m.DateTime)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Remark != nil {
		l = len(*m.Remark)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryShopOrderExpressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExpressInfos) > 0 {
		for _, e := range m.ExpressInfos {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.ExpressPhone != nil {
		l = len(*m.ExpressPhone)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.ExpressName != nil {
		l = len(*m.ExpressName)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetExpressComDropDownResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DropDownExpressCom) > 0 {
		for _, e := range m.DropDownExpressCom {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReleaseEditShopItemObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.PlayerAccount != nil {
		l = len(*m.PlayerAccount)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.ItemType != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.ItemType))
	}
	if m.ItemCategory != nil {
		l = len(*m.ItemCategory)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if len(m.CommonUseLabel) > 0 {
		for _, s := range m.CommonUseLabel {
			l = len(s)
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.Price != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Price))
	}
	if m.StockCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.StockCount))
	}
	if m.UserName != nil {
		l = len(*m.UserName)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Phone != nil {
		l = len(*m.Phone)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Address != nil {
		l = len(*m.Address)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.DetailAddress != nil {
		l = len(*m.DetailAddress)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.FakePaymentCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.FakePaymentCount))
	}
	if m.FakePageViews != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.FakePageViews))
	}
	if m.FakeSellItemCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.FakeSellItemCount))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if len(m.ItemFiles) > 0 {
		for _, e := range m.ItemFiles {
			l = e.Size()
			n += 2 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.State != nil {
		n += 2 + sovBrowerBackstage(uint64(*m.State))
	}
	if m.FakeGoodCommentRate != nil {
		n += 2 + sovBrowerBackstage(uint64(*m.FakeGoodCommentRate))
	}
	if m.RealPaymentCount != nil {
		n += 2 + sovBrowerBackstage(uint64(*m.RealPaymentCount))
	}
	if m.RealPageViews != nil {
		n += 2 + sovBrowerBackstage(uint64(*m.RealPageViews))
	}
	if m.RealSellItemCount != nil {
		n += 2 + sovBrowerBackstage(uint64(*m.RealSellItemCount))
	}
	if m.RealGoodCommentRate != nil {
		n += 2 + sovBrowerBackstage(uint64(*m.RealGoodCommentRate))
	}
	if m.ItemId != nil {
		n += 2 + sovBrowerBackstage(uint64(*m.ItemId))
	}
	if m.PointCardName != nil {
		l = len(*m.PointCardName)
		n += 2 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryShopReceiveAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryShopDeliverAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShopPointCardObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardName != nil {
		l = len(*m.CardName)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.CardNo != nil {
		l = len(*m.CardNo)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.CardPassword != nil {
		l = len(*m.CardPassword)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.SellerAccount != nil {
		l = len(*m.SellerAccount)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImportShopPointCardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PointCardList) > 0 {
		for _, e := range m.PointCardList {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImportShopPointCardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Result))
	}
	if len(m.Msg) > 0 {
		for _, s := range m.Msg {
			l = len(s)
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryShopPointCardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurPage != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.CurPage))
	}
	if m.PageSize != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageSize))
	}
	if m.Status != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Status))
	}
	if m.Types != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Types))
	}
	if m.Keyword != nil {
		l = len(*m.Keyword)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResShopPointCardObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardId != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.CardId))
	}
	if m.CardName != nil {
		l = len(*m.CardName)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.CardNo != nil {
		l = len(*m.CardNo)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.CardPassword != nil {
		l = len(*m.CardPassword)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.SellerAccount != nil {
		l = len(*m.SellerAccount)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.CardStatus != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.CardStatus))
	}
	if m.OrderNo != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.OrderNo))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryShopPointCardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetShopPointCardDropDownRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SellerAccount != nil {
		l = len(*m.SellerAccount)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetShopPointCardDropDownResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DropDownShopPointCard) > 0 {
		for _, e := range m.DropDownShopPointCard {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeginTimestamp != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.BeginTimestamp))
	}
	if m.EndTimestamp != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.EndTimestamp))
	}
	if m.CurPage != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.CurPage))
	}
	if m.PageSize != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageSize))
	}
	if m.Keyword != nil {
		l = len(*m.Keyword)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Types != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Types))
	}
	if m.Status != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Status))
	}
	if m.SourceType != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.SourceType))
	}
	if m.PayType != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PayType))
	}
	if m.ChangeType != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.ChangeType))
	}
	if m.PayStatus != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PayStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OptOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Oid != nil {
		l = len(*m.Oid)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Opt != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Opt))
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplaintListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReComplaintRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Id))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddWaiterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Type))
	}
	if m.Count != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Count))
	}
	if m.Password != nil {
		l = len(*m.Password)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Payword != nil {
		l = len(*m.Payword)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Approve != nil {
		n += 2
	}
	if len(m.Label) > 0 {
		for _, e := range m.Label {
			n += 1 + sovBrowerBackstage(uint64(e))
		}
	}
	if m.ChannelNo != nil {
		l = len(*m.ChannelNo)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Sex != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Sex))
	}
	if m.IsCity != nil {
		n += 2
	}
	if m.IsSlogan != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddWaiterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Password != nil {
		l = len(*m.Password)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Payword != nil {
		l = len(*m.Payword)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Approve != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QuerySystemNoticeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExportChatRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerFriendInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FriendCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.FriendCount))
	}
	if m.MaxFriendCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.MaxFriendCount))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddPlayerFriendInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PlayerID))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			n += 1 + sovBrowerBackstage(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateTeamInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PlayerID))
	}
	if m.TeamName != nil {
		l = len(*m.TeamName)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTeamPlayerListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurPage != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.CurPage))
	}
	if m.PageSize != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageSize))
	}
	if m.Keyword != nil {
		l = len(*m.Keyword)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Type))
	}
	if m.BeginTimestamp != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.BeginTimestamp))
	}
	if m.EndTimestamp != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.EndTimestamp))
	}
	if m.Label != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Label))
	}
	if m.Channel != nil {
		l = len(*m.Channel)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.TeamId != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.TeamId))
	}
	if m.CustomTag != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.CustomTag))
	}
	if m.GrabTag != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.GrabTag))
	}
	if m.PlayerType != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PlayerType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTeamPlayerListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OperationListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterestTypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterestTagResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterestGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CustomTagResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GrabTagResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CrawlWordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerCrawlWordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OperationChannelReportLine) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RegCount) > 0 {
		for _, e := range m.RegCount {
			n += 1 + sovBrowerBackstage(uint64(e))
		}
	}
	if len(m.LoginCount) > 0 {
		for _, e := range m.LoginCount {
			n += 1 + sovBrowerBackstage(uint64(e))
		}
	}
	if len(m.ShopOrderSumCount) > 0 {
		for _, e := range m.ShopOrderSumCount {
			n += 1 + sovBrowerBackstage(uint64(e))
		}
	}
	if len(m.ShopDealSumAmount) > 0 {
		for _, e := range m.ShopDealSumAmount {
			n += 1 + sovBrowerBackstage(uint64(e))
		}
	}
	if len(m.RechargeSumAmount) > 0 {
		for _, e := range m.RechargeSumAmount {
			n += 1 + sovBrowerBackstage(uint64(e))
		}
	}
	if len(m.WithdrawSumAmount) > 0 {
		for _, e := range m.WithdrawSumAmount {
			n += 1 + sovBrowerBackstage(uint64(e))
		}
	}
	if len(m.TaxDate) > 0 {
		for _, e := range m.TaxDate {
			n += 1 + sovBrowerBackstage(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OperationChannelReportLineResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Line != nil {
		l = m.Line.Size()
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArticleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.ID))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Icon != nil {
		l = len(*m.Icon)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.ArticleAdd != nil {
		l = len(*m.ArticleAdd)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArticleListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ArticleListID != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.ArticleListID))
	}
	if len(m.ArticleList) > 0 {
		for _, e := range m.ArticleList {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryArticleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryTweetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryRegisterPushResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArticleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ArticleId != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.ArticleId))
	}
	if m.ArticleType != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.ArticleType))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.IsMain != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.IsMain))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArticleInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArticleCommentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryArticleOrTweetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Querytype != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Querytype))
	}
	if m.Keyword != nil {
		l = len(*m.Keyword)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.State != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.State))
	}
	if m.IsMain != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.IsMain))
	}
	if m.ArticleType != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.ArticleType))
	}
	if m.BeginTimestamp != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.BeginTimestamp))
	}
	if m.EndTimestamp != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.EndTimestamp))
	}
	if m.CurPage != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.CurPage))
	}
	if m.PageSize != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageSize))
	}
	if len(m.Ids) > 0 {
		for _, e := range m.Ids {
			n += 1 + sovBrowerBackstage(uint64(e))
		}
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WaiterPerformanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IMmessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IMmessageNopageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WaiterFAQResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WaiterFastReplyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeamManager) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TeamIds) > 0 {
		for _, e := range m.TeamIds {
			n += 1 + sovBrowerBackstage(uint64(e))
		}
	}
	if m.Flag != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Flag))
	}
	if m.Hour != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Hour))
	}
	if m.Minutes != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Minutes))
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Day != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Day))
	}
	if m.TeamId != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.TeamId))
	}
	if len(m.NickName) > 0 {
		for _, s := range m.NickName {
			l = len(s)
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.CloseTime != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.CloseTime))
	}
	if m.SendTime != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.SendTime))
	}
	if m.LogId != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckScoreRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Type))
	}
	if m.Key != nil {
		l = len(*m.Key)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckScoreResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EvilFlag != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.EvilFlag))
	}
	if m.EvilType != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.EvilType))
	}
	if m.Score != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Score))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynamicListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurPage != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.CurPage))
	}
	if m.PageSize != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageSize))
	}
	if m.Keyword != nil {
		l = len(*m.Keyword)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Type))
	}
	if m.IsTop != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.IsTop))
	}
	if m.IsBsTop != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.IsBsTop))
	}
	if m.IsShield != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.IsShield))
	}
	if m.BeginTimestamp != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.BeginTimestamp))
	}
	if m.EndTimestamp != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.EndTimestamp))
	}
	if m.LogId != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.LogId))
	}
	if m.Status != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Status))
	}
	if m.Check != nil {
		n += 2 + sovBrowerBackstage(uint64(*m.Check))
	}
	if m.ListType != nil {
		n += 2 + sovBrowerBackstage(uint64(*m.ListType))
	}
	if m.ReportCountMin != nil {
		n += 2 + sovBrowerBackstage(uint64(*m.ReportCountMin))
	}
	if m.ReportCountMax != nil {
		n += 2 + sovBrowerBackstage(uint64(*m.ReportCountMax))
	}
	if m.TopicType != nil {
		n += 2 + sovBrowerBackstage(uint64(*m.TopicType))
	}
	if len(m.TopicId) > 0 {
		for _, e := range m.TopicId {
			n += 2 + sovBrowerBackstage(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynamicListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DirtyWordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignatureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommentList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerFreezeLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DelDynamicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerCancleAccountListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChatLogRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeginTimestamp != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.BeginTimestamp))
	}
	if m.EndTimestamp != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.EndTimestamp))
	}
	if m.Types != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Types))
	}
	if m.Keyword1 != nil {
		l = len(*m.Keyword1)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Keyword2 != nil {
		l = len(*m.Keyword2)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Keyword3 != nil {
		l = len(*m.Keyword3)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.CurPage != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.CurPage))
	}
	if m.PageSize != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PersonalChatLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeamChatLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerPortraitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.ManCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.ManCount))
	}
	if m.WomanCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.WomanCount))
	}
	if m.Total != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdvListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IndexTipsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PopSuspendResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActivityReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicTypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicApplyListRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryTopicApplyRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.New != nil {
		l = m.New.Size()
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Old != nil {
		l = m.Old.Size()
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AuditTopicApplyReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Status))
	}
	if len(m.Note) > 0 {
		for _, e := range m.Note {
			n += 1 + sovBrowerBackstage(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplyTopicMasterRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecallReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecallplayerLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CoinItemListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryNearSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CoinChangeLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CoinLogList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InLine != nil {
		l = m.InLine.Size()
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Extend != nil {
		l = m.Extend.Size()
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CoinProductResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PropsItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerBagItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerGetPropsLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CoinProductReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewsSourceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoSourceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CrawlJobResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SysLabelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CarouselResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommentDelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Id))
	}
	if m.Type != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Type))
	}
	if len(m.Ids64) > 0 {
		for _, e := range m.Ids64 {
			n += 1 + sovBrowerBackstage(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommentUploadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Id))
	}
	if m.Type != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Type))
	}
	if len(m.List) > 0 {
		for _, s := range m.List {
			l = len(s)
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.Count != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommentListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NearReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ButtonClickReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PageRegLogReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoiceWorkListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BgVoiceVideoListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MatchGuideListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SystemBgImageListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IntimacyConfigRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SportSysNoticeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BetSlipListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BetSlipStatisticsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.SumAmount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.SumAmount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameGuessRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LabelId != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.LabelId))
	}
	if m.GameId != nil {
		l = len(*m.GameId)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.ApiOrigin != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.ApiOrigin))
	}
	if m.MornRollGuessFlag != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.MornRollGuessFlag))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameGuessResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.List1Id != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.List1Id))
	}
	if len(m.List1) > 0 {
		for _, e := range m.List1 {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.List2Id != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.List2Id))
	}
	if len(m.List2) > 0 {
		for _, e := range m.List2 {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.LivePaths != nil {
		l = m.LivePaths.Size()
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EditGameGuess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Id))
	}
	if len(m.Guess) > 0 {
		for _, e := range m.Guess {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EditGameGuessRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Id))
	}
	if m.Opt != nil {
		l = len(*m.Opt)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if len(m.Guesses) > 0 {
		for _, e := range m.Guesses {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.HistoryId != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.HistoryId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RpcBetSlipOperateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, e := range m.Id {
			n += 1 + sovBrowerBackstage(uint64(e))
		}
	}
	if m.Opt != nil {
		l = len(*m.Opt)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameTeamInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TeamA) > 0 {
		for _, e := range m.TeamA {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if len(m.TeamB) > 0 {
		for _, e := range m.TeamB {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameRealTimeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Id))
	}
	if m.LabelId != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.LabelId))
	}
	if len(m.Lol) > 0 {
		for _, e := range m.Lol {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if len(m.Wzry) > 0 {
		for _, e := range m.Wzry {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GiveWhiteListRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RechargeEsCfgRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PointsReportRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Basis) > 0 {
		for _, e := range m.Basis {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if len(m.Menu) > 0 {
		for _, e := range m.Menu {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if len(m.Label) > 0 {
		for _, e := range m.Label {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if len(m.NewsAmuse) > 0 {
		for _, e := range m.NewsAmuse {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if len(m.VdoHall) > 0 {
		for _, e := range m.VdoHall {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if len(m.ApplyVdoHall) > 0 {
		for _, e := range m.ApplyVdoHall {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if len(m.MatchLs) > 0 {
		for _, e := range m.MatchLs {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if len(m.MatchDil) > 0 {
		for _, e := range m.MatchDil {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if len(m.Guess) > 0 {
		for _, e := range m.Guess {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if len(m.Msg) > 0 {
		for _, e := range m.Msg {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if len(m.EsportCoin) > 0 {
		for _, e := range m.EsportCoin {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 2 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EditGameRealTimeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Id))
	}
	if len(m.RealTimeObject) > 0 {
		for _, e := range m.RealTimeObject {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameRealTimeObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameRound != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.GameRound))
	}
	if m.FirstTower != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.FirstTower))
	}
	if m.FirstSmallDragon != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.FirstSmallDragon))
	}
	if m.FirstFiveKill != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.FirstFiveKill))
	}
	if m.FirstBigDragon != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.FirstBigDragon))
	}
	if m.FirstTenKill != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.FirstTenKill))
	}
	if m.TeamADrakes != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.TeamADrakes))
	}
	if m.TeamANahsorBarons != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.TeamANahsorBarons))
	}
	if m.TeamBDrakes != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.TeamBDrakes))
	}
	if m.TeamBNahsorBarons != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.TeamBNahsorBarons))
	}
	if len(m.TeamAPlayers) > 0 {
		for _, e := range m.TeamAPlayers {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if len(m.TeamBPlayers) > 0 {
		for _, e := range m.TeamBPlayers {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameRealTimePlayerObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Photo != nil {
		l = len(*m.Photo)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SportCoinLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SportCoinLogList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InLine != nil {
		l = m.InLine.Size()
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Extend != nil {
		l = m.Extend.Size()
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VCBuryingPointReportRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddWishAllowListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, s := range m.Accounts {
			l = len(s)
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.Remark != nil {
		l = len(*m.Remark)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishAllowListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishPoolActivityReportResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerBackstage(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CountMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(*m.Key)
		n += 1 + l + sovBrowerBackstage(uint64(l))
	}
	if m.Value != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DayCountMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WeekCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.WeekCount))
	}
	if m.TwoWeekCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.TwoWeekCount))
	}
	if m.ThreeWeekCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.ThreeWeekCount))
	}
	if m.FourWeekCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.FourWeekCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CounterDataMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TenCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.TenCount))
	}
	if m.TwentyCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.TwentyCount))
	}
	if m.ThirtyCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.ThirtyCount))
	}
	if m.FortyWeekCount != nil {
		n += 1 + sovBrowerBackstage(uint64(*m.FortyWeekCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBrowerBackstage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBrowerBackstage(x uint64) (n int) {
	return sovBrowerBackstage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SigninRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigninRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigninRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Phone = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Code = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Password = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AreaCode = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Phone")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SigninResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigninResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigninResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Url = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &share_message.Manager{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Power == nil {
				m.Power = &share_message.RolePower{}
			}
			if err := m.Power.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Token = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetManagerListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetManagerListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetManagerListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.Manager{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManagerLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManagerLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManagerLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.BackstageOptLog{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManagerTypesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManagerTypesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManagerTypesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.ManagerTypes{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRolePowerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRolePowerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRolePowerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.RolePower{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPage", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurPage = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Keyword = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeginTimestamp = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTimestamp = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Sort = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ListType = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnline", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOnline = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sex = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Role = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = append(m.Channel, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Label = append(m.Label, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Label) == 0 {
					m.Label = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerBackstage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Label = append(m.Label, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
		case 14:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CustomTag = append(m.CustomTag, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CustomTag) == 0 {
					m.CustomTag = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerBackstage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CustomTag = append(m.CustomTag, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomTag", wireType)
			}
		case 15:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GrabTag = append(m.GrabTag, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.GrabTag) == 0 {
					m.GrabTag = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerBackstage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GrabTag = append(m.GrabTag, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GrabTag", wireType)
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegType = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeviceType = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeType = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaiterType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WaiterType = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerFriendListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerFriendListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerFriendListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPage", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurPage = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Keyword = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Gender = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Label = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Province", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Province = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.City = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Region = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomTag", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CustomTag = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrabTag", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GrabTag = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeginTimestamp = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTimestamp = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.PlayerBase{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTeamListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTeamListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTeamListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPage", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurPage = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Keyword = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Status = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ListType = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTeamListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTeamListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTeamListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.TeamData{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberOptRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberOptRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberOptRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TeamId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamMemberRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamMemberRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamMemberRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPage", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurPage = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TeamId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Keyword = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamMemberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamMemberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamMemberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.PersonalTeamData{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SourceTypeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SourceTypeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SourceTypeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Channel = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SourceTypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SourceTypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SourceTypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.SourceType{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddGoldResult) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddGoldResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddGoldResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Gold = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangeType = &v
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Extra = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SourceType = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channeltype", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Channeltype = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PlayerId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Gold")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ChangeType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGoldLogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGoldLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGoldLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeginTimestamp = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTimestamp = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPage", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurPage = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Keyword = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyType = &v
		case 8:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SourceType = append(m.SourceType, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SourceType) == 0 {
					m.SourceType = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerBackstage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SourceType = append(m.SourceType, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGoldLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGoldLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGoldLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &GoldLogList{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoldLogList) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoldLogList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoldLogList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InLine", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InLine == nil {
				m.InLine = &share_message.GoldChangeLog{}
			}
			if err := m.InLine.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Extend == nil {
				m.Extend = &share_message.RechargeExtend{}
			}
			if err := m.Extend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("InLine")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentSettingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentSettingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentSettingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.PaymentSetting{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerKeepReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerKeepReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerKeepReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.PlayerKeepReport{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerActiveReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerActiveReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerActiveReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.PlayerActiveReport{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerBehaviorReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerBehaviorReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerBehaviorReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.PlayerBehaviorReport{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InOutCashSumReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InOutCashSumReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InOutCashSumReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.InOutCashSumReport{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterLoginReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterLoginReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterLoginReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.RegisterLoginReport{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationChannelReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationChannelReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationChannelReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.OperationChannelReport{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.ChannelReport{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.ArticleReport{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SquareReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SquareReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SquareReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.SquareReport{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.AdvReport{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayTypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayTypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayTypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.PayType{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaySceneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaySceneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaySceneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.PayScene{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentPlatformResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentPlatformResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentPlatformResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.PaymentPlatform{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlatformChannelRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlatformChannelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlatformChannelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ListType = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayType = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Keyword = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPage", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurPage = &v
			hasFields[0] |= uint64(0x00000001)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CurPage")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PageSize")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlatformChannelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlatformChannelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlatformChannelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.PlatformChannel{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeaturesRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeaturesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeaturesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Recipient = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Keyword = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeginTimestamp = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTimestamp = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPage", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurPage = &v
			hasFields[0] |= uint64(0x00000001)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CurPage")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PageSize")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeaturesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeaturesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeaturesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.AppPushMessage{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerComplaintResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerComplaintResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerComplaintResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.PlayerComplaint{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShopItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShopItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShopItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &QueryShopItemObject{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShopItemObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShopItemObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShopItemObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ItemId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemTypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ItemTypeName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StockCount = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PlayerAccount = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShopItemRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShopItemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShopItemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeginTimestamp = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTimestamp = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPage", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurPage = &v
			hasFields[0] |= uint64(0x00000001)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
			hasFields[0] |= uint64(0x00000002)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Keyword = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
			hasFields[0] |= uint64(0x00000004)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CurPage")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PageSize")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Types")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Status")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShopItemFile) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopItemFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopItemFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FileUrl = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FileType = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileWidth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FileWidth = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileHeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FileHeight = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("file_url")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("file_type")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShopItemDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShopItemDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShopItemDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ItemId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemFiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemFiles = append(m.ItemFiles, &ShopItemFile{})
			if err := m.ItemFiles[len(m.ItemFiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PlayerAccount = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemTypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ItemTypeName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CategoryLabel = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonUseLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CommonUseLabel = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodCommentRate", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GoodCommentRate = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StockCount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentCount = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageViews", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageViews = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellItemCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SellItemCount = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoldOutTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SoldOutTime = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = &v
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PointCardName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PointCardName = &s
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ItemType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShopItemType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopItemType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopItemType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ItemType = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TypeName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShopItemCategory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopItemCategory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopItemCategory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemCategory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ItemCategory = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CategoryName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetShopItemTypeDropDownResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetShopItemTypeDropDownResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetShopItemTypeDropDownResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropDownItemType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DropDownItemType = append(m.DropDownItemType, &KeyValueTag{})
			if err := m.DropDownItemType[len(m.DropDownItemType)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropDownItemCategory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DropDownItemCategory = append(m.DropDownItemCategory, &KeyValue{})
			if err := m.DropDownItemCategory[len(m.DropDownItemCategory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShopCommentRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShopCommentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShopCommentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ItemId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeginTimestamp = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTimestamp = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPage", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurPage = &v
			hasFields[0] |= uint64(0x00000002)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
			hasFields[0] |= uint64(0x00000004)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ComType = &v
			hasFields[0] |= uint64(0x00000008)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Nickname = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ItemId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CurPage")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PageSize")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ComType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShopCommentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShopCommentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShopCommentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.TableItemComment{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditShopCommentRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditShopCommentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditShopCommentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommentId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FakeLikeCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FakeLikeCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CommentId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShopOrderRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShopOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShopOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeTypes", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeTypes = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeginTimestamp = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTimestamp = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPage", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurPage = &v
			hasFields[0] |= uint64(0x00000002)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
			hasFields[0] |= uint64(0x00000004)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
			hasFields[0] |= uint64(0x00000008)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
			hasFields[0] |= uint64(0x00000010)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Keyword = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TimeTypes")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CurPage")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PageSize")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Status")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Types")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShopOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShopOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShopOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.TableShopOrder{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelShopOrderRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelShopOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelShopOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CancelReason = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("OrderId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendShopOrderRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendShopOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendShopOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpressCom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ExpressCom = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpressCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ExpressCode = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("OrderId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ExpressCom")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ExpressCode")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShopOrderExpressCom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopOrderExpressCom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopOrderExpressCom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Code = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShopOrderExpressBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShopOrderExpressBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShopOrderExpressBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DateTime = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Remark = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShopOrderExpressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShopOrderExpressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShopOrderExpressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpressInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpressInfos = append(m.ExpressInfos, &QueryShopOrderExpressBody{})
			if err := m.ExpressInfos[len(m.ExpressInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpressPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ExpressPhone = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpressName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ExpressName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetExpressComDropDownResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetExpressComDropDownResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetExpressComDropDownResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropDownExpressCom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DropDownExpressCom = append(m.DropDownExpressCom, &ShopOrderExpressCom{})
			if err := m.DropDownExpressCom[len(m.DropDownExpressCom)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReleaseEditShopItemObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReleaseEditShopItemObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReleaseEditShopItemObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PlayerAccount = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ItemType = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemCategory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ItemCategory = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonUseLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommonUseLabel = append(m.CommonUseLabel, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StockCount = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UserName = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Phone = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Address = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DetailAddress = &s
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FakePaymentCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FakePaymentCount = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FakePageViews", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FakePageViews = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FakeSellItemCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FakeSellItemCount = &v
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemFiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemFiles = append(m.ItemFiles, &ShopItemFile{})
			if err := m.ItemFiles[len(m.ItemFiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FakeGoodCommentRate", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FakeGoodCommentRate = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealPaymentCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RealPaymentCount = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealPageViews", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RealPageViews = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealSellItemCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RealSellItemCount = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealGoodCommentRate", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RealGoodCommentRate = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ItemId = &v
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PointCardName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PointCardName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShopReceiveAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShopReceiveAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShopReceiveAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.TableReceiveAddress{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShopDeliverAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShopDeliverAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShopDeliverAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.TableDeliverAddress{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShopPointCardObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopPointCardObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopPointCardObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CardName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CardNo = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CardPassword = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SellerAccount = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportShopPointCardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportShopPointCardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportShopPointCardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PointCardList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PointCardList = append(m.PointCardList, &ShopPointCardObject{})
			if err := m.PointCardList[len(m.PointCardList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportShopPointCardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportShopPointCardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportShopPointCardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShopPointCardRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShopPointCardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShopPointCardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPage", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurPage = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Keyword = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CurPage")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PageSize")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Status")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Types")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResShopPointCardObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResShopPointCardObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResShopPointCardObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CardId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CardName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CardNo = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CardPassword = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SellerAccount = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardStatus", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CardStatus = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderNo", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderNo = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShopPointCardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShopPointCardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShopPointCardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ResShopPointCardObject{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetShopPointCardDropDownRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetShopPointCardDropDownRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetShopPointCardDropDownRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SellerAccount = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SellerAccount")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetShopPointCardDropDownResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetShopPointCardDropDownResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetShopPointCardDropDownResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropDownShopPointCard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DropDownShopPointCard = append(m.DropDownShopPointCard, &KeyValue{})
			if err := m.DropDownShopPointCard[len(m.DropDownShopPointCard)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeginTimestamp = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTimestamp = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPage", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurPage = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Keyword = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SourceType = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayType = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangeType = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayStatus", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayStatus = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.Order{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OptOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OptOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OptOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Oid = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opt", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Opt = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplaintListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplaintListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplaintListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.PlayerComplaint{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReComplaintRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReComplaintRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReComplaintRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddWaiterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWaiterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWaiterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Password = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Payword = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approve", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Approve = &b
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Label = append(m.Label, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Label) == 0 {
					m.Label = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerBackstage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Label = append(m.Label, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ChannelNo = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sex = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCity", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsCity = &b
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSlogan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsSlogan = &b
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddWaiterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWaiterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWaiterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Password = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Payword = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approve", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Approve = &b
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySystemNoticeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySystemNoticeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySystemNoticeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.SystemNotice{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExportChatRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportChatRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportChatRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.TeamChatLog{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerFriendInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerFriendInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerFriendInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FriendCount = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFriendCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxFriendCount = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &share_message.PlayerBase{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPlayerFriendInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPlayerFriendInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPlayerFriendInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerID = &v
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.List = append(m.List, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.List) == 0 {
					m.List = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerBackstage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.List = append(m.List, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTeamInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTeamInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTeamInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerID = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTeamPlayerListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTeamPlayerListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTeamPlayerListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPage", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurPage = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Keyword = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeginTimestamp = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTimestamp = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Label = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Channel = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TeamId = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomTag", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CustomTag = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrabTag", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GrabTag = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTeamPlayerListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTeamPlayerListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTeamPlayerListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.PlayerBase{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &share_message.TeamData{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.OperationChannel{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterestTypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterestTypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterestTypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.InterestType{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterestTagResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterestTagResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterestTagResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.InterestTag{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterestGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterestGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterestGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.InterestGroup{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomTagResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomTagResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomTagResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.CustomTag{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrabTagResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrabTagResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrabTagResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.GrabTag{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrawlWordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrawlWordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrawlWordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.CrawlWords{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerCrawlWordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerCrawlWordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerCrawlWordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.PlayerCrawlWords{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationChannelReportLine) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationChannelReportLine: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationChannelReportLine: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RegCount = append(m.RegCount, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RegCount) == 0 {
					m.RegCount = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerBackstage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RegCount = append(m.RegCount, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RegCount", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LoginCount = append(m.LoginCount, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LoginCount) == 0 {
					m.LoginCount = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerBackstage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LoginCount = append(m.LoginCount, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginCount", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ShopOrderSumCount = append(m.ShopOrderSumCount, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ShopOrderSumCount) == 0 {
					m.ShopOrderSumCount = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerBackstage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ShopOrderSumCount = append(m.ShopOrderSumCount, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopOrderSumCount", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ShopDealSumAmount = append(m.ShopDealSumAmount, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ShopDealSumAmount) == 0 {
					m.ShopDealSumAmount = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerBackstage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ShopDealSumAmount = append(m.ShopDealSumAmount, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopDealSumAmount", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RechargeSumAmount = append(m.RechargeSumAmount, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RechargeSumAmount) == 0 {
					m.RechargeSumAmount = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerBackstage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RechargeSumAmount = append(m.RechargeSumAmount, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargeSumAmount", wireType)
			}
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WithdrawSumAmount = append(m.WithdrawSumAmount, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WithdrawSumAmount) == 0 {
					m.WithdrawSumAmount = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerBackstage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WithdrawSumAmount = append(m.WithdrawSumAmount, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawSumAmount", wireType)
			}
		case 11:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TaxDate = append(m.TaxDate, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TaxDate) == 0 {
					m.TaxDate = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerBackstage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TaxDate = append(m.TaxDate, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxDate", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationChannelReportLineResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationChannelReportLineResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationChannelReportLineResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Line", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Line == nil {
				m.Line = &OperationChannelReportLine{}
			}
			if err := m.Line.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ID = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Icon = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleAdd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ArticleAdd = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleListResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleListID", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ArticleListID = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArticleList = append(m.ArticleList, &ArticleResponse{})
			if err := m.ArticleList[len(m.ArticleList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ArticleListID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryArticleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryArticleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryArticleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.Article{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTweetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTweetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTweetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.Tweets{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisterPushResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisterPushResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisterPushResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.RegisterPush{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ArticleId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ArticleType = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMain", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMain = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ArticleInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleCommentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleCommentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleCommentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.ArticleComment{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryArticleOrTweetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryArticleOrTweetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryArticleOrTweetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Querytype", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Querytype = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Keyword = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMain", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMain = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ArticleType = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeginTimestamp = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTimestamp = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPage", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurPage = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		case 10:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerBackstage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WaiterPerformanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WaiterPerformanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WaiterPerformanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.WaiterPerformance{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IMmessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IMmessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IMmessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.IMmessage{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IMmessageNopageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IMmessageNopageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IMmessageNopageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.IMmessage{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WaiterFAQResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WaiterFAQResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WaiterFAQResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.WaiterFAQ{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WaiterFastReplyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WaiterFastReplyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WaiterFastReplyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.WaiterFastReply{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamManager) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamManager: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamManager: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TeamIds = append(m.TeamIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TeamIds) == 0 {
					m.TeamIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerBackstage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TeamIds = append(m.TeamIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Flag = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hour", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hour = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minutes", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Minutes = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Day = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TeamId = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = append(m.NickName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CloseTime = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckScoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckScoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckScoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckScoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckScoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckScoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvilFlag", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EvilFlag = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvilType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EvilType = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Score = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynamicListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynamicListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynamicListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPage", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurPage = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Keyword = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTop", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTop = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBsTop", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBsTop = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShield", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsShield = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeginTimestamp = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTimestamp = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Check", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Check = &v
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ListType = &v
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportCountMin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReportCountMin = &v
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportCountMax", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReportCountMax = &v
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicType", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicType = &v
		case 36:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TopicId = append(m.TopicId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TopicId) == 0 {
					m.TopicId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerBackstage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TopicId = append(m.TopicId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynamicListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynamicListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynamicListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.DynamicData{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirtyWordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirtyWordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirtyWordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.DirtyWords{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignatureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignatureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignatureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.Signature{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommentList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommentList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommentList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.CommentData{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerFreezeLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerFreezeLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerFreezeLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.PlayerFreezeLog{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelDynamicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelDynamicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelDynamicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &QueryDataById{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerCancleAccountListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerCancleAccountListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerCancleAccountListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.PlayerCancleAccount{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatLogRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeginTimestamp = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTimestamp = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Keyword1 = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Keyword2 = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Keyword3 = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPage", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurPage = &v
			hasFields[0] |= uint64(0x00000001)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CurPage")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PageSize")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersonalChatLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersonalChatLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersonalChatLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.PersonalChatLog{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamChatLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamChatLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamChatLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.TeamChatLog{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerPortraitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerPortraitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerPortraitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &NameValueTag{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ManCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WomanCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WomanCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Total = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.AdvSetting{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexTipsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexTipsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexTipsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.IndexTips{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PopSuspendResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PopSuspendResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PopSuspendResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.PopSuspend{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.ActivityReport{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicTypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicTypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicTypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.TopicType{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.Topic{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicApplyListRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicApplyListRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicApplyListRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.ApplyEditTopicInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopicApplyRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopicApplyRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopicApplyRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field New", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.New == nil {
				m.New = &share_message.ApplyEditTopicInfo{}
			}
			if err := m.New.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Old", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Old == nil {
				m.Old = &share_message.Topic{}
			}
			if err := m.Old.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuditTopicApplyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuditTopicApplyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuditTopicApplyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Note = append(m.Note, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Note) == 0 {
					m.Note = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerBackstage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Note = append(m.Note, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyTopicMasterRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyTopicMasterRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyTopicMasterRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.ApplyTopicMaster{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecallReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecallReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecallReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.RecallReport{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecallplayerLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecallplayerLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecallplayerLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.RecallPlayerLog{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinItemListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinItemListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinItemListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.CoinRecharge{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNearSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNearSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNearSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.NearSet{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinChangeLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinChangeLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinChangeLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &CoinLogList{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinLogList) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinLogList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinLogList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InLine", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InLine == nil {
				m.InLine = &share_message.CoinChangeLog{}
			}
			if err := m.InLine.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Extend == nil {
				m.Extend = &share_message.GoldExtendLog{}
			}
			if err := m.Extend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("InLine")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinProductResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinProductResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinProductResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.CoinProduct{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PropsItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PropsItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PropsItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.PropsItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerBagItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerBagItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerBagItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.PlayerBagItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerGetPropsLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerGetPropsLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerGetPropsLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.PlayerGetPropsLog{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinProductReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinProductReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinProductReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.CoinProductReport{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewsSourceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewsSourceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewsSourceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.TableESPortsRealTimeInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoSourceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoSourceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoSourceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.TableESPortsVideoInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrawlJobResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrawlJobResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrawlJobResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.TableCrawlJob{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SysLabelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SysLabelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SysLabelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.TableESPortsLabel{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CarouselResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CarouselResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CarouselResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.TableESPortsCarousel{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.TableESPortsGame{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommentDelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommentDelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommentDelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids64 = append(m.Ids64, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids64) == 0 {
					m.Ids64 = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerBackstage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids64 = append(m.Ids64, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids64", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommentUploadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommentUploadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommentUploadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommentListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommentListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommentListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.TableESportComment{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NearReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NearReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NearReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.NearReport{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ButtonClickReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ButtonClickReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ButtonClickReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.ButtonClickReport{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageRegLogReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageRegLogReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageRegLogReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.PageRegLogReport{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoiceWorkListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoiceWorkListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoiceWorkListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.PlayerMixVoiceVideo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BgVoiceVideoListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BgVoiceVideoListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BgVoiceVideoListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.BgVoiceVideo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchGuideListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchGuideListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchGuideListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.CommStrId{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemBgImageListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemBgImageListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemBgImageListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.SystemBgImage{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IntimacyConfigRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntimacyConfigRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntimacyConfigRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.IntimacyConfig{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SportSysNoticeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SportSysNoticeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SportSysNoticeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.TableESPortsSysMsg{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BetSlipListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BetSlipListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BetSlipListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.TableESPortsGuessBetRecord{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BetSlipStatisticsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BetSlipStatisticsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BetSlipStatisticsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.BetSlipReport{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumAmount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumAmount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameGuessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameGuessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameGuessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LabelId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GameId = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiOrigin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ApiOrigin = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MornRollGuessFlag", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MornRollGuessFlag = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameGuessResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameGuessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameGuessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field List1Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.List1Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List1 = append(m.List1, &share_message.GameGuessOddsNumObject{})
			if err := m.List1[len(m.List1)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field List2Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.List2Id = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List2 = append(m.List2, &share_message.GameGuessOddsNumObject{})
			if err := m.List2[len(m.List2)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LivePaths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LivePaths == nil {
				m.LivePaths = &share_message.ESPortsGameLivePathObj{}
			}
			if err := m.LivePaths.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditGameGuess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditGameGuess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditGameGuess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Guess = append(m.Guess, &NameValueTag{})
			if err := m.Guess[len(m.Guess)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditGameGuessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditGameGuessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditGameGuessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Opt = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guesses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Guesses = append(m.Guesses, &EditGameGuess{})
			if err := m.Guesses[len(m.Guesses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HistoryId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcBetSlipOperateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RpcBetSlipOperateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RpcBetSlipOperateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerBackstage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerBackstage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerBackstage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Opt = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameTeamInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameTeamInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameTeamInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamA", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamA = append(m.TeamA, &share_message.APIPlayerDetail{})
			if err := m.TeamA[len(m.TeamA)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamB = append(m.TeamB, &share_message.APIPlayerDetail{})
			if err := m.TeamB[len(m.TeamB)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameRealTimeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameRealTimeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameRealTimeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LabelId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lol = append(m.Lol, &share_message.TableESPortsLOLRealTimeData{})
			if err := m.Lol[len(m.Lol)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wzry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wzry = append(m.Wzry, &share_message.TableESPortsWZRYRealTimeData{})
			if err := m.Wzry[len(m.Wzry)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GiveWhiteListRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiveWhiteListRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiveWhiteListRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.TableESportsGiveWhiteList{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RechargeEsCfgRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RechargeEsCfgRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RechargeEsCfgRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.TableESportsExchangeCfg{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PointsReportRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PointsReportRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PointsReportRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Basis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Basis = append(m.Basis, &share_message.BasisPointsReport{})
			if err := m.Basis[len(m.Basis)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Menu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Menu = append(m.Menu, &share_message.MenuPointsReport{})
			if err := m.Menu[len(m.Menu)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = append(m.Label, &share_message.LabelPointsReport{})
			if err := m.Label[len(m.Label)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewsAmuse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewsAmuse = append(m.NewsAmuse, &share_message.NewsAmusePointsReport{})
			if err := m.NewsAmuse[len(m.NewsAmuse)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VdoHall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VdoHall = append(m.VdoHall, &share_message.VdoHallPointsReport{})
			if err := m.VdoHall[len(m.VdoHall)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyVdoHall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplyVdoHall = append(m.ApplyVdoHall, &share_message.ApplyVdoHallPointsReport{})
			if err := m.ApplyVdoHall[len(m.ApplyVdoHall)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchLs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchLs = append(m.MatchLs, &share_message.MatchLsPointsReport{})
			if err := m.MatchLs[len(m.MatchLs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchDil", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchDil = append(m.MatchDil, &share_message.MatchDilPointsReport{})
			if err := m.MatchDil[len(m.MatchDil)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Guess = append(m.Guess, &share_message.GuessPointsReport{})
			if err := m.Guess[len(m.Guess)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg, &share_message.MsgPointsReport{})
			if err := m.Msg[len(m.Msg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EsportCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EsportCoin = append(m.EsportCoin, &share_message.EsportCoinPointsReport{})
			if err := m.EsportCoin[len(m.EsportCoin)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditGameRealTimeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditGameRealTimeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditGameRealTimeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealTimeObject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RealTimeObject = append(m.RealTimeObject, &GameRealTimeObject{})
			if err := m.RealTimeObject[len(m.RealTimeObject)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameRealTimeObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameRealTimeObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameRealTimeObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameRound", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GameRound = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstTower", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstTower = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstSmallDragon", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstSmallDragon = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstFiveKill", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstFiveKill = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstBigDragon", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstBigDragon = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstTenKill", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstTenKill = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamADrakes", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TeamADrakes = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamANahsorBarons", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TeamANahsorBarons = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamBDrakes", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TeamBDrakes = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamBNahsorBarons", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TeamBNahsorBarons = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamAPlayers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamAPlayers = append(m.TeamAPlayers, &GameRealTimePlayerObject{})
			if err := m.TeamAPlayers[len(m.TeamAPlayers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamBPlayers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamBPlayers = append(m.TeamBPlayers, &GameRealTimePlayerObject{})
			if err := m.TeamBPlayers[len(m.TeamBPlayers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameRealTimePlayerObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameRealTimePlayerObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameRealTimePlayerObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Photo = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SportCoinLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SportCoinLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SportCoinLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &SportCoinLogList{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SportCoinLogList) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SportCoinLogList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SportCoinLogList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InLine", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InLine == nil {
				m.InLine = &share_message.ESportCoinChangeLog{}
			}
			if err := m.InLine.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Extend == nil {
				m.Extend = &share_message.GoldExtendLog{}
			}
			if err := m.Extend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("InLine")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VCBuryingPointReportRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VCBuryingPointReportRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VCBuryingPointReportRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.VCBuryingPointReport{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddWishAllowListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWishAllowListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWishAllowListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Remark = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishAllowListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishAllowListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishAllowListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.WishWhite{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishPoolActivityReportResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishPoolActivityReportResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishPoolActivityReportResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.WishActivityReport{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DayCountMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DayCountMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DayCountMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WeekCount = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwoWeekCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TwoWeekCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreeWeekCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThreeWeekCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FourWeekCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FourWeekCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CounterDataMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CounterDataMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CounterDataMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TenCount = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwentyCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TwentyCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThirtyCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThirtyCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FortyWeekCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FortyWeekCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerBackstage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerBackstage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBrowerBackstage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBrowerBackstage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBrowerBackstage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBrowerBackstage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBrowerBackstage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBrowerBackstage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBrowerBackstage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBrowerBackstage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBrowerBackstage = fmt.Errorf("proto: unexpected end of group")
)
