// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: brower_wish.proto

package brower_backstage

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	share_message "game_server/proto/share_message"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//==tool======================================>
type ToolWishBoxItemListRes struct {
	List                 []*share_message.WishBoxItem `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ToolWishBoxItemListRes) Reset()         { *m = ToolWishBoxItemListRes{} }
func (m *ToolWishBoxItemListRes) String() string { return proto.CompactTextString(m) }
func (*ToolWishBoxItemListRes) ProtoMessage()    {}
func (*ToolWishBoxItemListRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{0}
}
func (m *ToolWishBoxItemListRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ToolWishBoxItemListRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ToolWishBoxItemListRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ToolWishBoxItemListRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToolWishBoxItemListRes.Merge(m, src)
}
func (m *ToolWishBoxItemListRes) XXX_Size() int {
	return m.Size()
}
func (m *ToolWishBoxItemListRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ToolWishBoxItemListRes.DiscardUnknown(m)
}

var xxx_messageInfo_ToolWishBoxItemListRes proto.InternalMessageInfo

func (m *ToolWishBoxItemListRes) GetList() []*share_message.WishBoxItem {
	if m != nil {
		return m.List
	}
	return nil
}

type ToolSaveWishBoxItemReq struct {
	List                 []*share_message.WishBoxItem `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ToolSaveWishBoxItemReq) Reset()         { *m = ToolSaveWishBoxItemReq{} }
func (m *ToolSaveWishBoxItemReq) String() string { return proto.CompactTextString(m) }
func (*ToolSaveWishBoxItemReq) ProtoMessage()    {}
func (*ToolSaveWishBoxItemReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{1}
}
func (m *ToolSaveWishBoxItemReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ToolSaveWishBoxItemReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ToolSaveWishBoxItemReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ToolSaveWishBoxItemReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToolSaveWishBoxItemReq.Merge(m, src)
}
func (m *ToolSaveWishBoxItemReq) XXX_Size() int {
	return m.Size()
}
func (m *ToolSaveWishBoxItemReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ToolSaveWishBoxItemReq.DiscardUnknown(m)
}

var xxx_messageInfo_ToolSaveWishBoxItemReq proto.InternalMessageInfo

func (m *ToolSaveWishBoxItemReq) GetList() []*share_message.WishBoxItem {
	if m != nil {
		return m.List
	}
	return nil
}

type ToolOutputDataRes struct {
	DareDiamond          *int64   `protobuf:"varint,1,opt,name=DareDiamond" json:"DareDiamond,omitempty"`
	WishItemDiamond      *int64   `protobuf:"varint,2,opt,name=WishItemDiamond" json:"WishItemDiamond,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ToolOutputDataRes) Reset()         { *m = ToolOutputDataRes{} }
func (m *ToolOutputDataRes) String() string { return proto.CompactTextString(m) }
func (*ToolOutputDataRes) ProtoMessage()    {}
func (*ToolOutputDataRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{2}
}
func (m *ToolOutputDataRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ToolOutputDataRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ToolOutputDataRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ToolOutputDataRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToolOutputDataRes.Merge(m, src)
}
func (m *ToolOutputDataRes) XXX_Size() int {
	return m.Size()
}
func (m *ToolOutputDataRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ToolOutputDataRes.DiscardUnknown(m)
}

var xxx_messageInfo_ToolOutputDataRes proto.InternalMessageInfo

func (m *ToolOutputDataRes) GetDareDiamond() int64 {
	if m != nil && m.DareDiamond != nil {
		return *m.DareDiamond
	}
	return 0
}

func (m *ToolOutputDataRes) GetWishItemDiamond() int64 {
	if m != nil && m.WishItemDiamond != nil {
		return *m.WishItemDiamond
	}
	return 0
}

type ToolOutputitemRes struct {
	List                 []*ToolOutputitem `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ToolOutputitemRes) Reset()         { *m = ToolOutputitemRes{} }
func (m *ToolOutputitemRes) String() string { return proto.CompactTextString(m) }
func (*ToolOutputitemRes) ProtoMessage()    {}
func (*ToolOutputitemRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{3}
}
func (m *ToolOutputitemRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ToolOutputitemRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ToolOutputitemRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ToolOutputitemRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToolOutputitemRes.Merge(m, src)
}
func (m *ToolOutputitemRes) XXX_Size() int {
	return m.Size()
}
func (m *ToolOutputitemRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ToolOutputitemRes.DiscardUnknown(m)
}

var xxx_messageInfo_ToolOutputitemRes proto.InternalMessageInfo

func (m *ToolOutputitemRes) GetList() []*ToolOutputitem {
	if m != nil {
		return m.List
	}
	return nil
}

type ToolOutputitem struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	PtC                  *int64   `protobuf:"varint,3,opt,name=PtC" json:"PtC,omitempty"`
	XyC                  *int64   `protobuf:"varint,4,opt,name=XyC" json:"XyC,omitempty"`
	DyC                  *int64   `protobuf:"varint,5,opt,name=DyC" json:"DyC,omitempty"`
	DyO                  *int64   `protobuf:"varint,6,opt,name=DyO" json:"DyO,omitempty"`
	XyO                  *int64   `protobuf:"varint,7,opt,name=XyO" json:"XyO,omitempty"`
	PtO                  *int64   `protobuf:"varint,8,opt,name=PtO" json:"PtO,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ToolOutputitem) Reset()         { *m = ToolOutputitem{} }
func (m *ToolOutputitem) String() string { return proto.CompactTextString(m) }
func (*ToolOutputitem) ProtoMessage()    {}
func (*ToolOutputitem) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{4}
}
func (m *ToolOutputitem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ToolOutputitem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ToolOutputitem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ToolOutputitem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToolOutputitem.Merge(m, src)
}
func (m *ToolOutputitem) XXX_Size() int {
	return m.Size()
}
func (m *ToolOutputitem) XXX_DiscardUnknown() {
	xxx_messageInfo_ToolOutputitem.DiscardUnknown(m)
}

var xxx_messageInfo_ToolOutputitem proto.InternalMessageInfo

func (m *ToolOutputitem) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ToolOutputitem) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ToolOutputitem) GetPtC() int64 {
	if m != nil && m.PtC != nil {
		return *m.PtC
	}
	return 0
}

func (m *ToolOutputitem) GetXyC() int64 {
	if m != nil && m.XyC != nil {
		return *m.XyC
	}
	return 0
}

func (m *ToolOutputitem) GetDyC() int64 {
	if m != nil && m.DyC != nil {
		return *m.DyC
	}
	return 0
}

func (m *ToolOutputitem) GetDyO() int64 {
	if m != nil && m.DyO != nil {
		return *m.DyO
	}
	return 0
}

func (m *ToolOutputitem) GetXyO() int64 {
	if m != nil && m.XyO != nil {
		return *m.XyO
	}
	return 0
}

func (m *ToolOutputitem) GetPtO() int64 {
	if m != nil && m.PtO != nil {
		return *m.PtO
	}
	return 0
}

type ToolPumping struct {
	PumpingTimes         *int64   `protobuf:"varint,1,opt,name=PumpingTimes" json:"PumpingTimes,omitempty"`
	PumpingSumDiamond    *int64   `protobuf:"varint,2,opt,name=PumpingSumDiamond" json:"PumpingSumDiamond,omitempty"`
	PumpingAvgDiamond    *int64   `protobuf:"varint,3,opt,name=PumpingAvgDiamond" json:"PumpingAvgDiamond,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ToolPumping) Reset()         { *m = ToolPumping{} }
func (m *ToolPumping) String() string { return proto.CompactTextString(m) }
func (*ToolPumping) ProtoMessage()    {}
func (*ToolPumping) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{5}
}
func (m *ToolPumping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ToolPumping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ToolPumping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ToolPumping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToolPumping.Merge(m, src)
}
func (m *ToolPumping) XXX_Size() int {
	return m.Size()
}
func (m *ToolPumping) XXX_DiscardUnknown() {
	xxx_messageInfo_ToolPumping.DiscardUnknown(m)
}

var xxx_messageInfo_ToolPumping proto.InternalMessageInfo

func (m *ToolPumping) GetPumpingTimes() int64 {
	if m != nil && m.PumpingTimes != nil {
		return *m.PumpingTimes
	}
	return 0
}

func (m *ToolPumping) GetPumpingSumDiamond() int64 {
	if m != nil && m.PumpingSumDiamond != nil {
		return *m.PumpingSumDiamond
	}
	return 0
}

func (m *ToolPumping) GetPumpingAvgDiamond() int64 {
	if m != nil && m.PumpingAvgDiamond != nil {
		return *m.PumpingAvgDiamond
	}
	return 0
}

type ToolRate struct {
	Id                   *int64   `protobuf:"varint,100,opt,name=Id" json:"Id,omitempty"`
	Name                 *string  `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Price                *int64   `protobuf:"varint,2,opt,name=Price" json:"Price,omitempty"`
	ValueSum             *float64 `protobuf:"fixed64,3,opt,name=ValueSum" json:"ValueSum,omitempty"`
	Pool                 *float64 `protobuf:"fixed64,4,opt,name=Pool" json:"Pool,omitempty"`
	Weights              *float64 `protobuf:"fixed64,5,opt,name=Weights" json:"Weights,omitempty"`
	PtWeights            *float64 `protobuf:"fixed64,6,opt,name=PtWeights" json:"PtWeights,omitempty"`
	PtRate               *float64 `protobuf:"fixed64,7,opt,name=PtRate" json:"PtRate,omitempty"`
	PtAppend             *float64 `protobuf:"fixed64,8,opt,name=PtAppend" json:"PtAppend,omitempty"`
	PtAppendRate         *float64 `protobuf:"fixed64,9,opt,name=PtAppendRate" json:"PtAppendRate,omitempty"`
	XyWeights            *float64 `protobuf:"fixed64,11,opt,name=XyWeights" json:"XyWeights,omitempty"`
	XyRate               *float64 `protobuf:"fixed64,12,opt,name=XyRate" json:"XyRate,omitempty"`
	XyAppend             *float64 `protobuf:"fixed64,13,opt,name=XyAppend" json:"XyAppend,omitempty"`
	XyAppendRate         *float64 `protobuf:"fixed64,14,opt,name=XyAppendRate" json:"XyAppendRate,omitempty"`
	DyWeights            *float64 `protobuf:"fixed64,21,opt,name=DyWeights" json:"DyWeights,omitempty"`
	DyRate               *float64 `protobuf:"fixed64,22,opt,name=DyRate" json:"DyRate,omitempty"`
	DyAppend             *float64 `protobuf:"fixed64,23,opt,name=DyAppend" json:"DyAppend,omitempty"`
	DyAppendRate         *float64 `protobuf:"fixed64,24,opt,name=DyAppendRate" json:"DyAppendRate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ToolRate) Reset()         { *m = ToolRate{} }
func (m *ToolRate) String() string { return proto.CompactTextString(m) }
func (*ToolRate) ProtoMessage()    {}
func (*ToolRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{6}
}
func (m *ToolRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ToolRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ToolRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ToolRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToolRate.Merge(m, src)
}
func (m *ToolRate) XXX_Size() int {
	return m.Size()
}
func (m *ToolRate) XXX_DiscardUnknown() {
	xxx_messageInfo_ToolRate.DiscardUnknown(m)
}

var xxx_messageInfo_ToolRate proto.InternalMessageInfo

func (m *ToolRate) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ToolRate) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ToolRate) GetPrice() int64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *ToolRate) GetValueSum() float64 {
	if m != nil && m.ValueSum != nil {
		return *m.ValueSum
	}
	return 0
}

func (m *ToolRate) GetPool() float64 {
	if m != nil && m.Pool != nil {
		return *m.Pool
	}
	return 0
}

func (m *ToolRate) GetWeights() float64 {
	if m != nil && m.Weights != nil {
		return *m.Weights
	}
	return 0
}

func (m *ToolRate) GetPtWeights() float64 {
	if m != nil && m.PtWeights != nil {
		return *m.PtWeights
	}
	return 0
}

func (m *ToolRate) GetPtRate() float64 {
	if m != nil && m.PtRate != nil {
		return *m.PtRate
	}
	return 0
}

func (m *ToolRate) GetPtAppend() float64 {
	if m != nil && m.PtAppend != nil {
		return *m.PtAppend
	}
	return 0
}

func (m *ToolRate) GetPtAppendRate() float64 {
	if m != nil && m.PtAppendRate != nil {
		return *m.PtAppendRate
	}
	return 0
}

func (m *ToolRate) GetXyWeights() float64 {
	if m != nil && m.XyWeights != nil {
		return *m.XyWeights
	}
	return 0
}

func (m *ToolRate) GetXyRate() float64 {
	if m != nil && m.XyRate != nil {
		return *m.XyRate
	}
	return 0
}

func (m *ToolRate) GetXyAppend() float64 {
	if m != nil && m.XyAppend != nil {
		return *m.XyAppend
	}
	return 0
}

func (m *ToolRate) GetXyAppendRate() float64 {
	if m != nil && m.XyAppendRate != nil {
		return *m.XyAppendRate
	}
	return 0
}

func (m *ToolRate) GetDyWeights() float64 {
	if m != nil && m.DyWeights != nil {
		return *m.DyWeights
	}
	return 0
}

func (m *ToolRate) GetDyRate() float64 {
	if m != nil && m.DyRate != nil {
		return *m.DyRate
	}
	return 0
}

func (m *ToolRate) GetDyAppend() float64 {
	if m != nil && m.DyAppend != nil {
		return *m.DyAppend
	}
	return 0
}

func (m *ToolRate) GetDyAppendRate() float64 {
	if m != nil && m.DyAppendRate != nil {
		return *m.DyAppendRate
	}
	return 0
}

type ToolRateReq struct {
	ChallengeDiamond     *int64   `protobuf:"varint,1,opt,name=ChallengeDiamond" json:"ChallengeDiamond,omitempty"`
	ChallengeRmb         *int64   `protobuf:"varint,2,opt,name=ChallengeRmb" json:"ChallengeRmb,omitempty"`
	PoolPat              *float64 `protobuf:"fixed64,3,opt,name=PoolPat" json:"PoolPat,omitempty"`
	WeightsPat           *int64   `protobuf:"varint,4,opt,name=WeightsPat" json:"WeightsPat,omitempty"`
	WishBoxId            *int64   `protobuf:"varint,5,opt,name=WishBoxId" json:"WishBoxId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ToolRateReq) Reset()         { *m = ToolRateReq{} }
func (m *ToolRateReq) String() string { return proto.CompactTextString(m) }
func (*ToolRateReq) ProtoMessage()    {}
func (*ToolRateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{7}
}
func (m *ToolRateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ToolRateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ToolRateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ToolRateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToolRateReq.Merge(m, src)
}
func (m *ToolRateReq) XXX_Size() int {
	return m.Size()
}
func (m *ToolRateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ToolRateReq.DiscardUnknown(m)
}

var xxx_messageInfo_ToolRateReq proto.InternalMessageInfo

func (m *ToolRateReq) GetChallengeDiamond() int64 {
	if m != nil && m.ChallengeDiamond != nil {
		return *m.ChallengeDiamond
	}
	return 0
}

func (m *ToolRateReq) GetChallengeRmb() int64 {
	if m != nil && m.ChallengeRmb != nil {
		return *m.ChallengeRmb
	}
	return 0
}

func (m *ToolRateReq) GetPoolPat() float64 {
	if m != nil && m.PoolPat != nil {
		return *m.PoolPat
	}
	return 0
}

func (m *ToolRateReq) GetWeightsPat() int64 {
	if m != nil && m.WeightsPat != nil {
		return *m.WeightsPat
	}
	return 0
}

func (m *ToolRateReq) GetWishBoxId() int64 {
	if m != nil && m.WishBoxId != nil {
		return *m.WishBoxId
	}
	return 0
}

type ToolRateRes struct {
	List                 []*ToolRate `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ToolRateRes) Reset()         { *m = ToolRateRes{} }
func (m *ToolRateRes) String() string { return proto.CompactTextString(m) }
func (*ToolRateRes) ProtoMessage()    {}
func (*ToolRateRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{8}
}
func (m *ToolRateRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ToolRateRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ToolRateRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ToolRateRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToolRateRes.Merge(m, src)
}
func (m *ToolRateRes) XXX_Size() int {
	return m.Size()
}
func (m *ToolRateRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ToolRateRes.DiscardUnknown(m)
}

var xxx_messageInfo_ToolRateRes proto.InternalMessageInfo

func (m *ToolRateRes) GetList() []*ToolRate {
	if m != nil {
		return m.List
	}
	return nil
}

type ToolLuckyReq struct {
	PoolId               *int64   `protobuf:"varint,1,opt,name=PoolId" json:"PoolId,omitempty"`
	RunTimes             *int64   `protobuf:"varint,2,opt,name=RunTimes" json:"RunTimes,omitempty"`
	ChallengeDiamond     *int64   `protobuf:"varint,3,opt,name=ChallengeDiamond" json:"ChallengeDiamond,omitempty"`
	WishBoxId            *int64   `protobuf:"varint,4,opt,name=WishBoxId" json:"WishBoxId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ToolLuckyReq) Reset()         { *m = ToolLuckyReq{} }
func (m *ToolLuckyReq) String() string { return proto.CompactTextString(m) }
func (*ToolLuckyReq) ProtoMessage()    {}
func (*ToolLuckyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{9}
}
func (m *ToolLuckyReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ToolLuckyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ToolLuckyReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ToolLuckyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToolLuckyReq.Merge(m, src)
}
func (m *ToolLuckyReq) XXX_Size() int {
	return m.Size()
}
func (m *ToolLuckyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ToolLuckyReq.DiscardUnknown(m)
}

var xxx_messageInfo_ToolLuckyReq proto.InternalMessageInfo

func (m *ToolLuckyReq) GetPoolId() int64 {
	if m != nil && m.PoolId != nil {
		return *m.PoolId
	}
	return 0
}

func (m *ToolLuckyReq) GetRunTimes() int64 {
	if m != nil && m.RunTimes != nil {
		return *m.RunTimes
	}
	return 0
}

func (m *ToolLuckyReq) GetChallengeDiamond() int64 {
	if m != nil && m.ChallengeDiamond != nil {
		return *m.ChallengeDiamond
	}
	return 0
}

func (m *ToolLuckyReq) GetWishBoxId() int64 {
	if m != nil && m.WishBoxId != nil {
		return *m.WishBoxId
	}
	return 0
}

type ToolLuckyRes struct {
	Result               *string  `protobuf:"bytes,1,opt,name=Result" json:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ToolLuckyRes) Reset()         { *m = ToolLuckyRes{} }
func (m *ToolLuckyRes) String() string { return proto.CompactTextString(m) }
func (*ToolLuckyRes) ProtoMessage()    {}
func (*ToolLuckyRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{10}
}
func (m *ToolLuckyRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ToolLuckyRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ToolLuckyRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ToolLuckyRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToolLuckyRes.Merge(m, src)
}
func (m *ToolLuckyRes) XXX_Size() int {
	return m.Size()
}
func (m *ToolLuckyRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ToolLuckyRes.DiscardUnknown(m)
}

var xxx_messageInfo_ToolLuckyRes proto.InternalMessageInfo

func (m *ToolLuckyRes) GetResult() string {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ""
}

// 更新状态
type UpdateStatusRequest struct {
	Status               *int32   `protobuf:"varint,1,opt,name=Status" json:"Status,omitempty"`
	Note                 *string  `protobuf:"bytes,2,opt,name=Note" json:"Note,omitempty"`
	Ids                  []int64  `protobuf:"varint,3,rep,name=Ids" json:"Ids,omitempty"`
	StrIds               []string `protobuf:"bytes,4,rep,name=StrIds" json:"StrIds,omitempty"`
	Id                   *int64   `protobuf:"varint,5,opt,name=Id" json:"Id,omitempty"`
	StrId                *string  `protobuf:"bytes,6,opt,name=StrId" json:"StrId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateStatusRequest) Reset()         { *m = UpdateStatusRequest{} }
func (m *UpdateStatusRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateStatusRequest) ProtoMessage()    {}
func (*UpdateStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{11}
}
func (m *UpdateStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateStatusRequest.Merge(m, src)
}
func (m *UpdateStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateStatusRequest proto.InternalMessageInfo

func (m *UpdateStatusRequest) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *UpdateStatusRequest) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

func (m *UpdateStatusRequest) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *UpdateStatusRequest) GetStrIds() []string {
	if m != nil {
		return m.StrIds
	}
	return nil
}

func (m *UpdateStatusRequest) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *UpdateStatusRequest) GetStrId() string {
	if m != nil && m.StrId != nil {
		return *m.StrId
	}
	return ""
}

type QueryWishOrderRequest struct {
	BeginTimestamp       *int64   `protobuf:"varint,1,opt,name=BeginTimestamp" json:"BeginTimestamp,omitempty"`
	EndTimestamp         *int64   `protobuf:"varint,2,opt,name=EndTimestamp" json:"EndTimestamp,omitempty"`
	CurPage              *int32   `protobuf:"varint,3,opt,name=CurPage" json:"CurPage,omitempty"`
	PageSize             *int32   `protobuf:"varint,4,opt,name=PageSize" json:"PageSize,omitempty"`
	Keyword              *string  `protobuf:"bytes,6,opt,name=Keyword" json:"Keyword,omitempty"`
	Types                *int32   `protobuf:"varint,7,opt,name=Types" json:"Types,omitempty"`
	Status               *int32   `protobuf:"varint,8,opt,name=Status" json:"Status,omitempty"`
	SourceType           *int32   `protobuf:"varint,9,opt,name=SourceType" json:"SourceType,omitempty"`
	PayType              *int32   `protobuf:"varint,10,opt,name=PayType" json:"PayType,omitempty"`
	ChangeType           *int32   `protobuf:"varint,11,opt,name=ChangeType" json:"ChangeType,omitempty"`
	PayStatus            *int32   `protobuf:"varint,12,opt,name=PayStatus" json:"PayStatus,omitempty"`
	TimeType             *int32   `protobuf:"varint,20,opt,name=TimeType" json:"TimeType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryWishOrderRequest) Reset()         { *m = QueryWishOrderRequest{} }
func (m *QueryWishOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWishOrderRequest) ProtoMessage()    {}
func (*QueryWishOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{12}
}
func (m *QueryWishOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWishOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWishOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWishOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWishOrderRequest.Merge(m, src)
}
func (m *QueryWishOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWishOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWishOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWishOrderRequest proto.InternalMessageInfo

func (m *QueryWishOrderRequest) GetBeginTimestamp() int64 {
	if m != nil && m.BeginTimestamp != nil {
		return *m.BeginTimestamp
	}
	return 0
}

func (m *QueryWishOrderRequest) GetEndTimestamp() int64 {
	if m != nil && m.EndTimestamp != nil {
		return *m.EndTimestamp
	}
	return 0
}

func (m *QueryWishOrderRequest) GetCurPage() int32 {
	if m != nil && m.CurPage != nil {
		return *m.CurPage
	}
	return 0
}

func (m *QueryWishOrderRequest) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *QueryWishOrderRequest) GetKeyword() string {
	if m != nil && m.Keyword != nil {
		return *m.Keyword
	}
	return ""
}

func (m *QueryWishOrderRequest) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *QueryWishOrderRequest) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *QueryWishOrderRequest) GetSourceType() int32 {
	if m != nil && m.SourceType != nil {
		return *m.SourceType
	}
	return 0
}

func (m *QueryWishOrderRequest) GetPayType() int32 {
	if m != nil && m.PayType != nil {
		return *m.PayType
	}
	return 0
}

func (m *QueryWishOrderRequest) GetChangeType() int32 {
	if m != nil && m.ChangeType != nil {
		return *m.ChangeType
	}
	return 0
}

func (m *QueryWishOrderRequest) GetPayStatus() int32 {
	if m != nil && m.PayStatus != nil {
		return *m.PayStatus
	}
	return 0
}

func (m *QueryWishOrderRequest) GetTimeType() int32 {
	if m != nil && m.TimeType != nil {
		return *m.TimeType
	}
	return 0
}

//盲盒列表列表请求
type WishBoxListRequest struct {
	CurPage              *int32   `protobuf:"varint,1,opt,name=CurPage" json:"CurPage,omitempty"`
	PageSize             *int32   `protobuf:"varint,2,opt,name=PageSize" json:"PageSize,omitempty"`
	Keyword              *string  `protobuf:"bytes,3,opt,name=Keyword" json:"Keyword,omitempty"`
	Type                 *int32   `protobuf:"varint,4,opt,name=Type" json:"Type,omitempty"`
	BeginTimestamp       *int64   `protobuf:"varint,5,opt,name=BeginTimestamp" json:"BeginTimestamp,omitempty"`
	EndTimestamp         *int64   `protobuf:"varint,6,opt,name=EndTimestamp" json:"EndTimestamp,omitempty"`
	IsRecommend          *bool    `protobuf:"varint,10,opt,name=IsRecommend" json:"IsRecommend,omitempty"`
	IsChallenge          *bool    `protobuf:"varint,11,opt,name=IsChallenge" json:"IsChallenge,omitempty"`
	Attribute            []int32  `protobuf:"varint,12,rep,name=Attribute" json:"Attribute,omitempty"`
	Status               *int32   `protobuf:"varint,13,opt,name=Status" json:"Status,omitempty"`
	IsHasUser            *bool    `protobuf:"varint,14,opt,name=IsHasUser" json:"IsHasUser,omitempty"`
	Sort                 *string  `protobuf:"bytes,15,opt,name=Sort" json:"Sort,omitempty"`
	IsAutoUpload         *bool    `protobuf:"varint,17,opt,name=IsAutoUpload" json:"IsAutoUpload,omitempty"`
	LocalStatus          []int64  `protobuf:"varint,18,rep,name=LocalStatus" json:"LocalStatus,omitempty"`
	HaveIsWin            *bool    `protobuf:"varint,19,opt,name=HaveIsWin" json:"HaveIsWin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WishBoxListRequest) Reset()         { *m = WishBoxListRequest{} }
func (m *WishBoxListRequest) String() string { return proto.CompactTextString(m) }
func (*WishBoxListRequest) ProtoMessage()    {}
func (*WishBoxListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{13}
}
func (m *WishBoxListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishBoxListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishBoxListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishBoxListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishBoxListRequest.Merge(m, src)
}
func (m *WishBoxListRequest) XXX_Size() int {
	return m.Size()
}
func (m *WishBoxListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WishBoxListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WishBoxListRequest proto.InternalMessageInfo

func (m *WishBoxListRequest) GetCurPage() int32 {
	if m != nil && m.CurPage != nil {
		return *m.CurPage
	}
	return 0
}

func (m *WishBoxListRequest) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *WishBoxListRequest) GetKeyword() string {
	if m != nil && m.Keyword != nil {
		return *m.Keyword
	}
	return ""
}

func (m *WishBoxListRequest) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *WishBoxListRequest) GetBeginTimestamp() int64 {
	if m != nil && m.BeginTimestamp != nil {
		return *m.BeginTimestamp
	}
	return 0
}

func (m *WishBoxListRequest) GetEndTimestamp() int64 {
	if m != nil && m.EndTimestamp != nil {
		return *m.EndTimestamp
	}
	return 0
}

func (m *WishBoxListRequest) GetIsRecommend() bool {
	if m != nil && m.IsRecommend != nil {
		return *m.IsRecommend
	}
	return false
}

func (m *WishBoxListRequest) GetIsChallenge() bool {
	if m != nil && m.IsChallenge != nil {
		return *m.IsChallenge
	}
	return false
}

func (m *WishBoxListRequest) GetAttribute() []int32 {
	if m != nil {
		return m.Attribute
	}
	return nil
}

func (m *WishBoxListRequest) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *WishBoxListRequest) GetIsHasUser() bool {
	if m != nil && m.IsHasUser != nil {
		return *m.IsHasUser
	}
	return false
}

func (m *WishBoxListRequest) GetSort() string {
	if m != nil && m.Sort != nil {
		return *m.Sort
	}
	return ""
}

func (m *WishBoxListRequest) GetIsAutoUpload() bool {
	if m != nil && m.IsAutoUpload != nil {
		return *m.IsAutoUpload
	}
	return false
}

func (m *WishBoxListRequest) GetLocalStatus() []int64 {
	if m != nil {
		return m.LocalStatus
	}
	return nil
}

func (m *WishBoxListRequest) GetHaveIsWin() bool {
	if m != nil && m.HaveIsWin != nil {
		return *m.HaveIsWin
	}
	return false
}

// 盲盒列表
type WishBoxList struct {
	List                 []*WishBox `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32     `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *WishBoxList) Reset()         { *m = WishBoxList{} }
func (m *WishBoxList) String() string { return proto.CompactTextString(m) }
func (*WishBoxList) ProtoMessage()    {}
func (*WishBoxList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{14}
}
func (m *WishBoxList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishBoxList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishBoxList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishBoxList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishBoxList.Merge(m, src)
}
func (m *WishBoxList) XXX_Size() int {
	return m.Size()
}
func (m *WishBoxList) XXX_DiscardUnknown() {
	xxx_messageInfo_WishBoxList.DiscardUnknown(m)
}

var xxx_messageInfo_WishBoxList proto.InternalMessageInfo

func (m *WishBoxList) GetList() []*WishBox {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WishBoxList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// 盲盒
type WishBox struct {
	Id                   *int64             `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Name                 *string            `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Icon                 *string            `protobuf:"bytes,3,opt,name=Icon" json:"Icon,omitempty"`
	GoodsAmount          *int32             `protobuf:"varint,4,opt,name=GoodsAmount" json:"GoodsAmount,omitempty"`
	IsChallenge          *bool              `protobuf:"varint,5,opt,name=IsChallenge" json:"IsChallenge,omitempty"`
	Attribute            []int32            `protobuf:"varint,6,rep,name=Attribute" json:"Attribute,omitempty"`
	UserAccount          *string            `protobuf:"bytes,7,opt,name=UserAccount" json:"UserAccount,omitempty"`
	UserId               *int64             `protobuf:"varint,8,opt,name=UserId" json:"UserId,omitempty"`
	Price                *int64             `protobuf:"varint,9,opt,name=Price" json:"Price,omitempty"`
	Status               *int32             `protobuf:"varint,10,opt,name=Status" json:"Status,omitempty"`
	IsRecommend          *bool              `protobuf:"varint,18,opt,name=IsRecommend" json:"IsRecommend,omitempty"`
	SortWeight           *int64             `protobuf:"varint,19,opt,name=SortWeight" json:"SortWeight,omitempty"`
	UploadTime           *int64             `protobuf:"varint,20,opt,name=UploadTime" json:"UploadTime,omitempty"`
	CreateTime           *int64             `protobuf:"varint,21,opt,name=CreateTime" json:"CreateTime,omitempty"`
	UpdateTime           *int64             `protobuf:"varint,22,opt,name=UpdateTime" json:"UpdateTime,omitempty"`
	ItemList             []*WishBoxGoodsWin `protobuf:"bytes,23,rep,name=ItemList" json:"ItemList,omitempty"`
	WishPoolId           *int64             `protobuf:"varint,30,opt,name=WishPoolId" json:"WishPoolId,omitempty"`
	LocalStatus          *int64             `protobuf:"varint,31,opt,name=LocalStatus" json:"LocalStatus,omitempty"`
	IsOpenAward          *bool              `protobuf:"varint,32,opt,name=IsOpenAward" json:"IsOpenAward,omitempty"`
	HaveIsWin            *bool              `protobuf:"varint,33,opt,name=HaveIsWin" json:"HaveIsWin,omitempty"`
	Brands               []int64            `protobuf:"varint,34,rep,name=Brands" json:"Brands,omitempty"`
	Types                []int64            `protobuf:"varint,35,rep,name=Types" json:"Types,omitempty"`
	Styles               []int32            `protobuf:"varint,36,rep,name=Styles" json:"Styles,omitempty"`
	Items                []int64            `protobuf:"varint,37,rep,name=Items" json:"Items,omitempty"`
	WishItems            []int64            `protobuf:"varint,38,rep,name=WishItems" json:"WishItems,omitempty"`
	RareNum              *int32             `protobuf:"varint,39,opt,name=RareNum" json:"RareNum,omitempty"`
	ProductStatus        *int32             `protobuf:"varint,46,opt,name=ProductStatus" json:"ProductStatus,omitempty"`
	GuardianOverTime     *int64             `protobuf:"varint,47,opt,name=GuardianOverTime" json:"GuardianOverTime,omitempty"`
	IsGuardian           *bool              `protobuf:"varint,48,opt,name=IsGuardian" json:"IsGuardian,omitempty"`
	GuardianId           *int64             `protobuf:"varint,49,opt,name=GuardianId" json:"GuardianId,omitempty"`
	BoxPoolId            *int64             `protobuf:"varint,50,opt,name=BoxPoolId" json:"BoxPoolId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *WishBox) Reset()         { *m = WishBox{} }
func (m *WishBox) String() string { return proto.CompactTextString(m) }
func (*WishBox) ProtoMessage()    {}
func (*WishBox) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{15}
}
func (m *WishBox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishBox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishBox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishBox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishBox.Merge(m, src)
}
func (m *WishBox) XXX_Size() int {
	return m.Size()
}
func (m *WishBox) XXX_DiscardUnknown() {
	xxx_messageInfo_WishBox.DiscardUnknown(m)
}

var xxx_messageInfo_WishBox proto.InternalMessageInfo

func (m *WishBox) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishBox) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *WishBox) GetIcon() string {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return ""
}

func (m *WishBox) GetGoodsAmount() int32 {
	if m != nil && m.GoodsAmount != nil {
		return *m.GoodsAmount
	}
	return 0
}

func (m *WishBox) GetIsChallenge() bool {
	if m != nil && m.IsChallenge != nil {
		return *m.IsChallenge
	}
	return false
}

func (m *WishBox) GetAttribute() []int32 {
	if m != nil {
		return m.Attribute
	}
	return nil
}

func (m *WishBox) GetUserAccount() string {
	if m != nil && m.UserAccount != nil {
		return *m.UserAccount
	}
	return ""
}

func (m *WishBox) GetUserId() int64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *WishBox) GetPrice() int64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *WishBox) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *WishBox) GetIsRecommend() bool {
	if m != nil && m.IsRecommend != nil {
		return *m.IsRecommend
	}
	return false
}

func (m *WishBox) GetSortWeight() int64 {
	if m != nil && m.SortWeight != nil {
		return *m.SortWeight
	}
	return 0
}

func (m *WishBox) GetUploadTime() int64 {
	if m != nil && m.UploadTime != nil {
		return *m.UploadTime
	}
	return 0
}

func (m *WishBox) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishBox) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *WishBox) GetItemList() []*WishBoxGoodsWin {
	if m != nil {
		return m.ItemList
	}
	return nil
}

func (m *WishBox) GetWishPoolId() int64 {
	if m != nil && m.WishPoolId != nil {
		return *m.WishPoolId
	}
	return 0
}

func (m *WishBox) GetLocalStatus() int64 {
	if m != nil && m.LocalStatus != nil {
		return *m.LocalStatus
	}
	return 0
}

func (m *WishBox) GetIsOpenAward() bool {
	if m != nil && m.IsOpenAward != nil {
		return *m.IsOpenAward
	}
	return false
}

func (m *WishBox) GetHaveIsWin() bool {
	if m != nil && m.HaveIsWin != nil {
		return *m.HaveIsWin
	}
	return false
}

func (m *WishBox) GetBrands() []int64 {
	if m != nil {
		return m.Brands
	}
	return nil
}

func (m *WishBox) GetTypes() []int64 {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *WishBox) GetStyles() []int32 {
	if m != nil {
		return m.Styles
	}
	return nil
}

func (m *WishBox) GetItems() []int64 {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *WishBox) GetWishItems() []int64 {
	if m != nil {
		return m.WishItems
	}
	return nil
}

func (m *WishBox) GetRareNum() int32 {
	if m != nil && m.RareNum != nil {
		return *m.RareNum
	}
	return 0
}

func (m *WishBox) GetProductStatus() int32 {
	if m != nil && m.ProductStatus != nil {
		return *m.ProductStatus
	}
	return 0
}

func (m *WishBox) GetGuardianOverTime() int64 {
	if m != nil && m.GuardianOverTime != nil {
		return *m.GuardianOverTime
	}
	return 0
}

func (m *WishBox) GetIsGuardian() bool {
	if m != nil && m.IsGuardian != nil {
		return *m.IsGuardian
	}
	return false
}

func (m *WishBox) GetGuardianId() int64 {
	if m != nil && m.GuardianId != nil {
		return *m.GuardianId
	}
	return 0
}

func (m *WishBox) GetBoxPoolId() int64 {
	if m != nil && m.BoxPoolId != nil {
		return *m.BoxPoolId
	}
	return 0
}

// 盲盒包含的商品以及中奖
type WishBoxGoodsWin struct {
	Id                    *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	GoodsId               *int64   `protobuf:"varint,2,opt,name=GoodsId" json:"GoodsId,omitempty"`
	Name                  *string  `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	Price                 *int64   `protobuf:"varint,4,opt,name=Price" json:"Price,omitempty"`
	IsInfallible          *bool    `protobuf:"varint,5,opt,name=IsInfallible" json:"IsInfallible,omitempty"`
	ReplenishAmount       *int32   `protobuf:"varint,6,opt,name=ReplenishAmount" json:"ReplenishAmount,omitempty"`
	ReplenishIntervalTime *int32   `protobuf:"varint,7,opt,name=ReplenishIntervalTime" json:"ReplenishIntervalTime,omitempty"`
	Diamond               *int64   `protobuf:"varint,8,opt,name=Diamond" json:"Diamond,omitempty"`
	PerRate               *int32   `protobuf:"varint,11,opt,name=PerRate" json:"PerRate,omitempty"`
	GoodsType             *int32   `protobuf:"varint,14,opt,name=GoodsType" json:"GoodsType,omitempty"`
	WishBoxId             *int64   `protobuf:"varint,15,opt,name=WishBoxId" json:"WishBoxId,omitempty"`
	BigLoss               *int32   `protobuf:"varint,16,opt,name=BigLoss" json:"BigLoss,omitempty"`
	SmallLoss             *int32   `protobuf:"varint,17,opt,name=SmallLoss" json:"SmallLoss,omitempty"`
	Common                *int32   `protobuf:"varint,18,opt,name=Common" json:"Common,omitempty"`
	BigWin                *int32   `protobuf:"varint,19,opt,name=BigWin" json:"BigWin,omitempty"`
	SmallWin              *int32   `protobuf:"varint,20,opt,name=SmallWin" json:"SmallWin,omitempty"`
	CommonAddWeight       *int32   `protobuf:"varint,21,opt,name=CommonAddWeight" json:"CommonAddWeight,omitempty"`
	BigWinAddWeight       *int32   `protobuf:"varint,22,opt,name=BigWinAddWeight" json:"BigWinAddWeight,omitempty"`
	SmallWinAddWeight     *int32   `protobuf:"varint,23,opt,name=SmallWinAddWeight" json:"SmallWinAddWeight,omitempty"`
	RewardLv              *int32   `protobuf:"varint,30,opt,name=RewardLv" json:"RewardLv,omitempty"`
	ArrivalTime           *int64   `protobuf:"varint,31,opt,name=ArrivalTime" json:"ArrivalTime,omitempty"`
	BoxItemId             *int64   `protobuf:"varint,35,opt,name=BoxItemId" json:"BoxItemId,omitempty"`
	CreateTime            *int64   `protobuf:"varint,36,opt,name=CreateTime" json:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *WishBoxGoodsWin) Reset()         { *m = WishBoxGoodsWin{} }
func (m *WishBoxGoodsWin) String() string { return proto.CompactTextString(m) }
func (*WishBoxGoodsWin) ProtoMessage()    {}
func (*WishBoxGoodsWin) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{16}
}
func (m *WishBoxGoodsWin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishBoxGoodsWin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishBoxGoodsWin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishBoxGoodsWin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishBoxGoodsWin.Merge(m, src)
}
func (m *WishBoxGoodsWin) XXX_Size() int {
	return m.Size()
}
func (m *WishBoxGoodsWin) XXX_DiscardUnknown() {
	xxx_messageInfo_WishBoxGoodsWin.DiscardUnknown(m)
}

var xxx_messageInfo_WishBoxGoodsWin proto.InternalMessageInfo

func (m *WishBoxGoodsWin) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishBoxGoodsWin) GetGoodsId() int64 {
	if m != nil && m.GoodsId != nil {
		return *m.GoodsId
	}
	return 0
}

func (m *WishBoxGoodsWin) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *WishBoxGoodsWin) GetPrice() int64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *WishBoxGoodsWin) GetIsInfallible() bool {
	if m != nil && m.IsInfallible != nil {
		return *m.IsInfallible
	}
	return false
}

func (m *WishBoxGoodsWin) GetReplenishAmount() int32 {
	if m != nil && m.ReplenishAmount != nil {
		return *m.ReplenishAmount
	}
	return 0
}

func (m *WishBoxGoodsWin) GetReplenishIntervalTime() int32 {
	if m != nil && m.ReplenishIntervalTime != nil {
		return *m.ReplenishIntervalTime
	}
	return 0
}

func (m *WishBoxGoodsWin) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *WishBoxGoodsWin) GetPerRate() int32 {
	if m != nil && m.PerRate != nil {
		return *m.PerRate
	}
	return 0
}

func (m *WishBoxGoodsWin) GetGoodsType() int32 {
	if m != nil && m.GoodsType != nil {
		return *m.GoodsType
	}
	return 0
}

func (m *WishBoxGoodsWin) GetWishBoxId() int64 {
	if m != nil && m.WishBoxId != nil {
		return *m.WishBoxId
	}
	return 0
}

func (m *WishBoxGoodsWin) GetBigLoss() int32 {
	if m != nil && m.BigLoss != nil {
		return *m.BigLoss
	}
	return 0
}

func (m *WishBoxGoodsWin) GetSmallLoss() int32 {
	if m != nil && m.SmallLoss != nil {
		return *m.SmallLoss
	}
	return 0
}

func (m *WishBoxGoodsWin) GetCommon() int32 {
	if m != nil && m.Common != nil {
		return *m.Common
	}
	return 0
}

func (m *WishBoxGoodsWin) GetBigWin() int32 {
	if m != nil && m.BigWin != nil {
		return *m.BigWin
	}
	return 0
}

func (m *WishBoxGoodsWin) GetSmallWin() int32 {
	if m != nil && m.SmallWin != nil {
		return *m.SmallWin
	}
	return 0
}

func (m *WishBoxGoodsWin) GetCommonAddWeight() int32 {
	if m != nil && m.CommonAddWeight != nil {
		return *m.CommonAddWeight
	}
	return 0
}

func (m *WishBoxGoodsWin) GetBigWinAddWeight() int32 {
	if m != nil && m.BigWinAddWeight != nil {
		return *m.BigWinAddWeight
	}
	return 0
}

func (m *WishBoxGoodsWin) GetSmallWinAddWeight() int32 {
	if m != nil && m.SmallWinAddWeight != nil {
		return *m.SmallWinAddWeight
	}
	return 0
}

func (m *WishBoxGoodsWin) GetRewardLv() int32 {
	if m != nil && m.RewardLv != nil {
		return *m.RewardLv
	}
	return 0
}

func (m *WishBoxGoodsWin) GetArrivalTime() int64 {
	if m != nil && m.ArrivalTime != nil {
		return *m.ArrivalTime
	}
	return 0
}

func (m *WishBoxGoodsWin) GetBoxItemId() int64 {
	if m != nil && m.BoxItemId != nil {
		return *m.BoxItemId
	}
	return 0
}

func (m *WishBoxGoodsWin) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

// 盲盒包含的商品列表
type WishBoxGoodsItemList struct {
	List                 []*WishBoxGoodsItem `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32              `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *WishBoxGoodsItemList) Reset()         { *m = WishBoxGoodsItemList{} }
func (m *WishBoxGoodsItemList) String() string { return proto.CompactTextString(m) }
func (*WishBoxGoodsItemList) ProtoMessage()    {}
func (*WishBoxGoodsItemList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{17}
}
func (m *WishBoxGoodsItemList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishBoxGoodsItemList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishBoxGoodsItemList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishBoxGoodsItemList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishBoxGoodsItemList.Merge(m, src)
}
func (m *WishBoxGoodsItemList) XXX_Size() int {
	return m.Size()
}
func (m *WishBoxGoodsItemList) XXX_DiscardUnknown() {
	xxx_messageInfo_WishBoxGoodsItemList.DiscardUnknown(m)
}

var xxx_messageInfo_WishBoxGoodsItemList proto.InternalMessageInfo

func (m *WishBoxGoodsItemList) GetList() []*WishBoxGoodsItem {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WishBoxGoodsItemList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// 盲盒包含的商品
type WishBoxGoodsItem struct {
	Id                    *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	GoodsId               *int64   `protobuf:"varint,2,opt,name=GoodsId" json:"GoodsId,omitempty"`
	Name                  *string  `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	Price                 *int64   `protobuf:"varint,4,opt,name=Price" json:"Price,omitempty"`
	IsInfallible          *bool    `protobuf:"varint,5,opt,name=IsInfallible" json:"IsInfallible,omitempty"`
	ReplenishAmount       *int32   `protobuf:"varint,6,opt,name=ReplenishAmount" json:"ReplenishAmount,omitempty"`
	ReplenishIntervalTime *int32   `protobuf:"varint,7,opt,name=ReplenishIntervalTime" json:"ReplenishIntervalTime,omitempty"`
	GoodsType             *int32   `protobuf:"varint,14,opt,name=GoodsType" json:"GoodsType,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *WishBoxGoodsItem) Reset()         { *m = WishBoxGoodsItem{} }
func (m *WishBoxGoodsItem) String() string { return proto.CompactTextString(m) }
func (*WishBoxGoodsItem) ProtoMessage()    {}
func (*WishBoxGoodsItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{18}
}
func (m *WishBoxGoodsItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishBoxGoodsItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishBoxGoodsItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishBoxGoodsItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishBoxGoodsItem.Merge(m, src)
}
func (m *WishBoxGoodsItem) XXX_Size() int {
	return m.Size()
}
func (m *WishBoxGoodsItem) XXX_DiscardUnknown() {
	xxx_messageInfo_WishBoxGoodsItem.DiscardUnknown(m)
}

var xxx_messageInfo_WishBoxGoodsItem proto.InternalMessageInfo

func (m *WishBoxGoodsItem) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishBoxGoodsItem) GetGoodsId() int64 {
	if m != nil && m.GoodsId != nil {
		return *m.GoodsId
	}
	return 0
}

func (m *WishBoxGoodsItem) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *WishBoxGoodsItem) GetPrice() int64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *WishBoxGoodsItem) GetIsInfallible() bool {
	if m != nil && m.IsInfallible != nil {
		return *m.IsInfallible
	}
	return false
}

func (m *WishBoxGoodsItem) GetReplenishAmount() int32 {
	if m != nil && m.ReplenishAmount != nil {
		return *m.ReplenishAmount
	}
	return 0
}

func (m *WishBoxGoodsItem) GetReplenishIntervalTime() int32 {
	if m != nil && m.ReplenishIntervalTime != nil {
		return *m.ReplenishIntervalTime
	}
	return 0
}

func (m *WishBoxGoodsItem) GetGoodsType() int32 {
	if m != nil && m.GoodsType != nil {
		return *m.GoodsType
	}
	return 0
}

// 盲盒中奖配置列表
type WishBoxWinCfgList struct {
	List                 []*WishBoxWinCfg `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32           `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *WishBoxWinCfgList) Reset()         { *m = WishBoxWinCfgList{} }
func (m *WishBoxWinCfgList) String() string { return proto.CompactTextString(m) }
func (*WishBoxWinCfgList) ProtoMessage()    {}
func (*WishBoxWinCfgList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{19}
}
func (m *WishBoxWinCfgList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishBoxWinCfgList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishBoxWinCfgList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishBoxWinCfgList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishBoxWinCfgList.Merge(m, src)
}
func (m *WishBoxWinCfgList) XXX_Size() int {
	return m.Size()
}
func (m *WishBoxWinCfgList) XXX_DiscardUnknown() {
	xxx_messageInfo_WishBoxWinCfgList.DiscardUnknown(m)
}

var xxx_messageInfo_WishBoxWinCfgList proto.InternalMessageInfo

func (m *WishBoxWinCfgList) GetList() []*WishBoxWinCfg {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WishBoxWinCfgList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// 盲盒中奖配置
type WishBoxWinCfg struct {
	WishBoxId            *int64   `protobuf:"varint,1,opt,name=WishBoxId" json:"WishBoxId,omitempty"`
	GoodsId              *int64   `protobuf:"varint,2,opt,name=GoodsId" json:"GoodsId,omitempty"`
	Name                 *string  `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	Price                *int64   `protobuf:"varint,4,opt,name=Price" json:"Price,omitempty"`
	GoodsType            *int32   `protobuf:"varint,5,opt,name=GoodsType" json:"GoodsType,omitempty"`
	BigLoss              *int32   `protobuf:"varint,6,opt,name=BigLoss" json:"BigLoss,omitempty"`
	SmallLoss            *int32   `protobuf:"varint,7,opt,name=SmallLoss" json:"SmallLoss,omitempty"`
	Common               *int32   `protobuf:"varint,8,opt,name=Common" json:"Common,omitempty"`
	BigWin               *int32   `protobuf:"varint,9,opt,name=BigWin" json:"BigWin,omitempty"`
	SmallWin             *int32   `protobuf:"varint,10,opt,name=SmallWin" json:"SmallWin,omitempty"`
	WishBoxItemId        *int64   `protobuf:"varint,13,opt,name=WishBoxItemId" json:"WishBoxItemId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WishBoxWinCfg) Reset()         { *m = WishBoxWinCfg{} }
func (m *WishBoxWinCfg) String() string { return proto.CompactTextString(m) }
func (*WishBoxWinCfg) ProtoMessage()    {}
func (*WishBoxWinCfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{20}
}
func (m *WishBoxWinCfg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishBoxWinCfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishBoxWinCfg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishBoxWinCfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishBoxWinCfg.Merge(m, src)
}
func (m *WishBoxWinCfg) XXX_Size() int {
	return m.Size()
}
func (m *WishBoxWinCfg) XXX_DiscardUnknown() {
	xxx_messageInfo_WishBoxWinCfg.DiscardUnknown(m)
}

var xxx_messageInfo_WishBoxWinCfg proto.InternalMessageInfo

func (m *WishBoxWinCfg) GetWishBoxId() int64 {
	if m != nil && m.WishBoxId != nil {
		return *m.WishBoxId
	}
	return 0
}

func (m *WishBoxWinCfg) GetGoodsId() int64 {
	if m != nil && m.GoodsId != nil {
		return *m.GoodsId
	}
	return 0
}

func (m *WishBoxWinCfg) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *WishBoxWinCfg) GetPrice() int64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *WishBoxWinCfg) GetGoodsType() int32 {
	if m != nil && m.GoodsType != nil {
		return *m.GoodsType
	}
	return 0
}

func (m *WishBoxWinCfg) GetBigLoss() int32 {
	if m != nil && m.BigLoss != nil {
		return *m.BigLoss
	}
	return 0
}

func (m *WishBoxWinCfg) GetSmallLoss() int32 {
	if m != nil && m.SmallLoss != nil {
		return *m.SmallLoss
	}
	return 0
}

func (m *WishBoxWinCfg) GetCommon() int32 {
	if m != nil && m.Common != nil {
		return *m.Common
	}
	return 0
}

func (m *WishBoxWinCfg) GetBigWin() int32 {
	if m != nil && m.BigWin != nil {
		return *m.BigWin
	}
	return 0
}

func (m *WishBoxWinCfg) GetSmallWin() int32 {
	if m != nil && m.SmallWin != nil {
		return *m.SmallWin
	}
	return 0
}

func (m *WishBoxWinCfg) GetWishBoxItemId() int64 {
	if m != nil && m.WishBoxItemId != nil {
		return *m.WishBoxItemId
	}
	return 0
}

//盲盒商品列表列表请求
type WishBoxGoodsListRequest struct {
	CurPage              *int32   `protobuf:"varint,1,opt,name=CurPage" json:"CurPage,omitempty"`
	PageSize             *int32   `protobuf:"varint,2,opt,name=PageSize" json:"PageSize,omitempty"`
	Keyword              *string  `protobuf:"bytes,3,opt,name=Keyword" json:"Keyword,omitempty"`
	Type                 *int32   `protobuf:"varint,4,opt,name=Type" json:"Type,omitempty"`
	BeginTimestamp       *int64   `protobuf:"varint,5,opt,name=BeginTimestamp" json:"BeginTimestamp,omitempty"`
	EndTimestamp         *int64   `protobuf:"varint,6,opt,name=EndTimestamp" json:"EndTimestamp,omitempty"`
	Sort                 *string  `protobuf:"bytes,7,opt,name=Sort" json:"Sort,omitempty"`
	Diamond              *int64   `protobuf:"varint,8,opt,name=Diamond" json:"Diamond,omitempty"`
	IsPreSale            *bool    `protobuf:"varint,11,opt,name=IsPreSale" json:"IsPreSale,omitempty"`
	WishBrandId          []int64  `protobuf:"varint,12,rep,name=WishBrandId" json:"WishBrandId,omitempty"`
	WishItemTypeId       []int64  `protobuf:"varint,13,rep,name=WishItemTypeId" json:"WishItemTypeId,omitempty"`
	Status               *int32   `protobuf:"varint,10,opt,name=Status" json:"Status,omitempty"`
	TimeType             *int32   `protobuf:"varint,15,opt,name=TimeType" json:"TimeType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WishBoxGoodsListRequest) Reset()         { *m = WishBoxGoodsListRequest{} }
func (m *WishBoxGoodsListRequest) String() string { return proto.CompactTextString(m) }
func (*WishBoxGoodsListRequest) ProtoMessage()    {}
func (*WishBoxGoodsListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{21}
}
func (m *WishBoxGoodsListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishBoxGoodsListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishBoxGoodsListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishBoxGoodsListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishBoxGoodsListRequest.Merge(m, src)
}
func (m *WishBoxGoodsListRequest) XXX_Size() int {
	return m.Size()
}
func (m *WishBoxGoodsListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WishBoxGoodsListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WishBoxGoodsListRequest proto.InternalMessageInfo

func (m *WishBoxGoodsListRequest) GetCurPage() int32 {
	if m != nil && m.CurPage != nil {
		return *m.CurPage
	}
	return 0
}

func (m *WishBoxGoodsListRequest) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *WishBoxGoodsListRequest) GetKeyword() string {
	if m != nil && m.Keyword != nil {
		return *m.Keyword
	}
	return ""
}

func (m *WishBoxGoodsListRequest) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *WishBoxGoodsListRequest) GetBeginTimestamp() int64 {
	if m != nil && m.BeginTimestamp != nil {
		return *m.BeginTimestamp
	}
	return 0
}

func (m *WishBoxGoodsListRequest) GetEndTimestamp() int64 {
	if m != nil && m.EndTimestamp != nil {
		return *m.EndTimestamp
	}
	return 0
}

func (m *WishBoxGoodsListRequest) GetSort() string {
	if m != nil && m.Sort != nil {
		return *m.Sort
	}
	return ""
}

func (m *WishBoxGoodsListRequest) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *WishBoxGoodsListRequest) GetIsPreSale() bool {
	if m != nil && m.IsPreSale != nil {
		return *m.IsPreSale
	}
	return false
}

func (m *WishBoxGoodsListRequest) GetWishBrandId() []int64 {
	if m != nil {
		return m.WishBrandId
	}
	return nil
}

func (m *WishBoxGoodsListRequest) GetWishItemTypeId() []int64 {
	if m != nil {
		return m.WishItemTypeId
	}
	return nil
}

func (m *WishBoxGoodsListRequest) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *WishBoxGoodsListRequest) GetTimeType() int32 {
	if m != nil && m.TimeType != nil {
		return *m.TimeType
	}
	return 0
}

type WishBoxLotteryReq struct {
	BoxId                *int64   `protobuf:"varint,1,opt,name=BoxId" json:"BoxId,omitempty"`
	ProductId            *int64   `protobuf:"varint,2,opt,name=ProductId" json:"ProductId,omitempty"`
	Account              *string  `protobuf:"bytes,3,opt,name=Account" json:"Account,omitempty"`
	Count                *int32   `protobuf:"varint,4,opt,name=Count" json:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WishBoxLotteryReq) Reset()         { *m = WishBoxLotteryReq{} }
func (m *WishBoxLotteryReq) String() string { return proto.CompactTextString(m) }
func (*WishBoxLotteryReq) ProtoMessage()    {}
func (*WishBoxLotteryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{22}
}
func (m *WishBoxLotteryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishBoxLotteryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishBoxLotteryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishBoxLotteryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishBoxLotteryReq.Merge(m, src)
}
func (m *WishBoxLotteryReq) XXX_Size() int {
	return m.Size()
}
func (m *WishBoxLotteryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WishBoxLotteryReq.DiscardUnknown(m)
}

var xxx_messageInfo_WishBoxLotteryReq proto.InternalMessageInfo

func (m *WishBoxLotteryReq) GetBoxId() int64 {
	if m != nil && m.BoxId != nil {
		return *m.BoxId
	}
	return 0
}

func (m *WishBoxLotteryReq) GetProductId() int64 {
	if m != nil && m.ProductId != nil {
		return *m.ProductId
	}
	return 0
}

func (m *WishBoxLotteryReq) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *WishBoxLotteryReq) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

type WishBoxLotteryResp struct {
	//optional int32 SuccessCount = 1; //成功的次数
	Result               *int32   `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty"`
	Msg                  *string  `protobuf:"bytes,3,opt,name=Msg" json:"Msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WishBoxLotteryResp) Reset()         { *m = WishBoxLotteryResp{} }
func (m *WishBoxLotteryResp) String() string { return proto.CompactTextString(m) }
func (*WishBoxLotteryResp) ProtoMessage()    {}
func (*WishBoxLotteryResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{23}
}
func (m *WishBoxLotteryResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishBoxLotteryResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishBoxLotteryResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishBoxLotteryResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishBoxLotteryResp.Merge(m, src)
}
func (m *WishBoxLotteryResp) XXX_Size() int {
	return m.Size()
}
func (m *WishBoxLotteryResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WishBoxLotteryResp.DiscardUnknown(m)
}

var xxx_messageInfo_WishBoxLotteryResp proto.InternalMessageInfo

func (m *WishBoxLotteryResp) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *WishBoxLotteryResp) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

// 盲盒商品列表
type WishBoxGoodsList struct {
	List                 []*WishBoxGoods `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32          `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *WishBoxGoodsList) Reset()         { *m = WishBoxGoodsList{} }
func (m *WishBoxGoodsList) String() string { return proto.CompactTextString(m) }
func (*WishBoxGoodsList) ProtoMessage()    {}
func (*WishBoxGoodsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{24}
}
func (m *WishBoxGoodsList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishBoxGoodsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishBoxGoodsList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishBoxGoodsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishBoxGoodsList.Merge(m, src)
}
func (m *WishBoxGoodsList) XXX_Size() int {
	return m.Size()
}
func (m *WishBoxGoodsList) XXX_DiscardUnknown() {
	xxx_messageInfo_WishBoxGoodsList.DiscardUnknown(m)
}

var xxx_messageInfo_WishBoxGoodsList proto.InternalMessageInfo

func (m *WishBoxGoodsList) GetList() []*WishBoxGoods {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WishBoxGoodsList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//盲盒商品下拉列表
type WishBoxGoodsSelectedList struct {
	List                 []*WishBoxGoodsWin `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *WishBoxGoodsSelectedList) Reset()         { *m = WishBoxGoodsSelectedList{} }
func (m *WishBoxGoodsSelectedList) String() string { return proto.CompactTextString(m) }
func (*WishBoxGoodsSelectedList) ProtoMessage()    {}
func (*WishBoxGoodsSelectedList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{25}
}
func (m *WishBoxGoodsSelectedList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishBoxGoodsSelectedList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishBoxGoodsSelectedList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishBoxGoodsSelectedList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishBoxGoodsSelectedList.Merge(m, src)
}
func (m *WishBoxGoodsSelectedList) XXX_Size() int {
	return m.Size()
}
func (m *WishBoxGoodsSelectedList) XXX_DiscardUnknown() {
	xxx_messageInfo_WishBoxGoodsSelectedList.DiscardUnknown(m)
}

var xxx_messageInfo_WishBoxGoodsSelectedList proto.InternalMessageInfo

func (m *WishBoxGoodsSelectedList) GetList() []*WishBoxGoodsWin {
	if m != nil {
		return m.List
	}
	return nil
}

// 盲盒商品
type WishBoxGoods struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	WishBoxId            *int64   `protobuf:"varint,2,opt,name=WishBoxId" json:"WishBoxId,omitempty"`
	Name                 *string  `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	Icon                 *string  `protobuf:"bytes,4,opt,name=Icon" json:"Icon,omitempty"`
	IsPreSale            *bool    `protobuf:"varint,5,opt,name=IsPreSale" json:"IsPreSale,omitempty"`
	WishBrandId          *int32   `protobuf:"varint,6,opt,name=WishBrandId" json:"WishBrandId,omitempty"`
	WishItemTypeId       *int32   `protobuf:"varint,7,opt,name=WishItemTypeId" json:"WishItemTypeId,omitempty"`
	UserId               *string  `protobuf:"bytes,8,opt,name=UserId" json:"UserId,omitempty"`
	Price                *int64   `protobuf:"varint,9,opt,name=Price" json:"Price,omitempty"`
	Status               *int32   `protobuf:"varint,10,opt,name=Status" json:"Status,omitempty"`
	Type                 *int32   `protobuf:"varint,11,opt,name=Type" json:"Type,omitempty"`
	StockAmount          *int32   `protobuf:"varint,12,opt,name=StockAmount" json:"StockAmount,omitempty"`
	Describe             *string  `protobuf:"bytes,13,opt,name=Describe" json:"Describe,omitempty"`
	ArrivalTime          *int64   `protobuf:"varint,14,opt,name=ArrivalTime" json:"ArrivalTime,omitempty"`
	UploadTime           *int64   `protobuf:"varint,15,opt,name=UploadTime" json:"UploadTime,omitempty"`
	SoldOutTime          *int64   `protobuf:"varint,16,opt,name=SoldOutTime" json:"SoldOutTime,omitempty"`
	Diamond              *int64   `protobuf:"varint,18,opt,name=Diamond" json:"Diamond,omitempty"`
	CreateTime           *int64   `protobuf:"varint,21,opt,name=CreateTime" json:"CreateTime,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,22,opt,name=UpdateTime" json:"UpdateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WishBoxGoods) Reset()         { *m = WishBoxGoods{} }
func (m *WishBoxGoods) String() string { return proto.CompactTextString(m) }
func (*WishBoxGoods) ProtoMessage()    {}
func (*WishBoxGoods) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{26}
}
func (m *WishBoxGoods) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishBoxGoods) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishBoxGoods.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishBoxGoods) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishBoxGoods.Merge(m, src)
}
func (m *WishBoxGoods) XXX_Size() int {
	return m.Size()
}
func (m *WishBoxGoods) XXX_DiscardUnknown() {
	xxx_messageInfo_WishBoxGoods.DiscardUnknown(m)
}

var xxx_messageInfo_WishBoxGoods proto.InternalMessageInfo

func (m *WishBoxGoods) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishBoxGoods) GetWishBoxId() int64 {
	if m != nil && m.WishBoxId != nil {
		return *m.WishBoxId
	}
	return 0
}

func (m *WishBoxGoods) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *WishBoxGoods) GetIcon() string {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return ""
}

func (m *WishBoxGoods) GetIsPreSale() bool {
	if m != nil && m.IsPreSale != nil {
		return *m.IsPreSale
	}
	return false
}

func (m *WishBoxGoods) GetWishBrandId() int32 {
	if m != nil && m.WishBrandId != nil {
		return *m.WishBrandId
	}
	return 0
}

func (m *WishBoxGoods) GetWishItemTypeId() int32 {
	if m != nil && m.WishItemTypeId != nil {
		return *m.WishItemTypeId
	}
	return 0
}

func (m *WishBoxGoods) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *WishBoxGoods) GetPrice() int64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *WishBoxGoods) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *WishBoxGoods) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *WishBoxGoods) GetStockAmount() int32 {
	if m != nil && m.StockAmount != nil {
		return *m.StockAmount
	}
	return 0
}

func (m *WishBoxGoods) GetDescribe() string {
	if m != nil && m.Describe != nil {
		return *m.Describe
	}
	return ""
}

func (m *WishBoxGoods) GetArrivalTime() int64 {
	if m != nil && m.ArrivalTime != nil {
		return *m.ArrivalTime
	}
	return 0
}

func (m *WishBoxGoods) GetUploadTime() int64 {
	if m != nil && m.UploadTime != nil {
		return *m.UploadTime
	}
	return 0
}

func (m *WishBoxGoods) GetSoldOutTime() int64 {
	if m != nil && m.SoldOutTime != nil {
		return *m.SoldOutTime
	}
	return 0
}

func (m *WishBoxGoods) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *WishBoxGoods) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishBoxGoods) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

// 商品品牌管理列表
type WishGoodsBrandList struct {
	List                 []*WishGoodsBrand `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32            `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *WishGoodsBrandList) Reset()         { *m = WishGoodsBrandList{} }
func (m *WishGoodsBrandList) String() string { return proto.CompactTextString(m) }
func (*WishGoodsBrandList) ProtoMessage()    {}
func (*WishGoodsBrandList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{27}
}
func (m *WishGoodsBrandList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishGoodsBrandList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishGoodsBrandList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishGoodsBrandList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishGoodsBrandList.Merge(m, src)
}
func (m *WishGoodsBrandList) XXX_Size() int {
	return m.Size()
}
func (m *WishGoodsBrandList) XXX_DiscardUnknown() {
	xxx_messageInfo_WishGoodsBrandList.DiscardUnknown(m)
}

var xxx_messageInfo_WishGoodsBrandList proto.InternalMessageInfo

func (m *WishGoodsBrandList) GetList() []*WishGoodsBrand {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WishGoodsBrandList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// 商品品牌管理
type WishGoodsBrand struct {
	Id                   *int32   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Status               *int32   `protobuf:"varint,3,opt,name=Status" json:"Status,omitempty"`
	IsHot                *bool    `protobuf:"varint,4,opt,name=IsHot" json:"IsHot,omitempty"`
	HotWeight            *int32   `protobuf:"varint,5,opt,name=HotWeight" json:"HotWeight,omitempty"`
	Initial              *string  `protobuf:"bytes,6,opt,name=Initial" json:"Initial,omitempty"`
	ClickCount           *int32   `protobuf:"varint,10,opt,name=ClickCount" json:"ClickCount,omitempty"`
	CreateTime           *int64   `protobuf:"varint,11,opt,name=CreateTime" json:"CreateTime,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,12,opt,name=UpdateTime" json:"UpdateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WishGoodsBrand) Reset()         { *m = WishGoodsBrand{} }
func (m *WishGoodsBrand) String() string { return proto.CompactTextString(m) }
func (*WishGoodsBrand) ProtoMessage()    {}
func (*WishGoodsBrand) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{28}
}
func (m *WishGoodsBrand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishGoodsBrand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishGoodsBrand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishGoodsBrand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishGoodsBrand.Merge(m, src)
}
func (m *WishGoodsBrand) XXX_Size() int {
	return m.Size()
}
func (m *WishGoodsBrand) XXX_DiscardUnknown() {
	xxx_messageInfo_WishGoodsBrand.DiscardUnknown(m)
}

var xxx_messageInfo_WishGoodsBrand proto.InternalMessageInfo

func (m *WishGoodsBrand) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishGoodsBrand) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *WishGoodsBrand) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *WishGoodsBrand) GetIsHot() bool {
	if m != nil && m.IsHot != nil {
		return *m.IsHot
	}
	return false
}

func (m *WishGoodsBrand) GetHotWeight() int32 {
	if m != nil && m.HotWeight != nil {
		return *m.HotWeight
	}
	return 0
}

func (m *WishGoodsBrand) GetInitial() string {
	if m != nil && m.Initial != nil {
		return *m.Initial
	}
	return ""
}

func (m *WishGoodsBrand) GetClickCount() int32 {
	if m != nil && m.ClickCount != nil {
		return *m.ClickCount
	}
	return 0
}

func (m *WishGoodsBrand) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishGoodsBrand) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

// 商品类型管理列表
type WishGoodsTypeList struct {
	List                 []*WishGoodsType `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32           `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *WishGoodsTypeList) Reset()         { *m = WishGoodsTypeList{} }
func (m *WishGoodsTypeList) String() string { return proto.CompactTextString(m) }
func (*WishGoodsTypeList) ProtoMessage()    {}
func (*WishGoodsTypeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{29}
}
func (m *WishGoodsTypeList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishGoodsTypeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishGoodsTypeList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishGoodsTypeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishGoodsTypeList.Merge(m, src)
}
func (m *WishGoodsTypeList) XXX_Size() int {
	return m.Size()
}
func (m *WishGoodsTypeList) XXX_DiscardUnknown() {
	xxx_messageInfo_WishGoodsTypeList.DiscardUnknown(m)
}

var xxx_messageInfo_WishGoodsTypeList proto.InternalMessageInfo

func (m *WishGoodsTypeList) GetList() []*WishGoodsType {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WishGoodsTypeList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// 商品类型管理
type WishGoodsType struct {
	Id                   *int32   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Status               *int32   `protobuf:"varint,3,opt,name=Status" json:"Status,omitempty"`
	IsHot                *bool    `protobuf:"varint,4,opt,name=IsHot" json:"IsHot,omitempty"`
	IsRecommend          *bool    `protobuf:"varint,5,opt,name=IsRecommend" json:"IsRecommend,omitempty"`
	Initial              *string  `protobuf:"bytes,6,opt,name=Initial" json:"Initial,omitempty"`
	HotWeight            *int32   `protobuf:"varint,7,opt,name=HotWeight" json:"HotWeight,omitempty"`
	ClickCount           *int32   `protobuf:"varint,10,opt,name=ClickCount" json:"ClickCount,omitempty"`
	CreateTime           *int64   `protobuf:"varint,11,opt,name=CreateTime" json:"CreateTime,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,12,opt,name=UpdateTime" json:"UpdateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WishGoodsType) Reset()         { *m = WishGoodsType{} }
func (m *WishGoodsType) String() string { return proto.CompactTextString(m) }
func (*WishGoodsType) ProtoMessage()    {}
func (*WishGoodsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{30}
}
func (m *WishGoodsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishGoodsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishGoodsType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishGoodsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishGoodsType.Merge(m, src)
}
func (m *WishGoodsType) XXX_Size() int {
	return m.Size()
}
func (m *WishGoodsType) XXX_DiscardUnknown() {
	xxx_messageInfo_WishGoodsType.DiscardUnknown(m)
}

var xxx_messageInfo_WishGoodsType proto.InternalMessageInfo

func (m *WishGoodsType) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishGoodsType) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *WishGoodsType) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *WishGoodsType) GetIsHot() bool {
	if m != nil && m.IsHot != nil {
		return *m.IsHot
	}
	return false
}

func (m *WishGoodsType) GetIsRecommend() bool {
	if m != nil && m.IsRecommend != nil {
		return *m.IsRecommend
	}
	return false
}

func (m *WishGoodsType) GetInitial() string {
	if m != nil && m.Initial != nil {
		return *m.Initial
	}
	return ""
}

func (m *WishGoodsType) GetHotWeight() int32 {
	if m != nil && m.HotWeight != nil {
		return *m.HotWeight
	}
	return 0
}

func (m *WishGoodsType) GetClickCount() int32 {
	if m != nil && m.ClickCount != nil {
		return *m.ClickCount
	}
	return 0
}

func (m *WishGoodsType) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishGoodsType) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

// 发货订单列表
type WishDeliveryOrderList struct {
	List                 []*WishDeliveryOrder `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32               `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *WishDeliveryOrderList) Reset()         { *m = WishDeliveryOrderList{} }
func (m *WishDeliveryOrderList) String() string { return proto.CompactTextString(m) }
func (*WishDeliveryOrderList) ProtoMessage()    {}
func (*WishDeliveryOrderList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{31}
}
func (m *WishDeliveryOrderList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishDeliveryOrderList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishDeliveryOrderList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishDeliveryOrderList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishDeliveryOrderList.Merge(m, src)
}
func (m *WishDeliveryOrderList) XXX_Size() int {
	return m.Size()
}
func (m *WishDeliveryOrderList) XXX_DiscardUnknown() {
	xxx_messageInfo_WishDeliveryOrderList.DiscardUnknown(m)
}

var xxx_messageInfo_WishDeliveryOrderList proto.InternalMessageInfo

func (m *WishDeliveryOrderList) GetList() []*WishDeliveryOrder {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WishDeliveryOrderList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// 发货订单详情列表
type WishDeliveryOrderDetailList struct {
	List                 []*share_message.PlayerExchangeItem `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                              `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *WishDeliveryOrderDetailList) Reset()         { *m = WishDeliveryOrderDetailList{} }
func (m *WishDeliveryOrderDetailList) String() string { return proto.CompactTextString(m) }
func (*WishDeliveryOrderDetailList) ProtoMessage()    {}
func (*WishDeliveryOrderDetailList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{32}
}
func (m *WishDeliveryOrderDetailList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishDeliveryOrderDetailList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishDeliveryOrderDetailList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishDeliveryOrderDetailList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishDeliveryOrderDetailList.Merge(m, src)
}
func (m *WishDeliveryOrderDetailList) XXX_Size() int {
	return m.Size()
}
func (m *WishDeliveryOrderDetailList) XXX_DiscardUnknown() {
	xxx_messageInfo_WishDeliveryOrderDetailList.DiscardUnknown(m)
}

var xxx_messageInfo_WishDeliveryOrderDetailList proto.InternalMessageInfo

func (m *WishDeliveryOrderDetailList) GetList() []*share_message.PlayerExchangeItem {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WishDeliveryOrderDetailList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// 发货订单
type WishDeliveryOrder struct {
	OrderId              *int64   `protobuf:"varint,1,opt,name=OrderId" json:"OrderId,omitempty"`
	GoodsId              *int64   `protobuf:"varint,2,opt,name=GoodsId" json:"GoodsId,omitempty"`
	GoodsPrice           *int64   `protobuf:"varint,3,opt,name=GoodsPrice" json:"GoodsPrice,omitempty"`
	PriceTotal           *int64   `protobuf:"varint,4,opt,name=PriceTotal" json:"PriceTotal,omitempty"`
	CreateTime           *int64   `protobuf:"varint,5,opt,name=CreateTime" json:"CreateTime,omitempty"`
	DeliveryTime         *int64   `protobuf:"varint,6,opt,name=DeliveryTime" json:"DeliveryTime,omitempty"`
	Status               *int32   `protobuf:"varint,7,opt,name=Status" json:"Status,omitempty"`
	DeliverName          *string  `protobuf:"bytes,8,req,name=DeliverName" json:"DeliverName,omitempty"`
	DeliverPhone         *string  `protobuf:"bytes,9,req,name=DeliverPhone" json:"DeliverPhone,omitempty"`
	DeliverAddress       *string  `protobuf:"bytes,10,req,name=DeliverAddress" json:"DeliverAddress,omitempty"`
	UserAccount          *string  `protobuf:"bytes,11,opt,name=UserAccount" json:"UserAccount,omitempty"`
	UserId               *int64   `protobuf:"varint,12,opt,name=UserId" json:"UserId,omitempty"`
	Note                 *string  `protobuf:"bytes,13,opt,name=Note" json:"Note,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,14,opt,name=UpdateTime" json:"UpdateTime,omitempty"`
	Company              *string  `protobuf:"bytes,22,opt,name=Company" json:"Company,omitempty"`
	CompanyCode          *string  `protobuf:"bytes,23,opt,name=CompanyCode" json:"CompanyCode,omitempty"`
	Odd                  *string  `protobuf:"bytes,24,opt,name=Odd" json:"Odd,omitempty"`
	Operator             *string  `protobuf:"bytes,25,opt,name=Operator" json:"Operator,omitempty"`
	GoodsName            *string  `protobuf:"bytes,30,opt,name=GoodsName" json:"GoodsName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WishDeliveryOrder) Reset()         { *m = WishDeliveryOrder{} }
func (m *WishDeliveryOrder) String() string { return proto.CompactTextString(m) }
func (*WishDeliveryOrder) ProtoMessage()    {}
func (*WishDeliveryOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{33}
}
func (m *WishDeliveryOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishDeliveryOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishDeliveryOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishDeliveryOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishDeliveryOrder.Merge(m, src)
}
func (m *WishDeliveryOrder) XXX_Size() int {
	return m.Size()
}
func (m *WishDeliveryOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_WishDeliveryOrder.DiscardUnknown(m)
}

var xxx_messageInfo_WishDeliveryOrder proto.InternalMessageInfo

func (m *WishDeliveryOrder) GetOrderId() int64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *WishDeliveryOrder) GetGoodsId() int64 {
	if m != nil && m.GoodsId != nil {
		return *m.GoodsId
	}
	return 0
}

func (m *WishDeliveryOrder) GetGoodsPrice() int64 {
	if m != nil && m.GoodsPrice != nil {
		return *m.GoodsPrice
	}
	return 0
}

func (m *WishDeliveryOrder) GetPriceTotal() int64 {
	if m != nil && m.PriceTotal != nil {
		return *m.PriceTotal
	}
	return 0
}

func (m *WishDeliveryOrder) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishDeliveryOrder) GetDeliveryTime() int64 {
	if m != nil && m.DeliveryTime != nil {
		return *m.DeliveryTime
	}
	return 0
}

func (m *WishDeliveryOrder) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *WishDeliveryOrder) GetDeliverName() string {
	if m != nil && m.DeliverName != nil {
		return *m.DeliverName
	}
	return ""
}

func (m *WishDeliveryOrder) GetDeliverPhone() string {
	if m != nil && m.DeliverPhone != nil {
		return *m.DeliverPhone
	}
	return ""
}

func (m *WishDeliveryOrder) GetDeliverAddress() string {
	if m != nil && m.DeliverAddress != nil {
		return *m.DeliverAddress
	}
	return ""
}

func (m *WishDeliveryOrder) GetUserAccount() string {
	if m != nil && m.UserAccount != nil {
		return *m.UserAccount
	}
	return ""
}

func (m *WishDeliveryOrder) GetUserId() int64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *WishDeliveryOrder) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

func (m *WishDeliveryOrder) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *WishDeliveryOrder) GetCompany() string {
	if m != nil && m.Company != nil {
		return *m.Company
	}
	return ""
}

func (m *WishDeliveryOrder) GetCompanyCode() string {
	if m != nil && m.CompanyCode != nil {
		return *m.CompanyCode
	}
	return ""
}

func (m *WishDeliveryOrder) GetOdd() string {
	if m != nil && m.Odd != nil {
		return *m.Odd
	}
	return ""
}

func (m *WishDeliveryOrder) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *WishDeliveryOrder) GetGoodsName() string {
	if m != nil && m.GoodsName != nil {
		return *m.GoodsName
	}
	return ""
}

// 填写发货信息
type UpdateDeliveryOrderCourierInfo struct {
	OrderId              *int64   `protobuf:"varint,1,opt,name=OrderId" json:"OrderId,omitempty"`
	Company              *string  `protobuf:"bytes,2,opt,name=Company" json:"Company,omitempty"`
	CompanyCode          *string  `protobuf:"bytes,3,opt,name=CompanyCode" json:"CompanyCode,omitempty"`
	Odd                  *string  `protobuf:"bytes,4,opt,name=Odd" json:"Odd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateDeliveryOrderCourierInfo) Reset()         { *m = UpdateDeliveryOrderCourierInfo{} }
func (m *UpdateDeliveryOrderCourierInfo) String() string { return proto.CompactTextString(m) }
func (*UpdateDeliveryOrderCourierInfo) ProtoMessage()    {}
func (*UpdateDeliveryOrderCourierInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{34}
}
func (m *UpdateDeliveryOrderCourierInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDeliveryOrderCourierInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDeliveryOrderCourierInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDeliveryOrderCourierInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDeliveryOrderCourierInfo.Merge(m, src)
}
func (m *UpdateDeliveryOrderCourierInfo) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDeliveryOrderCourierInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDeliveryOrderCourierInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDeliveryOrderCourierInfo proto.InternalMessageInfo

func (m *UpdateDeliveryOrderCourierInfo) GetOrderId() int64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *UpdateDeliveryOrderCourierInfo) GetCompany() string {
	if m != nil && m.Company != nil {
		return *m.Company
	}
	return ""
}

func (m *UpdateDeliveryOrderCourierInfo) GetCompanyCode() string {
	if m != nil && m.CompanyCode != nil {
		return *m.CompanyCode
	}
	return ""
}

func (m *UpdateDeliveryOrderCourierInfo) GetOdd() string {
	if m != nil && m.Odd != nil {
		return *m.Odd
	}
	return ""
}

// 回收订单列表
type WishRecycleOrderList struct {
	List                 []*WishRecycleOrder `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32              `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *WishRecycleOrderList) Reset()         { *m = WishRecycleOrderList{} }
func (m *WishRecycleOrderList) String() string { return proto.CompactTextString(m) }
func (*WishRecycleOrderList) ProtoMessage()    {}
func (*WishRecycleOrderList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{35}
}
func (m *WishRecycleOrderList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishRecycleOrderList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishRecycleOrderList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishRecycleOrderList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishRecycleOrderList.Merge(m, src)
}
func (m *WishRecycleOrderList) XXX_Size() int {
	return m.Size()
}
func (m *WishRecycleOrderList) XXX_DiscardUnknown() {
	xxx_messageInfo_WishRecycleOrderList.DiscardUnknown(m)
}

var xxx_messageInfo_WishRecycleOrderList proto.InternalMessageInfo

func (m *WishRecycleOrderList) GetList() []*WishRecycleOrder {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WishRecycleOrderList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// 回收订单
type WishRecycleOrder struct {
	OrderId              *int64   `protobuf:"varint,1,opt,name=OrderId" json:"OrderId,omitempty"`
	GoodsId              *int64   `protobuf:"varint,2,opt,name=GoodsId" json:"GoodsId,omitempty"`
	DrawPrice            *int64   `protobuf:"varint,3,opt,name=DrawPrice" json:"DrawPrice,omitempty"`
	RecycleTime          *int64   `protobuf:"varint,5,opt,name=RecycleTime" json:"RecycleTime,omitempty"`
	UserAccount          *string  `protobuf:"bytes,6,opt,name=UserAccount" json:"UserAccount,omitempty"`
	GoodsPrice           *int64   `protobuf:"varint,7,opt,name=GoodsPrice" json:"GoodsPrice,omitempty"`
	UserId               *int64   `protobuf:"varint,11,opt,name=UserId" json:"UserId,omitempty"`
	Type                 *int32   `protobuf:"varint,12,opt,name=Type" json:"Type,omitempty"`
	Status               *int32   `protobuf:"varint,40,opt,name=Status" json:"Status,omitempty"`
	InitTime             *int64   `protobuf:"varint,41,opt,name=InitTime" json:"InitTime,omitempty"`
	RefusalNote          *string  `protobuf:"bytes,48,opt,name=RefusalNote" json:"RefusalNote,omitempty"`
	Note                 *string  `protobuf:"bytes,49,opt,name=Note" json:"Note,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,50,opt,name=UpdateTime" json:"UpdateTime,omitempty"`
	RecyclePrice         *int64   `protobuf:"varint,54,opt,name=RecyclePrice" json:"RecyclePrice,omitempty"`
	RecycleDiamond       *int64   `protobuf:"varint,55,opt,name=RecycleDiamond" json:"RecycleDiamond,omitempty"`
	Operator             *string  `protobuf:"bytes,52,opt,name=Operator" json:"Operator,omitempty"`
	UserReason           *string  `protobuf:"bytes,53,opt,name=UserReason" json:"UserReason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WishRecycleOrder) Reset()         { *m = WishRecycleOrder{} }
func (m *WishRecycleOrder) String() string { return proto.CompactTextString(m) }
func (*WishRecycleOrder) ProtoMessage()    {}
func (*WishRecycleOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{36}
}
func (m *WishRecycleOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishRecycleOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishRecycleOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishRecycleOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishRecycleOrder.Merge(m, src)
}
func (m *WishRecycleOrder) XXX_Size() int {
	return m.Size()
}
func (m *WishRecycleOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_WishRecycleOrder.DiscardUnknown(m)
}

var xxx_messageInfo_WishRecycleOrder proto.InternalMessageInfo

func (m *WishRecycleOrder) GetOrderId() int64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *WishRecycleOrder) GetGoodsId() int64 {
	if m != nil && m.GoodsId != nil {
		return *m.GoodsId
	}
	return 0
}

func (m *WishRecycleOrder) GetDrawPrice() int64 {
	if m != nil && m.DrawPrice != nil {
		return *m.DrawPrice
	}
	return 0
}

func (m *WishRecycleOrder) GetRecycleTime() int64 {
	if m != nil && m.RecycleTime != nil {
		return *m.RecycleTime
	}
	return 0
}

func (m *WishRecycleOrder) GetUserAccount() string {
	if m != nil && m.UserAccount != nil {
		return *m.UserAccount
	}
	return ""
}

func (m *WishRecycleOrder) GetGoodsPrice() int64 {
	if m != nil && m.GoodsPrice != nil {
		return *m.GoodsPrice
	}
	return 0
}

func (m *WishRecycleOrder) GetUserId() int64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *WishRecycleOrder) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *WishRecycleOrder) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *WishRecycleOrder) GetInitTime() int64 {
	if m != nil && m.InitTime != nil {
		return *m.InitTime
	}
	return 0
}

func (m *WishRecycleOrder) GetRefusalNote() string {
	if m != nil && m.RefusalNote != nil {
		return *m.RefusalNote
	}
	return ""
}

func (m *WishRecycleOrder) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

func (m *WishRecycleOrder) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *WishRecycleOrder) GetRecyclePrice() int64 {
	if m != nil && m.RecyclePrice != nil {
		return *m.RecyclePrice
	}
	return 0
}

func (m *WishRecycleOrder) GetRecycleDiamond() int64 {
	if m != nil && m.RecycleDiamond != nil {
		return *m.RecycleDiamond
	}
	return 0
}

func (m *WishRecycleOrder) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *WishRecycleOrder) GetUserReason() string {
	if m != nil && m.UserReason != nil {
		return *m.UserReason
	}
	return ""
}

// 审核大额出款订单信息
type WishRecycleOrderUserInfo struct {
	PlayerId     *int64  `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty"`
	Account      *string `protobuf:"bytes,2,opt,name=Account" json:"Account,omitempty"`
	Nickname     *string `protobuf:"bytes,3,opt,name=Nickname" json:"Nickname,omitempty"`
	RealName     *string `protobuf:"bytes,4,opt,name=RealName" json:"RealName,omitempty"`
	Diamond      *int32  `protobuf:"varint,5,opt,name=Diamond" json:"Diamond,omitempty"`
	PlayerType   *int64  `protobuf:"varint,6,opt,name=PlayerType" json:"PlayerType,omitempty"`
	LoginAddr    *string `protobuf:"bytes,7,opt,name=LoginAddr" json:"LoginAddr,omitempty"`
	CurDiamond   *int64  `protobuf:"varint,8,opt,name=CurDiamond" json:"CurDiamond,omitempty"`
	RegisterTime *int64  `protobuf:"varint,9,opt,name=RegisterTime" json:"RegisterTime,omitempty"`
	OrderId      *int64  `protobuf:"varint,10,opt,name=OrderId" json:"OrderId,omitempty"`
	// 出款订单的补充内容
	BankCode             *string  `protobuf:"bytes,11,opt,name=BankCode" json:"BankCode,omitempty"`
	GoldTotal            *int64   `protobuf:"varint,12,opt,name=GoldTotal" json:"GoldTotal,omitempty"`
	TaxGold              *int64   `protobuf:"varint,13,opt,name=TaxGold" json:"TaxGold,omitempty"`
	PlatformGold         *int64   `protobuf:"varint,14,opt,name=PlatformGold" json:"PlatformGold,omitempty"`
	OwnGold              *int64   `protobuf:"varint,15,opt,name=OwnGold" json:"OwnGold,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WishRecycleOrderUserInfo) Reset()         { *m = WishRecycleOrderUserInfo{} }
func (m *WishRecycleOrderUserInfo) String() string { return proto.CompactTextString(m) }
func (*WishRecycleOrderUserInfo) ProtoMessage()    {}
func (*WishRecycleOrderUserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{37}
}
func (m *WishRecycleOrderUserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishRecycleOrderUserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishRecycleOrderUserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishRecycleOrderUserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishRecycleOrderUserInfo.Merge(m, src)
}
func (m *WishRecycleOrderUserInfo) XXX_Size() int {
	return m.Size()
}
func (m *WishRecycleOrderUserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_WishRecycleOrderUserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_WishRecycleOrderUserInfo proto.InternalMessageInfo

func (m *WishRecycleOrderUserInfo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *WishRecycleOrderUserInfo) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *WishRecycleOrderUserInfo) GetNickname() string {
	if m != nil && m.Nickname != nil {
		return *m.Nickname
	}
	return ""
}

func (m *WishRecycleOrderUserInfo) GetRealName() string {
	if m != nil && m.RealName != nil {
		return *m.RealName
	}
	return ""
}

func (m *WishRecycleOrderUserInfo) GetDiamond() int32 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *WishRecycleOrderUserInfo) GetPlayerType() int64 {
	if m != nil && m.PlayerType != nil {
		return *m.PlayerType
	}
	return 0
}

func (m *WishRecycleOrderUserInfo) GetLoginAddr() string {
	if m != nil && m.LoginAddr != nil {
		return *m.LoginAddr
	}
	return ""
}

func (m *WishRecycleOrderUserInfo) GetCurDiamond() int64 {
	if m != nil && m.CurDiamond != nil {
		return *m.CurDiamond
	}
	return 0
}

func (m *WishRecycleOrderUserInfo) GetRegisterTime() int64 {
	if m != nil && m.RegisterTime != nil {
		return *m.RegisterTime
	}
	return 0
}

func (m *WishRecycleOrderUserInfo) GetOrderId() int64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *WishRecycleOrderUserInfo) GetBankCode() string {
	if m != nil && m.BankCode != nil {
		return *m.BankCode
	}
	return ""
}

func (m *WishRecycleOrderUserInfo) GetGoldTotal() int64 {
	if m != nil && m.GoldTotal != nil {
		return *m.GoldTotal
	}
	return 0
}

func (m *WishRecycleOrderUserInfo) GetTaxGold() int64 {
	if m != nil && m.TaxGold != nil {
		return *m.TaxGold
	}
	return 0
}

func (m *WishRecycleOrderUserInfo) GetPlatformGold() int64 {
	if m != nil && m.PlatformGold != nil {
		return *m.PlatformGold
	}
	return 0
}

func (m *WishRecycleOrderUserInfo) GetOwnGold() int64 {
	if m != nil && m.OwnGold != nil {
		return *m.OwnGold
	}
	return 0
}

// 回收订单详情列表
type WishRecycleOrderDetailList struct {
	List                 []*share_message.WishRecycleItem `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                           `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *WishRecycleOrderDetailList) Reset()         { *m = WishRecycleOrderDetailList{} }
func (m *WishRecycleOrderDetailList) String() string { return proto.CompactTextString(m) }
func (*WishRecycleOrderDetailList) ProtoMessage()    {}
func (*WishRecycleOrderDetailList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{38}
}
func (m *WishRecycleOrderDetailList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishRecycleOrderDetailList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishRecycleOrderDetailList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishRecycleOrderDetailList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishRecycleOrderDetailList.Merge(m, src)
}
func (m *WishRecycleOrderDetailList) XXX_Size() int {
	return m.Size()
}
func (m *WishRecycleOrderDetailList) XXX_DiscardUnknown() {
	xxx_messageInfo_WishRecycleOrderDetailList.DiscardUnknown(m)
}

var xxx_messageInfo_WishRecycleOrderDetailList proto.InternalMessageInfo

func (m *WishRecycleOrderDetailList) GetList() []*share_message.WishRecycleItem {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WishRecycleOrderDetailList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// 许愿水池列表
type WishPoolList struct {
	List                 []*WishPool `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32      `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *WishPoolList) Reset()         { *m = WishPoolList{} }
func (m *WishPoolList) String() string { return proto.CompactTextString(m) }
func (*WishPoolList) ProtoMessage()    {}
func (*WishPoolList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{39}
}
func (m *WishPoolList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishPoolList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishPoolList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishPoolList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishPoolList.Merge(m, src)
}
func (m *WishPoolList) XXX_Size() int {
	return m.Size()
}
func (m *WishPoolList) XXX_DiscardUnknown() {
	xxx_messageInfo_WishPoolList.DiscardUnknown(m)
}

var xxx_messageInfo_WishPoolList proto.InternalMessageInfo

func (m *WishPoolList) GetList() []*WishPool {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WishPoolList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// 许愿水池
type WishPool struct {
	Id                   *int64          `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty"`
	PoolLimit            *int32          `protobuf:"varint,2,opt,name=PoolLimit" json:"PoolLimit,omitempty"`
	InitialValue         *int32          `protobuf:"varint,3,opt,name=InitialValue" json:"InitialValue,omitempty"`
	IncomeValue          *int32          `protobuf:"varint,4,opt,name=IncomeValue" json:"IncomeValue,omitempty"`
	Name                 *string         `protobuf:"bytes,15,opt,name=Name" json:"Name,omitempty"`
	CreateTime           *int64          `protobuf:"varint,16,opt,name=CreateTime" json:"CreateTime,omitempty"`
	Recycle              *int32          `protobuf:"varint,5,opt,name=Recycle" json:"Recycle,omitempty"`
	Commission           *int32          `protobuf:"varint,6,opt,name=Commission" json:"Commission,omitempty"`
	StartAward           *int32          `protobuf:"varint,7,opt,name=StartAward" json:"StartAward,omitempty"`
	CloseAward           *int32          `protobuf:"varint,8,opt,name=CloseAward" json:"CloseAward,omitempty"`
	ShowInitialValue     *int32          `protobuf:"varint,33,opt,name=ShowInitialValue" json:"ShowInitialValue,omitempty"`
	ShowRecycle          *int32          `protobuf:"varint,35,opt,name=ShowRecycle" json:"ShowRecycle,omitempty"`
	ShowCommission       *int32          `protobuf:"varint,36,opt,name=ShowCommission" json:"ShowCommission,omitempty"`
	ShowStartAward       *int32          `protobuf:"varint,37,opt,name=ShowStartAward" json:"ShowStartAward,omitempty"`
	ShowCloseAward       *int32          `protobuf:"varint,38,opt,name=ShowCloseAward" json:"ShowCloseAward,omitempty"`
	IsOpenAward          *bool           `protobuf:"varint,39,opt,name=IsOpenAward" json:"IsOpenAward,omitempty"`
	IsDefault            *bool           `protobuf:"varint,40,opt,name=IsDefault" json:"IsDefault,omitempty"`
	BigLoss              *WishPoolStatus `protobuf:"bytes,46,opt,name=BigLoss" json:"BigLoss,omitempty"`
	SmallLoss            *WishPoolStatus `protobuf:"bytes,47,opt,name=SmallLoss" json:"SmallLoss,omitempty"`
	Common               *WishPoolStatus `protobuf:"bytes,48,opt,name=Common" json:"Common,omitempty"`
	BigWin               *WishPoolStatus `protobuf:"bytes,49,opt,name=BigWin" json:"BigWin,omitempty"`
	SmallWin             *WishPoolStatus `protobuf:"bytes,50,opt,name=SmallWin" json:"SmallWin,omitempty"`
	LocalStatus          *int64          `protobuf:"varint,51,opt,name=LocalStatus" json:"LocalStatus,omitempty"`
	PoolCfgId            *int64          `protobuf:"varint,52,opt,name=PoolCfgId" json:"PoolCfgId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *WishPool) Reset()         { *m = WishPool{} }
func (m *WishPool) String() string { return proto.CompactTextString(m) }
func (*WishPool) ProtoMessage()    {}
func (*WishPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{40}
}
func (m *WishPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishPool.Merge(m, src)
}
func (m *WishPool) XXX_Size() int {
	return m.Size()
}
func (m *WishPool) XXX_DiscardUnknown() {
	xxx_messageInfo_WishPool.DiscardUnknown(m)
}

var xxx_messageInfo_WishPool proto.InternalMessageInfo

func (m *WishPool) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishPool) GetPoolLimit() int32 {
	if m != nil && m.PoolLimit != nil {
		return *m.PoolLimit
	}
	return 0
}

func (m *WishPool) GetInitialValue() int32 {
	if m != nil && m.InitialValue != nil {
		return *m.InitialValue
	}
	return 0
}

func (m *WishPool) GetIncomeValue() int32 {
	if m != nil && m.IncomeValue != nil {
		return *m.IncomeValue
	}
	return 0
}

func (m *WishPool) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *WishPool) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishPool) GetRecycle() int32 {
	if m != nil && m.Recycle != nil {
		return *m.Recycle
	}
	return 0
}

func (m *WishPool) GetCommission() int32 {
	if m != nil && m.Commission != nil {
		return *m.Commission
	}
	return 0
}

func (m *WishPool) GetStartAward() int32 {
	if m != nil && m.StartAward != nil {
		return *m.StartAward
	}
	return 0
}

func (m *WishPool) GetCloseAward() int32 {
	if m != nil && m.CloseAward != nil {
		return *m.CloseAward
	}
	return 0
}

func (m *WishPool) GetShowInitialValue() int32 {
	if m != nil && m.ShowInitialValue != nil {
		return *m.ShowInitialValue
	}
	return 0
}

func (m *WishPool) GetShowRecycle() int32 {
	if m != nil && m.ShowRecycle != nil {
		return *m.ShowRecycle
	}
	return 0
}

func (m *WishPool) GetShowCommission() int32 {
	if m != nil && m.ShowCommission != nil {
		return *m.ShowCommission
	}
	return 0
}

func (m *WishPool) GetShowStartAward() int32 {
	if m != nil && m.ShowStartAward != nil {
		return *m.ShowStartAward
	}
	return 0
}

func (m *WishPool) GetShowCloseAward() int32 {
	if m != nil && m.ShowCloseAward != nil {
		return *m.ShowCloseAward
	}
	return 0
}

func (m *WishPool) GetIsOpenAward() bool {
	if m != nil && m.IsOpenAward != nil {
		return *m.IsOpenAward
	}
	return false
}

func (m *WishPool) GetIsDefault() bool {
	if m != nil && m.IsDefault != nil {
		return *m.IsDefault
	}
	return false
}

func (m *WishPool) GetBigLoss() *WishPoolStatus {
	if m != nil {
		return m.BigLoss
	}
	return nil
}

func (m *WishPool) GetSmallLoss() *WishPoolStatus {
	if m != nil {
		return m.SmallLoss
	}
	return nil
}

func (m *WishPool) GetCommon() *WishPoolStatus {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *WishPool) GetBigWin() *WishPoolStatus {
	if m != nil {
		return m.BigWin
	}
	return nil
}

func (m *WishPool) GetSmallWin() *WishPoolStatus {
	if m != nil {
		return m.SmallWin
	}
	return nil
}

func (m *WishPool) GetLocalStatus() int64 {
	if m != nil && m.LocalStatus != nil {
		return *m.LocalStatus
	}
	return 0
}

func (m *WishPool) GetPoolCfgId() int64 {
	if m != nil && m.PoolCfgId != nil {
		return *m.PoolCfgId
	}
	return 0
}

//  水池状态
type WishPoolStatus struct {
	MaxValue             *int32   `protobuf:"varint,2,opt,name=MaxValue" json:"MaxValue,omitempty"`
	MinValue             *int32   `protobuf:"varint,3,opt,name=MinValue" json:"MinValue,omitempty"`
	ShowMaxValue         *int32   `protobuf:"varint,12,opt,name=ShowMaxValue" json:"ShowMaxValue,omitempty"`
	ShowMinValue         *int32   `protobuf:"varint,13,opt,name=ShowMinValue" json:"ShowMinValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WishPoolStatus) Reset()         { *m = WishPoolStatus{} }
func (m *WishPoolStatus) String() string { return proto.CompactTextString(m) }
func (*WishPoolStatus) ProtoMessage()    {}
func (*WishPoolStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{41}
}
func (m *WishPoolStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishPoolStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishPoolStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishPoolStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishPoolStatus.Merge(m, src)
}
func (m *WishPoolStatus) XXX_Size() int {
	return m.Size()
}
func (m *WishPoolStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_WishPoolStatus.DiscardUnknown(m)
}

var xxx_messageInfo_WishPoolStatus proto.InternalMessageInfo

func (m *WishPoolStatus) GetMaxValue() int32 {
	if m != nil && m.MaxValue != nil {
		return *m.MaxValue
	}
	return 0
}

func (m *WishPoolStatus) GetMinValue() int32 {
	if m != nil && m.MinValue != nil {
		return *m.MinValue
	}
	return 0
}

func (m *WishPoolStatus) GetShowMaxValue() int32 {
	if m != nil && m.ShowMaxValue != nil {
		return *m.ShowMaxValue
	}
	return 0
}

func (m *WishPoolStatus) GetShowMinValue() int32 {
	if m != nil && m.ShowMinValue != nil {
		return *m.ShowMinValue
	}
	return 0
}

// +++++++++++++++++++++ 统计报表
// 许愿池报表列表
type WishPoolReportList struct {
	List                 []*share_message.WishPoolReport `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                          `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *WishPoolReportList) Reset()         { *m = WishPoolReportList{} }
func (m *WishPoolReportList) String() string { return proto.CompactTextString(m) }
func (*WishPoolReportList) ProtoMessage()    {}
func (*WishPoolReportList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{42}
}
func (m *WishPoolReportList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishPoolReportList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishPoolReportList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishPoolReportList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishPoolReportList.Merge(m, src)
}
func (m *WishPoolReportList) XXX_Size() int {
	return m.Size()
}
func (m *WishPoolReportList) XXX_DiscardUnknown() {
	xxx_messageInfo_WishPoolReportList.DiscardUnknown(m)
}

var xxx_messageInfo_WishPoolReportList proto.InternalMessageInfo

func (m *WishPoolReportList) GetList() []*share_message.WishPoolReport {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WishPoolReportList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//盲盒报表列表
type WishBoxReportList struct {
	List                 []*share_message.WishBoxReport `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                         `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *WishBoxReportList) Reset()         { *m = WishBoxReportList{} }
func (m *WishBoxReportList) String() string { return proto.CompactTextString(m) }
func (*WishBoxReportList) ProtoMessage()    {}
func (*WishBoxReportList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{43}
}
func (m *WishBoxReportList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishBoxReportList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishBoxReportList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishBoxReportList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishBoxReportList.Merge(m, src)
}
func (m *WishBoxReportList) XXX_Size() int {
	return m.Size()
}
func (m *WishBoxReportList) XXX_DiscardUnknown() {
	xxx_messageInfo_WishBoxReportList.DiscardUnknown(m)
}

var xxx_messageInfo_WishBoxReportList proto.InternalMessageInfo

func (m *WishBoxReportList) GetList() []*share_message.WishBoxReport {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WishBoxReportList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//盲盒详情报表列表
type WishBoxDetailReportList struct {
	List                 []*share_message.WishBoxDetailReport `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                               `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *WishBoxDetailReportList) Reset()         { *m = WishBoxDetailReportList{} }
func (m *WishBoxDetailReportList) String() string { return proto.CompactTextString(m) }
func (*WishBoxDetailReportList) ProtoMessage()    {}
func (*WishBoxDetailReportList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{44}
}
func (m *WishBoxDetailReportList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishBoxDetailReportList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishBoxDetailReportList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishBoxDetailReportList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishBoxDetailReportList.Merge(m, src)
}
func (m *WishBoxDetailReportList) XXX_Size() int {
	return m.Size()
}
func (m *WishBoxDetailReportList) XXX_DiscardUnknown() {
	xxx_messageInfo_WishBoxDetailReportList.DiscardUnknown(m)
}

var xxx_messageInfo_WishBoxDetailReportList proto.InternalMessageInfo

func (m *WishBoxDetailReportList) GetList() []*share_message.WishBoxDetailReport {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WishBoxDetailReportList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// 商品报表列表
type WishItemReportList struct {
	List                 []*share_message.WishItemReport `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                          `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *WishItemReportList) Reset()         { *m = WishItemReportList{} }
func (m *WishItemReportList) String() string { return proto.CompactTextString(m) }
func (*WishItemReportList) ProtoMessage()    {}
func (*WishItemReportList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{45}
}
func (m *WishItemReportList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishItemReportList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishItemReportList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishItemReportList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishItemReportList.Merge(m, src)
}
func (m *WishItemReportList) XXX_Size() int {
	return m.Size()
}
func (m *WishItemReportList) XXX_DiscardUnknown() {
	xxx_messageInfo_WishItemReportList.DiscardUnknown(m)
}

var xxx_messageInfo_WishItemReportList proto.InternalMessageInfo

func (m *WishItemReportList) GetList() []*share_message.WishItemReport {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WishItemReportList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// 导出测试数据-玩家物品列表
type TestPlayerWishItemList struct {
	List                 []*share_message.PlayerWishItem `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                          `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *TestPlayerWishItemList) Reset()         { *m = TestPlayerWishItemList{} }
func (m *TestPlayerWishItemList) String() string { return proto.CompactTextString(m) }
func (*TestPlayerWishItemList) ProtoMessage()    {}
func (*TestPlayerWishItemList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{46}
}
func (m *TestPlayerWishItemList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestPlayerWishItemList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestPlayerWishItemList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestPlayerWishItemList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestPlayerWishItemList.Merge(m, src)
}
func (m *TestPlayerWishItemList) XXX_Size() int {
	return m.Size()
}
func (m *TestPlayerWishItemList) XXX_DiscardUnknown() {
	xxx_messageInfo_TestPlayerWishItemList.DiscardUnknown(m)
}

var xxx_messageInfo_TestPlayerWishItemList proto.InternalMessageInfo

func (m *TestPlayerWishItemList) GetList() []*share_message.PlayerWishItem {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *TestPlayerWishItemList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// 导出测试数据-水池流水日志
type TestWishPoolLogList struct {
	List                 []*share_message.WishPoolLog `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                       `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *TestWishPoolLogList) Reset()         { *m = TestWishPoolLogList{} }
func (m *TestWishPoolLogList) String() string { return proto.CompactTextString(m) }
func (*TestWishPoolLogList) ProtoMessage()    {}
func (*TestWishPoolLogList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{47}
}
func (m *TestWishPoolLogList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestWishPoolLogList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestWishPoolLogList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestWishPoolLogList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestWishPoolLogList.Merge(m, src)
}
func (m *TestWishPoolLogList) XXX_Size() int {
	return m.Size()
}
func (m *TestWishPoolLogList) XXX_DiscardUnknown() {
	xxx_messageInfo_TestWishPoolLogList.DiscardUnknown(m)
}

var xxx_messageInfo_TestWishPoolLogList proto.InternalMessageInfo

func (m *TestWishPoolLogList) GetList() []*share_message.WishPoolLog {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *TestWishPoolLogList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// 导出测试数据-水池抽水日志
type TestWishPoolPumpLogList struct {
	List                 []*share_message.WishPoolPumpLog `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                           `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *TestWishPoolPumpLogList) Reset()         { *m = TestWishPoolPumpLogList{} }
func (m *TestWishPoolPumpLogList) String() string { return proto.CompactTextString(m) }
func (*TestWishPoolPumpLogList) ProtoMessage()    {}
func (*TestWishPoolPumpLogList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{48}
}
func (m *TestWishPoolPumpLogList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestWishPoolPumpLogList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestWishPoolPumpLogList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestWishPoolPumpLogList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestWishPoolPumpLogList.Merge(m, src)
}
func (m *TestWishPoolPumpLogList) XXX_Size() int {
	return m.Size()
}
func (m *TestWishPoolPumpLogList) XXX_DiscardUnknown() {
	xxx_messageInfo_TestWishPoolPumpLogList.DiscardUnknown(m)
}

var xxx_messageInfo_TestWishPoolPumpLogList proto.InternalMessageInfo

func (m *TestWishPoolPumpLogList) GetList() []*share_message.WishPoolPumpLog {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *TestWishPoolPumpLogList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// 导出测试数据-水池抽水日志
type TestWishPoolBoxPoolInfoList struct {
	List                 []*share_message.WishPool `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                    `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *TestWishPoolBoxPoolInfoList) Reset()         { *m = TestWishPoolBoxPoolInfoList{} }
func (m *TestWishPoolBoxPoolInfoList) String() string { return proto.CompactTextString(m) }
func (*TestWishPoolBoxPoolInfoList) ProtoMessage()    {}
func (*TestWishPoolBoxPoolInfoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{49}
}
func (m *TestWishPoolBoxPoolInfoList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestWishPoolBoxPoolInfoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestWishPoolBoxPoolInfoList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestWishPoolBoxPoolInfoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestWishPoolBoxPoolInfoList.Merge(m, src)
}
func (m *TestWishPoolBoxPoolInfoList) XXX_Size() int {
	return m.Size()
}
func (m *TestWishPoolBoxPoolInfoList) XXX_DiscardUnknown() {
	xxx_messageInfo_TestWishPoolBoxPoolInfoList.DiscardUnknown(m)
}

var xxx_messageInfo_TestWishPoolBoxPoolInfoList proto.InternalMessageInfo

func (m *TestWishPoolBoxPoolInfoList) GetList() []*share_message.WishPool {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *TestWishPoolBoxPoolInfoList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// +++++++++++++++++++++ 抽奖记录
// 抽奖记录列表
type DrawRecordList struct {
	List                 []*DrawRecord `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32        `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DrawRecordList) Reset()         { *m = DrawRecordList{} }
func (m *DrawRecordList) String() string { return proto.CompactTextString(m) }
func (*DrawRecordList) ProtoMessage()    {}
func (*DrawRecordList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{50}
}
func (m *DrawRecordList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DrawRecordList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DrawRecordList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DrawRecordList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DrawRecordList.Merge(m, src)
}
func (m *DrawRecordList) XXX_Size() int {
	return m.Size()
}
func (m *DrawRecordList) XXX_DiscardUnknown() {
	xxx_messageInfo_DrawRecordList.DiscardUnknown(m)
}

var xxx_messageInfo_DrawRecordList proto.InternalMessageInfo

func (m *DrawRecordList) GetList() []*DrawRecord {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *DrawRecordList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// 抽奖记录
type DrawRecord struct {
	UserAccount          *string  `protobuf:"bytes,1,opt,name=UserAccount" json:"UserAccount,omitempty"`
	UserId               *int64   `protobuf:"varint,2,opt,name=UserId" json:"UserId,omitempty"`
	Phone                *string  `protobuf:"bytes,3,opt,name=Phone" json:"Phone,omitempty"`
	AddBoxCount          *int32   `protobuf:"varint,4,opt,name=AddBoxCount" json:"AddBoxCount,omitempty"`
	WishItemCount        *int32   `protobuf:"varint,5,opt,name=WishItemCount" json:"WishItemCount,omitempty"`
	DrawCount            *int32   `protobuf:"varint,6,opt,name=DrawCount" json:"DrawCount,omitempty"`
	DrawGoldTotal        *int64   `protobuf:"varint,7,opt,name=DrawGoldTotal" json:"DrawGoldTotal,omitempty"`
	LastDrawTime         *int64   `protobuf:"varint,8,opt,name=LastDrawTime" json:"LastDrawTime,omitempty"`
	HaveItemCount        *int32   `protobuf:"varint,9,opt,name=HaveItemCount" json:"HaveItemCount,omitempty"`
	DelItemCount         *int32   `protobuf:"varint,10,opt,name=DelItemCount" json:"DelItemCount,omitempty"`
	UserNickname         *string  `protobuf:"bytes,11,opt,name=UserNickname" json:"UserNickname,omitempty"`
	UserType             *int32   `protobuf:"varint,12,opt,name=UserType" json:"UserType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DrawRecord) Reset()         { *m = DrawRecord{} }
func (m *DrawRecord) String() string { return proto.CompactTextString(m) }
func (*DrawRecord) ProtoMessage()    {}
func (*DrawRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{51}
}
func (m *DrawRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DrawRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DrawRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DrawRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DrawRecord.Merge(m, src)
}
func (m *DrawRecord) XXX_Size() int {
	return m.Size()
}
func (m *DrawRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DrawRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DrawRecord proto.InternalMessageInfo

func (m *DrawRecord) GetUserAccount() string {
	if m != nil && m.UserAccount != nil {
		return *m.UserAccount
	}
	return ""
}

func (m *DrawRecord) GetUserId() int64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *DrawRecord) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *DrawRecord) GetAddBoxCount() int32 {
	if m != nil && m.AddBoxCount != nil {
		return *m.AddBoxCount
	}
	return 0
}

func (m *DrawRecord) GetWishItemCount() int32 {
	if m != nil && m.WishItemCount != nil {
		return *m.WishItemCount
	}
	return 0
}

func (m *DrawRecord) GetDrawCount() int32 {
	if m != nil && m.DrawCount != nil {
		return *m.DrawCount
	}
	return 0
}

func (m *DrawRecord) GetDrawGoldTotal() int64 {
	if m != nil && m.DrawGoldTotal != nil {
		return *m.DrawGoldTotal
	}
	return 0
}

func (m *DrawRecord) GetLastDrawTime() int64 {
	if m != nil && m.LastDrawTime != nil {
		return *m.LastDrawTime
	}
	return 0
}

func (m *DrawRecord) GetHaveItemCount() int32 {
	if m != nil && m.HaveItemCount != nil {
		return *m.HaveItemCount
	}
	return 0
}

func (m *DrawRecord) GetDelItemCount() int32 {
	if m != nil && m.DelItemCount != nil {
		return *m.DelItemCount
	}
	return 0
}

func (m *DrawRecord) GetUserNickname() string {
	if m != nil && m.UserNickname != nil {
		return *m.UserNickname
	}
	return ""
}

func (m *DrawRecord) GetUserType() int32 {
	if m != nil && m.UserType != nil {
		return *m.UserType
	}
	return 0
}

// 收藏盲盒记录列表
type AddBoxRecordList struct {
	List                 []*AddBoxRecord `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32          `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *AddBoxRecordList) Reset()         { *m = AddBoxRecordList{} }
func (m *AddBoxRecordList) String() string { return proto.CompactTextString(m) }
func (*AddBoxRecordList) ProtoMessage()    {}
func (*AddBoxRecordList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{52}
}
func (m *AddBoxRecordList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddBoxRecordList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddBoxRecordList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddBoxRecordList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddBoxRecordList.Merge(m, src)
}
func (m *AddBoxRecordList) XXX_Size() int {
	return m.Size()
}
func (m *AddBoxRecordList) XXX_DiscardUnknown() {
	xxx_messageInfo_AddBoxRecordList.DiscardUnknown(m)
}

var xxx_messageInfo_AddBoxRecordList proto.InternalMessageInfo

func (m *AddBoxRecordList) GetList() []*AddBoxRecord {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *AddBoxRecordList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// 收藏盲盒记录
type AddBoxRecord struct {
	UserId               *int64   `protobuf:"varint,2,opt,name=UserId" json:"UserId,omitempty"`
	BoxId                *int64   `protobuf:"varint,3,opt,name=BoxId" json:"BoxId,omitempty"`
	BoxName              *string  `protobuf:"bytes,4,opt,name=BoxName" json:"BoxName,omitempty"`
	CreateTime           *int64   `protobuf:"varint,5,opt,name=CreateTime" json:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddBoxRecord) Reset()         { *m = AddBoxRecord{} }
func (m *AddBoxRecord) String() string { return proto.CompactTextString(m) }
func (*AddBoxRecord) ProtoMessage()    {}
func (*AddBoxRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{53}
}
func (m *AddBoxRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddBoxRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddBoxRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddBoxRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddBoxRecord.Merge(m, src)
}
func (m *AddBoxRecord) XXX_Size() int {
	return m.Size()
}
func (m *AddBoxRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_AddBoxRecord.DiscardUnknown(m)
}

var xxx_messageInfo_AddBoxRecord proto.InternalMessageInfo

func (m *AddBoxRecord) GetUserId() int64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *AddBoxRecord) GetBoxId() int64 {
	if m != nil && m.BoxId != nil {
		return *m.BoxId
	}
	return 0
}

func (m *AddBoxRecord) GetBoxName() string {
	if m != nil && m.BoxName != nil {
		return *m.BoxName
	}
	return ""
}

func (m *AddBoxRecord) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

// 许愿物品记录列表
type WishGoodsRecordList struct {
	List                 []*WishGoodsRecord `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32             `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *WishGoodsRecordList) Reset()         { *m = WishGoodsRecordList{} }
func (m *WishGoodsRecordList) String() string { return proto.CompactTextString(m) }
func (*WishGoodsRecordList) ProtoMessage()    {}
func (*WishGoodsRecordList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{54}
}
func (m *WishGoodsRecordList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishGoodsRecordList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishGoodsRecordList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishGoodsRecordList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishGoodsRecordList.Merge(m, src)
}
func (m *WishGoodsRecordList) XXX_Size() int {
	return m.Size()
}
func (m *WishGoodsRecordList) XXX_DiscardUnknown() {
	xxx_messageInfo_WishGoodsRecordList.DiscardUnknown(m)
}

var xxx_messageInfo_WishGoodsRecordList proto.InternalMessageInfo

func (m *WishGoodsRecordList) GetList() []*WishGoodsRecord {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WishGoodsRecordList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// 许愿物品记录
type WishGoodsRecord struct {
	UserId               *int64   `protobuf:"varint,2,opt,name=UserId" json:"UserId,omitempty"`
	GoodsId              *int64   `protobuf:"varint,3,opt,name=GoodsId" json:"GoodsId,omitempty"`
	BoxName              *string  `protobuf:"bytes,4,opt,name=BoxName" json:"BoxName,omitempty"`
	GoodsName            *string  `protobuf:"bytes,5,opt,name=GoodsName" json:"GoodsName,omitempty"`
	CreateTime           *int64   `protobuf:"varint,6,opt,name=CreateTime" json:"CreateTime,omitempty"`
	BoxId                *int64   `protobuf:"varint,7,opt,name=BoxId" json:"BoxId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WishGoodsRecord) Reset()         { *m = WishGoodsRecord{} }
func (m *WishGoodsRecord) String() string { return proto.CompactTextString(m) }
func (*WishGoodsRecord) ProtoMessage()    {}
func (*WishGoodsRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{55}
}
func (m *WishGoodsRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishGoodsRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishGoodsRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishGoodsRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishGoodsRecord.Merge(m, src)
}
func (m *WishGoodsRecord) XXX_Size() int {
	return m.Size()
}
func (m *WishGoodsRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_WishGoodsRecord.DiscardUnknown(m)
}

var xxx_messageInfo_WishGoodsRecord proto.InternalMessageInfo

func (m *WishGoodsRecord) GetUserId() int64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *WishGoodsRecord) GetGoodsId() int64 {
	if m != nil && m.GoodsId != nil {
		return *m.GoodsId
	}
	return 0
}

func (m *WishGoodsRecord) GetBoxName() string {
	if m != nil && m.BoxName != nil {
		return *m.BoxName
	}
	return ""
}

func (m *WishGoodsRecord) GetGoodsName() string {
	if m != nil && m.GoodsName != nil {
		return *m.GoodsName
	}
	return ""
}

func (m *WishGoodsRecord) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishGoodsRecord) GetBoxId() int64 {
	if m != nil && m.BoxId != nil {
		return *m.BoxId
	}
	return 0
}

// 抽奖盲盒记录列表
type DrawBoxRecordList struct {
	List                 []*DrawBoxRecord `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32           `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DrawBoxRecordList) Reset()         { *m = DrawBoxRecordList{} }
func (m *DrawBoxRecordList) String() string { return proto.CompactTextString(m) }
func (*DrawBoxRecordList) ProtoMessage()    {}
func (*DrawBoxRecordList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{56}
}
func (m *DrawBoxRecordList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DrawBoxRecordList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DrawBoxRecordList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DrawBoxRecordList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DrawBoxRecordList.Merge(m, src)
}
func (m *DrawBoxRecordList) XXX_Size() int {
	return m.Size()
}
func (m *DrawBoxRecordList) XXX_DiscardUnknown() {
	xxx_messageInfo_DrawBoxRecordList.DiscardUnknown(m)
}

var xxx_messageInfo_DrawBoxRecordList proto.InternalMessageInfo

func (m *DrawBoxRecordList) GetList() []*DrawBoxRecord {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *DrawBoxRecordList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// 中奖记录记录
type DrawBoxRecord struct {
	UserId               *int64   `protobuf:"varint,2,opt,name=UserId" json:"UserId,omitempty"`
	BoxId                *int64   `protobuf:"varint,3,opt,name=BoxId" json:"BoxId,omitempty"`
	BoxName              *string  `protobuf:"bytes,5,opt,name=BoxName" json:"BoxName,omitempty"`
	DrawCount            *int32   `protobuf:"varint,6,opt,name=DrawCount" json:"DrawCount,omitempty"`
	LastTime             *int64   `protobuf:"varint,7,opt,name=LastTime" json:"LastTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DrawBoxRecord) Reset()         { *m = DrawBoxRecord{} }
func (m *DrawBoxRecord) String() string { return proto.CompactTextString(m) }
func (*DrawBoxRecord) ProtoMessage()    {}
func (*DrawBoxRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{57}
}
func (m *DrawBoxRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DrawBoxRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DrawBoxRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DrawBoxRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DrawBoxRecord.Merge(m, src)
}
func (m *DrawBoxRecord) XXX_Size() int {
	return m.Size()
}
func (m *DrawBoxRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DrawBoxRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DrawBoxRecord proto.InternalMessageInfo

func (m *DrawBoxRecord) GetUserId() int64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *DrawBoxRecord) GetBoxId() int64 {
	if m != nil && m.BoxId != nil {
		return *m.BoxId
	}
	return 0
}

func (m *DrawBoxRecord) GetBoxName() string {
	if m != nil && m.BoxName != nil {
		return *m.BoxName
	}
	return ""
}

func (m *DrawBoxRecord) GetDrawCount() int32 {
	if m != nil && m.DrawCount != nil {
		return *m.DrawCount
	}
	return 0
}

func (m *DrawBoxRecord) GetLastTime() int64 {
	if m != nil && m.LastTime != nil {
		return *m.LastTime
	}
	return 0
}

// 中奖记录记录列表
type WinRecordList struct {
	List                 []*WinRecord `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32       `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *WinRecordList) Reset()         { *m = WinRecordList{} }
func (m *WinRecordList) String() string { return proto.CompactTextString(m) }
func (*WinRecordList) ProtoMessage()    {}
func (*WinRecordList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{58}
}
func (m *WinRecordList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WinRecordList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WinRecordList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WinRecordList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WinRecordList.Merge(m, src)
}
func (m *WinRecordList) XXX_Size() int {
	return m.Size()
}
func (m *WinRecordList) XXX_DiscardUnknown() {
	xxx_messageInfo_WinRecordList.DiscardUnknown(m)
}

var xxx_messageInfo_WinRecordList proto.InternalMessageInfo

func (m *WinRecordList) GetList() []*WinRecord {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WinRecordList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// 中奖记录记录
type WinRecord struct {
	UserId               *int64   `protobuf:"varint,2,opt,name=UserId" json:"UserId,omitempty"`
	GoodsId              *int64   `protobuf:"varint,3,opt,name=GoodsId" json:"GoodsId,omitempty"`
	GoodsName            *string  `protobuf:"bytes,5,opt,name=GoodsName" json:"GoodsName,omitempty"`
	HasWish              *bool    `protobuf:"varint,6,opt,name=HasWish" json:"HasWish,omitempty"`
	CreateTime           *int64   `protobuf:"varint,7,opt,name=CreateTime" json:"CreateTime,omitempty"`
	BoxItemId            *int64   `protobuf:"varint,13,opt,name=BoxItemId" json:"BoxItemId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WinRecord) Reset()         { *m = WinRecord{} }
func (m *WinRecord) String() string { return proto.CompactTextString(m) }
func (*WinRecord) ProtoMessage()    {}
func (*WinRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{59}
}
func (m *WinRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WinRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WinRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WinRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WinRecord.Merge(m, src)
}
func (m *WinRecord) XXX_Size() int {
	return m.Size()
}
func (m *WinRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_WinRecord.DiscardUnknown(m)
}

var xxx_messageInfo_WinRecord proto.InternalMessageInfo

func (m *WinRecord) GetUserId() int64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *WinRecord) GetGoodsId() int64 {
	if m != nil && m.GoodsId != nil {
		return *m.GoodsId
	}
	return 0
}

func (m *WinRecord) GetGoodsName() string {
	if m != nil && m.GoodsName != nil {
		return *m.GoodsName
	}
	return ""
}

func (m *WinRecord) GetHasWish() bool {
	if m != nil && m.HasWish != nil {
		return *m.HasWish
	}
	return false
}

func (m *WinRecord) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WinRecord) GetBoxItemId() int64 {
	if m != nil && m.BoxItemId != nil {
		return *m.BoxItemId
	}
	return 0
}

// 现有物品列表
type HaveItemList struct {
	List                 []*HaveItem `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32      `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *HaveItemList) Reset()         { *m = HaveItemList{} }
func (m *HaveItemList) String() string { return proto.CompactTextString(m) }
func (*HaveItemList) ProtoMessage()    {}
func (*HaveItemList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{60}
}
func (m *HaveItemList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HaveItemList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HaveItemList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HaveItemList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HaveItemList.Merge(m, src)
}
func (m *HaveItemList) XXX_Size() int {
	return m.Size()
}
func (m *HaveItemList) XXX_DiscardUnknown() {
	xxx_messageInfo_HaveItemList.DiscardUnknown(m)
}

var xxx_messageInfo_HaveItemList proto.InternalMessageInfo

func (m *HaveItemList) GetList() []*HaveItem {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *HaveItemList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// 现有物品
type HaveItem struct {
	GoodsId              *int64   `protobuf:"varint,3,opt,name=GoodsId" json:"GoodsId,omitempty"`
	GoodsName            *string  `protobuf:"bytes,5,opt,name=GoodsName" json:"GoodsName,omitempty"`
	CreateTime           *int64   `protobuf:"varint,7,opt,name=CreateTime" json:"CreateTime,omitempty"`
	BoxId                *int64   `protobuf:"varint,8,opt,name=BoxId" json:"BoxId,omitempty"`
	BoxName              *string  `protobuf:"bytes,9,opt,name=BoxName" json:"BoxName,omitempty"`
	PlayerItemId         *int64   `protobuf:"varint,10,opt,name=PlayerItemId" json:"PlayerItemId,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,11,opt,name=UpdateTime" json:"UpdateTime,omitempty"`
	Operator             *string  `protobuf:"bytes,12,opt,name=Operator" json:"Operator,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HaveItem) Reset()         { *m = HaveItem{} }
func (m *HaveItem) String() string { return proto.CompactTextString(m) }
func (*HaveItem) ProtoMessage()    {}
func (*HaveItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{61}
}
func (m *HaveItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HaveItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HaveItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HaveItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HaveItem.Merge(m, src)
}
func (m *HaveItem) XXX_Size() int {
	return m.Size()
}
func (m *HaveItem) XXX_DiscardUnknown() {
	xxx_messageInfo_HaveItem.DiscardUnknown(m)
}

var xxx_messageInfo_HaveItem proto.InternalMessageInfo

func (m *HaveItem) GetGoodsId() int64 {
	if m != nil && m.GoodsId != nil {
		return *m.GoodsId
	}
	return 0
}

func (m *HaveItem) GetGoodsName() string {
	if m != nil && m.GoodsName != nil {
		return *m.GoodsName
	}
	return ""
}

func (m *HaveItem) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *HaveItem) GetBoxId() int64 {
	if m != nil && m.BoxId != nil {
		return *m.BoxId
	}
	return 0
}

func (m *HaveItem) GetBoxName() string {
	if m != nil && m.BoxName != nil {
		return *m.BoxName
	}
	return ""
}

func (m *HaveItem) GetPlayerItemId() int64 {
	if m != nil && m.PlayerItemId != nil {
		return *m.PlayerItemId
	}
	return 0
}

func (m *HaveItem) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *HaveItem) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

// 参数设置
type PriceSection struct {
	OneMin               *int32   `protobuf:"varint,1,opt,name=OneMin" json:"OneMin,omitempty"`
	OneMax               *int32   `protobuf:"varint,2,opt,name=OneMax" json:"OneMax,omitempty"`
	TwoMin               *int32   `protobuf:"varint,3,opt,name=TwoMin" json:"TwoMin,omitempty"`
	TwoMax               *int32   `protobuf:"varint,4,opt,name=TwoMax" json:"TwoMax,omitempty"`
	ThreeMin             *int32   `protobuf:"varint,5,opt,name=ThreeMin" json:"ThreeMin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PriceSection) Reset()         { *m = PriceSection{} }
func (m *PriceSection) String() string { return proto.CompactTextString(m) }
func (*PriceSection) ProtoMessage()    {}
func (*PriceSection) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{62}
}
func (m *PriceSection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceSection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceSection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriceSection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceSection.Merge(m, src)
}
func (m *PriceSection) XXX_Size() int {
	return m.Size()
}
func (m *PriceSection) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceSection.DiscardUnknown(m)
}

var xxx_messageInfo_PriceSection proto.InternalMessageInfo

func (m *PriceSection) GetOneMin() int32 {
	if m != nil && m.OneMin != nil {
		return *m.OneMin
	}
	return 0
}

func (m *PriceSection) GetOneMax() int32 {
	if m != nil && m.OneMax != nil {
		return *m.OneMax
	}
	return 0
}

func (m *PriceSection) GetTwoMin() int32 {
	if m != nil && m.TwoMin != nil {
		return *m.TwoMin
	}
	return 0
}

func (m *PriceSection) GetTwoMax() int32 {
	if m != nil && m.TwoMax != nil {
		return *m.TwoMax
	}
	return 0
}

func (m *PriceSection) GetThreeMin() int32 {
	if m != nil && m.ThreeMin != nil {
		return *m.ThreeMin
	}
	return 0
}

// 邮寄参数设置
type WishMailSection struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"Id,omitempty"`
	Postage1             *int32   `protobuf:"varint,2,opt,name=Postage1" json:"Postage1,omitempty"`
	Postage2             *int32   `protobuf:"varint,4,opt,name=Postage2" json:"Postage2,omitempty"`
	Postage3             *int32   `protobuf:"varint,5,opt,name=Postage3" json:"Postage3,omitempty"`
	RemoteAreaList       []string `protobuf:"bytes,10,rep,name=RemoteAreaList" json:"RemoteAreaList,omitempty"`
	FreeNumber           *int32   `protobuf:"varint,12,opt,name=FreeNumber" json:"FreeNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WishMailSection) Reset()         { *m = WishMailSection{} }
func (m *WishMailSection) String() string { return proto.CompactTextString(m) }
func (*WishMailSection) ProtoMessage()    {}
func (*WishMailSection) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{63}
}
func (m *WishMailSection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishMailSection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishMailSection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishMailSection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishMailSection.Merge(m, src)
}
func (m *WishMailSection) XXX_Size() int {
	return m.Size()
}
func (m *WishMailSection) XXX_DiscardUnknown() {
	xxx_messageInfo_WishMailSection.DiscardUnknown(m)
}

var xxx_messageInfo_WishMailSection proto.InternalMessageInfo

func (m *WishMailSection) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *WishMailSection) GetPostage1() int32 {
	if m != nil && m.Postage1 != nil {
		return *m.Postage1
	}
	return 0
}

func (m *WishMailSection) GetPostage2() int32 {
	if m != nil && m.Postage2 != nil {
		return *m.Postage2
	}
	return 0
}

func (m *WishMailSection) GetPostage3() int32 {
	if m != nil && m.Postage3 != nil {
		return *m.Postage3
	}
	return 0
}

func (m *WishMailSection) GetRemoteAreaList() []string {
	if m != nil {
		return m.RemoteAreaList
	}
	return nil
}

func (m *WishMailSection) GetFreeNumber() int32 {
	if m != nil && m.FreeNumber != nil {
		return *m.FreeNumber
	}
	return 0
}

// 物品回收参数设置
type WishRecycleSection struct {
	Id          *string `protobuf:"bytes,1,opt,name=Id" json:"Id,omitempty"`
	Platform    *int32  `protobuf:"varint,4,opt,name=Platform" json:"Platform,omitempty"`
	DayTopCount *int32  `protobuf:"varint,6,opt,name=DayTopCount" json:"DayTopCount,omitempty"`
	// 新版
	// 回收公功能
	Player              *int32 `protobuf:"varint,9,opt,name=Player" json:"Player,omitempty"`
	Status              *bool  `protobuf:"varint,10,opt,name=Status" json:"Status,omitempty"`
	DayMoneyTopCount    *int32 `protobuf:"varint,11,opt,name=DayMoneyTopCount" json:"DayMoneyTopCount,omitempty"`
	DayMoneyTop         *int64 `protobuf:"varint,12,opt,name=DayMoneyTop" json:"DayMoneyTop,omitempty"`
	OrderThresholdMoney *int64 `protobuf:"varint,13,opt,name=OrderThresholdMoney" json:"OrderThresholdMoney,omitempty"`
	DayDiamondTopCount  *int32 `protobuf:"varint,15,opt,name=DayDiamondTopCount" json:"DayDiamondTopCount,omitempty"`
	DayDiamondTop       *int64 `protobuf:"varint,16,opt,name=DayDiamondTop" json:"DayDiamondTop,omitempty"`
	OrderThreshold      *int64 `protobuf:"varint,17,opt,name=OrderThreshold" json:"OrderThreshold,omitempty"`
	// 回收支付设置
	FeeRate              *int32   `protobuf:"varint,22,opt,name=FeeRate" json:"FeeRate,omitempty"`
	PlatformTax          *int64   `protobuf:"varint,25,opt,name=PlatformTax" json:"PlatformTax,omitempty"`
	RealTax              *int64   `protobuf:"varint,26,opt,name=RealTax" json:"RealTax,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WishRecycleSection) Reset()         { *m = WishRecycleSection{} }
func (m *WishRecycleSection) String() string { return proto.CompactTextString(m) }
func (*WishRecycleSection) ProtoMessage()    {}
func (*WishRecycleSection) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{64}
}
func (m *WishRecycleSection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishRecycleSection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishRecycleSection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishRecycleSection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishRecycleSection.Merge(m, src)
}
func (m *WishRecycleSection) XXX_Size() int {
	return m.Size()
}
func (m *WishRecycleSection) XXX_DiscardUnknown() {
	xxx_messageInfo_WishRecycleSection.DiscardUnknown(m)
}

var xxx_messageInfo_WishRecycleSection proto.InternalMessageInfo

func (m *WishRecycleSection) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *WishRecycleSection) GetPlatform() int32 {
	if m != nil && m.Platform != nil {
		return *m.Platform
	}
	return 0
}

func (m *WishRecycleSection) GetDayTopCount() int32 {
	if m != nil && m.DayTopCount != nil {
		return *m.DayTopCount
	}
	return 0
}

func (m *WishRecycleSection) GetPlayer() int32 {
	if m != nil && m.Player != nil {
		return *m.Player
	}
	return 0
}

func (m *WishRecycleSection) GetStatus() bool {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return false
}

func (m *WishRecycleSection) GetDayMoneyTopCount() int32 {
	if m != nil && m.DayMoneyTopCount != nil {
		return *m.DayMoneyTopCount
	}
	return 0
}

func (m *WishRecycleSection) GetDayMoneyTop() int64 {
	if m != nil && m.DayMoneyTop != nil {
		return *m.DayMoneyTop
	}
	return 0
}

func (m *WishRecycleSection) GetOrderThresholdMoney() int64 {
	if m != nil && m.OrderThresholdMoney != nil {
		return *m.OrderThresholdMoney
	}
	return 0
}

func (m *WishRecycleSection) GetDayDiamondTopCount() int32 {
	if m != nil && m.DayDiamondTopCount != nil {
		return *m.DayDiamondTopCount
	}
	return 0
}

func (m *WishRecycleSection) GetDayDiamondTop() int64 {
	if m != nil && m.DayDiamondTop != nil {
		return *m.DayDiamondTop
	}
	return 0
}

func (m *WishRecycleSection) GetOrderThreshold() int64 {
	if m != nil && m.OrderThreshold != nil {
		return *m.OrderThreshold
	}
	return 0
}

func (m *WishRecycleSection) GetFeeRate() int32 {
	if m != nil && m.FeeRate != nil {
		return *m.FeeRate
	}
	return 0
}

func (m *WishRecycleSection) GetPlatformTax() int64 {
	if m != nil && m.PlatformTax != nil {
		return *m.PlatformTax
	}
	return 0
}

func (m *WishRecycleSection) GetRealTax() int64 {
	if m != nil && m.RealTax != nil {
		return *m.RealTax
	}
	return 0
}

// 支付预警
type WishPayWarnCfg struct {
	//支付预警配置
	WithdrawalTime        *int64   `protobuf:"varint,59,opt,name=WithdrawalTime" json:"WithdrawalTime,omitempty"`
	WithdrawalTimes       *int64   `protobuf:"varint,60,opt,name=WithdrawalTimes" json:"WithdrawalTimes,omitempty"`
	WithdrawalGoldRate    *int64   `protobuf:"varint,61,opt,name=WithdrawalGoldRate" json:"WithdrawalGoldRate,omitempty"`
	WithdrawalGold        *int64   `protobuf:"varint,62,opt,name=WithdrawalGold" json:"WithdrawalGold,omitempty"`
	WithdrawalDiamondRate *int64   `protobuf:"varint,63,opt,name=WithdrawalDiamondRate" json:"WithdrawalDiamondRate,omitempty"`
	WithdrawalDiamond     *int64   `protobuf:"varint,64,opt,name=WithdrawalDiamond" json:"WithdrawalDiamond,omitempty"`
	PhoneList             []string `protobuf:"bytes,65,rep,name=PhoneList" json:"PhoneList,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *WishPayWarnCfg) Reset()         { *m = WishPayWarnCfg{} }
func (m *WishPayWarnCfg) String() string { return proto.CompactTextString(m) }
func (*WishPayWarnCfg) ProtoMessage()    {}
func (*WishPayWarnCfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{65}
}
func (m *WishPayWarnCfg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishPayWarnCfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishPayWarnCfg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishPayWarnCfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishPayWarnCfg.Merge(m, src)
}
func (m *WishPayWarnCfg) XXX_Size() int {
	return m.Size()
}
func (m *WishPayWarnCfg) XXX_DiscardUnknown() {
	xxx_messageInfo_WishPayWarnCfg.DiscardUnknown(m)
}

var xxx_messageInfo_WishPayWarnCfg proto.InternalMessageInfo

func (m *WishPayWarnCfg) GetWithdrawalTime() int64 {
	if m != nil && m.WithdrawalTime != nil {
		return *m.WithdrawalTime
	}
	return 0
}

func (m *WishPayWarnCfg) GetWithdrawalTimes() int64 {
	if m != nil && m.WithdrawalTimes != nil {
		return *m.WithdrawalTimes
	}
	return 0
}

func (m *WishPayWarnCfg) GetWithdrawalGoldRate() int64 {
	if m != nil && m.WithdrawalGoldRate != nil {
		return *m.WithdrawalGoldRate
	}
	return 0
}

func (m *WishPayWarnCfg) GetWithdrawalGold() int64 {
	if m != nil && m.WithdrawalGold != nil {
		return *m.WithdrawalGold
	}
	return 0
}

func (m *WishPayWarnCfg) GetWithdrawalDiamondRate() int64 {
	if m != nil && m.WithdrawalDiamondRate != nil {
		return *m.WithdrawalDiamondRate
	}
	return 0
}

func (m *WishPayWarnCfg) GetWithdrawalDiamond() int64 {
	if m != nil && m.WithdrawalDiamond != nil {
		return *m.WithdrawalDiamond
	}
	return 0
}

func (m *WishPayWarnCfg) GetPhoneList() []string {
	if m != nil {
		return m.PhoneList
	}
	return nil
}

// 守护者收益设置
type WishGuardianCfg struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"Id,omitempty"`
	DayDiamondTop        *int64   `protobuf:"varint,2,opt,name=DayDiamondTop" json:"DayDiamondTop,omitempty"`
	OnceDiamondRebate    *int64   `protobuf:"varint,3,opt,name=OnceDiamondRebate" json:"OnceDiamondRebate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WishGuardianCfg) Reset()         { *m = WishGuardianCfg{} }
func (m *WishGuardianCfg) String() string { return proto.CompactTextString(m) }
func (*WishGuardianCfg) ProtoMessage()    {}
func (*WishGuardianCfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{66}
}
func (m *WishGuardianCfg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishGuardianCfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishGuardianCfg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishGuardianCfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishGuardianCfg.Merge(m, src)
}
func (m *WishGuardianCfg) XXX_Size() int {
	return m.Size()
}
func (m *WishGuardianCfg) XXX_DiscardUnknown() {
	xxx_messageInfo_WishGuardianCfg.DiscardUnknown(m)
}

var xxx_messageInfo_WishGuardianCfg proto.InternalMessageInfo

func (m *WishGuardianCfg) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *WishGuardianCfg) GetDayDiamondTop() int64 {
	if m != nil && m.DayDiamondTop != nil {
		return *m.DayDiamondTop
	}
	return 0
}

func (m *WishGuardianCfg) GetOnceDiamondRebate() int64 {
	if m != nil && m.OnceDiamondRebate != nil {
		return *m.OnceDiamondRebate
	}
	return 0
}

//回收说明
type RecycleNoteCfg struct {
	Text                 []string `protobuf:"bytes,1,rep,name=Text" json:"Text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecycleNoteCfg) Reset()         { *m = RecycleNoteCfg{} }
func (m *RecycleNoteCfg) String() string { return proto.CompactTextString(m) }
func (*RecycleNoteCfg) ProtoMessage()    {}
func (*RecycleNoteCfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{67}
}
func (m *RecycleNoteCfg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecycleNoteCfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecycleNoteCfg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecycleNoteCfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecycleNoteCfg.Merge(m, src)
}
func (m *RecycleNoteCfg) XXX_Size() int {
	return m.Size()
}
func (m *RecycleNoteCfg) XXX_DiscardUnknown() {
	xxx_messageInfo_RecycleNoteCfg.DiscardUnknown(m)
}

var xxx_messageInfo_RecycleNoteCfg proto.InternalMessageInfo

func (m *RecycleNoteCfg) GetText() []string {
	if m != nil {
		return m.Text
	}
	return nil
}

// 冷却期设置表 wish_cool_down_config
type WishCoolDownConfig struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"Id,omitempty"`
	IsOpen               *bool    `protobuf:"varint,2,opt,name=IsOpen" json:"IsOpen,omitempty"`
	ContinuousTime       *int64   `protobuf:"varint,3,opt,name=ContinuousTime" json:"ContinuousTime,omitempty"`
	ContinuousTimes      *int64   `protobuf:"varint,4,opt,name=ContinuousTimes" json:"ContinuousTimes,omitempty"`
	CoolDownTime         *int64   `protobuf:"varint,5,opt,name=CoolDownTime" json:"CoolDownTime,omitempty"`
	DayLimit             *int64   `protobuf:"varint,6,opt,name=DayLimit" json:"DayLimit,omitempty"`
	CreateTime           *int64   `protobuf:"varint,7,opt,name=CreateTime" json:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WishCoolDownConfig) Reset()         { *m = WishCoolDownConfig{} }
func (m *WishCoolDownConfig) String() string { return proto.CompactTextString(m) }
func (*WishCoolDownConfig) ProtoMessage()    {}
func (*WishCoolDownConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{68}
}
func (m *WishCoolDownConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishCoolDownConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishCoolDownConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishCoolDownConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishCoolDownConfig.Merge(m, src)
}
func (m *WishCoolDownConfig) XXX_Size() int {
	return m.Size()
}
func (m *WishCoolDownConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_WishCoolDownConfig.DiscardUnknown(m)
}

var xxx_messageInfo_WishCoolDownConfig proto.InternalMessageInfo

func (m *WishCoolDownConfig) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *WishCoolDownConfig) GetIsOpen() bool {
	if m != nil && m.IsOpen != nil {
		return *m.IsOpen
	}
	return false
}

func (m *WishCoolDownConfig) GetContinuousTime() int64 {
	if m != nil && m.ContinuousTime != nil {
		return *m.ContinuousTime
	}
	return 0
}

func (m *WishCoolDownConfig) GetContinuousTimes() int64 {
	if m != nil && m.ContinuousTimes != nil {
		return *m.ContinuousTimes
	}
	return 0
}

func (m *WishCoolDownConfig) GetCoolDownTime() int64 {
	if m != nil && m.CoolDownTime != nil {
		return *m.CoolDownTime
	}
	return 0
}

func (m *WishCoolDownConfig) GetDayLimit() int64 {
	if m != nil && m.DayLimit != nil {
		return *m.DayLimit
	}
	return 0
}

func (m *WishCoolDownConfig) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

// 货币换算参数设置
type WishCurrencyConversionCfg struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"Id,omitempty"`
	Coin                 *int32   `protobuf:"varint,4,opt,name=Coin" json:"Coin,omitempty"`
	Diamond              *int32   `protobuf:"varint,5,opt,name=Diamond" json:"Diamond,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WishCurrencyConversionCfg) Reset()         { *m = WishCurrencyConversionCfg{} }
func (m *WishCurrencyConversionCfg) String() string { return proto.CompactTextString(m) }
func (*WishCurrencyConversionCfg) ProtoMessage()    {}
func (*WishCurrencyConversionCfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{69}
}
func (m *WishCurrencyConversionCfg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishCurrencyConversionCfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishCurrencyConversionCfg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishCurrencyConversionCfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishCurrencyConversionCfg.Merge(m, src)
}
func (m *WishCurrencyConversionCfg) XXX_Size() int {
	return m.Size()
}
func (m *WishCurrencyConversionCfg) XXX_DiscardUnknown() {
	xxx_messageInfo_WishCurrencyConversionCfg.DiscardUnknown(m)
}

var xxx_messageInfo_WishCurrencyConversionCfg proto.InternalMessageInfo

func (m *WishCurrencyConversionCfg) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *WishCurrencyConversionCfg) GetCoin() int32 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *WishCurrencyConversionCfg) GetDiamond() int32 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

// 钻石管理列表
type DiamondItemListResponse struct {
	List                 []*share_message.DiamondRecharge `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                           `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *DiamondItemListResponse) Reset()         { *m = DiamondItemListResponse{} }
func (m *DiamondItemListResponse) String() string { return proto.CompactTextString(m) }
func (*DiamondItemListResponse) ProtoMessage()    {}
func (*DiamondItemListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{70}
}
func (m *DiamondItemListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiamondItemListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiamondItemListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiamondItemListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiamondItemListResponse.Merge(m, src)
}
func (m *DiamondItemListResponse) XXX_Size() int {
	return m.Size()
}
func (m *DiamondItemListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DiamondItemListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DiamondItemListResponse proto.InternalMessageInfo

func (m *DiamondItemListResponse) GetList() []*share_message.DiamondRecharge {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *DiamondItemListResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// 钻石流水列表
type DiamondChangeLogResponse struct {
	List                 []*share_message.DiamondChangeLog `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                            `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *DiamondChangeLogResponse) Reset()         { *m = DiamondChangeLogResponse{} }
func (m *DiamondChangeLogResponse) String() string { return proto.CompactTextString(m) }
func (*DiamondChangeLogResponse) ProtoMessage()    {}
func (*DiamondChangeLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{71}
}
func (m *DiamondChangeLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiamondChangeLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiamondChangeLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiamondChangeLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiamondChangeLogResponse.Merge(m, src)
}
func (m *DiamondChangeLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *DiamondChangeLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DiamondChangeLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DiamondChangeLogResponse proto.InternalMessageInfo

func (m *DiamondChangeLogResponse) GetList() []*share_message.DiamondChangeLog {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *DiamondChangeLogResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//许愿池用户列表
type WishPlayerListResponse struct {
	List                 []*share_message.WishPlayer `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                      `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *WishPlayerListResponse) Reset()         { *m = WishPlayerListResponse{} }
func (m *WishPlayerListResponse) String() string { return proto.CompactTextString(m) }
func (*WishPlayerListResponse) ProtoMessage()    {}
func (*WishPlayerListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{72}
}
func (m *WishPlayerListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishPlayerListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishPlayerListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishPlayerListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishPlayerListResponse.Merge(m, src)
}
func (m *WishPlayerListResponse) XXX_Size() int {
	return m.Size()
}
func (m *WishPlayerListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WishPlayerListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WishPlayerListResponse proto.InternalMessageInfo

func (m *WishPlayerListResponse) GetList() []*share_message.WishPlayer {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WishPlayerListResponse) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// +++++++++++++++++许愿池活动
// 活动奖池管理列表
type WishActPoolList struct {
	List                 []*share_message.WishActPool `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                       `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *WishActPoolList) Reset()         { *m = WishActPoolList{} }
func (m *WishActPoolList) String() string { return proto.CompactTextString(m) }
func (*WishActPoolList) ProtoMessage()    {}
func (*WishActPoolList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{73}
}
func (m *WishActPoolList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishActPoolList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishActPoolList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishActPoolList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishActPoolList.Merge(m, src)
}
func (m *WishActPoolList) XXX_Size() int {
	return m.Size()
}
func (m *WishActPoolList) XXX_DiscardUnknown() {
	xxx_messageInfo_WishActPoolList.DiscardUnknown(m)
}

var xxx_messageInfo_WishActPoolList proto.InternalMessageInfo

func (m *WishActPoolList) GetList() []*share_message.WishActPool {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WishActPoolList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// 新增活动奖池
type UpdateWishActPoolListRequest struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Name                 *string  `protobuf:"bytes,5,opt,name=Name" json:"Name,omitempty"`
	BoxIds               []int64  `protobuf:"varint,8,rep,name=BoxIds" json:"BoxIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateWishActPoolListRequest) Reset()         { *m = UpdateWishActPoolListRequest{} }
func (m *UpdateWishActPoolListRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateWishActPoolListRequest) ProtoMessage()    {}
func (*UpdateWishActPoolListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{74}
}
func (m *UpdateWishActPoolListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateWishActPoolListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateWishActPoolListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateWishActPoolListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWishActPoolListRequest.Merge(m, src)
}
func (m *UpdateWishActPoolListRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateWishActPoolListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWishActPoolListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWishActPoolListRequest proto.InternalMessageInfo

func (m *UpdateWishActPoolListRequest) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *UpdateWishActPoolListRequest) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *UpdateWishActPoolListRequest) GetBoxIds() []int64 {
	if m != nil {
		return m.BoxIds
	}
	return nil
}

// 活动奖池详情
type WishActPoolDetail struct {
	List                 []*WishActPoolItem `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32             `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *WishActPoolDetail) Reset()         { *m = WishActPoolDetail{} }
func (m *WishActPoolDetail) String() string { return proto.CompactTextString(m) }
func (*WishActPoolDetail) ProtoMessage()    {}
func (*WishActPoolDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{75}
}
func (m *WishActPoolDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishActPoolDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishActPoolDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishActPoolDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishActPoolDetail.Merge(m, src)
}
func (m *WishActPoolDetail) XXX_Size() int {
	return m.Size()
}
func (m *WishActPoolDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_WishActPoolDetail.DiscardUnknown(m)
}

var xxx_messageInfo_WishActPoolDetail proto.InternalMessageInfo

func (m *WishActPoolDetail) GetList() []*WishActPoolItem {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WishActPoolDetail) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type WishActPoolItem struct {
	BoxId                *int64   `protobuf:"varint,1,opt,name=BoxId" json:"BoxId,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Price                *int64   `protobuf:"varint,3,opt,name=Price" json:"Price,omitempty"`
	IsHave               *bool    `protobuf:"varint,4,opt,name=IsHave" json:"IsHave,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WishActPoolItem) Reset()         { *m = WishActPoolItem{} }
func (m *WishActPoolItem) String() string { return proto.CompactTextString(m) }
func (*WishActPoolItem) ProtoMessage()    {}
func (*WishActPoolItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{76}
}
func (m *WishActPoolItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishActPoolItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishActPoolItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishActPoolItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishActPoolItem.Merge(m, src)
}
func (m *WishActPoolItem) XXX_Size() int {
	return m.Size()
}
func (m *WishActPoolItem) XXX_DiscardUnknown() {
	xxx_messageInfo_WishActPoolItem.DiscardUnknown(m)
}

var xxx_messageInfo_WishActPoolItem proto.InternalMessageInfo

func (m *WishActPoolItem) GetBoxId() int64 {
	if m != nil && m.BoxId != nil {
		return *m.BoxId
	}
	return 0
}

func (m *WishActPoolItem) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *WishActPoolItem) GetPrice() int64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *WishActPoolItem) GetIsHave() bool {
	if m != nil && m.IsHave != nil {
		return *m.IsHave
	}
	return false
}

// 累计规则列表
type WishActPoolRuleList struct {
	List                 []*WishActPoolRule      `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                  `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	AwardType            *int32                  `protobuf:"varint,14,opt,name=AwardType" json:"AwardType,omitempty"`
	ItemList             []*WishActPoolAwardItem `protobuf:"bytes,15,rep,name=ItemList" json:"ItemList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *WishActPoolRuleList) Reset()         { *m = WishActPoolRuleList{} }
func (m *WishActPoolRuleList) String() string { return proto.CompactTextString(m) }
func (*WishActPoolRuleList) ProtoMessage()    {}
func (*WishActPoolRuleList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{77}
}
func (m *WishActPoolRuleList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishActPoolRuleList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishActPoolRuleList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishActPoolRuleList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishActPoolRuleList.Merge(m, src)
}
func (m *WishActPoolRuleList) XXX_Size() int {
	return m.Size()
}
func (m *WishActPoolRuleList) XXX_DiscardUnknown() {
	xxx_messageInfo_WishActPoolRuleList.DiscardUnknown(m)
}

var xxx_messageInfo_WishActPoolRuleList proto.InternalMessageInfo

func (m *WishActPoolRuleList) GetList() []*WishActPoolRule {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WishActPoolRuleList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

func (m *WishActPoolRuleList) GetAwardType() int32 {
	if m != nil && m.AwardType != nil {
		return *m.AwardType
	}
	return 0
}

func (m *WishActPoolRuleList) GetItemList() []*WishActPoolAwardItem {
	if m != nil {
		return m.ItemList
	}
	return nil
}

// 新增累计规则
type AddWishActPoolRuleRequest struct {
	List []*WishActPoolRule `protobuf:"bytes,2,rep,name=List" json:"List,omitempty"`
	// 累计金额规则
	RuleType             *int32                  `protobuf:"varint,5,opt,name=RuleType" json:"RuleType,omitempty"`
	AwardType            *int32                  `protobuf:"varint,14,opt,name=AwardType" json:"AwardType,omitempty"`
	WeekMonthList        []*WishActPoolAwardItem `protobuf:"bytes,15,rep,name=WeekMonthList" json:"WeekMonthList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *AddWishActPoolRuleRequest) Reset()         { *m = AddWishActPoolRuleRequest{} }
func (m *AddWishActPoolRuleRequest) String() string { return proto.CompactTextString(m) }
func (*AddWishActPoolRuleRequest) ProtoMessage()    {}
func (*AddWishActPoolRuleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{78}
}
func (m *AddWishActPoolRuleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWishActPoolRuleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWishActPoolRuleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWishActPoolRuleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWishActPoolRuleRequest.Merge(m, src)
}
func (m *AddWishActPoolRuleRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddWishActPoolRuleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWishActPoolRuleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddWishActPoolRuleRequest proto.InternalMessageInfo

func (m *AddWishActPoolRuleRequest) GetList() []*WishActPoolRule {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *AddWishActPoolRuleRequest) GetRuleType() int32 {
	if m != nil && m.RuleType != nil {
		return *m.RuleType
	}
	return 0
}

func (m *AddWishActPoolRuleRequest) GetAwardType() int32 {
	if m != nil && m.AwardType != nil {
		return *m.AwardType
	}
	return 0
}

func (m *AddWishActPoolRuleRequest) GetWeekMonthList() []*WishActPoolAwardItem {
	if m != nil {
		return m.WeekMonthList
	}
	return nil
}

// 累计规则
type WishActPoolRule struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	WishActPoolId        *int64   `protobuf:"varint,2,opt,name=WishActPoolId" json:"WishActPoolId,omitempty"`
	Name                 *string  `protobuf:"bytes,5,opt,name=Name" json:"Name,omitempty"`
	Key                  *int32   `protobuf:"varint,11,opt,name=Key" json:"Key,omitempty"`
	Diamond              *int64   `protobuf:"varint,12,opt,name=Diamond" json:"Diamond,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WishActPoolRule) Reset()         { *m = WishActPoolRule{} }
func (m *WishActPoolRule) String() string { return proto.CompactTextString(m) }
func (*WishActPoolRule) ProtoMessage()    {}
func (*WishActPoolRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{79}
}
func (m *WishActPoolRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishActPoolRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishActPoolRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishActPoolRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishActPoolRule.Merge(m, src)
}
func (m *WishActPoolRule) XXX_Size() int {
	return m.Size()
}
func (m *WishActPoolRule) XXX_DiscardUnknown() {
	xxx_messageInfo_WishActPoolRule.DiscardUnknown(m)
}

var xxx_messageInfo_WishActPoolRule proto.InternalMessageInfo

func (m *WishActPoolRule) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishActPoolRule) GetWishActPoolId() int64 {
	if m != nil && m.WishActPoolId != nil {
		return *m.WishActPoolId
	}
	return 0
}

func (m *WishActPoolRule) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *WishActPoolRule) GetKey() int32 {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return 0
}

func (m *WishActPoolRule) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

// 新增累计规则
type WishActPoolRuleWeekMonthList struct {
	List                 []*WishActPoolAwardItem `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                  `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *WishActPoolRuleWeekMonthList) Reset()         { *m = WishActPoolRuleWeekMonthList{} }
func (m *WishActPoolRuleWeekMonthList) String() string { return proto.CompactTextString(m) }
func (*WishActPoolRuleWeekMonthList) ProtoMessage()    {}
func (*WishActPoolRuleWeekMonthList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{80}
}
func (m *WishActPoolRuleWeekMonthList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishActPoolRuleWeekMonthList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishActPoolRuleWeekMonthList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishActPoolRuleWeekMonthList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishActPoolRuleWeekMonthList.Merge(m, src)
}
func (m *WishActPoolRuleWeekMonthList) XXX_Size() int {
	return m.Size()
}
func (m *WishActPoolRuleWeekMonthList) XXX_DiscardUnknown() {
	xxx_messageInfo_WishActPoolRuleWeekMonthList.DiscardUnknown(m)
}

var xxx_messageInfo_WishActPoolRuleWeekMonthList proto.InternalMessageInfo

func (m *WishActPoolRuleWeekMonthList) GetList() []*WishActPoolAwardItem {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WishActPoolRuleWeekMonthList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// 累计规则-实物奖励
type WishActPoolAwardItem struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	WishItemId           *int64   `protobuf:"varint,2,opt,name=WishItemId" json:"WishItemId,omitempty"`
	WishActPoolId        *int64   `protobuf:"varint,3,opt,name=WishActPoolId" json:"WishActPoolId,omitempty"`
	Key                  *int32   `protobuf:"varint,11,opt,name=Key" json:"Key,omitempty"`
	Name                 *string  `protobuf:"bytes,5,opt,name=Name" json:"Name,omitempty"`
	Diamond              *int64   `protobuf:"varint,12,opt,name=Diamond" json:"Diamond,omitempty"`
	Money                *int64   `protobuf:"varint,13,opt,name=Money" json:"Money,omitempty"`
	Icon                 *string  `protobuf:"bytes,14,opt,name=Icon" json:"Icon,omitempty"`
	RuleType             *int32   `protobuf:"varint,15,opt,name=RuleType" json:"RuleType,omitempty"`
	AwardType            *int32   `protobuf:"varint,16,opt,name=AwardType" json:"AwardType,omitempty"`
	AwardDiamond         *int64   `protobuf:"varint,17,opt,name=AwardDiamond" json:"AwardDiamond,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WishActPoolAwardItem) Reset()         { *m = WishActPoolAwardItem{} }
func (m *WishActPoolAwardItem) String() string { return proto.CompactTextString(m) }
func (*WishActPoolAwardItem) ProtoMessage()    {}
func (*WishActPoolAwardItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{81}
}
func (m *WishActPoolAwardItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishActPoolAwardItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishActPoolAwardItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishActPoolAwardItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishActPoolAwardItem.Merge(m, src)
}
func (m *WishActPoolAwardItem) XXX_Size() int {
	return m.Size()
}
func (m *WishActPoolAwardItem) XXX_DiscardUnknown() {
	xxx_messageInfo_WishActPoolAwardItem.DiscardUnknown(m)
}

var xxx_messageInfo_WishActPoolAwardItem proto.InternalMessageInfo

func (m *WishActPoolAwardItem) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishActPoolAwardItem) GetWishItemId() int64 {
	if m != nil && m.WishItemId != nil {
		return *m.WishItemId
	}
	return 0
}

func (m *WishActPoolAwardItem) GetWishActPoolId() int64 {
	if m != nil && m.WishActPoolId != nil {
		return *m.WishActPoolId
	}
	return 0
}

func (m *WishActPoolAwardItem) GetKey() int32 {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return 0
}

func (m *WishActPoolAwardItem) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *WishActPoolAwardItem) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *WishActPoolAwardItem) GetMoney() int64 {
	if m != nil && m.Money != nil {
		return *m.Money
	}
	return 0
}

func (m *WishActPoolAwardItem) GetIcon() string {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return ""
}

func (m *WishActPoolAwardItem) GetRuleType() int32 {
	if m != nil && m.RuleType != nil {
		return *m.RuleType
	}
	return 0
}

func (m *WishActPoolAwardItem) GetAwardType() int32 {
	if m != nil && m.AwardType != nil {
		return *m.AwardType
	}
	return 0
}

func (m *WishActPoolAwardItem) GetAwardDiamond() int64 {
	if m != nil && m.AwardDiamond != nil {
		return *m.AwardDiamond
	}
	return 0
}

// 许愿池活动用户记录列表
type WishActPlayerRecordList struct {
	List                 []*WishActPlayerRecord `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                 `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *WishActPlayerRecordList) Reset()         { *m = WishActPlayerRecordList{} }
func (m *WishActPlayerRecordList) String() string { return proto.CompactTextString(m) }
func (*WishActPlayerRecordList) ProtoMessage()    {}
func (*WishActPlayerRecordList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{82}
}
func (m *WishActPlayerRecordList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishActPlayerRecordList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishActPlayerRecordList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishActPlayerRecordList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishActPlayerRecordList.Merge(m, src)
}
func (m *WishActPlayerRecordList) XXX_Size() int {
	return m.Size()
}
func (m *WishActPlayerRecordList) XXX_DiscardUnknown() {
	xxx_messageInfo_WishActPlayerRecordList.DiscardUnknown(m)
}

var xxx_messageInfo_WishActPlayerRecordList proto.InternalMessageInfo

func (m *WishActPlayerRecordList) GetList() []*WishActPlayerRecord {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WishActPlayerRecordList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//许愿池活动用户记录
type WishActPlayerRecord struct {
	UserAccount *string `protobuf:"bytes,1,opt,name=UserAccount" json:"UserAccount,omitempty"`
	UserId      *int64  `protobuf:"varint,2,opt,name=UserId" json:"UserId,omitempty"`
	//optional int32 DayTotal = 4; // 累计天数
	//optional int32 DrawTotal = 5; // 累计抽奖次数
	DrawDiamondTotal     *int64      `protobuf:"varint,7,opt,name=DrawDiamondTotal" json:"DrawDiamondTotal,omitempty"`
	AwardTotal           *int32      `protobuf:"varint,8,opt,name=AwardTotal" json:"AwardTotal,omitempty"`
	Data                 []*PoolData `protobuf:"bytes,9,rep,name=Data" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *WishActPlayerRecord) Reset()         { *m = WishActPlayerRecord{} }
func (m *WishActPlayerRecord) String() string { return proto.CompactTextString(m) }
func (*WishActPlayerRecord) ProtoMessage()    {}
func (*WishActPlayerRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{83}
}
func (m *WishActPlayerRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishActPlayerRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishActPlayerRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishActPlayerRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishActPlayerRecord.Merge(m, src)
}
func (m *WishActPlayerRecord) XXX_Size() int {
	return m.Size()
}
func (m *WishActPlayerRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_WishActPlayerRecord.DiscardUnknown(m)
}

var xxx_messageInfo_WishActPlayerRecord proto.InternalMessageInfo

func (m *WishActPlayerRecord) GetUserAccount() string {
	if m != nil && m.UserAccount != nil {
		return *m.UserAccount
	}
	return ""
}

func (m *WishActPlayerRecord) GetUserId() int64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *WishActPlayerRecord) GetDrawDiamondTotal() int64 {
	if m != nil && m.DrawDiamondTotal != nil {
		return *m.DrawDiamondTotal
	}
	return 0
}

func (m *WishActPlayerRecord) GetAwardTotal() int32 {
	if m != nil && m.AwardTotal != nil {
		return *m.AwardTotal
	}
	return 0
}

func (m *WishActPlayerRecord) GetData() []*PoolData {
	if m != nil {
		return m.Data
	}
	return nil
}

//活动奖池统计数据
type PoolData struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	DayTotal             *int32   `protobuf:"varint,3,opt,name=DayTotal" json:"DayTotal,omitempty"`
	DrawTotal            *int32   `protobuf:"varint,4,opt,name=DrawTotal" json:"DrawTotal,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PoolData) Reset()         { *m = PoolData{} }
func (m *PoolData) String() string { return proto.CompactTextString(m) }
func (*PoolData) ProtoMessage()    {}
func (*PoolData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{84}
}
func (m *PoolData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolData.Merge(m, src)
}
func (m *PoolData) XXX_Size() int {
	return m.Size()
}
func (m *PoolData) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolData.DiscardUnknown(m)
}

var xxx_messageInfo_PoolData proto.InternalMessageInfo

func (m *PoolData) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PoolData) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *PoolData) GetDayTotal() int32 {
	if m != nil && m.DayTotal != nil {
		return *m.DayTotal
	}
	return 0
}

func (m *PoolData) GetDrawTotal() int32 {
	if m != nil && m.DrawTotal != nil {
		return *m.DrawTotal
	}
	return 0
}

// 获奖记录列表
type WishActPlayerWinRecordList struct {
	List                 []*WishActPlayerWinRecord `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                    `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *WishActPlayerWinRecordList) Reset()         { *m = WishActPlayerWinRecordList{} }
func (m *WishActPlayerWinRecordList) String() string { return proto.CompactTextString(m) }
func (*WishActPlayerWinRecordList) ProtoMessage()    {}
func (*WishActPlayerWinRecordList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{85}
}
func (m *WishActPlayerWinRecordList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishActPlayerWinRecordList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishActPlayerWinRecordList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishActPlayerWinRecordList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishActPlayerWinRecordList.Merge(m, src)
}
func (m *WishActPlayerWinRecordList) XXX_Size() int {
	return m.Size()
}
func (m *WishActPlayerWinRecordList) XXX_DiscardUnknown() {
	xxx_messageInfo_WishActPlayerWinRecordList.DiscardUnknown(m)
}

var xxx_messageInfo_WishActPlayerWinRecordList proto.InternalMessageInfo

func (m *WishActPlayerWinRecordList) GetList() []*WishActPlayerWinRecord {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WishActPlayerWinRecordList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// 获奖记录
type WishActPlayerWinRecord struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	CreateTime           *int64   `protobuf:"varint,6,opt,name=CreateTime" json:"CreateTime,omitempty"`
	Status               *int32   `protobuf:"varint,7,opt,name=Status" json:"Status,omitempty"`
	WinTime              *int64   `protobuf:"varint,8,opt,name=WinTime" json:"WinTime,omitempty"`
	TypeName             *string  `protobuf:"bytes,9,opt,name=TypeName" json:"TypeName,omitempty"`
	Note                 *string  `protobuf:"bytes,10,opt,name=Note" json:"Note,omitempty"`
	UserAccount          *string  `protobuf:"bytes,11,opt,name=UserAccount" json:"UserAccount,omitempty"`
	UserId               *int64   `protobuf:"varint,12,opt,name=UserId" json:"UserId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WishActPlayerWinRecord) Reset()         { *m = WishActPlayerWinRecord{} }
func (m *WishActPlayerWinRecord) String() string { return proto.CompactTextString(m) }
func (*WishActPlayerWinRecord) ProtoMessage()    {}
func (*WishActPlayerWinRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{86}
}
func (m *WishActPlayerWinRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishActPlayerWinRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishActPlayerWinRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishActPlayerWinRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishActPlayerWinRecord.Merge(m, src)
}
func (m *WishActPlayerWinRecord) XXX_Size() int {
	return m.Size()
}
func (m *WishActPlayerWinRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_WishActPlayerWinRecord.DiscardUnknown(m)
}

var xxx_messageInfo_WishActPlayerWinRecord proto.InternalMessageInfo

func (m *WishActPlayerWinRecord) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishActPlayerWinRecord) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishActPlayerWinRecord) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *WishActPlayerWinRecord) GetWinTime() int64 {
	if m != nil && m.WinTime != nil {
		return *m.WinTime
	}
	return 0
}

func (m *WishActPlayerWinRecord) GetTypeName() string {
	if m != nil && m.TypeName != nil {
		return *m.TypeName
	}
	return ""
}

func (m *WishActPlayerWinRecord) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

func (m *WishActPlayerWinRecord) GetUserAccount() string {
	if m != nil && m.UserAccount != nil {
		return *m.UserAccount
	}
	return ""
}

func (m *WishActPlayerWinRecord) GetUserId() int64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 抽奖记录列表
type WishActPlayerDrawRecordList struct {
	List                 []*WishActPlayerDrawRecord `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                     `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *WishActPlayerDrawRecordList) Reset()         { *m = WishActPlayerDrawRecordList{} }
func (m *WishActPlayerDrawRecordList) String() string { return proto.CompactTextString(m) }
func (*WishActPlayerDrawRecordList) ProtoMessage()    {}
func (*WishActPlayerDrawRecordList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{87}
}
func (m *WishActPlayerDrawRecordList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishActPlayerDrawRecordList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishActPlayerDrawRecordList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishActPlayerDrawRecordList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishActPlayerDrawRecordList.Merge(m, src)
}
func (m *WishActPlayerDrawRecordList) XXX_Size() int {
	return m.Size()
}
func (m *WishActPlayerDrawRecordList) XXX_DiscardUnknown() {
	xxx_messageInfo_WishActPlayerDrawRecordList.DiscardUnknown(m)
}

var xxx_messageInfo_WishActPlayerDrawRecordList proto.InternalMessageInfo

func (m *WishActPlayerDrawRecordList) GetList() []*WishActPlayerDrawRecord {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WishActPlayerDrawRecordList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// 抽奖记录
type WishActPlayerDrawRecord struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	CreateTime           *int64   `protobuf:"varint,6,opt,name=CreateTime" json:"CreateTime,omitempty"`
	BoxId                *int64   `protobuf:"varint,7,opt,name=BoxId" json:"BoxId,omitempty"`
	ActPoolName          *string  `protobuf:"bytes,8,opt,name=ActPoolName" json:"ActPoolName,omitempty"`
	ActBoxName           *string  `protobuf:"bytes,9,opt,name=ActBoxName" json:"ActBoxName,omitempty"`
	Price                *int64   `protobuf:"varint,10,opt,name=Price" json:"Price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WishActPlayerDrawRecord) Reset()         { *m = WishActPlayerDrawRecord{} }
func (m *WishActPlayerDrawRecord) String() string { return proto.CompactTextString(m) }
func (*WishActPlayerDrawRecord) ProtoMessage()    {}
func (*WishActPlayerDrawRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{88}
}
func (m *WishActPlayerDrawRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishActPlayerDrawRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishActPlayerDrawRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishActPlayerDrawRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishActPlayerDrawRecord.Merge(m, src)
}
func (m *WishActPlayerDrawRecord) XXX_Size() int {
	return m.Size()
}
func (m *WishActPlayerDrawRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_WishActPlayerDrawRecord.DiscardUnknown(m)
}

var xxx_messageInfo_WishActPlayerDrawRecord proto.InternalMessageInfo

func (m *WishActPlayerDrawRecord) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishActPlayerDrawRecord) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishActPlayerDrawRecord) GetBoxId() int64 {
	if m != nil && m.BoxId != nil {
		return *m.BoxId
	}
	return 0
}

func (m *WishActPlayerDrawRecord) GetActPoolName() string {
	if m != nil && m.ActPoolName != nil {
		return *m.ActPoolName
	}
	return ""
}

func (m *WishActPlayerDrawRecord) GetActBoxName() string {
	if m != nil && m.ActBoxName != nil {
		return *m.ActBoxName
	}
	return ""
}

func (m *WishActPlayerDrawRecord) GetPrice() int64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

// 许愿池活动日志列表
type WishActRecordList struct {
	List                 []*WishActRecord `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32           `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *WishActRecordList) Reset()         { *m = WishActRecordList{} }
func (m *WishActRecordList) String() string { return proto.CompactTextString(m) }
func (*WishActRecordList) ProtoMessage()    {}
func (*WishActRecordList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{89}
}
func (m *WishActRecordList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishActRecordList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishActRecordList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishActRecordList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishActRecordList.Merge(m, src)
}
func (m *WishActRecordList) XXX_Size() int {
	return m.Size()
}
func (m *WishActRecordList) XXX_DiscardUnknown() {
	xxx_messageInfo_WishActRecordList.DiscardUnknown(m)
}

var xxx_messageInfo_WishActRecordList proto.InternalMessageInfo

func (m *WishActRecordList) GetList() []*WishActRecord {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WishActRecordList) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

// 许愿池活动日志
type WishActRecord struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	CreateTime           *int64   `protobuf:"varint,6,opt,name=CreateTime" json:"CreateTime,omitempty"`
	BoxId                *int64   `protobuf:"varint,7,opt,name=BoxId" json:"BoxId,omitempty"`
	ActPoolName          *string  `protobuf:"bytes,8,opt,name=ActPoolName" json:"ActPoolName,omitempty"`
	Price                *int64   `protobuf:"varint,9,opt,name=Price" json:"Price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WishActRecord) Reset()         { *m = WishActRecord{} }
func (m *WishActRecord) String() string { return proto.CompactTextString(m) }
func (*WishActRecord) ProtoMessage()    {}
func (*WishActRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{90}
}
func (m *WishActRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishActRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishActRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishActRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishActRecord.Merge(m, src)
}
func (m *WishActRecord) XXX_Size() int {
	return m.Size()
}
func (m *WishActRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_WishActRecord.DiscardUnknown(m)
}

var xxx_messageInfo_WishActRecord proto.InternalMessageInfo

func (m *WishActRecord) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishActRecord) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishActRecord) GetBoxId() int64 {
	if m != nil && m.BoxId != nil {
		return *m.BoxId
	}
	return 0
}

func (m *WishActRecord) GetActPoolName() string {
	if m != nil && m.ActPoolName != nil {
		return *m.ActPoolName
	}
	return ""
}

func (m *WishActRecord) GetPrice() int64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

//充值活动配置返回
type WishCoinRechargeActivityCfgRes struct {
	List                 []*share_message.WishCoinRechargeActivityCfg `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                                       `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *WishCoinRechargeActivityCfgRes) Reset()         { *m = WishCoinRechargeActivityCfgRes{} }
func (m *WishCoinRechargeActivityCfgRes) String() string { return proto.CompactTextString(m) }
func (*WishCoinRechargeActivityCfgRes) ProtoMessage()    {}
func (*WishCoinRechargeActivityCfgRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{91}
}
func (m *WishCoinRechargeActivityCfgRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishCoinRechargeActivityCfgRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishCoinRechargeActivityCfgRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishCoinRechargeActivityCfgRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishCoinRechargeActivityCfgRes.Merge(m, src)
}
func (m *WishCoinRechargeActivityCfgRes) XXX_Size() int {
	return m.Size()
}
func (m *WishCoinRechargeActivityCfgRes) XXX_DiscardUnknown() {
	xxx_messageInfo_WishCoinRechargeActivityCfgRes.DiscardUnknown(m)
}

var xxx_messageInfo_WishCoinRechargeActivityCfgRes proto.InternalMessageInfo

func (m *WishCoinRechargeActivityCfgRes) GetList() []*share_message.WishCoinRechargeActivityCfg {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WishCoinRechargeActivityCfgRes) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//许愿池埋点报表查询返回
type QueryWishLogReportRes struct {
	List                 []*share_message.WishLogReport `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                         `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *QueryWishLogReportRes) Reset()         { *m = QueryWishLogReportRes{} }
func (m *QueryWishLogReportRes) String() string { return proto.CompactTextString(m) }
func (*QueryWishLogReportRes) ProtoMessage()    {}
func (*QueryWishLogReportRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{92}
}
func (m *QueryWishLogReportRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWishLogReportRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWishLogReportRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWishLogReportRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWishLogReportRes.Merge(m, src)
}
func (m *QueryWishLogReportRes) XXX_Size() int {
	return m.Size()
}
func (m *QueryWishLogReportRes) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWishLogReportRes.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWishLogReportRes proto.InternalMessageInfo

func (m *QueryWishLogReportRes) GetList() []*share_message.WishLogReport {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *QueryWishLogReportRes) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

//许愿池活动日志查询
type QueryWishActivityPrizeLogRes struct {
	List                 []*share_message.WishActivityPrizeLog `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	PageCount            *int32                                `protobuf:"varint,2,opt,name=PageCount" json:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *QueryWishActivityPrizeLogRes) Reset()         { *m = QueryWishActivityPrizeLogRes{} }
func (m *QueryWishActivityPrizeLogRes) String() string { return proto.CompactTextString(m) }
func (*QueryWishActivityPrizeLogRes) ProtoMessage()    {}
func (*QueryWishActivityPrizeLogRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4a4c535850c3f5, []int{93}
}
func (m *QueryWishActivityPrizeLogRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWishActivityPrizeLogRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWishActivityPrizeLogRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWishActivityPrizeLogRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWishActivityPrizeLogRes.Merge(m, src)
}
func (m *QueryWishActivityPrizeLogRes) XXX_Size() int {
	return m.Size()
}
func (m *QueryWishActivityPrizeLogRes) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWishActivityPrizeLogRes.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWishActivityPrizeLogRes proto.InternalMessageInfo

func (m *QueryWishActivityPrizeLogRes) GetList() []*share_message.WishActivityPrizeLog {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *QueryWishActivityPrizeLogRes) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

func init() {
	proto.RegisterType((*ToolWishBoxItemListRes)(nil), "brower_backstage.ToolWishBoxItemListRes")
	proto.RegisterType((*ToolSaveWishBoxItemReq)(nil), "brower_backstage.ToolSaveWishBoxItemReq")
	proto.RegisterType((*ToolOutputDataRes)(nil), "brower_backstage.ToolOutputDataRes")
	proto.RegisterType((*ToolOutputitemRes)(nil), "brower_backstage.ToolOutputitemRes")
	proto.RegisterType((*ToolOutputitem)(nil), "brower_backstage.ToolOutputitem")
	proto.RegisterType((*ToolPumping)(nil), "brower_backstage.ToolPumping")
	proto.RegisterType((*ToolRate)(nil), "brower_backstage.ToolRate")
	proto.RegisterType((*ToolRateReq)(nil), "brower_backstage.ToolRateReq")
	proto.RegisterType((*ToolRateRes)(nil), "brower_backstage.ToolRateRes")
	proto.RegisterType((*ToolLuckyReq)(nil), "brower_backstage.ToolLuckyReq")
	proto.RegisterType((*ToolLuckyRes)(nil), "brower_backstage.ToolLuckyRes")
	proto.RegisterType((*UpdateStatusRequest)(nil), "brower_backstage.UpdateStatusRequest")
	proto.RegisterType((*QueryWishOrderRequest)(nil), "brower_backstage.QueryWishOrderRequest")
	proto.RegisterType((*WishBoxListRequest)(nil), "brower_backstage.WishBoxListRequest")
	proto.RegisterType((*WishBoxList)(nil), "brower_backstage.WishBoxList")
	proto.RegisterType((*WishBox)(nil), "brower_backstage.WishBox")
	proto.RegisterType((*WishBoxGoodsWin)(nil), "brower_backstage.WishBoxGoodsWin")
	proto.RegisterType((*WishBoxGoodsItemList)(nil), "brower_backstage.WishBoxGoodsItemList")
	proto.RegisterType((*WishBoxGoodsItem)(nil), "brower_backstage.WishBoxGoodsItem")
	proto.RegisterType((*WishBoxWinCfgList)(nil), "brower_backstage.WishBoxWinCfgList")
	proto.RegisterType((*WishBoxWinCfg)(nil), "brower_backstage.WishBoxWinCfg")
	proto.RegisterType((*WishBoxGoodsListRequest)(nil), "brower_backstage.WishBoxGoodsListRequest")
	proto.RegisterType((*WishBoxLotteryReq)(nil), "brower_backstage.WishBoxLotteryReq")
	proto.RegisterType((*WishBoxLotteryResp)(nil), "brower_backstage.WishBoxLotteryResp")
	proto.RegisterType((*WishBoxGoodsList)(nil), "brower_backstage.WishBoxGoodsList")
	proto.RegisterType((*WishBoxGoodsSelectedList)(nil), "brower_backstage.WishBoxGoodsSelectedList")
	proto.RegisterType((*WishBoxGoods)(nil), "brower_backstage.WishBoxGoods")
	proto.RegisterType((*WishGoodsBrandList)(nil), "brower_backstage.WishGoodsBrandList")
	proto.RegisterType((*WishGoodsBrand)(nil), "brower_backstage.WishGoodsBrand")
	proto.RegisterType((*WishGoodsTypeList)(nil), "brower_backstage.WishGoodsTypeList")
	proto.RegisterType((*WishGoodsType)(nil), "brower_backstage.WishGoodsType")
	proto.RegisterType((*WishDeliveryOrderList)(nil), "brower_backstage.WishDeliveryOrderList")
	proto.RegisterType((*WishDeliveryOrderDetailList)(nil), "brower_backstage.WishDeliveryOrderDetailList")
	proto.RegisterType((*WishDeliveryOrder)(nil), "brower_backstage.WishDeliveryOrder")
	proto.RegisterType((*UpdateDeliveryOrderCourierInfo)(nil), "brower_backstage.UpdateDeliveryOrderCourierInfo")
	proto.RegisterType((*WishRecycleOrderList)(nil), "brower_backstage.WishRecycleOrderList")
	proto.RegisterType((*WishRecycleOrder)(nil), "brower_backstage.WishRecycleOrder")
	proto.RegisterType((*WishRecycleOrderUserInfo)(nil), "brower_backstage.WishRecycleOrderUserInfo")
	proto.RegisterType((*WishRecycleOrderDetailList)(nil), "brower_backstage.WishRecycleOrderDetailList")
	proto.RegisterType((*WishPoolList)(nil), "brower_backstage.WishPoolList")
	proto.RegisterType((*WishPool)(nil), "brower_backstage.WishPool")
	proto.RegisterType((*WishPoolStatus)(nil), "brower_backstage.WishPoolStatus")
	proto.RegisterType((*WishPoolReportList)(nil), "brower_backstage.WishPoolReportList")
	proto.RegisterType((*WishBoxReportList)(nil), "brower_backstage.WishBoxReportList")
	proto.RegisterType((*WishBoxDetailReportList)(nil), "brower_backstage.WishBoxDetailReportList")
	proto.RegisterType((*WishItemReportList)(nil), "brower_backstage.WishItemReportList")
	proto.RegisterType((*TestPlayerWishItemList)(nil), "brower_backstage.TestPlayerWishItemList")
	proto.RegisterType((*TestWishPoolLogList)(nil), "brower_backstage.TestWishPoolLogList")
	proto.RegisterType((*TestWishPoolPumpLogList)(nil), "brower_backstage.TestWishPoolPumpLogList")
	proto.RegisterType((*TestWishPoolBoxPoolInfoList)(nil), "brower_backstage.TestWishPoolBoxPoolInfoList")
	proto.RegisterType((*DrawRecordList)(nil), "brower_backstage.DrawRecordList")
	proto.RegisterType((*DrawRecord)(nil), "brower_backstage.DrawRecord")
	proto.RegisterType((*AddBoxRecordList)(nil), "brower_backstage.AddBoxRecordList")
	proto.RegisterType((*AddBoxRecord)(nil), "brower_backstage.AddBoxRecord")
	proto.RegisterType((*WishGoodsRecordList)(nil), "brower_backstage.WishGoodsRecordList")
	proto.RegisterType((*WishGoodsRecord)(nil), "brower_backstage.WishGoodsRecord")
	proto.RegisterType((*DrawBoxRecordList)(nil), "brower_backstage.DrawBoxRecordList")
	proto.RegisterType((*DrawBoxRecord)(nil), "brower_backstage.DrawBoxRecord")
	proto.RegisterType((*WinRecordList)(nil), "brower_backstage.WinRecordList")
	proto.RegisterType((*WinRecord)(nil), "brower_backstage.WinRecord")
	proto.RegisterType((*HaveItemList)(nil), "brower_backstage.HaveItemList")
	proto.RegisterType((*HaveItem)(nil), "brower_backstage.HaveItem")
	proto.RegisterType((*PriceSection)(nil), "brower_backstage.PriceSection")
	proto.RegisterType((*WishMailSection)(nil), "brower_backstage.WishMailSection")
	proto.RegisterType((*WishRecycleSection)(nil), "brower_backstage.WishRecycleSection")
	proto.RegisterType((*WishPayWarnCfg)(nil), "brower_backstage.WishPayWarnCfg")
	proto.RegisterType((*WishGuardianCfg)(nil), "brower_backstage.WishGuardianCfg")
	proto.RegisterType((*RecycleNoteCfg)(nil), "brower_backstage.RecycleNoteCfg")
	proto.RegisterType((*WishCoolDownConfig)(nil), "brower_backstage.WishCoolDownConfig")
	proto.RegisterType((*WishCurrencyConversionCfg)(nil), "brower_backstage.WishCurrencyConversionCfg")
	proto.RegisterType((*DiamondItemListResponse)(nil), "brower_backstage.DiamondItemListResponse")
	proto.RegisterType((*DiamondChangeLogResponse)(nil), "brower_backstage.DiamondChangeLogResponse")
	proto.RegisterType((*WishPlayerListResponse)(nil), "brower_backstage.WishPlayerListResponse")
	proto.RegisterType((*WishActPoolList)(nil), "brower_backstage.WishActPoolList")
	proto.RegisterType((*UpdateWishActPoolListRequest)(nil), "brower_backstage.UpdateWishActPoolListRequest")
	proto.RegisterType((*WishActPoolDetail)(nil), "brower_backstage.WishActPoolDetail")
	proto.RegisterType((*WishActPoolItem)(nil), "brower_backstage.WishActPoolItem")
	proto.RegisterType((*WishActPoolRuleList)(nil), "brower_backstage.WishActPoolRuleList")
	proto.RegisterType((*AddWishActPoolRuleRequest)(nil), "brower_backstage.AddWishActPoolRuleRequest")
	proto.RegisterType((*WishActPoolRule)(nil), "brower_backstage.WishActPoolRule")
	proto.RegisterType((*WishActPoolRuleWeekMonthList)(nil), "brower_backstage.WishActPoolRuleWeekMonthList")
	proto.RegisterType((*WishActPoolAwardItem)(nil), "brower_backstage.WishActPoolAwardItem")
	proto.RegisterType((*WishActPlayerRecordList)(nil), "brower_backstage.WishActPlayerRecordList")
	proto.RegisterType((*WishActPlayerRecord)(nil), "brower_backstage.WishActPlayerRecord")
	proto.RegisterType((*PoolData)(nil), "brower_backstage.PoolData")
	proto.RegisterType((*WishActPlayerWinRecordList)(nil), "brower_backstage.WishActPlayerWinRecordList")
	proto.RegisterType((*WishActPlayerWinRecord)(nil), "brower_backstage.WishActPlayerWinRecord")
	proto.RegisterType((*WishActPlayerDrawRecordList)(nil), "brower_backstage.WishActPlayerDrawRecordList")
	proto.RegisterType((*WishActPlayerDrawRecord)(nil), "brower_backstage.WishActPlayerDrawRecord")
	proto.RegisterType((*WishActRecordList)(nil), "brower_backstage.WishActRecordList")
	proto.RegisterType((*WishActRecord)(nil), "brower_backstage.WishActRecord")
	proto.RegisterType((*WishCoinRechargeActivityCfgRes)(nil), "brower_backstage.WishCoinRechargeActivityCfgRes")
	proto.RegisterType((*QueryWishLogReportRes)(nil), "brower_backstage.QueryWishLogReportRes")
	proto.RegisterType((*QueryWishActivityPrizeLogRes)(nil), "brower_backstage.QueryWishActivityPrizeLogRes")
}

func init() { proto.RegisterFile("brower_wish.proto", fileDescriptor_2a4a4c535850c3f5) }

var fileDescriptor_2a4a4c535850c3f5 = []byte{
	// 4042 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x3b, 0x4d, 0x6f, 0x23, 0xc9,
	0x75, 0x20, 0x29, 0x8a, 0x64, 0x91, 0x12, 0x25, 0x6a, 0xa4, 0xe9, 0x99, 0xdd, 0xd5, 0x6a, 0x7b,
	0xbf, 0xb4, 0x8e, 0x33, 0xb3, 0x33, 0xe3, 0x78, 0x0d, 0x24, 0x4e, 0x4c, 0x91, 0x5e, 0x0f, 0x31,
	0xd2, 0x88, 0x21, 0xb5, 0xd6, 0x38, 0x89, 0x33, 0x5b, 0x62, 0x97, 0xa8, 0xc6, 0x34, 0xbb, 0xe8,
	0xee, 0xa6, 0x24, 0xfa, 0x92, 0xe4, 0x9a, 0x63, 0xee, 0xf6, 0x31, 0x40, 0x0e, 0x01, 0x9c, 0x43,
	0x8e, 0xb9, 0x04, 0x08, 0x90, 0xa3, 0x93, 0x1f, 0x10, 0x04, 0x8b, 0x9c, 0x92, 0x7b, 0x80, 0xdc,
	0x82, 0x7a, 0x55, 0xaf, 0xbb, 0xaa, 0x59, 0x1c, 0x69, 0x06, 0x01, 0xe2, 0x9b, 0xf8, 0xaa, 0xde,
	0xab, 0xf7, 0x55, 0xef, 0xab, 0x5a, 0x64, 0xf3, 0x2c, 0xe2, 0x57, 0x2c, 0x7a, 0x79, 0xe5, 0xc7,
	0x17, 0x0f, 0xa6, 0x11, 0x4f, 0x78, 0x6b, 0x43, 0x81, 0xce, 0xe8, 0xe8, 0x55, 0x9c, 0xd0, 0x31,
	0xbb, 0xdf, 0x18, 0x8f, 0x79, 0x42, 0xc7, 0x72, 0xfd, 0x3e, 0x39, 0xa3, 0x31, 0x53, 0x7f, 0x37,
	0x46, 0x7c, 0x32, 0xe1, 0xa1, 0xfa, 0xf5, 0xc5, 0x98, 0x4e, 0xd8, 0xcb, 0x98, 0x45, 0x97, 0x2c,
	0x7a, 0x08, 0xa0, 0x87, 0xf1, 0x05, 0x8d, 0xd8, 0xcb, 0x09, 0x8b, 0x63, 0x3a, 0x66, 0x0f, 0x13,
	0x7a, 0x16, 0xb0, 0x97, 0x71, 0x12, 0xcd, 0x46, 0x89, 0x76, 0xe4, 0xfd, 0x1f, 0xbc, 0x31, 0xe2,
	0x4b, 0x3a, 0x4a, 0xfc, 0x4b, 0x3f, 0x99, 0x4b, 0x0a, 0xee, 0x01, 0xd9, 0x39, 0xe1, 0x3c, 0x38,
	0xf5, 0xe3, 0x8b, 0x03, 0x7e, 0xdd, 0x4b, 0xd8, 0xe4, 0xd0, 0x8f, 0x93, 0x01, 0x8b, 0x5b, 0xfb,
	0x64, 0x45, 0xfc, 0xe9, 0x14, 0xf6, 0x4a, 0xfb, 0xf5, 0xc7, 0xf7, 0x1f, 0x18, 0x84, 0x1f, 0x68,
	0x08, 0x48, 0x63, 0x48, 0x2f, 0x99, 0x06, 0x1e, 0xb0, 0x9f, 0xbd, 0x01, 0x8d, 0x36, 0xd9, 0x14,
	0x34, 0x8e, 0x67, 0xc9, 0x74, 0x96, 0x74, 0x69, 0x42, 0x05, 0x0b, 0x5b, 0xa4, 0xde, 0xa5, 0x11,
	0xeb, 0xfa, 0x74, 0xc2, 0x43, 0xcf, 0x29, 0xec, 0x15, 0xf6, 0x4b, 0xad, 0xbb, 0xa4, 0x29, 0x10,
	0x05, 0x16, 0x2e, 0x14, 0xc5, 0x82, 0xdb, 0xd1, 0x49, 0xf8, 0xc0, 0x41, 0xdc, 0x7a, 0x60, 0x70,
	0xb0, 0xf7, 0x20, 0x6f, 0xa3, 0x07, 0x26, 0x8a, 0x7b, 0x4d, 0xd6, 0x4d, 0x48, 0x8b, 0x90, 0x62,
	0x0f, 0xcf, 0x6e, 0x90, 0x95, 0xe7, 0x74, 0xc2, 0xe0, 0xc0, 0x5a, 0xab, 0x4e, 0x4a, 0xfd, 0xa4,
	0xe3, 0x94, 0x60, 0xa9, 0x4e, 0x4a, 0x2f, 0xe6, 0x1d, 0x67, 0x05, 0x7f, 0x74, 0xe7, 0x1d, 0xa7,
	0x9c, 0xfd, 0x38, 0x76, 0x56, 0xb3, 0x6d, 0xc7, 0x4e, 0x05, 0x7f, 0xf4, 0x93, 0x63, 0xa7, 0x0a,
	0xec, 0xff, 0x84, 0xd4, 0xc5, 0xc9, 0xfd, 0xd9, 0x64, 0xea, 0x87, 0xe3, 0xd6, 0x1d, 0xd2, 0x50,
	0x7f, 0x9e, 0xf8, 0x13, 0x16, 0x2b, 0x06, 0xee, 0x91, 0x4d, 0x05, 0x1d, 0xce, 0x4c, 0xf1, 0xb5,
	0xa5, 0xf6, 0xe5, 0x18, 0x97, 0x80, 0x37, 0xf7, 0x9f, 0x8a, 0xa4, 0x2a, 0x68, 0x0f, 0x68, 0xc2,
	0x94, 0x3c, 0x9e, 0x21, 0x4f, 0x01, 0xe4, 0x59, 0x23, 0xe5, 0x7e, 0xe4, 0x8f, 0x98, 0x22, 0xb8,
	0x41, 0xaa, 0x3f, 0xa6, 0xc1, 0x8c, 0x0d, 0x67, 0x13, 0xa0, 0x53, 0x10, 0xdb, 0xfb, 0x9c, 0x07,
	0x20, 0x64, 0xa1, 0xd5, 0x24, 0x95, 0x53, 0xe6, 0x8f, 0x2f, 0x92, 0x18, 0x04, 0x2d, 0xb4, 0x36,
	0x49, 0xad, 0x9f, 0x20, 0x68, 0x15, 0x40, 0xeb, 0x64, 0xb5, 0x9f, 0x88, 0x63, 0x41, 0xe2, 0x82,
	0xa0, 0xd9, 0x4f, 0xda, 0xd3, 0x29, 0x0b, 0x3d, 0x10, 0xbb, 0x00, 0x72, 0x2a, 0x08, 0xec, 0xab,
	0x21, 0xa9, 0x17, 0x73, 0x24, 0x55, 0x47, 0x52, 0x2f, 0xe6, 0xb0, 0xa5, 0x81, 0xa4, 0x5e, 0xcc,
	0x15, 0xa9, 0x35, 0x24, 0x85, 0x10, 0xd8, 0xb7, 0x8e, 0xa4, 0xba, 0x29, 0xa9, 0x6d, 0x24, 0xd5,
	0x95, 0xa4, 0x76, 0x90, 0x54, 0x17, 0x49, 0xdd, 0x45, 0x52, 0x5d, 0x9d, 0x94, 0x23, 0xa0, 0xee,
	0x4c, 0x9a, 0x48, 0x40, 0x84, 0x77, 0x3b, 0x64, 0xa3, 0x73, 0x41, 0x83, 0x80, 0x85, 0xe3, 0x9c,
	0x8f, 0xde, 0x21, 0x8d, 0x74, 0x65, 0x30, 0x39, 0x53, 0x0a, 0x6d, 0x92, 0x8a, 0x50, 0x5f, 0x9f,
	0x26, 0x4a, 0x9f, 0x2d, 0x42, 0x14, 0x63, 0x02, 0x26, 0x5d, 0x67, 0x93, 0xd4, 0xf0, 0x5e, 0x78,
	0xd2, 0x81, 0xdc, 0x2f, 0xf4, 0x63, 0x17, 0x2f, 0xa6, 0xd5, 0xa5, 0xc5, 0x66, 0xf7, 0xa7, 0xa4,
	0x21, 0xfe, 0x3e, 0x9c, 0x8d, 0x5e, 0xcd, 0x05, 0xc3, 0xc2, 0x1a, 0x9c, 0x07, 0xa9, 0x3b, 0x6f,
	0x90, 0xea, 0x60, 0x16, 0x4a, 0xff, 0x92, 0x2c, 0xda, 0x44, 0x2a, 0x2d, 0xf2, 0x05, 0xac, 0xba,
	0xbb, 0x06, 0xf9, 0x58, 0x90, 0x1f, 0xb0, 0x78, 0x16, 0x24, 0xd2, 0x9f, 0xdc, 0x57, 0x64, 0xeb,
	0xab, 0xa9, 0x47, 0x13, 0x36, 0x4c, 0x68, 0x32, 0x8b, 0x07, 0xec, 0x67, 0x33, 0x16, 0x27, 0x62,
	0x9b, 0x04, 0xc0, 0xb6, 0x32, 0x38, 0x21, 0x4f, 0xb4, 0x4b, 0xd5, 0xf3, 0x62, 0xa7, 0xb4, 0x57,
	0xda, 0x2f, 0xc9, 0xad, 0x91, 0xf8, 0xbd, 0xb2, 0x57, 0xda, 0xaf, 0x29, 0xdf, 0x95, 0xd7, 0x6a,
	0x8d, 0x94, 0x61, 0x0d, 0x3c, 0xad, 0xe6, 0xfe, 0x77, 0x81, 0x6c, 0xff, 0xe1, 0x8c, 0x45, 0x73,
	0xc1, 0xe5, 0x71, 0xe4, 0xb1, 0x08, 0xcf, 0xdb, 0x21, 0xeb, 0x07, 0x6c, 0xec, 0x4b, 0x39, 0x13,
	0x3a, 0x99, 0x66, 0x46, 0xfa, 0x61, 0xe8, 0x65, 0xd0, 0xd4, 0x48, 0x9d, 0x59, 0xd4, 0xa7, 0x63,
	0x06, 0x82, 0x97, 0xc1, 0x65, 0xe9, 0x98, 0x0d, 0xfd, 0x9f, 0x33, 0x90, 0xbb, 0x2c, 0xb6, 0x3c,
	0x63, 0xf3, 0x2b, 0x1e, 0xa9, 0xb3, 0x05, 0x2b, 0x27, 0xf3, 0x29, 0x8b, 0xc1, 0xc9, 0xcb, 0x9a,
	0x80, 0x55, 0xf8, 0xdd, 0x22, 0x64, 0xc8, 0x67, 0xd1, 0x88, 0x89, 0x4d, 0xe0, 0xe0, 0x40, 0xa3,
	0x4f, 0xe7, 0x00, 0x20, 0xb8, 0xa9, 0x73, 0x41, 0xc3, 0xb1, 0xdc, 0x54, 0x07, 0x98, 0xb8, 0x50,
	0x74, 0xae, 0x68, 0x35, 0x90, 0x1b, 0xc1, 0x31, 0x6c, 0xba, 0x23, 0x20, 0xee, 0xaf, 0x8a, 0xa4,
	0xa5, 0x2c, 0x23, 0x43, 0xb7, 0x94, 0x5a, 0x93, 0xa3, 0xb0, 0x20, 0x47, 0x31, 0x2f, 0x47, 0x09,
	0xe4, 0x68, 0x90, 0x15, 0x20, 0x2c, 0xc5, 0x5c, 0xd4, 0x5b, 0xd9, 0xaa, 0x37, 0x19, 0xd8, 0xb6,
	0x48, 0xbd, 0x17, 0x0f, 0x98, 0xc8, 0x6b, 0xe2, 0x1a, 0x09, 0xa1, 0xaa, 0x12, 0x98, 0x3a, 0x14,
	0x48, 0x55, 0x15, 0x52, 0xb5, 0x93, 0x24, 0xf2, 0xcf, 0x66, 0x70, 0x97, 0x4b, 0x86, 0xc6, 0xd6,
	0x50, 0xf0, 0x5e, 0xfc, 0x94, 0xc6, 0x5f, 0xc5, 0x2c, 0x82, 0x6b, 0x5c, 0x15, 0xbc, 0x0d, 0x79,
	0x94, 0x38, 0x4d, 0xe0, 0xf4, 0x0e, 0x69, 0xf4, 0xe2, 0xf6, 0x2c, 0xe1, 0x5f, 0x4d, 0x03, 0x4e,
	0x3d, 0x67, 0x13, 0x8f, 0x3b, 0xe4, 0x23, 0x1a, 0x28, 0x5a, 0x2d, 0xf0, 0xa1, 0x4d, 0x52, 0x7b,
	0x4a, 0x2f, 0x59, 0x2f, 0x3e, 0xf5, 0x43, 0x67, 0x4b, 0xec, 0x73, 0x7b, 0xa4, 0xae, 0x69, 0xac,
	0xf5, 0xa9, 0x71, 0xa1, 0xee, 0x2d, 0x5e, 0x28, 0xb5, 0x59, 0xda, 0x63, 0xcc, 0x3a, 0x7c, 0x16,
	0x26, 0x52, 0x87, 0xee, 0x7f, 0xad, 0x90, 0x0a, 0x2e, 0x2f, 0xcf, 0x14, 0x0d, 0xb2, 0xd2, 0x1b,
	0xf1, 0x50, 0xa9, 0x79, 0x8b, 0xd4, 0x7f, 0xc4, 0xb9, 0x17, 0xb7, 0x27, 0x40, 0x48, 0x6a, 0x3b,
	0xa7, 0xaa, 0xf2, 0xa2, 0xaa, 0x56, 0x41, 0x55, 0x5b, 0xa4, 0x2e, 0xb4, 0xd2, 0x1e, 0x8d, 0x00,
	0xb9, 0x02, 0x14, 0xd7, 0xc9, 0xaa, 0x00, 0xf6, 0x64, 0x50, 0x2d, 0x65, 0x91, 0xbc, 0x06, 0x3f,
	0x33, 0xf5, 0x92, 0xec, 0xac, 0xcc, 0x56, 0x2d, 0x38, 0x0b, 0xbc, 0x34, 0x52, 0xf1, 0x1b, 0x14,
	0x55, 0x12, 0x30, 0xa9, 0x60, 0x61, 0x6d, 0xf0, 0x37, 0x80, 0x75, 0x22, 0x46, 0x13, 0x06, 0xb0,
	0xed, 0x6c, 0x9f, 0x87, 0xb0, 0x1d, 0x80, 0x3d, 0x21, 0x55, 0x2c, 0x27, 0x9c, 0xbb, 0xa0, 0xd9,
	0x0f, 0x96, 0x6a, 0x16, 0xd4, 0x71, 0xea, 0x87, 0x10, 0x11, 0xfd, 0xf8, 0x42, 0x45, 0xa9, 0x5d,
	0xf4, 0x2c, 0xdd, 0xaa, 0xef, 0x67, 0xee, 0x76, 0x3c, 0x65, 0x61, 0xfb, 0x8a, 0x46, 0x9e, 0xb3,
	0x87, 0xea, 0xca, 0x4c, 0xfd, 0x01, 0x80, 0xd6, 0xc9, 0xea, 0x41, 0x44, 0x43, 0x2f, 0x76, 0x5c,
	0xf0, 0x86, 0xf4, 0xaa, 0x7e, 0x98, 0x05, 0x98, 0x79, 0xc0, 0x62, 0xe7, 0x23, 0xd0, 0xee, 0x1a,
	0x29, 0x0b, 0xa6, 0x63, 0xe7, 0x63, 0xf4, 0x1d, 0xac, 0x35, 0x62, 0xe7, 0x13, 0x00, 0x35, 0x49,
	0x65, 0x40, 0x23, 0xf6, 0x7c, 0x36, 0x71, 0x3e, 0x05, 0x65, 0x6e, 0x93, 0xb5, 0x7e, 0xc4, 0xbd,
	0xd9, 0x28, 0x51, 0x0c, 0x3e, 0x00, 0xb0, 0x43, 0x36, 0x7e, 0x34, 0xa3, 0x91, 0xe7, 0xd3, 0xf0,
	0xf8, 0x92, 0x45, 0xa0, 0x98, 0x87, 0xa8, 0xac, 0x5e, 0x8c, 0x6b, 0xce, 0xe7, 0xa8, 0x7c, 0x84,
	0xf4, 0x3c, 0xe7, 0x11, 0x46, 0xdc, 0x03, 0x7e, 0xad, 0x54, 0xf1, 0x18, 0x22, 0xee, 0xbf, 0x96,
	0x64, 0xf1, 0xa3, 0xab, 0x4c, 0xf7, 0xba, 0x26, 0xa9, 0x00, 0xbc, 0x87, 0x45, 0x01, 0xba, 0x61,
	0xc9, 0x4c, 0xf0, 0x2b, 0x78, 0x91, 0x7b, 0x71, 0x2f, 0x3c, 0xa7, 0x41, 0xe0, 0x9f, 0x05, 0xe8,
	0x73, 0x77, 0x49, 0x73, 0xc0, 0xa6, 0x01, 0x0b, 0xfd, 0xf8, 0x42, 0x79, 0xe8, 0x2a, 0x48, 0xf4,
	0x1e, 0xd9, 0x4e, 0x17, 0x7a, 0x61, 0xc2, 0xa2, 0x4b, 0x1a, 0x80, 0x58, 0x15, 0x8c, 0x26, 0x98,
	0x31, 0xaa, 0x69, 0xba, 0x63, 0x11, 0xa4, 0xcf, 0x34, 0x9c, 0x01, 0x77, 0x10, 0x63, 0xd6, 0x11,
	0x94, 0x65, 0x95, 0x26, 0xa2, 0x1d, 0xf8, 0xe3, 0x43, 0x1e, 0xc7, 0xce, 0x06, 0xee, 0x19, 0x4e,
	0x68, 0x10, 0x00, 0x68, 0x13, 0x23, 0x6c, 0x07, 0x0a, 0x68, 0xf0, 0x5d, 0xf8, 0x7d, 0xe0, 0x8f,
	0xf1, 0x82, 0x43, 0xac, 0x03, 0x14, 0x01, 0x81, 0x28, 0x29, 0xa4, 0x92, 0x18, 0x6d, 0xcf, 0x53,
	0x2e, 0xbe, 0x8d, 0x0b, 0x12, 0x35, 0x5b, 0xd8, 0x81, 0x85, 0x7b, 0x64, 0x13, 0x69, 0x64, 0x4b,
	0x77, 0x91, 0xfc, 0x80, 0x09, 0xbf, 0x3b, 0xbc, 0x04, 0x1f, 0x85, 0x1b, 0xd5, 0x8e, 0x22, 0x1f,
	0x35, 0xf2, 0xbe, 0x66, 0x40, 0xe1, 0x3c, 0x3d, 0xcf, 0xf9, 0xd0, 0x72, 0x79, 0x3e, 0x02, 0xa3,
	0xfe, 0x31, 0xb9, 0xa3, 0xdb, 0x14, 0x2f, 0x4d, 0xeb, 0x73, 0x23, 0x2c, 0xb9, 0xaf, 0xbf, 0x3c,
	0x02, 0xcb, 0x16, 0x9f, 0xfe, 0xb6, 0x40, 0x36, 0x16, 0xf6, 0xfd, 0xa6, 0xb8, 0xcc, 0xa2, 0x43,
	0xb8, 0x5f, 0x91, 0x4d, 0xc5, 0xee, 0xa9, 0x1f, 0x76, 0xce, 0xc7, 0xa0, 0x89, 0xdf, 0x36, 0x34,
	0xf1, 0xfe, 0x52, 0x4d, 0x48, 0x14, 0x9b, 0x1a, 0x7e, 0x5d, 0x20, 0x6b, 0x0b, 0x9b, 0x32, 0xcf,
	0x7b, 0x1b, 0x55, 0x18, 0xcc, 0x97, 0xf1, 0x0a, 0xa0, 0xeb, 0xae, 0x2e, 0xba, 0x6e, 0x25, 0xe7,
	0xba, 0xd5, 0x9c, 0xeb, 0xd6, 0x16, 0x5c, 0x97, 0x60, 0x80, 0xd1, 0x3a, 0xa5, 0x9e, 0xac, 0x76,
	0x4b, 0xee, 0x5f, 0x16, 0xc9, 0x5d, 0xdd, 0xb2, 0xff, 0x9f, 0xc9, 0x1f, 0x93, 0xb3, 0xcc, 0x46,
	0x0b, 0x91, 0x00, 0xd2, 0x79, 0x3f, 0x62, 0x43, 0x1a, 0x60, 0x11, 0xb0, 0xa5, 0x52, 0xb0, 0x88,
	0xcd, 0x3d, 0x0f, 0xca, 0x80, 0x92, 0x38, 0x14, 0xc3, 0xad, 0x60, 0x05, 0x44, 0x2d, 0x59, 0xf2,
	0x97, 0x5e, 0x04, 0x35, 0x73, 0x6e, 0x73, 0xc8, 0x93, 0x84, 0x45, 0x50, 0xee, 0xae, 0x91, 0xb2,
	0x6e, 0x5e, 0xe1, 0x16, 0x32, 0x50, 0xa7, 0x06, 0x6e, 0x92, 0x0a, 0x26, 0xd2, 0xd4, 0xc6, 0x9d,
	0x2c, 0x29, 0xbb, 0x8f, 0xb2, 0xd2, 0x0a, 0xc9, 0xc6, 0xd3, 0x5c, 0x9d, 0x5b, 0x16, 0x25, 0xeb,
	0x51, 0x3c, 0x96, 0x14, 0xdc, 0xa1, 0x79, 0xdf, 0xc0, 0x7f, 0xbf, 0x6d, 0xf8, 0xef, 0xee, 0xeb,
	0x6f, 0xb2, 0xcd, 0x7d, 0x9f, 0x11, 0x47, 0xdf, 0x32, 0x64, 0x01, 0x1b, 0x25, 0xcc, 0x03, 0xe2,
	0x0f, 0x0d, 0xe2, 0x37, 0xe7, 0x58, 0xf7, 0x3f, 0x8a, 0xa4, 0x61, 0x1c, 0xa8, 0x87, 0x03, 0xe3,
	0x5a, 0xd8, 0x6e, 0x01, 0x96, 0x32, 0x2b, 0xf0, 0xcb, 0xb0, 0x6c, 0xd9, 0x66, 0xd9, 0x55, 0x74,
	0xa7, 0x9c, 0x65, 0xd3, 0xdb, 0xa0, 0x15, 0x2e, 0xb5, 0x9b, 0x0a, 0x17, 0xf4, 0xd1, 0x3a, 0x06,
	0xdd, 0x61, 0xc2, 0x47, 0xaf, 0x54, 0xc8, 0x49, 0x0b, 0xe4, 0x2e, 0x8b, 0x47, 0x91, 0x7f, 0xc6,
	0xe0, 0xa2, 0xd4, 0xf2, 0xb1, 0x79, 0xdd, 0x52, 0xd9, 0x34, 0xb1, 0xa6, 0x18, 0xf2, 0xc0, 0x3b,
	0x9e, 0x25, 0x00, 0xdc, 0x40, 0x17, 0x41, 0x67, 0x6e, 0xbd, 0x49, 0xfd, 0xe3, 0x9e, 0x4a, 0xdf,
	0x01, 0x15, 0x83, 0x32, 0xc0, 0x5a, 0x37, 0xce, 0x23, 0x4c, 0x1c, 0x9b, 0x33, 0xfc, 0x4d, 0x41,
	0x2a, 0x53, 0xdb, 0x95, 0x59, 0xb0, 0x9c, 0xab, 0x3c, 0x33, 0x0d, 0xca, 0x6e, 0x46, 0x14, 0x38,
	0xf1, 0x53, 0x2e, 0x1d, 0x5c, 0x56, 0x4c, 0x1c, 0x6b, 0xbe, 0x34, 0x88, 0xf5, 0x42, 0x3f, 0xf1,
	0x69, 0xa0, 0xba, 0x1b, 0x21, 0x70, 0xe0, 0x8f, 0x5e, 0x49, 0x1e, 0xb2, 0x6e, 0x25, 0x53, 0x42,
	0xdd, 0xa2, 0x84, 0x06, 0x28, 0x41, 0xdd, 0xcb, 0x34, 0x50, 0xde, 0x3e, 0x9c, 0xa7, 0x28, 0x36,
	0x15, 0xfc, 0x83, 0x0a, 0xe7, 0xd9, 0xa6, 0xb7, 0xd6, 0x40, 0xae, 0x16, 0x96, 0x3e, 0xbc, 0xa0,
	0x03, 0x43, 0x4f, 0x95, 0x54, 0x05, 0x6f, 0xab, 0x96, 0x9f, 0x92, 0x6d, 0xc1, 0x7e, 0x97, 0x05,
	0xfe, 0x25, 0x8b, 0xe6, 0xd0, 0xae, 0x82, 0x6a, 0x1e, 0x19, 0xaa, 0xf9, 0xd0, 0xae, 0x1a, 0x03,
	0xcd, 0xa6, 0x1e, 0x4a, 0xde, 0x59, 0xd8, 0xd7, 0x65, 0x09, 0xf5, 0x03, 0x6b, 0xc4, 0x30, 0xa7,
	0x72, 0xfd, 0x80, 0xce, 0x59, 0xf4, 0xc3, 0xeb, 0x11, 0x74, 0xa3, 0xcb, 0xea, 0x8a, 0xff, 0x29,
	0x4a, 0xcb, 0x9a, 0xbc, 0x34, 0x49, 0x05, 0xfe, 0x58, 0x9e, 0x52, 0x45, 0xa1, 0x2b, 0x00, 0xf2,
	0x96, 0x97, 0x10, 0x06, 0x3f, 0x4f, 0x78, 0x42, 0x03, 0x95, 0x5d, 0x4d, 0x4d, 0xa6, 0xb9, 0x07,
	0x8f, 0x03, 0xe8, 0x6a, 0x2e, 0x46, 0x54, 0x30, 0x2a, 0xa8, 0x5d, 0xe0, 0x04, 0xd5, 0xbd, 0xa2,
	0xec, 0x17, 0x15, 0xb0, 0x7f, 0xc1, 0x43, 0x11, 0x5e, 0x04, 0x74, 0x87, 0xac, 0x2b, 0x68, 0xdb,
	0xf3, 0x22, 0x16, 0x8b, 0x30, 0x53, 0x94, 0x11, 0x43, 0xef, 0xb1, 0xea, 0xb9, 0x1e, 0xab, 0x91,
	0x86, 0x45, 0x9e, 0x60, 0x90, 0x31, 0xad, 0xbc, 0x9e, 0x8e, 0x12, 0xf8, 0x64, 0x4a, 0xc3, 0x39,
	0x84, 0x04, 0xa0, 0xab, 0x00, 0x1d, 0xee, 0x31, 0x28, 0x26, 0x61, 0xe0, 0x71, 0xec, 0x79, 0x30,
	0x61, 0xaa, 0x89, 0xe8, 0x75, 0x3c, 0x65, 0x11, 0x4d, 0x78, 0xe4, 0xdc, 0x43, 0xcf, 0x03, 0x85,
	0x81, 0x30, 0xbb, 0x90, 0x62, 0x3c, 0xb2, 0x2b, 0xcf, 0x32, 0x94, 0xdf, 0xe1, 0xb3, 0xc8, 0x67,
	0x51, 0x2f, 0x3c, 0xe7, 0x56, 0x3b, 0x20, 0x2b, 0x45, 0x1b, 0x2b, 0x25, 0x9d, 0x15, 0x08, 0xed,
	0x58, 0x96, 0x0e, 0xd8, 0x68, 0x3e, 0x0a, 0x58, 0xe6, 0xa2, 0xb7, 0x2a, 0x4b, 0x75, 0x2c, 0x6b,
	0x3d, 0x56, 0x94, 0x69, 0xd2, 0xd8, 0x77, 0xb3, 0xf7, 0x6c, 0x92, 0x5a, 0x37, 0xa2, 0x57, 0xba,
	0xf3, 0x6c, 0x91, 0xba, 0x22, 0xa2, 0x79, 0x4a, 0xce, 0x80, 0x69, 0x1c, 0xd3, 0x5c, 0xaf, 0x82,
	0xce, 0xa3, 0x8c, 0x5a, 0x47, 0xa3, 0x42, 0x82, 0x69, 0xe4, 0x06, 0x39, 0xfb, 0x98, 0x5b, 0x44,
	0x58, 0x80, 0x83, 0x3e, 0xcb, 0x4e, 0x3f, 0x9f, 0xc5, 0x34, 0x00, 0x5f, 0xf8, 0x1c, 0x53, 0x24,
	0xfc, 0x7a, 0x64, 0xf1, 0x8c, 0xc7, 0xe8, 0xc9, 0x8a, 0x69, 0xc9, 0xcc, 0x77, 0x01, 0xba, 0x43,
	0xd6, 0x15, 0x14, 0x33, 0xce, 0x17, 0x38, 0xa6, 0x4b, 0x9d, 0xe2, 0x3b, 0x29, 0xcd, 0x98, 0x45,
	0x03, 0x46, 0x63, 0x1e, 0x3a, 0xbf, 0x03, 0xf6, 0xfa, 0xbb, 0xa2, 0x2c, 0x12, 0x74, 0x95, 0x82,
	0x6c, 0xc2, 0x21, 0x44, 0xfd, 0x07, 0xf7, 0x5a, 0xd7, 0x2d, 0xaa, 0xa7, 0x88, 0xae, 0xf7, 0xdc,
	0x1f, 0xbd, 0x0a, 0xb3, 0x54, 0x0f, 0x6d, 0x0e, 0x0d, 0xc0, 0xf3, 0x56, 0xf2, 0x95, 0x5d, 0x19,
	0x03, 0x9e, 0xa4, 0x0b, 0x5a, 0x5b, 0x45, 0x23, 0x1d, 0xf2, 0x31, 0x74, 0x4d, 0x91, 0xaa, 0x08,
	0xc5, 0x6d, 0x9e, 0x45, 0x66, 0x51, 0x08, 0x3a, 0x18, 0xfb, 0x71, 0xa2, 0x9a, 0xe3, 0x1a, 0xb2,
	0x85, 0x3e, 0x40, 0x50, 0xf8, 0x03, 0x1a, 0xbe, 0x02, 0x2f, 0xad, 0x67, 0x37, 0x22, 0xf0, 0x64,
	0xb4, 0x68, 0x20, 0xd6, 0x09, 0xbd, 0x16, 0x50, 0x59, 0x1c, 0xc3, 0x54, 0x39, 0xa0, 0xc9, 0x39,
	0x8f, 0x26, 0x00, 0x4d, 0x2f, 0xe4, 0xf1, 0x55, 0x08, 0x80, 0xa6, 0x8a, 0xc3, 0xf7, 0xf3, 0x2a,
	0xd3, 0xe2, 0x64, 0xbe, 0x6c, 0x5b, 0x7c, 0xbd, 0x50, 0x88, 0xcb, 0x82, 0xe4, 0x33, 0x59, 0x68,
	0x89, 0x16, 0x1e, 0x08, 0xde, 0x38, 0xb9, 0xc5, 0xdd, 0x36, 0x62, 0xbf, 0x28, 0x93, 0x6a, 0xba,
	0xfe, 0x5e, 0x56, 0xb2, 0x1d, 0x6c, 0xfe, 0xe7, 0xbf, 0xbd, 0xbf, 0xf6, 0xd2, 0xf7, 0xbe, 0xcd,
	0x27, 0x7e, 0xc2, 0x26, 0xd3, 0x64, 0x0e, 0xe8, 0x70, 0xe8, 0xc4, 0x57, 0xe8, 0xd0, 0xb9, 0xc9,
	0x94, 0x06, 0x43, 0x7d, 0x95, 0x0c, 0x45, 0xf6, 0x0b, 0x47, 0x7c, 0xc2, 0x24, 0x70, 0xc5, 0xc8,
	0x9f, 0xcd, 0xd4, 0x76, 0x59, 0x24, 0x4e, 0x8b, 0x22, 0x25, 0x7a, 0xe6, 0x07, 0xa2, 0xab, 0xf1,
	0xe3, 0xd8, 0xe7, 0xa1, 0xaa, 0xf9, 0x5a, 0x84, 0x0c, 0x13, 0x1a, 0x25, 0x72, 0x42, 0xa3, 0x25,
	0x4d, 0x1e, 0x33, 0x09, 0xab, 0xe2, 0xa4, 0x64, 0x78, 0xc1, 0xaf, 0x0c, 0xee, 0x3e, 0x48, 0x0b,
	0xbc, 0x0b, 0x7e, 0x85, 0x47, 0x7d, 0x88, 0xa5, 0xa4, 0x00, 0x6a, 0xc7, 0x7d, 0xa4, 0xc3, 0xb5,
	0x23, 0x3f, 0x36, 0xf6, 0x67, 0xc7, 0x7e, 0x92, 0x0d, 0xc1, 0xb2, 0x09, 0xd2, 0xa7, 0x58, 0x0f,
	0xf5, 0xe2, 0x2e, 0x3b, 0xa7, 0xa2, 0xba, 0xdf, 0x07, 0xd0, 0xa3, 0xac, 0xa9, 0x7b, 0xb0, 0x57,
	0x58, 0x5e, 0xb4, 0x09, 0x85, 0xcb, 0x68, 0xd1, 0x7a, 0xa2, 0xb7, 0x7d, 0x0f, 0x6f, 0x89, 0xf4,
	0x79, 0xda, 0x18, 0x7e, 0x7e, 0x7b, 0x0c, 0xd5, 0x3a, 0x3e, 0xba, 0x25, 0xc6, 0x63, 0xad, 0xb9,
	0x7c, 0x7c, 0x4b, 0x9c, 0xdc, 0xf8, 0xed, 0x49, 0xda, 0x4b, 0x71, 0x1e, 0x74, 0xce, 0xc7, 0x3d,
	0x0f, 0x62, 0x52, 0xc9, 0xfd, 0x5a, 0x56, 0xa5, 0x1a, 0xe6, 0x06, 0xa9, 0x1e, 0xd1, 0x6b, 0x69,
	0xd0, 0x22, 0x06, 0xd0, 0x23, 0x3f, 0xd4, 0x1d, 0xf0, 0x0e, 0x69, 0x08, 0xeb, 0xa4, 0xfb, 0x1a,
	0x06, 0x14, 0xf7, 0xc2, 0x54, 0xd8, 0x3d, 0x91, 0x15, 0xb5, 0x38, 0x61, 0xc0, 0xa6, 0x3c, 0x4a,
	0xe0, 0x52, 0xfd, 0x96, 0x71, 0xa9, 0xde, 0xb3, 0xdc, 0xd2, 0x0c, 0xc1, 0x76, 0xaf, 0x06, 0x69,
	0xeb, 0xa8, 0x11, 0xfd, 0x96, 0x41, 0xf4, 0x5d, 0xfb, 0xc3, 0xe5, 0x72, 0x9a, 0x7f, 0x9a, 0xb6,
	0xe6, 0x32, 0x9c, 0x68, 0x94, 0xf3, 0xe9, 0xd3, 0x4a, 0x59, 0xc7, 0xb2, 0xd1, 0x57, 0x9a, 0x90,
	0xcf, 0xac, 0x6f, 0xa0, 0x89, 0x0c, 0xc1, 0x46, 0xf5, 0x05, 0xd9, 0x39, 0x61, 0x71, 0x22, 0x03,
	0x3a, 0x6e, 0xbf, 0x05, 0x65, 0x13, 0xc1, 0xae, 0xe3, 0x2d, 0x41, 0x39, 0x0d, 0x86, 0x7c, 0x6c,
	0x8d, 0x87, 0x76, 0xd3, 0x1d, 0x72, 0xeb, 0x48, 0xe7, 0x8f, 0xc8, 0x5d, 0x9d, 0x66, 0x7f, 0x36,
	0x99, 0x22, 0xdd, 0x9b, 0x03, 0xb7, 0x86, 0x61, 0xa3, 0x7d, 0x4a, 0xde, 0xd1, 0x69, 0xe3, 0x18,
	0x36, 0x3c, 0xe7, 0x40, 0xff, 0x63, 0x83, 0xfe, 0xdd, 0x25, 0xf4, 0x6d, 0x84, 0x8f, 0xc9, 0xba,
	0x28, 0x60, 0x44, 0xbf, 0x11, 0x79, 0x56, 0x4f, 0x5b, 0xb8, 0x8e, 0xd9, 0x7e, 0x1b, 0xc1, 0xbf,
	0x28, 0x12, 0xa2, 0xed, 0xc8, 0x15, 0x3e, 0x85, 0x5c, 0xe5, 0x5a, 0x4c, 0x5f, 0x07, 0xa0, 0x0a,
	0x4e, 0x9f, 0x23, 0xda, 0x9e, 0x77, 0xc0, 0xaf, 0xb5, 0xc9, 0x07, 0x0e, 0x9d, 0x84, 0x41, 0x25,
	0xb8, 0x8c, 0x03, 0x2d, 0x71, 0x5a, 0x47, 0x9b, 0xf1, 0x6d, 0x93, 0x35, 0x01, 0xca, 0x52, 0x72,
	0x05, 0x33, 0xf0, 0x21, 0x8d, 0x13, 0xb1, 0x04, 0x89, 0x43, 0x26, 0xfd, 0x6d, 0xb2, 0x06, 0x13,
	0xfa, 0x94, 0x6c, 0x0d, 0xef, 0x7b, 0x97, 0x05, 0x19, 0x94, 0x20, 0x54, 0xf0, 0x9d, 0x56, 0x25,
	0x75, 0xac, 0x4a, 0x04, 0x34, 0x2b, 0xd3, 0xdc, 0x21, 0xd9, 0x90, 0x02, 0x68, 0x6a, 0xbd, 0x71,
	0xe4, 0xa2, 0x63, 0xd8, 0x5d, 0xb6, 0x61, 0x6c, 0xb1, 0x28, 0x51, 0x0e, 0x49, 0x4a, 0xe9, 0xd4,
	0x9a, 0x5f, 0x6b, 0xa5, 0x92, 0xa5, 0x81, 0x71, 0x7f, 0x42, 0xb6, 0xd2, 0xae, 0x55, 0xe3, 0xf5,
	0x56, 0x13, 0x1c, 0x0d, 0xc9, 0xc6, 0xee, 0x5c, 0x3e, 0x0c, 0xe8, 0xbb, 0xf2, 0x1c, 0x6b, 0xd5,
	0xf4, 0x12, 0x9e, 0x8d, 0x5e, 0xa3, 0x6c, 0x11, 0x63, 0xd5, 0x14, 0xbd, 0x82, 0x3d, 0xbe, 0xb0,
	0xb2, 0xa9, 0xff, 0x1b, 0x7b, 0x7c, 0x03, 0xc5, 0x26, 0x91, 0x27, 0xfd, 0xea, 0x6d, 0x2c, 0x50,
	0x46, 0x69, 0xf2, 0xbe, 0xba, 0x41, 0xaa, 0xc2, 0x29, 0xd3, 0x11, 0x74, 0xc9, 0x3d, 0x12, 0x7e,
	0x1e, 0x6a, 0x8c, 0x7f, 0x66, 0x30, 0xfe, 0x8e, 0xcd, 0x18, 0xe1, 0x72, 0xa6, 0xaf, 0x48, 0x2d,
	0x5b, 0xbf, 0xd1, 0x00, 0x16, 0x7d, 0x37, 0x49, 0xe5, 0x29, 0x8d, 0x85, 0x29, 0x81, 0xe5, 0x6a,
	0xce, 0x00, 0x95, 0xc5, 0x87, 0x05, 0x39, 0x0d, 0x7e, 0x46, 0x1a, 0x78, 0xb1, 0x6e, 0x57, 0x6a,
	0xe2, 0x6e, 0x9b, 0x14, 0xbf, 0x2c, 0x90, 0x6a, 0xba, 0x7e, 0x1b, 0xae, 0x6d, 0x4c, 0xa6, 0xe6,
	0xa9, 0xe6, 0xcd, 0x53, 0xc3, 0x27, 0x5c, 0xd5, 0x92, 0x48, 0x39, 0x88, 0x65, 0x5a, 0x52, 0x5f,
	0xe8, 0x7f, 0x1a, 0xd0, 0xeb, 0x7c, 0x4d, 0x1a, 0xd0, 0x38, 0x0d, 0xd9, 0x28, 0xf1, 0x79, 0x28,
	0x34, 0x7d, 0x1c, 0xb2, 0x23, 0x3f, 0x54, 0x13, 0x20, 0xf5, 0x9b, 0x5e, 0xab, 0xba, 0x63, 0x9d,
	0xac, 0x9e, 0x5c, 0x71, 0xb1, 0x5e, 0xd2, 0x7f, 0xd3, 0x6b, 0x15, 0xed, 0x36, 0x48, 0xf5, 0xe4,
	0x22, 0x62, 0x40, 0x01, 0x02, 0x9d, 0xfb, 0x67, 0xf2, 0x3e, 0x1d, 0x51, 0x3f, 0xc0, 0x43, 0xb2,
	0x11, 0x13, 0x04, 0xa1, 0x3e, 0x07, 0x45, 0x3e, 0xca, 0x4a, 0x1b, 0x05, 0x79, 0x9c, 0x11, 0x55,
	0x90, 0x27, 0x2a, 0x7a, 0x42, 0x83, 0x37, 0xe1, 0x09, 0x6b, 0x47, 0x8c, 0x82, 0x79, 0x08, 0x7c,
	0xd6, 0xd0, 0x22, 0xe4, 0xcb, 0x88, 0xb1, 0xe7, 0xb3, 0xc9, 0x19, 0x8b, 0x54, 0x50, 0xfb, 0x7b,
	0xf5, 0xac, 0xaf, 0x8a, 0xdf, 0x65, 0x4c, 0xa8, 0x26, 0x27, 0x7b, 0x44, 0xee, 0xd2, 0xf9, 0x09,
	0x9f, 0xea, 0x4e, 0xbf, 0x4e, 0x56, 0xa5, 0xa2, 0x55, 0xb0, 0x35, 0x87, 0xaa, 0x55, 0x51, 0x7f,
	0x77, 0xe9, 0xfc, 0x88, 0x87, 0x2c, 0xc3, 0xac, 0x6b, 0xe4, 0x70, 0x45, 0xf5, 0x5a, 0xef, 0x90,
	0x2d, 0x68, 0x94, 0x84, 0xc2, 0xe2, 0x0b, 0x1e, 0x78, 0xb0, 0xae, 0xfa, 0xae, 0xfb, 0xa4, 0xd5,
	0xa5, 0x73, 0xd5, 0xe8, 0xa5, 0xd4, 0x9a, 0x69, 0xa2, 0xd0, 0xd7, 0x54, 0x2f, 0xb1, 0x43, 0xd6,
	0x4d, 0x7a, 0xf0, 0xc6, 0x07, 0x0e, 0xf3, 0x25, 0x63, 0xe9, 0x57, 0x3a, 0xc0, 0x0d, 0x8a, 0x7b,
	0x42, 0xaf, 0x61, 0x3c, 0xa2, 0x3a, 0x11, 0x1a, 0x08, 0xc0, 0x7d, 0xb8, 0x08, 0xff, 0xa8, 0xa6,
	0xa3, 0x7d, 0x3a, 0x3f, 0xa5, 0x11, 0x3c, 0xf5, 0xc0, 0xf0, 0x39, 0xb9, 0xf0, 0x22, 0x7a, 0xa5,
	0x66, 0xc0, 0xbf, 0x9b, 0x7d, 0x49, 0xa6, 0xc3, 0x63, 0xe7, 0xf7, 0x50, 0x8a, 0x6c, 0x41, 0x24,
	0x36, 0xe0, 0xe2, 0xfb, 0xc8, 0xae, 0xb9, 0xe6, 0xfc, 0x3e, 0xc0, 0xdf, 0x23, 0xdb, 0x19, 0x5c,
	0x09, 0x09, 0x68, 0x7f, 0x80, 0x5f, 0x67, 0x2d, 0x2c, 0x3b, 0x3f, 0x48, 0x6b, 0x69, 0x91, 0x8e,
	0xc1, 0x21, 0xda, 0xc2, 0x21, 0xdc, 0x63, 0x15, 0xcd, 0xd5, 0x93, 0xb0, 0x10, 0x42, 0x37, 0xfc,
	0x82, 0x26, 0xd3, 0x2f, 0xc0, 0x8e, 0xc3, 0x11, 0x0e, 0x0f, 0x06, 0xec, 0x4c, 0x1c, 0x5f, 0x52,
	0x9f, 0xea, 0xe0, 0x68, 0xe1, 0x39, 0x4f, 0x98, 0xa0, 0xd7, 0x20, 0x2b, 0x27, 0xec, 0x5a, 0x06,
	0x88, 0x9a, 0xfb, 0x8b, 0x82, 0xf4, 0xb6, 0x0e, 0xe7, 0x41, 0x97, 0x5f, 0x85, 0x1d, 0x1e, 0x9e,
	0xfb, 0xe6, 0xa1, 0xeb, 0x64, 0x55, 0xf6, 0x4b, 0x70, 0x5a, 0x55, 0x28, 0xa2, 0xc3, 0xc3, 0xc4,
	0x0f, 0x67, 0x7c, 0x16, 0x83, 0x56, 0x4b, 0xa8, 0x55, 0x13, 0x1e, 0x67, 0x6f, 0x87, 0x48, 0x5e,
	0x1b, 0xd5, 0x6c, 0x90, 0x6a, 0x97, 0xce, 0x65, 0xa7, 0xba, 0x6a, 0x19, 0xfd, 0xc9, 0x30, 0xfd,
	0x25, 0xb9, 0x07, 0xec, 0xcd, 0xa2, 0x88, 0x85, 0xa3, 0x79, 0x87, 0x87, 0x97, 0x2c, 0x12, 0xcd,
	0x5f, 0x5e, 0x35, 0x0d, 0xb2, 0xd2, 0xe1, 0x7e, 0x98, 0x7d, 0xa9, 0x63, 0xcc, 0x2b, 0x44, 0xd1,
	0xa8, 0x00, 0xda, 0xa7, 0x8e, 0x53, 0x1e, 0xc6, 0xec, 0x86, 0xa2, 0x31, 0x55, 0xea, 0xe8, 0x82,
	0x46, 0x63, 0xeb, 0x50, 0xfa, 0x4f, 0x88, 0xa3, 0x76, 0xc9, 0x0f, 0x79, 0x0e, 0xf9, 0x38, 0x25,
	0x9e, 0x4f, 0x87, 0x56, 0xe2, 0x29, 0x9a, 0xbd, 0xe4, 0xdf, 0x01, 0xb7, 0x86, 0x9b, 0x6c, 0x30,
	0x9e, 0xff, 0x7c, 0xc5, 0x52, 0x8d, 0x02, 0x92, 0x8d, 0xea, 0x73, 0xe9, 0x68, 0xed, 0x51, 0xb2,
	0x74, 0x48, 0xb1, 0x48, 0x4e, 0xed, 0xb6, 0xd1, 0x7b, 0x4a, 0xde, 0x95, 0xe1, 0x3b, 0x47, 0x15,
	0x1f, 0x26, 0x6d, 0x9f, 0xc8, 0x94, 0xd1, 0xbd, 0x20, 0x5d, 0xc4, 0x4e, 0x75, 0xaf, 0x04, 0xcf,
	0x27, 0x9b, 0x1a, 0x0d, 0xd9, 0x10, 0xdd, 0xae, 0x52, 0x52, 0x28, 0xcb, 0x92, 0xdb, 0x91, 0x21,
	0x32, 0xec, 0xca, 0x3d, 0x14, 0x9a, 0xef, 0x07, 0xe9, 0x93, 0x54, 0x09, 0x27, 0x86, 0xbd, 0x58,
	0x24, 0x47, 0xf9, 0x7e, 0xe0, 0xfe, 0x75, 0x41, 0x16, 0x75, 0x8a, 0xde, 0x60, 0x16, 0xb0, 0xdb,
	0x17, 0x75, 0x1a, 0x92, 0x85, 0x55, 0xf8, 0xfc, 0xe7, 0x8a, 0x46, 0x9e, 0xf6, 0xc1, 0xc4, 0xf7,
	0xb4, 0xaf, 0x6a, 0x9a, 0x40, 0xfa, 0x93, 0xd7, 0x92, 0x06, 0x7c, 0xf8, 0xc2, 0xf6, 0x57, 0x05,
	0x72, 0xaf, 0xed, 0x79, 0xb9, 0x63, 0xd1, 0x30, 0xc8, 0x6e, 0xf1, 0xb6, 0xec, 0xc2, 0xb7, 0x83,
	0x01, 0xd3, 0x5e, 0xbf, 0x2d, 0xdc, 0x7e, 0x9f, 0xac, 0x9d, 0x32, 0xf6, 0xea, 0x88, 0x87, 0xc9,
	0xc5, 0x5b, 0xb0, 0xfc, 0xb5, 0x61, 0x2a, 0x38, 0x56, 0x77, 0x20, 0xd5, 0xa3, 0xa0, 0x25, 0xf3,
	0xef, 0x95, 0x65, 0x9c, 0x69, 0x3f, 0x63, 0x73, 0x95, 0xd0, 0xb4, 0x78, 0x20, 0x1f, 0x62, 0xc6,
	0xe4, 0xdd, 0xdc, 0x09, 0x06, 0xbf, 0xad, 0xef, 0x18, 0x56, 0xbc, 0x25, 0xdf, 0x36, 0xaf, 0xfb,
	0x97, 0x82, 0x1c, 0xa7, 0x2f, 0xec, 0xd5, 0x05, 0x52, 0x5f, 0x3f, 0xa9, 0x82, 0xa8, 0x68, 0x17,
	0x32, 0xfd, 0xdc, 0x38, 0x13, 0xcb, 0x94, 0x38, 0x2f, 0xa4, 0xf0, 0x60, 0x3d, 0x47, 0xe3, 0x0b,
	0xee, 0x7a, 0x3a, 0xe4, 0x45, 0x3b, 0x36, 0x17, 0xed, 0xb8, 0x81, 0x9d, 0x18, 0x80, 0x90, 0x2e,
	0x64, 0x68, 0x97, 0xca, 0x29, 0x87, 0x60, 0x0d, 0x02, 0x8c, 0x56, 0x45, 0x3f, 0x31, 0xf4, 0xf6,
	0xf1, 0x72, 0xbd, 0x69, 0x88, 0x36, 0xb5, 0xfd, 0x95, 0x76, 0xbb, 0xf4, 0xad, 0xb7, 0xea, 0x73,
	0x45, 0x61, 0x13, 0xd1, 0xab, 0x34, 0x4f, 0x66, 0xcd, 0x69, 0x8b, 0x10, 0x29, 0x22, 0xc0, 0xe4,
	0x18, 0x72, 0x9f, 0xac, 0x74, 0x69, 0x42, 0x9d, 0xda, 0xb2, 0x8a, 0x19, 0xe2, 0x10, 0x4d, 0xa8,
	0xdb, 0x13, 0x85, 0x9d, 0xfc, 0xfb, 0x35, 0xdf, 0xfc, 0xc9, 0xc4, 0x26, 0x4f, 0x28, 0xe9, 0xcd,
	0x73, 0xf6, 0xcc, 0x55, 0x76, 0xc7, 0x72, 0x00, 0x9d, 0x8a, 0x67, 0xf6, 0x22, 0xdf, 0x35, 0xb4,
	0xb8, 0x7f, 0x83, 0x16, 0x5f, 0xdb, 0x98, 0xfc, 0xb2, 0x20, 0xf3, 0x87, 0x65, 0x77, 0xce, 0x03,
	0x17, 0xda, 0xbd, 0xfc, 0x03, 0x5b, 0x93, 0x54, 0x4e, 0xe5, 0x87, 0x21, 0xaa, 0xb4, 0x17, 0xd5,
	0xf3, 0x7c, 0xca, 0xb4, 0xda, 0x1e, 0x5f, 0x40, 0x08, 0x0e, 0x18, 0x6e, 0x7c, 0x4e, 0x73, 0x7d,
	0xf9, 0x66, 0x99, 0xf2, 0x97, 0x1b, 0x93, 0x7c, 0x61, 0xa8, 0xe2, 0xb3, 0x1b, 0x54, 0xf1, 0xfa,
	0x99, 0xc9, 0x9f, 0x17, 0x72, 0x8e, 0xab, 0x6d, 0xbf, 0x49, 0x19, 0x66, 0xef, 0x0b, 0xb3, 0x13,
	0x79, 0x33, 0xd5, 0x63, 0xa3, 0xea, 0x86, 0xda, 0xa3, 0xc4, 0xec, 0x76, 0xd2, 0x2c, 0x42, 0xf4,
	0x77, 0xf1, 0xf6, 0x28, 0x79, 0x93, 0x9e, 0xd9, 0x40, 0xb1, 0x49, 0x76, 0x96, 0x06, 0x8b, 0xff,
	0x43, 0x71, 0xcc, 0x6f, 0x32, 0xdc, 0x09, 0xd9, 0x95, 0x95, 0x22, 0x38, 0x10, 0x54, 0x43, 0x6d,
	0xf5, 0x3f, 0x25, 0x9d, 0x73, 0x51, 0xf1, 0xb4, 0xbe, 0x67, 0xc8, 0xf1, 0x2d, 0x4b, 0x05, 0xb1,
	0x04, 0xd9, 0x26, 0xd2, 0x8f, 0xb5, 0xcf, 0xba, 0xa1, 0xa2, 0x9a, 0xf2, 0x08, 0xfe, 0x3f, 0xe5,
	0xe6, 0x11, 0x6d, 0xba, 0xdd, 0x3e, 0x5e, 0x78, 0x37, 0xa5, 0x8b, 0x2c, 0xf4, 0x23, 0xff, 0xe7,
	0xaa, 0x6c, 0x5b, 0x78, 0x89, 0xb7, 0x96, 0x41, 0x06, 0x96, 0xe5, 0x94, 0x83, 0xc6, 0x3f, 0x7f,
	0xb3, 0x5b, 0xf8, 0xf5, 0x37, 0xbb, 0x85, 0x7f, 0xff, 0x66, 0xb7, 0xf0, 0xbf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x2f, 0xc7, 0x7a, 0xda, 0x35, 0x34, 0x00, 0x00,
}

func (m *ToolWishBoxItemListRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ToolWishBoxItemListRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToolWishBoxItemListRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ToolSaveWishBoxItemReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ToolSaveWishBoxItemReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToolSaveWishBoxItemReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ToolOutputDataRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ToolOutputDataRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToolOutputDataRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WishItemDiamond != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.WishItemDiamond))
		i--
		dAtA[i] = 0x10
	}
	if m.DareDiamond != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.DareDiamond))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ToolOutputitemRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ToolOutputitemRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToolOutputitemRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ToolOutputitem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ToolOutputitem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToolOutputitem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PtO != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PtO))
		i--
		dAtA[i] = 0x40
	}
	if m.XyO != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.XyO))
		i--
		dAtA[i] = 0x38
	}
	if m.DyO != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.DyO))
		i--
		dAtA[i] = 0x30
	}
	if m.DyC != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.DyC))
		i--
		dAtA[i] = 0x28
	}
	if m.XyC != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.XyC))
		i--
		dAtA[i] = 0x20
	}
	if m.PtC != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PtC))
		i--
		dAtA[i] = 0x18
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ToolPumping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ToolPumping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToolPumping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PumpingAvgDiamond != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PumpingAvgDiamond))
		i--
		dAtA[i] = 0x18
	}
	if m.PumpingSumDiamond != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PumpingSumDiamond))
		i--
		dAtA[i] = 0x10
	}
	if m.PumpingTimes != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PumpingTimes))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ToolRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ToolRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToolRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.DyAppendRate != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.DyAppendRate))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc1
	}
	if m.DyAppend != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.DyAppend))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb9
	}
	if m.DyRate != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.DyRate))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb1
	}
	if m.DyWeights != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.DyWeights))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa9
	}
	if m.XyAppendRate != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.XyAppendRate))))
		i--
		dAtA[i] = 0x71
	}
	if m.XyAppend != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.XyAppend))))
		i--
		dAtA[i] = 0x69
	}
	if m.XyRate != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.XyRate))))
		i--
		dAtA[i] = 0x61
	}
	if m.XyWeights != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.XyWeights))))
		i--
		dAtA[i] = 0x59
	}
	if m.PtAppendRate != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.PtAppendRate))))
		i--
		dAtA[i] = 0x49
	}
	if m.PtAppend != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.PtAppend))))
		i--
		dAtA[i] = 0x41
	}
	if m.PtRate != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.PtRate))))
		i--
		dAtA[i] = 0x39
	}
	if m.PtWeights != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.PtWeights))))
		i--
		dAtA[i] = 0x31
	}
	if m.Weights != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Weights))))
		i--
		dAtA[i] = 0x29
	}
	if m.Pool != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Pool))))
		i--
		dAtA[i] = 0x21
	}
	if m.ValueSum != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.ValueSum))))
		i--
		dAtA[i] = 0x19
	}
	if m.Price != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Price))
		i--
		dAtA[i] = 0x10
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ToolRateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ToolRateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToolRateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WishBoxId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.WishBoxId))
		i--
		dAtA[i] = 0x28
	}
	if m.WeightsPat != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.WeightsPat))
		i--
		dAtA[i] = 0x20
	}
	if m.PoolPat != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.PoolPat))))
		i--
		dAtA[i] = 0x19
	}
	if m.ChallengeRmb != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.ChallengeRmb))
		i--
		dAtA[i] = 0x10
	}
	if m.ChallengeDiamond != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.ChallengeDiamond))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ToolRateRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ToolRateRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToolRateRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ToolLuckyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ToolLuckyReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToolLuckyReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WishBoxId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.WishBoxId))
		i--
		dAtA[i] = 0x20
	}
	if m.ChallengeDiamond != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.ChallengeDiamond))
		i--
		dAtA[i] = 0x18
	}
	if m.RunTimes != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.RunTimes))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ToolLuckyRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ToolLuckyRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToolLuckyRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Result != nil {
		i -= len(*m.Result)
		copy(dAtA[i:], *m.Result)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StrId != nil {
		i -= len(*m.StrId)
		copy(dAtA[i:], *m.StrId)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.StrId)))
		i--
		dAtA[i] = 0x32
	}
	if m.Id != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x28
	}
	if len(m.StrIds) > 0 {
		for iNdEx := len(m.StrIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StrIds[iNdEx])
			copy(dAtA[i:], m.StrIds[iNdEx])
			i = encodeVarintBrowerWish(dAtA, i, uint64(len(m.StrIds[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerWish(dAtA, i, uint64(m.Ids[iNdEx]))
			i--
			dAtA[i] = 0x18
		}
	}
	if m.Note != nil {
		i -= len(*m.Note)
		copy(dAtA[i:], *m.Note)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Note)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryWishOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWishOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWishOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TimeType != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.TimeType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.PayStatus != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PayStatus))
		i--
		dAtA[i] = 0x60
	}
	if m.ChangeType != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.ChangeType))
		i--
		dAtA[i] = 0x58
	}
	if m.PayType != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PayType))
		i--
		dAtA[i] = 0x50
	}
	if m.SourceType != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.SourceType))
		i--
		dAtA[i] = 0x48
	}
	if m.Status != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x40
	}
	if m.Types != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Types))
		i--
		dAtA[i] = 0x38
	}
	if m.Keyword != nil {
		i -= len(*m.Keyword)
		copy(dAtA[i:], *m.Keyword)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Keyword)))
		i--
		dAtA[i] = 0x32
	}
	if m.PageSize != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageSize))
		i--
		dAtA[i] = 0x20
	}
	if m.CurPage != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.CurPage))
		i--
		dAtA[i] = 0x18
	}
	if m.EndTimestamp != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.EndTimestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.BeginTimestamp != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.BeginTimestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WishBoxListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishBoxListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishBoxListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HaveIsWin != nil {
		i--
		if *m.HaveIsWin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.LocalStatus) > 0 {
		for iNdEx := len(m.LocalStatus) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerWish(dAtA, i, uint64(m.LocalStatus[iNdEx]))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x90
		}
	}
	if m.IsAutoUpload != nil {
		i--
		if *m.IsAutoUpload {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Sort != nil {
		i -= len(*m.Sort)
		copy(dAtA[i:], *m.Sort)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Sort)))
		i--
		dAtA[i] = 0x7a
	}
	if m.IsHasUser != nil {
		i--
		if *m.IsHasUser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.Status != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Attribute) > 0 {
		for iNdEx := len(m.Attribute) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerWish(dAtA, i, uint64(m.Attribute[iNdEx]))
			i--
			dAtA[i] = 0x60
		}
	}
	if m.IsChallenge != nil {
		i--
		if *m.IsChallenge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.IsRecommend != nil {
		i--
		if *m.IsRecommend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.EndTimestamp != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.EndTimestamp))
		i--
		dAtA[i] = 0x30
	}
	if m.BeginTimestamp != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.BeginTimestamp))
		i--
		dAtA[i] = 0x28
	}
	if m.Type != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.Keyword != nil {
		i -= len(*m.Keyword)
		copy(dAtA[i:], *m.Keyword)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Keyword)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PageSize != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if m.CurPage != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.CurPage))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WishBoxList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishBoxList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishBoxList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WishBox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishBox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishBox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BoxPoolId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.BoxPoolId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x90
	}
	if m.GuardianId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.GuardianId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x88
	}
	if m.IsGuardian != nil {
		i--
		if *m.IsGuardian {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x80
	}
	if m.GuardianOverTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.GuardianOverTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf8
	}
	if m.ProductStatus != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.ProductStatus))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf0
	}
	if m.RareNum != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.RareNum))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb8
	}
	if len(m.WishItems) > 0 {
		for iNdEx := len(m.WishItems) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerWish(dAtA, i, uint64(m.WishItems[iNdEx]))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xb0
		}
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerWish(dAtA, i, uint64(m.Items[iNdEx]))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xa8
		}
	}
	if len(m.Styles) > 0 {
		for iNdEx := len(m.Styles) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerWish(dAtA, i, uint64(m.Styles[iNdEx]))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xa0
		}
	}
	if len(m.Types) > 0 {
		for iNdEx := len(m.Types) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerWish(dAtA, i, uint64(m.Types[iNdEx]))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x98
		}
	}
	if len(m.Brands) > 0 {
		for iNdEx := len(m.Brands) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerWish(dAtA, i, uint64(m.Brands[iNdEx]))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x90
		}
	}
	if m.HaveIsWin != nil {
		i--
		if *m.HaveIsWin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.IsOpenAward != nil {
		i--
		if *m.IsOpenAward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.LocalStatus != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.LocalStatus))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.WishPoolId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.WishPoolId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if len(m.ItemList) > 0 {
		for iNdEx := len(m.ItemList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ItemList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	if m.UpdateTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.CreateTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.UploadTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.UploadTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.SortWeight != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.SortWeight))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.IsRecommend != nil {
		i--
		if *m.IsRecommend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.Status != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x50
	}
	if m.Price != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Price))
		i--
		dAtA[i] = 0x48
	}
	if m.UserId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.UserId))
		i--
		dAtA[i] = 0x40
	}
	if m.UserAccount != nil {
		i -= len(*m.UserAccount)
		copy(dAtA[i:], *m.UserAccount)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.UserAccount)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Attribute) > 0 {
		for iNdEx := len(m.Attribute) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerWish(dAtA, i, uint64(m.Attribute[iNdEx]))
			i--
			dAtA[i] = 0x30
		}
	}
	if m.IsChallenge != nil {
		i--
		if *m.IsChallenge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.GoodsAmount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.GoodsAmount))
		i--
		dAtA[i] = 0x20
	}
	if m.Icon != nil {
		i -= len(*m.Icon)
		copy(dAtA[i:], *m.Icon)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Icon)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WishBoxGoodsWin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishBoxGoodsWin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishBoxGoodsWin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreateTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa0
	}
	if m.BoxItemId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.BoxItemId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if m.ArrivalTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.ArrivalTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.RewardLv != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.RewardLv))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.SmallWinAddWeight != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.SmallWinAddWeight))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.BigWinAddWeight != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.BigWinAddWeight))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.CommonAddWeight != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.CommonAddWeight))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.SmallWin != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.SmallWin))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.BigWin != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.BigWin))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.Common != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Common))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.SmallLoss != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.SmallLoss))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.BigLoss != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.BigLoss))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.WishBoxId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.WishBoxId))
		i--
		dAtA[i] = 0x78
	}
	if m.GoodsType != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.GoodsType))
		i--
		dAtA[i] = 0x70
	}
	if m.PerRate != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PerRate))
		i--
		dAtA[i] = 0x58
	}
	if m.Diamond != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Diamond))
		i--
		dAtA[i] = 0x40
	}
	if m.ReplenishIntervalTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.ReplenishIntervalTime))
		i--
		dAtA[i] = 0x38
	}
	if m.ReplenishAmount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.ReplenishAmount))
		i--
		dAtA[i] = 0x30
	}
	if m.IsInfallible != nil {
		i--
		if *m.IsInfallible {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Price != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Price))
		i--
		dAtA[i] = 0x20
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GoodsId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.GoodsId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WishBoxGoodsItemList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishBoxGoodsItemList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishBoxGoodsItemList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WishBoxGoodsItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishBoxGoodsItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishBoxGoodsItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GoodsType != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.GoodsType))
		i--
		dAtA[i] = 0x70
	}
	if m.ReplenishIntervalTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.ReplenishIntervalTime))
		i--
		dAtA[i] = 0x38
	}
	if m.ReplenishAmount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.ReplenishAmount))
		i--
		dAtA[i] = 0x30
	}
	if m.IsInfallible != nil {
		i--
		if *m.IsInfallible {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Price != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Price))
		i--
		dAtA[i] = 0x20
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GoodsId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.GoodsId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WishBoxWinCfgList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishBoxWinCfgList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishBoxWinCfgList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WishBoxWinCfg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishBoxWinCfg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishBoxWinCfg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WishBoxItemId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.WishBoxItemId))
		i--
		dAtA[i] = 0x68
	}
	if m.SmallWin != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.SmallWin))
		i--
		dAtA[i] = 0x50
	}
	if m.BigWin != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.BigWin))
		i--
		dAtA[i] = 0x48
	}
	if m.Common != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Common))
		i--
		dAtA[i] = 0x40
	}
	if m.SmallLoss != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.SmallLoss))
		i--
		dAtA[i] = 0x38
	}
	if m.BigLoss != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.BigLoss))
		i--
		dAtA[i] = 0x30
	}
	if m.GoodsType != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.GoodsType))
		i--
		dAtA[i] = 0x28
	}
	if m.Price != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Price))
		i--
		dAtA[i] = 0x20
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GoodsId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.GoodsId))
		i--
		dAtA[i] = 0x10
	}
	if m.WishBoxId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.WishBoxId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WishBoxGoodsListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishBoxGoodsListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishBoxGoodsListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TimeType != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.TimeType))
		i--
		dAtA[i] = 0x78
	}
	if len(m.WishItemTypeId) > 0 {
		for iNdEx := len(m.WishItemTypeId) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerWish(dAtA, i, uint64(m.WishItemTypeId[iNdEx]))
			i--
			dAtA[i] = 0x68
		}
	}
	if len(m.WishBrandId) > 0 {
		for iNdEx := len(m.WishBrandId) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerWish(dAtA, i, uint64(m.WishBrandId[iNdEx]))
			i--
			dAtA[i] = 0x60
		}
	}
	if m.IsPreSale != nil {
		i--
		if *m.IsPreSale {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.Status != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x50
	}
	if m.Diamond != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Diamond))
		i--
		dAtA[i] = 0x40
	}
	if m.Sort != nil {
		i -= len(*m.Sort)
		copy(dAtA[i:], *m.Sort)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Sort)))
		i--
		dAtA[i] = 0x3a
	}
	if m.EndTimestamp != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.EndTimestamp))
		i--
		dAtA[i] = 0x30
	}
	if m.BeginTimestamp != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.BeginTimestamp))
		i--
		dAtA[i] = 0x28
	}
	if m.Type != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.Keyword != nil {
		i -= len(*m.Keyword)
		copy(dAtA[i:], *m.Keyword)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Keyword)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PageSize != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if m.CurPage != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.CurPage))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WishBoxLotteryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishBoxLotteryReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishBoxLotteryReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Count))
		i--
		dAtA[i] = 0x20
	}
	if m.Account != nil {
		i -= len(*m.Account)
		copy(dAtA[i:], *m.Account)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Account)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ProductId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.ProductId))
		i--
		dAtA[i] = 0x10
	}
	if m.BoxId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.BoxId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WishBoxLotteryResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishBoxLotteryResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishBoxLotteryResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Msg != nil {
		i -= len(*m.Msg)
		copy(dAtA[i:], *m.Msg)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Msg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Result != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Result))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WishBoxGoodsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishBoxGoodsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishBoxGoodsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WishBoxGoodsSelectedList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishBoxGoodsSelectedList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishBoxGoodsSelectedList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WishBoxGoods) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishBoxGoods) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishBoxGoods) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.CreateTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.Diamond != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Diamond))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.SoldOutTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.SoldOutTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.UploadTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.UploadTime))
		i--
		dAtA[i] = 0x78
	}
	if m.ArrivalTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.ArrivalTime))
		i--
		dAtA[i] = 0x70
	}
	if m.Describe != nil {
		i -= len(*m.Describe)
		copy(dAtA[i:], *m.Describe)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Describe)))
		i--
		dAtA[i] = 0x6a
	}
	if m.StockAmount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.StockAmount))
		i--
		dAtA[i] = 0x60
	}
	if m.Type != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x58
	}
	if m.Status != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x50
	}
	if m.Price != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Price))
		i--
		dAtA[i] = 0x48
	}
	if m.UserId != nil {
		i -= len(*m.UserId)
		copy(dAtA[i:], *m.UserId)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.UserId)))
		i--
		dAtA[i] = 0x42
	}
	if m.WishItemTypeId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.WishItemTypeId))
		i--
		dAtA[i] = 0x38
	}
	if m.WishBrandId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.WishBrandId))
		i--
		dAtA[i] = 0x30
	}
	if m.IsPreSale != nil {
		i--
		if *m.IsPreSale {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Icon != nil {
		i -= len(*m.Icon)
		copy(dAtA[i:], *m.Icon)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Icon)))
		i--
		dAtA[i] = 0x22
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.WishBoxId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.WishBoxId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WishGoodsBrandList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishGoodsBrandList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishGoodsBrandList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WishGoodsBrand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishGoodsBrand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishGoodsBrand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x60
	}
	if m.CreateTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x58
	}
	if m.ClickCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.ClickCount))
		i--
		dAtA[i] = 0x50
	}
	if m.Initial != nil {
		i -= len(*m.Initial)
		copy(dAtA[i:], *m.Initial)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Initial)))
		i--
		dAtA[i] = 0x32
	}
	if m.HotWeight != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.HotWeight))
		i--
		dAtA[i] = 0x28
	}
	if m.IsHot != nil {
		i--
		if *m.IsHot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Status != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WishGoodsTypeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishGoodsTypeList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishGoodsTypeList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WishGoodsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishGoodsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishGoodsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x60
	}
	if m.CreateTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x58
	}
	if m.ClickCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.ClickCount))
		i--
		dAtA[i] = 0x50
	}
	if m.HotWeight != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.HotWeight))
		i--
		dAtA[i] = 0x38
	}
	if m.Initial != nil {
		i -= len(*m.Initial)
		copy(dAtA[i:], *m.Initial)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Initial)))
		i--
		dAtA[i] = 0x32
	}
	if m.IsRecommend != nil {
		i--
		if *m.IsRecommend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.IsHot != nil {
		i--
		if *m.IsHot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Status != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WishDeliveryOrderList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishDeliveryOrderList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishDeliveryOrderList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WishDeliveryOrderDetailList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishDeliveryOrderDetailList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishDeliveryOrderDetailList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WishDeliveryOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishDeliveryOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishDeliveryOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GoodsName != nil {
		i -= len(*m.GoodsName)
		copy(dAtA[i:], *m.GoodsName)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.GoodsName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.Operator != nil {
		i -= len(*m.Operator)
		copy(dAtA[i:], *m.Operator)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Operator)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.Odd != nil {
		i -= len(*m.Odd)
		copy(dAtA[i:], *m.Odd)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Odd)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.CompanyCode != nil {
		i -= len(*m.CompanyCode)
		copy(dAtA[i:], *m.CompanyCode)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.CompanyCode)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.Company != nil {
		i -= len(*m.Company)
		copy(dAtA[i:], *m.Company)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Company)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.UpdateTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x70
	}
	if m.Note != nil {
		i -= len(*m.Note)
		copy(dAtA[i:], *m.Note)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Note)))
		i--
		dAtA[i] = 0x6a
	}
	if m.UserId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.UserId))
		i--
		dAtA[i] = 0x60
	}
	if m.UserAccount != nil {
		i -= len(*m.UserAccount)
		copy(dAtA[i:], *m.UserAccount)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.UserAccount)))
		i--
		dAtA[i] = 0x5a
	}
	if m.DeliverAddress == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("DeliverAddress")
	} else {
		i -= len(*m.DeliverAddress)
		copy(dAtA[i:], *m.DeliverAddress)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.DeliverAddress)))
		i--
		dAtA[i] = 0x52
	}
	if m.DeliverPhone == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("DeliverPhone")
	} else {
		i -= len(*m.DeliverPhone)
		copy(dAtA[i:], *m.DeliverPhone)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.DeliverPhone)))
		i--
		dAtA[i] = 0x4a
	}
	if m.DeliverName == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("DeliverName")
	} else {
		i -= len(*m.DeliverName)
		copy(dAtA[i:], *m.DeliverName)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.DeliverName)))
		i--
		dAtA[i] = 0x42
	}
	if m.Status != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x38
	}
	if m.DeliveryTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.DeliveryTime))
		i--
		dAtA[i] = 0x30
	}
	if m.CreateTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x28
	}
	if m.PriceTotal != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PriceTotal))
		i--
		dAtA[i] = 0x20
	}
	if m.GoodsPrice != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.GoodsPrice))
		i--
		dAtA[i] = 0x18
	}
	if m.GoodsId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.GoodsId))
		i--
		dAtA[i] = 0x10
	}
	if m.OrderId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDeliveryOrderCourierInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDeliveryOrderCourierInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDeliveryOrderCourierInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Odd != nil {
		i -= len(*m.Odd)
		copy(dAtA[i:], *m.Odd)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Odd)))
		i--
		dAtA[i] = 0x22
	}
	if m.CompanyCode != nil {
		i -= len(*m.CompanyCode)
		copy(dAtA[i:], *m.CompanyCode)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.CompanyCode)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Company != nil {
		i -= len(*m.Company)
		copy(dAtA[i:], *m.Company)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Company)))
		i--
		dAtA[i] = 0x12
	}
	if m.OrderId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WishRecycleOrderList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishRecycleOrderList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishRecycleOrderList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WishRecycleOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishRecycleOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishRecycleOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RecycleDiamond != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.RecycleDiamond))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.RecyclePrice != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.RecyclePrice))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.UserReason != nil {
		i -= len(*m.UserReason)
		copy(dAtA[i:], *m.UserReason)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.UserReason)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if m.Operator != nil {
		i -= len(*m.Operator)
		copy(dAtA[i:], *m.Operator)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Operator)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.UpdateTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x90
	}
	if m.Note != nil {
		i -= len(*m.Note)
		copy(dAtA[i:], *m.Note)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Note)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	if m.RefusalNote != nil {
		i -= len(*m.RefusalNote)
		copy(dAtA[i:], *m.RefusalNote)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.RefusalNote)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	if m.InitTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.InitTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc8
	}
	if m.Status != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc0
	}
	if m.Type != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x60
	}
	if m.UserId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.UserId))
		i--
		dAtA[i] = 0x58
	}
	if m.GoodsPrice != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.GoodsPrice))
		i--
		dAtA[i] = 0x38
	}
	if m.UserAccount != nil {
		i -= len(*m.UserAccount)
		copy(dAtA[i:], *m.UserAccount)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.UserAccount)))
		i--
		dAtA[i] = 0x32
	}
	if m.RecycleTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.RecycleTime))
		i--
		dAtA[i] = 0x28
	}
	if m.DrawPrice != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.DrawPrice))
		i--
		dAtA[i] = 0x18
	}
	if m.GoodsId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.GoodsId))
		i--
		dAtA[i] = 0x10
	}
	if m.OrderId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WishRecycleOrderUserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishRecycleOrderUserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishRecycleOrderUserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OwnGold != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.OwnGold))
		i--
		dAtA[i] = 0x78
	}
	if m.PlatformGold != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PlatformGold))
		i--
		dAtA[i] = 0x70
	}
	if m.TaxGold != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.TaxGold))
		i--
		dAtA[i] = 0x68
	}
	if m.GoldTotal != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.GoldTotal))
		i--
		dAtA[i] = 0x60
	}
	if m.BankCode != nil {
		i -= len(*m.BankCode)
		copy(dAtA[i:], *m.BankCode)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.BankCode)))
		i--
		dAtA[i] = 0x5a
	}
	if m.OrderId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.OrderId))
		i--
		dAtA[i] = 0x50
	}
	if m.RegisterTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.RegisterTime))
		i--
		dAtA[i] = 0x48
	}
	if m.CurDiamond != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.CurDiamond))
		i--
		dAtA[i] = 0x40
	}
	if m.LoginAddr != nil {
		i -= len(*m.LoginAddr)
		copy(dAtA[i:], *m.LoginAddr)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.LoginAddr)))
		i--
		dAtA[i] = 0x3a
	}
	if m.PlayerType != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PlayerType))
		i--
		dAtA[i] = 0x30
	}
	if m.Diamond != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Diamond))
		i--
		dAtA[i] = 0x28
	}
	if m.RealName != nil {
		i -= len(*m.RealName)
		copy(dAtA[i:], *m.RealName)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.RealName)))
		i--
		dAtA[i] = 0x22
	}
	if m.Nickname != nil {
		i -= len(*m.Nickname)
		copy(dAtA[i:], *m.Nickname)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Nickname)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Account != nil {
		i -= len(*m.Account)
		copy(dAtA[i:], *m.Account)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if m.PlayerId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PlayerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WishRecycleOrderDetailList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishRecycleOrderDetailList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishRecycleOrderDetailList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WishPoolList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishPoolList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishPoolList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WishPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PoolCfgId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PoolCfgId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.LocalStatus != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.LocalStatus))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	if m.SmallWin != nil {
		{
			size, err := m.SmallWin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrowerWish(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	if m.BigWin != nil {
		{
			size, err := m.BigWin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrowerWish(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	if m.Common != nil {
		{
			size, err := m.Common.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrowerWish(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	if m.SmallLoss != nil {
		{
			size, err := m.SmallLoss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrowerWish(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	if m.BigLoss != nil {
		{
			size, err := m.BigLoss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrowerWish(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	if m.IsDefault != nil {
		i--
		if *m.IsDefault {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc0
	}
	if m.IsOpenAward != nil {
		i--
		if *m.IsOpenAward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb8
	}
	if m.ShowCloseAward != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.ShowCloseAward))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb0
	}
	if m.ShowStartAward != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.ShowStartAward))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa8
	}
	if m.ShowCommission != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.ShowCommission))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa0
	}
	if m.ShowRecycle != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.ShowRecycle))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if m.ShowInitialValue != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.ShowInitialValue))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.CreateTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x7a
	}
	if m.CloseAward != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.CloseAward))
		i--
		dAtA[i] = 0x40
	}
	if m.StartAward != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.StartAward))
		i--
		dAtA[i] = 0x38
	}
	if m.Commission != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Commission))
		i--
		dAtA[i] = 0x30
	}
	if m.Recycle != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Recycle))
		i--
		dAtA[i] = 0x28
	}
	if m.IncomeValue != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.IncomeValue))
		i--
		dAtA[i] = 0x20
	}
	if m.InitialValue != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.InitialValue))
		i--
		dAtA[i] = 0x18
	}
	if m.PoolLimit != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PoolLimit))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WishPoolStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishPoolStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishPoolStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShowMinValue != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.ShowMinValue))
		i--
		dAtA[i] = 0x68
	}
	if m.ShowMaxValue != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.ShowMaxValue))
		i--
		dAtA[i] = 0x60
	}
	if m.MinValue != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.MinValue))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxValue != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.MaxValue))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *WishPoolReportList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishPoolReportList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishPoolReportList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WishBoxReportList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishBoxReportList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishBoxReportList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WishBoxDetailReportList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishBoxDetailReportList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishBoxDetailReportList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WishItemReportList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishItemReportList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishItemReportList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TestPlayerWishItemList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestPlayerWishItemList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestPlayerWishItemList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TestWishPoolLogList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestWishPoolLogList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestWishPoolLogList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TestWishPoolPumpLogList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestWishPoolPumpLogList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestWishPoolPumpLogList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TestWishPoolBoxPoolInfoList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestWishPoolBoxPoolInfoList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestWishPoolBoxPoolInfoList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DrawRecordList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DrawRecordList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DrawRecordList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DrawRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DrawRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DrawRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserType != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.UserType))
		i--
		dAtA[i] = 0x60
	}
	if m.UserNickname != nil {
		i -= len(*m.UserNickname)
		copy(dAtA[i:], *m.UserNickname)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.UserNickname)))
		i--
		dAtA[i] = 0x5a
	}
	if m.DelItemCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.DelItemCount))
		i--
		dAtA[i] = 0x50
	}
	if m.HaveItemCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.HaveItemCount))
		i--
		dAtA[i] = 0x48
	}
	if m.LastDrawTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.LastDrawTime))
		i--
		dAtA[i] = 0x40
	}
	if m.DrawGoldTotal != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.DrawGoldTotal))
		i--
		dAtA[i] = 0x38
	}
	if m.DrawCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.DrawCount))
		i--
		dAtA[i] = 0x30
	}
	if m.WishItemCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.WishItemCount))
		i--
		dAtA[i] = 0x28
	}
	if m.AddBoxCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.AddBoxCount))
		i--
		dAtA[i] = 0x20
	}
	if m.Phone != nil {
		i -= len(*m.Phone)
		copy(dAtA[i:], *m.Phone)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Phone)))
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserAccount != nil {
		i -= len(*m.UserAccount)
		copy(dAtA[i:], *m.UserAccount)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.UserAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddBoxRecordList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddBoxRecordList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddBoxRecordList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddBoxRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddBoxRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddBoxRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreateTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x28
	}
	if m.BoxName != nil {
		i -= len(*m.BoxName)
		copy(dAtA[i:], *m.BoxName)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.BoxName)))
		i--
		dAtA[i] = 0x22
	}
	if m.BoxId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.BoxId))
		i--
		dAtA[i] = 0x18
	}
	if m.UserId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.UserId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *WishGoodsRecordList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishGoodsRecordList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishGoodsRecordList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WishGoodsRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishGoodsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishGoodsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BoxId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.BoxId))
		i--
		dAtA[i] = 0x38
	}
	if m.CreateTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x30
	}
	if m.GoodsName != nil {
		i -= len(*m.GoodsName)
		copy(dAtA[i:], *m.GoodsName)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.GoodsName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BoxName != nil {
		i -= len(*m.BoxName)
		copy(dAtA[i:], *m.BoxName)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.BoxName)))
		i--
		dAtA[i] = 0x22
	}
	if m.GoodsId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.GoodsId))
		i--
		dAtA[i] = 0x18
	}
	if m.UserId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.UserId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *DrawBoxRecordList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DrawBoxRecordList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DrawBoxRecordList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DrawBoxRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DrawBoxRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DrawBoxRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.LastTime))
		i--
		dAtA[i] = 0x38
	}
	if m.DrawCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.DrawCount))
		i--
		dAtA[i] = 0x30
	}
	if m.BoxName != nil {
		i -= len(*m.BoxName)
		copy(dAtA[i:], *m.BoxName)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.BoxName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BoxId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.BoxId))
		i--
		dAtA[i] = 0x18
	}
	if m.UserId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.UserId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *WinRecordList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WinRecordList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WinRecordList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WinRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WinRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WinRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BoxItemId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.BoxItemId))
		i--
		dAtA[i] = 0x68
	}
	if m.CreateTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x38
	}
	if m.HasWish != nil {
		i--
		if *m.HasWish {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.GoodsName != nil {
		i -= len(*m.GoodsName)
		copy(dAtA[i:], *m.GoodsName)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.GoodsName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.GoodsId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.GoodsId))
		i--
		dAtA[i] = 0x18
	}
	if m.UserId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.UserId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *HaveItemList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HaveItemList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HaveItemList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HaveItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HaveItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HaveItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Operator != nil {
		i -= len(*m.Operator)
		copy(dAtA[i:], *m.Operator)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Operator)))
		i--
		dAtA[i] = 0x62
	}
	if m.UpdateTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x58
	}
	if m.PlayerItemId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PlayerItemId))
		i--
		dAtA[i] = 0x50
	}
	if m.BoxName != nil {
		i -= len(*m.BoxName)
		copy(dAtA[i:], *m.BoxName)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.BoxName)))
		i--
		dAtA[i] = 0x4a
	}
	if m.BoxId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.BoxId))
		i--
		dAtA[i] = 0x40
	}
	if m.CreateTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x38
	}
	if m.GoodsName != nil {
		i -= len(*m.GoodsName)
		copy(dAtA[i:], *m.GoodsName)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.GoodsName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.GoodsId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.GoodsId))
		i--
		dAtA[i] = 0x18
	}
	return len(dAtA) - i, nil
}

func (m *PriceSection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceSection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriceSection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ThreeMin != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.ThreeMin))
		i--
		dAtA[i] = 0x28
	}
	if m.TwoMax != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.TwoMax))
		i--
		dAtA[i] = 0x20
	}
	if m.TwoMin != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.TwoMin))
		i--
		dAtA[i] = 0x18
	}
	if m.OneMax != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.OneMax))
		i--
		dAtA[i] = 0x10
	}
	if m.OneMin != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.OneMin))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WishMailSection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishMailSection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishMailSection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FreeNumber != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.FreeNumber))
		i--
		dAtA[i] = 0x60
	}
	if len(m.RemoteAreaList) > 0 {
		for iNdEx := len(m.RemoteAreaList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RemoteAreaList[iNdEx])
			copy(dAtA[i:], m.RemoteAreaList[iNdEx])
			i = encodeVarintBrowerWish(dAtA, i, uint64(len(m.RemoteAreaList[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Postage3 != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Postage3))
		i--
		dAtA[i] = 0x28
	}
	if m.Postage2 != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Postage2))
		i--
		dAtA[i] = 0x20
	}
	if m.Postage1 != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Postage1))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i -= len(*m.Id)
		copy(dAtA[i:], *m.Id)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WishRecycleSection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishRecycleSection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishRecycleSection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RealTax != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.RealTax))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.PlatformTax != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PlatformTax))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.FeeRate != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.FeeRate))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.OrderThreshold != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.OrderThreshold))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.DayDiamondTop != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.DayDiamondTop))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.DayDiamondTopCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.DayDiamondTopCount))
		i--
		dAtA[i] = 0x78
	}
	if m.OrderThresholdMoney != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.OrderThresholdMoney))
		i--
		dAtA[i] = 0x68
	}
	if m.DayMoneyTop != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.DayMoneyTop))
		i--
		dAtA[i] = 0x60
	}
	if m.DayMoneyTopCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.DayMoneyTopCount))
		i--
		dAtA[i] = 0x58
	}
	if m.Status != nil {
		i--
		if *m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.Player != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Player))
		i--
		dAtA[i] = 0x48
	}
	if m.DayTopCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.DayTopCount))
		i--
		dAtA[i] = 0x30
	}
	if m.Platform != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Platform))
		i--
		dAtA[i] = 0x20
	}
	if m.Id != nil {
		i -= len(*m.Id)
		copy(dAtA[i:], *m.Id)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WishPayWarnCfg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishPayWarnCfg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishPayWarnCfg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PhoneList) > 0 {
		for iNdEx := len(m.PhoneList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PhoneList[iNdEx])
			copy(dAtA[i:], m.PhoneList[iNdEx])
			i = encodeVarintBrowerWish(dAtA, i, uint64(len(m.PhoneList[iNdEx])))
			i--
			dAtA[i] = 0x4
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.WithdrawalDiamond != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.WithdrawalDiamond))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x80
	}
	if m.WithdrawalDiamondRate != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.WithdrawalDiamondRate))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf8
	}
	if m.WithdrawalGold != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.WithdrawalGold))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf0
	}
	if m.WithdrawalGoldRate != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.WithdrawalGoldRate))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe8
	}
	if m.WithdrawalTimes != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.WithdrawalTimes))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe0
	}
	if m.WithdrawalTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.WithdrawalTime))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd8
	}
	return len(dAtA) - i, nil
}

func (m *WishGuardianCfg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishGuardianCfg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishGuardianCfg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OnceDiamondRebate != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.OnceDiamondRebate))
		i--
		dAtA[i] = 0x18
	}
	if m.DayDiamondTop != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.DayDiamondTop))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i -= len(*m.Id)
		copy(dAtA[i:], *m.Id)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecycleNoteCfg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecycleNoteCfg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecycleNoteCfg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Text) > 0 {
		for iNdEx := len(m.Text) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Text[iNdEx])
			copy(dAtA[i:], m.Text[iNdEx])
			i = encodeVarintBrowerWish(dAtA, i, uint64(len(m.Text[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WishCoolDownConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishCoolDownConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishCoolDownConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreateTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x38
	}
	if m.DayLimit != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.DayLimit))
		i--
		dAtA[i] = 0x30
	}
	if m.CoolDownTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.CoolDownTime))
		i--
		dAtA[i] = 0x28
	}
	if m.ContinuousTimes != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.ContinuousTimes))
		i--
		dAtA[i] = 0x20
	}
	if m.ContinuousTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.ContinuousTime))
		i--
		dAtA[i] = 0x18
	}
	if m.IsOpen != nil {
		i--
		if *m.IsOpen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i -= len(*m.Id)
		copy(dAtA[i:], *m.Id)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WishCurrencyConversionCfg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishCurrencyConversionCfg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishCurrencyConversionCfg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Diamond != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Diamond))
		i--
		dAtA[i] = 0x28
	}
	if m.Coin != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Coin))
		i--
		dAtA[i] = 0x20
	}
	if m.Id != nil {
		i -= len(*m.Id)
		copy(dAtA[i:], *m.Id)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DiamondItemListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiamondItemListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiamondItemListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DiamondChangeLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiamondChangeLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiamondChangeLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WishPlayerListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishPlayerListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishPlayerListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WishActPoolList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishActPoolList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishActPoolList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateWishActPoolListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateWishActPoolListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateWishActPoolListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BoxIds) > 0 {
		for iNdEx := len(m.BoxIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintBrowerWish(dAtA, i, uint64(m.BoxIds[iNdEx]))
			i--
			dAtA[i] = 0x40
		}
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Id != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WishActPoolDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishActPoolDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishActPoolDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WishActPoolItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishActPoolItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishActPoolItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsHave != nil {
		i--
		if *m.IsHave {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Price != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Price))
		i--
		dAtA[i] = 0x18
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.BoxId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.BoxId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WishActPoolRuleList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishActPoolRuleList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishActPoolRuleList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ItemList) > 0 {
		for iNdEx := len(m.ItemList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ItemList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if m.AwardType != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.AwardType))
		i--
		dAtA[i] = 0x70
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddWishActPoolRuleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWishActPoolRuleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWishActPoolRuleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.WeekMonthList) > 0 {
		for iNdEx := len(m.WeekMonthList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WeekMonthList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if m.AwardType != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.AwardType))
		i--
		dAtA[i] = 0x70
	}
	if m.RuleType != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.RuleType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *WishActPoolRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishActPoolRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishActPoolRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Diamond != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Diamond))
		i--
		dAtA[i] = 0x60
	}
	if m.Key != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Key))
		i--
		dAtA[i] = 0x58
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if m.WishActPoolId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.WishActPoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WishActPoolRuleWeekMonthList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishActPoolRuleWeekMonthList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishActPoolRuleWeekMonthList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WishActPoolAwardItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishActPoolAwardItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishActPoolAwardItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AwardDiamond != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.AwardDiamond))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.AwardType != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.AwardType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.RuleType != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.RuleType))
		i--
		dAtA[i] = 0x78
	}
	if m.Icon != nil {
		i -= len(*m.Icon)
		copy(dAtA[i:], *m.Icon)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Icon)))
		i--
		dAtA[i] = 0x72
	}
	if m.Money != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Money))
		i--
		dAtA[i] = 0x68
	}
	if m.Diamond != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Diamond))
		i--
		dAtA[i] = 0x60
	}
	if m.Key != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Key))
		i--
		dAtA[i] = 0x58
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if m.WishActPoolId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.WishActPoolId))
		i--
		dAtA[i] = 0x18
	}
	if m.WishItemId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.WishItemId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WishActPlayerRecordList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishActPlayerRecordList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishActPlayerRecordList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WishActPlayerRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishActPlayerRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishActPlayerRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.AwardTotal != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.AwardTotal))
		i--
		dAtA[i] = 0x40
	}
	if m.DrawDiamondTotal != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.DrawDiamondTotal))
		i--
		dAtA[i] = 0x38
	}
	if m.UserId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserAccount != nil {
		i -= len(*m.UserAccount)
		copy(dAtA[i:], *m.UserAccount)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.UserAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DrawTotal != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.DrawTotal))
		i--
		dAtA[i] = 0x20
	}
	if m.DayTotal != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.DayTotal))
		i--
		dAtA[i] = 0x18
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WishActPlayerWinRecordList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishActPlayerWinRecordList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishActPlayerWinRecordList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WishActPlayerWinRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishActPlayerWinRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishActPlayerWinRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.UserId))
		i--
		dAtA[i] = 0x60
	}
	if m.UserAccount != nil {
		i -= len(*m.UserAccount)
		copy(dAtA[i:], *m.UserAccount)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.UserAccount)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Note != nil {
		i -= len(*m.Note)
		copy(dAtA[i:], *m.Note)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.Note)))
		i--
		dAtA[i] = 0x52
	}
	if m.TypeName != nil {
		i -= len(*m.TypeName)
		copy(dAtA[i:], *m.TypeName)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.TypeName)))
		i--
		dAtA[i] = 0x4a
	}
	if m.WinTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.WinTime))
		i--
		dAtA[i] = 0x40
	}
	if m.Status != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x38
	}
	if m.CreateTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x30
	}
	if m.Id != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WishActPlayerDrawRecordList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishActPlayerDrawRecordList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishActPlayerDrawRecordList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WishActPlayerDrawRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishActPlayerDrawRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishActPlayerDrawRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Price != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Price))
		i--
		dAtA[i] = 0x50
	}
	if m.ActBoxName != nil {
		i -= len(*m.ActBoxName)
		copy(dAtA[i:], *m.ActBoxName)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.ActBoxName)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ActPoolName != nil {
		i -= len(*m.ActPoolName)
		copy(dAtA[i:], *m.ActPoolName)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.ActPoolName)))
		i--
		dAtA[i] = 0x42
	}
	if m.BoxId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.BoxId))
		i--
		dAtA[i] = 0x38
	}
	if m.CreateTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x30
	}
	if m.Id != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WishActRecordList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishActRecordList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishActRecordList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WishActRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishActRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishActRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Price != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Price))
		i--
		dAtA[i] = 0x48
	}
	if m.ActPoolName != nil {
		i -= len(*m.ActPoolName)
		copy(dAtA[i:], *m.ActPoolName)
		i = encodeVarintBrowerWish(dAtA, i, uint64(len(*m.ActPoolName)))
		i--
		dAtA[i] = 0x42
	}
	if m.BoxId != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.BoxId))
		i--
		dAtA[i] = 0x38
	}
	if m.CreateTime != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x30
	}
	if m.Id != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WishCoinRechargeActivityCfgRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishCoinRechargeActivityCfgRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WishCoinRechargeActivityCfgRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryWishLogReportRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWishLogReportRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWishLogReportRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryWishActivityPrizeLogRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWishActivityPrizeLogRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWishActivityPrizeLogRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageCount != nil {
		i = encodeVarintBrowerWish(dAtA, i, uint64(*m.PageCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrowerWish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintBrowerWish(dAtA []byte, offset int, v uint64) int {
	offset -= sovBrowerWish(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ToolWishBoxItemListRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ToolSaveWishBoxItemReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ToolOutputDataRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DareDiamond != nil {
		n += 1 + sovBrowerWish(uint64(*m.DareDiamond))
	}
	if m.WishItemDiamond != nil {
		n += 1 + sovBrowerWish(uint64(*m.WishItemDiamond))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ToolOutputitemRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ToolOutputitem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovBrowerWish(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.PtC != nil {
		n += 1 + sovBrowerWish(uint64(*m.PtC))
	}
	if m.XyC != nil {
		n += 1 + sovBrowerWish(uint64(*m.XyC))
	}
	if m.DyC != nil {
		n += 1 + sovBrowerWish(uint64(*m.DyC))
	}
	if m.DyO != nil {
		n += 1 + sovBrowerWish(uint64(*m.DyO))
	}
	if m.XyO != nil {
		n += 1 + sovBrowerWish(uint64(*m.XyO))
	}
	if m.PtO != nil {
		n += 1 + sovBrowerWish(uint64(*m.PtO))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ToolPumping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PumpingTimes != nil {
		n += 1 + sovBrowerWish(uint64(*m.PumpingTimes))
	}
	if m.PumpingSumDiamond != nil {
		n += 1 + sovBrowerWish(uint64(*m.PumpingSumDiamond))
	}
	if m.PumpingAvgDiamond != nil {
		n += 1 + sovBrowerWish(uint64(*m.PumpingAvgDiamond))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ToolRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.Price != nil {
		n += 1 + sovBrowerWish(uint64(*m.Price))
	}
	if m.ValueSum != nil {
		n += 9
	}
	if m.Pool != nil {
		n += 9
	}
	if m.Weights != nil {
		n += 9
	}
	if m.PtWeights != nil {
		n += 9
	}
	if m.PtRate != nil {
		n += 9
	}
	if m.PtAppend != nil {
		n += 9
	}
	if m.PtAppendRate != nil {
		n += 9
	}
	if m.XyWeights != nil {
		n += 9
	}
	if m.XyRate != nil {
		n += 9
	}
	if m.XyAppend != nil {
		n += 9
	}
	if m.XyAppendRate != nil {
		n += 9
	}
	if m.DyWeights != nil {
		n += 10
	}
	if m.DyRate != nil {
		n += 10
	}
	if m.DyAppend != nil {
		n += 10
	}
	if m.DyAppendRate != nil {
		n += 10
	}
	if m.Id != nil {
		n += 2 + sovBrowerWish(uint64(*m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ToolRateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeDiamond != nil {
		n += 1 + sovBrowerWish(uint64(*m.ChallengeDiamond))
	}
	if m.ChallengeRmb != nil {
		n += 1 + sovBrowerWish(uint64(*m.ChallengeRmb))
	}
	if m.PoolPat != nil {
		n += 9
	}
	if m.WeightsPat != nil {
		n += 1 + sovBrowerWish(uint64(*m.WeightsPat))
	}
	if m.WishBoxId != nil {
		n += 1 + sovBrowerWish(uint64(*m.WishBoxId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ToolRateRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ToolLuckyReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != nil {
		n += 1 + sovBrowerWish(uint64(*m.PoolId))
	}
	if m.RunTimes != nil {
		n += 1 + sovBrowerWish(uint64(*m.RunTimes))
	}
	if m.ChallengeDiamond != nil {
		n += 1 + sovBrowerWish(uint64(*m.ChallengeDiamond))
	}
	if m.WishBoxId != nil {
		n += 1 + sovBrowerWish(uint64(*m.WishBoxId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ToolLuckyRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = len(*m.Result)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		n += 1 + sovBrowerWish(uint64(*m.Status))
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if len(m.Ids) > 0 {
		for _, e := range m.Ids {
			n += 1 + sovBrowerWish(uint64(e))
		}
	}
	if len(m.StrIds) > 0 {
		for _, s := range m.StrIds {
			l = len(s)
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.Id != nil {
		n += 1 + sovBrowerWish(uint64(*m.Id))
	}
	if m.StrId != nil {
		l = len(*m.StrId)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryWishOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeginTimestamp != nil {
		n += 1 + sovBrowerWish(uint64(*m.BeginTimestamp))
	}
	if m.EndTimestamp != nil {
		n += 1 + sovBrowerWish(uint64(*m.EndTimestamp))
	}
	if m.CurPage != nil {
		n += 1 + sovBrowerWish(uint64(*m.CurPage))
	}
	if m.PageSize != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageSize))
	}
	if m.Keyword != nil {
		l = len(*m.Keyword)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.Types != nil {
		n += 1 + sovBrowerWish(uint64(*m.Types))
	}
	if m.Status != nil {
		n += 1 + sovBrowerWish(uint64(*m.Status))
	}
	if m.SourceType != nil {
		n += 1 + sovBrowerWish(uint64(*m.SourceType))
	}
	if m.PayType != nil {
		n += 1 + sovBrowerWish(uint64(*m.PayType))
	}
	if m.ChangeType != nil {
		n += 1 + sovBrowerWish(uint64(*m.ChangeType))
	}
	if m.PayStatus != nil {
		n += 1 + sovBrowerWish(uint64(*m.PayStatus))
	}
	if m.TimeType != nil {
		n += 2 + sovBrowerWish(uint64(*m.TimeType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishBoxListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurPage != nil {
		n += 1 + sovBrowerWish(uint64(*m.CurPage))
	}
	if m.PageSize != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageSize))
	}
	if m.Keyword != nil {
		l = len(*m.Keyword)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovBrowerWish(uint64(*m.Type))
	}
	if m.BeginTimestamp != nil {
		n += 1 + sovBrowerWish(uint64(*m.BeginTimestamp))
	}
	if m.EndTimestamp != nil {
		n += 1 + sovBrowerWish(uint64(*m.EndTimestamp))
	}
	if m.IsRecommend != nil {
		n += 2
	}
	if m.IsChallenge != nil {
		n += 2
	}
	if len(m.Attribute) > 0 {
		for _, e := range m.Attribute {
			n += 1 + sovBrowerWish(uint64(e))
		}
	}
	if m.Status != nil {
		n += 1 + sovBrowerWish(uint64(*m.Status))
	}
	if m.IsHasUser != nil {
		n += 2
	}
	if m.Sort != nil {
		l = len(*m.Sort)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.IsAutoUpload != nil {
		n += 3
	}
	if len(m.LocalStatus) > 0 {
		for _, e := range m.LocalStatus {
			n += 2 + sovBrowerWish(uint64(e))
		}
	}
	if m.HaveIsWin != nil {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishBoxList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishBox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovBrowerWish(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.Icon != nil {
		l = len(*m.Icon)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.GoodsAmount != nil {
		n += 1 + sovBrowerWish(uint64(*m.GoodsAmount))
	}
	if m.IsChallenge != nil {
		n += 2
	}
	if len(m.Attribute) > 0 {
		for _, e := range m.Attribute {
			n += 1 + sovBrowerWish(uint64(e))
		}
	}
	if m.UserAccount != nil {
		l = len(*m.UserAccount)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.UserId != nil {
		n += 1 + sovBrowerWish(uint64(*m.UserId))
	}
	if m.Price != nil {
		n += 1 + sovBrowerWish(uint64(*m.Price))
	}
	if m.Status != nil {
		n += 1 + sovBrowerWish(uint64(*m.Status))
	}
	if m.IsRecommend != nil {
		n += 3
	}
	if m.SortWeight != nil {
		n += 2 + sovBrowerWish(uint64(*m.SortWeight))
	}
	if m.UploadTime != nil {
		n += 2 + sovBrowerWish(uint64(*m.UploadTime))
	}
	if m.CreateTime != nil {
		n += 2 + sovBrowerWish(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovBrowerWish(uint64(*m.UpdateTime))
	}
	if len(m.ItemList) > 0 {
		for _, e := range m.ItemList {
			l = e.Size()
			n += 2 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.WishPoolId != nil {
		n += 2 + sovBrowerWish(uint64(*m.WishPoolId))
	}
	if m.LocalStatus != nil {
		n += 2 + sovBrowerWish(uint64(*m.LocalStatus))
	}
	if m.IsOpenAward != nil {
		n += 3
	}
	if m.HaveIsWin != nil {
		n += 3
	}
	if len(m.Brands) > 0 {
		for _, e := range m.Brands {
			n += 2 + sovBrowerWish(uint64(e))
		}
	}
	if len(m.Types) > 0 {
		for _, e := range m.Types {
			n += 2 + sovBrowerWish(uint64(e))
		}
	}
	if len(m.Styles) > 0 {
		for _, e := range m.Styles {
			n += 2 + sovBrowerWish(uint64(e))
		}
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			n += 2 + sovBrowerWish(uint64(e))
		}
	}
	if len(m.WishItems) > 0 {
		for _, e := range m.WishItems {
			n += 2 + sovBrowerWish(uint64(e))
		}
	}
	if m.RareNum != nil {
		n += 2 + sovBrowerWish(uint64(*m.RareNum))
	}
	if m.ProductStatus != nil {
		n += 2 + sovBrowerWish(uint64(*m.ProductStatus))
	}
	if m.GuardianOverTime != nil {
		n += 2 + sovBrowerWish(uint64(*m.GuardianOverTime))
	}
	if m.IsGuardian != nil {
		n += 3
	}
	if m.GuardianId != nil {
		n += 2 + sovBrowerWish(uint64(*m.GuardianId))
	}
	if m.BoxPoolId != nil {
		n += 2 + sovBrowerWish(uint64(*m.BoxPoolId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishBoxGoodsWin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovBrowerWish(uint64(*m.Id))
	}
	if m.GoodsId != nil {
		n += 1 + sovBrowerWish(uint64(*m.GoodsId))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.Price != nil {
		n += 1 + sovBrowerWish(uint64(*m.Price))
	}
	if m.IsInfallible != nil {
		n += 2
	}
	if m.ReplenishAmount != nil {
		n += 1 + sovBrowerWish(uint64(*m.ReplenishAmount))
	}
	if m.ReplenishIntervalTime != nil {
		n += 1 + sovBrowerWish(uint64(*m.ReplenishIntervalTime))
	}
	if m.Diamond != nil {
		n += 1 + sovBrowerWish(uint64(*m.Diamond))
	}
	if m.PerRate != nil {
		n += 1 + sovBrowerWish(uint64(*m.PerRate))
	}
	if m.GoodsType != nil {
		n += 1 + sovBrowerWish(uint64(*m.GoodsType))
	}
	if m.WishBoxId != nil {
		n += 1 + sovBrowerWish(uint64(*m.WishBoxId))
	}
	if m.BigLoss != nil {
		n += 2 + sovBrowerWish(uint64(*m.BigLoss))
	}
	if m.SmallLoss != nil {
		n += 2 + sovBrowerWish(uint64(*m.SmallLoss))
	}
	if m.Common != nil {
		n += 2 + sovBrowerWish(uint64(*m.Common))
	}
	if m.BigWin != nil {
		n += 2 + sovBrowerWish(uint64(*m.BigWin))
	}
	if m.SmallWin != nil {
		n += 2 + sovBrowerWish(uint64(*m.SmallWin))
	}
	if m.CommonAddWeight != nil {
		n += 2 + sovBrowerWish(uint64(*m.CommonAddWeight))
	}
	if m.BigWinAddWeight != nil {
		n += 2 + sovBrowerWish(uint64(*m.BigWinAddWeight))
	}
	if m.SmallWinAddWeight != nil {
		n += 2 + sovBrowerWish(uint64(*m.SmallWinAddWeight))
	}
	if m.RewardLv != nil {
		n += 2 + sovBrowerWish(uint64(*m.RewardLv))
	}
	if m.ArrivalTime != nil {
		n += 2 + sovBrowerWish(uint64(*m.ArrivalTime))
	}
	if m.BoxItemId != nil {
		n += 2 + sovBrowerWish(uint64(*m.BoxItemId))
	}
	if m.CreateTime != nil {
		n += 2 + sovBrowerWish(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishBoxGoodsItemList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishBoxGoodsItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovBrowerWish(uint64(*m.Id))
	}
	if m.GoodsId != nil {
		n += 1 + sovBrowerWish(uint64(*m.GoodsId))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.Price != nil {
		n += 1 + sovBrowerWish(uint64(*m.Price))
	}
	if m.IsInfallible != nil {
		n += 2
	}
	if m.ReplenishAmount != nil {
		n += 1 + sovBrowerWish(uint64(*m.ReplenishAmount))
	}
	if m.ReplenishIntervalTime != nil {
		n += 1 + sovBrowerWish(uint64(*m.ReplenishIntervalTime))
	}
	if m.GoodsType != nil {
		n += 1 + sovBrowerWish(uint64(*m.GoodsType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishBoxWinCfgList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishBoxWinCfg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WishBoxId != nil {
		n += 1 + sovBrowerWish(uint64(*m.WishBoxId))
	}
	if m.GoodsId != nil {
		n += 1 + sovBrowerWish(uint64(*m.GoodsId))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.Price != nil {
		n += 1 + sovBrowerWish(uint64(*m.Price))
	}
	if m.GoodsType != nil {
		n += 1 + sovBrowerWish(uint64(*m.GoodsType))
	}
	if m.BigLoss != nil {
		n += 1 + sovBrowerWish(uint64(*m.BigLoss))
	}
	if m.SmallLoss != nil {
		n += 1 + sovBrowerWish(uint64(*m.SmallLoss))
	}
	if m.Common != nil {
		n += 1 + sovBrowerWish(uint64(*m.Common))
	}
	if m.BigWin != nil {
		n += 1 + sovBrowerWish(uint64(*m.BigWin))
	}
	if m.SmallWin != nil {
		n += 1 + sovBrowerWish(uint64(*m.SmallWin))
	}
	if m.WishBoxItemId != nil {
		n += 1 + sovBrowerWish(uint64(*m.WishBoxItemId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishBoxGoodsListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurPage != nil {
		n += 1 + sovBrowerWish(uint64(*m.CurPage))
	}
	if m.PageSize != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageSize))
	}
	if m.Keyword != nil {
		l = len(*m.Keyword)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovBrowerWish(uint64(*m.Type))
	}
	if m.BeginTimestamp != nil {
		n += 1 + sovBrowerWish(uint64(*m.BeginTimestamp))
	}
	if m.EndTimestamp != nil {
		n += 1 + sovBrowerWish(uint64(*m.EndTimestamp))
	}
	if m.Sort != nil {
		l = len(*m.Sort)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.Diamond != nil {
		n += 1 + sovBrowerWish(uint64(*m.Diamond))
	}
	if m.Status != nil {
		n += 1 + sovBrowerWish(uint64(*m.Status))
	}
	if m.IsPreSale != nil {
		n += 2
	}
	if len(m.WishBrandId) > 0 {
		for _, e := range m.WishBrandId {
			n += 1 + sovBrowerWish(uint64(e))
		}
	}
	if len(m.WishItemTypeId) > 0 {
		for _, e := range m.WishItemTypeId {
			n += 1 + sovBrowerWish(uint64(e))
		}
	}
	if m.TimeType != nil {
		n += 1 + sovBrowerWish(uint64(*m.TimeType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishBoxLotteryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BoxId != nil {
		n += 1 + sovBrowerWish(uint64(*m.BoxId))
	}
	if m.ProductId != nil {
		n += 1 + sovBrowerWish(uint64(*m.ProductId))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.Count != nil {
		n += 1 + sovBrowerWish(uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishBoxLotteryResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += 1 + sovBrowerWish(uint64(*m.Result))
	}
	if m.Msg != nil {
		l = len(*m.Msg)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishBoxGoodsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishBoxGoodsSelectedList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishBoxGoods) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovBrowerWish(uint64(*m.Id))
	}
	if m.WishBoxId != nil {
		n += 1 + sovBrowerWish(uint64(*m.WishBoxId))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.Icon != nil {
		l = len(*m.Icon)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.IsPreSale != nil {
		n += 2
	}
	if m.WishBrandId != nil {
		n += 1 + sovBrowerWish(uint64(*m.WishBrandId))
	}
	if m.WishItemTypeId != nil {
		n += 1 + sovBrowerWish(uint64(*m.WishItemTypeId))
	}
	if m.UserId != nil {
		l = len(*m.UserId)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.Price != nil {
		n += 1 + sovBrowerWish(uint64(*m.Price))
	}
	if m.Status != nil {
		n += 1 + sovBrowerWish(uint64(*m.Status))
	}
	if m.Type != nil {
		n += 1 + sovBrowerWish(uint64(*m.Type))
	}
	if m.StockAmount != nil {
		n += 1 + sovBrowerWish(uint64(*m.StockAmount))
	}
	if m.Describe != nil {
		l = len(*m.Describe)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.ArrivalTime != nil {
		n += 1 + sovBrowerWish(uint64(*m.ArrivalTime))
	}
	if m.UploadTime != nil {
		n += 1 + sovBrowerWish(uint64(*m.UploadTime))
	}
	if m.SoldOutTime != nil {
		n += 2 + sovBrowerWish(uint64(*m.SoldOutTime))
	}
	if m.Diamond != nil {
		n += 2 + sovBrowerWish(uint64(*m.Diamond))
	}
	if m.CreateTime != nil {
		n += 2 + sovBrowerWish(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovBrowerWish(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishGoodsBrandList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishGoodsBrand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovBrowerWish(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovBrowerWish(uint64(*m.Status))
	}
	if m.IsHot != nil {
		n += 2
	}
	if m.HotWeight != nil {
		n += 1 + sovBrowerWish(uint64(*m.HotWeight))
	}
	if m.Initial != nil {
		l = len(*m.Initial)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.ClickCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.ClickCount))
	}
	if m.CreateTime != nil {
		n += 1 + sovBrowerWish(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovBrowerWish(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishGoodsTypeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishGoodsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovBrowerWish(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovBrowerWish(uint64(*m.Status))
	}
	if m.IsHot != nil {
		n += 2
	}
	if m.IsRecommend != nil {
		n += 2
	}
	if m.Initial != nil {
		l = len(*m.Initial)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.HotWeight != nil {
		n += 1 + sovBrowerWish(uint64(*m.HotWeight))
	}
	if m.ClickCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.ClickCount))
	}
	if m.CreateTime != nil {
		n += 1 + sovBrowerWish(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovBrowerWish(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishDeliveryOrderList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishDeliveryOrderDetailList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishDeliveryOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != nil {
		n += 1 + sovBrowerWish(uint64(*m.OrderId))
	}
	if m.GoodsId != nil {
		n += 1 + sovBrowerWish(uint64(*m.GoodsId))
	}
	if m.GoodsPrice != nil {
		n += 1 + sovBrowerWish(uint64(*m.GoodsPrice))
	}
	if m.PriceTotal != nil {
		n += 1 + sovBrowerWish(uint64(*m.PriceTotal))
	}
	if m.CreateTime != nil {
		n += 1 + sovBrowerWish(uint64(*m.CreateTime))
	}
	if m.DeliveryTime != nil {
		n += 1 + sovBrowerWish(uint64(*m.DeliveryTime))
	}
	if m.Status != nil {
		n += 1 + sovBrowerWish(uint64(*m.Status))
	}
	if m.DeliverName != nil {
		l = len(*m.DeliverName)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.DeliverPhone != nil {
		l = len(*m.DeliverPhone)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.DeliverAddress != nil {
		l = len(*m.DeliverAddress)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.UserAccount != nil {
		l = len(*m.UserAccount)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.UserId != nil {
		n += 1 + sovBrowerWish(uint64(*m.UserId))
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.UpdateTime != nil {
		n += 1 + sovBrowerWish(uint64(*m.UpdateTime))
	}
	if m.Company != nil {
		l = len(*m.Company)
		n += 2 + l + sovBrowerWish(uint64(l))
	}
	if m.CompanyCode != nil {
		l = len(*m.CompanyCode)
		n += 2 + l + sovBrowerWish(uint64(l))
	}
	if m.Odd != nil {
		l = len(*m.Odd)
		n += 2 + l + sovBrowerWish(uint64(l))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 2 + l + sovBrowerWish(uint64(l))
	}
	if m.GoodsName != nil {
		l = len(*m.GoodsName)
		n += 2 + l + sovBrowerWish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateDeliveryOrderCourierInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != nil {
		n += 1 + sovBrowerWish(uint64(*m.OrderId))
	}
	if m.Company != nil {
		l = len(*m.Company)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.CompanyCode != nil {
		l = len(*m.CompanyCode)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.Odd != nil {
		l = len(*m.Odd)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishRecycleOrderList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishRecycleOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != nil {
		n += 1 + sovBrowerWish(uint64(*m.OrderId))
	}
	if m.GoodsId != nil {
		n += 1 + sovBrowerWish(uint64(*m.GoodsId))
	}
	if m.DrawPrice != nil {
		n += 1 + sovBrowerWish(uint64(*m.DrawPrice))
	}
	if m.RecycleTime != nil {
		n += 1 + sovBrowerWish(uint64(*m.RecycleTime))
	}
	if m.UserAccount != nil {
		l = len(*m.UserAccount)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.GoodsPrice != nil {
		n += 1 + sovBrowerWish(uint64(*m.GoodsPrice))
	}
	if m.UserId != nil {
		n += 1 + sovBrowerWish(uint64(*m.UserId))
	}
	if m.Type != nil {
		n += 1 + sovBrowerWish(uint64(*m.Type))
	}
	if m.Status != nil {
		n += 2 + sovBrowerWish(uint64(*m.Status))
	}
	if m.InitTime != nil {
		n += 2 + sovBrowerWish(uint64(*m.InitTime))
	}
	if m.RefusalNote != nil {
		l = len(*m.RefusalNote)
		n += 2 + l + sovBrowerWish(uint64(l))
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 2 + l + sovBrowerWish(uint64(l))
	}
	if m.UpdateTime != nil {
		n += 2 + sovBrowerWish(uint64(*m.UpdateTime))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 2 + l + sovBrowerWish(uint64(l))
	}
	if m.UserReason != nil {
		l = len(*m.UserReason)
		n += 2 + l + sovBrowerWish(uint64(l))
	}
	if m.RecyclePrice != nil {
		n += 2 + sovBrowerWish(uint64(*m.RecyclePrice))
	}
	if m.RecycleDiamond != nil {
		n += 2 + sovBrowerWish(uint64(*m.RecycleDiamond))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishRecycleOrderUserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovBrowerWish(uint64(*m.PlayerId))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.Nickname != nil {
		l = len(*m.Nickname)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.RealName != nil {
		l = len(*m.RealName)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.Diamond != nil {
		n += 1 + sovBrowerWish(uint64(*m.Diamond))
	}
	if m.PlayerType != nil {
		n += 1 + sovBrowerWish(uint64(*m.PlayerType))
	}
	if m.LoginAddr != nil {
		l = len(*m.LoginAddr)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.CurDiamond != nil {
		n += 1 + sovBrowerWish(uint64(*m.CurDiamond))
	}
	if m.RegisterTime != nil {
		n += 1 + sovBrowerWish(uint64(*m.RegisterTime))
	}
	if m.OrderId != nil {
		n += 1 + sovBrowerWish(uint64(*m.OrderId))
	}
	if m.BankCode != nil {
		l = len(*m.BankCode)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.GoldTotal != nil {
		n += 1 + sovBrowerWish(uint64(*m.GoldTotal))
	}
	if m.TaxGold != nil {
		n += 1 + sovBrowerWish(uint64(*m.TaxGold))
	}
	if m.PlatformGold != nil {
		n += 1 + sovBrowerWish(uint64(*m.PlatformGold))
	}
	if m.OwnGold != nil {
		n += 1 + sovBrowerWish(uint64(*m.OwnGold))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishRecycleOrderDetailList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishPoolList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovBrowerWish(uint64(*m.Id))
	}
	if m.PoolLimit != nil {
		n += 1 + sovBrowerWish(uint64(*m.PoolLimit))
	}
	if m.InitialValue != nil {
		n += 1 + sovBrowerWish(uint64(*m.InitialValue))
	}
	if m.IncomeValue != nil {
		n += 1 + sovBrowerWish(uint64(*m.IncomeValue))
	}
	if m.Recycle != nil {
		n += 1 + sovBrowerWish(uint64(*m.Recycle))
	}
	if m.Commission != nil {
		n += 1 + sovBrowerWish(uint64(*m.Commission))
	}
	if m.StartAward != nil {
		n += 1 + sovBrowerWish(uint64(*m.StartAward))
	}
	if m.CloseAward != nil {
		n += 1 + sovBrowerWish(uint64(*m.CloseAward))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.CreateTime != nil {
		n += 2 + sovBrowerWish(uint64(*m.CreateTime))
	}
	if m.ShowInitialValue != nil {
		n += 2 + sovBrowerWish(uint64(*m.ShowInitialValue))
	}
	if m.ShowRecycle != nil {
		n += 2 + sovBrowerWish(uint64(*m.ShowRecycle))
	}
	if m.ShowCommission != nil {
		n += 2 + sovBrowerWish(uint64(*m.ShowCommission))
	}
	if m.ShowStartAward != nil {
		n += 2 + sovBrowerWish(uint64(*m.ShowStartAward))
	}
	if m.ShowCloseAward != nil {
		n += 2 + sovBrowerWish(uint64(*m.ShowCloseAward))
	}
	if m.IsOpenAward != nil {
		n += 3
	}
	if m.IsDefault != nil {
		n += 3
	}
	if m.BigLoss != nil {
		l = m.BigLoss.Size()
		n += 2 + l + sovBrowerWish(uint64(l))
	}
	if m.SmallLoss != nil {
		l = m.SmallLoss.Size()
		n += 2 + l + sovBrowerWish(uint64(l))
	}
	if m.Common != nil {
		l = m.Common.Size()
		n += 2 + l + sovBrowerWish(uint64(l))
	}
	if m.BigWin != nil {
		l = m.BigWin.Size()
		n += 2 + l + sovBrowerWish(uint64(l))
	}
	if m.SmallWin != nil {
		l = m.SmallWin.Size()
		n += 2 + l + sovBrowerWish(uint64(l))
	}
	if m.LocalStatus != nil {
		n += 2 + sovBrowerWish(uint64(*m.LocalStatus))
	}
	if m.PoolCfgId != nil {
		n += 2 + sovBrowerWish(uint64(*m.PoolCfgId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishPoolStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxValue != nil {
		n += 1 + sovBrowerWish(uint64(*m.MaxValue))
	}
	if m.MinValue != nil {
		n += 1 + sovBrowerWish(uint64(*m.MinValue))
	}
	if m.ShowMaxValue != nil {
		n += 1 + sovBrowerWish(uint64(*m.ShowMaxValue))
	}
	if m.ShowMinValue != nil {
		n += 1 + sovBrowerWish(uint64(*m.ShowMinValue))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishPoolReportList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishBoxReportList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishBoxDetailReportList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishItemReportList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestPlayerWishItemList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestWishPoolLogList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestWishPoolPumpLogList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestWishPoolBoxPoolInfoList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DrawRecordList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DrawRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserAccount != nil {
		l = len(*m.UserAccount)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.UserId != nil {
		n += 1 + sovBrowerWish(uint64(*m.UserId))
	}
	if m.Phone != nil {
		l = len(*m.Phone)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.AddBoxCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.AddBoxCount))
	}
	if m.WishItemCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.WishItemCount))
	}
	if m.DrawCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.DrawCount))
	}
	if m.DrawGoldTotal != nil {
		n += 1 + sovBrowerWish(uint64(*m.DrawGoldTotal))
	}
	if m.LastDrawTime != nil {
		n += 1 + sovBrowerWish(uint64(*m.LastDrawTime))
	}
	if m.HaveItemCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.HaveItemCount))
	}
	if m.DelItemCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.DelItemCount))
	}
	if m.UserNickname != nil {
		l = len(*m.UserNickname)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.UserType != nil {
		n += 1 + sovBrowerWish(uint64(*m.UserType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddBoxRecordList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddBoxRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != nil {
		n += 1 + sovBrowerWish(uint64(*m.UserId))
	}
	if m.BoxId != nil {
		n += 1 + sovBrowerWish(uint64(*m.BoxId))
	}
	if m.BoxName != nil {
		l = len(*m.BoxName)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovBrowerWish(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishGoodsRecordList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishGoodsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != nil {
		n += 1 + sovBrowerWish(uint64(*m.UserId))
	}
	if m.GoodsId != nil {
		n += 1 + sovBrowerWish(uint64(*m.GoodsId))
	}
	if m.BoxName != nil {
		l = len(*m.BoxName)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.GoodsName != nil {
		l = len(*m.GoodsName)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovBrowerWish(uint64(*m.CreateTime))
	}
	if m.BoxId != nil {
		n += 1 + sovBrowerWish(uint64(*m.BoxId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DrawBoxRecordList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DrawBoxRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != nil {
		n += 1 + sovBrowerWish(uint64(*m.UserId))
	}
	if m.BoxId != nil {
		n += 1 + sovBrowerWish(uint64(*m.BoxId))
	}
	if m.BoxName != nil {
		l = len(*m.BoxName)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.DrawCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.DrawCount))
	}
	if m.LastTime != nil {
		n += 1 + sovBrowerWish(uint64(*m.LastTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WinRecordList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WinRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != nil {
		n += 1 + sovBrowerWish(uint64(*m.UserId))
	}
	if m.GoodsId != nil {
		n += 1 + sovBrowerWish(uint64(*m.GoodsId))
	}
	if m.GoodsName != nil {
		l = len(*m.GoodsName)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.HasWish != nil {
		n += 2
	}
	if m.CreateTime != nil {
		n += 1 + sovBrowerWish(uint64(*m.CreateTime))
	}
	if m.BoxItemId != nil {
		n += 1 + sovBrowerWish(uint64(*m.BoxItemId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HaveItemList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HaveItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GoodsId != nil {
		n += 1 + sovBrowerWish(uint64(*m.GoodsId))
	}
	if m.GoodsName != nil {
		l = len(*m.GoodsName)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovBrowerWish(uint64(*m.CreateTime))
	}
	if m.BoxId != nil {
		n += 1 + sovBrowerWish(uint64(*m.BoxId))
	}
	if m.BoxName != nil {
		l = len(*m.BoxName)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.PlayerItemId != nil {
		n += 1 + sovBrowerWish(uint64(*m.PlayerItemId))
	}
	if m.UpdateTime != nil {
		n += 1 + sovBrowerWish(uint64(*m.UpdateTime))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PriceSection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OneMin != nil {
		n += 1 + sovBrowerWish(uint64(*m.OneMin))
	}
	if m.OneMax != nil {
		n += 1 + sovBrowerWish(uint64(*m.OneMax))
	}
	if m.TwoMin != nil {
		n += 1 + sovBrowerWish(uint64(*m.TwoMin))
	}
	if m.TwoMax != nil {
		n += 1 + sovBrowerWish(uint64(*m.TwoMax))
	}
	if m.ThreeMin != nil {
		n += 1 + sovBrowerWish(uint64(*m.ThreeMin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishMailSection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.Postage1 != nil {
		n += 1 + sovBrowerWish(uint64(*m.Postage1))
	}
	if m.Postage2 != nil {
		n += 1 + sovBrowerWish(uint64(*m.Postage2))
	}
	if m.Postage3 != nil {
		n += 1 + sovBrowerWish(uint64(*m.Postage3))
	}
	if len(m.RemoteAreaList) > 0 {
		for _, s := range m.RemoteAreaList {
			l = len(s)
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.FreeNumber != nil {
		n += 1 + sovBrowerWish(uint64(*m.FreeNumber))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishRecycleSection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.Platform != nil {
		n += 1 + sovBrowerWish(uint64(*m.Platform))
	}
	if m.DayTopCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.DayTopCount))
	}
	if m.Player != nil {
		n += 1 + sovBrowerWish(uint64(*m.Player))
	}
	if m.Status != nil {
		n += 2
	}
	if m.DayMoneyTopCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.DayMoneyTopCount))
	}
	if m.DayMoneyTop != nil {
		n += 1 + sovBrowerWish(uint64(*m.DayMoneyTop))
	}
	if m.OrderThresholdMoney != nil {
		n += 1 + sovBrowerWish(uint64(*m.OrderThresholdMoney))
	}
	if m.DayDiamondTopCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.DayDiamondTopCount))
	}
	if m.DayDiamondTop != nil {
		n += 2 + sovBrowerWish(uint64(*m.DayDiamondTop))
	}
	if m.OrderThreshold != nil {
		n += 2 + sovBrowerWish(uint64(*m.OrderThreshold))
	}
	if m.FeeRate != nil {
		n += 2 + sovBrowerWish(uint64(*m.FeeRate))
	}
	if m.PlatformTax != nil {
		n += 2 + sovBrowerWish(uint64(*m.PlatformTax))
	}
	if m.RealTax != nil {
		n += 2 + sovBrowerWish(uint64(*m.RealTax))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishPayWarnCfg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WithdrawalTime != nil {
		n += 2 + sovBrowerWish(uint64(*m.WithdrawalTime))
	}
	if m.WithdrawalTimes != nil {
		n += 2 + sovBrowerWish(uint64(*m.WithdrawalTimes))
	}
	if m.WithdrawalGoldRate != nil {
		n += 2 + sovBrowerWish(uint64(*m.WithdrawalGoldRate))
	}
	if m.WithdrawalGold != nil {
		n += 2 + sovBrowerWish(uint64(*m.WithdrawalGold))
	}
	if m.WithdrawalDiamondRate != nil {
		n += 2 + sovBrowerWish(uint64(*m.WithdrawalDiamondRate))
	}
	if m.WithdrawalDiamond != nil {
		n += 2 + sovBrowerWish(uint64(*m.WithdrawalDiamond))
	}
	if len(m.PhoneList) > 0 {
		for _, s := range m.PhoneList {
			l = len(s)
			n += 2 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishGuardianCfg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.DayDiamondTop != nil {
		n += 1 + sovBrowerWish(uint64(*m.DayDiamondTop))
	}
	if m.OnceDiamondRebate != nil {
		n += 1 + sovBrowerWish(uint64(*m.OnceDiamondRebate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecycleNoteCfg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Text) > 0 {
		for _, s := range m.Text {
			l = len(s)
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishCoolDownConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.IsOpen != nil {
		n += 2
	}
	if m.ContinuousTime != nil {
		n += 1 + sovBrowerWish(uint64(*m.ContinuousTime))
	}
	if m.ContinuousTimes != nil {
		n += 1 + sovBrowerWish(uint64(*m.ContinuousTimes))
	}
	if m.CoolDownTime != nil {
		n += 1 + sovBrowerWish(uint64(*m.CoolDownTime))
	}
	if m.DayLimit != nil {
		n += 1 + sovBrowerWish(uint64(*m.DayLimit))
	}
	if m.CreateTime != nil {
		n += 1 + sovBrowerWish(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishCurrencyConversionCfg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.Coin != nil {
		n += 1 + sovBrowerWish(uint64(*m.Coin))
	}
	if m.Diamond != nil {
		n += 1 + sovBrowerWish(uint64(*m.Diamond))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DiamondItemListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DiamondChangeLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishPlayerListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishActPoolList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateWishActPoolListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovBrowerWish(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if len(m.BoxIds) > 0 {
		for _, e := range m.BoxIds {
			n += 1 + sovBrowerWish(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishActPoolDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishActPoolItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BoxId != nil {
		n += 1 + sovBrowerWish(uint64(*m.BoxId))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.Price != nil {
		n += 1 + sovBrowerWish(uint64(*m.Price))
	}
	if m.IsHave != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishActPoolRuleList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.AwardType != nil {
		n += 1 + sovBrowerWish(uint64(*m.AwardType))
	}
	if len(m.ItemList) > 0 {
		for _, e := range m.ItemList {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddWishActPoolRuleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.RuleType != nil {
		n += 1 + sovBrowerWish(uint64(*m.RuleType))
	}
	if m.AwardType != nil {
		n += 1 + sovBrowerWish(uint64(*m.AwardType))
	}
	if len(m.WeekMonthList) > 0 {
		for _, e := range m.WeekMonthList {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishActPoolRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovBrowerWish(uint64(*m.Id))
	}
	if m.WishActPoolId != nil {
		n += 1 + sovBrowerWish(uint64(*m.WishActPoolId))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.Key != nil {
		n += 1 + sovBrowerWish(uint64(*m.Key))
	}
	if m.Diamond != nil {
		n += 1 + sovBrowerWish(uint64(*m.Diamond))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishActPoolRuleWeekMonthList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishActPoolAwardItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovBrowerWish(uint64(*m.Id))
	}
	if m.WishItemId != nil {
		n += 1 + sovBrowerWish(uint64(*m.WishItemId))
	}
	if m.WishActPoolId != nil {
		n += 1 + sovBrowerWish(uint64(*m.WishActPoolId))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.Key != nil {
		n += 1 + sovBrowerWish(uint64(*m.Key))
	}
	if m.Diamond != nil {
		n += 1 + sovBrowerWish(uint64(*m.Diamond))
	}
	if m.Money != nil {
		n += 1 + sovBrowerWish(uint64(*m.Money))
	}
	if m.Icon != nil {
		l = len(*m.Icon)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.RuleType != nil {
		n += 1 + sovBrowerWish(uint64(*m.RuleType))
	}
	if m.AwardType != nil {
		n += 2 + sovBrowerWish(uint64(*m.AwardType))
	}
	if m.AwardDiamond != nil {
		n += 2 + sovBrowerWish(uint64(*m.AwardDiamond))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishActPlayerRecordList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishActPlayerRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserAccount != nil {
		l = len(*m.UserAccount)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.UserId != nil {
		n += 1 + sovBrowerWish(uint64(*m.UserId))
	}
	if m.DrawDiamondTotal != nil {
		n += 1 + sovBrowerWish(uint64(*m.DrawDiamondTotal))
	}
	if m.AwardTotal != nil {
		n += 1 + sovBrowerWish(uint64(*m.AwardTotal))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PoolData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovBrowerWish(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.DayTotal != nil {
		n += 1 + sovBrowerWish(uint64(*m.DayTotal))
	}
	if m.DrawTotal != nil {
		n += 1 + sovBrowerWish(uint64(*m.DrawTotal))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishActPlayerWinRecordList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishActPlayerWinRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovBrowerWish(uint64(*m.Id))
	}
	if m.CreateTime != nil {
		n += 1 + sovBrowerWish(uint64(*m.CreateTime))
	}
	if m.Status != nil {
		n += 1 + sovBrowerWish(uint64(*m.Status))
	}
	if m.WinTime != nil {
		n += 1 + sovBrowerWish(uint64(*m.WinTime))
	}
	if m.TypeName != nil {
		l = len(*m.TypeName)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.UserAccount != nil {
		l = len(*m.UserAccount)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.UserId != nil {
		n += 1 + sovBrowerWish(uint64(*m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishActPlayerDrawRecordList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishActPlayerDrawRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovBrowerWish(uint64(*m.Id))
	}
	if m.CreateTime != nil {
		n += 1 + sovBrowerWish(uint64(*m.CreateTime))
	}
	if m.BoxId != nil {
		n += 1 + sovBrowerWish(uint64(*m.BoxId))
	}
	if m.ActPoolName != nil {
		l = len(*m.ActPoolName)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.ActBoxName != nil {
		l = len(*m.ActBoxName)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.Price != nil {
		n += 1 + sovBrowerWish(uint64(*m.Price))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishActRecordList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishActRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovBrowerWish(uint64(*m.Id))
	}
	if m.CreateTime != nil {
		n += 1 + sovBrowerWish(uint64(*m.CreateTime))
	}
	if m.BoxId != nil {
		n += 1 + sovBrowerWish(uint64(*m.BoxId))
	}
	if m.ActPoolName != nil {
		l = len(*m.ActPoolName)
		n += 1 + l + sovBrowerWish(uint64(l))
	}
	if m.Price != nil {
		n += 1 + sovBrowerWish(uint64(*m.Price))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishCoinRechargeActivityCfgRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryWishLogReportRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryWishActivityPrizeLogRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBrowerWish(uint64(l))
		}
	}
	if m.PageCount != nil {
		n += 1 + sovBrowerWish(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBrowerWish(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBrowerWish(x uint64) (n int) {
	return sovBrowerWish(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ToolWishBoxItemListRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ToolWishBoxItemListRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ToolWishBoxItemListRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.WishBoxItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ToolSaveWishBoxItemReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ToolSaveWishBoxItemReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ToolSaveWishBoxItemReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.WishBoxItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ToolOutputDataRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ToolOutputDataRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ToolOutputDataRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DareDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DareDiamond = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishItemDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishItemDiamond = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ToolOutputitemRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ToolOutputitemRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ToolOutputitemRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ToolOutputitem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ToolOutputitem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ToolOutputitem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ToolOutputitem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtC", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PtC = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XyC", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XyC = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DyC", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DyC = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DyO", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DyO = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XyO", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XyO = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtO", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PtO = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ToolPumping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ToolPumping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ToolPumping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PumpingTimes", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PumpingTimes = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PumpingSumDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PumpingSumDiamond = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PumpingAvgDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PumpingAvgDiamond = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ToolRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ToolRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ToolRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueSum", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.ValueSum = &v2
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Pool = &v2
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weights", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Weights = &v2
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtWeights", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.PtWeights = &v2
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.PtRate = &v2
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtAppend", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.PtAppend = &v2
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtAppendRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.PtAppendRate = &v2
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field XyWeights", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.XyWeights = &v2
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field XyRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.XyRate = &v2
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field XyAppend", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.XyAppend = &v2
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field XyAppendRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.XyAppendRate = &v2
		case 21:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DyWeights", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.DyWeights = &v2
		case 22:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DyRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.DyRate = &v2
		case 23:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DyAppend", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.DyAppend = &v2
		case 24:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DyAppendRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.DyAppendRate = &v2
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ToolRateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ToolRateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ToolRateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChallengeDiamond = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeRmb", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChallengeRmb = &v
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolPat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.PoolPat = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightsPat", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WeightsPat = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ToolRateRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ToolRateRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ToolRateRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ToolRate{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ToolLuckyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ToolLuckyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ToolLuckyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PoolId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunTimes", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RunTimes = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChallengeDiamond = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ToolLuckyRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ToolLuckyRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ToolLuckyRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Result = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerWish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerWish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerWish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrIds = append(m.StrIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.StrId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWishOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWishOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWishOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeginTimestamp = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTimestamp = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPage", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurPage = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Keyword = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SourceType = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayType = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangeType = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayStatus", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayStatus = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishBoxListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishBoxListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishBoxListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPage", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurPage = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Keyword = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeginTimestamp = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTimestamp = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRecommend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsRecommend = &b
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsChallenge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsChallenge = &b
		case 12:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Attribute = append(m.Attribute, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerWish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerWish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Attribute) == 0 {
					m.Attribute = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerWish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Attribute = append(m.Attribute, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHasUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsHasUser = &b
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Sort = &s
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAutoUpload", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsAutoUpload = &b
		case 18:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LocalStatus = append(m.LocalStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerWish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerWish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LocalStatus) == 0 {
					m.LocalStatus = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerWish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LocalStatus = append(m.LocalStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalStatus", wireType)
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveIsWin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.HaveIsWin = &b
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishBoxList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishBoxList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishBoxList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &WishBox{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishBox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishBox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishBox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Icon = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsAmount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GoodsAmount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsChallenge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsChallenge = &b
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Attribute = append(m.Attribute, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerWish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerWish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Attribute) == 0 {
					m.Attribute = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerWish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Attribute = append(m.Attribute, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UserAccount = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRecommend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsRecommend = &b
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortWeight", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SortWeight = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UploadTime = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemList = append(m.ItemList, &WishBoxGoodsWin{})
			if err := m.ItemList[len(m.ItemList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishPoolId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishPoolId = &v
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalStatus", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LocalStatus = &v
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpenAward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOpenAward = &b
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveIsWin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.HaveIsWin = &b
		case 34:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Brands = append(m.Brands, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerWish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerWish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Brands) == 0 {
					m.Brands = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerWish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Brands = append(m.Brands, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Brands", wireType)
			}
		case 35:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Types = append(m.Types, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerWish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerWish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Types) == 0 {
					m.Types = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerWish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Types = append(m.Types, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
		case 36:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Styles = append(m.Styles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerWish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerWish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Styles) == 0 {
					m.Styles = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerWish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Styles = append(m.Styles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Styles", wireType)
			}
		case 37:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Items = append(m.Items, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerWish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerWish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Items) == 0 {
					m.Items = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerWish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Items = append(m.Items, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
		case 38:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WishItems = append(m.WishItems, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerWish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerWish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WishItems) == 0 {
					m.WishItems = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerWish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WishItems = append(m.WishItems, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WishItems", wireType)
			}
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RareNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RareNum = &v
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductStatus", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductStatus = &v
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuardianOverTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GuardianOverTime = &v
		case 48:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGuardian", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsGuardian = &b
		case 49:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuardianId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GuardianId = &v
		case 50:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxPoolId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxPoolId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishBoxGoodsWin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishBoxGoodsWin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishBoxGoodsWin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GoodsId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInfallible", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsInfallible = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplenishAmount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReplenishAmount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplenishIntervalTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReplenishIntervalTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerRate", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PerRate = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GoodsType = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxId = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigLoss", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BigLoss = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallLoss", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SmallLoss = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Common", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Common = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigWin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BigWin = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallWin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SmallWin = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonAddWeight", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommonAddWeight = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigWinAddWeight", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BigWinAddWeight = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallWinAddWeight", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SmallWinAddWeight = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardLv", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RewardLv = &v
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArrivalTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ArrivalTime = &v
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxItemId = &v
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishBoxGoodsItemList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishBoxGoodsItemList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishBoxGoodsItemList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &WishBoxGoodsItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishBoxGoodsItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishBoxGoodsItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishBoxGoodsItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GoodsId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInfallible", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsInfallible = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplenishAmount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReplenishAmount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplenishIntervalTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReplenishIntervalTime = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GoodsType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishBoxWinCfgList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishBoxWinCfgList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishBoxWinCfgList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &WishBoxWinCfg{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishBoxWinCfg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishBoxWinCfg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishBoxWinCfg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GoodsId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GoodsType = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigLoss", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BigLoss = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallLoss", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SmallLoss = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Common", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Common = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigWin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BigWin = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallWin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SmallWin = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxItemId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishBoxGoodsListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishBoxGoodsListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishBoxGoodsListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPage", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurPage = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Keyword = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeginTimestamp = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTimestamp = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Sort = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPreSale", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsPreSale = &b
		case 12:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WishBrandId = append(m.WishBrandId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerWish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerWish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WishBrandId) == 0 {
					m.WishBrandId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerWish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WishBrandId = append(m.WishBrandId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBrandId", wireType)
			}
		case 13:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WishItemTypeId = append(m.WishItemTypeId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerWish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerWish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WishItemTypeId) == 0 {
					m.WishItemTypeId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerWish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WishItemTypeId = append(m.WishItemTypeId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WishItemTypeId", wireType)
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishBoxLotteryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishBoxLotteryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishBoxLotteryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishBoxLotteryResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishBoxLotteryResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishBoxLotteryResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Msg = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishBoxGoodsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishBoxGoodsList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishBoxGoodsList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &WishBoxGoods{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishBoxGoodsSelectedList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishBoxGoodsSelectedList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishBoxGoodsSelectedList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &WishBoxGoodsWin{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishBoxGoods) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishBoxGoods: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishBoxGoods: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Icon = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPreSale", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsPreSale = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBrandId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBrandId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishItemTypeId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishItemTypeId = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UserId = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockAmount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StockAmount = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Describe", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Describe = &s
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArrivalTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ArrivalTime = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UploadTime = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoldOutTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SoldOutTime = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishGoodsBrandList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishGoodsBrandList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishGoodsBrandList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &WishGoodsBrand{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishGoodsBrand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishGoodsBrand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishGoodsBrand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsHot = &b
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotWeight", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HotWeight = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initial", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Initial = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClickCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClickCount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishGoodsTypeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishGoodsTypeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishGoodsTypeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &WishGoodsType{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishGoodsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishGoodsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishGoodsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsHot = &b
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRecommend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsRecommend = &b
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initial", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Initial = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotWeight", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HotWeight = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClickCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClickCount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishDeliveryOrderList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishDeliveryOrderList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishDeliveryOrderList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &WishDeliveryOrder{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishDeliveryOrderDetailList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishDeliveryOrderDetailList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishDeliveryOrderDetailList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.PlayerExchangeItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishDeliveryOrder) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishDeliveryOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishDeliveryOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GoodsId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GoodsPrice = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PriceTotal = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DeliverName = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DeliverPhone = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DeliverAddress = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UserAccount = &s
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Company", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Company = &s
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CompanyCode = &s
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Odd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Odd = &s
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GoodsName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("DeliverName")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("DeliverPhone")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("DeliverAddress")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDeliveryOrderCourierInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDeliveryOrderCourierInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDeliveryOrderCourierInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Company", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Company = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CompanyCode = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Odd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Odd = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishRecycleOrderList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishRecycleOrderList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishRecycleOrderList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &WishRecycleOrder{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishRecycleOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishRecycleOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishRecycleOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GoodsId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DrawPrice = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleTime = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UserAccount = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GoodsPrice = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InitTime = &v
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefusalNote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RefusalNote = &s
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		case 50:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UserReason = &s
			iNdEx = postIndex
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecyclePrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecyclePrice = &v
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleDiamond = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishRecycleOrderUserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishRecycleOrderUserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishRecycleOrderUserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Nickname = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RealName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerType", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerType = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LoginAddr = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurDiamond = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegisterTime = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankCode = &s
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GoldTotal = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxGold", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TaxGold = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformGold", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlatformGold = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnGold", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OwnGold = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishRecycleOrderDetailList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishRecycleOrderDetailList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishRecycleOrderDetailList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.WishRecycleItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishPoolList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishPoolList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishPoolList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &WishPool{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolLimit", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PoolLimit = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialValue", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InitialValue = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncomeValue", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncomeValue = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recycle", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Recycle = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Commission = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAward", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartAward = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseAward", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CloseAward = &v
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowInitialValue", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowInitialValue = &v
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowRecycle", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowRecycle = &v
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowCommission", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowCommission = &v
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowStartAward", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowStartAward = &v
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowCloseAward", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowCloseAward = &v
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpenAward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOpenAward = &b
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDefault", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsDefault = &b
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigLoss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BigLoss == nil {
				m.BigLoss = &WishPoolStatus{}
			}
			if err := m.BigLoss.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallLoss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SmallLoss == nil {
				m.SmallLoss = &WishPoolStatus{}
			}
			if err := m.SmallLoss.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Common", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Common == nil {
				m.Common = &WishPoolStatus{}
			}
			if err := m.Common.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigWin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BigWin == nil {
				m.BigWin = &WishPoolStatus{}
			}
			if err := m.BigWin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallWin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SmallWin == nil {
				m.SmallWin = &WishPoolStatus{}
			}
			if err := m.SmallWin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalStatus", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LocalStatus = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCfgId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PoolCfgId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishPoolStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishPoolStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishPoolStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValue", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxValue = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValue", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinValue = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowMaxValue", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowMaxValue = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowMinValue", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowMinValue = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishPoolReportList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishPoolReportList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishPoolReportList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.WishPoolReport{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishBoxReportList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishBoxReportList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishBoxReportList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.WishBoxReport{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishBoxDetailReportList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishBoxDetailReportList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishBoxDetailReportList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.WishBoxDetailReport{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishItemReportList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishItemReportList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishItemReportList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.WishItemReport{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestPlayerWishItemList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestPlayerWishItemList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestPlayerWishItemList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.PlayerWishItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestWishPoolLogList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestWishPoolLogList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestWishPoolLogList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.WishPoolLog{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestWishPoolPumpLogList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestWishPoolPumpLogList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestWishPoolPumpLogList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.WishPoolPumpLog{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestWishPoolBoxPoolInfoList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestWishPoolBoxPoolInfoList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestWishPoolBoxPoolInfoList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.WishPool{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DrawRecordList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DrawRecordList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DrawRecordList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &DrawRecord{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DrawRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DrawRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DrawRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UserAccount = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Phone = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddBoxCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddBoxCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishItemCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishItemCount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DrawCount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DrawGoldTotal = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDrawTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastDrawTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveItemCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveItemCount = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelItemCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DelItemCount = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserNickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UserNickname = &s
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddBoxRecordList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddBoxRecordList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddBoxRecordList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AddBoxRecord{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddBoxRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddBoxRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddBoxRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BoxName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishGoodsRecordList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishGoodsRecordList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishGoodsRecordList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &WishGoodsRecord{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishGoodsRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishGoodsRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishGoodsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GoodsId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BoxName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GoodsName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DrawBoxRecordList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DrawBoxRecordList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DrawBoxRecordList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &DrawBoxRecord{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DrawBoxRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DrawBoxRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DrawBoxRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxId = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BoxName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DrawCount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WinRecordList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WinRecordList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WinRecordList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &WinRecord{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WinRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WinRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WinRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GoodsId = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GoodsName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasWish", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.HasWish = &b
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxItemId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HaveItemList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HaveItemList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HaveItemList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &HaveItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HaveItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HaveItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HaveItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GoodsId = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GoodsName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxId = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BoxName = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerItemId = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriceSection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceSection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceSection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneMin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OneMin = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneMax", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OneMax = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwoMin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TwoMin = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwoMax", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TwoMax = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreeMin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThreeMin = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishMailSection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishMailSection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishMailSection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Postage1", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Postage1 = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Postage2", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Postage2 = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Postage3", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Postage3 = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteAreaList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteAreaList = append(m.RemoteAreaList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeNumber", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FreeNumber = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishRecycleSection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishRecycleSection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishRecycleSection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Platform = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayTopCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayTopCount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Player = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Status = &b
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayMoneyTopCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayMoneyTopCount = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayMoneyTop", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayMoneyTop = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderThresholdMoney", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderThresholdMoney = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayDiamondTopCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayDiamondTopCount = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayDiamondTop", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayDiamondTop = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderThreshold", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderThreshold = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRate", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FeeRate = &v
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformTax", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlatformTax = &v
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealTax", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RealTax = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishPayWarnCfg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishPayWarnCfg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishPayWarnCfg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithdrawalTime = &v
		case 60:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalTimes", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithdrawalTimes = &v
		case 61:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalGoldRate", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithdrawalGoldRate = &v
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalGold", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithdrawalGold = &v
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalDiamondRate", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithdrawalDiamondRate = &v
		case 64:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithdrawalDiamond = &v
		case 65:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneList = append(m.PhoneList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishGuardianCfg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishGuardianCfg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishGuardianCfg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayDiamondTop", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayDiamondTop = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnceDiamondRebate", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnceDiamondRebate = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecycleNoteCfg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecycleNoteCfg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecycleNoteCfg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = append(m.Text, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishCoolDownConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishCoolDownConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishCoolDownConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOpen = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinuousTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ContinuousTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinuousTimes", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ContinuousTimes = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoolDownTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CoolDownTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayLimit", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayLimit = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishCurrencyConversionCfg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishCurrencyConversionCfg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishCurrencyConversionCfg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Coin = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiamondItemListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiamondItemListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiamondItemListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.DiamondRecharge{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiamondChangeLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiamondChangeLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiamondChangeLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.DiamondChangeLog{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishPlayerListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishPlayerListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishPlayerListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.WishPlayer{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishActPoolList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishActPoolList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishActPoolList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.WishActPool{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWishActPoolListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateWishActPoolListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateWishActPoolListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BoxIds = append(m.BoxIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrowerWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBrowerWish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBrowerWish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BoxIds) == 0 {
					m.BoxIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrowerWish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BoxIds = append(m.BoxIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishActPoolDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishActPoolDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishActPoolDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &WishActPoolItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishActPoolItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishActPoolItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishActPoolItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHave", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsHave = &b
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishActPoolRuleList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishActPoolRuleList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishActPoolRuleList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &WishActPoolRule{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AwardType = &v
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemList = append(m.ItemList, &WishActPoolAwardItem{})
			if err := m.ItemList[len(m.ItemList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddWishActPoolRuleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWishActPoolRuleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWishActPoolRuleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &WishActPoolRule{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RuleType = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AwardType = &v
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekMonthList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeekMonthList = append(m.WeekMonthList, &WishActPoolAwardItem{})
			if err := m.WeekMonthList[len(m.WeekMonthList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishActPoolRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishActPoolRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishActPoolRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishActPoolId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishActPoolId = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Key = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishActPoolRuleWeekMonthList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishActPoolRuleWeekMonthList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishActPoolRuleWeekMonthList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &WishActPoolAwardItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishActPoolAwardItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishActPoolAwardItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishActPoolAwardItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishItemId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishActPoolId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishActPoolId = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Key = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Money = &v
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Icon = &s
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RuleType = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AwardType = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AwardDiamond = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishActPlayerRecordList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishActPlayerRecordList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishActPlayerRecordList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &WishActPlayerRecord{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishActPlayerRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishActPlayerRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishActPlayerRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UserAccount = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawDiamondTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DrawDiamondTotal = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardTotal", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AwardTotal = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &PoolData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayTotal", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayTotal = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawTotal", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DrawTotal = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishActPlayerWinRecordList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishActPlayerWinRecordList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishActPlayerWinRecordList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &WishActPlayerWinRecord{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishActPlayerWinRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishActPlayerWinRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishActPlayerWinRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WinTime = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TypeName = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UserAccount = &s
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishActPlayerDrawRecordList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishActPlayerDrawRecordList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishActPlayerDrawRecordList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &WishActPlayerDrawRecord{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishActPlayerDrawRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishActPlayerDrawRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishActPlayerDrawRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxId = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActPoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ActPoolName = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActBoxName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ActBoxName = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishActRecordList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishActRecordList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishActRecordList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &WishActRecord{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishActRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishActRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishActRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxId = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActPoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ActPoolName = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishCoinRechargeActivityCfgRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishCoinRechargeActivityCfgRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishCoinRechargeActivityCfgRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.WishCoinRechargeActivityCfg{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWishLogReportRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWishLogReportRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWishLogReportRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.WishLogReport{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWishActivityPrizeLogRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWishActivityPrizeLogRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWishActivityPrizeLogRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrowerWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &share_message.WishActivityPrizeLog{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBrowerWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrowerWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBrowerWish(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBrowerWish
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBrowerWish
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBrowerWish
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBrowerWish
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBrowerWish
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBrowerWish        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBrowerWish          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBrowerWish = fmt.Errorf("proto: unexpected end of group")
)
