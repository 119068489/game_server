// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: table_struct_e-sports.proto

// 如果仅用于通讯的 message,别放在这里

package share_message

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_akqp2019_protobuf_proto "github.com/akqp2019/protobuf/proto"
	proto "github.com/akqp2019/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//爬虫进度表 job_crawl
type TableCrawlJob struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Value                *string  `protobuf:"bytes,2,opt,name=Value" json:"Value,omitempty" bson:"Value,omitempty"`
	Time                 *int64   `protobuf:"varint,3,opt,name=Time" json:"Time,omitempty" bson:"Time,omitempty"`
	Name                 *string  `protobuf:"bytes,4,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TableCrawlJob) Reset()         { *m = TableCrawlJob{} }
func (m *TableCrawlJob) String() string { return proto.CompactTextString(m) }
func (*TableCrawlJob) ProtoMessage()    {}
func (*TableCrawlJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{0}
}
func (m *TableCrawlJob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableCrawlJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableCrawlJob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableCrawlJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableCrawlJob.Merge(m, src)
}
func (m *TableCrawlJob) XXX_Size() int {
	return m.Size()
}
func (m *TableCrawlJob) XXX_DiscardUnknown() {
	xxx_messageInfo_TableCrawlJob.DiscardUnknown(m)
}

var xxx_messageInfo_TableCrawlJob proto.InternalMessageInfo

func (m *TableCrawlJob) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *TableCrawlJob) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *TableCrawlJob) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *TableCrawlJob) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

//电竞玩家表
type TableESPortsPlayer struct {
	//玩家Id
	Id *int64 `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	//状态
	Status *int32 `protobuf:"varint,2,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	//上次拉取消息的时间
	LastPullTime *int64 `protobuf:"varint,3,opt,name=LastPullTime" json:"LastPullTime,omitempty" bson:"LastPullTime,omitempty"`
	//当前所在房间直播ID（放映厅ID）
	CurrentRoomLiveId *int64 `protobuf:"varint,4,opt,name=CurrentRoomLiveId" json:"CurrentRoomLiveId,omitempty" bson:"CurrentRoomLiveId,omitempty"`
	//创建时间
	CreateTime *int64 `protobuf:"varint,5,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	//最后登录时间
	LastLoginTime        *int64   `protobuf:"varint,6,opt,name=LastLoginTime" json:"LastLoginTime,omitempty" bson:"LastLoginTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TableESPortsPlayer) Reset()         { *m = TableESPortsPlayer{} }
func (m *TableESPortsPlayer) String() string { return proto.CompactTextString(m) }
func (*TableESPortsPlayer) ProtoMessage()    {}
func (*TableESPortsPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{1}
}
func (m *TableESPortsPlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableESPortsPlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableESPortsPlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableESPortsPlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableESPortsPlayer.Merge(m, src)
}
func (m *TableESPortsPlayer) XXX_Size() int {
	return m.Size()
}
func (m *TableESPortsPlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_TableESPortsPlayer.DiscardUnknown(m)
}

var xxx_messageInfo_TableESPortsPlayer proto.InternalMessageInfo

func (m *TableESPortsPlayer) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TableESPortsPlayer) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *TableESPortsPlayer) GetLastPullTime() int64 {
	if m != nil && m.LastPullTime != nil {
		return *m.LastPullTime
	}
	return 0
}

func (m *TableESPortsPlayer) GetCurrentRoomLiveId() int64 {
	if m != nil && m.CurrentRoomLiveId != nil {
		return *m.CurrentRoomLiveId
	}
	return 0
}

func (m *TableESPortsPlayer) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TableESPortsPlayer) GetLastLoginTime() int64 {
	if m != nil && m.LastLoginTime != nil {
		return *m.LastLoginTime
	}
	return 0
}

//跳转信息
type ESPortsJumpInfo struct {
	//跳转类型 1外部跳转，2内部跳转,3跳转其他APP
	JumpType *int32 `protobuf:"varint,10,opt,name=JumpType" json:"JumpType,omitempty" bson:"JumpType,omitempty"`
	//跳转对象Id
	JumpObjId *int64 `protobuf:"varint,11,opt,name=JumpObjId" json:"JumpObjId,omitempty" bson:"JumpObjId,omitempty"`
	//跳转位置 1 主界面，2 柠檬团队，3 柠檬助手，4附近的人，5社交广场-主界面，6社交广场-新增关注，7社交广场-指定动态：通过填写动态ID指定，8好物-主界面，9好物-指定商品：通过填写商品ID指定,10群-指定群id,11社交广场发布页,12零钱,13话题-指定话题,14-指定的动态评论,15-话题主界面,16-硬币商城主页,17-电竞币充值页,18-指定资讯详情,19-指定视频详情,20-电竞主页
	JumpObject *int32 `protobuf:"varint,12,opt,name=JumpObject" json:"JumpObject,omitempty" bson:"JumpObject,omitempty"`
	//跳转URL
	JumpUrl *string `protobuf:"bytes,13,opt,name=JumpUrl" json:"JumpUrl,omitempty" bson:"JumpUrl,omitempty"`
	//跳转对象样式 0默认，1隐藏头部
	JumpStyle            *int32   `protobuf:"varint,14,opt,name=JumpStyle" json:"JumpStyle,omitempty" bson:"JumpStyle,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESPortsJumpInfo) Reset()         { *m = ESPortsJumpInfo{} }
func (m *ESPortsJumpInfo) String() string { return proto.CompactTextString(m) }
func (*ESPortsJumpInfo) ProtoMessage()    {}
func (*ESPortsJumpInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{2}
}
func (m *ESPortsJumpInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESPortsJumpInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESPortsJumpInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESPortsJumpInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESPortsJumpInfo.Merge(m, src)
}
func (m *ESPortsJumpInfo) XXX_Size() int {
	return m.Size()
}
func (m *ESPortsJumpInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ESPortsJumpInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ESPortsJumpInfo proto.InternalMessageInfo

func (m *ESPortsJumpInfo) GetJumpType() int32 {
	if m != nil && m.JumpType != nil {
		return *m.JumpType
	}
	return 0
}

func (m *ESPortsJumpInfo) GetJumpObjId() int64 {
	if m != nil && m.JumpObjId != nil {
		return *m.JumpObjId
	}
	return 0
}

func (m *ESPortsJumpInfo) GetJumpObject() int32 {
	if m != nil && m.JumpObject != nil {
		return *m.JumpObject
	}
	return 0
}

func (m *ESPortsJumpInfo) GetJumpUrl() string {
	if m != nil && m.JumpUrl != nil {
		return *m.JumpUrl
	}
	return ""
}

func (m *ESPortsJumpInfo) GetJumpStyle() int32 {
	if m != nil && m.JumpStyle != nil {
		return *m.JumpStyle
	}
	return 0
}

// 轮播图
type TableESPortsCarousel struct {
	//唯一ID
	Id *int64 `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	//标题
	Title *string `protobuf:"bytes,2,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	//修改时间
	UpdateTime *int64 `protobuf:"varint,3,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	//创建时间
	CreateTime *int64 `protobuf:"varint,4,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	//状态
	Status *int32 `protobuf:"varint,5,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	//图片地址
	ImageUrl *string `protobuf:"bytes,6,opt,name=ImageUrl" json:"ImageUrl,omitempty" bson:"ImageUrl,omitempty"`
	// 点击次数
	ActionCount *int32 `protobuf:"varint,8,opt,name=ActionCount" json:"ActionCount,omitempty" bson:"ActionCount,omitempty"`
	//投放位置
	MenuId *int32 `protobuf:"varint,9,opt,name=MenuId" json:"MenuId,omitempty" bson:"MenuId,omitempty"`
	//跳转类型
	JumpInfo *ESPortsJumpInfo `protobuf:"bytes,10,opt,name=JumpInfo" json:"JumpInfo,omitempty" bson:"JumpInfo,omitempty"`
	//权重
	Weight *int32 `protobuf:"varint,14,opt,name=Weight" json:"Weight,omitempty" bson:"Weight,omitempty"`
	//广告类型
	Types                *int32   `protobuf:"varint,15,opt,name=Types" json:"Types,omitempty" bson:"Types,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TableESPortsCarousel) Reset()         { *m = TableESPortsCarousel{} }
func (m *TableESPortsCarousel) String() string { return proto.CompactTextString(m) }
func (*TableESPortsCarousel) ProtoMessage()    {}
func (*TableESPortsCarousel) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{3}
}
func (m *TableESPortsCarousel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableESPortsCarousel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableESPortsCarousel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableESPortsCarousel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableESPortsCarousel.Merge(m, src)
}
func (m *TableESPortsCarousel) XXX_Size() int {
	return m.Size()
}
func (m *TableESPortsCarousel) XXX_DiscardUnknown() {
	xxx_messageInfo_TableESPortsCarousel.DiscardUnknown(m)
}

var xxx_messageInfo_TableESPortsCarousel proto.InternalMessageInfo

func (m *TableESPortsCarousel) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TableESPortsCarousel) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *TableESPortsCarousel) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *TableESPortsCarousel) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TableESPortsCarousel) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *TableESPortsCarousel) GetImageUrl() string {
	if m != nil && m.ImageUrl != nil {
		return *m.ImageUrl
	}
	return ""
}

func (m *TableESPortsCarousel) GetActionCount() int32 {
	if m != nil && m.ActionCount != nil {
		return *m.ActionCount
	}
	return 0
}

func (m *TableESPortsCarousel) GetMenuId() int32 {
	if m != nil && m.MenuId != nil {
		return *m.MenuId
	}
	return 0
}

func (m *TableESPortsCarousel) GetJumpInfo() *ESPortsJumpInfo {
	if m != nil {
		return m.JumpInfo
	}
	return nil
}

func (m *TableESPortsCarousel) GetWeight() int32 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return 0
}

func (m *TableESPortsCarousel) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

//通用标签
type TableESPortsLabel struct {
	//唯一ID
	Id *int64 `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	//标题
	Title *string `protobuf:"bytes,2,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	//状态 1正常 2禁用
	Status *int32 `protobuf:"varint,3,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	//权重 数值越大，越排前面
	Weight *int32 `protobuf:"varint,4,opt,name=Weight" json:"Weight,omitempty" bson:"Weight,omitempty"`
	//菜单Id
	MenuId *int32 `protobuf:"varint,6,opt,name=MenuId" json:"MenuId,omitempty" bson:"MenuId,omitempty"`
	//游戏标签ID
	LabelId *int64 `protobuf:"varint,7,opt,name=LabelId" json:"LabelId,omitempty" bson:"LabelId,omitempty"`
	//标签类型  当 LabelType = 3游戏标签ID 使用LabelId  其他使用自增Id (1 行为标签  2 系统标签 3 游戏标签)
	LabelType *int32 `protobuf:"varint,8,opt,name=LabelType" json:"LabelType,omitempty" bson:"LabelType,omitempty"`
	//标签图标url
	IconUrl              *string  `protobuf:"bytes,9,opt,name=IconUrl" json:"IconUrl,omitempty" bson:"IconUrl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TableESPortsLabel) Reset()         { *m = TableESPortsLabel{} }
func (m *TableESPortsLabel) String() string { return proto.CompactTextString(m) }
func (*TableESPortsLabel) ProtoMessage()    {}
func (*TableESPortsLabel) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{4}
}
func (m *TableESPortsLabel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableESPortsLabel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableESPortsLabel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableESPortsLabel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableESPortsLabel.Merge(m, src)
}
func (m *TableESPortsLabel) XXX_Size() int {
	return m.Size()
}
func (m *TableESPortsLabel) XXX_DiscardUnknown() {
	xxx_messageInfo_TableESPortsLabel.DiscardUnknown(m)
}

var xxx_messageInfo_TableESPortsLabel proto.InternalMessageInfo

func (m *TableESPortsLabel) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TableESPortsLabel) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *TableESPortsLabel) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *TableESPortsLabel) GetWeight() int32 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return 0
}

func (m *TableESPortsLabel) GetMenuId() int32 {
	if m != nil && m.MenuId != nil {
		return *m.MenuId
	}
	return 0
}

func (m *TableESPortsLabel) GetLabelId() int64 {
	if m != nil && m.LabelId != nil {
		return *m.LabelId
	}
	return 0
}

func (m *TableESPortsLabel) GetLabelType() int32 {
	if m != nil && m.LabelType != nil {
		return *m.LabelType
	}
	return 0
}

func (m *TableESPortsLabel) GetIconUrl() string {
	if m != nil && m.IconUrl != nil {
		return *m.IconUrl
	}
	return ""
}

//点赞实体
type ThumbsUpInfo struct {
	//游戏标签ID
	AppLabelID *int64 `protobuf:"varint,18,opt,name=AppLabelID" json:"AppLabelID,omitempty" bson:"AppLabelID,omitempty"`
	//唯一ID
	Id *int64 `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	//实际点赞
	ThumbsUpCount *int32 `protobuf:"varint,2,opt,name=ThumbsUpCount" json:"ThumbsUpCount,omitempty" bson:"ThumbsUpCount,omitempty"`
	//菜单ID
	MenuId               *int32   `protobuf:"varint,22,opt,name=MenuId" json:"MenuId,omitempty" bson:"MenuId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ThumbsUpInfo) Reset()         { *m = ThumbsUpInfo{} }
func (m *ThumbsUpInfo) String() string { return proto.CompactTextString(m) }
func (*ThumbsUpInfo) ProtoMessage()    {}
func (*ThumbsUpInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{5}
}
func (m *ThumbsUpInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThumbsUpInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThumbsUpInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThumbsUpInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThumbsUpInfo.Merge(m, src)
}
func (m *ThumbsUpInfo) XXX_Size() int {
	return m.Size()
}
func (m *ThumbsUpInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ThumbsUpInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ThumbsUpInfo proto.InternalMessageInfo

func (m *ThumbsUpInfo) GetAppLabelID() int64 {
	if m != nil && m.AppLabelID != nil {
		return *m.AppLabelID
	}
	return 0
}

func (m *ThumbsUpInfo) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ThumbsUpInfo) GetThumbsUpCount() int32 {
	if m != nil && m.ThumbsUpCount != nil {
		return *m.ThumbsUpCount
	}
	return 0
}

func (m *ThumbsUpInfo) GetMenuId() int32 {
	if m != nil && m.MenuId != nil {
		return *m.MenuId
	}
	return 0
}

//评论节点
type TableESportComment struct {
	//唯一ID
	Id *int64 `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	//内容
	Content *string `protobuf:"bytes,2,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	//点赞
	ThumbsUpCount *int32 `protobuf:"varint,3,opt,name=ThumbsUpCount" json:"ThumbsUpCount,omitempty" bson:"ThumbsUpCount,omitempty"`
	//时间
	CreateTime *int64 `protobuf:"varint,4,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	//用户Id
	PlayerId *int64 `protobuf:"varint,5,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	//用户昵称
	PlayerNickName *string `protobuf:"bytes,6,opt,name=PlayerNickName" json:"PlayerNickName,omitempty" bson:"PlayerNickName,omitempty"`
	//父级ID
	ParentId *int64 `protobuf:"varint,7,opt,name=ParentId" json:"ParentId,omitempty" bson:"ParentId,omitempty"`
	//菜单ID
	MenuId *int32 `protobuf:"varint,8,opt,name=MenuId" json:"MenuId,omitempty" bson:"MenuId,omitempty"`
	//游戏标签ID
	AppLabelID *int64 `protobuf:"varint,9,opt,name=AppLabelID" json:"AppLabelID,omitempty" bson:"AppLabelID,omitempty"`
	//回复数量
	ReplyCount *int32 `protobuf:"varint,10,opt,name=ReplyCount" json:"ReplyCount,omitempty" bson:"ReplyCount,omitempty"`
	//状态 1正常 2前端删除 3后台删除
	Status *int32 `protobuf:"varint,11,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	//某个评论的ID
	CommentId *int64 `protobuf:"varint,12,opt,name=CommentId" json:"CommentId,omitempty" bson:"CommentId,omitempty"`
	//用户图标url
	PlayerIconUrl *string `protobuf:"bytes,13,opt,name=PlayerIconUrl" json:"PlayerIconUrl,omitempty" bson:"PlayerIconUrl,omitempty"`
	//观看者是否点赞 不做存储 1已点赞 0未点赞
	IsThumbsUp *int32 `protobuf:"varint,14,opt,name=IsThumbsUp" json:"IsThumbsUp,omitempty" bson:"IsThumbsUp,omitempty"`
	//被回复的用户ID
	ReplyPlayerId *int64 `protobuf:"varint,15,opt,name=ReplyPlayerId" json:"ReplyPlayerId,omitempty" bson:"ReplyPlayerId,omitempty"`
	//被回复的用户昵称(数据不做存储)
	ReplyPlayerNickName  *string  `protobuf:"bytes,16,opt,name=ReplyPlayerNickName" json:"ReplyPlayerNickName,omitempty" bson:"ReplyPlayerNickName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TableESportComment) Reset()         { *m = TableESportComment{} }
func (m *TableESportComment) String() string { return proto.CompactTextString(m) }
func (*TableESportComment) ProtoMessage()    {}
func (*TableESportComment) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{6}
}
func (m *TableESportComment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableESportComment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableESportComment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableESportComment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableESportComment.Merge(m, src)
}
func (m *TableESportComment) XXX_Size() int {
	return m.Size()
}
func (m *TableESportComment) XXX_DiscardUnknown() {
	xxx_messageInfo_TableESportComment.DiscardUnknown(m)
}

var xxx_messageInfo_TableESportComment proto.InternalMessageInfo

func (m *TableESportComment) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TableESportComment) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *TableESportComment) GetThumbsUpCount() int32 {
	if m != nil && m.ThumbsUpCount != nil {
		return *m.ThumbsUpCount
	}
	return 0
}

func (m *TableESportComment) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TableESportComment) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *TableESportComment) GetPlayerNickName() string {
	if m != nil && m.PlayerNickName != nil {
		return *m.PlayerNickName
	}
	return ""
}

func (m *TableESportComment) GetParentId() int64 {
	if m != nil && m.ParentId != nil {
		return *m.ParentId
	}
	return 0
}

func (m *TableESportComment) GetMenuId() int32 {
	if m != nil && m.MenuId != nil {
		return *m.MenuId
	}
	return 0
}

func (m *TableESportComment) GetAppLabelID() int64 {
	if m != nil && m.AppLabelID != nil {
		return *m.AppLabelID
	}
	return 0
}

func (m *TableESportComment) GetReplyCount() int32 {
	if m != nil && m.ReplyCount != nil {
		return *m.ReplyCount
	}
	return 0
}

func (m *TableESportComment) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *TableESportComment) GetCommentId() int64 {
	if m != nil && m.CommentId != nil {
		return *m.CommentId
	}
	return 0
}

func (m *TableESportComment) GetPlayerIconUrl() string {
	if m != nil && m.PlayerIconUrl != nil {
		return *m.PlayerIconUrl
	}
	return ""
}

func (m *TableESportComment) GetIsThumbsUp() int32 {
	if m != nil && m.IsThumbsUp != nil {
		return *m.IsThumbsUp
	}
	return 0
}

func (m *TableESportComment) GetReplyPlayerId() int64 {
	if m != nil && m.ReplyPlayerId != nil {
		return *m.ReplyPlayerId
	}
	return 0
}

func (m *TableESportComment) GetReplyPlayerNickName() string {
	if m != nil && m.ReplyPlayerNickName != nil {
		return *m.ReplyPlayerNickName
	}
	return ""
}

//资讯表
type TableESPortsRealTimeInfo struct {
	//唯一ID
	Id *int64 `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	//修改时间
	UpdateTime *int64 `protobuf:"varint,2,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	//创建时间
	CreateTime *int64 `protobuf:"varint,3,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	//状态
	Status *int32 `protobuf:"varint,4,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	//来源公开时间
	IssueTime *int64 `protobuf:"varint,5,opt,name=IssueTime" json:"IssueTime,omitempty" bson:"IssueTime,omitempty"`
	//封面大图
	CoverBigImageUrl *string `protobuf:"bytes,6,opt,name=CoverBigImageUrl" json:"CoverBigImageUrl,omitempty" bson:"CoverBigImageUrl,omitempty"`
	//小图可多个
	CoverSmallImageUrl []string `protobuf:"bytes,7,rep,name=CoverSmallImageUrl" json:"CoverSmallImageUrl,omitempty" bson:"CoverSmallImageUrl,omitempty"`
	//标题
	Title *string `protobuf:"bytes,8,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	//正文html格式
	Content *string `protobuf:"bytes,9,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	//作者playerId
	AuthorPlayerId *int64 `protobuf:"varint,10,opt,name=AuthorPlayerId" json:"AuthorPlayerId,omitempty" bson:"AuthorPlayerId,omitempty"`
	//作者账号或柠檬号
	AuthorAccount *string `protobuf:"bytes,11,opt,name=AuthorAccount" json:"AuthorAccount,omitempty" bson:"AuthorAccount,omitempty"`
	//作者
	Author *string `protobuf:"bytes,12,opt,name=Author" json:"Author,omitempty" bson:"Author,omitempty"`
	//数据来源
	DataSource *string `protobuf:"bytes,13,opt,name=DataSource" json:"DataSource,omitempty" bson:"DataSource,omitempty"`
	//实际浏览数量
	LookCount *int32 `protobuf:"varint,14,opt,name=LookCount" json:"LookCount,omitempty" bson:"LookCount,omitempty"`
	//后台配置浏览数量
	LookCountSys *int32 `protobuf:"varint,15,opt,name=LookCountSys" json:"LookCountSys,omitempty" bson:"LookCountSys,omitempty"`
	//实际点赞
	ThumbsUpCount *int32 `protobuf:"varint,16,opt,name=ThumbsUpCount" json:"ThumbsUpCount,omitempty" bson:"ThumbsUpCount,omitempty"`
	//后台配置点赞
	ThumbsUpCountSys *int32 `protobuf:"varint,17,opt,name=ThumbsUpCountSys" json:"ThumbsUpCountSys,omitempty" bson:"ThumbsUpCountSys,omitempty"`
	//游戏标签ID
	AppLabelID *int64 `protobuf:"varint,18,opt,name=AppLabelID" json:"AppLabelID,omitempty" bson:"AppLabelID,omitempty"`
	//游戏标签名称
	AppLabelName *string `protobuf:"bytes,19,opt,name=AppLabelName" json:"AppLabelName,omitempty" bson:"AppLabelName,omitempty"`
	//发布时间
	BeginEffectiveTime *int64 `protobuf:"varint,20,opt,name=BeginEffectiveTime" json:"BeginEffectiveTime,omitempty" bson:"BeginEffectiveTime,omitempty"`
	//发布类型
	EffectiveType *int64 `protobuf:"varint,21,opt,name=EffectiveType" json:"EffectiveType,omitempty" bson:"EffectiveType,omitempty"`
	//菜单ID
	MenuId *int32 `protobuf:"varint,22,opt,name=MenuId" json:"MenuId,omitempty" bson:"MenuId,omitempty"`
	//评论数量
	CommentCount *int32 `protobuf:"varint,23,opt,name=CommentCount" json:"CommentCount,omitempty" bson:"CommentCount,omitempty"`
	//展示模板类型 1标准3图 2大图  3左文右图
	ShowType *int32 `protobuf:"varint,24,opt,name=ShowType" json:"ShowType,omitempty" bson:"ShowType,omitempty"`
	// 系统自定义标签 一对多关系
	LabelIds []int64 `protobuf:"varint,25,rep,name=LabelIds" json:"LabelIds,omitempty" bson:"LabelIds,omitempty"`
	//备注字段
	Note *string `protobuf:"bytes,26,opt,name=Note" json:"Note,omitempty" bson:"Note,omitempty"`
	//观看者是否点赞 不做存储 1已点赞 0未点赞
	IsThumbsUp           *int32   `protobuf:"varint,27,opt,name=IsThumbsUp" json:"IsThumbsUp,omitempty" bson:"IsThumbsUp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TableESPortsRealTimeInfo) Reset()         { *m = TableESPortsRealTimeInfo{} }
func (m *TableESPortsRealTimeInfo) String() string { return proto.CompactTextString(m) }
func (*TableESPortsRealTimeInfo) ProtoMessage()    {}
func (*TableESPortsRealTimeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{7}
}
func (m *TableESPortsRealTimeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableESPortsRealTimeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableESPortsRealTimeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableESPortsRealTimeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableESPortsRealTimeInfo.Merge(m, src)
}
func (m *TableESPortsRealTimeInfo) XXX_Size() int {
	return m.Size()
}
func (m *TableESPortsRealTimeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TableESPortsRealTimeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TableESPortsRealTimeInfo proto.InternalMessageInfo

func (m *TableESPortsRealTimeInfo) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TableESPortsRealTimeInfo) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *TableESPortsRealTimeInfo) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TableESPortsRealTimeInfo) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *TableESPortsRealTimeInfo) GetIssueTime() int64 {
	if m != nil && m.IssueTime != nil {
		return *m.IssueTime
	}
	return 0
}

func (m *TableESPortsRealTimeInfo) GetCoverBigImageUrl() string {
	if m != nil && m.CoverBigImageUrl != nil {
		return *m.CoverBigImageUrl
	}
	return ""
}

func (m *TableESPortsRealTimeInfo) GetCoverSmallImageUrl() []string {
	if m != nil {
		return m.CoverSmallImageUrl
	}
	return nil
}

func (m *TableESPortsRealTimeInfo) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *TableESPortsRealTimeInfo) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *TableESPortsRealTimeInfo) GetAuthorPlayerId() int64 {
	if m != nil && m.AuthorPlayerId != nil {
		return *m.AuthorPlayerId
	}
	return 0
}

func (m *TableESPortsRealTimeInfo) GetAuthorAccount() string {
	if m != nil && m.AuthorAccount != nil {
		return *m.AuthorAccount
	}
	return ""
}

func (m *TableESPortsRealTimeInfo) GetAuthor() string {
	if m != nil && m.Author != nil {
		return *m.Author
	}
	return ""
}

func (m *TableESPortsRealTimeInfo) GetDataSource() string {
	if m != nil && m.DataSource != nil {
		return *m.DataSource
	}
	return ""
}

func (m *TableESPortsRealTimeInfo) GetLookCount() int32 {
	if m != nil && m.LookCount != nil {
		return *m.LookCount
	}
	return 0
}

func (m *TableESPortsRealTimeInfo) GetLookCountSys() int32 {
	if m != nil && m.LookCountSys != nil {
		return *m.LookCountSys
	}
	return 0
}

func (m *TableESPortsRealTimeInfo) GetThumbsUpCount() int32 {
	if m != nil && m.ThumbsUpCount != nil {
		return *m.ThumbsUpCount
	}
	return 0
}

func (m *TableESPortsRealTimeInfo) GetThumbsUpCountSys() int32 {
	if m != nil && m.ThumbsUpCountSys != nil {
		return *m.ThumbsUpCountSys
	}
	return 0
}

func (m *TableESPortsRealTimeInfo) GetAppLabelID() int64 {
	if m != nil && m.AppLabelID != nil {
		return *m.AppLabelID
	}
	return 0
}

func (m *TableESPortsRealTimeInfo) GetAppLabelName() string {
	if m != nil && m.AppLabelName != nil {
		return *m.AppLabelName
	}
	return ""
}

func (m *TableESPortsRealTimeInfo) GetBeginEffectiveTime() int64 {
	if m != nil && m.BeginEffectiveTime != nil {
		return *m.BeginEffectiveTime
	}
	return 0
}

func (m *TableESPortsRealTimeInfo) GetEffectiveType() int64 {
	if m != nil && m.EffectiveType != nil {
		return *m.EffectiveType
	}
	return 0
}

func (m *TableESPortsRealTimeInfo) GetMenuId() int32 {
	if m != nil && m.MenuId != nil {
		return *m.MenuId
	}
	return 0
}

func (m *TableESPortsRealTimeInfo) GetCommentCount() int32 {
	if m != nil && m.CommentCount != nil {
		return *m.CommentCount
	}
	return 0
}

func (m *TableESPortsRealTimeInfo) GetShowType() int32 {
	if m != nil && m.ShowType != nil {
		return *m.ShowType
	}
	return 0
}

func (m *TableESPortsRealTimeInfo) GetLabelIds() []int64 {
	if m != nil {
		return m.LabelIds
	}
	return nil
}

func (m *TableESPortsRealTimeInfo) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

func (m *TableESPortsRealTimeInfo) GetIsThumbsUp() int32 {
	if m != nil && m.IsThumbsUp != nil {
		return *m.IsThumbsUp
	}
	return 0
}

//赛事信息
type UniqueGameInfo struct {
	//赛事名
	MatchName *string `protobuf:"bytes,1,opt,name=matchName" json:"matchName,omitempty" bson:"matchName,omitempty"`
	//場次名
	MatchStage *string `protobuf:"bytes,2,opt,name=matchStage" json:"matchStage,omitempty" bson:"matchStage,omitempty"`
	//bo
	Bo *string `protobuf:"bytes,3,opt,name=bo" json:"bo,omitempty" bson:"bo,omitempty"`
	//A隊伍信息
	TeamAName *string `protobuf:"bytes,4,opt,name=teamAName" json:"teamAName,omitempty" bson:"teamAName,omitempty"`
	//B隊伍信息
	TeamBName            *string  `protobuf:"bytes,5,opt,name=teamBName" json:"teamBName,omitempty" bson:"teamBName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *UniqueGameInfo) Reset()         { *m = UniqueGameInfo{} }
func (m *UniqueGameInfo) String() string { return proto.CompactTextString(m) }
func (*UniqueGameInfo) ProtoMessage()    {}
func (*UniqueGameInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{8}
}
func (m *UniqueGameInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UniqueGameInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UniqueGameInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UniqueGameInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniqueGameInfo.Merge(m, src)
}
func (m *UniqueGameInfo) XXX_Size() int {
	return m.Size()
}
func (m *UniqueGameInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UniqueGameInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UniqueGameInfo proto.InternalMessageInfo

func (m *UniqueGameInfo) GetMatchName() string {
	if m != nil && m.MatchName != nil {
		return *m.MatchName
	}
	return ""
}

func (m *UniqueGameInfo) GetMatchStage() string {
	if m != nil && m.MatchStage != nil {
		return *m.MatchStage
	}
	return ""
}

func (m *UniqueGameInfo) GetBo() string {
	if m != nil && m.Bo != nil {
		return *m.Bo
	}
	return ""
}

func (m *UniqueGameInfo) GetTeamAName() string {
	if m != nil && m.TeamAName != nil {
		return *m.TeamAName
	}
	return ""
}

func (m *UniqueGameInfo) GetTeamBName() string {
	if m != nil && m.TeamBName != nil {
		return *m.TeamBName
	}
	return ""
}

//视频表
type TableESPortsVideoInfo struct {
	//唯一ID 普通查询时使用的主键
	Id *int64 `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	//修改时间
	UpdateTime *int64 `protobuf:"varint,2,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	//创建时间
	CreateTime *int64 `protobuf:"varint,3,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	//来源公开时间
	IssueTime *int64 `protobuf:"varint,4,opt,name=IssueTime" json:"IssueTime,omitempty" bson:"IssueTime,omitempty"`
	//状态
	Status *int32 `protobuf:"varint,5,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	//封面图
	CoverImageUrl *string `protobuf:"bytes,6,opt,name=CoverImageUrl" json:"CoverImageUrl,omitempty" bson:"CoverImageUrl,omitempty"`
	//标题
	Title *string `protobuf:"bytes,7,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	//视频连接
	VideoUrl *string `protobuf:"bytes,8,opt,name=VideoUrl" json:"VideoUrl,omitempty" bson:"VideoUrl,omitempty"`
	//作者playerId
	AuthorPlayerId *int64 `protobuf:"varint,9,opt,name=AuthorPlayerId" json:"AuthorPlayerId,omitempty" bson:"AuthorPlayerId,omitempty"`
	//作者账号或柠檬号
	AuthorAccount *string `protobuf:"bytes,10,opt,name=AuthorAccount" json:"AuthorAccount,omitempty" bson:"AuthorAccount,omitempty"`
	//作者
	Author *string `protobuf:"bytes,11,opt,name=Author" json:"Author,omitempty" bson:"Author,omitempty"`
	//数据来源
	DataSource *string `protobuf:"bytes,12,opt,name=DataSource" json:"DataSource,omitempty" bson:"DataSource,omitempty"`
	//实际浏览数量
	LookCount *int32 `protobuf:"varint,13,opt,name=LookCount" json:"LookCount,omitempty" bson:"LookCount,omitempty"`
	//后台配置浏览数量
	LookCountSys *int32 `protobuf:"varint,14,opt,name=LookCountSys" json:"LookCountSys,omitempty" bson:"LookCountSys,omitempty"`
	//实际点赞
	ThumbsUpCount *int32 `protobuf:"varint,15,opt,name=ThumbsUpCount" json:"ThumbsUpCount,omitempty" bson:"ThumbsUpCount,omitempty"`
	//后台配置点赞
	ThumbsUpCountSys *int32 `protobuf:"varint,16,opt,name=ThumbsUpCountSys" json:"ThumbsUpCountSys,omitempty" bson:"ThumbsUpCountSys,omitempty"`
	//游戏标签ID
	AppLabelID *int64 `protobuf:"varint,17,opt,name=AppLabelID" json:"AppLabelID,omitempty" bson:"AppLabelID,omitempty"`
	//游戏标签名称
	AppLabelName *string `protobuf:"bytes,18,opt,name=AppLabelName" json:"AppLabelName,omitempty" bson:"AppLabelName,omitempty"`
	//发布时间
	BeginEffectiveTime *int64 `protobuf:"varint,21,opt,name=BeginEffectiveTime" json:"BeginEffectiveTime,omitempty" bson:"BeginEffectiveTime,omitempty"`
	//发布类型
	EffectiveType *int64 `protobuf:"varint,22,opt,name=EffectiveType" json:"EffectiveType,omitempty" bson:"EffectiveType,omitempty"`
	//视频类型
	VideoType *int64 `protobuf:"varint,23,opt,name=VideoType" json:"VideoType,omitempty" bson:"VideoType,omitempty"`
	//推荐
	IsRecommend *int32 `protobuf:"varint,24,opt,name=IsRecommend" json:"IsRecommend,omitempty" bson:"IsRecommend,omitempty"`
	//热门
	IsHot *int32 `protobuf:"varint,25,opt,name=IsHot" json:"IsHot,omitempty" bson:"IsHot,omitempty"`
	//菜单ID
	MenuId *int32 `protobuf:"varint,27,opt,name=MenuId" json:"MenuId,omitempty" bson:"MenuId,omitempty"`
	//评论数量
	CommentCount *int32 `protobuf:"varint,28,opt,name=CommentCount" json:"CommentCount,omitempty" bson:"CommentCount,omitempty"`
	//其他数据ID，不做存储，关注或查询历史观看时使用的主键
	DataId *int64 `protobuf:"varint,29,opt,name=DataId" json:"DataId,omitempty" bson:"DataId,omitempty"`
	//系统自定义标签 一对多关系
	LabelIds []int64 `protobuf:"varint,30,rep,name=LabelIds" json:"LabelIds,omitempty" bson:"LabelIds,omitempty"`
	//备注字段
	Note *string `protobuf:"bytes,31,opt,name=Note" json:"Note,omitempty" bson:"Note,omitempty"`
	//公告
	Content *string `protobuf:"bytes,32,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	//观看者是否点赞 不做存储 1已点赞 0未点赞
	IsThumbsUp *int32 `protobuf:"varint,33,opt,name=IsThumbsUp" json:"IsThumbsUp,omitempty" bson:"IsThumbsUp,omitempty"`
	//关注人数
	FlowCount *int64 `protobuf:"varint,34,opt,name=FlowCount" json:"FlowCount,omitempty" bson:"FlowCount,omitempty"`
	//后台配置关注人数
	FlowCountSys *int64 `protobuf:"varint,39,opt,name=FlowCountSys" json:"FlowCountSys,omitempty" bson:"FlowCountSys,omitempty"`
	//比赛名称
	MatchName *string `protobuf:"bytes,35,opt,name=MatchName" json:"-" bson:"-"`
	//粉丝人数，不做存储
	FanCount *int32 `protobuf:"varint,36,opt,name=FanCount" json:"FanCount,omitempty" bson:"FanCount,omitempty"`
	//用户图标url
	PlayerIconUrl *string `protobuf:"bytes,37,opt,name=PlayerIconUrl" json:"PlayerIconUrl,omitempty" bson:"PlayerIconUrl,omitempty"`
	//关联比赛表ID
	UniqueGameId *int64 `protobuf:"varint,26,opt,name=UniqueGameId" json:"UniqueGameId,omitempty" bson:"UniqueGameId,omitempty"`
	//关联比赛表标题
	UniqueGameName *string `protobuf:"bytes,38,opt,name=UniqueGameName" json:"UniqueGameName,omitempty" bson:"UniqueGameName,omitempty"`
	//作者playerId对应用户类型
	AuthorPlayerType *int32  `protobuf:"varint,40,opt,name=AuthorPlayerType" json:"AuthorPlayerType,omitempty" bson:"AuthorPlayerType,omitempty"`
	Operator         *string `protobuf:"bytes,41,opt,name=Operator" json:"Operator,omitempty" bson:"Operator,omitempty"`
	//是否关注 1已关注 2未关注
	IsFollow *int32 `protobuf:"varint,42,opt,name=IsFollow" json:"-" bson:"-"`
	//是否关注作者 1已关注 2未关注
	IsAuthorFollow *int32 `protobuf:"varint,43,opt,name=IsAuthorFollow" json:"-" bson:"-"`
	//作者昵称
	AuthorNickName *string `protobuf:"bytes,44,opt,name=AuthorNickName" json:"-" bson:"-"`
	//比赛场次信息与队伍信息 当VideoType = 2  UniqueGameId >0 并且有关联比赛时生效
	UniqueGameInfo       *UniqueGameInfo `protobuf:"bytes,45,opt,name=UniqueGameInfo" json:"UniqueGameInfo,omitempty" bson:"UniqueGameInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-" bson:"-"`
	XXX_unrecognized     []byte          `json:"-" bson:"-"`
	XXX_sizecache        int32           `json:"-" bson:"-"`
}

func (m *TableESPortsVideoInfo) Reset()         { *m = TableESPortsVideoInfo{} }
func (m *TableESPortsVideoInfo) String() string { return proto.CompactTextString(m) }
func (*TableESPortsVideoInfo) ProtoMessage()    {}
func (*TableESPortsVideoInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{9}
}
func (m *TableESPortsVideoInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableESPortsVideoInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableESPortsVideoInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableESPortsVideoInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableESPortsVideoInfo.Merge(m, src)
}
func (m *TableESPortsVideoInfo) XXX_Size() int {
	return m.Size()
}
func (m *TableESPortsVideoInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TableESPortsVideoInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TableESPortsVideoInfo proto.InternalMessageInfo

func (m *TableESPortsVideoInfo) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TableESPortsVideoInfo) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *TableESPortsVideoInfo) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TableESPortsVideoInfo) GetIssueTime() int64 {
	if m != nil && m.IssueTime != nil {
		return *m.IssueTime
	}
	return 0
}

func (m *TableESPortsVideoInfo) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *TableESPortsVideoInfo) GetCoverImageUrl() string {
	if m != nil && m.CoverImageUrl != nil {
		return *m.CoverImageUrl
	}
	return ""
}

func (m *TableESPortsVideoInfo) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *TableESPortsVideoInfo) GetVideoUrl() string {
	if m != nil && m.VideoUrl != nil {
		return *m.VideoUrl
	}
	return ""
}

func (m *TableESPortsVideoInfo) GetAuthorPlayerId() int64 {
	if m != nil && m.AuthorPlayerId != nil {
		return *m.AuthorPlayerId
	}
	return 0
}

func (m *TableESPortsVideoInfo) GetAuthorAccount() string {
	if m != nil && m.AuthorAccount != nil {
		return *m.AuthorAccount
	}
	return ""
}

func (m *TableESPortsVideoInfo) GetAuthor() string {
	if m != nil && m.Author != nil {
		return *m.Author
	}
	return ""
}

func (m *TableESPortsVideoInfo) GetDataSource() string {
	if m != nil && m.DataSource != nil {
		return *m.DataSource
	}
	return ""
}

func (m *TableESPortsVideoInfo) GetLookCount() int32 {
	if m != nil && m.LookCount != nil {
		return *m.LookCount
	}
	return 0
}

func (m *TableESPortsVideoInfo) GetLookCountSys() int32 {
	if m != nil && m.LookCountSys != nil {
		return *m.LookCountSys
	}
	return 0
}

func (m *TableESPortsVideoInfo) GetThumbsUpCount() int32 {
	if m != nil && m.ThumbsUpCount != nil {
		return *m.ThumbsUpCount
	}
	return 0
}

func (m *TableESPortsVideoInfo) GetThumbsUpCountSys() int32 {
	if m != nil && m.ThumbsUpCountSys != nil {
		return *m.ThumbsUpCountSys
	}
	return 0
}

func (m *TableESPortsVideoInfo) GetAppLabelID() int64 {
	if m != nil && m.AppLabelID != nil {
		return *m.AppLabelID
	}
	return 0
}

func (m *TableESPortsVideoInfo) GetAppLabelName() string {
	if m != nil && m.AppLabelName != nil {
		return *m.AppLabelName
	}
	return ""
}

func (m *TableESPortsVideoInfo) GetBeginEffectiveTime() int64 {
	if m != nil && m.BeginEffectiveTime != nil {
		return *m.BeginEffectiveTime
	}
	return 0
}

func (m *TableESPortsVideoInfo) GetEffectiveType() int64 {
	if m != nil && m.EffectiveType != nil {
		return *m.EffectiveType
	}
	return 0
}

func (m *TableESPortsVideoInfo) GetVideoType() int64 {
	if m != nil && m.VideoType != nil {
		return *m.VideoType
	}
	return 0
}

func (m *TableESPortsVideoInfo) GetIsRecommend() int32 {
	if m != nil && m.IsRecommend != nil {
		return *m.IsRecommend
	}
	return 0
}

func (m *TableESPortsVideoInfo) GetIsHot() int32 {
	if m != nil && m.IsHot != nil {
		return *m.IsHot
	}
	return 0
}

func (m *TableESPortsVideoInfo) GetMenuId() int32 {
	if m != nil && m.MenuId != nil {
		return *m.MenuId
	}
	return 0
}

func (m *TableESPortsVideoInfo) GetCommentCount() int32 {
	if m != nil && m.CommentCount != nil {
		return *m.CommentCount
	}
	return 0
}

func (m *TableESPortsVideoInfo) GetDataId() int64 {
	if m != nil && m.DataId != nil {
		return *m.DataId
	}
	return 0
}

func (m *TableESPortsVideoInfo) GetLabelIds() []int64 {
	if m != nil {
		return m.LabelIds
	}
	return nil
}

func (m *TableESPortsVideoInfo) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

func (m *TableESPortsVideoInfo) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *TableESPortsVideoInfo) GetIsThumbsUp() int32 {
	if m != nil && m.IsThumbsUp != nil {
		return *m.IsThumbsUp
	}
	return 0
}

func (m *TableESPortsVideoInfo) GetFlowCount() int64 {
	if m != nil && m.FlowCount != nil {
		return *m.FlowCount
	}
	return 0
}

func (m *TableESPortsVideoInfo) GetFlowCountSys() int64 {
	if m != nil && m.FlowCountSys != nil {
		return *m.FlowCountSys
	}
	return 0
}

func (m *TableESPortsVideoInfo) GetMatchName() string {
	if m != nil && m.MatchName != nil {
		return *m.MatchName
	}
	return ""
}

func (m *TableESPortsVideoInfo) GetFanCount() int32 {
	if m != nil && m.FanCount != nil {
		return *m.FanCount
	}
	return 0
}

func (m *TableESPortsVideoInfo) GetPlayerIconUrl() string {
	if m != nil && m.PlayerIconUrl != nil {
		return *m.PlayerIconUrl
	}
	return ""
}

func (m *TableESPortsVideoInfo) GetUniqueGameId() int64 {
	if m != nil && m.UniqueGameId != nil {
		return *m.UniqueGameId
	}
	return 0
}

func (m *TableESPortsVideoInfo) GetUniqueGameName() string {
	if m != nil && m.UniqueGameName != nil {
		return *m.UniqueGameName
	}
	return ""
}

func (m *TableESPortsVideoInfo) GetAuthorPlayerType() int32 {
	if m != nil && m.AuthorPlayerType != nil {
		return *m.AuthorPlayerType
	}
	return 0
}

func (m *TableESPortsVideoInfo) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *TableESPortsVideoInfo) GetIsFollow() int32 {
	if m != nil && m.IsFollow != nil {
		return *m.IsFollow
	}
	return 0
}

func (m *TableESPortsVideoInfo) GetIsAuthorFollow() int32 {
	if m != nil && m.IsAuthorFollow != nil {
		return *m.IsAuthorFollow
	}
	return 0
}

func (m *TableESPortsVideoInfo) GetAuthorNickName() string {
	if m != nil && m.AuthorNickName != nil {
		return *m.AuthorNickName
	}
	return ""
}

func (m *TableESPortsVideoInfo) GetUniqueGameInfo() *UniqueGameInfo {
	if m != nil {
		return m.UniqueGameInfo
	}
	return nil
}

//关注或者历史使用的结构
type TableESPortsFlowInfo struct {
	//唯一ID
	Id *string `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	//玩家ID
	PlayerId *int64 `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	//数据ID
	DataId               *int64   `protobuf:"varint,3,opt,name=DataId" json:"DataId,omitempty" bson:"DataId,omitempty"`
	CreateTime           *int64   `protobuf:"varint,4,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TableESPortsFlowInfo) Reset()         { *m = TableESPortsFlowInfo{} }
func (m *TableESPortsFlowInfo) String() string { return proto.CompactTextString(m) }
func (*TableESPortsFlowInfo) ProtoMessage()    {}
func (*TableESPortsFlowInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{10}
}
func (m *TableESPortsFlowInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableESPortsFlowInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableESPortsFlowInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableESPortsFlowInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableESPortsFlowInfo.Merge(m, src)
}
func (m *TableESPortsFlowInfo) XXX_Size() int {
	return m.Size()
}
func (m *TableESPortsFlowInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TableESPortsFlowInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TableESPortsFlowInfo proto.InternalMessageInfo

func (m *TableESPortsFlowInfo) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *TableESPortsFlowInfo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *TableESPortsFlowInfo) GetDataId() int64 {
	if m != nil && m.DataId != nil {
		return *m.DataId
	}
	return 0
}

func (m *TableESPortsFlowInfo) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

//系统消息
type TableESPortsSysMsg struct {
	//唯一ID
	Id *int64 `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	//接收者类型 0 全体，1 IOS,2 Android
	RecipientType *int64 `protobuf:"varint,2,opt,name=RecipientType" json:"RecipientType,omitempty" bson:"RecipientType,omitempty"`
	//数据ID
	Title *string `protobuf:"bytes,3,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	//数据ID
	Content *string `protobuf:"bytes,4,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	//状态，0-未推送,1-已推送，2-已过期
	Status *int32 `protobuf:"varint,5,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	//创建时间
	CreateTime *int64 `protobuf:"varint,7,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	//跳转信息
	JumpInfo *ESPortsJumpInfo `protobuf:"bytes,8,opt,name=JumpInfo" json:"JumpInfo,omitempty" bson:"JumpInfo,omitempty"`
	//发布时间 前端显示时间
	EffectiveTime *int64 `protobuf:"varint,9,opt,name=EffectiveTime" json:"EffectiveTime,omitempty" bson:"EffectiveTime,omitempty"`
	//发送类型
	EffectiveType *int64 `protobuf:"varint,10,opt,name=EffectiveType" json:"EffectiveType,omitempty" bson:"EffectiveType,omitempty"`
	//推送消息(极光推送)
	IsPush *bool `protobuf:"varint,11,opt,name=IsPush" json:"IsPush,omitempty" bson:"IsPush,omitempty"`
	//消息中心
	IsMessageCenter *bool `protobuf:"varint,12,opt,name=IsMessageCenter" json:"IsMessageCenter,omitempty" bson:"IsMessageCenter,omitempty"`
	//icon 推送的图标
	Icon *string `protobuf:"bytes,13,opt,name=Icon" json:"Icon,omitempty" bson:"Icon,omitempty"`
	//失效時間  0 代表 永久有效 單位秒
	FailureTime          *int64   `protobuf:"varint,14,opt,name=FailureTime" json:"FailureTime,omitempty" bson:"FailureTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TableESPortsSysMsg) Reset()         { *m = TableESPortsSysMsg{} }
func (m *TableESPortsSysMsg) String() string { return proto.CompactTextString(m) }
func (*TableESPortsSysMsg) ProtoMessage()    {}
func (*TableESPortsSysMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{11}
}
func (m *TableESPortsSysMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableESPortsSysMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableESPortsSysMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableESPortsSysMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableESPortsSysMsg.Merge(m, src)
}
func (m *TableESPortsSysMsg) XXX_Size() int {
	return m.Size()
}
func (m *TableESPortsSysMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TableESPortsSysMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TableESPortsSysMsg proto.InternalMessageInfo

func (m *TableESPortsSysMsg) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TableESPortsSysMsg) GetRecipientType() int64 {
	if m != nil && m.RecipientType != nil {
		return *m.RecipientType
	}
	return 0
}

func (m *TableESPortsSysMsg) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *TableESPortsSysMsg) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *TableESPortsSysMsg) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *TableESPortsSysMsg) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TableESPortsSysMsg) GetJumpInfo() *ESPortsJumpInfo {
	if m != nil {
		return m.JumpInfo
	}
	return nil
}

func (m *TableESPortsSysMsg) GetEffectiveTime() int64 {
	if m != nil && m.EffectiveTime != nil {
		return *m.EffectiveTime
	}
	return 0
}

func (m *TableESPortsSysMsg) GetEffectiveType() int64 {
	if m != nil && m.EffectiveType != nil {
		return *m.EffectiveType
	}
	return 0
}

func (m *TableESPortsSysMsg) GetIsPush() bool {
	if m != nil && m.IsPush != nil {
		return *m.IsPush
	}
	return false
}

func (m *TableESPortsSysMsg) GetIsMessageCenter() bool {
	if m != nil && m.IsMessageCenter != nil {
		return *m.IsMessageCenter
	}
	return false
}

func (m *TableESPortsSysMsg) GetIcon() string {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return ""
}

func (m *TableESPortsSysMsg) GetFailureTime() int64 {
	if m != nil && m.FailureTime != nil {
		return *m.FailureTime
	}
	return 0
}

//竞猜投注表
type TableESPortsGuessBetRecord struct {
	//唯一ID(从redis取得)
	OrderId *int64 `protobuf:"varint,1,req,name=OrderId" json:"_id,omitempty" bson:"_id,omitempty"`
	//比赛列表中唯一的id(app_label_id,game_id,api_origin的组合)
	UniqueGameId *int64 `protobuf:"varint,2,opt,name=UniqueGameId" json:"UniqueGameId,omitempty" bson:"UniqueGameId,omitempty"`
	//动态盘口表中的唯一的id
	UniqueGameGuessId *int64 `protobuf:"varint,3,opt,name=UniqueGameGuessId" json:"UniqueGameGuessId,omitempty" bson:"UniqueGameGuessId,omitempty"`
	//对应本项目的标签id 10001:王者荣耀,10002:dota2,10003:英雄联盟,10004:CSGO
	AppLabelId *int32 `protobuf:"varint,4,opt,name=AppLabelId" json:"AppLabelId,omitempty" bson:"AppLabelId,omitempty"`
	//对应本项目的标签id 10001:王者荣耀,10002:dota2,10003:英雄联盟,10004:CSGO
	AppLabelName *string `protobuf:"bytes,5,opt,name=AppLabelName" json:"AppLabelName,omitempty" bson:"AppLabelName,omitempty"`
	//api接口来源 90001:野子科技
	ApiOrigin *int32 `protobuf:"varint,6,opt,name=ApiOrigin" json:"ApiOrigin,omitempty" bson:"ApiOrigin,omitempty"`
	//api接口来源名称 90001:野子科技
	ApiOriginName *string `protobuf:"bytes,7,opt,name=ApiOriginName" json:"ApiOriginName,omitempty" bson:"ApiOriginName,omitempty"`
	//api的比赛id
	GameId *string `protobuf:"bytes,8,opt,name=GameId" json:"GameId,omitempty" bson:"GameId,omitempty"`
	//1:早盘,2:滚盘(app内部区分用)
	MornRollGuessFlag *int32 `protobuf:"varint,9,opt,name=MornRollGuessFlag" json:"MornRollGuessFlag,omitempty" bson:"MornRollGuessFlag,omitempty"`
	//投注用户信息
	PlayInfo *GuessBetPlayerInfo `protobuf:"bytes,10,opt,name=PlayInfo" json:"PlayInfo,omitempty" bson:"PlayInfo,omitempty"`
	//用户投注的比赛信息
	GameInfo *GuessBetGameInfo `protobuf:"bytes,11,opt,name=GameInfo" json:"GameInfo,omitempty" bson:"GameInfo,omitempty"`
	//竞猜内容 id
	BetId *string `protobuf:"bytes,12,opt,name=BetId" json:"BetId,omitempty" bson:"BetId,omitempty"`
	//竞猜内容(竞猜目标)
	BetTitle *string `protobuf:"bytes,13,opt,name=BetTitle" json:"BetTitle,omitempty" bson:"BetTitle,omitempty"`
	//竞猜项 id(在同一个来源同一个比赛中可以确定唯一的投注项)
	BetNum *string `protobuf:"bytes,14,opt,name=BetNum" json:"BetNum,omitempty" bson:"BetNum,omitempty"`
	//竞猜项名称(存储计算过的页面上传过来)
	BetName *string `protobuf:"bytes,15,opt,name=BetName" json:"BetName,omitempty" bson:"BetName,omitempty"`
	//实时赔率
	Odds *string `protobuf:"bytes,16,opt,name=Odds" json:"Odds,omitempty" bson:"Odds,omitempty"`
	//用户投注金额
	BetAmount *int64 `protobuf:"varint,17,opt,name=BetAmount" json:"BetAmount,omitempty" bson:"BetAmount,omitempty"`
	//用户成功金额(舍弃小数后保存的数据)
	SuccessAmount *int64 `protobuf:"varint,18,opt,name=SuccessAmount" json:"SuccessAmount,omitempty" bson:"SuccessAmount,omitempty"`
	//用户失败金额
	FailAmount *int64 `protobuf:"varint,19,opt,name=FailAmount" json:"FailAmount,omitempty" bson:"FailAmount,omitempty"`
	//用户无效返回金额
	DisableAmount *int64 `protobuf:"varint,20,opt,name=DisableAmount" json:"DisableAmount,omitempty" bson:"DisableAmount,omitempty"`
	//用户违规扣除金额
	IllegalAmount *int64 `protobuf:"varint,21,opt,name=IllegalAmount" json:"IllegalAmount,omitempty" bson:"IllegalAmount,omitempty"`
	//用户无效违规理由
	Reason *string `protobuf:"bytes,22,opt,name=Reason" json:"Reason,omitempty" bson:"Reason,omitempty"`
	//理由详细描述
	ReasonDetail *string `protobuf:"bytes,23,opt,name=ReasonDetail" json:"ReasonDetail,omitempty" bson:"ReasonDetail,omitempty"`
	//投注状态 1进行中(待结算)、2完成(成功、失败)、3无效(返还)、4违规(扣除)
	BetStatus *string `protobuf:"bytes,24,opt,name=BetStatus" json:"BetStatus,omitempty" bson:"BetStatus,omitempty"`
	//投注结果 1待结算、2成功、3失败、4返还、5扣除
	BetResult *string `protobuf:"bytes,25,opt,name=BetResult" json:"BetResult,omitempty" bson:"BetResult,omitempty"`
	//创建时间(投注时间精确到秒)
	CreateTime *int64 `protobuf:"varint,26,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	//更新时间
	UpdateTime           *int64   `protobuf:"varint,27,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TableESPortsGuessBetRecord) Reset()         { *m = TableESPortsGuessBetRecord{} }
func (m *TableESPortsGuessBetRecord) String() string { return proto.CompactTextString(m) }
func (*TableESPortsGuessBetRecord) ProtoMessage()    {}
func (*TableESPortsGuessBetRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{12}
}
func (m *TableESPortsGuessBetRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableESPortsGuessBetRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableESPortsGuessBetRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableESPortsGuessBetRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableESPortsGuessBetRecord.Merge(m, src)
}
func (m *TableESPortsGuessBetRecord) XXX_Size() int {
	return m.Size()
}
func (m *TableESPortsGuessBetRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_TableESPortsGuessBetRecord.DiscardUnknown(m)
}

var xxx_messageInfo_TableESPortsGuessBetRecord proto.InternalMessageInfo

func (m *TableESPortsGuessBetRecord) GetOrderId() int64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *TableESPortsGuessBetRecord) GetUniqueGameId() int64 {
	if m != nil && m.UniqueGameId != nil {
		return *m.UniqueGameId
	}
	return 0
}

func (m *TableESPortsGuessBetRecord) GetUniqueGameGuessId() int64 {
	if m != nil && m.UniqueGameGuessId != nil {
		return *m.UniqueGameGuessId
	}
	return 0
}

func (m *TableESPortsGuessBetRecord) GetAppLabelId() int32 {
	if m != nil && m.AppLabelId != nil {
		return *m.AppLabelId
	}
	return 0
}

func (m *TableESPortsGuessBetRecord) GetAppLabelName() string {
	if m != nil && m.AppLabelName != nil {
		return *m.AppLabelName
	}
	return ""
}

func (m *TableESPortsGuessBetRecord) GetApiOrigin() int32 {
	if m != nil && m.ApiOrigin != nil {
		return *m.ApiOrigin
	}
	return 0
}

func (m *TableESPortsGuessBetRecord) GetApiOriginName() string {
	if m != nil && m.ApiOriginName != nil {
		return *m.ApiOriginName
	}
	return ""
}

func (m *TableESPortsGuessBetRecord) GetGameId() string {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return ""
}

func (m *TableESPortsGuessBetRecord) GetMornRollGuessFlag() int32 {
	if m != nil && m.MornRollGuessFlag != nil {
		return *m.MornRollGuessFlag
	}
	return 0
}

func (m *TableESPortsGuessBetRecord) GetPlayInfo() *GuessBetPlayerInfo {
	if m != nil {
		return m.PlayInfo
	}
	return nil
}

func (m *TableESPortsGuessBetRecord) GetGameInfo() *GuessBetGameInfo {
	if m != nil {
		return m.GameInfo
	}
	return nil
}

func (m *TableESPortsGuessBetRecord) GetBetId() string {
	if m != nil && m.BetId != nil {
		return *m.BetId
	}
	return ""
}

func (m *TableESPortsGuessBetRecord) GetBetTitle() string {
	if m != nil && m.BetTitle != nil {
		return *m.BetTitle
	}
	return ""
}

func (m *TableESPortsGuessBetRecord) GetBetNum() string {
	if m != nil && m.BetNum != nil {
		return *m.BetNum
	}
	return ""
}

func (m *TableESPortsGuessBetRecord) GetBetName() string {
	if m != nil && m.BetName != nil {
		return *m.BetName
	}
	return ""
}

func (m *TableESPortsGuessBetRecord) GetOdds() string {
	if m != nil && m.Odds != nil {
		return *m.Odds
	}
	return ""
}

func (m *TableESPortsGuessBetRecord) GetBetAmount() int64 {
	if m != nil && m.BetAmount != nil {
		return *m.BetAmount
	}
	return 0
}

func (m *TableESPortsGuessBetRecord) GetSuccessAmount() int64 {
	if m != nil && m.SuccessAmount != nil {
		return *m.SuccessAmount
	}
	return 0
}

func (m *TableESPortsGuessBetRecord) GetFailAmount() int64 {
	if m != nil && m.FailAmount != nil {
		return *m.FailAmount
	}
	return 0
}

func (m *TableESPortsGuessBetRecord) GetDisableAmount() int64 {
	if m != nil && m.DisableAmount != nil {
		return *m.DisableAmount
	}
	return 0
}

func (m *TableESPortsGuessBetRecord) GetIllegalAmount() int64 {
	if m != nil && m.IllegalAmount != nil {
		return *m.IllegalAmount
	}
	return 0
}

func (m *TableESPortsGuessBetRecord) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

func (m *TableESPortsGuessBetRecord) GetReasonDetail() string {
	if m != nil && m.ReasonDetail != nil {
		return *m.ReasonDetail
	}
	return ""
}

func (m *TableESPortsGuessBetRecord) GetBetStatus() string {
	if m != nil && m.BetStatus != nil {
		return *m.BetStatus
	}
	return ""
}

func (m *TableESPortsGuessBetRecord) GetBetResult() string {
	if m != nil && m.BetResult != nil {
		return *m.BetResult
	}
	return ""
}

func (m *TableESPortsGuessBetRecord) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TableESPortsGuessBetRecord) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

type GuessBetPlayerInfo struct {
	//用户柠檬账户中的id
	PlayId *int64 `protobuf:"varint,1,opt,name=PlayId" json:"PlayId,omitempty" bson:"PlayId,omitempty"`
	//用户柠檬闲聊号
	Account *string `protobuf:"bytes,2,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	//用户手机号
	Phone *string `protobuf:"bytes,3,opt,name=Phone" json:"Phone,omitempty" bson:"Phone,omitempty"`
	//昵称
	NickName             *string  `protobuf:"bytes,4,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GuessBetPlayerInfo) Reset()         { *m = GuessBetPlayerInfo{} }
func (m *GuessBetPlayerInfo) String() string { return proto.CompactTextString(m) }
func (*GuessBetPlayerInfo) ProtoMessage()    {}
func (*GuessBetPlayerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{13}
}
func (m *GuessBetPlayerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuessBetPlayerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuessBetPlayerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuessBetPlayerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuessBetPlayerInfo.Merge(m, src)
}
func (m *GuessBetPlayerInfo) XXX_Size() int {
	return m.Size()
}
func (m *GuessBetPlayerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GuessBetPlayerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GuessBetPlayerInfo proto.InternalMessageInfo

func (m *GuessBetPlayerInfo) GetPlayId() int64 {
	if m != nil && m.PlayId != nil {
		return *m.PlayId
	}
	return 0
}

func (m *GuessBetPlayerInfo) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *GuessBetPlayerInfo) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *GuessBetPlayerInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

type GuessBetGameInfo struct {
	//比赛名称(比赛表中赛事名+"-"+赛事阶段+"BO"+赛制)
	GameName *string `protobuf:"bytes,1,opt,name=gameName" json:"gameName,omitempty" bson:"gameName,omitempty"`
	//a队名字
	TeamAName *string `protobuf:"bytes,2,opt,name=TeamAName" json:"TeamAName,omitempty" bson:"TeamAName,omitempty"`
	//B队名字
	TeamBName            *string  `protobuf:"bytes,3,opt,name=TeamBName" json:"TeamBName,omitempty" bson:"TeamBName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GuessBetGameInfo) Reset()         { *m = GuessBetGameInfo{} }
func (m *GuessBetGameInfo) String() string { return proto.CompactTextString(m) }
func (*GuessBetGameInfo) ProtoMessage()    {}
func (*GuessBetGameInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{14}
}
func (m *GuessBetGameInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuessBetGameInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuessBetGameInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuessBetGameInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuessBetGameInfo.Merge(m, src)
}
func (m *GuessBetGameInfo) XXX_Size() int {
	return m.Size()
}
func (m *GuessBetGameInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GuessBetGameInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GuessBetGameInfo proto.InternalMessageInfo

func (m *GuessBetGameInfo) GetGameName() string {
	if m != nil && m.GameName != nil {
		return *m.GameName
	}
	return ""
}

func (m *GuessBetGameInfo) GetTeamAName() string {
	if m != nil && m.TeamAName != nil {
		return *m.TeamAName
	}
	return ""
}

func (m *GuessBetGameInfo) GetTeamBName() string {
	if m != nil && m.TeamBName != nil {
		return *m.TeamBName
	}
	return ""
}

//注单统计报表
type BetSlipReport struct {
	Id                   *int64            `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Account              *string           `protobuf:"bytes,2,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	GameInfo             *GuessBetGameInfo `protobuf:"bytes,3,opt,name=GameInfo" json:"GameInfo,omitempty" bson:"GameInfo,omitempty"`
	AppLabelID           *int64            `protobuf:"varint,4,opt,name=AppLabelID" json:"AppLabelID,omitempty" bson:"AppLabelID,omitempty"`
	AppLabelName         *string           `protobuf:"bytes,5,opt,name=AppLabelName" json:"AppLabelName,omitempty" bson:"AppLabelName,omitempty"`
	Players              *int64            `protobuf:"varint,6,opt,name=Players" json:"Players,omitempty" bson:"Players,omitempty"`
	BetSlips             *int64            `protobuf:"varint,7,opt,name=BetSlips" json:"BetSlips,omitempty" bson:"BetSlips,omitempty"`
	CreateTime           *int64            `protobuf:"varint,8,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	BetAmount            *int64            `protobuf:"varint,10,opt,name=BetAmount" json:"BetAmount,omitempty" bson:"BetAmount,omitempty"`
	SuccessAmount        *int64            `protobuf:"varint,11,opt,name=SuccessAmount" json:"SuccessAmount,omitempty" bson:"SuccessAmount,omitempty"`
	FailAmount           *int64            `protobuf:"varint,12,opt,name=FailAmount" json:"FailAmount,omitempty" bson:"FailAmount,omitempty"`
	DisableAmount        *int64            `protobuf:"varint,13,opt,name=DisableAmount" json:"DisableAmount,omitempty" bson:"DisableAmount,omitempty"`
	IllegalAmount        *int64            `protobuf:"varint,14,opt,name=IllegalAmount" json:"IllegalAmount,omitempty" bson:"IllegalAmount,omitempty"`
	SumAmount            *int64            `protobuf:"varint,15,opt,name=SumAmount" json:"SumAmount,omitempty" bson:"SumAmount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-" bson:"-"`
	XXX_unrecognized     []byte            `json:"-" bson:"-"`
	XXX_sizecache        int32             `json:"-" bson:"-"`
}

func (m *BetSlipReport) Reset()         { *m = BetSlipReport{} }
func (m *BetSlipReport) String() string { return proto.CompactTextString(m) }
func (*BetSlipReport) ProtoMessage()    {}
func (*BetSlipReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{15}
}
func (m *BetSlipReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BetSlipReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BetSlipReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BetSlipReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BetSlipReport.Merge(m, src)
}
func (m *BetSlipReport) XXX_Size() int {
	return m.Size()
}
func (m *BetSlipReport) XXX_DiscardUnknown() {
	xxx_messageInfo_BetSlipReport.DiscardUnknown(m)
}

var xxx_messageInfo_BetSlipReport proto.InternalMessageInfo

func (m *BetSlipReport) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BetSlipReport) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *BetSlipReport) GetGameInfo() *GuessBetGameInfo {
	if m != nil {
		return m.GameInfo
	}
	return nil
}

func (m *BetSlipReport) GetAppLabelID() int64 {
	if m != nil && m.AppLabelID != nil {
		return *m.AppLabelID
	}
	return 0
}

func (m *BetSlipReport) GetAppLabelName() string {
	if m != nil && m.AppLabelName != nil {
		return *m.AppLabelName
	}
	return ""
}

func (m *BetSlipReport) GetPlayers() int64 {
	if m != nil && m.Players != nil {
		return *m.Players
	}
	return 0
}

func (m *BetSlipReport) GetBetSlips() int64 {
	if m != nil && m.BetSlips != nil {
		return *m.BetSlips
	}
	return 0
}

func (m *BetSlipReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *BetSlipReport) GetBetAmount() int64 {
	if m != nil && m.BetAmount != nil {
		return *m.BetAmount
	}
	return 0
}

func (m *BetSlipReport) GetSuccessAmount() int64 {
	if m != nil && m.SuccessAmount != nil {
		return *m.SuccessAmount
	}
	return 0
}

func (m *BetSlipReport) GetFailAmount() int64 {
	if m != nil && m.FailAmount != nil {
		return *m.FailAmount
	}
	return 0
}

func (m *BetSlipReport) GetDisableAmount() int64 {
	if m != nil && m.DisableAmount != nil {
		return *m.DisableAmount
	}
	return 0
}

func (m *BetSlipReport) GetIllegalAmount() int64 {
	if m != nil && m.IllegalAmount != nil {
		return *m.IllegalAmount
	}
	return 0
}

func (m *BetSlipReport) GetSumAmount() int64 {
	if m != nil && m.SumAmount != nil {
		return *m.SumAmount
	}
	return 0
}

//消息中心的竞猜数据
type TableESPortsGameOrderSysMsg struct {
	//投注表订单号
	OrderId *int64 `protobuf:"varint,1,req,name=OrderId" json:"_id,omitempty" bson:"_id,omitempty"`
	//比赛列表中唯一的id(app_label_id,game_id,api_origin的组合)
	UniqueGameId *int64 `protobuf:"varint,2,opt,name=UniqueGameId" json:"UniqueGameId,omitempty" bson:"UniqueGameId,omitempty"`
	//投注表中的创建时间即投注时间
	BetTime *int64 `protobuf:"varint,3,opt,name=BetTime" json:"BetTime,omitempty" bson:"BetTime,omitempty"`
	//实时赔率
	Odds *string `protobuf:"bytes,4,opt,name=Odds" json:"Odds,omitempty" bson:"Odds,omitempty"`
	//投注结果 1待结算、2成功、3失败、4无效、5违规
	BetResult *string `protobuf:"bytes,6,opt,name=BetResult" json:"BetResult,omitempty" bson:"BetResult,omitempty"`
	//竞猜内容(竞猜目标)
	BetTitle *string `protobuf:"bytes,7,opt,name=BetTitle" json:"BetTitle,omitempty" bson:"BetTitle,omitempty"`
	//竞猜项 id(在同一个来源同一个比赛中可以确定唯一的投注项)
	BetNum *string `protobuf:"bytes,8,opt,name=BetNum" json:"BetNum,omitempty" bson:"BetNum,omitempty"`
	//竞猜项名称(存储计算过的页面上传过来)
	BetName *string `protobuf:"bytes,9,opt,name=BetName" json:"BetName,omitempty" bson:"BetName,omitempty"`
	//游戏名称
	GameName *string `protobuf:"bytes,10,opt,name=GameName" json:"GameName,omitempty" bson:"GameName,omitempty"`
	//创建时间(投注时间精确到秒)
	CreateTime *int64 `protobuf:"varint,11,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	//更新时间
	UpdateTime *int64 `protobuf:"varint,12,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	//用户失败金额
	ResultAmount *int64 `protobuf:"varint,13,opt,name=ResultAmount" json:"ResultAmount,omitempty" bson:"ResultAmount,omitempty"`
	//玩家ID
	PlayerId *int64 `protobuf:"varint,14,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	//用户投注金额
	BetAmount            *int64   `protobuf:"varint,15,opt,name=BetAmount" json:"BetAmount,omitempty" bson:"BetAmount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TableESPortsGameOrderSysMsg) Reset()         { *m = TableESPortsGameOrderSysMsg{} }
func (m *TableESPortsGameOrderSysMsg) String() string { return proto.CompactTextString(m) }
func (*TableESPortsGameOrderSysMsg) ProtoMessage()    {}
func (*TableESPortsGameOrderSysMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{16}
}
func (m *TableESPortsGameOrderSysMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableESPortsGameOrderSysMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableESPortsGameOrderSysMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableESPortsGameOrderSysMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableESPortsGameOrderSysMsg.Merge(m, src)
}
func (m *TableESPortsGameOrderSysMsg) XXX_Size() int {
	return m.Size()
}
func (m *TableESPortsGameOrderSysMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TableESPortsGameOrderSysMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TableESPortsGameOrderSysMsg proto.InternalMessageInfo

func (m *TableESPortsGameOrderSysMsg) GetOrderId() int64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *TableESPortsGameOrderSysMsg) GetUniqueGameId() int64 {
	if m != nil && m.UniqueGameId != nil {
		return *m.UniqueGameId
	}
	return 0
}

func (m *TableESPortsGameOrderSysMsg) GetBetTime() int64 {
	if m != nil && m.BetTime != nil {
		return *m.BetTime
	}
	return 0
}

func (m *TableESPortsGameOrderSysMsg) GetOdds() string {
	if m != nil && m.Odds != nil {
		return *m.Odds
	}
	return ""
}

func (m *TableESPortsGameOrderSysMsg) GetBetResult() string {
	if m != nil && m.BetResult != nil {
		return *m.BetResult
	}
	return ""
}

func (m *TableESPortsGameOrderSysMsg) GetBetTitle() string {
	if m != nil && m.BetTitle != nil {
		return *m.BetTitle
	}
	return ""
}

func (m *TableESPortsGameOrderSysMsg) GetBetNum() string {
	if m != nil && m.BetNum != nil {
		return *m.BetNum
	}
	return ""
}

func (m *TableESPortsGameOrderSysMsg) GetBetName() string {
	if m != nil && m.BetName != nil {
		return *m.BetName
	}
	return ""
}

func (m *TableESPortsGameOrderSysMsg) GetGameName() string {
	if m != nil && m.GameName != nil {
		return *m.GameName
	}
	return ""
}

func (m *TableESPortsGameOrderSysMsg) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TableESPortsGameOrderSysMsg) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *TableESPortsGameOrderSysMsg) GetResultAmount() int64 {
	if m != nil && m.ResultAmount != nil {
		return *m.ResultAmount
	}
	return 0
}

func (m *TableESPortsGameOrderSysMsg) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *TableESPortsGameOrderSysMsg) GetBetAmount() int64 {
	if m != nil && m.BetAmount != nil {
		return *m.BetAmount
	}
	return 0
}

type TableESPortsLiveRoomMsgLog struct {
	//唯一ID
	Id *int64 `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	//发送者用户ID
	SenderPlayerId *int64 `protobuf:"varint,2,opt,name=SenderPlayerId" json:"SenderPlayerId,omitempty" bson:"SenderPlayerId,omitempty"`
	//发送者名称
	NickName *string `protobuf:"bytes,3,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	//正文
	Content *string `protobuf:"bytes,4,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	//发送者头像
	HeadIcon *string `protobuf:"bytes,5,opt,name=HeadIcon" json:"HeadIcon,omitempty" bson:"HeadIcon,omitempty"`
	//放映厅直播Id
	LiveId *int64 `protobuf:"varint,6,opt,name=LiveId" json:"LiveId,omitempty" bson:"LiveId,omitempty"`
	//数据类型 1 发言 2进入直播间
	DataType *int32 `protobuf:"varint,7,opt,name=DataType" json:"DataType,omitempty" bson:"DataType,omitempty"`
	//发送时间
	CreateTime           *int64   `protobuf:"varint,8,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TableESPortsLiveRoomMsgLog) Reset()         { *m = TableESPortsLiveRoomMsgLog{} }
func (m *TableESPortsLiveRoomMsgLog) String() string { return proto.CompactTextString(m) }
func (*TableESPortsLiveRoomMsgLog) ProtoMessage()    {}
func (*TableESPortsLiveRoomMsgLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{17}
}
func (m *TableESPortsLiveRoomMsgLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableESPortsLiveRoomMsgLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableESPortsLiveRoomMsgLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableESPortsLiveRoomMsgLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableESPortsLiveRoomMsgLog.Merge(m, src)
}
func (m *TableESPortsLiveRoomMsgLog) XXX_Size() int {
	return m.Size()
}
func (m *TableESPortsLiveRoomMsgLog) XXX_DiscardUnknown() {
	xxx_messageInfo_TableESPortsLiveRoomMsgLog.DiscardUnknown(m)
}

var xxx_messageInfo_TableESPortsLiveRoomMsgLog proto.InternalMessageInfo

func (m *TableESPortsLiveRoomMsgLog) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TableESPortsLiveRoomMsgLog) GetSenderPlayerId() int64 {
	if m != nil && m.SenderPlayerId != nil {
		return *m.SenderPlayerId
	}
	return 0
}

func (m *TableESPortsLiveRoomMsgLog) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *TableESPortsLiveRoomMsgLog) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *TableESPortsLiveRoomMsgLog) GetHeadIcon() string {
	if m != nil && m.HeadIcon != nil {
		return *m.HeadIcon
	}
	return ""
}

func (m *TableESPortsLiveRoomMsgLog) GetLiveId() int64 {
	if m != nil && m.LiveId != nil {
		return *m.LiveId
	}
	return 0
}

func (m *TableESPortsLiveRoomMsgLog) GetDataType() int32 {
	if m != nil && m.DataType != nil {
		return *m.DataType
	}
	return 0
}

func (m *TableESPortsLiveRoomMsgLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

//风控用户当日投注额度记录表
type TableESPortsBetRiskOneDay struct {
	//用户ID
	PlayerId *int64 `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	//日期YYYYmmDD
	DateStr *string `protobuf:"bytes,2,opt,name=DateStr" json:"DateStr,omitempty" bson:"DateStr,omitempty"`
	//当日投注总额
	AmountDay *int64 `protobuf:"varint,3,opt,name=AmountDay" json:"AmountDay,omitempty" bson:"AmountDay,omitempty"`
	//创建时间
	CreateTime *int64 `protobuf:"varint,4,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	//更新时间
	UpdateTime           *int64   `protobuf:"varint,5,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TableESPortsBetRiskOneDay) Reset()         { *m = TableESPortsBetRiskOneDay{} }
func (m *TableESPortsBetRiskOneDay) String() string { return proto.CompactTextString(m) }
func (*TableESPortsBetRiskOneDay) ProtoMessage()    {}
func (*TableESPortsBetRiskOneDay) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{18}
}
func (m *TableESPortsBetRiskOneDay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableESPortsBetRiskOneDay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableESPortsBetRiskOneDay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableESPortsBetRiskOneDay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableESPortsBetRiskOneDay.Merge(m, src)
}
func (m *TableESPortsBetRiskOneDay) XXX_Size() int {
	return m.Size()
}
func (m *TableESPortsBetRiskOneDay) XXX_DiscardUnknown() {
	xxx_messageInfo_TableESPortsBetRiskOneDay.DiscardUnknown(m)
}

var xxx_messageInfo_TableESPortsBetRiskOneDay proto.InternalMessageInfo

func (m *TableESPortsBetRiskOneDay) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *TableESPortsBetRiskOneDay) GetDateStr() string {
	if m != nil && m.DateStr != nil {
		return *m.DateStr
	}
	return ""
}

func (m *TableESPortsBetRiskOneDay) GetAmountDay() int64 {
	if m != nil && m.AmountDay != nil {
		return *m.AmountDay
	}
	return 0
}

func (m *TableESPortsBetRiskOneDay) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TableESPortsBetRiskOneDay) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

//风控平台当日投注额度记录表
type TableESPortsBetRiskPlatFormDaySum struct {
	//日期YYYYmmDD
	DateStr *string `protobuf:"bytes,1,opt,name=DateStr" json:"DateStr,omitempty" bson:"DateStr,omitempty"`
	//平台当日投注总额
	AmountDaySum *int64 `protobuf:"varint,2,opt,name=AmountDaySum" json:"AmountDaySum,omitempty" bson:"AmountDaySum,omitempty"`
	//创建时间
	CreateTime *int64 `protobuf:"varint,3,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	//更新时间
	UpdateTime           *int64   `protobuf:"varint,4,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TableESPortsBetRiskPlatFormDaySum) Reset()         { *m = TableESPortsBetRiskPlatFormDaySum{} }
func (m *TableESPortsBetRiskPlatFormDaySum) String() string { return proto.CompactTextString(m) }
func (*TableESPortsBetRiskPlatFormDaySum) ProtoMessage()    {}
func (*TableESPortsBetRiskPlatFormDaySum) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{19}
}
func (m *TableESPortsBetRiskPlatFormDaySum) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableESPortsBetRiskPlatFormDaySum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableESPortsBetRiskPlatFormDaySum.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableESPortsBetRiskPlatFormDaySum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableESPortsBetRiskPlatFormDaySum.Merge(m, src)
}
func (m *TableESPortsBetRiskPlatFormDaySum) XXX_Size() int {
	return m.Size()
}
func (m *TableESPortsBetRiskPlatFormDaySum) XXX_DiscardUnknown() {
	xxx_messageInfo_TableESPortsBetRiskPlatFormDaySum.DiscardUnknown(m)
}

var xxx_messageInfo_TableESPortsBetRiskPlatFormDaySum proto.InternalMessageInfo

func (m *TableESPortsBetRiskPlatFormDaySum) GetDateStr() string {
	if m != nil && m.DateStr != nil {
		return *m.DateStr
	}
	return ""
}

func (m *TableESPortsBetRiskPlatFormDaySum) GetAmountDaySum() int64 {
	if m != nil && m.AmountDaySum != nil {
		return *m.AmountDaySum
	}
	return 0
}

func (m *TableESPortsBetRiskPlatFormDaySum) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TableESPortsBetRiskPlatFormDaySum) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

//电竞币兑换配置
type TableESportsExchangeCfg struct {
	Id                   *int64          `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Coin                 *int64          `protobuf:"varint,2,opt,name=Coin" json:"Coin,omitempty" bson:"Coin,omitempty"`
	DailyGive            *int64          `protobuf:"varint,3,opt,name=DailyGive" json:"DailyGive,omitempty" bson:"DailyGive,omitempty"`
	FirstGive            *int64          `protobuf:"varint,4,opt,name=FirstGive" json:"FirstGive,omitempty" bson:"FirstGive,omitempty"`
	Rate                 []*ExchangeRate `protobuf:"bytes,5,rep,name=Rate" json:"Rate,omitempty" bson:"Rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-" bson:"-"`
	XXX_unrecognized     []byte          `json:"-" bson:"-"`
	XXX_sizecache        int32           `json:"-" bson:"-"`
}

func (m *TableESportsExchangeCfg) Reset()         { *m = TableESportsExchangeCfg{} }
func (m *TableESportsExchangeCfg) String() string { return proto.CompactTextString(m) }
func (*TableESportsExchangeCfg) ProtoMessage()    {}
func (*TableESportsExchangeCfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{20}
}
func (m *TableESportsExchangeCfg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableESportsExchangeCfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableESportsExchangeCfg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableESportsExchangeCfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableESportsExchangeCfg.Merge(m, src)
}
func (m *TableESportsExchangeCfg) XXX_Size() int {
	return m.Size()
}
func (m *TableESportsExchangeCfg) XXX_DiscardUnknown() {
	xxx_messageInfo_TableESportsExchangeCfg.DiscardUnknown(m)
}

var xxx_messageInfo_TableESportsExchangeCfg proto.InternalMessageInfo

func (m *TableESportsExchangeCfg) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TableESportsExchangeCfg) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *TableESportsExchangeCfg) GetDailyGive() int64 {
	if m != nil && m.DailyGive != nil {
		return *m.DailyGive
	}
	return 0
}

func (m *TableESportsExchangeCfg) GetFirstGive() int64 {
	if m != nil && m.FirstGive != nil {
		return *m.FirstGive
	}
	return 0
}

func (m *TableESportsExchangeCfg) GetRate() []*ExchangeRate {
	if m != nil {
		return m.Rate
	}
	return nil
}

type ExchangeRate struct {
	//左边赠送的额度百分比
	Ratio *int32 `protobuf:"varint,1,opt,name=Ratio" json:"Ratio,omitempty" bson:"Ratio,omitempty"`
	//赠送的概率
	Odds                 *int32   `protobuf:"varint,2,opt,name=odds" json:"odds,omitempty" bson:"odds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ExchangeRate) Reset()         { *m = ExchangeRate{} }
func (m *ExchangeRate) String() string { return proto.CompactTextString(m) }
func (*ExchangeRate) ProtoMessage()    {}
func (*ExchangeRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{21}
}
func (m *ExchangeRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExchangeRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExchangeRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExchangeRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeRate.Merge(m, src)
}
func (m *ExchangeRate) XXX_Size() int {
	return m.Size()
}
func (m *ExchangeRate) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeRate.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeRate proto.InternalMessageInfo

func (m *ExchangeRate) GetRatio() int32 {
	if m != nil && m.Ratio != nil {
		return *m.Ratio
	}
	return 0
}

func (m *ExchangeRate) GetOdds() int32 {
	if m != nil && m.Odds != nil {
		return *m.Odds
	}
	return 0
}

//充值活动赠送白名单
type TableESportsGiveWhiteList struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"_id,omitempty" bson:"_id,omitempty"`
	NickName             *string  `protobuf:"bytes,2,opt,name=NickName" json:"-" bson:"-"`
	Account              *string  `protobuf:"bytes,3,opt,name=Account" json:"-" bson:"-"`
	Note                 *string  `protobuf:"bytes,4,opt,name=Note" json:"Note,omitempty" bson:"Note,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TableESportsGiveWhiteList) Reset()         { *m = TableESportsGiveWhiteList{} }
func (m *TableESportsGiveWhiteList) String() string { return proto.CompactTextString(m) }
func (*TableESportsGiveWhiteList) ProtoMessage()    {}
func (*TableESportsGiveWhiteList) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{22}
}
func (m *TableESportsGiveWhiteList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableESportsGiveWhiteList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableESportsGiveWhiteList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableESportsGiveWhiteList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableESportsGiveWhiteList.Merge(m, src)
}
func (m *TableESportsGiveWhiteList) XXX_Size() int {
	return m.Size()
}
func (m *TableESportsGiveWhiteList) XXX_DiscardUnknown() {
	xxx_messageInfo_TableESportsGiveWhiteList.DiscardUnknown(m)
}

var xxx_messageInfo_TableESportsGiveWhiteList proto.InternalMessageInfo

func (m *TableESportsGiveWhiteList) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *TableESportsGiveWhiteList) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *TableESportsGiveWhiteList) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *TableESportsGiveWhiteList) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

//电话竞币兑换首冲记录表
type TableESPortsExChangeFirst struct {
	//用户ID
	PlayerId *int64 `protobuf:"varint,1,opt,name=PlayerId" json:"_id,omitempty" bson:"_id,omitempty"`
	//创建时间
	CreateTime *int64 `protobuf:"varint,2,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	//更新时间
	UpdateTime           *int64   `protobuf:"varint,3,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TableESPortsExChangeFirst) Reset()         { *m = TableESPortsExChangeFirst{} }
func (m *TableESPortsExChangeFirst) String() string { return proto.CompactTextString(m) }
func (*TableESPortsExChangeFirst) ProtoMessage()    {}
func (*TableESPortsExChangeFirst) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{23}
}
func (m *TableESPortsExChangeFirst) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableESPortsExChangeFirst) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableESPortsExChangeFirst.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableESPortsExChangeFirst) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableESPortsExChangeFirst.Merge(m, src)
}
func (m *TableESPortsExChangeFirst) XXX_Size() int {
	return m.Size()
}
func (m *TableESPortsExChangeFirst) XXX_DiscardUnknown() {
	xxx_messageInfo_TableESPortsExChangeFirst.DiscardUnknown(m)
}

var xxx_messageInfo_TableESPortsExChangeFirst proto.InternalMessageInfo

func (m *TableESPortsExChangeFirst) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *TableESPortsExChangeFirst) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TableESPortsExChangeFirst) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

//=======================近6场关于比赛的历史数据↓定义开始===============================
type RecentData struct {
	//scoregg的比赛id
	Id *int64 `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	//队伍表现
	TournamentBiaoxian *TournamentBiaoxian `protobuf:"bytes,3,opt,name=tournament_biaoxian" json:"tournament_biaoxian,omitempty" bson:"tournament_biaoxian,omitempty"`
	//指数相关
	StrengthIndex *StrengthIndex `protobuf:"bytes,4,opt,name=strength_index" json:"strength_index,omitempty" bson:"strength_index,omitempty"`
	//对位比赛数据
	MatchData []*MatchData `protobuf:"bytes,5,rep,name=match_data" json:"match_data,omitempty" bson:"match_data,omitempty"`
	//比赛记录
	MatchRecord *MatchRecord `protobuf:"bytes,6,opt,name=match_record" json:"match_record,omitempty" bson:"match_record,omitempty"`
	//a比赛记录
	MatchRecordA *MatchRecord `protobuf:"bytes,7,opt,name=match_record_a" json:"match_record_a,omitempty" bson:"match_record_a,omitempty"`
	//b比赛记录
	MatchRecordB         *MatchRecord `protobuf:"bytes,8,opt,name=match_record_b" json:"match_record_b,omitempty" bson:"match_record_b,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" bson:"-"`
	XXX_unrecognized     []byte       `json:"-" bson:"-"`
	XXX_sizecache        int32        `json:"-" bson:"-"`
}

func (m *RecentData) Reset()         { *m = RecentData{} }
func (m *RecentData) String() string { return proto.CompactTextString(m) }
func (*RecentData) ProtoMessage()    {}
func (*RecentData) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{24}
}
func (m *RecentData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecentData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecentData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecentData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecentData.Merge(m, src)
}
func (m *RecentData) XXX_Size() int {
	return m.Size()
}
func (m *RecentData) XXX_DiscardUnknown() {
	xxx_messageInfo_RecentData.DiscardUnknown(m)
}

var xxx_messageInfo_RecentData proto.InternalMessageInfo

func (m *RecentData) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RecentData) GetTournamentBiaoxian() *TournamentBiaoxian {
	if m != nil {
		return m.TournamentBiaoxian
	}
	return nil
}

func (m *RecentData) GetStrengthIndex() *StrengthIndex {
	if m != nil {
		return m.StrengthIndex
	}
	return nil
}

func (m *RecentData) GetMatchData() []*MatchData {
	if m != nil {
		return m.MatchData
	}
	return nil
}

func (m *RecentData) GetMatchRecord() *MatchRecord {
	if m != nil {
		return m.MatchRecord
	}
	return nil
}

func (m *RecentData) GetMatchRecordA() *MatchRecord {
	if m != nil {
		return m.MatchRecordA
	}
	return nil
}

func (m *RecentData) GetMatchRecordB() *MatchRecord {
	if m != nil {
		return m.MatchRecordB
	}
	return nil
}

//两支队伍表现
type TournamentBiaoxian struct {
	//A队伍表现
	TeamA *TeamBX `protobuf:"bytes,1,opt,name=team_a" json:"team_a,omitempty" bson:"team_a,omitempty"`
	//B队伍表现
	TeamB                *TeamBX  `protobuf:"bytes,2,opt,name=team_b" json:"team_b,omitempty" bson:"team_b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TournamentBiaoxian) Reset()         { *m = TournamentBiaoxian{} }
func (m *TournamentBiaoxian) String() string { return proto.CompactTextString(m) }
func (*TournamentBiaoxian) ProtoMessage()    {}
func (*TournamentBiaoxian) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{25}
}
func (m *TournamentBiaoxian) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TournamentBiaoxian) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TournamentBiaoxian.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TournamentBiaoxian) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TournamentBiaoxian.Merge(m, src)
}
func (m *TournamentBiaoxian) XXX_Size() int {
	return m.Size()
}
func (m *TournamentBiaoxian) XXX_DiscardUnknown() {
	xxx_messageInfo_TournamentBiaoxian.DiscardUnknown(m)
}

var xxx_messageInfo_TournamentBiaoxian proto.InternalMessageInfo

func (m *TournamentBiaoxian) GetTeamA() *TeamBX {
	if m != nil {
		return m.TeamA
	}
	return nil
}

func (m *TournamentBiaoxian) GetTeamB() *TeamBX {
	if m != nil {
		return m.TeamB
	}
	return nil
}

//=队伍表现
type TeamBX struct {
	//队伍ID
	TeamID *string `protobuf:"bytes,1,opt,name=teamID" json:"teamID,omitempty" bson:"teamID,omitempty"`
	//KDA
	KDA *string `protobuf:"bytes,2,opt,name=KDA" json:"KDA,omitempty" bson:"KDA,omitempty"`
	//场均击杀
	AVERAGE_KILLS *string `protobuf:"bytes,3,opt,name=AVERAGE_KILLS" json:"AVERAGE_KILLS,omitempty" bson:"AVERAGE_KILLS,omitempty"`
	//场均支援
	AVERAGE_ASSISTS *string `protobuf:"bytes,4,opt,name=AVERAGE_ASSISTS" json:"AVERAGE_ASSISTS,omitempty" bson:"AVERAGE_ASSISTS,omitempty"`
	//场均死亡
	AVERAGE_DEATHS *string `protobuf:"bytes,5,opt,name=AVERAGE_DEATHS" json:"AVERAGE_DEATHS,omitempty" bson:"AVERAGE_DEATHS,omitempty"`
	//分均补刀
	MINUTE_HITS *string `protobuf:"bytes,6,opt,name=MINUTE_HITS" json:"MINUTE_HITS,omitempty" bson:"MINUTE_HITS,omitempty"`
	//分均经济
	MINUTE_ECONOMIC *string `protobuf:"bytes,7,opt,name=MINUTE_ECONOMIC" json:"MINUTE_ECONOMIC,omitempty" bson:"MINUTE_ECONOMIC,omitempty"`
	//分均输出
	MINUTE_DAMAGEDEALT *string `protobuf:"bytes,8,opt,name=MINUTE_DAMAGEDEALT" json:"MINUTE_DAMAGEDEALT,omitempty" bson:"MINUTE_DAMAGEDEALT,omitempty"`
	//小龙控制率
	SMALLDRAGON_RATE *float64 `protobuf:"fixed64,9,opt,name=SMALLDRAGON_RATE" json:"SMALLDRAGON_RATE,omitempty" bson:"SMALLDRAGON_RATE,omitempty"`
	//大龙控制率
	BIGDRAGON_RATE *float64 `protobuf:"fixed64,10,opt,name=BIGDRAGON_RATE" json:"BIGDRAGON_RATE,omitempty" bson:"BIGDRAGON_RATE,omitempty"`
	//胜率
	VICTORY_RATE *float64 `protobuf:"fixed64,11,opt,name=VICTORY_RATE" json:"VICTORY_RATE,omitempty" bson:"VICTORY_RATE,omitempty"`
	//胜利场数
	VICTORY_COUNT *int32 `protobuf:"varint,12,opt,name=VICTORY_COUNT" json:"VICTORY_COUNT,omitempty" bson:"VICTORY_COUNT,omitempty"`
	//失败场数
	FAIl_COUNT *int32 `protobuf:"varint,13,opt,name=FAIl_COUNT" json:"FAIl_COUNT,omitempty" bson:"FAIl_COUNT,omitempty"`
	//持续胜场
	ContinuityCount      *int32   `protobuf:"varint,14,opt,name=continuity_count" json:"continuity_count,omitempty" bson:"continuity_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TeamBX) Reset()         { *m = TeamBX{} }
func (m *TeamBX) String() string { return proto.CompactTextString(m) }
func (*TeamBX) ProtoMessage()    {}
func (*TeamBX) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{26}
}
func (m *TeamBX) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamBX) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamBX.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamBX) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamBX.Merge(m, src)
}
func (m *TeamBX) XXX_Size() int {
	return m.Size()
}
func (m *TeamBX) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamBX.DiscardUnknown(m)
}

var xxx_messageInfo_TeamBX proto.InternalMessageInfo

func (m *TeamBX) GetTeamID() string {
	if m != nil && m.TeamID != nil {
		return *m.TeamID
	}
	return ""
}

func (m *TeamBX) GetKDA() string {
	if m != nil && m.KDA != nil {
		return *m.KDA
	}
	return ""
}

func (m *TeamBX) GetAVERAGE_KILLS() string {
	if m != nil && m.AVERAGE_KILLS != nil {
		return *m.AVERAGE_KILLS
	}
	return ""
}

func (m *TeamBX) GetAVERAGE_ASSISTS() string {
	if m != nil && m.AVERAGE_ASSISTS != nil {
		return *m.AVERAGE_ASSISTS
	}
	return ""
}

func (m *TeamBX) GetAVERAGE_DEATHS() string {
	if m != nil && m.AVERAGE_DEATHS != nil {
		return *m.AVERAGE_DEATHS
	}
	return ""
}

func (m *TeamBX) GetMINUTE_HITS() string {
	if m != nil && m.MINUTE_HITS != nil {
		return *m.MINUTE_HITS
	}
	return ""
}

func (m *TeamBX) GetMINUTE_ECONOMIC() string {
	if m != nil && m.MINUTE_ECONOMIC != nil {
		return *m.MINUTE_ECONOMIC
	}
	return ""
}

func (m *TeamBX) GetMINUTE_DAMAGEDEALT() string {
	if m != nil && m.MINUTE_DAMAGEDEALT != nil {
		return *m.MINUTE_DAMAGEDEALT
	}
	return ""
}

func (m *TeamBX) GetSMALLDRAGON_RATE() float64 {
	if m != nil && m.SMALLDRAGON_RATE != nil {
		return *m.SMALLDRAGON_RATE
	}
	return 0
}

func (m *TeamBX) GetBIGDRAGON_RATE() float64 {
	if m != nil && m.BIGDRAGON_RATE != nil {
		return *m.BIGDRAGON_RATE
	}
	return 0
}

func (m *TeamBX) GetVICTORY_RATE() float64 {
	if m != nil && m.VICTORY_RATE != nil {
		return *m.VICTORY_RATE
	}
	return 0
}

func (m *TeamBX) GetVICTORY_COUNT() int32 {
	if m != nil && m.VICTORY_COUNT != nil {
		return *m.VICTORY_COUNT
	}
	return 0
}

func (m *TeamBX) GetFAIl_COUNT() int32 {
	if m != nil && m.FAIl_COUNT != nil {
		return *m.FAIl_COUNT
	}
	return 0
}

func (m *TeamBX) GetContinuityCount() int32 {
	if m != nil && m.ContinuityCount != nil {
		return *m.ContinuityCount
	}
	return 0
}

//指数
type StrengthIndex struct {
	//胜场交手（近6场）
	HandWinTeamA *string `protobuf:"bytes,1,opt,name=hand_win_team_a" json:"hand_win_team_a,omitempty" bson:"hand_win_team_a,omitempty"`
	HandWinTeamB *string `protobuf:"bytes,2,opt,name=hand_win_team_b" json:"hand_win_team_b,omitempty" bson:"hand_win_team_b,omitempty"`
	//输场交手（近6场）
	HandLoseTeamA *string `protobuf:"bytes,3,opt,name=hand_lose_team_a" json:"hand_lose_team_a,omitempty" bson:"hand_lose_team_a,omitempty"`
	HandLoseTeamB *string `protobuf:"bytes,4,opt,name=hand_lose_team_b" json:"hand_lose_team_b,omitempty" bson:"hand_lose_team_b,omitempty"`
	//胜场战绩（近6场）
	RecordWinTeamA *string `protobuf:"bytes,5,opt,name=record_win_team_a" json:"record_win_team_a,omitempty" bson:"record_win_team_a,omitempty"`
	RecordWinTeamB *string `protobuf:"bytes,6,opt,name=record_win_team_b" json:"record_win_team_b,omitempty" bson:"record_win_team_b,omitempty"`
	//输场战绩（近6场）
	RecordLoseTeamA *string `protobuf:"bytes,7,opt,name=record_lose_team_a" json:"record_lose_team_a,omitempty" bson:"record_lose_team_a,omitempty"`
	RecordLoseTeamB *string `protobuf:"bytes,8,opt,name=record_lose_team_b" json:"record_lose_team_b,omitempty" bson:"record_lose_team_b,omitempty"`
	//场均击杀（近6场）
	AverageKillsTeamA *string `protobuf:"bytes,9,opt,name=average_kills_team_a" json:"average_kills_team_a,omitempty" bson:"average_kills_team_a,omitempty"`
	AverageKillsTeamB *string `protobuf:"bytes,10,opt,name=average_kills_team_b" json:"average_kills_team_b,omitempty" bson:"average_kills_team_b,omitempty"`
	//场均拆塔（近6场）
	AverageTowerTeamA *string `protobuf:"bytes,11,opt,name=average_tower_team_a" json:"average_tower_team_a,omitempty" bson:"average_tower_team_a,omitempty"`
	AverageTowerTeamB *string `protobuf:"bytes,12,opt,name=average_tower_team_b" json:"average_tower_team_b,omitempty" bson:"average_tower_team_b,omitempty"`
	//场均经济（近6场）
	AverageMoneyTeamA *string `protobuf:"bytes,13,opt,name=average_money_team_a" json:"average_money_team_a,omitempty" bson:"average_money_team_a,omitempty"`
	AverageMoneyTeamB *string `protobuf:"bytes,14,opt,name=average_money_team_b" json:"average_money_team_b,omitempty" bson:"average_money_team_b,omitempty"`
	//预测胜率
	ScoreTeamA *string `protobuf:"bytes,15,opt,name=score_team_a" json:"score_team_a,omitempty" bson:"score_team_a,omitempty"`
	ScoreTeamB *string `protobuf:"bytes,16,opt,name=score_team_b" json:"score_team_b,omitempty" bson:"score_team_b,omitempty"`
	//胜率
	VictoryRateA *string `protobuf:"bytes,17,opt,name=victory_rate_a" json:"victory_rate_a,omitempty" bson:"victory_rate_a,omitempty"`
	VictoryRateB *string `protobuf:"bytes,18,opt,name=victory_rate_b" json:"victory_rate_b,omitempty" bson:"victory_rate_b,omitempty"`
	//场均时长（近6场）
	AverageTimeA *string `protobuf:"bytes,19,opt,name=average_time_a" json:"average_time_a,omitempty" bson:"average_time_a,omitempty"`
	AverageTimeB *string `protobuf:"bytes,20,opt,name=average_time_b" json:"average_time_b,omitempty" bson:"average_time_b,omitempty"`
	//场均支援（近6场）
	AverageAssistsTeamA *string `protobuf:"bytes,21,opt,name=average_assists_team_a" json:"average_assists_team_a,omitempty" bson:"average_assists_team_a,omitempty"`
	AverageAssistsTeamB *string `protobuf:"bytes,22,opt,name=average_assists_team_b" json:"average_assists_team_b,omitempty" bson:"average_assists_team_b,omitempty"`
	//场均死亡（近6场）
	AverageDeathsTeamA *string `protobuf:"bytes,23,opt,name=average_deaths_team_a" json:"average_deaths_team_a,omitempty" bson:"average_deaths_team_a,omitempty"`
	AverageDeathsTeamB *string `protobuf:"bytes,24,opt,name=average_deaths_team_b" json:"average_deaths_team_b,omitempty" bson:"average_deaths_team_b,omitempty"`
	//KDA数据（近6场）
	AverageKdaTeamA *string `protobuf:"bytes,25,opt,name=average_kda_team_a" json:"average_kda_team_a,omitempty" bson:"average_kda_team_a,omitempty"`
	AverageKdaTeamB *string `protobuf:"bytes,26,opt,name=average_kda_team_b" json:"average_kda_team_b,omitempty" bson:"average_kda_team_b,omitempty"`
	//一血率
	FirstBloodKillTeamA *string `protobuf:"bytes,27,opt,name=firstBloodKill_team_a" json:"firstBloodKill_team_a,omitempty" bson:"firstBloodKill_team_a,omitempty"`
	FirstBloodKillTeamB *string `protobuf:"bytes,28,opt,name=firstBloodKill_team_b" json:"firstBloodKill_team_b,omitempty" bson:"firstBloodKill_team_b,omitempty"`
	//分均伤害
	MinuteDamageTeamA *string `protobuf:"bytes,29,opt,name=minute_damage_team_a" json:"minute_damage_team_a,omitempty" bson:"minute_damage_team_a,omitempty"`
	MinuteDamageTeamB *string `protobuf:"bytes,30,opt,name=minute_damage_team_b" json:"minute_damage_team_b,omitempty" bson:"minute_damage_team_b,omitempty"`
	//一塔率
	FirstTowerKillTeamA *string `protobuf:"bytes,31,opt,name=firstTowerKill_team_a" json:"firstTowerKill_team_a,omitempty" bson:"firstTowerKill_team_a,omitempty"`
	FirstTowerKillTeamB *string `protobuf:"bytes,32,opt,name=firstTowerKill_team_b" json:"firstTowerKill_team_b,omitempty" bson:"firstTowerKill_team_b,omitempty"`
	//场均经济差
	AverageMoneyDiffTeamA *string `protobuf:"bytes,33,opt,name=average_money_diff_team_a" json:"average_money_diff_team_a,omitempty" bson:"average_money_diff_team_a,omitempty"`
	AverageMoneyDiffTeamB *string `protobuf:"bytes,34,opt,name=average_money_diff_team_b" json:"average_money_diff_team_b,omitempty" bson:"average_money_diff_team_b,omitempty"`
	//分均经济
	MinuteMoneyTeamA *string `protobuf:"bytes,35,opt,name=minute_money_team_a" json:"minute_money_team_a,omitempty" bson:"minute_money_team_a,omitempty"`
	MinuteMoneyTeamB *string `protobuf:"bytes,36,opt,name=minute_money_team_b" json:"minute_money_team_b,omitempty" bson:"minute_money_team_b,omitempty"`
	//分均补刀
	MinuteHitsTeamA *string `protobuf:"bytes,37,opt,name=minute_hits_team_a" json:"minute_hits_team_a,omitempty" bson:"minute_hits_team_a,omitempty"`
	MinuteHitsTeamB *string `protobuf:"bytes,38,opt,name=minute_hits_team_b" json:"minute_hits_team_b,omitempty" bson:"minute_hits_team_b,omitempty"`
	//场均小龙
	AverageDragonTeamA *string `protobuf:"bytes,39,opt,name=average_dragon_team_a" json:"average_dragon_team_a,omitempty" bson:"average_dragon_team_a,omitempty"`
	AverageDragonTeamB *string `protobuf:"bytes,40,opt,name=average_dragon_team_b" json:"average_dragon_team_b,omitempty" bson:"average_dragon_team_b,omitempty"`
	//场均大龙
	AverageBaronTeamA *string `protobuf:"bytes,41,opt,name=average_baron_team_a" json:"average_baron_team_a,omitempty" bson:"average_baron_team_a,omitempty"`
	AverageBaronTeamB *string `protobuf:"bytes,42,opt,name=average_baron_team_b" json:"average_baron_team_b,omitempty" bson:"average_baron_team_b,omitempty"`
	//小龙控制率
	RateDragonTeamA *string `protobuf:"bytes,43,opt,name=rate_dragon_team_a" json:"rate_dragon_team_a,omitempty" bson:"rate_dragon_team_a,omitempty"`
	RateDragonTeamB *string `protobuf:"bytes,44,opt,name=rate_dragon_team_b" json:"rate_dragon_team_b,omitempty" bson:"rate_dragon_team_b,omitempty"`
	//大龙控制率
	RateBaronTeamA *string `protobuf:"bytes,45,opt,name=rate_baron_team_a" json:"rate_baron_team_a,omitempty" bson:"rate_baron_team_a,omitempty"`
	RateBaronTeamB *string `protobuf:"bytes,46,opt,name=rate_baron_team_b" json:"rate_baron_team_b,omitempty" bson:"rate_baron_team_b,omitempty"`
	//分均插眼
	MinuteWardsPlacedTeamA *string `protobuf:"bytes,47,opt,name=minute_wardsPlaced_team_a" json:"minute_wardsPlaced_team_a,omitempty" bson:"minute_wardsPlaced_team_a,omitempty"`
	MinuteWardsPlacedTeamB *string `protobuf:"bytes,48,opt,name=minute_wardsPlaced_team_b" json:"minute_wardsPlaced_team_b,omitempty" bson:"minute_wardsPlaced_team_b,omitempty"`
	//分均排眼
	MinuteWardsKilledTeamA *string `protobuf:"bytes,49,opt,name=minute_wardsKilled_team_a" json:"minute_wardsKilled_team_a,omitempty" bson:"minute_wardsKilled_team_a,omitempty"`
	MinuteWardsKilledTeamB *string `protobuf:"bytes,50,opt,name=minute_wardsKilled_team_b" json:"minute_wardsKilled_team_b,omitempty" bson:"minute_wardsKilled_team_b,omitempty"`
	//场均被推塔
	AverageBeTurretKillsTeamA *string `protobuf:"bytes,51,opt,name=average_be_turretKills_team_a" json:"average_be_turretKills_team_a,omitempty" bson:"average_be_turretKills_team_a,omitempty"`
	AverageBeTurretKillsTeamB *string `protobuf:"bytes,52,opt,name=average_be_turretKills_team_b" json:"average_be_turretKills_team_b,omitempty" bson:"average_be_turretKills_team_b,omitempty"`
	//满局率
	RateFullBureauTeamA  *string  `protobuf:"bytes,53,opt,name=rate_full_bureau_team_a" json:"rate_full_bureau_team_a,omitempty" bson:"rate_full_bureau_team_a,omitempty"`
	RateFullBureauTeamB  *string  `protobuf:"bytes,54,opt,name=rate_full_bureau_team_b" json:"rate_full_bureau_team_b,omitempty" bson:"rate_full_bureau_team_b,omitempty"`
	TotalDragonTeamA     *string  `protobuf:"bytes,55,opt,name=total_dragon_team_a" json:"total_dragon_team_a,omitempty" bson:"total_dragon_team_a,omitempty"`
	TotalDragonTeamB     *string  `protobuf:"bytes,56,opt,name=total_dragon_team_b" json:"total_dragon_team_b,omitempty" bson:"total_dragon_team_b,omitempty"`
	TotalBaronTeamA      *string  `protobuf:"bytes,57,opt,name=total_baron_team_a" json:"total_baron_team_a,omitempty" bson:"total_baron_team_a,omitempty"`
	TotalBaronTeamB      *string  `protobuf:"bytes,58,opt,name=total_baron_team_b" json:"total_baron_team_b,omitempty" bson:"total_baron_team_b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *StrengthIndex) Reset()         { *m = StrengthIndex{} }
func (m *StrengthIndex) String() string { return proto.CompactTextString(m) }
func (*StrengthIndex) ProtoMessage()    {}
func (*StrengthIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{27}
}
func (m *StrengthIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StrengthIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StrengthIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StrengthIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrengthIndex.Merge(m, src)
}
func (m *StrengthIndex) XXX_Size() int {
	return m.Size()
}
func (m *StrengthIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_StrengthIndex.DiscardUnknown(m)
}

var xxx_messageInfo_StrengthIndex proto.InternalMessageInfo

func (m *StrengthIndex) GetHandWinTeamA() string {
	if m != nil && m.HandWinTeamA != nil {
		return *m.HandWinTeamA
	}
	return ""
}

func (m *StrengthIndex) GetHandWinTeamB() string {
	if m != nil && m.HandWinTeamB != nil {
		return *m.HandWinTeamB
	}
	return ""
}

func (m *StrengthIndex) GetHandLoseTeamA() string {
	if m != nil && m.HandLoseTeamA != nil {
		return *m.HandLoseTeamA
	}
	return ""
}

func (m *StrengthIndex) GetHandLoseTeamB() string {
	if m != nil && m.HandLoseTeamB != nil {
		return *m.HandLoseTeamB
	}
	return ""
}

func (m *StrengthIndex) GetRecordWinTeamA() string {
	if m != nil && m.RecordWinTeamA != nil {
		return *m.RecordWinTeamA
	}
	return ""
}

func (m *StrengthIndex) GetRecordWinTeamB() string {
	if m != nil && m.RecordWinTeamB != nil {
		return *m.RecordWinTeamB
	}
	return ""
}

func (m *StrengthIndex) GetRecordLoseTeamA() string {
	if m != nil && m.RecordLoseTeamA != nil {
		return *m.RecordLoseTeamA
	}
	return ""
}

func (m *StrengthIndex) GetRecordLoseTeamB() string {
	if m != nil && m.RecordLoseTeamB != nil {
		return *m.RecordLoseTeamB
	}
	return ""
}

func (m *StrengthIndex) GetAverageKillsTeamA() string {
	if m != nil && m.AverageKillsTeamA != nil {
		return *m.AverageKillsTeamA
	}
	return ""
}

func (m *StrengthIndex) GetAverageKillsTeamB() string {
	if m != nil && m.AverageKillsTeamB != nil {
		return *m.AverageKillsTeamB
	}
	return ""
}

func (m *StrengthIndex) GetAverageTowerTeamA() string {
	if m != nil && m.AverageTowerTeamA != nil {
		return *m.AverageTowerTeamA
	}
	return ""
}

func (m *StrengthIndex) GetAverageTowerTeamB() string {
	if m != nil && m.AverageTowerTeamB != nil {
		return *m.AverageTowerTeamB
	}
	return ""
}

func (m *StrengthIndex) GetAverageMoneyTeamA() string {
	if m != nil && m.AverageMoneyTeamA != nil {
		return *m.AverageMoneyTeamA
	}
	return ""
}

func (m *StrengthIndex) GetAverageMoneyTeamB() string {
	if m != nil && m.AverageMoneyTeamB != nil {
		return *m.AverageMoneyTeamB
	}
	return ""
}

func (m *StrengthIndex) GetScoreTeamA() string {
	if m != nil && m.ScoreTeamA != nil {
		return *m.ScoreTeamA
	}
	return ""
}

func (m *StrengthIndex) GetScoreTeamB() string {
	if m != nil && m.ScoreTeamB != nil {
		return *m.ScoreTeamB
	}
	return ""
}

func (m *StrengthIndex) GetVictoryRateA() string {
	if m != nil && m.VictoryRateA != nil {
		return *m.VictoryRateA
	}
	return ""
}

func (m *StrengthIndex) GetVictoryRateB() string {
	if m != nil && m.VictoryRateB != nil {
		return *m.VictoryRateB
	}
	return ""
}

func (m *StrengthIndex) GetAverageTimeA() string {
	if m != nil && m.AverageTimeA != nil {
		return *m.AverageTimeA
	}
	return ""
}

func (m *StrengthIndex) GetAverageTimeB() string {
	if m != nil && m.AverageTimeB != nil {
		return *m.AverageTimeB
	}
	return ""
}

func (m *StrengthIndex) GetAverageAssistsTeamA() string {
	if m != nil && m.AverageAssistsTeamA != nil {
		return *m.AverageAssistsTeamA
	}
	return ""
}

func (m *StrengthIndex) GetAverageAssistsTeamB() string {
	if m != nil && m.AverageAssistsTeamB != nil {
		return *m.AverageAssistsTeamB
	}
	return ""
}

func (m *StrengthIndex) GetAverageDeathsTeamA() string {
	if m != nil && m.AverageDeathsTeamA != nil {
		return *m.AverageDeathsTeamA
	}
	return ""
}

func (m *StrengthIndex) GetAverageDeathsTeamB() string {
	if m != nil && m.AverageDeathsTeamB != nil {
		return *m.AverageDeathsTeamB
	}
	return ""
}

func (m *StrengthIndex) GetAverageKdaTeamA() string {
	if m != nil && m.AverageKdaTeamA != nil {
		return *m.AverageKdaTeamA
	}
	return ""
}

func (m *StrengthIndex) GetAverageKdaTeamB() string {
	if m != nil && m.AverageKdaTeamB != nil {
		return *m.AverageKdaTeamB
	}
	return ""
}

func (m *StrengthIndex) GetFirstBloodKillTeamA() string {
	if m != nil && m.FirstBloodKillTeamA != nil {
		return *m.FirstBloodKillTeamA
	}
	return ""
}

func (m *StrengthIndex) GetFirstBloodKillTeamB() string {
	if m != nil && m.FirstBloodKillTeamB != nil {
		return *m.FirstBloodKillTeamB
	}
	return ""
}

func (m *StrengthIndex) GetMinuteDamageTeamA() string {
	if m != nil && m.MinuteDamageTeamA != nil {
		return *m.MinuteDamageTeamA
	}
	return ""
}

func (m *StrengthIndex) GetMinuteDamageTeamB() string {
	if m != nil && m.MinuteDamageTeamB != nil {
		return *m.MinuteDamageTeamB
	}
	return ""
}

func (m *StrengthIndex) GetFirstTowerKillTeamA() string {
	if m != nil && m.FirstTowerKillTeamA != nil {
		return *m.FirstTowerKillTeamA
	}
	return ""
}

func (m *StrengthIndex) GetFirstTowerKillTeamB() string {
	if m != nil && m.FirstTowerKillTeamB != nil {
		return *m.FirstTowerKillTeamB
	}
	return ""
}

func (m *StrengthIndex) GetAverageMoneyDiffTeamA() string {
	if m != nil && m.AverageMoneyDiffTeamA != nil {
		return *m.AverageMoneyDiffTeamA
	}
	return ""
}

func (m *StrengthIndex) GetAverageMoneyDiffTeamB() string {
	if m != nil && m.AverageMoneyDiffTeamB != nil {
		return *m.AverageMoneyDiffTeamB
	}
	return ""
}

func (m *StrengthIndex) GetMinuteMoneyTeamA() string {
	if m != nil && m.MinuteMoneyTeamA != nil {
		return *m.MinuteMoneyTeamA
	}
	return ""
}

func (m *StrengthIndex) GetMinuteMoneyTeamB() string {
	if m != nil && m.MinuteMoneyTeamB != nil {
		return *m.MinuteMoneyTeamB
	}
	return ""
}

func (m *StrengthIndex) GetMinuteHitsTeamA() string {
	if m != nil && m.MinuteHitsTeamA != nil {
		return *m.MinuteHitsTeamA
	}
	return ""
}

func (m *StrengthIndex) GetMinuteHitsTeamB() string {
	if m != nil && m.MinuteHitsTeamB != nil {
		return *m.MinuteHitsTeamB
	}
	return ""
}

func (m *StrengthIndex) GetAverageDragonTeamA() string {
	if m != nil && m.AverageDragonTeamA != nil {
		return *m.AverageDragonTeamA
	}
	return ""
}

func (m *StrengthIndex) GetAverageDragonTeamB() string {
	if m != nil && m.AverageDragonTeamB != nil {
		return *m.AverageDragonTeamB
	}
	return ""
}

func (m *StrengthIndex) GetAverageBaronTeamA() string {
	if m != nil && m.AverageBaronTeamA != nil {
		return *m.AverageBaronTeamA
	}
	return ""
}

func (m *StrengthIndex) GetAverageBaronTeamB() string {
	if m != nil && m.AverageBaronTeamB != nil {
		return *m.AverageBaronTeamB
	}
	return ""
}

func (m *StrengthIndex) GetRateDragonTeamA() string {
	if m != nil && m.RateDragonTeamA != nil {
		return *m.RateDragonTeamA
	}
	return ""
}

func (m *StrengthIndex) GetRateDragonTeamB() string {
	if m != nil && m.RateDragonTeamB != nil {
		return *m.RateDragonTeamB
	}
	return ""
}

func (m *StrengthIndex) GetRateBaronTeamA() string {
	if m != nil && m.RateBaronTeamA != nil {
		return *m.RateBaronTeamA
	}
	return ""
}

func (m *StrengthIndex) GetRateBaronTeamB() string {
	if m != nil && m.RateBaronTeamB != nil {
		return *m.RateBaronTeamB
	}
	return ""
}

func (m *StrengthIndex) GetMinuteWardsPlacedTeamA() string {
	if m != nil && m.MinuteWardsPlacedTeamA != nil {
		return *m.MinuteWardsPlacedTeamA
	}
	return ""
}

func (m *StrengthIndex) GetMinuteWardsPlacedTeamB() string {
	if m != nil && m.MinuteWardsPlacedTeamB != nil {
		return *m.MinuteWardsPlacedTeamB
	}
	return ""
}

func (m *StrengthIndex) GetMinuteWardsKilledTeamA() string {
	if m != nil && m.MinuteWardsKilledTeamA != nil {
		return *m.MinuteWardsKilledTeamA
	}
	return ""
}

func (m *StrengthIndex) GetMinuteWardsKilledTeamB() string {
	if m != nil && m.MinuteWardsKilledTeamB != nil {
		return *m.MinuteWardsKilledTeamB
	}
	return ""
}

func (m *StrengthIndex) GetAverageBeTurretKillsTeamA() string {
	if m != nil && m.AverageBeTurretKillsTeamA != nil {
		return *m.AverageBeTurretKillsTeamA
	}
	return ""
}

func (m *StrengthIndex) GetAverageBeTurretKillsTeamB() string {
	if m != nil && m.AverageBeTurretKillsTeamB != nil {
		return *m.AverageBeTurretKillsTeamB
	}
	return ""
}

func (m *StrengthIndex) GetRateFullBureauTeamA() string {
	if m != nil && m.RateFullBureauTeamA != nil {
		return *m.RateFullBureauTeamA
	}
	return ""
}

func (m *StrengthIndex) GetRateFullBureauTeamB() string {
	if m != nil && m.RateFullBureauTeamB != nil {
		return *m.RateFullBureauTeamB
	}
	return ""
}

func (m *StrengthIndex) GetTotalDragonTeamA() string {
	if m != nil && m.TotalDragonTeamA != nil {
		return *m.TotalDragonTeamA
	}
	return ""
}

func (m *StrengthIndex) GetTotalDragonTeamB() string {
	if m != nil && m.TotalDragonTeamB != nil {
		return *m.TotalDragonTeamB
	}
	return ""
}

func (m *StrengthIndex) GetTotalBaronTeamA() string {
	if m != nil && m.TotalBaronTeamA != nil {
		return *m.TotalBaronTeamA
	}
	return ""
}

func (m *StrengthIndex) GetTotalBaronTeamB() string {
	if m != nil && m.TotalBaronTeamB != nil {
		return *m.TotalBaronTeamB
	}
	return ""
}

//对位比赛数据
type MatchData struct {
	//选手ID
	PlayerID *string `protobuf:"bytes,1,opt,name=playerID" json:"playerID,omitempty" bson:"playerID,omitempty"`
	//选手名字
	Nickname *string `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty" bson:"nickname,omitempty"`
	//位置ID(1:ADC 2:中单 3:上单 4:打野 5:辅助)
	PositionID *string `protobuf:"bytes,3,opt,name=positionID" json:"positionID,omitempty" bson:"positionID,omitempty"`
	//所属队伍ID
	TeamID *string `protobuf:"bytes,4,opt,name=teamID" json:"teamID,omitempty" bson:"teamID,omitempty"`
	//选手头像
	PlayerImageThumb *string `protobuf:"bytes,5,opt,name=player_image_thumb" json:"player_image_thumb,omitempty" bson:"player_image_thumb,omitempty"`
	//位置名称
	PositionName *string `protobuf:"bytes,6,opt,name=position_name" json:"position_name,omitempty" bson:"position_name,omitempty"`
	//国家ID
	CountryId *string `protobuf:"bytes,7,opt,name=country_id" json:"country_id,omitempty" bson:"country_id,omitempty"`
	//国旗
	CountryImage *string `protobuf:"bytes,8,opt,name=country_image" json:"country_image,omitempty" bson:"country_image,omitempty"`
	//队伍名称缩写
	TeamShortName *string `protobuf:"bytes,9,opt,name=team_short_name" json:"team_short_name,omitempty" bson:"team_short_name,omitempty"`
	//队伍图标
	TeamImageThumb *string `protobuf:"bytes,10,opt,name=team_image_thumb" json:"team_image_thumb,omitempty" bson:"team_image_thumb,omitempty"`
	//选手名称
	PlayerChineseName *string `protobuf:"bytes,11,opt,name=player_chinese_name" json:"player_chinese_name,omitempty" bson:"player_chinese_name,omitempty"`
	Total             *string `protobuf:"bytes,12,opt,name=total" json:"total,omitempty" bson:"total,omitempty"`
	//伤害转化率
	DamageDealPercent *string `protobuf:"bytes,13,opt,name=DamageDealPercent" json:"DamageDealPercent,omitempty" bson:"DamageDealPercent,omitempty"`
	//参团率
	TeamPercent *string `protobuf:"bytes,14,opt,name=TeamPercent" json:"TeamPercent,omitempty" bson:"TeamPercent,omitempty"`
	//分均输出
	MINUTE_DAMAGEDEALT *float64 `protobuf:"fixed64,15,opt,name=MINUTE_DAMAGEDEALT" json:"MINUTE_DAMAGEDEALT,omitempty" bson:"MINUTE_DAMAGEDEALT,omitempty"`
	//场均击杀
	AVERAGE_KILLS *string `protobuf:"bytes,16,opt,name=AVERAGE_KILLS" json:"AVERAGE_KILLS,omitempty" bson:"AVERAGE_KILLS,omitempty"`
	//场均支援
	AVERAGE_ASSISTS *string `protobuf:"bytes,17,opt,name=AVERAGE_ASSISTS" json:"AVERAGE_ASSISTS,omitempty" bson:"AVERAGE_ASSISTS,omitempty"`
	//场均死亡
	AVERAGE_DEATHS *string `protobuf:"bytes,18,opt,name=AVERAGE_DEATHS" json:"AVERAGE_DEATHS,omitempty" bson:"AVERAGE_DEATHS,omitempty"`
	//KDA
	KDA *string `protobuf:"bytes,19,opt,name=KDA" json:"KDA,omitempty" bson:"KDA,omitempty"`
	//分均经济
	MINUTE_ECONOMIC *float64 `protobuf:"fixed64,20,opt,name=MINUTE_ECONOMIC" json:"MINUTE_ECONOMIC,omitempty" bson:"MINUTE_ECONOMIC,omitempty"`
	//分均队伍插眼数
	MINUTE_WARDSPLACED *string `protobuf:"bytes,21,opt,name=MINUTE_WARDSPLACED" json:"MINUTE_WARDSPLACED,omitempty" bson:"MINUTE_WARDSPLACED,omitempty"`
	//场均补兵数
	AVERAGE_MinionsKilled *string `protobuf:"bytes,22,opt,name=AVERAGE_MinionsKilled" json:"AVERAGE_MinionsKilled,omitempty" bson:"AVERAGE_MinionsKilled,omitempty"`
	//场均
	AVERAGE_Life *string `protobuf:"bytes,23,opt,name=AVERAGE_Life" json:"AVERAGE_Life,omitempty" bson:"AVERAGE_Life,omitempty"`
	//承伤
	TotalDamageTaken *float64 `protobuf:"fixed64,24,opt,name=totalDamageTaken" json:"totalDamageTaken,omitempty" bson:"totalDamageTaken,omitempty"`
	//击杀野怪数
	NeutralMinionsKilled *string `protobuf:"bytes,25,opt,name=neutralMinionsKilled" json:"neutralMinionsKilled,omitempty" bson:"neutralMinionsKilled,omitempty"`
	//队伍插眼数
	WardsPlaced *string `protobuf:"bytes,26,opt,name=wardsPlaced" json:"wardsPlaced,omitempty" bson:"wardsPlaced,omitempty"`
	//队伍排眼数
	WardsKilled *string `protobuf:"bytes,27,opt,name=wardsKilled" json:"wardsKilled,omitempty" bson:"wardsKilled,omitempty"`
	StatusID    *string `protobuf:"bytes,28,opt,name=statusID" json:"statusID,omitempty" bson:"statusID,omitempty"`
	//胜利场数
	WinCount *int32 `protobuf:"varint,29,opt,name=win_count" json:"win_count,omitempty" bson:"win_count,omitempty"`
	//失败场数
	LoseCount *int32 `protobuf:"varint,30,opt,name=lose_count" json:"lose_count,omitempty" bson:"lose_count,omitempty"`
	//最后上场时间
	LastMatchTime *string `protobuf:"bytes,31,opt,name=last_match_time" json:"last_match_time,omitempty" bson:"last_match_time,omitempty"`
	//最近6场胜负
	WinLose []string `protobuf:"bytes,32,rep,name=win_lose" json:"win_lose,omitempty" bson:"win_lose,omitempty"`
	//胜率
	VICTORY_RATE *string `protobuf:"bytes,33,opt,name=VICTORY_RATE" json:"VICTORY_RATE,omitempty" bson:"VICTORY_RATE,omitempty"`
	//所属队伍
	TeamType *string `protobuf:"bytes,34,opt,name=team_type" json:"team_type,omitempty" bson:"team_type,omitempty"`
	//击杀野怪率
	NeutralMinionsKilledRate *string `protobuf:"bytes,35,opt,name=neutralMinionsKilled_rate" json:"neutralMinionsKilled_rate,omitempty" bson:"neutralMinionsKilled_rate,omitempty"`
	//英雄输赢记录
	HeroWinLose          []*HeroWinLose `protobuf:"bytes,36,rep,name=hero_win_lose" json:"hero_win_lose,omitempty" bson:"hero_win_lose,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-" bson:"-"`
	XXX_unrecognized     []byte         `json:"-" bson:"-"`
	XXX_sizecache        int32          `json:"-" bson:"-"`
}

func (m *MatchData) Reset()         { *m = MatchData{} }
func (m *MatchData) String() string { return proto.CompactTextString(m) }
func (*MatchData) ProtoMessage()    {}
func (*MatchData) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{28}
}
func (m *MatchData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchData.Merge(m, src)
}
func (m *MatchData) XXX_Size() int {
	return m.Size()
}
func (m *MatchData) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchData.DiscardUnknown(m)
}

var xxx_messageInfo_MatchData proto.InternalMessageInfo

func (m *MatchData) GetPlayerID() string {
	if m != nil && m.PlayerID != nil {
		return *m.PlayerID
	}
	return ""
}

func (m *MatchData) GetNickname() string {
	if m != nil && m.Nickname != nil {
		return *m.Nickname
	}
	return ""
}

func (m *MatchData) GetPositionID() string {
	if m != nil && m.PositionID != nil {
		return *m.PositionID
	}
	return ""
}

func (m *MatchData) GetTeamID() string {
	if m != nil && m.TeamID != nil {
		return *m.TeamID
	}
	return ""
}

func (m *MatchData) GetPlayerImageThumb() string {
	if m != nil && m.PlayerImageThumb != nil {
		return *m.PlayerImageThumb
	}
	return ""
}

func (m *MatchData) GetPositionName() string {
	if m != nil && m.PositionName != nil {
		return *m.PositionName
	}
	return ""
}

func (m *MatchData) GetCountryId() string {
	if m != nil && m.CountryId != nil {
		return *m.CountryId
	}
	return ""
}

func (m *MatchData) GetCountryImage() string {
	if m != nil && m.CountryImage != nil {
		return *m.CountryImage
	}
	return ""
}

func (m *MatchData) GetTeamShortName() string {
	if m != nil && m.TeamShortName != nil {
		return *m.TeamShortName
	}
	return ""
}

func (m *MatchData) GetTeamImageThumb() string {
	if m != nil && m.TeamImageThumb != nil {
		return *m.TeamImageThumb
	}
	return ""
}

func (m *MatchData) GetPlayerChineseName() string {
	if m != nil && m.PlayerChineseName != nil {
		return *m.PlayerChineseName
	}
	return ""
}

func (m *MatchData) GetTotal() string {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return ""
}

func (m *MatchData) GetDamageDealPercent() string {
	if m != nil && m.DamageDealPercent != nil {
		return *m.DamageDealPercent
	}
	return ""
}

func (m *MatchData) GetTeamPercent() string {
	if m != nil && m.TeamPercent != nil {
		return *m.TeamPercent
	}
	return ""
}

func (m *MatchData) GetMINUTE_DAMAGEDEALT() float64 {
	if m != nil && m.MINUTE_DAMAGEDEALT != nil {
		return *m.MINUTE_DAMAGEDEALT
	}
	return 0
}

func (m *MatchData) GetAVERAGE_KILLS() string {
	if m != nil && m.AVERAGE_KILLS != nil {
		return *m.AVERAGE_KILLS
	}
	return ""
}

func (m *MatchData) GetAVERAGE_ASSISTS() string {
	if m != nil && m.AVERAGE_ASSISTS != nil {
		return *m.AVERAGE_ASSISTS
	}
	return ""
}

func (m *MatchData) GetAVERAGE_DEATHS() string {
	if m != nil && m.AVERAGE_DEATHS != nil {
		return *m.AVERAGE_DEATHS
	}
	return ""
}

func (m *MatchData) GetKDA() string {
	if m != nil && m.KDA != nil {
		return *m.KDA
	}
	return ""
}

func (m *MatchData) GetMINUTE_ECONOMIC() float64 {
	if m != nil && m.MINUTE_ECONOMIC != nil {
		return *m.MINUTE_ECONOMIC
	}
	return 0
}

func (m *MatchData) GetMINUTE_WARDSPLACED() string {
	if m != nil && m.MINUTE_WARDSPLACED != nil {
		return *m.MINUTE_WARDSPLACED
	}
	return ""
}

func (m *MatchData) GetAVERAGE_MinionsKilled() string {
	if m != nil && m.AVERAGE_MinionsKilled != nil {
		return *m.AVERAGE_MinionsKilled
	}
	return ""
}

func (m *MatchData) GetAVERAGE_Life() string {
	if m != nil && m.AVERAGE_Life != nil {
		return *m.AVERAGE_Life
	}
	return ""
}

func (m *MatchData) GetTotalDamageTaken() float64 {
	if m != nil && m.TotalDamageTaken != nil {
		return *m.TotalDamageTaken
	}
	return 0
}

func (m *MatchData) GetNeutralMinionsKilled() string {
	if m != nil && m.NeutralMinionsKilled != nil {
		return *m.NeutralMinionsKilled
	}
	return ""
}

func (m *MatchData) GetWardsPlaced() string {
	if m != nil && m.WardsPlaced != nil {
		return *m.WardsPlaced
	}
	return ""
}

func (m *MatchData) GetWardsKilled() string {
	if m != nil && m.WardsKilled != nil {
		return *m.WardsKilled
	}
	return ""
}

func (m *MatchData) GetStatusID() string {
	if m != nil && m.StatusID != nil {
		return *m.StatusID
	}
	return ""
}

func (m *MatchData) GetWinCount() int32 {
	if m != nil && m.WinCount != nil {
		return *m.WinCount
	}
	return 0
}

func (m *MatchData) GetLoseCount() int32 {
	if m != nil && m.LoseCount != nil {
		return *m.LoseCount
	}
	return 0
}

func (m *MatchData) GetLastMatchTime() string {
	if m != nil && m.LastMatchTime != nil {
		return *m.LastMatchTime
	}
	return ""
}

func (m *MatchData) GetWinLose() []string {
	if m != nil {
		return m.WinLose
	}
	return nil
}

func (m *MatchData) GetVICTORY_RATE() string {
	if m != nil && m.VICTORY_RATE != nil {
		return *m.VICTORY_RATE
	}
	return ""
}

func (m *MatchData) GetTeamType() string {
	if m != nil && m.TeamType != nil {
		return *m.TeamType
	}
	return ""
}

func (m *MatchData) GetNeutralMinionsKilledRate() string {
	if m != nil && m.NeutralMinionsKilledRate != nil {
		return *m.NeutralMinionsKilledRate
	}
	return ""
}

func (m *MatchData) GetHeroWinLose() []*HeroWinLose {
	if m != nil {
		return m.HeroWinLose
	}
	return nil
}

//=英雄输赢
type HeroWinLose struct {
	//英雄ID
	HeroID *string `protobuf:"bytes,1,opt,name=heroID" json:"heroID,omitempty" bson:"heroID,omitempty"`
	//英雄图标
	HeroImage *string `protobuf:"bytes,2,opt,name=hero_image" json:"hero_image,omitempty" bson:"hero_image,omitempty"`
	//胜利场数
	Win *int32 `protobuf:"varint,3,opt,name=win" json:"win,omitempty" bson:"win,omitempty"`
	//失败场数
	Lose                 *int32   `protobuf:"varint,4,opt,name=lose" json:"lose,omitempty" bson:"lose,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *HeroWinLose) Reset()         { *m = HeroWinLose{} }
func (m *HeroWinLose) String() string { return proto.CompactTextString(m) }
func (*HeroWinLose) ProtoMessage()    {}
func (*HeroWinLose) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{29}
}
func (m *HeroWinLose) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeroWinLose) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeroWinLose.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeroWinLose) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeroWinLose.Merge(m, src)
}
func (m *HeroWinLose) XXX_Size() int {
	return m.Size()
}
func (m *HeroWinLose) XXX_DiscardUnknown() {
	xxx_messageInfo_HeroWinLose.DiscardUnknown(m)
}

var xxx_messageInfo_HeroWinLose proto.InternalMessageInfo

func (m *HeroWinLose) GetHeroID() string {
	if m != nil && m.HeroID != nil {
		return *m.HeroID
	}
	return ""
}

func (m *HeroWinLose) GetHeroImage() string {
	if m != nil && m.HeroImage != nil {
		return *m.HeroImage
	}
	return ""
}

func (m *HeroWinLose) GetWin() int32 {
	if m != nil && m.Win != nil {
		return *m.Win
	}
	return 0
}

func (m *HeroWinLose) GetLose() int32 {
	if m != nil && m.Lose != nil {
		return *m.Lose
	}
	return 0
}

//比赛记录
type MatchRecord struct {
	//队伍a胜场数
	TeamAWinCount *int32 `protobuf:"varint,1,opt,name=team_a_win_count" json:"team_a_win_count,omitempty" bson:"team_a_win_count,omitempty"`
	//队伍b胜场数
	TeamBWinCount        *int32             `protobuf:"varint,2,opt,name=team_b_win_count" json:"team_b_win_count,omitempty" bson:"team_b_win_count,omitempty"`
	List                 []*MatchRecordList `protobuf:"bytes,3,rep,name=list" json:"list,omitempty" bson:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-" bson:"-"`
	XXX_unrecognized     []byte             `json:"-" bson:"-"`
	XXX_sizecache        int32              `json:"-" bson:"-"`
}

func (m *MatchRecord) Reset()         { *m = MatchRecord{} }
func (m *MatchRecord) String() string { return proto.CompactTextString(m) }
func (*MatchRecord) ProtoMessage()    {}
func (*MatchRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{30}
}
func (m *MatchRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchRecord.Merge(m, src)
}
func (m *MatchRecord) XXX_Size() int {
	return m.Size()
}
func (m *MatchRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchRecord.DiscardUnknown(m)
}

var xxx_messageInfo_MatchRecord proto.InternalMessageInfo

func (m *MatchRecord) GetTeamAWinCount() int32 {
	if m != nil && m.TeamAWinCount != nil {
		return *m.TeamAWinCount
	}
	return 0
}

func (m *MatchRecord) GetTeamBWinCount() int32 {
	if m != nil && m.TeamBWinCount != nil {
		return *m.TeamBWinCount
	}
	return 0
}

func (m *MatchRecord) GetList() []*MatchRecordList {
	if m != nil {
		return m.List
	}
	return nil
}

//=MatchRecordList
type MatchRecordList struct {
	//获胜队伍ID
	WinTeamId *string `protobuf:"bytes,1,opt,name=win_team_id" json:"win_team_id,omitempty" bson:"win_team_id,omitempty"`
	//获胜队伍名称
	WinTeamName *string `protobuf:"bytes,2,opt,name=win_team_name" json:"win_team_name,omitempty" bson:"win_team_name,omitempty"`
	//开场时间
	StartTime *string `protobuf:"bytes,3,opt,name=start_time" json:"start_time,omitempty" bson:"start_time,omitempty"`
	//比赛ID
	MatchID *string `protobuf:"bytes,4,opt,name=matchID" json:"matchID,omitempty" bson:"matchID,omitempty"`
	//比赛标题全称
	Title *string `protobuf:"bytes,5,opt,name=title" json:"title,omitempty" bson:"title,omitempty"`
	//队伍a的ID
	TeamIDA *string `protobuf:"bytes,6,opt,name=teamID_a" json:"teamID_a,omitempty" bson:"teamID_a,omitempty"`
	//队伍b的ID
	TeamIDB *string `protobuf:"bytes,7,opt,name=teamID_b" json:"teamID_b,omitempty" bson:"teamID_b,omitempty"`
	//队伍a图标
	TeamAImage *string `protobuf:"bytes,8,opt,name=team_a_image" json:"team_a_image,omitempty" bson:"team_a_image,omitempty"`
	//队伍b图标
	TeamBImage *string `protobuf:"bytes,9,opt,name=team_b_image" json:"team_b_image,omitempty" bson:"team_b_image,omitempty"`
	//队伍a名称缩写
	TeamAShortName *string `protobuf:"bytes,10,opt,name=team_a_short_name" json:"team_a_short_name,omitempty" bson:"team_a_short_name,omitempty"`
	//队伍b名称缩写
	TeamBShortName *string `protobuf:"bytes,11,opt,name=team_b_short_name" json:"team_b_short_name,omitempty" bson:"team_b_short_name,omitempty"`
	//队伍a胜场
	TeamAWin *string `protobuf:"bytes,12,opt,name=team_a_win" json:"team_a_win,omitempty" bson:"team_a_win,omitempty"`
	//队伍b胜场
	TeamBWin *string `protobuf:"bytes,13,opt,name=team_b_win" json:"team_b_win,omitempty" bson:"team_b_win,omitempty"`
	//详情
	ResultList           []*MatchRecordResultList `protobuf:"bytes,14,rep,name=result_list" json:"result_list,omitempty" bson:"result_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-" bson:"-"`
	XXX_unrecognized     []byte                   `json:"-" bson:"-"`
	XXX_sizecache        int32                    `json:"-" bson:"-"`
}

func (m *MatchRecordList) Reset()         { *m = MatchRecordList{} }
func (m *MatchRecordList) String() string { return proto.CompactTextString(m) }
func (*MatchRecordList) ProtoMessage()    {}
func (*MatchRecordList) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{31}
}
func (m *MatchRecordList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchRecordList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchRecordList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchRecordList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchRecordList.Merge(m, src)
}
func (m *MatchRecordList) XXX_Size() int {
	return m.Size()
}
func (m *MatchRecordList) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchRecordList.DiscardUnknown(m)
}

var xxx_messageInfo_MatchRecordList proto.InternalMessageInfo

func (m *MatchRecordList) GetWinTeamId() string {
	if m != nil && m.WinTeamId != nil {
		return *m.WinTeamId
	}
	return ""
}

func (m *MatchRecordList) GetWinTeamName() string {
	if m != nil && m.WinTeamName != nil {
		return *m.WinTeamName
	}
	return ""
}

func (m *MatchRecordList) GetStartTime() string {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return ""
}

func (m *MatchRecordList) GetMatchID() string {
	if m != nil && m.MatchID != nil {
		return *m.MatchID
	}
	return ""
}

func (m *MatchRecordList) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *MatchRecordList) GetTeamIDA() string {
	if m != nil && m.TeamIDA != nil {
		return *m.TeamIDA
	}
	return ""
}

func (m *MatchRecordList) GetTeamIDB() string {
	if m != nil && m.TeamIDB != nil {
		return *m.TeamIDB
	}
	return ""
}

func (m *MatchRecordList) GetTeamAImage() string {
	if m != nil && m.TeamAImage != nil {
		return *m.TeamAImage
	}
	return ""
}

func (m *MatchRecordList) GetTeamBImage() string {
	if m != nil && m.TeamBImage != nil {
		return *m.TeamBImage
	}
	return ""
}

func (m *MatchRecordList) GetTeamAShortName() string {
	if m != nil && m.TeamAShortName != nil {
		return *m.TeamAShortName
	}
	return ""
}

func (m *MatchRecordList) GetTeamBShortName() string {
	if m != nil && m.TeamBShortName != nil {
		return *m.TeamBShortName
	}
	return ""
}

func (m *MatchRecordList) GetTeamAWin() string {
	if m != nil && m.TeamAWin != nil {
		return *m.TeamAWin
	}
	return ""
}

func (m *MatchRecordList) GetTeamBWin() string {
	if m != nil && m.TeamBWin != nil {
		return *m.TeamBWin
	}
	return ""
}

func (m *MatchRecordList) GetResultList() []*MatchRecordResultList {
	if m != nil {
		return m.ResultList
	}
	return nil
}

//==MatchRecordResultList
type MatchRecordResultList struct {
	//场次ID
	ResultID *string `protobuf:"bytes,1,opt,name=resultID" json:"resultID,omitempty" bson:"resultID,omitempty"`
	//获胜队伍ID
	WinTeamID *string `protobuf:"bytes,2,opt,name=win_teamID" json:"win_teamID,omitempty" bson:"win_teamID,omitempty"`
	//队伍名称
	TeamName *string `protobuf:"bytes,3,opt,name=team_name" json:"team_name,omitempty" bson:"team_name,omitempty"`
	//队伍名称缩写
	TeamShortName *string `protobuf:"bytes,4,opt,name=team_short_name" json:"team_short_name,omitempty" bson:"team_short_name,omitempty"`
	//队伍图标
	TeamImage *string `protobuf:"bytes,5,opt,name=team_image" json:"team_image,omitempty" bson:"team_image,omitempty"`
	//比赛轮数
	Bo                   *string  `protobuf:"bytes,6,opt,name=bo" json:"bo,omitempty" bson:"bo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *MatchRecordResultList) Reset()         { *m = MatchRecordResultList{} }
func (m *MatchRecordResultList) String() string { return proto.CompactTextString(m) }
func (*MatchRecordResultList) ProtoMessage()    {}
func (*MatchRecordResultList) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b3338b45632ffd, []int{32}
}
func (m *MatchRecordResultList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchRecordResultList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchRecordResultList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchRecordResultList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchRecordResultList.Merge(m, src)
}
func (m *MatchRecordResultList) XXX_Size() int {
	return m.Size()
}
func (m *MatchRecordResultList) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchRecordResultList.DiscardUnknown(m)
}

var xxx_messageInfo_MatchRecordResultList proto.InternalMessageInfo

func (m *MatchRecordResultList) GetResultID() string {
	if m != nil && m.ResultID != nil {
		return *m.ResultID
	}
	return ""
}

func (m *MatchRecordResultList) GetWinTeamID() string {
	if m != nil && m.WinTeamID != nil {
		return *m.WinTeamID
	}
	return ""
}

func (m *MatchRecordResultList) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *MatchRecordResultList) GetTeamShortName() string {
	if m != nil && m.TeamShortName != nil {
		return *m.TeamShortName
	}
	return ""
}

func (m *MatchRecordResultList) GetTeamImage() string {
	if m != nil && m.TeamImage != nil {
		return *m.TeamImage
	}
	return ""
}

func (m *MatchRecordResultList) GetBo() string {
	if m != nil && m.Bo != nil {
		return *m.Bo
	}
	return ""
}

func init() {
	proto.RegisterType((*TableCrawlJob)(nil), "share_message.TableCrawlJob")
	proto.RegisterType((*TableESPortsPlayer)(nil), "share_message.TableESPortsPlayer")
	proto.RegisterType((*ESPortsJumpInfo)(nil), "share_message.ESPortsJumpInfo")
	proto.RegisterType((*TableESPortsCarousel)(nil), "share_message.TableESPortsCarousel")
	proto.RegisterType((*TableESPortsLabel)(nil), "share_message.TableESPortsLabel")
	proto.RegisterType((*ThumbsUpInfo)(nil), "share_message.ThumbsUpInfo")
	proto.RegisterType((*TableESportComment)(nil), "share_message.TableESportComment")
	proto.RegisterType((*TableESPortsRealTimeInfo)(nil), "share_message.TableESPortsRealTimeInfo")
	proto.RegisterType((*UniqueGameInfo)(nil), "share_message.UniqueGameInfo")
	proto.RegisterType((*TableESPortsVideoInfo)(nil), "share_message.TableESPortsVideoInfo")
	proto.RegisterType((*TableESPortsFlowInfo)(nil), "share_message.TableESPortsFlowInfo")
	proto.RegisterType((*TableESPortsSysMsg)(nil), "share_message.TableESPortsSysMsg")
	proto.RegisterType((*TableESPortsGuessBetRecord)(nil), "share_message.TableESPortsGuessBetRecord")
	proto.RegisterType((*GuessBetPlayerInfo)(nil), "share_message.GuessBetPlayerInfo")
	proto.RegisterType((*GuessBetGameInfo)(nil), "share_message.GuessBetGameInfo")
	proto.RegisterType((*BetSlipReport)(nil), "share_message.BetSlipReport")
	proto.RegisterType((*TableESPortsGameOrderSysMsg)(nil), "share_message.TableESPortsGameOrderSysMsg")
	proto.RegisterType((*TableESPortsLiveRoomMsgLog)(nil), "share_message.TableESPortsLiveRoomMsgLog")
	proto.RegisterType((*TableESPortsBetRiskOneDay)(nil), "share_message.TableESPortsBetRiskOneDay")
	proto.RegisterType((*TableESPortsBetRiskPlatFormDaySum)(nil), "share_message.TableESPortsBetRiskPlatFormDaySum")
	proto.RegisterType((*TableESportsExchangeCfg)(nil), "share_message.TableESportsExchangeCfg")
	proto.RegisterType((*ExchangeRate)(nil), "share_message.ExchangeRate")
	proto.RegisterType((*TableESportsGiveWhiteList)(nil), "share_message.TableESportsGiveWhiteList")
	proto.RegisterType((*TableESPortsExChangeFirst)(nil), "share_message.TableESPortsExChangeFirst")
	proto.RegisterType((*RecentData)(nil), "share_message.RecentData")
	proto.RegisterType((*TournamentBiaoxian)(nil), "share_message.TournamentBiaoxian")
	proto.RegisterType((*TeamBX)(nil), "share_message.TeamBX")
	proto.RegisterType((*StrengthIndex)(nil), "share_message.StrengthIndex")
	proto.RegisterType((*MatchData)(nil), "share_message.MatchData")
	proto.RegisterType((*HeroWinLose)(nil), "share_message.HeroWinLose")
	proto.RegisterType((*MatchRecord)(nil), "share_message.MatchRecord")
	proto.RegisterType((*MatchRecordList)(nil), "share_message.MatchRecordList")
	proto.RegisterType((*MatchRecordResultList)(nil), "share_message.MatchRecordResultList")
}

func init() { proto.RegisterFile("table_struct_e-sports.proto", fileDescriptor_28b3338b45632ffd) }

var fileDescriptor_28b3338b45632ffd = []byte{
	// 3351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x5a, 0xcd, 0x73, 0x1b, 0x47,
	0x76, 0x2f, 0x00, 0x04, 0x09, 0x3c, 0x7c, 0x12, 0x24, 0xc8, 0x21, 0x69, 0x52, 0x12, 0x6c, 0xc5,
	0x72, 0x2c, 0x29, 0xb6, 0x6c, 0x27, 0x71, 0x0e, 0xa9, 0x02, 0x01, 0x4a, 0x1a, 0x0b, 0x14, 0x59,
	0x00, 0x24, 0xc5, 0x27, 0x54, 0x0f, 0xd0, 0x04, 0x26, 0x1a, 0xcc, 0x20, 0x33, 0x3d, 0xa2, 0x70,
	0xca, 0x25, 0x87, 0xe4, 0x2f, 0xc8, 0x31, 0xb7, 0xdc, 0x73, 0xcd, 0x21, 0xb9, 0xe4, 0x90, 0xbd,
	0xb9, 0xf6, 0xb8, 0x07, 0x97, 0xcb, 0x55, 0x7b, 0x58, 0xff, 0x15, 0x5b, 0xfd, 0xba, 0x7b, 0xbe,
	0x38, 0x00, 0xe5, 0xad, 0xbd, 0x11, 0xef, 0x75, 0xf7, 0xeb, 0xfe, 0xbd, 0xdf, 0xfb, 0xe8, 0x1e,
	0xc2, 0x11, 0x23, 0x86, 0x45, 0x47, 0x1e, 0x73, 0xfd, 0x31, 0x1b, 0xd1, 0x47, 0xde, 0xc2, 0x71,
	0x99, 0xf7, 0x78, 0xe1, 0x3a, 0xcc, 0x69, 0x54, 0xbc, 0x19, 0x71, 0xe9, 0x68, 0x4e, 0x3d, 0x8f,
	0x4c, 0xe9, 0x61, 0x79, 0x3a, 0x75, 0x18, 0x99, 0x0a, 0x65, 0xeb, 0x7b, 0xa8, 0x0c, 0xf9, 0xdc,
	0x8e, 0x4b, 0xae, 0xad, 0xef, 0x1c, 0xa3, 0x71, 0x0c, 0x59, 0x7d, 0xa2, 0x65, 0xee, 0x66, 0x1e,
	0x14, 0x4f, 0xb7, 0x7f, 0xf9, 0xf1, 0x4e, 0x65, 0x64, 0x4e, 0x1e, 0x3a, 0x73, 0x93, 0xd1, 0xf9,
	0x82, 0x2d, 0x1b, 0x15, 0xc8, 0xbf, 0x26, 0x96, 0x4f, 0xb5, 0x2c, 0x1f, 0xd1, 0x28, 0xc3, 0xc6,
	0xd0, 0x9c, 0x53, 0x2d, 0x77, 0x37, 0xf3, 0x20, 0xc7, 0x7f, 0xbd, 0x24, 0x73, 0xaa, 0x6d, 0x70,
	0x5d, 0xeb, 0x3f, 0x32, 0xd0, 0xc0, 0xb5, 0xcf, 0x06, 0x97, 0x7c, 0x3b, 0x97, 0x16, 0x59, 0x52,
	0x37, 0x62, 0x20, 0x97, 0x66, 0xa0, 0x0a, 0x9b, 0x03, 0x46, 0x98, 0xef, 0xa1, 0x85, 0x7c, 0x63,
	0x17, 0xca, 0x3d, 0xe2, 0xb1, 0x4b, 0xdf, 0xb2, 0x22, 0x96, 0x0e, 0x60, 0xbb, 0xe3, 0xbb, 0x2e,
	0xb5, 0x59, 0xdf, 0x71, 0xe6, 0x3d, 0xf3, 0x1d, 0xd5, 0x27, 0x68, 0x36, 0xd7, 0x68, 0x00, 0x74,
	0x5c, 0x4a, 0x18, 0xc5, 0xe1, 0x79, 0x94, 0x35, 0xa1, 0xc2, 0x17, 0xe9, 0x39, 0x53, 0xd3, 0x46,
	0xf1, 0x26, 0x17, 0xb7, 0x6c, 0xa8, 0xc9, 0xbd, 0x7d, 0xe7, 0xcf, 0x17, 0xba, 0x7d, 0xe5, 0x34,
	0xea, 0x50, 0xe0, 0x7f, 0x0f, 0x97, 0x0b, 0xaa, 0x01, 0x6e, 0x60, 0x1b, 0x8a, 0x5c, 0x72, 0x61,
	0xfc, 0xa3, 0x3e, 0xd1, 0x4a, 0xca, 0x84, 0x14, 0xd1, 0x31, 0xd3, 0xca, 0x38, 0xac, 0x06, 0x5b,
	0x5c, 0xf6, 0xca, 0xb5, 0xb4, 0x0a, 0x42, 0x23, 0xe7, 0x0d, 0xd8, 0xd2, 0xa2, 0x5a, 0x95, 0x8f,
	0x69, 0xfd, 0x4b, 0x16, 0x76, 0xa3, 0x88, 0x74, 0x88, 0xeb, 0xf8, 0x1e, 0xb5, 0x6e, 0xc3, 0xa4,
	0x02, 0xf9, 0xa1, 0xc9, 0x2c, 0x05, 0x7a, 0x03, 0xe0, 0xd5, 0x62, 0xa2, 0x4e, 0x98, 0x4b, 0x39,
	0xb5, 0x40, 0x22, 0x84, 0x32, 0x8f, 0x5b, 0xac, 0x43, 0x41, 0x9f, 0x93, 0x29, 0xe5, 0x7b, 0xdc,
	0xc4, 0x95, 0x76, 0xa0, 0xd4, 0x1e, 0x33, 0xd3, 0xb1, 0x3b, 0x8e, 0x6f, 0x33, 0xad, 0x80, 0xc3,
	0xaa, 0xb0, 0x79, 0x4e, 0x6d, 0x5f, 0x9f, 0x68, 0x45, 0xfc, 0xfd, 0x85, 0x80, 0x84, 0xc3, 0x83,
	0x90, 0x94, 0x9e, 0x9c, 0x3c, 0x8e, 0x51, 0xea, 0x71, 0x12, 0xc4, 0x2a, 0x6c, 0xbe, 0xa1, 0xe6,
	0x74, 0xc6, 0xc4, 0xb9, 0x71, 0xff, 0xcb, 0x05, 0xf5, 0xb4, 0x1a, 0xc2, 0xf0, 0x9f, 0x19, 0xd8,
	0x8e, 0xc2, 0xd0, 0x23, 0xc6, 0xaf, 0xc6, 0x20, 0x3c, 0x5b, 0x4e, 0x6d, 0x5a, 0x9a, 0xdc, 0x48,
	0x1c, 0x62, 0x53, 0xb9, 0x07, 0xcd, 0xe8, 0x13, 0x6d, 0x0b, 0xc1, 0xd9, 0x86, 0x22, 0x0a, 0xd0,
	0xd3, 0x05, 0x35, 0x46, 0x1f, 0x3b, 0x36, 0x87, 0xa7, 0x88, 0x0c, 0x9e, 0x41, 0x79, 0x38, 0xf3,
	0xe7, 0x86, 0xf7, 0x4a, 0x9c, 0xab, 0x01, 0xd0, 0x5e, 0x2c, 0xc4, 0x3a, 0x5d, 0xad, 0x81, 0xeb,
	0xdc, 0xb2, 0xed, 0x26, 0x54, 0xd4, 0x12, 0x02, 0xe3, 0x6c, 0x62, 0x7b, 0x7b, 0x08, 0xc9, 0xef,
	0xb3, 0x41, 0xac, 0xf0, 0xd0, 0xed, 0x38, 0xf3, 0x39, 0xb5, 0xd9, 0x6d, 0x8b, 0xd7, 0x60, 0xab,
	0xe3, 0xd8, 0x8c, 0xca, 0x65, 0x8b, 0x37, 0xad, 0x09, 0x70, 0xd2, 0xc8, 0x51, 0x87, 0x82, 0x08,
	0x48, 0x7d, 0x22, 0x83, 0x64, 0x0f, 0xaa, 0x42, 0xf2, 0xd2, 0x1c, 0xbf, 0xc5, 0x38, 0x16, 0x24,
	0xe1, 0x23, 0x09, 0x0f, 0xb5, 0x00, 0xbb, 0x70, 0xf7, 0x05, 0xb5, 0x7e, 0x04, 0x97, 0xa2, 0x22,
	0x64, 0x9f, 0x2e, 0xac, 0xa5, 0xd8, 0x07, 0xa8, 0x53, 0x4b, 0xa7, 0x95, 0x54, 0x68, 0xc9, 0x93,
	0xea, 0x13, 0x0c, 0x23, 0x8c, 0x54, 0xb9, 0x2d, 0xe9, 0x89, 0x8a, 0xa2, 0xbc, 0xee, 0xa9, 0xa3,
	0x49, 0x56, 0x35, 0xa1, 0x82, 0x16, 0x82, 0x63, 0xd4, 0x70, 0x85, 0x23, 0xd8, 0x89, 0x88, 0x83,
	0xb3, 0xd4, 0xd1, 0xa3, 0x3f, 0x6c, 0x80, 0x16, 0xa5, 0x5e, 0x9f, 0x12, 0x4c, 0x2b, 0xe8, 0xde,
	0x5b, 0xd0, 0x8e, 0x87, 0x5d, 0x36, 0x25, 0xec, 0x72, 0x89, 0xb0, 0xdb, 0x50, 0xa7, 0xd4, 0x3d,
	0xcf, 0x8f, 0xe6, 0x23, 0x0d, 0xea, 0x1d, 0xe7, 0x1d, 0x75, 0x4f, 0xcd, 0x69, 0x22, 0x22, 0x0f,
	0xa1, 0x81, 0x9a, 0xc1, 0x9c, 0x58, 0x56, 0xa0, 0xdb, 0xba, 0x9b, 0x7b, 0x50, 0x0c, 0x43, 0xa0,
	0x80, 0x43, 0x23, 0xde, 0x47, 0xba, 0x72, 0x07, 0xb6, 0x7d, 0x36, 0x73, 0xdc, 0x00, 0x11, 0x50,
	0x98, 0x0a, 0x79, 0x7b, 0x3c, 0x46, 0x6f, 0x94, 0x54, 0x08, 0x09, 0x31, 0x42, 0x8f, 0x18, 0x77,
	0x09, 0x23, 0x03, 0xc7, 0x77, 0xc7, 0x34, 0x4c, 0x62, 0x3d, 0xc7, 0x79, 0x2b, 0x9c, 0x58, 0x0d,
	0x12, 0xb2, 0x12, 0x0d, 0x96, 0x32, 0xa6, 0x6f, 0x32, 0xaf, 0x8e, 0x62, 0x0d, 0xea, 0x31, 0x31,
	0x9f, 0xb0, 0x9d, 0xc2, 0x19, 0x11, 0x4b, 0xbb, 0x50, 0x56, 0x32, 0xf4, 0xd9, 0x8e, 0x82, 0xe4,
	0x94, 0x4e, 0x4d, 0xfb, 0xec, 0xea, 0x8a, 0x8e, 0x99, 0xf9, 0x4e, 0x00, 0xb9, 0xab, 0x8e, 0x16,
	0x8a, 0x79, 0x24, 0x37, 0x13, 0x04, 0xdd, 0x53, 0x7b, 0x96, 0x44, 0x13, 0x9b, 0xdb, 0x57, 0xf9,
	0x70, 0x30, 0x73, 0xae, 0x71, 0x9e, 0xa6, 0x24, 0x32, 0x4b, 0x78, 0xda, 0xc1, 0xdd, 0x9c, 0x2c,
	0x69, 0x0e, 0xa3, 0xda, 0x61, 0x0a, 0x0d, 0x8f, 0x30, 0x74, 0x4d, 0xa8, 0xbe, 0xb2, 0xcd, 0x7f,
	0xf2, 0xe9, 0x33, 0x22, 0x79, 0xb4, 0x0d, 0xc5, 0x39, 0x61, 0xe3, 0x19, 0x9e, 0x21, 0xa3, 0x26,
	0xa2, 0x68, 0xc0, 0xc8, 0x54, 0xa5, 0x30, 0x80, 0xac, 0xe1, 0x20, 0x67, 0x10, 0x67, 0x46, 0xc9,
	0xbc, 0x1d, 0x96, 0x4f, 0x25, 0x3a, 0x45, 0x51, 0x1e, 0xd9, 0xfb, 0x9b, 0x2d, 0x68, 0x46, 0xd9,
	0xfb, 0xda, 0x9c, 0x50, 0xe7, 0xcf, 0x49, 0xdd, 0x18, 0x55, 0xd3, 0x8b, 0x48, 0x13, 0x2a, 0x48,
	0xd0, 0x04, 0x6f, 0x03, 0x6e, 0x6e, 0xa9, 0x9c, 0x81, 0x9b, 0xe3, 0x03, 0x0a, 0x2b, 0xc8, 0x59,
	0x4c, 0x27, 0x27, 0x24, 0xc8, 0x59, 0x4a, 0x21, 0x67, 0xf9, 0x26, 0x39, 0x2b, 0xa9, 0xe4, 0xac,
	0xa6, 0x93, 0xb3, 0xb6, 0x92, 0x9c, 0xf5, 0x14, 0x72, 0x6e, 0xa7, 0x92, 0xb3, 0xb1, 0x86, 0x9c,
	0xcd, 0x74, 0x72, 0xee, 0x29, 0x90, 0x11, 0x1b, 0x14, 0xed, 0xa3, 0x68, 0x07, 0x4a, 0xba, 0xd7,
	0xa7, 0x63, 0xe4, 0xe8, 0x44, 0x92, 0xb1, 0x02, 0x79, 0xdd, 0x7b, 0xee, 0x30, 0xed, 0x20, 0x51,
	0x32, 0x8e, 0x52, 0x39, 0xfd, 0x91, 0x1a, 0xc5, 0x71, 0xd2, 0x27, 0xda, 0xb1, 0x4a, 0xf3, 0x01,
	0xa3, 0x4f, 0x62, 0x8c, 0xbe, 0x93, 0x4c, 0x22, 0x77, 0x53, 0x28, 0x7e, 0x4f, 0x65, 0xb0, 0xa7,
	0x96, 0x73, 0x2d, 0xec, 0xb4, 0x14, 0x1a, 0x81, 0x88, 0xe3, 0xf6, 0xa9, 0xcc, 0x6b, 0xc5, 0xf3,
	0x80, 0xf9, 0x1f, 0x63, 0x0f, 0x99, 0xff, 0xe5, 0xc7, 0x3b, 0x99, 0x47, 0x7c, 0x1f, 0x4f, 0x89,
	0x6c, 0x33, 0x3e, 0x51, 0x4e, 0x89, 0x67, 0xfa, 0xfb, 0x68, 0x7f, 0x17, 0xca, 0x91, 0x70, 0x9a,
	0x60, 0xe0, 0x61, 0x6d, 0x0a, 0xa5, 0xb8, 0xfa, 0x5f, 0xe0, 0x68, 0x0d, 0xea, 0x51, 0x56, 0x21,
	0xa4, 0x0f, 0x54, 0x28, 0x5f, 0x2c, 0xa8, 0x4b, 0x98, 0xe3, 0x6a, 0x9f, 0xe1, 0xd8, 0x7d, 0x28,
	0xe8, 0xde, 0x53, 0xc7, 0xb2, 0x9c, 0x6b, 0xed, 0x2f, 0xf9, 0x18, 0xb5, 0xb7, 0x63, 0xa8, 0xea,
	0x9e, 0x58, 0x46, 0xaa, 0x3f, 0x4f, 0xa8, 0x85, 0x32, 0xa8, 0x25, 0x0f, 0xa3, 0x27, 0xfb, 0x26,
	0x19, 0xff, 0xda, 0x23, 0x6c, 0x92, 0x8e, 0x13, 0x4d, 0x52, 0x7c, 0x50, 0xeb, 0x6d, 0xbc, 0x15,
	0xe4, 0x60, 0x26, 0x22, 0x39, 0xb5, 0xff, 0x8e, 0x96, 0xed, 0xac, 0x0a, 0x50, 0xe9, 0xf1, 0x95,
	0x9d, 0x60, 0xeb, 0xbf, 0xb3, 0xf1, 0x56, 0x7c, 0xb0, 0xf4, 0xce, 0xbd, 0xe9, 0x07, 0xf4, 0x2e,
	0x7d, 0x3a, 0x36, 0x17, 0x26, 0xb5, 0x19, 0x22, 0x2b, 0x0c, 0x06, 0xa1, 0x9e, 0x4b, 0x32, 0x68,
	0x23, 0xd1, 0x9a, 0xe5, 0x53, 0xba, 0x0f, 0xd1, 0x41, 0x44, 0x7b, 0xca, 0xc2, 0x07, 0xf5, 0x94,
	0xb1, 0x60, 0xe2, 0x0b, 0x15, 0xd3, 0x63, 0x0c, 0x14, 0x28, 0xba, 0x77, 0xe9, 0x7b, 0x33, 0x4c,
	0x1f, 0x85, 0xc6, 0x3e, 0xd4, 0x74, 0xef, 0x5c, 0x2c, 0xdd, 0xa1, 0x36, 0xa3, 0xa2, 0xe8, 0x15,
	0x78, 0x34, 0x70, 0xfe, 0xc9, 0x72, 0xb7, 0x03, 0xa5, 0xa7, 0xc4, 0xb4, 0x7c, 0x57, 0x98, 0xa8,
	0x22, 0x78, 0xff, 0x9a, 0x87, 0xc3, 0x28, 0x78, 0xcf, 0x7c, 0xea, 0x79, 0xa7, 0x94, 0xf1, 0x78,
	0x75, 0x27, 0x8d, 0x16, 0x6c, 0x5d, 0xb8, 0x13, 0x74, 0x48, 0xe6, 0x6e, 0x36, 0x1d, 0xc9, 0x24,
	0xa9, 0xb3, 0xea, 0x12, 0x13, 0x4a, 0x71, 0xd5, 0xa8, 0x13, 0x83, 0x04, 0x34, 0x91, 0x7d, 0x44,
	0x32, 0x01, 0xe5, 0x55, 0x12, 0x6c, 0x2f, 0xcc, 0x0b, 0xd7, 0x9c, 0x9a, 0xb6, 0xec, 0x75, 0x79,
	0x4a, 0x55, 0x22, 0x1c, 0xb9, 0xa5, 0xfc, 0x22, 0xcd, 0x8b, 0x8c, 0x7c, 0x00, 0xdb, 0xe7, 0x8e,
	0x6b, 0xf7, 0x1d, 0xcb, 0x42, 0xe3, 0x4f, 0x2d, 0x32, 0x95, 0x2d, 0xff, 0x57, 0x82, 0x65, 0x91,
	0x96, 0xff, 0x5e, 0xc2, 0x3d, 0x0a, 0x04, 0x49, 0x46, 0xee, 0xa1, 0x2f, 0xa1, 0x10, 0x84, 0x40,
	0x09, 0x27, 0xdd, 0x59, 0x31, 0x29, 0xa8, 0x94, 0x15, 0xc8, 0x9f, 0x52, 0xd5, 0xfc, 0x61, 0xd5,
	0x38, 0xa5, 0x4c, 0x90, 0xab, 0xa2, 0xf6, 0x7c, 0x4a, 0xd9, 0x4b, 0x7f, 0x8e, 0xbe, 0x40, 0xb2,
	0xf1, 0xdf, 0xfc, 0x50, 0x35, 0x75, 0x01, 0xbd, 0x98, 0x4c, 0x44, 0xde, 0x46, 0x30, 0x4e, 0x29,
	0x6b, 0xcf, 0x31, 0xcd, 0x6c, 0x2b, 0x82, 0x0c, 0xfc, 0xf1, 0x98, 0x7a, 0x9e, 0x14, 0x37, 0x14,
	0xc0, 0xdc, 0xd3, 0x52, 0xb6, 0xa3, 0x86, 0x76, 0x4d, 0x8f, 0x7b, 0x5a, 0x8a, 0x83, 0x1e, 0x43,
	0xb7, 0x2c, 0x3a, 0x25, 0x6a, 0x74, 0xd0, 0x63, 0xf4, 0x29, 0xf1, 0x1c, 0x1b, 0xd3, 0x3a, 0x26,
	0x2e, 0xf1, 0xbb, 0x4b, 0x19, 0x31, 0x2d, 0xcc, 0xec, 0x6a, 0x47, 0x32, 0x1e, 0xb4, 0x88, 0xa8,
	0x4f, 0x3d, 0xdf, 0x12, 0xb9, 0xbd, 0x98, 0x08, 0x91, 0x43, 0xb5, 0xc3, 0x48, 0xcd, 0x3e, 0x42,
	0x2a, 0xbe, 0x86, 0x46, 0x0a, 0xf0, 0x55, 0xd8, 0x44, 0x6f, 0xc9, 0x50, 0xe6, 0x20, 0xa9, 0x62,
	0x9a, 0x55, 0xc5, 0xf9, 0x72, 0xe6, 0xd8, 0x2a, 0x62, 0xeb, 0x50, 0x08, 0x52, 0x99, 0xb8, 0xaa,
	0x7f, 0x07, 0xf5, 0x1b, 0xbe, 0xa9, 0x43, 0x61, 0xaa, 0x92, 0x6d, 0x46, 0x6d, 0x7c, 0x18, 0x34,
	0x29, 0xd9, 0xa8, 0x48, 0x34, 0x29, 0xb8, 0x7a, 0xeb, 0xb7, 0x59, 0xa8, 0xf0, 0x23, 0x5b, 0xe6,
	0xa2, 0x4f, 0xf9, 0x65, 0xe6, 0x03, 0x6e, 0x31, 0xf1, 0xed, 0x46, 0x89, 0x94, 0xfb, 0x30, 0x22,
	0xc5, 0x0b, 0xf6, 0x46, 0x6a, 0xc1, 0xce, 0x2b, 0x06, 0x09, 0xe8, 0x3c, 0xf1, 0x08, 0x20, 0x49,
	0xc7, 0xb7, 0xeb, 0xc9, 0xe4, 0x14, 0xf7, 0x46, 0x41, 0x15, 0xed, 0x90, 0x59, 0x90, 0xce, 0xac,
	0x52, 0x0a, 0xb3, 0xca, 0xe9, 0xcc, 0xaa, 0xa4, 0x33, 0xab, 0xaa, 0x6c, 0x0d, 0xfc, 0xb9, 0x14,
	0xe1, 0xa5, 0xa6, 0xf5, 0x5f, 0x59, 0x38, 0x8a, 0xe5, 0x20, 0x32, 0xa7, 0x98, 0x75, 0x64, 0x26,
	0xff, 0xd3, 0x93, 0x90, 0x88, 0xa8, 0xf8, 0x23, 0x0e, 0x46, 0xd4, 0xc6, 0x4d, 0xb2, 0x6e, 0xde,
	0x88, 0xd2, 0xad, 0x44, 0x94, 0x16, 0x92, 0x51, 0x5a, 0x54, 0x53, 0x82, 0xc2, 0x0d, 0x29, 0x8c,
	0x2f, 0xa5, 0x30, 0xbe, 0xac, 0x9c, 0x28, 0x8c, 0xc7, 0x80, 0x8b, 0x56, 0xc1, 0xea, 0x4d, 0xff,
	0x08, 0xcc, 0xfe, 0x27, 0x13, 0xcf, 0xdb, 0x3d, 0xf3, 0x1d, 0xed, 0x3b, 0xce, 0xfc, 0xdc, 0x9b,
	0xf6, 0x9c, 0x5b, 0x8b, 0xdf, 0x1e, 0x54, 0x07, 0xd4, 0x9e, 0x50, 0x37, 0x51, 0x6e, 0xa3, 0xc1,
	0xb3, 0xa2, 0x00, 0xd6, 0xa1, 0xf0, 0x9c, 0x92, 0x09, 0xd6, 0x95, 0xbc, 0x02, 0x48, 0xbe, 0x51,
	0x05, 0x9c, 0xe3, 0x35, 0x1b, 0x0b, 0xd6, 0x56, 0x4a, 0x91, 0x44, 0xce, 0xb5, 0x96, 0x70, 0x10,
	0xdd, 0x3f, 0xf7, 0x83, 0xe9, 0xbd, 0xbd, 0xb0, 0x69, 0x97, 0xc4, 0x1b, 0x81, 0x20, 0xec, 0xbb,
	0x84, 0xd1, 0x01, 0x73, 0xc3, 0xe0, 0x14, 0x80, 0x74, 0xc9, 0x72, 0xcd, 0x33, 0x51, 0x1c, 0x76,
	0xbc, 0xa0, 0xb6, 0x5c, 0xb8, 0x97, 0x62, 0xfa, 0xd2, 0x22, 0xec, 0xa9, 0xe3, 0xce, 0xbb, 0x64,
	0x39, 0xf0, 0xe7, 0x51, 0x83, 0x19, 0x95, 0x02, 0x03, 0x83, 0x03, 0x7f, 0xbe, 0xe6, 0xa2, 0x11,
	0xb7, 0x29, 0x9a, 0x94, 0x7f, 0xcf, 0xc0, 0x7e, 0xe4, 0x0d, 0xc4, 0x3b, 0x7b, 0x3f, 0x9e, 0x11,
	0x7b, 0x4a, 0x3b, 0x57, 0xb7, 0x3a, 0xab, 0x0c, 0x1b, 0x1d, 0xc7, 0xb4, 0xa5, 0xc1, 0x6d, 0x28,
	0x76, 0x89, 0x69, 0x2d, 0x9f, 0x99, 0xef, 0x22, 0x17, 0x9b, 0xa7, 0xa6, 0xeb, 0x31, 0x14, 0x89,
	0x63, 0x7f, 0x06, 0x1b, 0x7d, 0xc2, 0xf8, 0x81, 0x73, 0x0f, 0x4a, 0x4f, 0x8e, 0x92, 0xed, 0x87,
	0x34, 0xce, 0x87, 0xb4, 0x3e, 0x87, 0x72, 0xf4, 0x37, 0xcf, 0xa7, 0x7d, 0xc2, 0x4c, 0x07, 0x37,
	0x94, 0xe7, 0xd6, 0x1d, 0x1e, 0x31, 0xf8, 0xb4, 0xd3, 0xfa, 0xe7, 0xc0, 0x6b, 0x78, 0x0a, 0x6e,
	0xf1, 0xcd, 0xcc, 0x64, 0xb4, 0x67, 0x7a, 0xac, 0xf1, 0x71, 0xd2, 0x6b, 0x69, 0xa7, 0xd9, 0x8f,
	0x50, 0x2c, 0x1b, 0x6d, 0x35, 0xf7, 0xc2, 0x4c, 0x99, 0x8b, 0xca, 0x55, 0x4b, 0xbf, 0x21, 0x5f,
	0xad, 0x62, 0xb4, 0x39, 0x7b, 0xdf, 0xc1, 0x9d, 0xe3, 0xf9, 0x3f, 0x6c, 0x03, 0x71, 0x8f, 0x65,
	0x53, 0x3c, 0x86, 0xa8, 0xb6, 0xfe, 0x90, 0x05, 0xe8, 0xd3, 0x31, 0xe5, 0x0e, 0x67, 0xe4, 0x36,
	0x27, 0xfd, 0x3d, 0xec, 0x30, 0xc7, 0x77, 0x6d, 0xc2, 0xef, 0x2c, 0x23, 0xc3, 0x24, 0xce, 0x7b,
	0x93, 0xd8, 0x32, 0xc3, 0x27, 0xfb, 0x8b, 0x61, 0x30, 0xf2, 0x54, 0x0e, 0x6c, 0x7c, 0x0d, 0x55,
	0x8f, 0xb9, 0xd4, 0x9e, 0xb2, 0xd9, 0xc8, 0xb4, 0x27, 0xf4, 0x3d, 0x9e, 0xb7, 0xf4, 0xe4, 0xa3,
	0xc4, 0xd4, 0x81, 0x1c, 0xa4, 0xf3, 0x31, 0x8d, 0x87, 0xf2, 0xe6, 0x3d, 0x9a, 0x10, 0x46, 0xa4,
	0xb3, 0xb5, 0xc4, 0x0c, 0xbc, 0xb3, 0xe0, 0x11, 0xbe, 0x80, 0xb2, 0x18, 0xed, 0x62, 0x73, 0x87,
	0xe1, 0x5a, 0x7a, 0x72, 0x98, 0x36, 0x5e, 0xb6, 0x7f, 0x4f, 0xa0, 0x1a, 0x9d, 0x31, 0x22, 0x18,
	0xd0, 0xbf, 0x6e, 0x8e, 0x21, 0x7b, 0xe0, 0x35, 0x73, 0x5a, 0x06, 0x34, 0x52, 0x30, 0xb9, 0x0f,
	0x9b, 0x8c, 0x92, 0xf9, 0x88, 0x20, 0xec, 0xa5, 0x27, 0xcd, 0x24, 0x8c, 0xbc, 0x38, 0xff, 0x43,
	0x30, 0xcc, 0x40, 0x67, 0xae, 0x1a, 0xd6, 0xfa, 0xbf, 0x2c, 0x6c, 0xca, 0x19, 0x55, 0x31, 0x43,
	0xef, 0xca, 0xd0, 0x2e, 0x41, 0xee, 0x45, 0xb7, 0x1d, 0x3e, 0x33, 0xb6, 0x5f, 0x9f, 0xf5, 0xdb,
	0xcf, 0xce, 0x46, 0x2f, 0xf4, 0x5e, 0x6f, 0x20, 0x13, 0xe1, 0x3e, 0xd4, 0x94, 0xb8, 0x3d, 0x18,
	0xe8, 0x83, 0xe1, 0x40, 0x26, 0x44, 0x7e, 0xf7, 0x97, 0x8a, 0xee, 0x59, 0x7b, 0xf8, 0x7c, 0x20,
	0xd3, 0xe2, 0x0e, 0x94, 0xce, 0xf5, 0x97, 0xaf, 0x86, 0x67, 0xa3, 0xe7, 0xfa, 0x70, 0x20, 0xcb,
	0xcb, 0x3e, 0xd4, 0xa4, 0xf0, 0xac, 0x73, 0xf1, 0xf2, 0xe2, 0x5c, 0xef, 0xc8, 0x2a, 0x73, 0x08,
	0x0d, 0xa9, 0xe8, 0xb6, 0xcf, 0xdb, 0xcf, 0xce, 0xba, 0x67, 0xed, 0xde, 0x50, 0x56, 0x1c, 0x0d,
	0xea, 0x83, 0xf3, 0x76, 0xaf, 0xd7, 0xed, 0xb7, 0x9f, 0x5d, 0xbc, 0x1c, 0xf5, 0xdb, 0xc3, 0x33,
	0x2c, 0x3d, 0x19, 0x6e, 0xfb, 0x54, 0x7f, 0x16, 0x95, 0x03, 0xca, 0x77, 0xa1, 0xfc, 0x5a, 0xef,
	0x0c, 0x2f, 0xfa, 0xdf, 0x0b, 0x69, 0x09, 0xa5, 0x4d, 0xa8, 0x28, 0x69, 0xe7, 0xe2, 0xd5, 0xcb,
	0xa1, 0x7c, 0xdc, 0xe7, 0x35, 0xbd, 0xad, 0x5b, 0x52, 0x56, 0x51, 0xaf, 0x07, 0x63, 0xc7, 0x66,
	0xa6, 0xed, 0x9b, 0x6c, 0x39, 0x1a, 0x87, 0x2f, 0x64, 0xad, 0xff, 0xad, 0x40, 0x25, 0x4e, 0xc2,
	0x7d, 0xa8, 0xcd, 0x88, 0x3d, 0x19, 0x5d, 0x9b, 0xf6, 0x28, 0xe2, 0xaf, 0xe2, 0x4d, 0x85, 0x21,
	0x21, 0xd6, 0xa0, 0x8e, 0x0a, 0xcb, 0xf1, 0xa8, 0x9a, 0x92, 0x5b, 0xa1, 0x31, 0x24, 0xcc, 0x07,
	0xb0, 0x2d, 0x09, 0x15, 0xb1, 0x93, 0x5f, 0xa5, 0x32, 0xc2, 0x17, 0x47, 0xa9, 0x8a, 0xda, 0xda,
	0x5a, 0xa9, 0x33, 0x24, 0xe4, 0x1f, 0xc1, 0x2e, 0x79, 0x47, 0x5d, 0x32, 0xa5, 0xa3, 0xb7, 0xa6,
	0x65, 0x79, 0x6a, 0x66, 0x71, 0x8d, 0xd6, 0x90, 0xd5, 0x3f, 0xa2, 0x65, 0xce, 0x35, 0x75, 0xd5,
	0xdc, 0xd2, 0x1a, 0xad, 0x21, 0x2f, 0x09, 0x11, 0xed, 0xdc, 0xb1, 0xe9, 0x52, 0xcd, 0xad, 0xac,
	0xd1, 0x1a, 0xf2, 0xfa, 0xb0, 0x0b, 0x65, 0x6f, 0xec, 0xb8, 0xc1, 0x29, 0x6b, 0x29, 0x52, 0x43,
	0xde, 0x25, 0xf6, 0xa0, 0xfa, 0xce, 0x1c, 0x33, 0xc7, 0x5d, 0x8e, 0x5c, 0xc2, 0xe8, 0x88, 0xe0,
	0x85, 0xe2, 0xa6, 0xdc, 0x90, 0x2f, 0x41, 0x7b, 0x50, 0x0d, 0x76, 0x6d, 0xce, 0xf9, 0xf8, 0x9d,
	0x54, 0xb9, 0x81, 0xd7, 0x8a, 0x62, 0xe3, 0x04, 0xf6, 0x94, 0x9c, 0x78, 0x9e, 0xe9, 0xb1, 0x00,
	0xc1, 0xe6, 0x5a, 0xbd, 0x21, 0xef, 0x1b, 0xc7, 0xd0, 0x54, 0xfa, 0x09, 0x25, 0x6c, 0x16, 0x4c,
	0xdf, 0x5f, 0xa7, 0x36, 0xe4, 0x25, 0xe4, 0x10, 0x1a, 0x81, 0x7f, 0x26, 0x44, 0x4d, 0x3d, 0x58,
	0xa9, 0x33, 0xe4, 0x0b, 0xe8, 0x31, 0x34, 0xaf, 0x78, 0x21, 0x39, 0xb5, 0x1c, 0x67, 0xf2, 0xc2,
	0xb4, 0x2c, 0x35, 0xf5, 0x68, 0x9d, 0xda, 0xc0, 0xd7, 0x29, 0xf4, 0xce, 0xdc, 0xb4, 0x7d, 0x46,
	0x47, 0x13, 0x32, 0x47, 0x44, 0xc4, 0xe4, 0xe3, 0x35, 0x5a, 0x43, 0x3b, 0x89, 0x2d, 0x3d, 0xe4,
	0x94, 0x88, 0x5a, 0xbe, 0xb3, 0x4e, 0x6d, 0xc8, 0x67, 0xad, 0x7b, 0x70, 0x10, 0xe7, 0xc5, 0xc4,
	0xbc, 0xba, 0x52, 0x2b, 0xdc, 0xbb, 0x6d, 0x88, 0x81, 0xaf, 0x5e, 0xc5, 0xc6, 0x11, 0xec, 0xc8,
	0x1d, 0xc6, 0xa8, 0xf7, 0xf1, 0x6a, 0xa5, 0x81, 0xaf, 0x5d, 0x88, 0xa9, 0x54, 0xce, 0xcc, 0xd0,
	0xd3, 0xf7, 0x57, 0xea, 0x0c, 0xf9, 0xc0, 0x15, 0x75, 0xa3, 0x4b, 0xa6, 0x4e, 0x10, 0xd7, 0x9f,
	0xae, 0x53, 0x1b, 0xf8, 0x08, 0x16, 0x8b, 0x06, 0x83, 0xb8, 0xe1, 0xe4, 0xcf, 0xd6, 0x68, 0x0d,
	0x7c, 0x1c, 0x13, 0xb1, 0xcf, 0xf9, 0x1d, 0x37, 0xfb, 0xf9, 0x4a, 0x9d, 0x21, 0x9e, 0xc5, 0x30,
	0xd5, 0x60, 0x5c, 0x44, 0x0d, 0x3e, 0x5a, 0xa5, 0x32, 0xb4, 0xc7, 0x0a, 0x7c, 0x89, 0xc1, 0x35,
	0x71, 0x27, 0xde, 0xa5, 0x45, 0xc6, 0x74, 0xa2, 0x66, 0xff, 0xd5, 0x6d, 0x43, 0x0c, 0xed, 0x8b,
	0xb4, 0x21, 0x9c, 0x06, 0xe1, 0x2a, 0x5f, 0xde, 0x36, 0xc4, 0xd0, 0x9e, 0xe0, 0x90, 0xfb, 0x70,
	0x1c, 0xe0, 0x42, 0x47, 0xcc, 0x77, 0x5d, 0xca, 0x5e, 0x44, 0x53, 0xdc, 0x57, 0x1f, 0x32, 0xcc,
	0xd0, 0xbe, 0xc6, 0x61, 0x77, 0x60, 0x1f, 0x0f, 0x7d, 0xe5, 0x5b, 0xd6, 0xc8, 0xf0, 0x5d, 0x4a,
	0x7c, 0xb5, 0xce, 0x37, 0xeb, 0x07, 0x18, 0xda, 0x5f, 0x2b, 0x62, 0x31, 0x87, 0x11, 0x2b, 0xe1,
	0x8a, 0xbf, 0x59, 0xad, 0x34, 0xb4, 0xbf, 0x55, 0x7e, 0x12, 0xca, 0x98, 0x33, 0xbe, 0x5d, 0xa9,
	0x33, 0xb4, 0xbf, 0xc3, 0x16, 0xf2, 0xa7, 0x4d, 0xf9, 0x90, 0x8b, 0x4d, 0x51, 0x1d, 0x0a, 0x0b,
	0xd1, 0x33, 0xaa, 0x6e, 0xa0, 0x0e, 0x05, 0xdb, 0x1c, 0xbf, 0xb5, 0xc3, 0x87, 0x80, 0x06, 0xc0,
	0xc2, 0xf1, 0x4c, 0x66, 0x3a, 0xb6, 0xde, 0x95, 0x95, 0x2a, 0xec, 0x21, 0x36, 0x94, 0x45, 0xb1,
	0xce, 0xc8, 0x14, 0xe1, 0x3d, 0xf3, 0xe7, 0x86, 0x2c, 0x50, 0x4d, 0xa8, 0xa8, 0xf9, 0x23, 0x3b,
	0xfc, 0xf6, 0xd8, 0x00, 0xc0, 0xca, 0xea, 0x2e, 0x47, 0xe6, 0x44, 0x16, 0xa5, 0x26, 0x54, 0x02,
	0x19, 0x5f, 0x47, 0xd6, 0xa3, 0x7d, 0xa8, 0xe1, 0x19, 0xbc, 0x99, 0xe3, 0x32, 0xb1, 0x46, 0x51,
	0x15, 0x4c, 0x54, 0x44, 0x8d, 0x82, 0xc2, 0x4e, 0x6e, 0x68, 0x3c, 0x33, 0x6d, 0xea, 0x51, 0x31,
	0xad, 0xa4, 0x1e, 0x4d, 0x10, 0x1f, 0x59, 0x76, 0x0e, 0x60, 0xbb, 0x8b, 0x59, 0xa9, 0x4b, 0x89,
	0x75, 0x49, 0x5d, 0xde, 0xf5, 0x86, 0xaf, 0x86, 0xbc, 0x6b, 0x52, 0xc2, 0xea, 0x9a, 0x6e, 0xa5,
	0xa6, 0xba, 0x8c, 0x78, 0xff, 0x54, 0x5f, 0xd5, 0x3f, 0x6d, 0xaf, 0xe8, 0x9f, 0x1a, 0xd1, 0xa6,
	0x6c, 0x67, 0x55, 0xdf, 0xb4, 0x8b, 0xd6, 0xc2, 0x9d, 0xbc, 0x69, 0xf7, 0xbb, 0x83, 0xcb, 0x5e,
	0xbb, 0x73, 0xd6, 0x95, 0x45, 0xe6, 0x18, 0x9a, 0x6a, 0xe5, 0x73, 0xd3, 0x36, 0x1d, 0x5b, 0x06,
	0x44, 0xf8, 0xa6, 0xa5, 0xd4, 0x3d, 0xf3, 0x8a, 0xca, 0xd2, 0xc2, 0x01, 0xe5, 0xc8, 0x08, 0x3c,
	0x86, 0xe4, 0x2d, 0xb5, 0xb1, 0xaa, 0x64, 0x78, 0x46, 0xb1, 0xa9, 0xcf, 0x5c, 0x62, 0xc5, 0x57,
	0x3b, 0x50, 0x38, 0x45, 0x22, 0x57, 0x16, 0x14, 0x25, 0x94, 0x23, 0x8f, 0x14, 0xbf, 0x3c, 0x7c,
	0x32, 0xd3, 0xbb, 0xb2, 0x72, 0x6c, 0x43, 0x91, 0x77, 0x2e, 0xa2, 0xcd, 0x3a, 0x56, 0x4d, 0x19,
	0x76, 0x25, 0x42, 0x76, 0x82, 0xb2, 0x7d, 0xa8, 0x59, 0xc4, 0x63, 0x23, 0xd1, 0x5e, 0xf3, 0x7a,
	0x2b, 0xcb, 0x43, 0x1d, 0x0a, 0x7c, 0x3e, 0x9f, 0xa0, 0xdd, 0xc5, 0xaf, 0xa9, 0xc9, 0x06, 0xf0,
	0x5e, 0xf4, 0xab, 0xdb, 0x88, 0xf1, 0xab, 0x79, 0x4b, 0x65, 0x8c, 0xb4, 0x43, 0x61, 0xf5, 0x97,
	0xa9, 0xff, 0x4b, 0xa8, 0xcc, 0xa8, 0xeb, 0x8c, 0x02, 0x13, 0x9f, 0xe0, 0x3d, 0x23, 0xd9, 0xcf,
	0x3f, 0xa7, 0xae, 0xf3, 0xc6, 0xb4, 0x7b, 0x8e, 0x47, 0x5b, 0x3d, 0x28, 0x45, 0x7e, 0xf2, 0x58,
	0xe1, 0x2b, 0x04, 0x11, 0xd6, 0x00, 0xc0, 0x15, 0x05, 0xc3, 0xb3, 0xca, 0xdd, 0xd7, 0xa6, 0x2d,
	0xbf, 0xe9, 0x97, 0x61, 0x03, 0x2d, 0xe1, 0xdb, 0x70, 0xcb, 0x81, 0x52, 0xf4, 0x82, 0xa1, 0x28,
	0x4f, 0x46, 0x21, 0x68, 0x19, 0xd5, 0xb5, 0x8a, 0x48, 0x8f, 0x68, 0xc4, 0xbf, 0x24, 0x3c, 0x84,
	0x0d, 0xcb, 0xf4, 0xf8, 0xcd, 0x32, 0x97, 0xf2, 0x1c, 0x1f, 0x59, 0x9d, 0x5f, 0x64, 0x5b, 0xbf,
	0xcb, 0x42, 0x2d, 0x21, 0x43, 0x57, 0xaa, 0xee, 0xd2, 0x94, 0xdf, 0x30, 0x38, 0xd7, 0x03, 0x61,
	0x3c, 0x5f, 0x78, 0x8c, 0xb8, 0x4c, 0xf8, 0x28, 0x78, 0x48, 0x41, 0xbf, 0x05, 0x09, 0x83, 0x87,
	0x20, 0x3e, 0x33, 0xe5, 0x95, 0x0f, 0x45, 0x3e, 0x19, 0x91, 0xf0, 0x29, 0x4a, 0x4a, 0x0c, 0x99,
	0x1c, 0x76, 0xa1, 0x2c, 0x4f, 0x1e, 0xcd, 0x0d, 0x4a, 0x6a, 0x48, 0x69, 0x51, 0x85, 0xb4, 0x1c,
	0x1b, 0xc9, 0x19, 0x10, 0x53, 0x19, 0x51, 0x55, 0xf0, 0x25, 0x32, 0xc4, 0x36, 0xfc, 0x74, 0x1e,
	0xa2, 0x2a, 0xb3, 0xc2, 0xb7, 0x50, 0x72, 0xf1, 0xe5, 0x6a, 0x84, 0xb0, 0x56, 0x11, 0xd6, 0x4f,
	0x56, 0xc3, 0x2a, 0x9e, 0xb9, 0x10, 0xdc, 0x7f, 0xcb, 0x40, 0x33, 0x55, 0xc3, 0x0f, 0x2c, 0x16,
	0x8d, 0x12, 0x45, 0xe1, 0xab, 0x77, 0xc3, 0x87, 0x9f, 0x10, 0xef, 0xdc, 0xaa, 0xec, 0xb8, 0x11,
	0xdb, 0xba, 0x00, 0x26, 0x1f, 0xf9, 0x32, 0x8d, 0x10, 0x9f, 0x96, 0xff, 0xff, 0xe7, 0x93, 0xcc,
	0x0f, 0x3f, 0x9f, 0x64, 0x7e, 0xfa, 0xf9, 0x24, 0xf3, 0xc7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x68,
	0x9f, 0xd1, 0xa4, 0x69, 0x26, 0x00, 0x00,
}

func (m *TableCrawlJob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableCrawlJob) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.Value != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Value)))
		i += copy(dAtA[i:], *m.Value)
	}
	if m.Time != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Time))
	}
	if m.Name != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableESPortsPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableESPortsPlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Id))
	}
	if m.Status != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Status))
	}
	if m.LastPullTime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.LastPullTime))
	}
	if m.CurrentRoomLiveId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.CurrentRoomLiveId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.CreateTime))
	}
	if m.LastLoginTime != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.LastLoginTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESPortsJumpInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESPortsJumpInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.JumpType != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.JumpType))
	}
	if m.JumpObjId != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.JumpObjId))
	}
	if m.JumpObject != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.JumpObject))
	}
	if m.JumpUrl != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.JumpUrl)))
		i += copy(dAtA[i:], *m.JumpUrl)
	}
	if m.JumpStyle != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.JumpStyle))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableESPortsCarousel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableESPortsCarousel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Id))
	}
	if m.Title != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Status != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Status))
	}
	if m.ImageUrl != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.ImageUrl)))
		i += copy(dAtA[i:], *m.ImageUrl)
	}
	if m.ActionCount != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.ActionCount))
	}
	if m.MenuId != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.MenuId))
	}
	if m.JumpInfo != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(m.JumpInfo.Size()))
		n1, err := m.JumpInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Weight != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Weight))
	}
	if m.Types != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Types))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableESPortsLabel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableESPortsLabel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Id))
	}
	if m.Title != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.Status != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Status))
	}
	if m.Weight != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Weight))
	}
	if m.MenuId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.MenuId))
	}
	if m.LabelId != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.LabelId))
	}
	if m.LabelType != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.LabelType))
	}
	if m.IconUrl != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.IconUrl)))
		i += copy(dAtA[i:], *m.IconUrl)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ThumbsUpInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThumbsUpInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Id))
	}
	if m.ThumbsUpCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.ThumbsUpCount))
	}
	if m.AppLabelID != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.AppLabelID))
	}
	if m.MenuId != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.MenuId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableESportComment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableESportComment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Id))
	}
	if m.Content != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.ThumbsUpCount != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.ThumbsUpCount))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.CreateTime))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.PlayerId))
	}
	if m.PlayerNickName != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.PlayerNickName)))
		i += copy(dAtA[i:], *m.PlayerNickName)
	}
	if m.ParentId != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.ParentId))
	}
	if m.MenuId != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.MenuId))
	}
	if m.AppLabelID != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.AppLabelID))
	}
	if m.ReplyCount != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.ReplyCount))
	}
	if m.Status != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Status))
	}
	if m.CommentId != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.CommentId))
	}
	if m.PlayerIconUrl != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.PlayerIconUrl)))
		i += copy(dAtA[i:], *m.PlayerIconUrl)
	}
	if m.IsThumbsUp != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.IsThumbsUp))
	}
	if m.ReplyPlayerId != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.ReplyPlayerId))
	}
	if m.ReplyPlayerNickName != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.ReplyPlayerNickName)))
		i += copy(dAtA[i:], *m.ReplyPlayerNickName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableESPortsRealTimeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableESPortsRealTimeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Id))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Status != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Status))
	}
	if m.IssueTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.IssueTime))
	}
	if m.CoverBigImageUrl != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.CoverBigImageUrl)))
		i += copy(dAtA[i:], *m.CoverBigImageUrl)
	}
	if len(m.CoverSmallImageUrl) > 0 {
		for _, s := range m.CoverSmallImageUrl {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Title != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.Content != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.AuthorPlayerId != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.AuthorPlayerId))
	}
	if m.AuthorAccount != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AuthorAccount)))
		i += copy(dAtA[i:], *m.AuthorAccount)
	}
	if m.Author != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Author)))
		i += copy(dAtA[i:], *m.Author)
	}
	if m.DataSource != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.DataSource)))
		i += copy(dAtA[i:], *m.DataSource)
	}
	if m.LookCount != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.LookCount))
	}
	if m.LookCountSys != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.LookCountSys))
	}
	if m.ThumbsUpCount != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.ThumbsUpCount))
	}
	if m.ThumbsUpCountSys != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.ThumbsUpCountSys))
	}
	if m.AppLabelID != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.AppLabelID))
	}
	if m.AppLabelName != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AppLabelName)))
		i += copy(dAtA[i:], *m.AppLabelName)
	}
	if m.BeginEffectiveTime != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.BeginEffectiveTime))
	}
	if m.EffectiveType != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.EffectiveType))
	}
	if m.MenuId != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.MenuId))
	}
	if m.CommentCount != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.CommentCount))
	}
	if m.ShowType != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.ShowType))
	}
	if len(m.LabelIds) > 0 {
		for _, num := range m.LabelIds {
			dAtA[i] = 0xc8
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTableStructESports(dAtA, i, uint64(num))
		}
	}
	if m.Note != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Note)))
		i += copy(dAtA[i:], *m.Note)
	}
	if m.IsThumbsUp != nil {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.IsThumbsUp))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UniqueGameInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UniqueGameInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MatchName != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.MatchName)))
		i += copy(dAtA[i:], *m.MatchName)
	}
	if m.MatchStage != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.MatchStage)))
		i += copy(dAtA[i:], *m.MatchStage)
	}
	if m.Bo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Bo)))
		i += copy(dAtA[i:], *m.Bo)
	}
	if m.TeamAName != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.TeamAName)))
		i += copy(dAtA[i:], *m.TeamAName)
	}
	if m.TeamBName != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.TeamBName)))
		i += copy(dAtA[i:], *m.TeamBName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableESPortsVideoInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableESPortsVideoInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Id))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.CreateTime))
	}
	if m.IssueTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.IssueTime))
	}
	if m.Status != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Status))
	}
	if m.CoverImageUrl != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.CoverImageUrl)))
		i += copy(dAtA[i:], *m.CoverImageUrl)
	}
	if m.Title != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.VideoUrl != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.VideoUrl)))
		i += copy(dAtA[i:], *m.VideoUrl)
	}
	if m.AuthorPlayerId != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.AuthorPlayerId))
	}
	if m.AuthorAccount != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AuthorAccount)))
		i += copy(dAtA[i:], *m.AuthorAccount)
	}
	if m.Author != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Author)))
		i += copy(dAtA[i:], *m.Author)
	}
	if m.DataSource != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.DataSource)))
		i += copy(dAtA[i:], *m.DataSource)
	}
	if m.LookCount != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.LookCount))
	}
	if m.LookCountSys != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.LookCountSys))
	}
	if m.ThumbsUpCount != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.ThumbsUpCount))
	}
	if m.ThumbsUpCountSys != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.ThumbsUpCountSys))
	}
	if m.AppLabelID != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.AppLabelID))
	}
	if m.AppLabelName != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AppLabelName)))
		i += copy(dAtA[i:], *m.AppLabelName)
	}
	if m.BeginEffectiveTime != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.BeginEffectiveTime))
	}
	if m.EffectiveType != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.EffectiveType))
	}
	if m.VideoType != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.VideoType))
	}
	if m.IsRecommend != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.IsRecommend))
	}
	if m.IsHot != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.IsHot))
	}
	if m.UniqueGameId != nil {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.UniqueGameId))
	}
	if m.MenuId != nil {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.MenuId))
	}
	if m.CommentCount != nil {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.CommentCount))
	}
	if m.DataId != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.DataId))
	}
	if len(m.LabelIds) > 0 {
		for _, num := range m.LabelIds {
			dAtA[i] = 0xf0
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTableStructESports(dAtA, i, uint64(num))
		}
	}
	if m.Note != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Note)))
		i += copy(dAtA[i:], *m.Note)
	}
	if m.Content != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.IsThumbsUp != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.IsThumbsUp))
	}
	if m.FlowCount != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.FlowCount))
	}
	if m.MatchName != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.MatchName)))
		i += copy(dAtA[i:], *m.MatchName)
	}
	if m.FanCount != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.FanCount))
	}
	if m.PlayerIconUrl != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.PlayerIconUrl)))
		i += copy(dAtA[i:], *m.PlayerIconUrl)
	}
	if m.UniqueGameName != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.UniqueGameName)))
		i += copy(dAtA[i:], *m.UniqueGameName)
	}
	if m.FlowCountSys != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.FlowCountSys))
	}
	if m.AuthorPlayerType != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.AuthorPlayerType))
	}
	if m.Operator != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Operator)))
		i += copy(dAtA[i:], *m.Operator)
	}
	if m.IsFollow != nil {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.IsFollow))
	}
	if m.IsAuthorFollow != nil {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.IsAuthorFollow))
	}
	if m.AuthorNickName != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AuthorNickName)))
		i += copy(dAtA[i:], *m.AuthorNickName)
	}
	if m.UniqueGameInfo != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(m.UniqueGameInfo.Size()))
		n2, err := m.UniqueGameInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableESPortsFlowInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableESPortsFlowInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.PlayerId))
	}
	if m.DataId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.DataId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableESPortsSysMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableESPortsSysMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Id))
	}
	if m.RecipientType != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.RecipientType))
	}
	if m.Title != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.Content != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.Status != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Status))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.CreateTime))
	}
	if m.JumpInfo != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(m.JumpInfo.Size()))
		n3, err := m.JumpInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.EffectiveTime != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.EffectiveTime))
	}
	if m.EffectiveType != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.EffectiveType))
	}
	if m.IsPush != nil {
		dAtA[i] = 0x58
		i++
		if *m.IsPush {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsMessageCenter != nil {
		dAtA[i] = 0x60
		i++
		if *m.IsMessageCenter {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Icon != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Icon)))
		i += copy(dAtA[i:], *m.Icon)
	}
	if m.FailureTime != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.FailureTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableESPortsGuessBetRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableESPortsGuessBetRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrderId == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("OrderId")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.OrderId))
	}
	if m.UniqueGameId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.UniqueGameId))
	}
	if m.UniqueGameGuessId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.UniqueGameGuessId))
	}
	if m.AppLabelId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.AppLabelId))
	}
	if m.AppLabelName != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AppLabelName)))
		i += copy(dAtA[i:], *m.AppLabelName)
	}
	if m.ApiOrigin != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.ApiOrigin))
	}
	if m.ApiOriginName != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.ApiOriginName)))
		i += copy(dAtA[i:], *m.ApiOriginName)
	}
	if m.GameId != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.GameId)))
		i += copy(dAtA[i:], *m.GameId)
	}
	if m.MornRollGuessFlag != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.MornRollGuessFlag))
	}
	if m.PlayInfo != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(m.PlayInfo.Size()))
		n4, err := m.PlayInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.GameInfo != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(m.GameInfo.Size()))
		n5, err := m.GameInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.BetId != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.BetId)))
		i += copy(dAtA[i:], *m.BetId)
	}
	if m.BetTitle != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.BetTitle)))
		i += copy(dAtA[i:], *m.BetTitle)
	}
	if m.BetNum != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.BetNum)))
		i += copy(dAtA[i:], *m.BetNum)
	}
	if m.BetName != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.BetName)))
		i += copy(dAtA[i:], *m.BetName)
	}
	if m.Odds != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Odds)))
		i += copy(dAtA[i:], *m.Odds)
	}
	if m.BetAmount != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.BetAmount))
	}
	if m.SuccessAmount != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.SuccessAmount))
	}
	if m.FailAmount != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.FailAmount))
	}
	if m.DisableAmount != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.DisableAmount))
	}
	if m.IllegalAmount != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.IllegalAmount))
	}
	if m.Reason != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Reason)))
		i += copy(dAtA[i:], *m.Reason)
	}
	if m.ReasonDetail != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.ReasonDetail)))
		i += copy(dAtA[i:], *m.ReasonDetail)
	}
	if m.BetStatus != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.BetStatus)))
		i += copy(dAtA[i:], *m.BetStatus)
	}
	if m.BetResult != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.BetResult)))
		i += copy(dAtA[i:], *m.BetResult)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GuessBetPlayerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuessBetPlayerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.PlayId))
	}
	if m.Account != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.Phone != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Phone)))
		i += copy(dAtA[i:], *m.Phone)
	}
	if m.NickName != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GuessBetGameInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuessBetGameInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GameName != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.GameName)))
		i += copy(dAtA[i:], *m.GameName)
	}
	if m.TeamAName != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.TeamAName)))
		i += copy(dAtA[i:], *m.TeamAName)
	}
	if m.TeamBName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.TeamBName)))
		i += copy(dAtA[i:], *m.TeamBName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BetSlipReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BetSlipReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Id))
	}
	if m.Account != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.GameInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(m.GameInfo.Size()))
		n6, err := m.GameInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.AppLabelID != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.AppLabelID))
	}
	if m.AppLabelName != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AppLabelName)))
		i += copy(dAtA[i:], *m.AppLabelName)
	}
	if m.Players != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Players))
	}
	if m.BetSlips != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.BetSlips))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.CreateTime))
	}
	if m.BetAmount != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.BetAmount))
	}
	if m.SuccessAmount != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.SuccessAmount))
	}
	if m.FailAmount != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.FailAmount))
	}
	if m.DisableAmount != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.DisableAmount))
	}
	if m.IllegalAmount != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.IllegalAmount))
	}
	if m.SumAmount != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.SumAmount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableESPortsGameOrderSysMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableESPortsGameOrderSysMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrderId == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("OrderId")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.OrderId))
	}
	if m.UniqueGameId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.UniqueGameId))
	}
	if m.BetTime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.BetTime))
	}
	if m.Odds != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Odds)))
		i += copy(dAtA[i:], *m.Odds)
	}
	if m.BetResult != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.BetResult)))
		i += copy(dAtA[i:], *m.BetResult)
	}
	if m.BetTitle != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.BetTitle)))
		i += copy(dAtA[i:], *m.BetTitle)
	}
	if m.BetNum != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.BetNum)))
		i += copy(dAtA[i:], *m.BetNum)
	}
	if m.BetName != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.BetName)))
		i += copy(dAtA[i:], *m.BetName)
	}
	if m.GameName != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.GameName)))
		i += copy(dAtA[i:], *m.GameName)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.ResultAmount != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.ResultAmount))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.PlayerId))
	}
	if m.BetAmount != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.BetAmount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableESPortsLiveRoomMsgLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableESPortsLiveRoomMsgLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Id))
	}
	if m.SenderPlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.SenderPlayerId))
	}
	if m.NickName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.Content != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.HeadIcon != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.HeadIcon)))
		i += copy(dAtA[i:], *m.HeadIcon)
	}
	if m.LiveId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.LiveId))
	}
	if m.DataType != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.DataType))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableESPortsBetRiskOneDay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableESPortsBetRiskOneDay) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.PlayerId))
	}
	if m.DateStr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.DateStr)))
		i += copy(dAtA[i:], *m.DateStr)
	}
	if m.AmountDay != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.AmountDay))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableESPortsBetRiskPlatFormDaySum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableESPortsBetRiskPlatFormDaySum) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DateStr != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.DateStr)))
		i += copy(dAtA[i:], *m.DateStr)
	}
	if m.AmountDaySum != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.AmountDaySum))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableESportsExchangeCfg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableESportsExchangeCfg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Id))
	}
	if m.Coin != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Coin))
	}
	if m.DailyGive != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.DailyGive))
	}
	if m.FirstGive != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.FirstGive))
	}
	if len(m.Rate) > 0 {
		for _, msg := range m.Rate {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintTableStructESports(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ExchangeRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeRate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ratio != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Ratio))
	}
	if m.Odds != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Odds))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableESportsGiveWhiteList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableESportsGiveWhiteList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.PlayerId))
	}
	if m.NickName != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.Account != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.Note != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Note)))
		i += copy(dAtA[i:], *m.Note)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableESPortsExChangeFirst) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableESPortsExChangeFirst) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.PlayerId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RecentData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecentData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Id))
	}
	if m.TournamentBiaoxian != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(m.TournamentBiaoxian.Size()))
		n7, err := m.TournamentBiaoxian.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.StrengthIndex != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(m.StrengthIndex.Size()))
		n8, err := m.StrengthIndex.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.MatchData) > 0 {
		for _, msg := range m.MatchData {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintTableStructESports(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.MatchRecord != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(m.MatchRecord.Size()))
		n9, err := m.MatchRecord.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.MatchRecordA != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(m.MatchRecordA.Size()))
		n10, err := m.MatchRecordA.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.MatchRecordB != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(m.MatchRecordB.Size()))
		n11, err := m.MatchRecordB.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TournamentBiaoxian) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TournamentBiaoxian) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TeamA != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(m.TeamA.Size()))
		n12, err := m.TeamA.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.TeamB != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(m.TeamB.Size()))
		n13, err := m.TeamB.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TeamBX) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamBX) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TeamID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.TeamID)))
		i += copy(dAtA[i:], *m.TeamID)
	}
	if m.KDA != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.KDA)))
		i += copy(dAtA[i:], *m.KDA)
	}
	if m.AVERAGE_KILLS != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AVERAGE_KILLS)))
		i += copy(dAtA[i:], *m.AVERAGE_KILLS)
	}
	if m.AVERAGE_ASSISTS != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AVERAGE_ASSISTS)))
		i += copy(dAtA[i:], *m.AVERAGE_ASSISTS)
	}
	if m.AVERAGE_DEATHS != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AVERAGE_DEATHS)))
		i += copy(dAtA[i:], *m.AVERAGE_DEATHS)
	}
	if m.MINUTE_HITS != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.MINUTE_HITS)))
		i += copy(dAtA[i:], *m.MINUTE_HITS)
	}
	if m.MINUTE_ECONOMIC != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.MINUTE_ECONOMIC)))
		i += copy(dAtA[i:], *m.MINUTE_ECONOMIC)
	}
	if m.MINUTE_DAMAGEDEALT != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.MINUTE_DAMAGEDEALT)))
		i += copy(dAtA[i:], *m.MINUTE_DAMAGEDEALT)
	}
	if m.SMALLDRAGON_RATE != nil {
		dAtA[i] = 0x49
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.SMALLDRAGON_RATE))))
		i += 8
	}
	if m.BIGDRAGON_RATE != nil {
		dAtA[i] = 0x51
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.BIGDRAGON_RATE))))
		i += 8
	}
	if m.VICTORY_RATE != nil {
		dAtA[i] = 0x59
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.VICTORY_RATE))))
		i += 8
	}
	if m.VICTORY_COUNT != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.VICTORY_COUNT))
	}
	if m.FAIl_COUNT != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.FAIl_COUNT))
	}
	if m.ContinuityCount != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.ContinuityCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StrengthIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StrengthIndex) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HandWinTeamA != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.HandWinTeamA)))
		i += copy(dAtA[i:], *m.HandWinTeamA)
	}
	if m.HandWinTeamB != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.HandWinTeamB)))
		i += copy(dAtA[i:], *m.HandWinTeamB)
	}
	if m.HandLoseTeamA != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.HandLoseTeamA)))
		i += copy(dAtA[i:], *m.HandLoseTeamA)
	}
	if m.HandLoseTeamB != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.HandLoseTeamB)))
		i += copy(dAtA[i:], *m.HandLoseTeamB)
	}
	if m.RecordWinTeamA != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.RecordWinTeamA)))
		i += copy(dAtA[i:], *m.RecordWinTeamA)
	}
	if m.RecordWinTeamB != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.RecordWinTeamB)))
		i += copy(dAtA[i:], *m.RecordWinTeamB)
	}
	if m.RecordLoseTeamA != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.RecordLoseTeamA)))
		i += copy(dAtA[i:], *m.RecordLoseTeamA)
	}
	if m.RecordLoseTeamB != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.RecordLoseTeamB)))
		i += copy(dAtA[i:], *m.RecordLoseTeamB)
	}
	if m.AverageKillsTeamA != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AverageKillsTeamA)))
		i += copy(dAtA[i:], *m.AverageKillsTeamA)
	}
	if m.AverageKillsTeamB != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AverageKillsTeamB)))
		i += copy(dAtA[i:], *m.AverageKillsTeamB)
	}
	if m.AverageTowerTeamA != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AverageTowerTeamA)))
		i += copy(dAtA[i:], *m.AverageTowerTeamA)
	}
	if m.AverageTowerTeamB != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AverageTowerTeamB)))
		i += copy(dAtA[i:], *m.AverageTowerTeamB)
	}
	if m.AverageMoneyTeamA != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AverageMoneyTeamA)))
		i += copy(dAtA[i:], *m.AverageMoneyTeamA)
	}
	if m.AverageMoneyTeamB != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AverageMoneyTeamB)))
		i += copy(dAtA[i:], *m.AverageMoneyTeamB)
	}
	if m.ScoreTeamA != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.ScoreTeamA)))
		i += copy(dAtA[i:], *m.ScoreTeamA)
	}
	if m.ScoreTeamB != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.ScoreTeamB)))
		i += copy(dAtA[i:], *m.ScoreTeamB)
	}
	if m.VictoryRateA != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.VictoryRateA)))
		i += copy(dAtA[i:], *m.VictoryRateA)
	}
	if m.VictoryRateB != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.VictoryRateB)))
		i += copy(dAtA[i:], *m.VictoryRateB)
	}
	if m.AverageTimeA != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AverageTimeA)))
		i += copy(dAtA[i:], *m.AverageTimeA)
	}
	if m.AverageTimeB != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AverageTimeB)))
		i += copy(dAtA[i:], *m.AverageTimeB)
	}
	if m.AverageAssistsTeamA != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AverageAssistsTeamA)))
		i += copy(dAtA[i:], *m.AverageAssistsTeamA)
	}
	if m.AverageAssistsTeamB != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AverageAssistsTeamB)))
		i += copy(dAtA[i:], *m.AverageAssistsTeamB)
	}
	if m.AverageDeathsTeamA != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AverageDeathsTeamA)))
		i += copy(dAtA[i:], *m.AverageDeathsTeamA)
	}
	if m.AverageDeathsTeamB != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AverageDeathsTeamB)))
		i += copy(dAtA[i:], *m.AverageDeathsTeamB)
	}
	if m.AverageKdaTeamA != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AverageKdaTeamA)))
		i += copy(dAtA[i:], *m.AverageKdaTeamA)
	}
	if m.AverageKdaTeamB != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AverageKdaTeamB)))
		i += copy(dAtA[i:], *m.AverageKdaTeamB)
	}
	if m.FirstBloodKillTeamA != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.FirstBloodKillTeamA)))
		i += copy(dAtA[i:], *m.FirstBloodKillTeamA)
	}
	if m.FirstBloodKillTeamB != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.FirstBloodKillTeamB)))
		i += copy(dAtA[i:], *m.FirstBloodKillTeamB)
	}
	if m.MinuteDamageTeamA != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.MinuteDamageTeamA)))
		i += copy(dAtA[i:], *m.MinuteDamageTeamA)
	}
	if m.MinuteDamageTeamB != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.MinuteDamageTeamB)))
		i += copy(dAtA[i:], *m.MinuteDamageTeamB)
	}
	if m.FirstTowerKillTeamA != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.FirstTowerKillTeamA)))
		i += copy(dAtA[i:], *m.FirstTowerKillTeamA)
	}
	if m.FirstTowerKillTeamB != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.FirstTowerKillTeamB)))
		i += copy(dAtA[i:], *m.FirstTowerKillTeamB)
	}
	if m.AverageMoneyDiffTeamA != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AverageMoneyDiffTeamA)))
		i += copy(dAtA[i:], *m.AverageMoneyDiffTeamA)
	}
	if m.AverageMoneyDiffTeamB != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AverageMoneyDiffTeamB)))
		i += copy(dAtA[i:], *m.AverageMoneyDiffTeamB)
	}
	if m.MinuteMoneyTeamA != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.MinuteMoneyTeamA)))
		i += copy(dAtA[i:], *m.MinuteMoneyTeamA)
	}
	if m.MinuteMoneyTeamB != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.MinuteMoneyTeamB)))
		i += copy(dAtA[i:], *m.MinuteMoneyTeamB)
	}
	if m.MinuteHitsTeamA != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.MinuteHitsTeamA)))
		i += copy(dAtA[i:], *m.MinuteHitsTeamA)
	}
	if m.MinuteHitsTeamB != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.MinuteHitsTeamB)))
		i += copy(dAtA[i:], *m.MinuteHitsTeamB)
	}
	if m.AverageDragonTeamA != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AverageDragonTeamA)))
		i += copy(dAtA[i:], *m.AverageDragonTeamA)
	}
	if m.AverageDragonTeamB != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AverageDragonTeamB)))
		i += copy(dAtA[i:], *m.AverageDragonTeamB)
	}
	if m.AverageBaronTeamA != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AverageBaronTeamA)))
		i += copy(dAtA[i:], *m.AverageBaronTeamA)
	}
	if m.AverageBaronTeamB != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AverageBaronTeamB)))
		i += copy(dAtA[i:], *m.AverageBaronTeamB)
	}
	if m.RateDragonTeamA != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.RateDragonTeamA)))
		i += copy(dAtA[i:], *m.RateDragonTeamA)
	}
	if m.RateDragonTeamB != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.RateDragonTeamB)))
		i += copy(dAtA[i:], *m.RateDragonTeamB)
	}
	if m.RateBaronTeamA != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.RateBaronTeamA)))
		i += copy(dAtA[i:], *m.RateBaronTeamA)
	}
	if m.RateBaronTeamB != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.RateBaronTeamB)))
		i += copy(dAtA[i:], *m.RateBaronTeamB)
	}
	if m.MinuteWardsPlacedTeamA != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.MinuteWardsPlacedTeamA)))
		i += copy(dAtA[i:], *m.MinuteWardsPlacedTeamA)
	}
	if m.MinuteWardsPlacedTeamB != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.MinuteWardsPlacedTeamB)))
		i += copy(dAtA[i:], *m.MinuteWardsPlacedTeamB)
	}
	if m.MinuteWardsKilledTeamA != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.MinuteWardsKilledTeamA)))
		i += copy(dAtA[i:], *m.MinuteWardsKilledTeamA)
	}
	if m.MinuteWardsKilledTeamB != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.MinuteWardsKilledTeamB)))
		i += copy(dAtA[i:], *m.MinuteWardsKilledTeamB)
	}
	if m.AverageBeTurretKillsTeamA != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AverageBeTurretKillsTeamA)))
		i += copy(dAtA[i:], *m.AverageBeTurretKillsTeamA)
	}
	if m.AverageBeTurretKillsTeamB != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AverageBeTurretKillsTeamB)))
		i += copy(dAtA[i:], *m.AverageBeTurretKillsTeamB)
	}
	if m.RateFullBureauTeamA != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.RateFullBureauTeamA)))
		i += copy(dAtA[i:], *m.RateFullBureauTeamA)
	}
	if m.RateFullBureauTeamB != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.RateFullBureauTeamB)))
		i += copy(dAtA[i:], *m.RateFullBureauTeamB)
	}
	if m.TotalDragonTeamA != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.TotalDragonTeamA)))
		i += copy(dAtA[i:], *m.TotalDragonTeamA)
	}
	if m.TotalDragonTeamB != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.TotalDragonTeamB)))
		i += copy(dAtA[i:], *m.TotalDragonTeamB)
	}
	if m.TotalBaronTeamA != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.TotalBaronTeamA)))
		i += copy(dAtA[i:], *m.TotalBaronTeamA)
	}
	if m.TotalBaronTeamB != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.TotalBaronTeamB)))
		i += copy(dAtA[i:], *m.TotalBaronTeamB)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MatchData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.PlayerID)))
		i += copy(dAtA[i:], *m.PlayerID)
	}
	if m.Nickname != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Nickname)))
		i += copy(dAtA[i:], *m.Nickname)
	}
	if m.PositionID != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.PositionID)))
		i += copy(dAtA[i:], *m.PositionID)
	}
	if m.TeamID != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.TeamID)))
		i += copy(dAtA[i:], *m.TeamID)
	}
	if m.PlayerImageThumb != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.PlayerImageThumb)))
		i += copy(dAtA[i:], *m.PlayerImageThumb)
	}
	if m.PositionName != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.PositionName)))
		i += copy(dAtA[i:], *m.PositionName)
	}
	if m.CountryId != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.CountryId)))
		i += copy(dAtA[i:], *m.CountryId)
	}
	if m.CountryImage != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.CountryImage)))
		i += copy(dAtA[i:], *m.CountryImage)
	}
	if m.TeamShortName != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.TeamShortName)))
		i += copy(dAtA[i:], *m.TeamShortName)
	}
	if m.TeamImageThumb != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.TeamImageThumb)))
		i += copy(dAtA[i:], *m.TeamImageThumb)
	}
	if m.PlayerChineseName != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.PlayerChineseName)))
		i += copy(dAtA[i:], *m.PlayerChineseName)
	}
	if m.Total != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Total)))
		i += copy(dAtA[i:], *m.Total)
	}
	if m.DamageDealPercent != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.DamageDealPercent)))
		i += copy(dAtA[i:], *m.DamageDealPercent)
	}
	if m.TeamPercent != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.TeamPercent)))
		i += copy(dAtA[i:], *m.TeamPercent)
	}
	if m.MINUTE_DAMAGEDEALT != nil {
		dAtA[i] = 0x79
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.MINUTE_DAMAGEDEALT))))
		i += 8
	}
	if m.AVERAGE_KILLS != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AVERAGE_KILLS)))
		i += copy(dAtA[i:], *m.AVERAGE_KILLS)
	}
	if m.AVERAGE_ASSISTS != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AVERAGE_ASSISTS)))
		i += copy(dAtA[i:], *m.AVERAGE_ASSISTS)
	}
	if m.AVERAGE_DEATHS != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AVERAGE_DEATHS)))
		i += copy(dAtA[i:], *m.AVERAGE_DEATHS)
	}
	if m.KDA != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.KDA)))
		i += copy(dAtA[i:], *m.KDA)
	}
	if m.MINUTE_ECONOMIC != nil {
		dAtA[i] = 0xa1
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.MINUTE_ECONOMIC))))
		i += 8
	}
	if m.MINUTE_WARDSPLACED != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.MINUTE_WARDSPLACED)))
		i += copy(dAtA[i:], *m.MINUTE_WARDSPLACED)
	}
	if m.AVERAGE_MinionsKilled != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AVERAGE_MinionsKilled)))
		i += copy(dAtA[i:], *m.AVERAGE_MinionsKilled)
	}
	if m.AVERAGE_Life != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.AVERAGE_Life)))
		i += copy(dAtA[i:], *m.AVERAGE_Life)
	}
	if m.TotalDamageTaken != nil {
		dAtA[i] = 0xc1
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.TotalDamageTaken))))
		i += 8
	}
	if m.NeutralMinionsKilled != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.NeutralMinionsKilled)))
		i += copy(dAtA[i:], *m.NeutralMinionsKilled)
	}
	if m.WardsPlaced != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.WardsPlaced)))
		i += copy(dAtA[i:], *m.WardsPlaced)
	}
	if m.WardsKilled != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.WardsKilled)))
		i += copy(dAtA[i:], *m.WardsKilled)
	}
	if m.StatusID != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.StatusID)))
		i += copy(dAtA[i:], *m.StatusID)
	}
	if m.WinCount != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.WinCount))
	}
	if m.LoseCount != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.LoseCount))
	}
	if m.LastMatchTime != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.LastMatchTime)))
		i += copy(dAtA[i:], *m.LastMatchTime)
	}
	if len(m.WinLose) > 0 {
		for _, s := range m.WinLose {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x2
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.VICTORY_RATE != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.VICTORY_RATE)))
		i += copy(dAtA[i:], *m.VICTORY_RATE)
	}
	if m.TeamType != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.TeamType)))
		i += copy(dAtA[i:], *m.TeamType)
	}
	if m.NeutralMinionsKilledRate != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.NeutralMinionsKilledRate)))
		i += copy(dAtA[i:], *m.NeutralMinionsKilledRate)
	}
	if len(m.HeroWinLose) > 0 {
		for _, msg := range m.HeroWinLose {
			dAtA[i] = 0xa2
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintTableStructESports(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HeroWinLose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroWinLose) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.HeroID)))
		i += copy(dAtA[i:], *m.HeroID)
	}
	if m.HeroImage != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.HeroImage)))
		i += copy(dAtA[i:], *m.HeroImage)
	}
	if m.Win != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Win))
	}
	if m.Lose != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.Lose))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MatchRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TeamAWinCount != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.TeamAWinCount))
	}
	if m.TeamBWinCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(*m.TeamBWinCount))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTableStructESports(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MatchRecordList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchRecordList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WinTeamId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.WinTeamId)))
		i += copy(dAtA[i:], *m.WinTeamId)
	}
	if m.WinTeamName != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.WinTeamName)))
		i += copy(dAtA[i:], *m.WinTeamName)
	}
	if m.StartTime != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.StartTime)))
		i += copy(dAtA[i:], *m.StartTime)
	}
	if m.MatchID != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.MatchID)))
		i += copy(dAtA[i:], *m.MatchID)
	}
	if m.Title != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.TeamIDA != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.TeamIDA)))
		i += copy(dAtA[i:], *m.TeamIDA)
	}
	if m.TeamIDB != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.TeamIDB)))
		i += copy(dAtA[i:], *m.TeamIDB)
	}
	if m.TeamAImage != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.TeamAImage)))
		i += copy(dAtA[i:], *m.TeamAImage)
	}
	if m.TeamBImage != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.TeamBImage)))
		i += copy(dAtA[i:], *m.TeamBImage)
	}
	if m.TeamAShortName != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.TeamAShortName)))
		i += copy(dAtA[i:], *m.TeamAShortName)
	}
	if m.TeamBShortName != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.TeamBShortName)))
		i += copy(dAtA[i:], *m.TeamBShortName)
	}
	if m.TeamAWin != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.TeamAWin)))
		i += copy(dAtA[i:], *m.TeamAWin)
	}
	if m.TeamBWin != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.TeamBWin)))
		i += copy(dAtA[i:], *m.TeamBWin)
	}
	if len(m.ResultList) > 0 {
		for _, msg := range m.ResultList {
			dAtA[i] = 0x72
			i++
			i = encodeVarintTableStructESports(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MatchRecordResultList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchRecordResultList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResultID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.ResultID)))
		i += copy(dAtA[i:], *m.ResultID)
	}
	if m.WinTeamID != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.WinTeamID)))
		i += copy(dAtA[i:], *m.WinTeamID)
	}
	if m.TeamName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.TeamName)))
		i += copy(dAtA[i:], *m.TeamName)
	}
	if m.TeamShortName != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.TeamShortName)))
		i += copy(dAtA[i:], *m.TeamShortName)
	}
	if m.TeamImage != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.TeamImage)))
		i += copy(dAtA[i:], *m.TeamImage)
	}
	if m.Bo != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructESports(dAtA, i, uint64(len(*m.Bo)))
		i += copy(dAtA[i:], *m.Bo)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTableStructESports(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TableCrawlJob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.Time != nil {
		n += 1 + sovTableStructESports(uint64(*m.Time))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableESPortsPlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESports(uint64(*m.Id))
	}
	if m.Status != nil {
		n += 1 + sovTableStructESports(uint64(*m.Status))
	}
	if m.LastPullTime != nil {
		n += 1 + sovTableStructESports(uint64(*m.LastPullTime))
	}
	if m.CurrentRoomLiveId != nil {
		n += 1 + sovTableStructESports(uint64(*m.CurrentRoomLiveId))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructESports(uint64(*m.CreateTime))
	}
	if m.LastLoginTime != nil {
		n += 1 + sovTableStructESports(uint64(*m.LastLoginTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESPortsJumpInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JumpType != nil {
		n += 1 + sovTableStructESports(uint64(*m.JumpType))
	}
	if m.JumpObjId != nil {
		n += 1 + sovTableStructESports(uint64(*m.JumpObjId))
	}
	if m.JumpObject != nil {
		n += 1 + sovTableStructESports(uint64(*m.JumpObject))
	}
	if m.JumpUrl != nil {
		l = len(*m.JumpUrl)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.JumpStyle != nil {
		n += 1 + sovTableStructESports(uint64(*m.JumpStyle))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableESPortsCarousel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESports(uint64(*m.Id))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStructESports(uint64(*m.UpdateTime))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructESports(uint64(*m.CreateTime))
	}
	if m.Status != nil {
		n += 1 + sovTableStructESports(uint64(*m.Status))
	}
	if m.ImageUrl != nil {
		l = len(*m.ImageUrl)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.ActionCount != nil {
		n += 1 + sovTableStructESports(uint64(*m.ActionCount))
	}
	if m.MenuId != nil {
		n += 1 + sovTableStructESports(uint64(*m.MenuId))
	}
	if m.JumpInfo != nil {
		l = m.JumpInfo.Size()
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.Weight != nil {
		n += 1 + sovTableStructESports(uint64(*m.Weight))
	}
	if m.Types != nil {
		n += 1 + sovTableStructESports(uint64(*m.Types))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableESPortsLabel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESports(uint64(*m.Id))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovTableStructESports(uint64(*m.Status))
	}
	if m.Weight != nil {
		n += 1 + sovTableStructESports(uint64(*m.Weight))
	}
	if m.MenuId != nil {
		n += 1 + sovTableStructESports(uint64(*m.MenuId))
	}
	if m.LabelId != nil {
		n += 1 + sovTableStructESports(uint64(*m.LabelId))
	}
	if m.LabelType != nil {
		n += 1 + sovTableStructESports(uint64(*m.LabelType))
	}
	if m.IconUrl != nil {
		l = len(*m.IconUrl)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThumbsUpInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESports(uint64(*m.Id))
	}
	if m.ThumbsUpCount != nil {
		n += 1 + sovTableStructESports(uint64(*m.ThumbsUpCount))
	}
	if m.AppLabelID != nil {
		n += 2 + sovTableStructESports(uint64(*m.AppLabelID))
	}
	if m.MenuId != nil {
		n += 2 + sovTableStructESports(uint64(*m.MenuId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableESportComment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESports(uint64(*m.Id))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.ThumbsUpCount != nil {
		n += 1 + sovTableStructESports(uint64(*m.ThumbsUpCount))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructESports(uint64(*m.CreateTime))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructESports(uint64(*m.PlayerId))
	}
	if m.PlayerNickName != nil {
		l = len(*m.PlayerNickName)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.ParentId != nil {
		n += 1 + sovTableStructESports(uint64(*m.ParentId))
	}
	if m.MenuId != nil {
		n += 1 + sovTableStructESports(uint64(*m.MenuId))
	}
	if m.AppLabelID != nil {
		n += 1 + sovTableStructESports(uint64(*m.AppLabelID))
	}
	if m.ReplyCount != nil {
		n += 1 + sovTableStructESports(uint64(*m.ReplyCount))
	}
	if m.Status != nil {
		n += 1 + sovTableStructESports(uint64(*m.Status))
	}
	if m.CommentId != nil {
		n += 1 + sovTableStructESports(uint64(*m.CommentId))
	}
	if m.PlayerIconUrl != nil {
		l = len(*m.PlayerIconUrl)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.IsThumbsUp != nil {
		n += 1 + sovTableStructESports(uint64(*m.IsThumbsUp))
	}
	if m.ReplyPlayerId != nil {
		n += 1 + sovTableStructESports(uint64(*m.ReplyPlayerId))
	}
	if m.ReplyPlayerNickName != nil {
		l = len(*m.ReplyPlayerNickName)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableESPortsRealTimeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESports(uint64(*m.Id))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStructESports(uint64(*m.UpdateTime))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructESports(uint64(*m.CreateTime))
	}
	if m.Status != nil {
		n += 1 + sovTableStructESports(uint64(*m.Status))
	}
	if m.IssueTime != nil {
		n += 1 + sovTableStructESports(uint64(*m.IssueTime))
	}
	if m.CoverBigImageUrl != nil {
		l = len(*m.CoverBigImageUrl)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if len(m.CoverSmallImageUrl) > 0 {
		for _, s := range m.CoverSmallImageUrl {
			l = len(s)
			n += 1 + l + sovTableStructESports(uint64(l))
		}
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.AuthorPlayerId != nil {
		n += 1 + sovTableStructESports(uint64(*m.AuthorPlayerId))
	}
	if m.AuthorAccount != nil {
		l = len(*m.AuthorAccount)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.Author != nil {
		l = len(*m.Author)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.DataSource != nil {
		l = len(*m.DataSource)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.LookCount != nil {
		n += 1 + sovTableStructESports(uint64(*m.LookCount))
	}
	if m.LookCountSys != nil {
		n += 1 + sovTableStructESports(uint64(*m.LookCountSys))
	}
	if m.ThumbsUpCount != nil {
		n += 2 + sovTableStructESports(uint64(*m.ThumbsUpCount))
	}
	if m.ThumbsUpCountSys != nil {
		n += 2 + sovTableStructESports(uint64(*m.ThumbsUpCountSys))
	}
	if m.AppLabelID != nil {
		n += 2 + sovTableStructESports(uint64(*m.AppLabelID))
	}
	if m.AppLabelName != nil {
		l = len(*m.AppLabelName)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.BeginEffectiveTime != nil {
		n += 2 + sovTableStructESports(uint64(*m.BeginEffectiveTime))
	}
	if m.EffectiveType != nil {
		n += 2 + sovTableStructESports(uint64(*m.EffectiveType))
	}
	if m.MenuId != nil {
		n += 2 + sovTableStructESports(uint64(*m.MenuId))
	}
	if m.CommentCount != nil {
		n += 2 + sovTableStructESports(uint64(*m.CommentCount))
	}
	if m.ShowType != nil {
		n += 2 + sovTableStructESports(uint64(*m.ShowType))
	}
	if len(m.LabelIds) > 0 {
		for _, e := range m.LabelIds {
			n += 2 + sovTableStructESports(uint64(e))
		}
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.IsThumbsUp != nil {
		n += 2 + sovTableStructESports(uint64(*m.IsThumbsUp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UniqueGameInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MatchName != nil {
		l = len(*m.MatchName)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.MatchStage != nil {
		l = len(*m.MatchStage)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.Bo != nil {
		l = len(*m.Bo)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.TeamAName != nil {
		l = len(*m.TeamAName)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.TeamBName != nil {
		l = len(*m.TeamBName)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableESPortsVideoInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESports(uint64(*m.Id))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStructESports(uint64(*m.UpdateTime))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructESports(uint64(*m.CreateTime))
	}
	if m.IssueTime != nil {
		n += 1 + sovTableStructESports(uint64(*m.IssueTime))
	}
	if m.Status != nil {
		n += 1 + sovTableStructESports(uint64(*m.Status))
	}
	if m.CoverImageUrl != nil {
		l = len(*m.CoverImageUrl)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.VideoUrl != nil {
		l = len(*m.VideoUrl)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.AuthorPlayerId != nil {
		n += 1 + sovTableStructESports(uint64(*m.AuthorPlayerId))
	}
	if m.AuthorAccount != nil {
		l = len(*m.AuthorAccount)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.Author != nil {
		l = len(*m.Author)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.DataSource != nil {
		l = len(*m.DataSource)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.LookCount != nil {
		n += 1 + sovTableStructESports(uint64(*m.LookCount))
	}
	if m.LookCountSys != nil {
		n += 1 + sovTableStructESports(uint64(*m.LookCountSys))
	}
	if m.ThumbsUpCount != nil {
		n += 1 + sovTableStructESports(uint64(*m.ThumbsUpCount))
	}
	if m.ThumbsUpCountSys != nil {
		n += 2 + sovTableStructESports(uint64(*m.ThumbsUpCountSys))
	}
	if m.AppLabelID != nil {
		n += 2 + sovTableStructESports(uint64(*m.AppLabelID))
	}
	if m.AppLabelName != nil {
		l = len(*m.AppLabelName)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.BeginEffectiveTime != nil {
		n += 2 + sovTableStructESports(uint64(*m.BeginEffectiveTime))
	}
	if m.EffectiveType != nil {
		n += 2 + sovTableStructESports(uint64(*m.EffectiveType))
	}
	if m.VideoType != nil {
		n += 2 + sovTableStructESports(uint64(*m.VideoType))
	}
	if m.IsRecommend != nil {
		n += 2 + sovTableStructESports(uint64(*m.IsRecommend))
	}
	if m.IsHot != nil {
		n += 2 + sovTableStructESports(uint64(*m.IsHot))
	}
	if m.UniqueGameId != nil {
		n += 2 + sovTableStructESports(uint64(*m.UniqueGameId))
	}
	if m.MenuId != nil {
		n += 2 + sovTableStructESports(uint64(*m.MenuId))
	}
	if m.CommentCount != nil {
		n += 2 + sovTableStructESports(uint64(*m.CommentCount))
	}
	if m.DataId != nil {
		n += 2 + sovTableStructESports(uint64(*m.DataId))
	}
	if len(m.LabelIds) > 0 {
		for _, e := range m.LabelIds {
			n += 2 + sovTableStructESports(uint64(e))
		}
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.IsThumbsUp != nil {
		n += 2 + sovTableStructESports(uint64(*m.IsThumbsUp))
	}
	if m.FlowCount != nil {
		n += 2 + sovTableStructESports(uint64(*m.FlowCount))
	}
	if m.MatchName != nil {
		l = len(*m.MatchName)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.FanCount != nil {
		n += 2 + sovTableStructESports(uint64(*m.FanCount))
	}
	if m.PlayerIconUrl != nil {
		l = len(*m.PlayerIconUrl)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.UniqueGameName != nil {
		l = len(*m.UniqueGameName)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.FlowCountSys != nil {
		n += 2 + sovTableStructESports(uint64(*m.FlowCountSys))
	}
	if m.AuthorPlayerType != nil {
		n += 2 + sovTableStructESports(uint64(*m.AuthorPlayerType))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.IsFollow != nil {
		n += 2 + sovTableStructESports(uint64(*m.IsFollow))
	}
	if m.IsAuthorFollow != nil {
		n += 2 + sovTableStructESports(uint64(*m.IsAuthorFollow))
	}
	if m.AuthorNickName != nil {
		l = len(*m.AuthorNickName)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.UniqueGameInfo != nil {
		l = m.UniqueGameInfo.Size()
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableESPortsFlowInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructESports(uint64(*m.PlayerId))
	}
	if m.DataId != nil {
		n += 1 + sovTableStructESports(uint64(*m.DataId))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructESports(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableESPortsSysMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESports(uint64(*m.Id))
	}
	if m.RecipientType != nil {
		n += 1 + sovTableStructESports(uint64(*m.RecipientType))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovTableStructESports(uint64(*m.Status))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructESports(uint64(*m.CreateTime))
	}
	if m.JumpInfo != nil {
		l = m.JumpInfo.Size()
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.EffectiveTime != nil {
		n += 1 + sovTableStructESports(uint64(*m.EffectiveTime))
	}
	if m.EffectiveType != nil {
		n += 1 + sovTableStructESports(uint64(*m.EffectiveType))
	}
	if m.IsPush != nil {
		n += 2
	}
	if m.IsMessageCenter != nil {
		n += 2
	}
	if m.Icon != nil {
		l = len(*m.Icon)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.FailureTime != nil {
		n += 1 + sovTableStructESports(uint64(*m.FailureTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableESPortsGuessBetRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != nil {
		n += 1 + sovTableStructESports(uint64(*m.OrderId))
	}
	if m.UniqueGameId != nil {
		n += 1 + sovTableStructESports(uint64(*m.UniqueGameId))
	}
	if m.UniqueGameGuessId != nil {
		n += 1 + sovTableStructESports(uint64(*m.UniqueGameGuessId))
	}
	if m.AppLabelId != nil {
		n += 1 + sovTableStructESports(uint64(*m.AppLabelId))
	}
	if m.AppLabelName != nil {
		l = len(*m.AppLabelName)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.ApiOrigin != nil {
		n += 1 + sovTableStructESports(uint64(*m.ApiOrigin))
	}
	if m.ApiOriginName != nil {
		l = len(*m.ApiOriginName)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.GameId != nil {
		l = len(*m.GameId)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.MornRollGuessFlag != nil {
		n += 1 + sovTableStructESports(uint64(*m.MornRollGuessFlag))
	}
	if m.PlayInfo != nil {
		l = m.PlayInfo.Size()
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.GameInfo != nil {
		l = m.GameInfo.Size()
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.BetId != nil {
		l = len(*m.BetId)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.BetTitle != nil {
		l = len(*m.BetTitle)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.BetNum != nil {
		l = len(*m.BetNum)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.BetName != nil {
		l = len(*m.BetName)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.Odds != nil {
		l = len(*m.Odds)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.BetAmount != nil {
		n += 2 + sovTableStructESports(uint64(*m.BetAmount))
	}
	if m.SuccessAmount != nil {
		n += 2 + sovTableStructESports(uint64(*m.SuccessAmount))
	}
	if m.FailAmount != nil {
		n += 2 + sovTableStructESports(uint64(*m.FailAmount))
	}
	if m.DisableAmount != nil {
		n += 2 + sovTableStructESports(uint64(*m.DisableAmount))
	}
	if m.IllegalAmount != nil {
		n += 2 + sovTableStructESports(uint64(*m.IllegalAmount))
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.ReasonDetail != nil {
		l = len(*m.ReasonDetail)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.BetStatus != nil {
		l = len(*m.BetStatus)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.BetResult != nil {
		l = len(*m.BetResult)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.CreateTime != nil {
		n += 2 + sovTableStructESports(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovTableStructESports(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuessBetPlayerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayId != nil {
		n += 1 + sovTableStructESports(uint64(*m.PlayId))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.Phone != nil {
		l = len(*m.Phone)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuessBetGameInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameName != nil {
		l = len(*m.GameName)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.TeamAName != nil {
		l = len(*m.TeamAName)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.TeamBName != nil {
		l = len(*m.TeamBName)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BetSlipReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESports(uint64(*m.Id))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.GameInfo != nil {
		l = m.GameInfo.Size()
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.AppLabelID != nil {
		n += 1 + sovTableStructESports(uint64(*m.AppLabelID))
	}
	if m.AppLabelName != nil {
		l = len(*m.AppLabelName)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.Players != nil {
		n += 1 + sovTableStructESports(uint64(*m.Players))
	}
	if m.BetSlips != nil {
		n += 1 + sovTableStructESports(uint64(*m.BetSlips))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructESports(uint64(*m.CreateTime))
	}
	if m.BetAmount != nil {
		n += 1 + sovTableStructESports(uint64(*m.BetAmount))
	}
	if m.SuccessAmount != nil {
		n += 1 + sovTableStructESports(uint64(*m.SuccessAmount))
	}
	if m.FailAmount != nil {
		n += 1 + sovTableStructESports(uint64(*m.FailAmount))
	}
	if m.DisableAmount != nil {
		n += 1 + sovTableStructESports(uint64(*m.DisableAmount))
	}
	if m.IllegalAmount != nil {
		n += 1 + sovTableStructESports(uint64(*m.IllegalAmount))
	}
	if m.SumAmount != nil {
		n += 1 + sovTableStructESports(uint64(*m.SumAmount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableESPortsGameOrderSysMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != nil {
		n += 1 + sovTableStructESports(uint64(*m.OrderId))
	}
	if m.UniqueGameId != nil {
		n += 1 + sovTableStructESports(uint64(*m.UniqueGameId))
	}
	if m.BetTime != nil {
		n += 1 + sovTableStructESports(uint64(*m.BetTime))
	}
	if m.Odds != nil {
		l = len(*m.Odds)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.BetResult != nil {
		l = len(*m.BetResult)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.BetTitle != nil {
		l = len(*m.BetTitle)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.BetNum != nil {
		l = len(*m.BetNum)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.BetName != nil {
		l = len(*m.BetName)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.GameName != nil {
		l = len(*m.GameName)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructESports(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStructESports(uint64(*m.UpdateTime))
	}
	if m.ResultAmount != nil {
		n += 1 + sovTableStructESports(uint64(*m.ResultAmount))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructESports(uint64(*m.PlayerId))
	}
	if m.BetAmount != nil {
		n += 1 + sovTableStructESports(uint64(*m.BetAmount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableESPortsLiveRoomMsgLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESports(uint64(*m.Id))
	}
	if m.SenderPlayerId != nil {
		n += 1 + sovTableStructESports(uint64(*m.SenderPlayerId))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.HeadIcon != nil {
		l = len(*m.HeadIcon)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.LiveId != nil {
		n += 1 + sovTableStructESports(uint64(*m.LiveId))
	}
	if m.DataType != nil {
		n += 1 + sovTableStructESports(uint64(*m.DataType))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructESports(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableESPortsBetRiskOneDay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovTableStructESports(uint64(*m.PlayerId))
	}
	if m.DateStr != nil {
		l = len(*m.DateStr)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.AmountDay != nil {
		n += 1 + sovTableStructESports(uint64(*m.AmountDay))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructESports(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStructESports(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableESPortsBetRiskPlatFormDaySum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DateStr != nil {
		l = len(*m.DateStr)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.AmountDaySum != nil {
		n += 1 + sovTableStructESports(uint64(*m.AmountDaySum))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructESports(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStructESports(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableESportsExchangeCfg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESports(uint64(*m.Id))
	}
	if m.Coin != nil {
		n += 1 + sovTableStructESports(uint64(*m.Coin))
	}
	if m.DailyGive != nil {
		n += 1 + sovTableStructESports(uint64(*m.DailyGive))
	}
	if m.FirstGive != nil {
		n += 1 + sovTableStructESports(uint64(*m.FirstGive))
	}
	if len(m.Rate) > 0 {
		for _, e := range m.Rate {
			l = e.Size()
			n += 1 + l + sovTableStructESports(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExchangeRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ratio != nil {
		n += 1 + sovTableStructESports(uint64(*m.Ratio))
	}
	if m.Odds != nil {
		n += 1 + sovTableStructESports(uint64(*m.Odds))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableESportsGiveWhiteList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovTableStructESports(uint64(*m.PlayerId))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableESPortsExChangeFirst) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovTableStructESports(uint64(*m.PlayerId))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructESports(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStructESports(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecentData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESports(uint64(*m.Id))
	}
	if m.TournamentBiaoxian != nil {
		l = m.TournamentBiaoxian.Size()
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.StrengthIndex != nil {
		l = m.StrengthIndex.Size()
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if len(m.MatchData) > 0 {
		for _, e := range m.MatchData {
			l = e.Size()
			n += 1 + l + sovTableStructESports(uint64(l))
		}
	}
	if m.MatchRecord != nil {
		l = m.MatchRecord.Size()
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.MatchRecordA != nil {
		l = m.MatchRecordA.Size()
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.MatchRecordB != nil {
		l = m.MatchRecordB.Size()
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TournamentBiaoxian) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamA != nil {
		l = m.TeamA.Size()
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.TeamB != nil {
		l = m.TeamB.Size()
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeamBX) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamID != nil {
		l = len(*m.TeamID)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.KDA != nil {
		l = len(*m.KDA)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.AVERAGE_KILLS != nil {
		l = len(*m.AVERAGE_KILLS)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.AVERAGE_ASSISTS != nil {
		l = len(*m.AVERAGE_ASSISTS)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.AVERAGE_DEATHS != nil {
		l = len(*m.AVERAGE_DEATHS)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.MINUTE_HITS != nil {
		l = len(*m.MINUTE_HITS)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.MINUTE_ECONOMIC != nil {
		l = len(*m.MINUTE_ECONOMIC)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.MINUTE_DAMAGEDEALT != nil {
		l = len(*m.MINUTE_DAMAGEDEALT)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.SMALLDRAGON_RATE != nil {
		n += 9
	}
	if m.BIGDRAGON_RATE != nil {
		n += 9
	}
	if m.VICTORY_RATE != nil {
		n += 9
	}
	if m.VICTORY_COUNT != nil {
		n += 1 + sovTableStructESports(uint64(*m.VICTORY_COUNT))
	}
	if m.FAIl_COUNT != nil {
		n += 1 + sovTableStructESports(uint64(*m.FAIl_COUNT))
	}
	if m.ContinuityCount != nil {
		n += 1 + sovTableStructESports(uint64(*m.ContinuityCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StrengthIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HandWinTeamA != nil {
		l = len(*m.HandWinTeamA)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.HandWinTeamB != nil {
		l = len(*m.HandWinTeamB)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.HandLoseTeamA != nil {
		l = len(*m.HandLoseTeamA)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.HandLoseTeamB != nil {
		l = len(*m.HandLoseTeamB)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.RecordWinTeamA != nil {
		l = len(*m.RecordWinTeamA)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.RecordWinTeamB != nil {
		l = len(*m.RecordWinTeamB)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.RecordLoseTeamA != nil {
		l = len(*m.RecordLoseTeamA)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.RecordLoseTeamB != nil {
		l = len(*m.RecordLoseTeamB)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.AverageKillsTeamA != nil {
		l = len(*m.AverageKillsTeamA)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.AverageKillsTeamB != nil {
		l = len(*m.AverageKillsTeamB)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.AverageTowerTeamA != nil {
		l = len(*m.AverageTowerTeamA)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.AverageTowerTeamB != nil {
		l = len(*m.AverageTowerTeamB)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.AverageMoneyTeamA != nil {
		l = len(*m.AverageMoneyTeamA)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.AverageMoneyTeamB != nil {
		l = len(*m.AverageMoneyTeamB)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.ScoreTeamA != nil {
		l = len(*m.ScoreTeamA)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.ScoreTeamB != nil {
		l = len(*m.ScoreTeamB)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.VictoryRateA != nil {
		l = len(*m.VictoryRateA)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.VictoryRateB != nil {
		l = len(*m.VictoryRateB)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.AverageTimeA != nil {
		l = len(*m.AverageTimeA)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.AverageTimeB != nil {
		l = len(*m.AverageTimeB)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.AverageAssistsTeamA != nil {
		l = len(*m.AverageAssistsTeamA)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.AverageAssistsTeamB != nil {
		l = len(*m.AverageAssistsTeamB)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.AverageDeathsTeamA != nil {
		l = len(*m.AverageDeathsTeamA)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.AverageDeathsTeamB != nil {
		l = len(*m.AverageDeathsTeamB)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.AverageKdaTeamA != nil {
		l = len(*m.AverageKdaTeamA)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.AverageKdaTeamB != nil {
		l = len(*m.AverageKdaTeamB)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.FirstBloodKillTeamA != nil {
		l = len(*m.FirstBloodKillTeamA)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.FirstBloodKillTeamB != nil {
		l = len(*m.FirstBloodKillTeamB)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.MinuteDamageTeamA != nil {
		l = len(*m.MinuteDamageTeamA)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.MinuteDamageTeamB != nil {
		l = len(*m.MinuteDamageTeamB)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.FirstTowerKillTeamA != nil {
		l = len(*m.FirstTowerKillTeamA)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.FirstTowerKillTeamB != nil {
		l = len(*m.FirstTowerKillTeamB)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.AverageMoneyDiffTeamA != nil {
		l = len(*m.AverageMoneyDiffTeamA)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.AverageMoneyDiffTeamB != nil {
		l = len(*m.AverageMoneyDiffTeamB)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.MinuteMoneyTeamA != nil {
		l = len(*m.MinuteMoneyTeamA)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.MinuteMoneyTeamB != nil {
		l = len(*m.MinuteMoneyTeamB)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.MinuteHitsTeamA != nil {
		l = len(*m.MinuteHitsTeamA)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.MinuteHitsTeamB != nil {
		l = len(*m.MinuteHitsTeamB)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.AverageDragonTeamA != nil {
		l = len(*m.AverageDragonTeamA)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.AverageDragonTeamB != nil {
		l = len(*m.AverageDragonTeamB)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.AverageBaronTeamA != nil {
		l = len(*m.AverageBaronTeamA)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.AverageBaronTeamB != nil {
		l = len(*m.AverageBaronTeamB)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.RateDragonTeamA != nil {
		l = len(*m.RateDragonTeamA)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.RateDragonTeamB != nil {
		l = len(*m.RateDragonTeamB)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.RateBaronTeamA != nil {
		l = len(*m.RateBaronTeamA)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.RateBaronTeamB != nil {
		l = len(*m.RateBaronTeamB)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.MinuteWardsPlacedTeamA != nil {
		l = len(*m.MinuteWardsPlacedTeamA)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.MinuteWardsPlacedTeamB != nil {
		l = len(*m.MinuteWardsPlacedTeamB)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.MinuteWardsKilledTeamA != nil {
		l = len(*m.MinuteWardsKilledTeamA)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.MinuteWardsKilledTeamB != nil {
		l = len(*m.MinuteWardsKilledTeamB)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.AverageBeTurretKillsTeamA != nil {
		l = len(*m.AverageBeTurretKillsTeamA)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.AverageBeTurretKillsTeamB != nil {
		l = len(*m.AverageBeTurretKillsTeamB)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.RateFullBureauTeamA != nil {
		l = len(*m.RateFullBureauTeamA)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.RateFullBureauTeamB != nil {
		l = len(*m.RateFullBureauTeamB)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.TotalDragonTeamA != nil {
		l = len(*m.TotalDragonTeamA)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.TotalDragonTeamB != nil {
		l = len(*m.TotalDragonTeamB)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.TotalBaronTeamA != nil {
		l = len(*m.TotalBaronTeamA)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.TotalBaronTeamB != nil {
		l = len(*m.TotalBaronTeamB)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MatchData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != nil {
		l = len(*m.PlayerID)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.Nickname != nil {
		l = len(*m.Nickname)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.PositionID != nil {
		l = len(*m.PositionID)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.TeamID != nil {
		l = len(*m.TeamID)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.PlayerImageThumb != nil {
		l = len(*m.PlayerImageThumb)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.PositionName != nil {
		l = len(*m.PositionName)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.CountryId != nil {
		l = len(*m.CountryId)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.CountryImage != nil {
		l = len(*m.CountryImage)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.TeamShortName != nil {
		l = len(*m.TeamShortName)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.TeamImageThumb != nil {
		l = len(*m.TeamImageThumb)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.PlayerChineseName != nil {
		l = len(*m.PlayerChineseName)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.Total != nil {
		l = len(*m.Total)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.DamageDealPercent != nil {
		l = len(*m.DamageDealPercent)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.TeamPercent != nil {
		l = len(*m.TeamPercent)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.MINUTE_DAMAGEDEALT != nil {
		n += 9
	}
	if m.AVERAGE_KILLS != nil {
		l = len(*m.AVERAGE_KILLS)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.AVERAGE_ASSISTS != nil {
		l = len(*m.AVERAGE_ASSISTS)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.AVERAGE_DEATHS != nil {
		l = len(*m.AVERAGE_DEATHS)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.KDA != nil {
		l = len(*m.KDA)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.MINUTE_ECONOMIC != nil {
		n += 10
	}
	if m.MINUTE_WARDSPLACED != nil {
		l = len(*m.MINUTE_WARDSPLACED)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.AVERAGE_MinionsKilled != nil {
		l = len(*m.AVERAGE_MinionsKilled)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.AVERAGE_Life != nil {
		l = len(*m.AVERAGE_Life)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.TotalDamageTaken != nil {
		n += 10
	}
	if m.NeutralMinionsKilled != nil {
		l = len(*m.NeutralMinionsKilled)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.WardsPlaced != nil {
		l = len(*m.WardsPlaced)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.WardsKilled != nil {
		l = len(*m.WardsKilled)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.StatusID != nil {
		l = len(*m.StatusID)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.WinCount != nil {
		n += 2 + sovTableStructESports(uint64(*m.WinCount))
	}
	if m.LoseCount != nil {
		n += 2 + sovTableStructESports(uint64(*m.LoseCount))
	}
	if m.LastMatchTime != nil {
		l = len(*m.LastMatchTime)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if len(m.WinLose) > 0 {
		for _, s := range m.WinLose {
			l = len(s)
			n += 2 + l + sovTableStructESports(uint64(l))
		}
	}
	if m.VICTORY_RATE != nil {
		l = len(*m.VICTORY_RATE)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.TeamType != nil {
		l = len(*m.TeamType)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if m.NeutralMinionsKilledRate != nil {
		l = len(*m.NeutralMinionsKilledRate)
		n += 2 + l + sovTableStructESports(uint64(l))
	}
	if len(m.HeroWinLose) > 0 {
		for _, e := range m.HeroWinLose {
			l = e.Size()
			n += 2 + l + sovTableStructESports(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HeroWinLose) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HeroID != nil {
		l = len(*m.HeroID)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.HeroImage != nil {
		l = len(*m.HeroImage)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.Win != nil {
		n += 1 + sovTableStructESports(uint64(*m.Win))
	}
	if m.Lose != nil {
		n += 1 + sovTableStructESports(uint64(*m.Lose))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MatchRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamAWinCount != nil {
		n += 1 + sovTableStructESports(uint64(*m.TeamAWinCount))
	}
	if m.TeamBWinCount != nil {
		n += 1 + sovTableStructESports(uint64(*m.TeamBWinCount))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovTableStructESports(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MatchRecordList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WinTeamId != nil {
		l = len(*m.WinTeamId)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.WinTeamName != nil {
		l = len(*m.WinTeamName)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.StartTime != nil {
		l = len(*m.StartTime)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.MatchID != nil {
		l = len(*m.MatchID)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.TeamIDA != nil {
		l = len(*m.TeamIDA)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.TeamIDB != nil {
		l = len(*m.TeamIDB)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.TeamAImage != nil {
		l = len(*m.TeamAImage)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.TeamBImage != nil {
		l = len(*m.TeamBImage)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.TeamAShortName != nil {
		l = len(*m.TeamAShortName)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.TeamBShortName != nil {
		l = len(*m.TeamBShortName)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.TeamAWin != nil {
		l = len(*m.TeamAWin)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.TeamBWin != nil {
		l = len(*m.TeamBWin)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if len(m.ResultList) > 0 {
		for _, e := range m.ResultList {
			l = e.Size()
			n += 1 + l + sovTableStructESports(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MatchRecordResultList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResultID != nil {
		l = len(*m.ResultID)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.WinTeamID != nil {
		l = len(*m.WinTeamID)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.TeamName != nil {
		l = len(*m.TeamName)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.TeamShortName != nil {
		l = len(*m.TeamShortName)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.TeamImage != nil {
		l = len(*m.TeamImage)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.Bo != nil {
		l = len(*m.Bo)
		n += 1 + l + sovTableStructESports(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTableStructESports(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTableStructESports(x uint64) (n int) {
	return sovTableStructESports(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TableCrawlJob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableCrawlJob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableCrawlJob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Time = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableESPortsPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableESPortsPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableESPortsPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPullTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastPullTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRoomLiveId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurrentRoomLiveId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLoginTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastLoginTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESPortsJumpInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESPortsJumpInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESPortsJumpInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JumpType = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpObjId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JumpObjId = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpObject", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JumpObject = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.JumpUrl = &s
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpStyle", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JumpStyle = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableESPortsCarousel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableESPortsCarousel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableESPortsCarousel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ImageUrl = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActionCount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MenuId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MenuId = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JumpInfo == nil {
				m.JumpInfo = &ESPortsJumpInfo{}
			}
			if err := m.JumpInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Weight = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableESPortsLabel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableESPortsLabel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableESPortsLabel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Weight = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MenuId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MenuId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LabelId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LabelType = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.IconUrl = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThumbsUpInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThumbsUpInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThumbsUpInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbsUpCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThumbsUpCount = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppLabelID = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MenuId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MenuId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableESportComment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableESportComment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableESportComment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbsUpCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThumbsUpCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerNickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PlayerNickName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ParentId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MenuId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MenuId = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppLabelID = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReplyCount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommentId = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerIconUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PlayerIconUrl = &s
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsThumbsUp", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsThumbsUp = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyPlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReplyPlayerId = &v
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyPlayerNickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ReplyPlayerNickName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableESPortsRealTimeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableESPortsRealTimeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableESPortsRealTimeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IssueTime = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverBigImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CoverBigImageUrl = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverSmallImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverSmallImageUrl = append(m.CoverSmallImageUrl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorPlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AuthorPlayerId = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AuthorAccount = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Author = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DataSource = &s
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LookCount = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookCountSys", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LookCountSys = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbsUpCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThumbsUpCount = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbsUpCountSys", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThumbsUpCountSys = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppLabelID = &v
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AppLabelName = &s
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginEffectiveTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeginEffectiveTime = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveType", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EffectiveType = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MenuId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MenuId = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommentCount = &v
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowType = &v
		case 25:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructESports
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LabelIds = append(m.LabelIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructESports
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructESports
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructESports
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LabelIds) == 0 {
					m.LabelIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructESports
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LabelIds = append(m.LabelIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelIds", wireType)
			}
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsThumbsUp", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsThumbsUp = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UniqueGameInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UniqueGameInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UniqueGameInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MatchName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchStage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MatchStage = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Bo = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamAName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamAName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamBName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamBName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableESPortsVideoInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableESPortsVideoInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableESPortsVideoInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IssueTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CoverImageUrl = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VideoUrl = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorPlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AuthorPlayerId = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AuthorAccount = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Author = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DataSource = &s
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LookCount = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookCountSys", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LookCountSys = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbsUpCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThumbsUpCount = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbsUpCountSys", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThumbsUpCountSys = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppLabelID = &v
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AppLabelName = &s
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginEffectiveTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeginEffectiveTime = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveType", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EffectiveType = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoType", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VideoType = &v
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRecommend", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRecommend = &v
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHot", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsHot = &v
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueGameId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniqueGameId = &v
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MenuId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MenuId = &v
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommentCount = &v
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataId = &v
		case 30:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructESports
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LabelIds = append(m.LabelIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructESports
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructESports
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructESports
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LabelIds) == 0 {
					m.LabelIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructESports
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LabelIds = append(m.LabelIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelIds", wireType)
			}
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsThumbsUp", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsThumbsUp = &v
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlowCount = &v
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MatchName = &s
			iNdEx = postIndex
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FanCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FanCount = &v
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerIconUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PlayerIconUrl = &s
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueGameName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UniqueGameName = &s
			iNdEx = postIndex
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowCountSys", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlowCountSys = &v
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorPlayerType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AuthorPlayerType = &v
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollow", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFollow = &v
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAuthorFollow", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAuthorFollow = &v
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorNickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AuthorNickName = &s
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueGameInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UniqueGameInfo == nil {
				m.UniqueGameInfo = &UniqueGameInfo{}
			}
			if err := m.UniqueGameInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableESPortsFlowInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableESPortsFlowInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableESPortsFlowInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableESPortsSysMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableESPortsSysMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableESPortsSysMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientType", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecipientType = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JumpInfo == nil {
				m.JumpInfo = &ESPortsJumpInfo{}
			}
			if err := m.JumpInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EffectiveTime = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveType", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EffectiveType = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPush", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsPush = &b
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMessageCenter", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsMessageCenter = &b
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Icon = &s
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FailureTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableESPortsGuessBetRecord) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableESPortsGuessBetRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableESPortsGuessBetRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueGameId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniqueGameId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueGameGuessId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniqueGameGuessId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppLabelId = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AppLabelName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiOrigin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ApiOrigin = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiOriginName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ApiOriginName = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GameId = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MornRollGuessFlag", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MornRollGuessFlag = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayInfo == nil {
				m.PlayInfo = &GuessBetPlayerInfo{}
			}
			if err := m.PlayInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GameInfo == nil {
				m.GameInfo = &GuessBetGameInfo{}
			}
			if err := m.GameInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetId = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetTitle = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetNum = &s
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetName = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Odds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Odds = &s
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetAmount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BetAmount = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessAmount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SuccessAmount = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailAmount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FailAmount = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableAmount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableAmount = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IllegalAmount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IllegalAmount = &v
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReasonDetail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ReasonDetail = &s
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetStatus = &s
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetResult = &s
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("OrderId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuessBetPlayerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuessBetPlayerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuessBetPlayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Phone = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuessBetGameInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuessBetGameInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuessBetGameInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GameName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamAName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamAName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamBName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamBName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BetSlipReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BetSlipReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BetSlipReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GameInfo == nil {
				m.GameInfo = &GuessBetGameInfo{}
			}
			if err := m.GameInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppLabelID = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AppLabelName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Players = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetSlips", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BetSlips = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetAmount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BetAmount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessAmount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SuccessAmount = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailAmount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FailAmount = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableAmount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableAmount = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IllegalAmount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IllegalAmount = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumAmount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumAmount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableESPortsGameOrderSysMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableESPortsGameOrderSysMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableESPortsGameOrderSysMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueGameId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniqueGameId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BetTime = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Odds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Odds = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetResult = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetTitle = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetNum = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetName = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GameName = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultAmount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ResultAmount = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetAmount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BetAmount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("OrderId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableESPortsLiveRoomMsgLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableESPortsLiveRoomMsgLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableESPortsLiveRoomMsgLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderPlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SenderPlayerId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadIcon = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LiveId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataType = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableESPortsBetRiskOneDay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableESPortsBetRiskOneDay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableESPortsBetRiskOneDay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DateStr = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountDay", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AmountDay = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableESPortsBetRiskPlatFormDaySum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableESPortsBetRiskPlatFormDaySum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableESPortsBetRiskPlatFormDaySum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DateStr = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountDaySum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AmountDaySum = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableESportsExchangeCfg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableESportsExchangeCfg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableESportsExchangeCfg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Coin = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyGive", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DailyGive = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstGive", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstGive = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rate = append(m.Rate, &ExchangeRate{})
			if err := m.Rate[len(m.Rate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ratio = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Odds", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Odds = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableESportsGiveWhiteList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableESportsGiveWhiteList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableESportsGiveWhiteList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableESPortsExChangeFirst) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableESPortsExChangeFirst: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableESPortsExChangeFirst: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecentData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecentData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecentData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentBiaoxian", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TournamentBiaoxian == nil {
				m.TournamentBiaoxian = &TournamentBiaoxian{}
			}
			if err := m.TournamentBiaoxian.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrengthIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StrengthIndex == nil {
				m.StrengthIndex = &StrengthIndex{}
			}
			if err := m.StrengthIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchData = append(m.MatchData, &MatchData{})
			if err := m.MatchData[len(m.MatchData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MatchRecord == nil {
				m.MatchRecord = &MatchRecord{}
			}
			if err := m.MatchRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchRecordA", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MatchRecordA == nil {
				m.MatchRecordA = &MatchRecord{}
			}
			if err := m.MatchRecordA.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchRecordB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MatchRecordB == nil {
				m.MatchRecordB = &MatchRecord{}
			}
			if err := m.MatchRecordB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TournamentBiaoxian) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TournamentBiaoxian: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TournamentBiaoxian: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamA", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamA == nil {
				m.TeamA = &TeamBX{}
			}
			if err := m.TeamA.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamB == nil {
				m.TeamB = &TeamBX{}
			}
			if err := m.TeamB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamBX) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamBX: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamBX: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamID = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KDA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.KDA = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AVERAGE_KILLS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AVERAGE_KILLS = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AVERAGE_ASSISTS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AVERAGE_ASSISTS = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AVERAGE_DEATHS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AVERAGE_DEATHS = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MINUTE_HITS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MINUTE_HITS = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MINUTE_ECONOMIC", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MINUTE_ECONOMIC = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MINUTE_DAMAGEDEALT", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MINUTE_DAMAGEDEALT = &s
			iNdEx = postIndex
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SMALLDRAGON_RATE", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.SMALLDRAGON_RATE = &v2
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BIGDRAGON_RATE", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.BIGDRAGON_RATE = &v2
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field VICTORY_RATE", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.VICTORY_RATE = &v2
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VICTORY_COUNT", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VICTORY_COUNT = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FAIl_COUNT", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FAIl_COUNT = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinuityCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ContinuityCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StrengthIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StrengthIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StrengthIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandWinTeamA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HandWinTeamA = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandWinTeamB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HandWinTeamB = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandLoseTeamA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HandLoseTeamA = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandLoseTeamB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HandLoseTeamB = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordWinTeamA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RecordWinTeamA = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordWinTeamB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RecordWinTeamB = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordLoseTeamA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RecordLoseTeamA = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordLoseTeamB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RecordLoseTeamB = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageKillsTeamA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AverageKillsTeamA = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageKillsTeamB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AverageKillsTeamB = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageTowerTeamA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AverageTowerTeamA = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageTowerTeamB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AverageTowerTeamB = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageMoneyTeamA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AverageMoneyTeamA = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageMoneyTeamB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AverageMoneyTeamB = &s
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreTeamA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ScoreTeamA = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreTeamB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ScoreTeamB = &s
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VictoryRateA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VictoryRateA = &s
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VictoryRateB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VictoryRateB = &s
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageTimeA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AverageTimeA = &s
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageTimeB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AverageTimeB = &s
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageAssistsTeamA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AverageAssistsTeamA = &s
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageAssistsTeamB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AverageAssistsTeamB = &s
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageDeathsTeamA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AverageDeathsTeamA = &s
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageDeathsTeamB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AverageDeathsTeamB = &s
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageKdaTeamA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AverageKdaTeamA = &s
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageKdaTeamB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AverageKdaTeamB = &s
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstBloodKillTeamA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FirstBloodKillTeamA = &s
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstBloodKillTeamB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FirstBloodKillTeamB = &s
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinuteDamageTeamA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MinuteDamageTeamA = &s
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinuteDamageTeamB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MinuteDamageTeamB = &s
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstTowerKillTeamA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FirstTowerKillTeamA = &s
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstTowerKillTeamB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FirstTowerKillTeamB = &s
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageMoneyDiffTeamA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AverageMoneyDiffTeamA = &s
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageMoneyDiffTeamB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AverageMoneyDiffTeamB = &s
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinuteMoneyTeamA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MinuteMoneyTeamA = &s
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinuteMoneyTeamB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MinuteMoneyTeamB = &s
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinuteHitsTeamA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MinuteHitsTeamA = &s
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinuteHitsTeamB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MinuteHitsTeamB = &s
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageDragonTeamA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AverageDragonTeamA = &s
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageDragonTeamB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AverageDragonTeamB = &s
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageBaronTeamA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AverageBaronTeamA = &s
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageBaronTeamB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AverageBaronTeamB = &s
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateDragonTeamA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RateDragonTeamA = &s
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateDragonTeamB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RateDragonTeamB = &s
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateBaronTeamA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RateBaronTeamA = &s
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateBaronTeamB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RateBaronTeamB = &s
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinuteWardsPlacedTeamA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MinuteWardsPlacedTeamA = &s
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinuteWardsPlacedTeamB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MinuteWardsPlacedTeamB = &s
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinuteWardsKilledTeamA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MinuteWardsKilledTeamA = &s
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinuteWardsKilledTeamB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MinuteWardsKilledTeamB = &s
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageBeTurretKillsTeamA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AverageBeTurretKillsTeamA = &s
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageBeTurretKillsTeamB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AverageBeTurretKillsTeamB = &s
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateFullBureauTeamA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RateFullBureauTeamA = &s
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateFullBureauTeamB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RateFullBureauTeamB = &s
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDragonTeamA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TotalDragonTeamA = &s
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDragonTeamB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TotalDragonTeamB = &s
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBaronTeamA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TotalBaronTeamA = &s
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBaronTeamB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TotalBaronTeamB = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PlayerID = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Nickname = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PositionID = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamID = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerImageThumb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PlayerImageThumb = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PositionName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CountryId = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CountryImage = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamShortName = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamImageThumb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamImageThumb = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerChineseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PlayerChineseName = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Total = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DamageDealPercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DamageDealPercent = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamPercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamPercent = &s
			iNdEx = postIndex
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MINUTE_DAMAGEDEALT", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.MINUTE_DAMAGEDEALT = &v2
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AVERAGE_KILLS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AVERAGE_KILLS = &s
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AVERAGE_ASSISTS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AVERAGE_ASSISTS = &s
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AVERAGE_DEATHS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AVERAGE_DEATHS = &s
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KDA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.KDA = &s
			iNdEx = postIndex
		case 20:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MINUTE_ECONOMIC", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.MINUTE_ECONOMIC = &v2
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MINUTE_WARDSPLACED", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MINUTE_WARDSPLACED = &s
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AVERAGE_MinionsKilled", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AVERAGE_MinionsKilled = &s
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AVERAGE_Life", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AVERAGE_Life = &s
			iNdEx = postIndex
		case 24:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDamageTaken", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.TotalDamageTaken = &v2
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeutralMinionsKilled", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NeutralMinionsKilled = &s
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WardsPlaced", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WardsPlaced = &s
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WardsKilled", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WardsKilled = &s
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.StatusID = &s
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WinCount = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoseCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LoseCount = &v
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMatchTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LastMatchTime = &s
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinLose", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WinLose = append(m.WinLose, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VICTORY_RATE", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VICTORY_RATE = &s
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamType = &s
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeutralMinionsKilledRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NeutralMinionsKilledRate = &s
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroWinLose", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroWinLose = append(m.HeroWinLose, &HeroWinLose{})
			if err := m.HeroWinLose[len(m.HeroWinLose)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroWinLose) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroWinLose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroWinLose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeroID = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeroImage = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Win = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lose", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Lose = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamAWinCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TeamAWinCount = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamBWinCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TeamBWinCount = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &MatchRecordList{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchRecordList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchRecordList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchRecordList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinTeamId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WinTeamId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinTeamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WinTeamName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.StartTime = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MatchID = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamIDA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamIDA = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamIDB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamIDB = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamAImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamAImage = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamBImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamBImage = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamAShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamAShortName = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamBShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamBShortName = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamAWin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamAWin = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamBWin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamBWin = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultList = append(m.ResultList, &MatchRecordResultList{})
			if err := m.ResultList[len(m.ResultList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchRecordResultList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchRecordResultList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchRecordResultList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ResultID = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinTeamID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WinTeamID = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamShortName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamImage = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESports
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Bo = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESports(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESports
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTableStructESports(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTableStructESports
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTableStructESports
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTableStructESports
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTableStructESports
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTableStructESports
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTableStructESports(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTableStructESports
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTableStructESports = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTableStructESports   = fmt.Errorf("proto: integer overflow")
)
