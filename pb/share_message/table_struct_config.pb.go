// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: table_struct_config.proto

// 如果仅仅用于通讯的 message,别放在这里

package share_message

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_akqp2019_protobuf_proto "github.com/akqp2019/protobuf/proto"
	proto "github.com/akqp2019/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//游戏列表 game_list
type GameList struct {
	Id                   *int32   `protobuf:"varint,1,req,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	Title                *string  `protobuf:"bytes,2,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	Icon                 *string  `protobuf:"bytes,3,opt,name=Icon" json:"Icon,omitempty" bson:"Icon,omitempty"`
	H5OpenPos            []int32  `protobuf:"varint,4,rep,name=H5OpenPos" json:"H5OpenPos,omitempty" bson:"H5OpenPos,omitempty"`
	OpenVip              []int32  `protobuf:"varint,5,rep,name=OpenVip" json:"OpenVip,omitempty" bson:"OpenVip,omitempty"`
	H5Status             *bool    `protobuf:"varint,6,opt,name=H5Status" json:"H5Status,omitempty" bson:"H5Status,omitempty"`
	H5MaintainStatus     *bool    `protobuf:"varint,7,opt,name=H5MaintainStatus" json:"H5MaintainStatus,omitempty" bson:"H5MaintainStatus,omitempty"`
	H5Sort               *int32   `protobuf:"varint,12,opt,name=H5Sort" json:"H5Sort,omitempty" bson:"H5Sort,omitempty"`
	H5Recommend          *int32   `protobuf:"varint,15,opt,name=H5Recommend" json:"H5Recommend,omitempty" bson:"H5Recommend,omitempty"`
	RobotStatus          *bool    `protobuf:"varint,8,opt,name=RobotStatus" json:"RobotStatus,omitempty" bson:"RobotStatus,omitempty"`
	CreateTime           *int32   `protobuf:"varint,11,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	GameId               *string  `protobuf:"bytes,13,opt,name=GameId" json:"GameId,omitempty" bson:"GameId,omitempty"`
	Operator             *string  `protobuf:"bytes,14,opt,name=Operator" json:"Operator,omitempty" bson:"Operator,omitempty"`
	Type                 *int32   `protobuf:"varint,16,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	AppStatus            *bool    `protobuf:"varint,17,opt,name=AppStatus" json:"AppStatus,omitempty" bson:"AppStatus,omitempty"`
	AppMaintainStatus    *bool    `protobuf:"varint,18,opt,name=AppMaintainStatus" json:"AppMaintainStatus,omitempty" bson:"AppMaintainStatus,omitempty"`
	AppSort              *int32   `protobuf:"varint,19,opt,name=AppSort" json:"AppSort,omitempty" bson:"AppSort,omitempty"`
	AppRecommend         *int32   `protobuf:"varint,20,opt,name=AppRecommend" json:"AppRecommend,omitempty" bson:"AppRecommend,omitempty"`
	AppOpenPos           []int32  `protobuf:"varint,21,rep,name=AppOpenPos" json:"AppOpenPos,omitempty" bson:"AppOpenPos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GameList) Reset()         { *m = GameList{} }
func (m *GameList) String() string { return proto.CompactTextString(m) }
func (*GameList) ProtoMessage()    {}
func (*GameList) Descriptor() ([]byte, []int) {
	return fileDescriptor_de521b2ea16a7359, []int{0}
}
func (m *GameList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameList.Merge(m, src)
}
func (m *GameList) XXX_Size() int {
	return m.Size()
}
func (m *GameList) XXX_DiscardUnknown() {
	xxx_messageInfo_GameList.DiscardUnknown(m)
}

var xxx_messageInfo_GameList proto.InternalMessageInfo

func (m *GameList) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *GameList) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *GameList) GetIcon() string {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return ""
}

func (m *GameList) GetH5OpenPos() []int32 {
	if m != nil {
		return m.H5OpenPos
	}
	return nil
}

func (m *GameList) GetOpenVip() []int32 {
	if m != nil {
		return m.OpenVip
	}
	return nil
}

func (m *GameList) GetH5Status() bool {
	if m != nil && m.H5Status != nil {
		return *m.H5Status
	}
	return false
}

func (m *GameList) GetH5MaintainStatus() bool {
	if m != nil && m.H5MaintainStatus != nil {
		return *m.H5MaintainStatus
	}
	return false
}

func (m *GameList) GetH5Sort() int32 {
	if m != nil && m.H5Sort != nil {
		return *m.H5Sort
	}
	return 0
}

func (m *GameList) GetH5Recommend() int32 {
	if m != nil && m.H5Recommend != nil {
		return *m.H5Recommend
	}
	return 0
}

func (m *GameList) GetRobotStatus() bool {
	if m != nil && m.RobotStatus != nil {
		return *m.RobotStatus
	}
	return false
}

func (m *GameList) GetCreateTime() int32 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *GameList) GetGameId() string {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return ""
}

func (m *GameList) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *GameList) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *GameList) GetAppStatus() bool {
	if m != nil && m.AppStatus != nil {
		return *m.AppStatus
	}
	return false
}

func (m *GameList) GetAppMaintainStatus() bool {
	if m != nil && m.AppMaintainStatus != nil {
		return *m.AppMaintainStatus
	}
	return false
}

func (m *GameList) GetAppSort() int32 {
	if m != nil && m.AppSort != nil {
		return *m.AppSort
	}
	return 0
}

func (m *GameList) GetAppRecommend() int32 {
	if m != nil && m.AppRecommend != nil {
		return *m.AppRecommend
	}
	return 0
}

func (m *GameList) GetAppOpenPos() []int32 {
	if m != nil {
		return m.AppOpenPos
	}
	return nil
}

////游戏配置列表结构
type GameConfig struct {
	Id                   *string  `protobuf:"bytes,1,req,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GameConfig) Reset()         { *m = GameConfig{} }
func (m *GameConfig) String() string { return proto.CompactTextString(m) }
func (*GameConfig) ProtoMessage()    {}
func (*GameConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_de521b2ea16a7359, []int{1}
}
func (m *GameConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameConfig.Merge(m, src)
}
func (m *GameConfig) XXX_Size() int {
	return m.Size()
}
func (m *GameConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_GameConfig.DiscardUnknown(m)
}

var xxx_messageInfo_GameConfig proto.InternalMessageInfo

func (m *GameConfig) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *GameConfig) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

//每日分享设置
type ShareDay struct {
	ShareDayId           *int32   `protobuf:"varint,1,opt,name=ShareDayId" json:"_id,omitempty" bson:"_id,omitempty"`
	KeyName              *string  `protobuf:"bytes,2,opt,name=KeyName" json:"KeyName,omitempty" bson:"KeyName,omitempty"`
	KeyValue             *int32   `protobuf:"varint,3,opt,name=KeyValue" json:"KeyValue,omitempty" bson:"KeyValue,omitempty"`
	Name                 *string  `protobuf:"bytes,4,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Remarks              *string  `protobuf:"bytes,5,opt,name=Remarks" json:"Remarks,omitempty" bson:"Remarks,omitempty"`
	Description          *string  `protobuf:"bytes,6,opt,name=Description" json:"Description,omitempty" bson:"Description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ShareDay) Reset()         { *m = ShareDay{} }
func (m *ShareDay) String() string { return proto.CompactTextString(m) }
func (*ShareDay) ProtoMessage()    {}
func (*ShareDay) Descriptor() ([]byte, []int) {
	return fileDescriptor_de521b2ea16a7359, []int{2}
}
func (m *ShareDay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareDay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareDay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareDay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareDay.Merge(m, src)
}
func (m *ShareDay) XXX_Size() int {
	return m.Size()
}
func (m *ShareDay) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareDay.DiscardUnknown(m)
}

var xxx_messageInfo_ShareDay proto.InternalMessageInfo

func (m *ShareDay) GetShareDayId() int32 {
	if m != nil && m.ShareDayId != nil {
		return *m.ShareDayId
	}
	return 0
}

func (m *ShareDay) GetKeyName() string {
	if m != nil && m.KeyName != nil {
		return *m.KeyName
	}
	return ""
}

func (m *ShareDay) GetKeyValue() int32 {
	if m != nil && m.KeyValue != nil {
		return *m.KeyValue
	}
	return 0
}

func (m *ShareDay) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ShareDay) GetRemarks() string {
	if m != nil && m.Remarks != nil {
		return *m.Remarks
	}
	return ""
}

func (m *ShareDay) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

//保险箱设置
type SetSafe struct {
	SetSafeId            *int32   `protobuf:"varint,1,opt,name=SetSafeId" json:"_id,omitempty" bson:"_id,omitempty"`
	MinDeposit           *int32   `protobuf:"varint,2,opt,name=MinDeposit" json:"MinDeposit,omitempty" bson:"MinDeposit,omitempty"`
	MinWithdrawal        *int32   `protobuf:"varint,3,opt,name=MinWithdrawal" json:"MinWithdrawal,omitempty" bson:"MinWithdrawal,omitempty"`
	MinTransfer          *int32   `protobuf:"varint,4,opt,name=MinTransfer" json:"MinTransfer,omitempty" bson:"MinTransfer,omitempty"`
	TurnMoney            *float32 `protobuf:"fixed32,5,opt,name=TurnMoney" json:"TurnMoney,omitempty" bson:"TurnMoney,omitempty"`
	TakeMoney            *float32 `protobuf:"fixed32,6,opt,name=TakeMoney" json:"TakeMoney,omitempty" bson:"TakeMoney,omitempty"`
	SlidingLength        *int32   `protobuf:"varint,7,opt,name=SlidingLength" json:"SlidingLength,omitempty" bson:"SlidingLength,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *SetSafe) Reset()         { *m = SetSafe{} }
func (m *SetSafe) String() string { return proto.CompactTextString(m) }
func (*SetSafe) ProtoMessage()    {}
func (*SetSafe) Descriptor() ([]byte, []int) {
	return fileDescriptor_de521b2ea16a7359, []int{3}
}
func (m *SetSafe) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetSafe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetSafe.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetSafe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetSafe.Merge(m, src)
}
func (m *SetSafe) XXX_Size() int {
	return m.Size()
}
func (m *SetSafe) XXX_DiscardUnknown() {
	xxx_messageInfo_SetSafe.DiscardUnknown(m)
}

var xxx_messageInfo_SetSafe proto.InternalMessageInfo

func (m *SetSafe) GetSetSafeId() int32 {
	if m != nil && m.SetSafeId != nil {
		return *m.SetSafeId
	}
	return 0
}

func (m *SetSafe) GetMinDeposit() int32 {
	if m != nil && m.MinDeposit != nil {
		return *m.MinDeposit
	}
	return 0
}

func (m *SetSafe) GetMinWithdrawal() int32 {
	if m != nil && m.MinWithdrawal != nil {
		return *m.MinWithdrawal
	}
	return 0
}

func (m *SetSafe) GetMinTransfer() int32 {
	if m != nil && m.MinTransfer != nil {
		return *m.MinTransfer
	}
	return 0
}

func (m *SetSafe) GetTurnMoney() float32 {
	if m != nil && m.TurnMoney != nil {
		return *m.TurnMoney
	}
	return 0
}

func (m *SetSafe) GetTakeMoney() float32 {
	if m != nil && m.TakeMoney != nil {
		return *m.TakeMoney
	}
	return 0
}

func (m *SetSafe) GetSlidingLength() int32 {
	if m != nil && m.SlidingLength != nil {
		return *m.SlidingLength
	}
	return 0
}

//盈利税收
type ProfitTax struct {
	ProfitTaxId          *int32   `protobuf:"varint,1,opt,name=ProfitTaxId" json:"_id,omitempty" bson:"_id,omitempty"`
	SystemTaxRate        *float32 `protobuf:"fixed32,2,opt,name=SystemTaxRate" json:"SystemTaxRate,omitempty" bson:"SystemTaxRate,omitempty"`
	Remarks              *string  `protobuf:"bytes,3,opt,name=Remarks" json:"Remarks,omitempty" bson:"Remarks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ProfitTax) Reset()         { *m = ProfitTax{} }
func (m *ProfitTax) String() string { return proto.CompactTextString(m) }
func (*ProfitTax) ProtoMessage()    {}
func (*ProfitTax) Descriptor() ([]byte, []int) {
	return fileDescriptor_de521b2ea16a7359, []int{4}
}
func (m *ProfitTax) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProfitTax) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProfitTax.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProfitTax) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfitTax.Merge(m, src)
}
func (m *ProfitTax) XXX_Size() int {
	return m.Size()
}
func (m *ProfitTax) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfitTax.DiscardUnknown(m)
}

var xxx_messageInfo_ProfitTax proto.InternalMessageInfo

func (m *ProfitTax) GetProfitTaxId() int32 {
	if m != nil && m.ProfitTaxId != nil {
		return *m.ProfitTaxId
	}
	return 0
}

func (m *ProfitTax) GetSystemTaxRate() float32 {
	if m != nil && m.SystemTaxRate != nil {
		return *m.SystemTaxRate
	}
	return 0
}

func (m *ProfitTax) GetRemarks() string {
	if m != nil && m.Remarks != nil {
		return *m.Remarks
	}
	return ""
}

//系统消息设置
type SystemFastMsg struct {
	MsgId                *int64   `protobuf:"varint,1,req,name=MsgId" json:"_id,omitempty" bson:"_id,omitempty"`
	ReceiverType         *int32   `protobuf:"varint,2,opt,name=ReceiverType" json:"ReceiverType,omitempty" bson:"ReceiverType,omitempty"`
	PushTime             *int32   `protobuf:"varint,3,opt,name=PushTime" json:"PushTime,omitempty" bson:"PushTime,omitempty"`
	PushStatus           *int32   `protobuf:"varint,4,opt,name=PushStatus" json:"PushStatus,omitempty" bson:"PushStatus,omitempty"`
	Content              *string  `protobuf:"bytes,5,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	Operator             *string  `protobuf:"bytes,6,opt,name=Operator" json:"Operator,omitempty" bson:"Operator,omitempty"`
	CreateTime           *int32   `protobuf:"varint,7,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	Site                 *string  `protobuf:"bytes,8,opt,name=Site" json:"Site,omitempty" bson:"Site,omitempty"`
	IsPush               *int32   `protobuf:"varint,9,opt,name=IsPush" json:"IsPush,omitempty" bson:"IsPush,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *SystemFastMsg) Reset()         { *m = SystemFastMsg{} }
func (m *SystemFastMsg) String() string { return proto.CompactTextString(m) }
func (*SystemFastMsg) ProtoMessage()    {}
func (*SystemFastMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_de521b2ea16a7359, []int{5}
}
func (m *SystemFastMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemFastMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemFastMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemFastMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemFastMsg.Merge(m, src)
}
func (m *SystemFastMsg) XXX_Size() int {
	return m.Size()
}
func (m *SystemFastMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemFastMsg.DiscardUnknown(m)
}

var xxx_messageInfo_SystemFastMsg proto.InternalMessageInfo

func (m *SystemFastMsg) GetMsgId() int64 {
	if m != nil && m.MsgId != nil {
		return *m.MsgId
	}
	return 0
}

func (m *SystemFastMsg) GetReceiverType() int32 {
	if m != nil && m.ReceiverType != nil {
		return *m.ReceiverType
	}
	return 0
}

func (m *SystemFastMsg) GetPushTime() int32 {
	if m != nil && m.PushTime != nil {
		return *m.PushTime
	}
	return 0
}

func (m *SystemFastMsg) GetPushStatus() int32 {
	if m != nil && m.PushStatus != nil {
		return *m.PushStatus
	}
	return 0
}

func (m *SystemFastMsg) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *SystemFastMsg) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *SystemFastMsg) GetCreateTime() int32 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *SystemFastMsg) GetSite() string {
	if m != nil && m.Site != nil {
		return *m.Site
	}
	return ""
}

func (m *SystemFastMsg) GetIsPush() int32 {
	if m != nil && m.IsPush != nil {
		return *m.IsPush
	}
	return 0
}

//系统邮件设置
type SystemMailRule struct {
	SystemMailID         *int64   `protobuf:"varint,1,req,name=SystemMailID" json:"_id,omitempty" bson:"_id,omitempty"`
	Management           *string  `protobuf:"bytes,2,opt,name=Management" json:"Management,omitempty" bson:"Management,omitempty"`
	Recipient            *int32   `protobuf:"varint,3,opt,name=Recipient" json:"Recipient,omitempty" bson:"Recipient,omitempty"`
	MailTitle            *string  `protobuf:"bytes,4,opt,name=MailTitle" json:"MailTitle,omitempty" bson:"MailTitle,omitempty"`
	PushStatus           *int32   `protobuf:"varint,5,opt,name=PushStatus" json:"PushStatus,omitempty" bson:"PushStatus,omitempty"`
	PushTime             *int64   `protobuf:"varint,6,opt,name=PushTime" json:"PushTime,omitempty" bson:"PushTime,omitempty"`
	Content              *string  `protobuf:"bytes,7,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	PushPeople           *string  `protobuf:"bytes,8,opt,name=PushPeople" json:"PushPeople,omitempty" bson:"PushPeople,omitempty"`
	Status               *int32   `protobuf:"varint,9,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	StartTime            *int64   `protobuf:"varint,10,opt,name=StartTime" json:"StartTime,omitempty" bson:"StartTime,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,11,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	UpdateAccount        *string  `protobuf:"bytes,12,opt,name=UpdateAccount" json:"UpdateAccount,omitempty" bson:"UpdateAccount,omitempty"`
	Site                 *string  `protobuf:"bytes,13,opt,name=Site" json:"Site,omitempty" bson:"Site,omitempty"`
	IsPush               *int32   `protobuf:"varint,14,opt,name=IsPush" json:"IsPush,omitempty" bson:"IsPush,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *SystemMailRule) Reset()         { *m = SystemMailRule{} }
func (m *SystemMailRule) String() string { return proto.CompactTextString(m) }
func (*SystemMailRule) ProtoMessage()    {}
func (*SystemMailRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_de521b2ea16a7359, []int{6}
}
func (m *SystemMailRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemMailRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemMailRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemMailRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemMailRule.Merge(m, src)
}
func (m *SystemMailRule) XXX_Size() int {
	return m.Size()
}
func (m *SystemMailRule) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemMailRule.DiscardUnknown(m)
}

var xxx_messageInfo_SystemMailRule proto.InternalMessageInfo

func (m *SystemMailRule) GetSystemMailID() int64 {
	if m != nil && m.SystemMailID != nil {
		return *m.SystemMailID
	}
	return 0
}

func (m *SystemMailRule) GetManagement() string {
	if m != nil && m.Management != nil {
		return *m.Management
	}
	return ""
}

func (m *SystemMailRule) GetRecipient() int32 {
	if m != nil && m.Recipient != nil {
		return *m.Recipient
	}
	return 0
}

func (m *SystemMailRule) GetMailTitle() string {
	if m != nil && m.MailTitle != nil {
		return *m.MailTitle
	}
	return ""
}

func (m *SystemMailRule) GetPushStatus() int32 {
	if m != nil && m.PushStatus != nil {
		return *m.PushStatus
	}
	return 0
}

func (m *SystemMailRule) GetPushTime() int64 {
	if m != nil && m.PushTime != nil {
		return *m.PushTime
	}
	return 0
}

func (m *SystemMailRule) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *SystemMailRule) GetPushPeople() string {
	if m != nil && m.PushPeople != nil {
		return *m.PushPeople
	}
	return ""
}

func (m *SystemMailRule) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *SystemMailRule) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *SystemMailRule) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *SystemMailRule) GetUpdateAccount() string {
	if m != nil && m.UpdateAccount != nil {
		return *m.UpdateAccount
	}
	return ""
}

func (m *SystemMailRule) GetSite() string {
	if m != nil && m.Site != nil {
		return *m.Site
	}
	return ""
}

func (m *SystemMailRule) GetIsPush() int32 {
	if m != nil && m.IsPush != nil {
		return *m.IsPush
	}
	return 0
}

func init() {
	proto.RegisterType((*GameList)(nil), "share_message.GameList")
	proto.RegisterType((*GameConfig)(nil), "share_message.GameConfig")
	proto.RegisterType((*ShareDay)(nil), "share_message.ShareDay")
	proto.RegisterType((*SetSafe)(nil), "share_message.SetSafe")
	proto.RegisterType((*ProfitTax)(nil), "share_message.ProfitTax")
	proto.RegisterType((*SystemFastMsg)(nil), "share_message.SystemFastMsg")
	proto.RegisterType((*SystemMailRule)(nil), "share_message.SystemMailRule")
}

func init() { proto.RegisterFile("table_struct_config.proto", fileDescriptor_de521b2ea16a7359) }

var fileDescriptor_de521b2ea16a7359 = []byte{
	// 767 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xcb, 0x6e, 0xe3, 0x36,
	0x14, 0x85, 0xec, 0x28, 0xb2, 0xae, 0xdf, 0x4c, 0x02, 0x68, 0x0a, 0x34, 0x35, 0x8c, 0x3e, 0xbc,
	0x28, 0xba, 0xf3, 0xa2, 0x4b, 0x37, 0x41, 0x6b, 0x63, 0xc6, 0x9d, 0xc0, 0x76, 0xa7, 0x8b, 0x2e,
	0x02, 0x8e, 0x7c, 0xa3, 0x10, 0x23, 0x91, 0x04, 0x49, 0xb7, 0xe3, 0x3f, 0xe8, 0xb7, 0x14, 0xfd,
	0x8a, 0xae, 0xba, 0xec, 0x17, 0x14, 0x45, 0x96, 0xf3, 0x15, 0x05, 0xaf, 0x24, 0xc7, 0x48, 0xa7,
	0xb3, 0x93, 0xce, 0x25, 0x0f, 0xcf, 0x3d, 0xe7, 0x92, 0xf0, 0xcc, 0xf1, 0xd7, 0x39, 0xde, 0x5a,
	0x67, 0x76, 0xa9, 0xbb, 0x4d, 0x95, 0xbc, 0x13, 0xd9, 0x57, 0xda, 0x28, 0xa7, 0x58, 0xd7, 0xde,
	0x73, 0x83, 0xb7, 0x05, 0x5a, 0xcb, 0x33, 0xfc, 0xa8, 0x93, 0x65, 0xca, 0xf1, 0xaa, 0x38, 0x7e,
	0xd7, 0x80, 0xd6, 0x77, 0xbc, 0xc0, 0x17, 0xc2, 0x3a, 0x06, 0xd0, 0x58, 0x6c, 0x93, 0x60, 0xd4,
	0x98, 0x84, 0xac, 0x0b, 0xe1, 0x46, 0xb8, 0x1c, 0x93, 0xc6, 0x28, 0x98, 0xc4, 0xac, 0x03, 0x27,
	0x8b, 0x54, 0xc9, 0xa4, 0x49, 0x7f, 0x43, 0x88, 0xe7, 0xd3, 0x97, 0x1a, 0xe5, 0x8d, 0xb2, 0xc9,
	0xc9, 0xa8, 0x39, 0x09, 0x59, 0x1f, 0x22, 0x0f, 0xbc, 0x12, 0x3a, 0x09, 0x09, 0x18, 0x40, 0x6b,
	0x3e, 0x5d, 0x3b, 0xee, 0x76, 0x36, 0x39, 0x1d, 0x05, 0x93, 0x16, 0x4b, 0x60, 0x30, 0x9f, 0x2e,
	0xb9, 0x90, 0x8e, 0x0b, 0x59, 0x55, 0x22, 0xaa, 0xf4, 0xe0, 0x74, 0x3e, 0x5d, 0x2b, 0xe3, 0x92,
	0xce, 0x28, 0x98, 0x84, 0xec, 0x0c, 0xda, 0xf3, 0xe9, 0x0a, 0x53, 0x55, 0x14, 0x28, 0xb7, 0x49,
	0xbf, 0x06, 0x57, 0xea, 0xb5, 0x72, 0xd5, 0xce, 0x16, 0xed, 0x64, 0x00, 0x57, 0x06, 0xb9, 0xc3,
	0x8d, 0x28, 0x30, 0x69, 0xd3, 0xc2, 0x1e, 0x9c, 0xfa, 0x96, 0x16, 0xdb, 0xa4, 0x4b, 0x6a, 0x07,
	0xd0, 0x7a, 0xa9, 0xd1, 0x70, 0xa7, 0x4c, 0xd2, 0xab, 0xbb, 0xd9, 0xec, 0x35, 0x26, 0x03, 0x5a,
	0x3f, 0x84, 0x78, 0xa6, 0x75, 0x45, 0x3b, 0x24, 0xda, 0x67, 0x30, 0x9c, 0x69, 0xfd, 0x44, 0x2b,
	0xa3, 0x52, 0x1f, 0x22, 0xbf, 0xda, 0x8b, 0x3d, 0xa3, 0xed, 0xe7, 0xd0, 0x99, 0x69, 0xfd, 0xa8,
	0xf6, 0x9c, 0x50, 0x06, 0x30, 0xd3, 0xba, 0xf6, 0xe8, 0xc2, 0x5b, 0x32, 0xfe, 0x1a, 0xc0, 0x0b,
	0xbb, 0xa2, 0x74, 0xd8, 0xc7, 0x07, 0xb7, 0xe3, 0x6f, 0x86, 0xef, 0xfe, 0xfe, 0xa4, 0x7b, 0x2b,
	0xb6, 0x5f, 0xaa, 0x42, 0x38, 0x2c, 0xb4, 0xdb, 0x7b, 0x8d, 0xdf, 0xf3, 0xa2, 0xf2, 0x7f, 0xfc,
	0x6b, 0x00, 0xad, 0xb5, 0xcf, 0xf1, 0x9a, 0xef, 0xd9, 0x67, 0x00, 0xf5, 0x37, 0x31, 0x04, 0x93,
	0xf0, 0x7d, 0x0c, 0x7d, 0x88, 0x9e, 0xe3, 0xfe, 0x91, 0xc4, 0x1b, 0xf1, 0x1c, 0xf7, 0xaf, 0x78,
	0xbe, 0x43, 0x0a, 0x32, 0x3c, 0x1c, 0x72, 0x42, 0xf5, 0x3e, 0x44, 0x2b, 0x2c, 0xb8, 0x79, 0x63,
	0x93, 0x90, 0x80, 0x33, 0x68, 0x5f, 0xa3, 0x4d, 0x8d, 0xd0, 0x4e, 0x28, 0x49, 0x31, 0xc6, 0xe3,
	0xdf, 0x03, 0x88, 0xd6, 0xe8, 0xd6, 0xfc, 0x0e, 0xd9, 0xa7, 0x10, 0x57, 0x9f, 0x1f, 0x12, 0xc2,
	0x00, 0x96, 0x42, 0x5e, 0xa3, 0x56, 0x56, 0x38, 0xd2, 0x12, 0xb2, 0x0b, 0xe8, 0x2e, 0x85, 0xfc,
	0x51, 0xb8, 0xfb, 0xad, 0xe1, 0xbf, 0xf0, 0xbc, 0x12, 0x74, 0x06, 0xed, 0xa5, 0x90, 0x1b, 0xc3,
	0xa5, 0xbd, 0x43, 0x43, 0xba, 0x28, 0xa0, 0xcd, 0xce, 0xc8, 0xa5, 0x92, 0xb8, 0x27, 0x65, 0x0d,
	0x82, 0xf8, 0x1b, 0x2c, 0xa1, 0x53, 0x82, 0x2e, 0xa0, 0xbb, 0xce, 0xc5, 0x56, 0xc8, 0xec, 0x05,
	0xca, 0xcc, 0xdd, 0xd3, 0x6c, 0x85, 0xe3, 0x9f, 0x20, 0xbe, 0x31, 0xea, 0x4e, 0xb8, 0x0d, 0x7f,
	0xcb, 0x3e, 0x87, 0xf6, 0xe1, 0xe7, 0x43, 0x8a, 0x3d, 0xd7, 0xde, 0x3a, 0x2c, 0x36, 0xfc, 0xed,
	0x8a, 0xbb, 0xd2, 0xc0, 0xc6, 0xb1, 0x41, 0x74, 0x11, 0xc6, 0x7f, 0x04, 0xf5, 0xc2, 0x6f, 0xb9,
	0x75, 0x4b, 0x9b, 0xb1, 0x11, 0x84, 0x4b, 0x9b, 0x55, 0xc1, 0x36, 0xdf, 0xc7, 0x7d, 0x0e, 0x9d,
	0x15, 0xa6, 0x28, 0x7e, 0x46, 0x43, 0x43, 0x58, 0xfa, 0x31, 0x80, 0xd6, 0xcd, 0xce, 0xde, 0xd3,
	0x18, 0x37, 0xeb, 0x09, 0xf2, 0x48, 0x35, 0x7c, 0xa5, 0x13, 0x7d, 0x88, 0xae, 0x94, 0x74, 0x28,
	0x5d, 0x95, 0xd0, 0xf1, 0x6c, 0x53, 0x3c, 0x4f, 0x6e, 0x44, 0x54, 0xc7, 0xbc, 0x16, 0x0e, 0xe9,
	0xce, 0xc4, 0xfe, 0x7e, 0x2c, 0xac, 0xa7, 0x4e, 0x62, 0x72, 0xe8, 0xb7, 0x06, 0xf4, 0xca, 0x26,
	0x96, 0x5c, 0xe4, 0xab, 0x5d, 0x8e, 0xec, 0x0b, 0xe8, 0x3c, 0x22, 0x8b, 0xeb, 0xff, 0x6f, 0xc6,
	0x47, 0xcb, 0x25, 0xcf, 0xb0, 0xf0, 0x9a, 0x1a, 0xf5, 0xeb, 0xb0, 0xc2, 0x54, 0x68, 0xe1, 0xa1,
	0x66, 0x9d, 0xa0, 0x67, 0x2a, 0x5f, 0x94, 0x93, 0x5a, 0xe7, 0x51, 0x7b, 0xe1, 0x7f, 0x4c, 0xf0,
	0xdd, 0x34, 0x8f, 0x1b, 0x8e, 0x8e, 0xb7, 0xdd, 0xa0, 0xd2, 0xf9, 0x51, 0x43, 0x15, 0x4d, 0x5c,
	0x9f, 0xb6, 0x76, 0xdc, 0x38, 0xe2, 0x01, 0xe2, 0x61, 0x00, 0x3f, 0xe8, 0xed, 0xf1, 0x3b, 0xd1,
	0xf4, 0x21, 0x97, 0xd8, 0x2c, 0x4d, 0xd5, 0x4e, 0x96, 0x8f, 0x4f, 0x7c, 0x30, 0xab, 0xfb, 0xc4,
	0xac, 0x1e, 0x0d, 0x4b, 0xe7, 0xcf, 0x87, 0xcb, 0xe0, 0xaf, 0x87, 0xcb, 0xe0, 0x9f, 0x87, 0xcb,
	0xe0, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6f, 0xc4, 0xb0, 0xe4, 0x77, 0x05, 0x00, 0x00,
}

func (m *GameList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("Id")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.Id))
	}
	if m.Title != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.Icon != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(len(*m.Icon)))
		i += copy(dAtA[i:], *m.Icon)
	}
	if len(m.H5OpenPos) > 0 {
		for _, num := range m.H5OpenPos {
			dAtA[i] = 0x20
			i++
			i = encodeVarintTableStructConfig(dAtA, i, uint64(num))
		}
	}
	if len(m.OpenVip) > 0 {
		for _, num := range m.OpenVip {
			dAtA[i] = 0x28
			i++
			i = encodeVarintTableStructConfig(dAtA, i, uint64(num))
		}
	}
	if m.H5Status != nil {
		dAtA[i] = 0x30
		i++
		if *m.H5Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.H5MaintainStatus != nil {
		dAtA[i] = 0x38
		i++
		if *m.H5MaintainStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RobotStatus != nil {
		dAtA[i] = 0x40
		i++
		if *m.RobotStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.CreateTime))
	}
	if m.H5Sort != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.H5Sort))
	}
	if m.GameId != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(len(*m.GameId)))
		i += copy(dAtA[i:], *m.GameId)
	}
	if m.Operator != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(len(*m.Operator)))
		i += copy(dAtA[i:], *m.Operator)
	}
	if m.H5Recommend != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.H5Recommend))
	}
	if m.Type != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.Type))
	}
	if m.AppStatus != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if *m.AppStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AppMaintainStatus != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if *m.AppMaintainStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AppSort != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.AppSort))
	}
	if m.AppRecommend != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.AppRecommend))
	}
	if len(m.AppOpenPos) > 0 {
		for _, num := range m.AppOpenPos {
			dAtA[i] = 0xa8
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTableStructConfig(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("Id")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShareDay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareDay) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShareDayId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.ShareDayId))
	}
	if m.KeyName != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(len(*m.KeyName)))
		i += copy(dAtA[i:], *m.KeyName)
	}
	if m.KeyValue != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.KeyValue))
	}
	if m.Name != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Remarks != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(len(*m.Remarks)))
		i += copy(dAtA[i:], *m.Remarks)
	}
	if m.Description != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(len(*m.Description)))
		i += copy(dAtA[i:], *m.Description)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetSafe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetSafe) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SetSafeId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.SetSafeId))
	}
	if m.MinDeposit != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.MinDeposit))
	}
	if m.MinWithdrawal != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.MinWithdrawal))
	}
	if m.MinTransfer != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.MinTransfer))
	}
	if m.TurnMoney != nil {
		dAtA[i] = 0x2d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.TurnMoney))))
		i += 4
	}
	if m.TakeMoney != nil {
		dAtA[i] = 0x35
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.TakeMoney))))
		i += 4
	}
	if m.SlidingLength != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.SlidingLength))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProfitTax) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfitTax) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProfitTaxId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.ProfitTaxId))
	}
	if m.SystemTaxRate != nil {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.SystemTaxRate))))
		i += 4
	}
	if m.Remarks != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(len(*m.Remarks)))
		i += copy(dAtA[i:], *m.Remarks)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SystemFastMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemFastMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MsgId == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("MsgId")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.MsgId))
	}
	if m.ReceiverType != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.ReceiverType))
	}
	if m.PushTime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.PushTime))
	}
	if m.PushStatus != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.PushStatus))
	}
	if m.Content != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.Operator != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(len(*m.Operator)))
		i += copy(dAtA[i:], *m.Operator)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Site != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(len(*m.Site)))
		i += copy(dAtA[i:], *m.Site)
	}
	if m.IsPush != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.IsPush))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SystemMailRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemMailRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SystemMailID == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("SystemMailID")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.SystemMailID))
	}
	if m.Management != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(len(*m.Management)))
		i += copy(dAtA[i:], *m.Management)
	}
	if m.Recipient != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.Recipient))
	}
	if m.MailTitle != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(len(*m.MailTitle)))
		i += copy(dAtA[i:], *m.MailTitle)
	}
	if m.PushStatus != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.PushStatus))
	}
	if m.PushTime != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.PushTime))
	}
	if m.Content != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.PushPeople != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(len(*m.PushPeople)))
		i += copy(dAtA[i:], *m.PushPeople)
	}
	if m.Status != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.Status))
	}
	if m.StartTime != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.StartTime))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.UpdateAccount != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(len(*m.UpdateAccount)))
		i += copy(dAtA[i:], *m.UpdateAccount)
	}
	if m.Site != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(len(*m.Site)))
		i += copy(dAtA[i:], *m.Site)
	}
	if m.IsPush != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructConfig(dAtA, i, uint64(*m.IsPush))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTableStructConfig(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GameList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructConfig(uint64(*m.Id))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStructConfig(uint64(l))
	}
	if m.Icon != nil {
		l = len(*m.Icon)
		n += 1 + l + sovTableStructConfig(uint64(l))
	}
	if len(m.H5OpenPos) > 0 {
		for _, e := range m.H5OpenPos {
			n += 1 + sovTableStructConfig(uint64(e))
		}
	}
	if len(m.OpenVip) > 0 {
		for _, e := range m.OpenVip {
			n += 1 + sovTableStructConfig(uint64(e))
		}
	}
	if m.H5Status != nil {
		n += 2
	}
	if m.H5MaintainStatus != nil {
		n += 2
	}
	if m.RobotStatus != nil {
		n += 2
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructConfig(uint64(*m.CreateTime))
	}
	if m.H5Sort != nil {
		n += 1 + sovTableStructConfig(uint64(*m.H5Sort))
	}
	if m.GameId != nil {
		l = len(*m.GameId)
		n += 1 + l + sovTableStructConfig(uint64(l))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovTableStructConfig(uint64(l))
	}
	if m.H5Recommend != nil {
		n += 1 + sovTableStructConfig(uint64(*m.H5Recommend))
	}
	if m.Type != nil {
		n += 2 + sovTableStructConfig(uint64(*m.Type))
	}
	if m.AppStatus != nil {
		n += 3
	}
	if m.AppMaintainStatus != nil {
		n += 3
	}
	if m.AppSort != nil {
		n += 2 + sovTableStructConfig(uint64(*m.AppSort))
	}
	if m.AppRecommend != nil {
		n += 2 + sovTableStructConfig(uint64(*m.AppRecommend))
	}
	if len(m.AppOpenPos) > 0 {
		for _, e := range m.AppOpenPos {
			n += 2 + sovTableStructConfig(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStructConfig(uint64(l))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShareDay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShareDayId != nil {
		n += 1 + sovTableStructConfig(uint64(*m.ShareDayId))
	}
	if m.KeyName != nil {
		l = len(*m.KeyName)
		n += 1 + l + sovTableStructConfig(uint64(l))
	}
	if m.KeyValue != nil {
		n += 1 + sovTableStructConfig(uint64(*m.KeyValue))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructConfig(uint64(l))
	}
	if m.Remarks != nil {
		l = len(*m.Remarks)
		n += 1 + l + sovTableStructConfig(uint64(l))
	}
	if m.Description != nil {
		l = len(*m.Description)
		n += 1 + l + sovTableStructConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetSafe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SetSafeId != nil {
		n += 1 + sovTableStructConfig(uint64(*m.SetSafeId))
	}
	if m.MinDeposit != nil {
		n += 1 + sovTableStructConfig(uint64(*m.MinDeposit))
	}
	if m.MinWithdrawal != nil {
		n += 1 + sovTableStructConfig(uint64(*m.MinWithdrawal))
	}
	if m.MinTransfer != nil {
		n += 1 + sovTableStructConfig(uint64(*m.MinTransfer))
	}
	if m.TurnMoney != nil {
		n += 5
	}
	if m.TakeMoney != nil {
		n += 5
	}
	if m.SlidingLength != nil {
		n += 1 + sovTableStructConfig(uint64(*m.SlidingLength))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProfitTax) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProfitTaxId != nil {
		n += 1 + sovTableStructConfig(uint64(*m.ProfitTaxId))
	}
	if m.SystemTaxRate != nil {
		n += 5
	}
	if m.Remarks != nil {
		l = len(*m.Remarks)
		n += 1 + l + sovTableStructConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SystemFastMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgId != nil {
		n += 1 + sovTableStructConfig(uint64(*m.MsgId))
	}
	if m.ReceiverType != nil {
		n += 1 + sovTableStructConfig(uint64(*m.ReceiverType))
	}
	if m.PushTime != nil {
		n += 1 + sovTableStructConfig(uint64(*m.PushTime))
	}
	if m.PushStatus != nil {
		n += 1 + sovTableStructConfig(uint64(*m.PushStatus))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStructConfig(uint64(l))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovTableStructConfig(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructConfig(uint64(*m.CreateTime))
	}
	if m.Site != nil {
		l = len(*m.Site)
		n += 1 + l + sovTableStructConfig(uint64(l))
	}
	if m.IsPush != nil {
		n += 1 + sovTableStructConfig(uint64(*m.IsPush))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SystemMailRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemMailID != nil {
		n += 1 + sovTableStructConfig(uint64(*m.SystemMailID))
	}
	if m.Management != nil {
		l = len(*m.Management)
		n += 1 + l + sovTableStructConfig(uint64(l))
	}
	if m.Recipient != nil {
		n += 1 + sovTableStructConfig(uint64(*m.Recipient))
	}
	if m.MailTitle != nil {
		l = len(*m.MailTitle)
		n += 1 + l + sovTableStructConfig(uint64(l))
	}
	if m.PushStatus != nil {
		n += 1 + sovTableStructConfig(uint64(*m.PushStatus))
	}
	if m.PushTime != nil {
		n += 1 + sovTableStructConfig(uint64(*m.PushTime))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStructConfig(uint64(l))
	}
	if m.PushPeople != nil {
		l = len(*m.PushPeople)
		n += 1 + l + sovTableStructConfig(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovTableStructConfig(uint64(*m.Status))
	}
	if m.StartTime != nil {
		n += 1 + sovTableStructConfig(uint64(*m.StartTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStructConfig(uint64(*m.UpdateTime))
	}
	if m.UpdateAccount != nil {
		l = len(*m.UpdateAccount)
		n += 1 + l + sovTableStructConfig(uint64(l))
	}
	if m.Site != nil {
		l = len(*m.Site)
		n += 1 + l + sovTableStructConfig(uint64(l))
	}
	if m.IsPush != nil {
		n += 1 + sovTableStructConfig(uint64(*m.IsPush))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTableStructConfig(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTableStructConfig(x uint64) (n int) {
	return sovTableStructConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GameList) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Icon = &s
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.H5OpenPos = append(m.H5OpenPos, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructConfig
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructConfig
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.H5OpenPos) == 0 {
					m.H5OpenPos = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructConfig
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.H5OpenPos = append(m.H5OpenPos, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field H5OpenPos", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OpenVip = append(m.OpenVip, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructConfig
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructConfig
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OpenVip) == 0 {
					m.OpenVip = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructConfig
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OpenVip = append(m.OpenVip, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenVip", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field H5Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.H5Status = &b
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field H5MaintainStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.H5MaintainStatus = &b
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RobotStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.RobotStatus = &b
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field H5Sort", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.H5Sort = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GameId = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field H5Recommend", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.H5Recommend = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.AppStatus = &b
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppMaintainStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.AppMaintainStatus = &b
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppSort", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppSort = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppRecommend", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppRecommend = &v
		case 21:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AppOpenPos = append(m.AppOpenPos, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructConfig
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructConfig
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AppOpenPos) == 0 {
					m.AppOpenPos = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructConfig
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AppOpenPos = append(m.AppOpenPos, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AppOpenPos", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("Id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameConfig) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("Id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareDay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareDay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareDay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareDayId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShareDayId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.KeyName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValue", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyValue = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remarks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Remarks = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Description = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetSafe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetSafe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetSafe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetSafeId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SetSafeId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDeposit", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinDeposit = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinWithdrawal", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinWithdrawal = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTransfer", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinTransfer = &v
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TurnMoney", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.TurnMoney = &v2
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakeMoney", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.TakeMoney = &v2
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlidingLength", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SlidingLength = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfitTax) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfitTax: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfitTax: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfitTaxId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProfitTaxId = &v
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemTaxRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.SystemTaxRate = &v2
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remarks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Remarks = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemFastMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemFastMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemFastMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MsgId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReceiverType = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PushTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushStatus", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PushStatus = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Site = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPush", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPush = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("MsgId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemMailRule) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemMailRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemMailRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMailID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SystemMailID = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Management", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Management = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Recipient = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MailTitle = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushStatus", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PushStatus = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PushTime = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushPeople", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PushPeople = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UpdateAccount = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Site = &s
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPush", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPush = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("SystemMailID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTableStructConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTableStructConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTableStructConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTableStructConfig
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTableStructConfig
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTableStructConfig
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTableStructConfig(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTableStructConfig
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTableStructConfig = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTableStructConfig   = fmt.Errorf("proto: integer overflow")
)
