// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: table_struct_coin_shop.proto

package share_message

import (
	fmt "fmt"
	proto "github.com/akqp2019/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 硬币商城.
//硬币购买 coin_recharge
type CoinRecharge struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Coin                 *int64   `protobuf:"varint,2,opt,name=Coin" json:"Coin,omitempty" bson:"Coin,omitempty"`
	Price                *int64   `protobuf:"varint,3,opt,name=Price" json:"Price,omitempty" bson:"Price,omitempty"`
	MonthFirst           *int64   `protobuf:"varint,4,opt,name=MonthFirst" json:"MonthFirst,omitempty" bson:"MonthFirst,omitempty"`
	Rebate               *int32   `protobuf:"varint,5,opt,name=Rebate" json:"Rebate,omitempty" bson:"Rebate,omitempty"`
	Platform             *int32   `protobuf:"varint,6,opt,name=Platform" json:"Platform,omitempty" bson:"Platform,omitempty"`
	StartTime            *int64   `protobuf:"varint,7,opt,name=StartTime" json:"StartTime,omitempty" bson:"StartTime,omitempty"`
	EndTime              *int64   `protobuf:"varint,8,opt,name=EndTime" json:"EndTime,omitempty" bson:"EndTime,omitempty"`
	Status               *int32   `protobuf:"varint,9,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	Sort                 *int32   `protobuf:"varint,10,opt,name=Sort" json:"Sort,omitempty" bson:"Sort,omitempty"`
	DisPrice             *int64   `protobuf:"varint,11,opt,name=DisPrice" json:"DisPrice,omitempty" bson:"DisPrice,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *CoinRecharge) Reset()         { *m = CoinRecharge{} }
func (m *CoinRecharge) String() string { return proto.CompactTextString(m) }
func (*CoinRecharge) ProtoMessage()    {}
func (*CoinRecharge) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07540b5dae7975e, []int{0}
}
func (m *CoinRecharge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinRecharge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinRecharge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinRecharge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinRecharge.Merge(m, src)
}
func (m *CoinRecharge) XXX_Size() int {
	return m.Size()
}
func (m *CoinRecharge) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinRecharge.DiscardUnknown(m)
}

var xxx_messageInfo_CoinRecharge proto.InternalMessageInfo

func (m *CoinRecharge) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CoinRecharge) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *CoinRecharge) GetPrice() int64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *CoinRecharge) GetMonthFirst() int64 {
	if m != nil && m.MonthFirst != nil {
		return *m.MonthFirst
	}
	return 0
}

func (m *CoinRecharge) GetRebate() int32 {
	if m != nil && m.Rebate != nil {
		return *m.Rebate
	}
	return 0
}

func (m *CoinRecharge) GetPlatform() int32 {
	if m != nil && m.Platform != nil {
		return *m.Platform
	}
	return 0
}

func (m *CoinRecharge) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *CoinRecharge) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *CoinRecharge) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *CoinRecharge) GetSort() int32 {
	if m != nil && m.Sort != nil {
		return *m.Sort
	}
	return 0
}

func (m *CoinRecharge) GetDisPrice() int64 {
	if m != nil && m.DisPrice != nil {
		return *m.DisPrice
	}
	return 0
}

// 商品 coin_product
type CoinProduct struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	PropsId              *int64   `protobuf:"varint,3,opt,name=PropsId" json:"PropsId,omitempty" bson:"PropsId,omitempty"`
	PropsIcon            *string  `protobuf:"bytes,4,opt,name=PropsIcon" json:"PropsIcon,omitempty" bson:"PropsIcon,omitempty"`
	EffectiveTime        *int64   `protobuf:"varint,5,opt,name=EffectiveTime" json:"EffectiveTime,omitempty" bson:"EffectiveTime,omitempty"`
	Coin                 *int64   `protobuf:"varint,6,opt,name=Coin" json:"Coin,omitempty" bson:"Coin,omitempty"`
	CoinRebate           *int64   `protobuf:"varint,7,opt,name=CoinRebate" json:"CoinRebate,omitempty" bson:"CoinRebate,omitempty"`
	Price                *int64   `protobuf:"varint,8,opt,name=Price" json:"Price,omitempty" bson:"Price,omitempty"`
	ProductNum           *int64   `protobuf:"varint,9,opt,name=ProductNum" json:"ProductNum,omitempty" bson:"ProductNum,omitempty"`
	Status               *int32   `protobuf:"varint,10,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	CreateTime           *int64   `protobuf:"varint,11,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,12,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	Sort                 *int32   `protobuf:"varint,13,opt,name=Sort" json:"Sort,omitempty" bson:"Sort,omitempty"`
	PropsType            *int32   `protobuf:"varint,14,opt,name=PropsType" json:"PropsType,omitempty" bson:"PropsType,omitempty"`
	StartTime            *int64   `protobuf:"varint,15,opt,name=StartTime" json:"StartTime,omitempty" bson:"StartTime,omitempty"`
	EndTime              *int64   `protobuf:"varint,16,opt,name=EndTime" json:"EndTime,omitempty" bson:"EndTime,omitempty"`
	DisCoin              *int64   `protobuf:"varint,17,opt,name=DisCoin" json:"DisCoin,omitempty" bson:"DisCoin,omitempty"`
	SaleStartTime        *int64   `protobuf:"varint,18,opt,name=SaleStartTime" json:"SaleStartTime,omitempty" bson:"SaleStartTime,omitempty"`
	SaleEndTime          *int64   `protobuf:"varint,19,opt,name=SaleEndTime" json:"SaleEndTime,omitempty" bson:"SaleEndTime,omitempty"`
	IosCoin              *int64   `protobuf:"varint,20,opt,name=IosCoin" json:"IosCoin,omitempty" bson:"IosCoin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *CoinProduct) Reset()         { *m = CoinProduct{} }
func (m *CoinProduct) String() string { return proto.CompactTextString(m) }
func (*CoinProduct) ProtoMessage()    {}
func (*CoinProduct) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07540b5dae7975e, []int{1}
}
func (m *CoinProduct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinProduct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinProduct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinProduct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinProduct.Merge(m, src)
}
func (m *CoinProduct) XXX_Size() int {
	return m.Size()
}
func (m *CoinProduct) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinProduct.DiscardUnknown(m)
}

var xxx_messageInfo_CoinProduct proto.InternalMessageInfo

func (m *CoinProduct) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CoinProduct) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CoinProduct) GetPropsId() int64 {
	if m != nil && m.PropsId != nil {
		return *m.PropsId
	}
	return 0
}

func (m *CoinProduct) GetPropsIcon() string {
	if m != nil && m.PropsIcon != nil {
		return *m.PropsIcon
	}
	return ""
}

func (m *CoinProduct) GetEffectiveTime() int64 {
	if m != nil && m.EffectiveTime != nil {
		return *m.EffectiveTime
	}
	return 0
}

func (m *CoinProduct) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *CoinProduct) GetCoinRebate() int64 {
	if m != nil && m.CoinRebate != nil {
		return *m.CoinRebate
	}
	return 0
}

func (m *CoinProduct) GetPrice() int64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *CoinProduct) GetProductNum() int64 {
	if m != nil && m.ProductNum != nil {
		return *m.ProductNum
	}
	return 0
}

func (m *CoinProduct) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *CoinProduct) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *CoinProduct) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *CoinProduct) GetSort() int32 {
	if m != nil && m.Sort != nil {
		return *m.Sort
	}
	return 0
}

func (m *CoinProduct) GetPropsType() int32 {
	if m != nil && m.PropsType != nil {
		return *m.PropsType
	}
	return 0
}

func (m *CoinProduct) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *CoinProduct) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *CoinProduct) GetDisCoin() int64 {
	if m != nil && m.DisCoin != nil {
		return *m.DisCoin
	}
	return 0
}

func (m *CoinProduct) GetSaleStartTime() int64 {
	if m != nil && m.SaleStartTime != nil {
		return *m.SaleStartTime
	}
	return 0
}

func (m *CoinProduct) GetSaleEndTime() int64 {
	if m != nil && m.SaleEndTime != nil {
		return *m.SaleEndTime
	}
	return 0
}

func (m *CoinProduct) GetIosCoin() int64 {
	if m != nil && m.IosCoin != nil {
		return *m.IosCoin
	}
	return 0
}

// 道具 props_item
type PropsItem struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	PropsIcon            *string  `protobuf:"bytes,3,opt,name=PropsIcon" json:"PropsIcon,omitempty" bson:"PropsIcon,omitempty"`
	PropsType            *int32   `protobuf:"varint,4,opt,name=PropsType" json:"PropsType,omitempty" bson:"PropsType,omitempty"`
	Desc                 *string  `protobuf:"bytes,5,opt,name=Desc" json:"Desc,omitempty" bson:"Desc,omitempty"`
	UseType              *int32   `protobuf:"varint,6,opt,name=UseType" json:"UseType,omitempty" bson:"UseType,omitempty"`
	UseValue             *string  `protobuf:"bytes,7,opt,name=UseValue" json:"UseValue,omitempty" bson:"UseValue,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,8,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	Version              *string  `protobuf:"bytes,9,opt,name=Version" json:"Version,omitempty" bson:"Version,omitempty"`
	Config               *string  `protobuf:"bytes,10,opt,name=Config" json:"Config,omitempty" bson:"Config,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PropsItem) Reset()         { *m = PropsItem{} }
func (m *PropsItem) String() string { return proto.CompactTextString(m) }
func (*PropsItem) ProtoMessage()    {}
func (*PropsItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07540b5dae7975e, []int{2}
}
func (m *PropsItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PropsItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PropsItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PropsItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PropsItem.Merge(m, src)
}
func (m *PropsItem) XXX_Size() int {
	return m.Size()
}
func (m *PropsItem) XXX_DiscardUnknown() {
	xxx_messageInfo_PropsItem.DiscardUnknown(m)
}

var xxx_messageInfo_PropsItem proto.InternalMessageInfo

func (m *PropsItem) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PropsItem) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *PropsItem) GetPropsIcon() string {
	if m != nil && m.PropsIcon != nil {
		return *m.PropsIcon
	}
	return ""
}

func (m *PropsItem) GetPropsType() int32 {
	if m != nil && m.PropsType != nil {
		return *m.PropsType
	}
	return 0
}

func (m *PropsItem) GetDesc() string {
	if m != nil && m.Desc != nil {
		return *m.Desc
	}
	return ""
}

func (m *PropsItem) GetUseType() int32 {
	if m != nil && m.UseType != nil {
		return *m.UseType
	}
	return 0
}

func (m *PropsItem) GetUseValue() string {
	if m != nil && m.UseValue != nil {
		return *m.UseValue
	}
	return ""
}

func (m *PropsItem) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *PropsItem) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *PropsItem) GetConfig() string {
	if m != nil && m.Config != nil {
		return *m.Config
	}
	return ""
}

// 玩家背包表 player_bag_item
type PlayerBagItem struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	PropsId              *int64   `protobuf:"varint,3,opt,name=PropsId" json:"PropsId,omitempty" bson:"PropsId,omitempty"`
	Status               *int32   `protobuf:"varint,4,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	GetType              *int32   `protobuf:"varint,5,opt,name=GetType" json:"GetType,omitempty" bson:"GetType,omitempty"`
	OverTime             *int64   `protobuf:"varint,6,opt,name=OverTime" json:"OverTime,omitempty" bson:"OverTime,omitempty"`
	IsSave               *bool    `protobuf:"varint,7,opt,name=IsSave" json:"IsSave,omitempty" bson:"IsSave,omitempty"`
	PropsName            *string  `protobuf:"bytes,8,opt,name=PropsName" json:"PropsName,omitempty" bson:"PropsName,omitempty"`
	PropsType            *int32   `protobuf:"varint,9,opt,name=PropsType" json:"PropsType,omitempty" bson:"PropsType,omitempty"`
	CreateTime           *int64   `protobuf:"varint,10,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	IsNew                *bool    `protobuf:"varint,11,opt,name=IsNew" json:"IsNew,omitempty" bson:"IsNew,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerBagItem) Reset()         { *m = PlayerBagItem{} }
func (m *PlayerBagItem) String() string { return proto.CompactTextString(m) }
func (*PlayerBagItem) ProtoMessage()    {}
func (*PlayerBagItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07540b5dae7975e, []int{3}
}
func (m *PlayerBagItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerBagItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerBagItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerBagItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerBagItem.Merge(m, src)
}
func (m *PlayerBagItem) XXX_Size() int {
	return m.Size()
}
func (m *PlayerBagItem) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerBagItem.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerBagItem proto.InternalMessageInfo

func (m *PlayerBagItem) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerBagItem) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerBagItem) GetPropsId() int64 {
	if m != nil && m.PropsId != nil {
		return *m.PropsId
	}
	return 0
}

func (m *PlayerBagItem) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *PlayerBagItem) GetGetType() int32 {
	if m != nil && m.GetType != nil {
		return *m.GetType
	}
	return 0
}

func (m *PlayerBagItem) GetOverTime() int64 {
	if m != nil && m.OverTime != nil {
		return *m.OverTime
	}
	return 0
}

func (m *PlayerBagItem) GetIsSave() bool {
	if m != nil && m.IsSave != nil {
		return *m.IsSave
	}
	return false
}

func (m *PlayerBagItem) GetPropsName() string {
	if m != nil && m.PropsName != nil {
		return *m.PropsName
	}
	return ""
}

func (m *PlayerBagItem) GetPropsType() int32 {
	if m != nil && m.PropsType != nil {
		return *m.PropsType
	}
	return 0
}

func (m *PlayerBagItem) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PlayerBagItem) GetIsNew() bool {
	if m != nil && m.IsNew != nil {
		return *m.IsNew
	}
	return false
}

// 用户道具获得日志 log_player_get_props  //回收传bagId 要回收的时长
type PlayerGetPropsLog struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	GivePlayerId         *int64   `protobuf:"varint,3,opt,name=GivePlayerId" json:"GivePlayerId,omitempty" bson:"GivePlayerId,omitempty"`
	PropsId              *int64   `protobuf:"varint,4,opt,name=PropsId" json:"PropsId,omitempty" bson:"PropsId,omitempty"`
	PropsNum             *int64   `protobuf:"varint,5,opt,name=PropsNum" json:"PropsNum,omitempty" bson:"PropsNum,omitempty"`
	PropsName            *string  `protobuf:"bytes,6,opt,name=PropsName" json:"-" bson:"-"`
	PropsType            *int32   `protobuf:"varint,7,opt,name=PropsType" json:"-" bson:"-"`
	GetType              *int32   `protobuf:"varint,8,opt,name=GetType" json:"GetType,omitempty" bson:"GetType,omitempty"`
	CreateTime           *int64   `protobuf:"varint,9,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	EffectiveTime        *int64   `protobuf:"varint,10,opt,name=EffectiveTime" json:"EffectiveTime,omitempty" bson:"EffectiveTime,omitempty"`
	RecycleTime          *int64   `protobuf:"varint,11,opt,name=RecycleTime" json:"RecycleTime,omitempty" bson:"RecycleTime,omitempty"`
	Operator             *string  `protobuf:"bytes,12,opt,name=Operator" json:"Operator,omitempty" bson:"Operator,omitempty"`
	Note                 *string  `protobuf:"bytes,13,opt,name=Note" json:"Note,omitempty" bson:"Note,omitempty"`
	Account              *string  `protobuf:"bytes,14,opt,name=Account" json:"-" bson:"-"`
	GiveAccount          *string  `protobuf:"bytes,15,opt,name=GiveAccount" json:"-" bson:"-"`
	BagId                *int64   `protobuf:"varint,16,opt,name=BagId" json:"BagId,omitempty" bson:"BagId,omitempty"`
	BuyWay               *int32   `protobuf:"varint,17,opt,name=BuyWay" json:"BuyWay,omitempty" bson:"BuyWay,omitempty"`
	OrderId              *string  `protobuf:"bytes,18,opt,name=OrderId" json:"OrderId,omitempty" bson:"OrderId,omitempty"`
	ProductId            *int64   `protobuf:"varint,19,opt,name=ProductId" json:"ProductId,omitempty" bson:"ProductId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerGetPropsLog) Reset()         { *m = PlayerGetPropsLog{} }
func (m *PlayerGetPropsLog) String() string { return proto.CompactTextString(m) }
func (*PlayerGetPropsLog) ProtoMessage()    {}
func (*PlayerGetPropsLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07540b5dae7975e, []int{4}
}
func (m *PlayerGetPropsLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerGetPropsLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerGetPropsLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerGetPropsLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerGetPropsLog.Merge(m, src)
}
func (m *PlayerGetPropsLog) XXX_Size() int {
	return m.Size()
}
func (m *PlayerGetPropsLog) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerGetPropsLog.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerGetPropsLog proto.InternalMessageInfo

func (m *PlayerGetPropsLog) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerGetPropsLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerGetPropsLog) GetGivePlayerId() int64 {
	if m != nil && m.GivePlayerId != nil {
		return *m.GivePlayerId
	}
	return 0
}

func (m *PlayerGetPropsLog) GetPropsId() int64 {
	if m != nil && m.PropsId != nil {
		return *m.PropsId
	}
	return 0
}

func (m *PlayerGetPropsLog) GetPropsNum() int64 {
	if m != nil && m.PropsNum != nil {
		return *m.PropsNum
	}
	return 0
}

func (m *PlayerGetPropsLog) GetPropsName() string {
	if m != nil && m.PropsName != nil {
		return *m.PropsName
	}
	return ""
}

func (m *PlayerGetPropsLog) GetPropsType() int32 {
	if m != nil && m.PropsType != nil {
		return *m.PropsType
	}
	return 0
}

func (m *PlayerGetPropsLog) GetGetType() int32 {
	if m != nil && m.GetType != nil {
		return *m.GetType
	}
	return 0
}

func (m *PlayerGetPropsLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PlayerGetPropsLog) GetEffectiveTime() int64 {
	if m != nil && m.EffectiveTime != nil {
		return *m.EffectiveTime
	}
	return 0
}

func (m *PlayerGetPropsLog) GetRecycleTime() int64 {
	if m != nil && m.RecycleTime != nil {
		return *m.RecycleTime
	}
	return 0
}

func (m *PlayerGetPropsLog) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *PlayerGetPropsLog) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

func (m *PlayerGetPropsLog) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *PlayerGetPropsLog) GetGiveAccount() string {
	if m != nil && m.GiveAccount != nil {
		return *m.GiveAccount
	}
	return ""
}

func (m *PlayerGetPropsLog) GetBagId() int64 {
	if m != nil && m.BagId != nil {
		return *m.BagId
	}
	return 0
}

func (m *PlayerGetPropsLog) GetBuyWay() int32 {
	if m != nil && m.BuyWay != nil {
		return *m.BuyWay
	}
	return 0
}

func (m *PlayerGetPropsLog) GetOrderId() string {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return ""
}

func (m *PlayerGetPropsLog) GetProductId() int64 {
	if m != nil && m.ProductId != nil {
		return *m.ProductId
	}
	return 0
}

func init() {
	proto.RegisterType((*CoinRecharge)(nil), "share_message.CoinRecharge")
	proto.RegisterType((*CoinProduct)(nil), "share_message.CoinProduct")
	proto.RegisterType((*PropsItem)(nil), "share_message.PropsItem")
	proto.RegisterType((*PlayerBagItem)(nil), "share_message.PlayerBagItem")
	proto.RegisterType((*PlayerGetPropsLog)(nil), "share_message.PlayerGetPropsLog")
}

func init() { proto.RegisterFile("table_struct_coin_shop.proto", fileDescriptor_b07540b5dae7975e) }

var fileDescriptor_b07540b5dae7975e = []byte{
	// 696 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0x96, 0xc9, 0x9f, 0x7d, 0x12, 0x13, 0x62, 0xe0, 0xca, 0x42, 0xf7, 0x02, 0xca, 0x8a, 0xc5,
	0xbd, 0xf7, 0x1d, 0x1a, 0xa0, 0x28, 0x52, 0x0b, 0x11, 0x01, 0xba, 0x8c, 0x06, 0xfb, 0xc4, 0xb1,
	0x14, 0x7b, 0xa2, 0x99, 0x71, 0x2a, 0x3f, 0x40, 0x1f, 0xa2, 0xef, 0xd3, 0x45, 0x97, 0x5d, 0x74,
	0x5b, 0x54, 0xb1, 0xe4, 0x29, 0xaa, 0x39, 0x93, 0x09, 0x09, 0xb0, 0x80, 0xa5, 0xcf, 0x99, 0x33,
	0xf3, 0x7d, 0xdf, 0xf9, 0x3e, 0xc3, 0xdf, 0x8a, 0xdd, 0x4e, 0x71, 0x24, 0x95, 0x28, 0x22, 0x35,
	0x8a, 0x78, 0x9a, 0x8f, 0xe4, 0x84, 0xcf, 0xfe, 0x9f, 0x09, 0xae, 0x78, 0xe0, 0xcb, 0x09, 0x13,
	0x38, 0xca, 0x50, 0x4a, 0x96, 0xe0, 0x5e, 0x2b, 0x49, 0xb8, 0x62, 0x89, 0x69, 0x76, 0x7f, 0x3a,
	0xd0, 0x3a, 0xe6, 0x69, 0x7e, 0x89, 0xd1, 0x84, 0x89, 0x04, 0x83, 0x7f, 0x60, 0xa3, 0x1f, 0x87,
	0xce, 0xa1, 0x73, 0x54, 0xe9, 0x75, 0x1e, 0xee, 0x0e, 0xfc, 0x51, 0x1a, 0xff, 0xcb, 0xb3, 0x54,
	0x61, 0x36, 0x53, 0x65, 0xd0, 0x82, 0xaa, 0x3e, 0x1e, 0x6e, 0xe8, 0x03, 0x81, 0x0f, 0xb5, 0x81,
	0x48, 0x23, 0x0c, 0x2b, 0xf4, 0x19, 0x00, 0x7c, 0xe4, 0xb9, 0x9a, 0xbc, 0x4f, 0x85, 0x54, 0x61,
	0x95, 0x6a, 0x9b, 0x50, 0xbf, 0xc4, 0x5b, 0xa6, 0x30, 0xac, 0x1d, 0x3a, 0x47, 0xb5, 0x60, 0x0b,
	0xdc, 0xc1, 0x94, 0xa9, 0x31, 0x17, 0x59, 0x58, 0xa7, 0x4a, 0x07, 0xbc, 0xa1, 0x62, 0x42, 0x5d,
	0xa5, 0x19, 0x86, 0x0d, 0x1a, 0x6a, 0x43, 0xe3, 0x34, 0x8f, 0xa9, 0xe0, 0xda, 0x5b, 0x86, 0x8a,
	0xa9, 0x42, 0x86, 0x1e, 0xcd, 0xb4, 0xa0, 0x3a, 0xe4, 0x42, 0x85, 0x60, 0xef, 0x3c, 0x49, 0xa5,
	0x41, 0xd2, 0xd4, 0xe7, 0xbb, 0x5f, 0x2a, 0xd0, 0xd4, 0x38, 0x07, 0x82, 0xc7, 0x45, 0xa4, 0x5e,
	0xc1, 0xea, 0x9c, 0x65, 0x48, 0xac, 0x3c, 0xfd, 0xfa, 0x40, 0xf0, 0x99, 0xec, 0xc7, 0x0b, 0x5e,
	0x1d, 0xf0, 0x4c, 0x21, 0xe2, 0x39, 0xd1, 0xf2, 0x82, 0x5d, 0xf0, 0x4f, 0xc7, 0x63, 0x8c, 0x54,
	0x3a, 0x47, 0xc2, 0x59, 0xa3, 0x93, 0x56, 0x9e, 0xba, 0xd5, 0xc3, 0x68, 0x4b, 0xfc, 0x1b, 0xeb,
	0x92, 0xb9, 0xf6, 0xc8, 0x02, 0xe3, 0x79, 0x91, 0x11, 0xb9, 0x55, 0xb2, 0x86, 0x9e, 0xbe, 0x46,
	0x20, 0x53, 0xe6, 0xa1, 0xa6, 0x9d, 0xbb, 0x9e, 0xc5, 0xb6, 0xd6, 0xb2, 0x8f, 0x93, 0x28, 0xbe,
	0x95, 0x95, 0x40, 0x5f, 0x95, 0x33, 0x0c, 0x37, 0x9f, 0x2b, 0xdd, 0x7e, 0xaa, 0xf4, 0x96, 0x2d,
	0x9c, 0xa4, 0x92, 0x48, 0x74, 0xa8, 0xb0, 0x0b, 0xfe, 0x90, 0x4d, 0xf1, 0x71, 0x30, 0xa0, 0xf2,
	0x36, 0x34, 0x75, 0xd9, 0x0e, 0x6f, 0xdb, 0xe1, 0x3e, 0x37, 0xc3, 0x3b, 0xb4, 0x87, 0x6f, 0x8e,
	0x95, 0x4e, 0x61, 0xf6, 0xb6, 0x2d, 0xac, 0x89, 0x5e, 0x59, 0x2b, 0x11, 0xa5, 0xaa, 0x35, 0xc2,
	0x09, 0xca, 0x88, 0xe4, 0xa7, 0xcd, 0x5d, 0x4b, 0xa4, 0x76, 0xdd, 0x3a, 0xe3, 0x5a, 0xe2, 0x0d,
	0x9b, 0x16, 0x46, 0x7f, 0xef, 0x89, 0x70, 0xae, 0x85, 0x7d, 0x83, 0x42, 0xa6, 0x3c, 0xa7, 0x0d,
	0x78, 0x7a, 0x03, 0xc7, 0x3c, 0x1f, 0xa7, 0x09, 0x6d, 0xc0, 0xeb, 0xfe, 0x72, 0xc0, 0x1f, 0x4c,
	0x59, 0x89, 0xa2, 0xc7, 0x92, 0xd7, 0x50, 0x31, 0x2e, 0x2f, 0x51, 0xf4, 0xe3, 0x45, 0x54, 0x9e,
	0x99, 0xea, 0x71, 0xcb, 0x86, 0x49, 0x1b, 0x1a, 0x67, 0xa8, 0x08, 0xfb, 0x32, 0x29, 0x17, 0x73,
	0x14, 0x84, 0xb3, 0x6e, 0x47, 0xfa, 0x72, 0xc8, 0xe6, 0x86, 0x8b, 0xbb, 0xd4, 0x83, 0x54, 0x73,
	0x9f, 0x4b, 0xe4, 0xbd, 0x60, 0x1f, 0xb0, 0x2e, 0xec, 0xcb, 0x73, 0xfc, 0x4c, 0x6e, 0x72, 0xbb,
	0x5f, 0x2b, 0xd0, 0x31, 0x78, 0xcf, 0x50, 0xd1, 0xfc, 0x07, 0x9e, 0xbc, 0x9d, 0xe3, 0x0e, 0xb4,
	0xce, 0xd2, 0x39, 0x2e, 0xab, 0x95, 0xa7, 0xcc, 0xcd, 0x2f, 0x41, 0x0f, 0x12, 0xec, 0x22, 0x5b,
	0xc4, 0x26, 0x5c, 0x25, 0xa2, 0xb9, 0x7a, 0xbd, 0xda, 0xc3, 0xdd, 0x81, 0xf3, 0xdf, 0xb2, 0x43,
	0x7c, 0x34, 0xeb, 0x9a, 0xed, 0xac, 0xe8, 0xe5, 0xbe, 0xc0, 0xd3, 0xb3, 0xe6, 0x5d, 0x8f, 0x29,
	0x58, 0xf3, 0x5e, 0x62, 0x54, 0x46, 0xd3, 0xd5, 0x48, 0x69, 0xbd, 0x67, 0x28, 0x98, 0xe2, 0x82,
	0x02, 0xe5, 0x91, 0x21, 0xb9, 0x42, 0x0a, 0x94, 0x17, 0xfc, 0x05, 0x8d, 0x77, 0x51, 0xc4, 0x8b,
	0x5c, 0x51, 0x9c, 0x96, 0x10, 0xf7, 0xa0, 0xa9, 0x59, 0xdb, 0x5e, 0x7b, 0xb5, 0xe7, 0x43, 0x4d,
	0x3b, 0x26, 0x5e, 0x84, 0x6b, 0x13, 0xea, 0xbd, 0xa2, 0xfc, 0xc4, 0x4a, 0xca, 0x16, 0xed, 0xfc,
	0x42, 0xc4, 0xa4, 0x55, 0xb0, 0xb2, 0x3e, 0xfd, 0x3b, 0xe8, 0xc7, 0x26, 0x53, 0xbd, 0xd6, 0xf7,
	0xfb, 0x7d, 0xe7, 0xc7, 0xfd, 0xbe, 0xf3, 0xfb, 0x7e, 0xdf, 0xf9, 0x13, 0x00, 0x00, 0xff, 0xff,
	0xf0, 0x76, 0x24, 0xf6, 0xeb, 0x05, 0x00, 0x00,
}

func (m *CoinRecharge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinRecharge) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.Id))
	}
	if m.Coin != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.Coin))
	}
	if m.Price != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.Price))
	}
	if m.MonthFirst != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.MonthFirst))
	}
	if m.Rebate != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.Rebate))
	}
	if m.Platform != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.Platform))
	}
	if m.StartTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.EndTime))
	}
	if m.Status != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.Status))
	}
	if m.Sort != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.Sort))
	}
	if m.DisPrice != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.DisPrice))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CoinProduct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinProduct) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.PropsId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.PropsId))
	}
	if m.PropsIcon != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(len(*m.PropsIcon)))
		i += copy(dAtA[i:], *m.PropsIcon)
	}
	if m.EffectiveTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.EffectiveTime))
	}
	if m.Coin != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.Coin))
	}
	if m.CoinRebate != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.CoinRebate))
	}
	if m.Price != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.Price))
	}
	if m.ProductNum != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.ProductNum))
	}
	if m.Status != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.Status))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.Sort != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.Sort))
	}
	if m.PropsType != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.PropsType))
	}
	if m.StartTime != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.EndTime))
	}
	if m.DisCoin != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.DisCoin))
	}
	if m.SaleStartTime != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.SaleStartTime))
	}
	if m.SaleEndTime != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.SaleEndTime))
	}
	if m.IosCoin != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.IosCoin))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PropsItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PropsItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.PropsIcon != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(len(*m.PropsIcon)))
		i += copy(dAtA[i:], *m.PropsIcon)
	}
	if m.PropsType != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.PropsType))
	}
	if m.Desc != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(len(*m.Desc)))
		i += copy(dAtA[i:], *m.Desc)
	}
	if m.UseType != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.UseType))
	}
	if m.UseValue != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(len(*m.UseValue)))
		i += copy(dAtA[i:], *m.UseValue)
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.Version != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(len(*m.Version)))
		i += copy(dAtA[i:], *m.Version)
	}
	if m.Config != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(len(*m.Config)))
		i += copy(dAtA[i:], *m.Config)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerBagItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerBagItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.Id))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.PlayerId))
	}
	if m.PropsId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.PropsId))
	}
	if m.Status != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.Status))
	}
	if m.GetType != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.GetType))
	}
	if m.OverTime != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.OverTime))
	}
	if m.IsSave != nil {
		dAtA[i] = 0x38
		i++
		if *m.IsSave {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PropsName != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(len(*m.PropsName)))
		i += copy(dAtA[i:], *m.PropsName)
	}
	if m.PropsType != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.PropsType))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.CreateTime))
	}
	if m.IsNew != nil {
		dAtA[i] = 0x58
		i++
		if *m.IsNew {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerGetPropsLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerGetPropsLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.Id))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.PlayerId))
	}
	if m.GivePlayerId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.GivePlayerId))
	}
	if m.PropsId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.PropsId))
	}
	if m.PropsNum != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.PropsNum))
	}
	if m.PropsName != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(len(*m.PropsName)))
		i += copy(dAtA[i:], *m.PropsName)
	}
	if m.PropsType != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.PropsType))
	}
	if m.GetType != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.GetType))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.CreateTime))
	}
	if m.EffectiveTime != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.EffectiveTime))
	}
	if m.RecycleTime != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.RecycleTime))
	}
	if m.Operator != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(len(*m.Operator)))
		i += copy(dAtA[i:], *m.Operator)
	}
	if m.Note != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(len(*m.Note)))
		i += copy(dAtA[i:], *m.Note)
	}
	if m.Account != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.GiveAccount != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(len(*m.GiveAccount)))
		i += copy(dAtA[i:], *m.GiveAccount)
	}
	if m.BagId != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.BagId))
	}
	if m.BuyWay != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.BuyWay))
	}
	if m.OrderId != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(len(*m.OrderId)))
		i += copy(dAtA[i:], *m.OrderId)
	}
	if m.ProductId != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructCoinShop(dAtA, i, uint64(*m.ProductId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTableStructCoinShop(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CoinRecharge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.Id))
	}
	if m.Coin != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.Coin))
	}
	if m.Price != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.Price))
	}
	if m.MonthFirst != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.MonthFirst))
	}
	if m.Rebate != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.Rebate))
	}
	if m.Platform != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.Platform))
	}
	if m.StartTime != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.EndTime))
	}
	if m.Status != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.Status))
	}
	if m.Sort != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.Sort))
	}
	if m.DisPrice != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.DisPrice))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CoinProduct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructCoinShop(uint64(l))
	}
	if m.PropsId != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.PropsId))
	}
	if m.PropsIcon != nil {
		l = len(*m.PropsIcon)
		n += 1 + l + sovTableStructCoinShop(uint64(l))
	}
	if m.EffectiveTime != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.EffectiveTime))
	}
	if m.Coin != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.Coin))
	}
	if m.CoinRebate != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.CoinRebate))
	}
	if m.Price != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.Price))
	}
	if m.ProductNum != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.ProductNum))
	}
	if m.Status != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.Status))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.UpdateTime))
	}
	if m.Sort != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.Sort))
	}
	if m.PropsType != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.PropsType))
	}
	if m.StartTime != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 2 + sovTableStructCoinShop(uint64(*m.EndTime))
	}
	if m.DisCoin != nil {
		n += 2 + sovTableStructCoinShop(uint64(*m.DisCoin))
	}
	if m.SaleStartTime != nil {
		n += 2 + sovTableStructCoinShop(uint64(*m.SaleStartTime))
	}
	if m.SaleEndTime != nil {
		n += 2 + sovTableStructCoinShop(uint64(*m.SaleEndTime))
	}
	if m.IosCoin != nil {
		n += 2 + sovTableStructCoinShop(uint64(*m.IosCoin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PropsItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructCoinShop(uint64(l))
	}
	if m.PropsIcon != nil {
		l = len(*m.PropsIcon)
		n += 1 + l + sovTableStructCoinShop(uint64(l))
	}
	if m.PropsType != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.PropsType))
	}
	if m.Desc != nil {
		l = len(*m.Desc)
		n += 1 + l + sovTableStructCoinShop(uint64(l))
	}
	if m.UseType != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.UseType))
	}
	if m.UseValue != nil {
		l = len(*m.UseValue)
		n += 1 + l + sovTableStructCoinShop(uint64(l))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.UpdateTime))
	}
	if m.Version != nil {
		l = len(*m.Version)
		n += 1 + l + sovTableStructCoinShop(uint64(l))
	}
	if m.Config != nil {
		l = len(*m.Config)
		n += 1 + l + sovTableStructCoinShop(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerBagItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.Id))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.PlayerId))
	}
	if m.PropsId != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.PropsId))
	}
	if m.Status != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.Status))
	}
	if m.GetType != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.GetType))
	}
	if m.OverTime != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.OverTime))
	}
	if m.IsSave != nil {
		n += 2
	}
	if m.PropsName != nil {
		l = len(*m.PropsName)
		n += 1 + l + sovTableStructCoinShop(uint64(l))
	}
	if m.PropsType != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.PropsType))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.CreateTime))
	}
	if m.IsNew != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerGetPropsLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.Id))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.PlayerId))
	}
	if m.GivePlayerId != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.GivePlayerId))
	}
	if m.PropsId != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.PropsId))
	}
	if m.PropsNum != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.PropsNum))
	}
	if m.PropsName != nil {
		l = len(*m.PropsName)
		n += 1 + l + sovTableStructCoinShop(uint64(l))
	}
	if m.PropsType != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.PropsType))
	}
	if m.GetType != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.GetType))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.CreateTime))
	}
	if m.EffectiveTime != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.EffectiveTime))
	}
	if m.RecycleTime != nil {
		n += 1 + sovTableStructCoinShop(uint64(*m.RecycleTime))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovTableStructCoinShop(uint64(l))
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 1 + l + sovTableStructCoinShop(uint64(l))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStructCoinShop(uint64(l))
	}
	if m.GiveAccount != nil {
		l = len(*m.GiveAccount)
		n += 1 + l + sovTableStructCoinShop(uint64(l))
	}
	if m.BagId != nil {
		n += 2 + sovTableStructCoinShop(uint64(*m.BagId))
	}
	if m.BuyWay != nil {
		n += 2 + sovTableStructCoinShop(uint64(*m.BuyWay))
	}
	if m.OrderId != nil {
		l = len(*m.OrderId)
		n += 2 + l + sovTableStructCoinShop(uint64(l))
	}
	if m.ProductId != nil {
		n += 2 + sovTableStructCoinShop(uint64(*m.ProductId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTableStructCoinShop(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTableStructCoinShop(x uint64) (n int) {
	return sovTableStructCoinShop(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CoinRecharge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructCoinShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinRecharge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinRecharge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Coin = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthFirst", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MonthFirst = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rebate", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rebate = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Platform = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sort = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisPrice = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructCoinShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinProduct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructCoinShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinProduct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinProduct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropsId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PropsId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropsIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PropsIcon = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EffectiveTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Coin = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinRebate", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CoinRebate = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductNum = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sort = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropsType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PropsType = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisCoin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisCoin = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleStartTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SaleStartTime = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleEndTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SaleEndTime = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IosCoin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IosCoin = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructCoinShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PropsItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructCoinShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PropsItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PropsItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropsIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PropsIcon = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropsType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PropsType = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Desc = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseType = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UseValue = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Version = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Config = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructCoinShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerBagItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructCoinShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerBagItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerBagItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropsId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PropsId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GetType = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OverTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSave", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsSave = &b
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PropsName = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropsType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PropsType = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNew", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsNew = &b
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructCoinShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerGetPropsLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructCoinShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerGetPropsLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerGetPropsLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GivePlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GivePlayerId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropsId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PropsId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropsNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PropsNum = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PropsName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropsType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PropsType = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GetType = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EffectiveTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleTime = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GiveAccount = &s
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BagId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BagId = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyWay", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BuyWay = &v
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OrderId = &s
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructCoinShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructCoinShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTableStructCoinShop(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTableStructCoinShop
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTableStructCoinShop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTableStructCoinShop
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTableStructCoinShop
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTableStructCoinShop
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTableStructCoinShop(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTableStructCoinShop
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTableStructCoinShop = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTableStructCoinShop   = fmt.Errorf("proto: integer overflow")
)
