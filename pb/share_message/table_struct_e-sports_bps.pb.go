// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: table_struct_e-sports_bps.proto

// Buried point statistics  埋点统计

package share_message

import (
	fmt "fmt"
	proto "github.com/akqp2019/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//停留时长
type TableESPortsBpsDuration struct {
	//对应key
	Id *string `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	//时间 以当天时间的24点为准(0點)
	TimeKey *int64 `protobuf:"varint,2,opt,name=TimeKey" json:"TimeKey,omitempty" bson:"TimeKey,omitempty"`
	//玩家ID
	PlayerId *int64 `protobuf:"varint,3,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	//进入时间
	CreateTime *int64 `protobuf:"varint,4,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	//退出时间
	EndTime *int64 `protobuf:"varint,5,opt,name=EndTime" json:"EndTime,omitempty" bson:"EndTime,omitempty"`
	//停留時長
	Duration *int64 `protobuf:"varint,6,opt,name=Duration" json:"Duration,omitempty" bson:"Duration,omitempty"`
	//菜單id
	MenuId *int32 `protobuf:"varint,7,opt,name=MenuId" json:"MenuId,omitempty" bson:"MenuId,omitempty"`
	//标签数据ID
	LabelId *int64 `protobuf:"varint,8,opt,name=LabelId" json:"LabelId,omitempty" bson:"LabelId,omitempty"`
	//扩展tabId
	ExTabId *int64 `protobuf:"varint,9,opt,name=ExTabId" json:"ExTabId,omitempty" bson:"ExTabId,omitempty"`
	//内容详细页Id
	DataId *int64 `protobuf:"varint,10,opt,name=DataId" json:"DataId,omitempty" bson:"DataId,omitempty"`
	//内容子页Id
	ExId *int64 `protobuf:"varint,11,opt,name=ExId" json:"ExId,omitempty" bson:"ExId,omitempty"`
	//數據類型：
	//1000、进入模块（im首页底下导航按钮）
	//2000、菜单
	//3000、自定标签
	//4000、扩展tabId
	//5000、内容页
	//6000、内容页子页
	PageType *int32 `protobuf:"varint,12,opt,name=PageType" json:"PageType,omitempty" bson:"PageType,omitempty"`
	//底部导航模块按钮  当前 PageType = 1000的时候生效  1 消息、2 通讯录、3 广场、4电竞、 5我的
	NavigationId         *int32   `protobuf:"varint,13,opt,name=NavigationId" json:"NavigationId,omitempty" bson:"NavigationId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TableESPortsBpsDuration) Reset()         { *m = TableESPortsBpsDuration{} }
func (m *TableESPortsBpsDuration) String() string { return proto.CompactTextString(m) }
func (*TableESPortsBpsDuration) ProtoMessage()    {}
func (*TableESPortsBpsDuration) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bfe6afed18066f1, []int{0}
}
func (m *TableESPortsBpsDuration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableESPortsBpsDuration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableESPortsBpsDuration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableESPortsBpsDuration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableESPortsBpsDuration.Merge(m, src)
}
func (m *TableESPortsBpsDuration) XXX_Size() int {
	return m.Size()
}
func (m *TableESPortsBpsDuration) XXX_DiscardUnknown() {
	xxx_messageInfo_TableESPortsBpsDuration.DiscardUnknown(m)
}

var xxx_messageInfo_TableESPortsBpsDuration proto.InternalMessageInfo

func (m *TableESPortsBpsDuration) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *TableESPortsBpsDuration) GetTimeKey() int64 {
	if m != nil && m.TimeKey != nil {
		return *m.TimeKey
	}
	return 0
}

func (m *TableESPortsBpsDuration) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *TableESPortsBpsDuration) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TableESPortsBpsDuration) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *TableESPortsBpsDuration) GetDuration() int64 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

func (m *TableESPortsBpsDuration) GetMenuId() int32 {
	if m != nil && m.MenuId != nil {
		return *m.MenuId
	}
	return 0
}

func (m *TableESPortsBpsDuration) GetLabelId() int64 {
	if m != nil && m.LabelId != nil {
		return *m.LabelId
	}
	return 0
}

func (m *TableESPortsBpsDuration) GetExTabId() int64 {
	if m != nil && m.ExTabId != nil {
		return *m.ExTabId
	}
	return 0
}

func (m *TableESPortsBpsDuration) GetDataId() int64 {
	if m != nil && m.DataId != nil {
		return *m.DataId
	}
	return 0
}

func (m *TableESPortsBpsDuration) GetExId() int64 {
	if m != nil && m.ExId != nil {
		return *m.ExId
	}
	return 0
}

func (m *TableESPortsBpsDuration) GetPageType() int32 {
	if m != nil && m.PageType != nil {
		return *m.PageType
	}
	return 0
}

func (m *TableESPortsBpsDuration) GetNavigationId() int32 {
	if m != nil && m.NavigationId != nil {
		return *m.NavigationId
	}
	return 0
}

//埋点点击
type TableESPortsBpsClick struct {
	//对应key
	Id *string `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	//时间 以当天时间的24点为准
	TimeKey *int64 `protobuf:"varint,2,opt,name=TimeKey" json:"TimeKey,omitempty" bson:"TimeKey,omitempty"`
	//玩家ID
	PlayerId *int64 `protobuf:"varint,3,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	//点击时间
	CreateTime *int64 `protobuf:"varint,4,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	//菜單id   100 = 系统消息，其他301等等按照原来的意思
	MenuId *int32 `protobuf:"varint,7,opt,name=MenuId" json:"MenuId,omitempty" bson:"MenuId,omitempty"`
	//标签数据ID   当 PageType = 3000 ， LabelId= -1000 的时候  就是等于玩家点中了 标签筛选按钮
	LabelId *int64 `protobuf:"varint,8,opt,name=LabelId" json:"LabelId,omitempty" bson:"LabelId,omitempty"`
	//扩展tabId
	ExTabId *int64 `protobuf:"varint,9,opt,name=ExTabId" json:"ExTabId,omitempty" bson:"ExTabId,omitempty"`
	//内容详细页Id
	DataId *int64 `protobuf:"varint,10,opt,name=DataId" json:"DataId,omitempty" bson:"DataId,omitempty"`
	//内容子页Id PageType=6000
	ExId *int64 `protobuf:"varint,11,opt,name=ExId" json:"ExId,omitempty" bson:"ExId,omitempty"`
	//數據類型：
	//1000、进入模块（im首页底下按钮）
	//2000、菜单
	//3000、自定标签
	//4000、扩展tabId
	//5000、内容页
	//6000、内容页子页
	PageType *int32 `protobuf:"varint,12,opt,name=PageType" json:"PageType,omitempty" bson:"PageType,omitempty"`
	//點擊次數
	ActCount *int32 `protobuf:"varint,13,opt,name=ActCount" json:"ActCount,omitempty" bson:"ActCount,omitempty"`
	//im在电竞中的模块定义 等于1000时使用 1 消息、2 通讯录、3 广场、4电竞、 5我的
	NavigationId *int32 `protobuf:"varint,14,opt,name=NavigationId" json:"NavigationId,omitempty" bson:"NavigationId,omitempty"`
	// 1 轮播图  2 内容详细页  3 申请放映厅 针对DataId 使用
	DataType *int32 `protobuf:"varint,15,opt,name=DataType" json:"DataType,omitempty" bson:"DataType,omitempty"`
	//点击哪个按钮 按钮ID
	ButtonId             *int32   `protobuf:"varint,16,opt,name=ButtonId" json:"ButtonId,omitempty" bson:"ButtonId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TableESPortsBpsClick) Reset()         { *m = TableESPortsBpsClick{} }
func (m *TableESPortsBpsClick) String() string { return proto.CompactTextString(m) }
func (*TableESPortsBpsClick) ProtoMessage()    {}
func (*TableESPortsBpsClick) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bfe6afed18066f1, []int{1}
}
func (m *TableESPortsBpsClick) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableESPortsBpsClick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableESPortsBpsClick.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableESPortsBpsClick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableESPortsBpsClick.Merge(m, src)
}
func (m *TableESPortsBpsClick) XXX_Size() int {
	return m.Size()
}
func (m *TableESPortsBpsClick) XXX_DiscardUnknown() {
	xxx_messageInfo_TableESPortsBpsClick.DiscardUnknown(m)
}

var xxx_messageInfo_TableESPortsBpsClick proto.InternalMessageInfo

func (m *TableESPortsBpsClick) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *TableESPortsBpsClick) GetTimeKey() int64 {
	if m != nil && m.TimeKey != nil {
		return *m.TimeKey
	}
	return 0
}

func (m *TableESPortsBpsClick) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *TableESPortsBpsClick) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TableESPortsBpsClick) GetMenuId() int32 {
	if m != nil && m.MenuId != nil {
		return *m.MenuId
	}
	return 0
}

func (m *TableESPortsBpsClick) GetLabelId() int64 {
	if m != nil && m.LabelId != nil {
		return *m.LabelId
	}
	return 0
}

func (m *TableESPortsBpsClick) GetExTabId() int64 {
	if m != nil && m.ExTabId != nil {
		return *m.ExTabId
	}
	return 0
}

func (m *TableESPortsBpsClick) GetDataId() int64 {
	if m != nil && m.DataId != nil {
		return *m.DataId
	}
	return 0
}

func (m *TableESPortsBpsClick) GetExId() int64 {
	if m != nil && m.ExId != nil {
		return *m.ExId
	}
	return 0
}

func (m *TableESPortsBpsClick) GetPageType() int32 {
	if m != nil && m.PageType != nil {
		return *m.PageType
	}
	return 0
}

func (m *TableESPortsBpsClick) GetActCount() int32 {
	if m != nil && m.ActCount != nil {
		return *m.ActCount
	}
	return 0
}

func (m *TableESPortsBpsClick) GetNavigationId() int32 {
	if m != nil && m.NavigationId != nil {
		return *m.NavigationId
	}
	return 0
}

func (m *TableESPortsBpsClick) GetDataType() int32 {
	if m != nil && m.DataType != nil {
		return *m.DataType
	}
	return 0
}

func (m *TableESPortsBpsClick) GetButtonId() int32 {
	if m != nil && m.ButtonId != nil {
		return *m.ButtonId
	}
	return 0
}

//=====报表===================================================================>
//基础埋点报表
type BasisPointsReport struct {
	//日期
	CreateTime *int64 `protobuf:"varint,1,opt,name=CreateTime" json:"_id,omitempty" bson:"_id,omitempty"`
	//底部按钮点击总次数
	SumClick *int64 `protobuf:"varint,2,opt,name=SumClick" json:"SumClick,omitempty" bson:"SumClick,omitempty"`
	//底部电竞点击人数/活跃用户数
	EsClickCount *int64 `protobuf:"varint,3,opt,name=EsClickCount" json:"EsClickCount,omitempty" bson:"EsClickCount,omitempty"`
	//底部电竞点击次数
	EsClick *int64 `protobuf:"varint,4,opt,name=EsClick" json:"EsClick,omitempty" bson:"EsClick,omitempty"`
	//人均使用时长
	PerAvgTime *int64 `protobuf:"varint,5,opt,name=PerAvgTime" json:"PerAvgTime,omitempty" bson:"PerAvgTime,omitempty"`
	//单次使用平均时长
	SigAvgTime *int64 `protobuf:"varint,6,opt,name=SigAvgTime" json:"SigAvgTime,omitempty" bson:"SigAvgTime,omitempty"`
	//忠诚用户数
	LoyalUserCount *int64 `protobuf:"varint,8,opt,name=LoyalUserCount" json:"LoyalUserCount,omitempty" bson:"LoyalUserCount,omitempty"`
	//浏览页面总数
	PvSum *int64 `protobuf:"varint,9,opt,name=PvSum" json:"PvSum,omitempty" bson:"PvSum,omitempty"`
	//次日留存
	NextDayCount *int64 `protobuf:"varint,11,opt,name=NextDayCount" json:"NextDayCount,omitempty" bson:"NextDayCount,omitempty"`
	//三日留存
	ThreeDayCount *int64 `protobuf:"varint,12,opt,name=ThreeDayCount" json:"ThreeDayCount,omitempty" bson:"ThreeDayCount,omitempty"`
	//七日留存
	SevenDayCount *int64 `protobuf:"varint,13,opt,name=SevenDayCount" json:"SevenDayCount,omitempty" bson:"SevenDayCount,omitempty"`
	//app登录人数
	LoginCount *int64 `protobuf:"varint,14,opt,name=LoginCount" json:"LoginCount,omitempty" bson:"LoginCount,omitempty"`
	//次留首日新增
	NextNewCount *int64 `protobuf:"varint,15,opt,name=NextNewCount" json:"NextNewCount,omitempty" bson:"NextNewCount,omitempty"`
	//三留首日新增
	ThreeNewCount *int64 `protobuf:"varint,16,opt,name=ThreeNewCount" json:"ThreeNewCount,omitempty" bson:"ThreeNewCount,omitempty"`
	//七留首日新增
	SevenNewCount        *int64   `protobuf:"varint,17,opt,name=SevenNewCount" json:"SevenNewCount,omitempty" bson:"SevenNewCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *BasisPointsReport) Reset()         { *m = BasisPointsReport{} }
func (m *BasisPointsReport) String() string { return proto.CompactTextString(m) }
func (*BasisPointsReport) ProtoMessage()    {}
func (*BasisPointsReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bfe6afed18066f1, []int{2}
}
func (m *BasisPointsReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BasisPointsReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BasisPointsReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BasisPointsReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasisPointsReport.Merge(m, src)
}
func (m *BasisPointsReport) XXX_Size() int {
	return m.Size()
}
func (m *BasisPointsReport) XXX_DiscardUnknown() {
	xxx_messageInfo_BasisPointsReport.DiscardUnknown(m)
}

var xxx_messageInfo_BasisPointsReport proto.InternalMessageInfo

func (m *BasisPointsReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *BasisPointsReport) GetSumClick() int64 {
	if m != nil && m.SumClick != nil {
		return *m.SumClick
	}
	return 0
}

func (m *BasisPointsReport) GetEsClickCount() int64 {
	if m != nil && m.EsClickCount != nil {
		return *m.EsClickCount
	}
	return 0
}

func (m *BasisPointsReport) GetEsClick() int64 {
	if m != nil && m.EsClick != nil {
		return *m.EsClick
	}
	return 0
}

func (m *BasisPointsReport) GetPerAvgTime() int64 {
	if m != nil && m.PerAvgTime != nil {
		return *m.PerAvgTime
	}
	return 0
}

func (m *BasisPointsReport) GetSigAvgTime() int64 {
	if m != nil && m.SigAvgTime != nil {
		return *m.SigAvgTime
	}
	return 0
}

func (m *BasisPointsReport) GetLoyalUserCount() int64 {
	if m != nil && m.LoyalUserCount != nil {
		return *m.LoyalUserCount
	}
	return 0
}

func (m *BasisPointsReport) GetPvSum() int64 {
	if m != nil && m.PvSum != nil {
		return *m.PvSum
	}
	return 0
}

func (m *BasisPointsReport) GetNextDayCount() int64 {
	if m != nil && m.NextDayCount != nil {
		return *m.NextDayCount
	}
	return 0
}

func (m *BasisPointsReport) GetThreeDayCount() int64 {
	if m != nil && m.ThreeDayCount != nil {
		return *m.ThreeDayCount
	}
	return 0
}

func (m *BasisPointsReport) GetSevenDayCount() int64 {
	if m != nil && m.SevenDayCount != nil {
		return *m.SevenDayCount
	}
	return 0
}

func (m *BasisPointsReport) GetLoginCount() int64 {
	if m != nil && m.LoginCount != nil {
		return *m.LoginCount
	}
	return 0
}

func (m *BasisPointsReport) GetNextNewCount() int64 {
	if m != nil && m.NextNewCount != nil {
		return *m.NextNewCount
	}
	return 0
}

func (m *BasisPointsReport) GetThreeNewCount() int64 {
	if m != nil && m.ThreeNewCount != nil {
		return *m.ThreeNewCount
	}
	return 0
}

func (m *BasisPointsReport) GetSevenNewCount() int64 {
	if m != nil && m.SevenNewCount != nil {
		return *m.SevenNewCount
	}
	return 0
}

//Tab菜单埋点报表
type MenuPointsReport struct {
	//日期
	CreateTime *int64 `protobuf:"varint,1,opt,name=CreateTime" json:"_id,omitempty" bson:"_id,omitempty"`
	//资讯点击人数
	NewsCount *int64 `protobuf:"varint,2,opt,name=NewsCount" json:"NewsCount,omitempty" bson:"NewsCount,omitempty"`
	//娱乐点击人数
	AmuseCount *int64 `protobuf:"varint,3,opt,name=AmuseCount" json:"AmuseCount,omitempty" bson:"AmuseCount,omitempty"`
	//放映厅点击人数
	VdoHallCount *int64 `protobuf:"varint,4,opt,name=VdoHallCount" json:"VdoHallCount,omitempty" bson:"VdoHallCount,omitempty"`
	//赛事点击人数
	MatchCount *int64 `protobuf:"varint,5,opt,name=MatchCount" json:"MatchCount,omitempty" bson:"MatchCount,omitempty"`
	//底部电竞点击人数
	EsClickCount         *int64   `protobuf:"varint,6,opt,name=EsClickCount" json:"EsClickCount,omitempty" bson:"EsClickCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *MenuPointsReport) Reset()         { *m = MenuPointsReport{} }
func (m *MenuPointsReport) String() string { return proto.CompactTextString(m) }
func (*MenuPointsReport) ProtoMessage()    {}
func (*MenuPointsReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bfe6afed18066f1, []int{3}
}
func (m *MenuPointsReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MenuPointsReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MenuPointsReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MenuPointsReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MenuPointsReport.Merge(m, src)
}
func (m *MenuPointsReport) XXX_Size() int {
	return m.Size()
}
func (m *MenuPointsReport) XXX_DiscardUnknown() {
	xxx_messageInfo_MenuPointsReport.DiscardUnknown(m)
}

var xxx_messageInfo_MenuPointsReport proto.InternalMessageInfo

func (m *MenuPointsReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *MenuPointsReport) GetNewsCount() int64 {
	if m != nil && m.NewsCount != nil {
		return *m.NewsCount
	}
	return 0
}

func (m *MenuPointsReport) GetAmuseCount() int64 {
	if m != nil && m.AmuseCount != nil {
		return *m.AmuseCount
	}
	return 0
}

func (m *MenuPointsReport) GetVdoHallCount() int64 {
	if m != nil && m.VdoHallCount != nil {
		return *m.VdoHallCount
	}
	return 0
}

func (m *MenuPointsReport) GetMatchCount() int64 {
	if m != nil && m.MatchCount != nil {
		return *m.MatchCount
	}
	return 0
}

func (m *MenuPointsReport) GetEsClickCount() int64 {
	if m != nil && m.EsClickCount != nil {
		return *m.EsClickCount
	}
	return 0
}

//标签埋点报表 301-资讯,302-娱乐,303-赛事,304-放映厅
type LabelPointsReport struct {
	//CreateTime+MenuId
	Id *string `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	//日期
	CreateTime *int64 `protobuf:"varint,2,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	//菜單id  所属菜单模块
	MenuId *int32 `protobuf:"varint,3,opt,name=MenuId" json:"MenuId,omitempty" bson:"MenuId,omitempty"`
	//底部电竞点击人数
	EsClickCount *int64 `protobuf:"varint,4,opt,name=EsClickCount" json:"EsClickCount,omitempty" bson:"EsClickCount,omitempty"`
	//标签管理按钮点击人数
	LabMagBtnCount *int64 `protobuf:"varint,5,opt,name=LabMagBtnCount" json:"LabMagBtnCount,omitempty" bson:"LabMagBtnCount,omitempty"`
	//标签更改按钮点击人数
	LabChaBtnCount *int64 `protobuf:"varint,6,opt,name=LabChaBtnCount" json:"LabChaBtnCount,omitempty" bson:"LabChaBtnCount,omitempty"`
	//自定义标签
	Custom []*LabelPointsstruct `protobuf:"bytes,7,rep,name=Custom" json:"Custom,omitempty" bson:"Custom,omitempty"`
	//固定标签
	Fixed                []*LabelPointsstruct `protobuf:"bytes,8,rep,name=Fixed" json:"Fixed,omitempty" bson:"Fixed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-" bson:"-"`
	XXX_unrecognized     []byte               `json:"-" bson:"-"`
	XXX_sizecache        int32                `json:"-" bson:"-"`
}

func (m *LabelPointsReport) Reset()         { *m = LabelPointsReport{} }
func (m *LabelPointsReport) String() string { return proto.CompactTextString(m) }
func (*LabelPointsReport) ProtoMessage()    {}
func (*LabelPointsReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bfe6afed18066f1, []int{4}
}
func (m *LabelPointsReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelPointsReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LabelPointsReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LabelPointsReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelPointsReport.Merge(m, src)
}
func (m *LabelPointsReport) XXX_Size() int {
	return m.Size()
}
func (m *LabelPointsReport) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelPointsReport.DiscardUnknown(m)
}

var xxx_messageInfo_LabelPointsReport proto.InternalMessageInfo

func (m *LabelPointsReport) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *LabelPointsReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *LabelPointsReport) GetMenuId() int32 {
	if m != nil && m.MenuId != nil {
		return *m.MenuId
	}
	return 0
}

func (m *LabelPointsReport) GetEsClickCount() int64 {
	if m != nil && m.EsClickCount != nil {
		return *m.EsClickCount
	}
	return 0
}

func (m *LabelPointsReport) GetLabMagBtnCount() int64 {
	if m != nil && m.LabMagBtnCount != nil {
		return *m.LabMagBtnCount
	}
	return 0
}

func (m *LabelPointsReport) GetLabChaBtnCount() int64 {
	if m != nil && m.LabChaBtnCount != nil {
		return *m.LabChaBtnCount
	}
	return 0
}

func (m *LabelPointsReport) GetCustom() []*LabelPointsstruct {
	if m != nil {
		return m.Custom
	}
	return nil
}

func (m *LabelPointsReport) GetFixed() []*LabelPointsstruct {
	if m != nil {
		return m.Fixed
	}
	return nil
}

////标签下级结构
type LabelPointsstruct struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	Title                *string  `protobuf:"bytes,2,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	Count                *int64   `protobuf:"varint,3,opt,name=Count" json:"Count,omitempty" bson:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *LabelPointsstruct) Reset()         { *m = LabelPointsstruct{} }
func (m *LabelPointsstruct) String() string { return proto.CompactTextString(m) }
func (*LabelPointsstruct) ProtoMessage()    {}
func (*LabelPointsstruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bfe6afed18066f1, []int{5}
}
func (m *LabelPointsstruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelPointsstruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LabelPointsstruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LabelPointsstruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelPointsstruct.Merge(m, src)
}
func (m *LabelPointsstruct) XXX_Size() int {
	return m.Size()
}
func (m *LabelPointsstruct) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelPointsstruct.DiscardUnknown(m)
}

var xxx_messageInfo_LabelPointsstruct proto.InternalMessageInfo

func (m *LabelPointsstruct) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LabelPointsstruct) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *LabelPointsstruct) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

//资讯/娱乐埋点报表
type NewsAmusePointsReport struct {
	//CreateTime+MenuId
	Id *string `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	//日期
	CreateTime *int64 `protobuf:"varint,2,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	//菜單id  所属菜单模块
	MenuId *int32 `protobuf:"varint,3,opt,name=MenuId" json:"MenuId,omitempty" bson:"MenuId,omitempty"`
	//人均停留时长
	AvgTime *int64 `protobuf:"varint,4,opt,name=AvgTime" json:"AvgTime,omitempty" bson:"AvgTime,omitempty"`
	//单次停留平均时长
	SigAvgTime *int64 `protobuf:"varint,5,opt,name=SigAvgTime" json:"SigAvgTime,omitempty" bson:"SigAvgTime,omitempty"`
	//阅读总量
	ReadSum              *int64   `protobuf:"varint,6,opt,name=ReadSum" json:"ReadSum,omitempty" bson:"ReadSum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *NewsAmusePointsReport) Reset()         { *m = NewsAmusePointsReport{} }
func (m *NewsAmusePointsReport) String() string { return proto.CompactTextString(m) }
func (*NewsAmusePointsReport) ProtoMessage()    {}
func (*NewsAmusePointsReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bfe6afed18066f1, []int{6}
}
func (m *NewsAmusePointsReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewsAmusePointsReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewsAmusePointsReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewsAmusePointsReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewsAmusePointsReport.Merge(m, src)
}
func (m *NewsAmusePointsReport) XXX_Size() int {
	return m.Size()
}
func (m *NewsAmusePointsReport) XXX_DiscardUnknown() {
	xxx_messageInfo_NewsAmusePointsReport.DiscardUnknown(m)
}

var xxx_messageInfo_NewsAmusePointsReport proto.InternalMessageInfo

func (m *NewsAmusePointsReport) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *NewsAmusePointsReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *NewsAmusePointsReport) GetMenuId() int32 {
	if m != nil && m.MenuId != nil {
		return *m.MenuId
	}
	return 0
}

func (m *NewsAmusePointsReport) GetAvgTime() int64 {
	if m != nil && m.AvgTime != nil {
		return *m.AvgTime
	}
	return 0
}

func (m *NewsAmusePointsReport) GetSigAvgTime() int64 {
	if m != nil && m.SigAvgTime != nil {
		return *m.SigAvgTime
	}
	return 0
}

func (m *NewsAmusePointsReport) GetReadSum() int64 {
	if m != nil && m.ReadSum != nil {
		return *m.ReadSum
	}
	return 0
}

//放映厅埋点报表
type VdoHallPointsReport struct {
	//日期
	CreateTime *int64 `protobuf:"varint,1,opt,name=CreateTime" json:"_id,omitempty" bson:"_id,omitempty"`
	//阅读总次数
	ReadSum *int64 `protobuf:"varint,2,opt,name=ReadSum" json:"ReadSum,omitempty" bson:"ReadSum,omitempty"`
	//点击次数
	ClickSum *int64 `protobuf:"varint,3,opt,name=ClickSum" json:"ClickSum,omitempty" bson:"ClickSum,omitempty"`
	//点击放映厅人数
	EsUserCount *int64 `protobuf:"varint,4,opt,name=EsUserCount" json:"EsUserCount,omitempty" bson:"EsUserCount,omitempty"`
	//放映厅关注人数
	FollowHallCount *int64 `protobuf:"varint,5,opt,name=FollowHallCount" json:"FollowHallCount,omitempty" bson:"FollowHallCount,omitempty"`
	//放映厅主播关注人数
	FollowUserCount *int64 `protobuf:"varint,6,opt,name=FollowUserCount" json:"FollowUserCount,omitempty" bson:"FollowUserCount,omitempty"`
	//人均停留时长
	AvgTime *int64 `protobuf:"varint,7,opt,name=AvgTime" json:"AvgTime,omitempty" bson:"AvgTime,omitempty"`
	//单次停留平均时长
	SigAvgTime *int64 `protobuf:"varint,8,opt,name=SigAvgTime" json:"SigAvgTime,omitempty" bson:"SigAvgTime,omitempty"`
	//开通按钮点击人数
	OpenUserCount *int64 `protobuf:"varint,9,opt,name=OpenUserCount" json:"OpenUserCount,omitempty" bson:"OpenUserCount,omitempty"`
	//放映列表点击人数
	VdoLsCount *int64 `protobuf:"varint,10,opt,name=VdoLsCount" json:"VdoLsCount,omitempty" bson:"VdoLsCount,omitempty"`
	//我的关注点击人数
	MyFollowCount *int64 `protobuf:"varint,11,opt,name=MyFollowCount" json:"MyFollowCount,omitempty" bson:"MyFollowCount,omitempty"`
	//观看记录点击人数
	PlayLogCount         *int64   `protobuf:"varint,12,opt,name=PlayLogCount" json:"PlayLogCount,omitempty" bson:"PlayLogCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *VdoHallPointsReport) Reset()         { *m = VdoHallPointsReport{} }
func (m *VdoHallPointsReport) String() string { return proto.CompactTextString(m) }
func (*VdoHallPointsReport) ProtoMessage()    {}
func (*VdoHallPointsReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bfe6afed18066f1, []int{7}
}
func (m *VdoHallPointsReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VdoHallPointsReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VdoHallPointsReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VdoHallPointsReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VdoHallPointsReport.Merge(m, src)
}
func (m *VdoHallPointsReport) XXX_Size() int {
	return m.Size()
}
func (m *VdoHallPointsReport) XXX_DiscardUnknown() {
	xxx_messageInfo_VdoHallPointsReport.DiscardUnknown(m)
}

var xxx_messageInfo_VdoHallPointsReport proto.InternalMessageInfo

func (m *VdoHallPointsReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *VdoHallPointsReport) GetReadSum() int64 {
	if m != nil && m.ReadSum != nil {
		return *m.ReadSum
	}
	return 0
}

func (m *VdoHallPointsReport) GetClickSum() int64 {
	if m != nil && m.ClickSum != nil {
		return *m.ClickSum
	}
	return 0
}

func (m *VdoHallPointsReport) GetEsUserCount() int64 {
	if m != nil && m.EsUserCount != nil {
		return *m.EsUserCount
	}
	return 0
}

func (m *VdoHallPointsReport) GetFollowHallCount() int64 {
	if m != nil && m.FollowHallCount != nil {
		return *m.FollowHallCount
	}
	return 0
}

func (m *VdoHallPointsReport) GetFollowUserCount() int64 {
	if m != nil && m.FollowUserCount != nil {
		return *m.FollowUserCount
	}
	return 0
}

func (m *VdoHallPointsReport) GetAvgTime() int64 {
	if m != nil && m.AvgTime != nil {
		return *m.AvgTime
	}
	return 0
}

func (m *VdoHallPointsReport) GetSigAvgTime() int64 {
	if m != nil && m.SigAvgTime != nil {
		return *m.SigAvgTime
	}
	return 0
}

func (m *VdoHallPointsReport) GetOpenUserCount() int64 {
	if m != nil && m.OpenUserCount != nil {
		return *m.OpenUserCount
	}
	return 0
}

func (m *VdoHallPointsReport) GetVdoLsCount() int64 {
	if m != nil && m.VdoLsCount != nil {
		return *m.VdoLsCount
	}
	return 0
}

func (m *VdoHallPointsReport) GetMyFollowCount() int64 {
	if m != nil && m.MyFollowCount != nil {
		return *m.MyFollowCount
	}
	return 0
}

func (m *VdoHallPointsReport) GetPlayLogCount() int64 {
	if m != nil && m.PlayLogCount != nil {
		return *m.PlayLogCount
	}
	return 0
}

//申请放映厅埋点报表
type ApplyVdoHallPointsReport struct {
	//日期
	CreateTime *int64 `protobuf:"varint,1,opt,name=CreateTime" json:"_id,omitempty" bson:"_id,omitempty"`
	//去开通点击总量人数
	OpenCount *int64 `protobuf:"varint,2,opt,name=OpenCount" json:"OpenCount,omitempty" bson:"OpenCount,omitempty"`
	//提交申请点击人数
	ApplyCount *int64 `protobuf:"varint,3,opt,name=ApplyCount" json:"ApplyCount,omitempty" bson:"ApplyCount,omitempty"`
	//申请单跳出人数
	ApplyBackCount       *int64   `protobuf:"varint,4,opt,name=ApplyBackCount" json:"ApplyBackCount,omitempty" bson:"ApplyBackCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ApplyVdoHallPointsReport) Reset()         { *m = ApplyVdoHallPointsReport{} }
func (m *ApplyVdoHallPointsReport) String() string { return proto.CompactTextString(m) }
func (*ApplyVdoHallPointsReport) ProtoMessage()    {}
func (*ApplyVdoHallPointsReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bfe6afed18066f1, []int{8}
}
func (m *ApplyVdoHallPointsReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyVdoHallPointsReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyVdoHallPointsReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyVdoHallPointsReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyVdoHallPointsReport.Merge(m, src)
}
func (m *ApplyVdoHallPointsReport) XXX_Size() int {
	return m.Size()
}
func (m *ApplyVdoHallPointsReport) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyVdoHallPointsReport.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyVdoHallPointsReport proto.InternalMessageInfo

func (m *ApplyVdoHallPointsReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ApplyVdoHallPointsReport) GetOpenCount() int64 {
	if m != nil && m.OpenCount != nil {
		return *m.OpenCount
	}
	return 0
}

func (m *ApplyVdoHallPointsReport) GetApplyCount() int64 {
	if m != nil && m.ApplyCount != nil {
		return *m.ApplyCount
	}
	return 0
}

func (m *ApplyVdoHallPointsReport) GetApplyBackCount() int64 {
	if m != nil && m.ApplyBackCount != nil {
		return *m.ApplyBackCount
	}
	return 0
}

//赛事列表埋点报表
type MatchLsPointsReport struct {
	//日期
	CreateTime *int64 `protobuf:"varint,1,opt,name=CreateTime" json:"_id,omitempty" bson:"_id,omitempty"`
	//赛事列表页面点击总次数
	MatchLsClick *int64 `protobuf:"varint,2,opt,name=MatchLsClick" json:"MatchLsClick,omitempty" bson:"MatchLsClick,omitempty"`
	//人均停留时长
	AvgTime *int64 `protobuf:"varint,3,opt,name=AvgTime" json:"AvgTime,omitempty" bson:"AvgTime,omitempty"`
	//单次停留平均时长
	SigAvgTime *int64 `protobuf:"varint,4,opt,name=SigAvgTime" json:"SigAvgTime,omitempty" bson:"SigAvgTime,omitempty"`
	//今日按钮点击人数
	TodayCount *int64 `protobuf:"varint,5,opt,name=TodayCount" json:"TodayCount,omitempty" bson:"TodayCount,omitempty"`
	//赛前按钮点击人数
	MatchCount *int64 `protobuf:"varint,6,opt,name=MatchCount" json:"MatchCount,omitempty" bson:"MatchCount,omitempty"`
	//滚盘按钮点击人数
	RollCount *int64 `protobuf:"varint,7,opt,name=RollCount" json:"RollCount,omitempty" bson:"RollCount,omitempty"`
	//已结束按钮点击人数
	OverCount *int64 `protobuf:"varint,8,opt,name=OverCount" json:"OverCount,omitempty" bson:"OverCount,omitempty"`
	//赛事列表页面点击总人数
	MatchLsCount         *int64   `protobuf:"varint,9,opt,name=MatchLsCount" json:"MatchLsCount,omitempty" bson:"MatchLsCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *MatchLsPointsReport) Reset()         { *m = MatchLsPointsReport{} }
func (m *MatchLsPointsReport) String() string { return proto.CompactTextString(m) }
func (*MatchLsPointsReport) ProtoMessage()    {}
func (*MatchLsPointsReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bfe6afed18066f1, []int{9}
}
func (m *MatchLsPointsReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchLsPointsReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchLsPointsReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchLsPointsReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchLsPointsReport.Merge(m, src)
}
func (m *MatchLsPointsReport) XXX_Size() int {
	return m.Size()
}
func (m *MatchLsPointsReport) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchLsPointsReport.DiscardUnknown(m)
}

var xxx_messageInfo_MatchLsPointsReport proto.InternalMessageInfo

func (m *MatchLsPointsReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *MatchLsPointsReport) GetMatchLsClick() int64 {
	if m != nil && m.MatchLsClick != nil {
		return *m.MatchLsClick
	}
	return 0
}

func (m *MatchLsPointsReport) GetAvgTime() int64 {
	if m != nil && m.AvgTime != nil {
		return *m.AvgTime
	}
	return 0
}

func (m *MatchLsPointsReport) GetSigAvgTime() int64 {
	if m != nil && m.SigAvgTime != nil {
		return *m.SigAvgTime
	}
	return 0
}

func (m *MatchLsPointsReport) GetTodayCount() int64 {
	if m != nil && m.TodayCount != nil {
		return *m.TodayCount
	}
	return 0
}

func (m *MatchLsPointsReport) GetMatchCount() int64 {
	if m != nil && m.MatchCount != nil {
		return *m.MatchCount
	}
	return 0
}

func (m *MatchLsPointsReport) GetRollCount() int64 {
	if m != nil && m.RollCount != nil {
		return *m.RollCount
	}
	return 0
}

func (m *MatchLsPointsReport) GetOverCount() int64 {
	if m != nil && m.OverCount != nil {
		return *m.OverCount
	}
	return 0
}

func (m *MatchLsPointsReport) GetMatchLsCount() int64 {
	if m != nil && m.MatchLsCount != nil {
		return *m.MatchLsCount
	}
	return 0
}

//赛事详情埋点报表
type MatchDilPointsReport struct {
	//日期
	CreateTime *int64 `protobuf:"varint,1,opt,name=CreateTime" json:"_id,omitempty" bson:"_id,omitempty"`
	//赛事页点击总次数
	MatchClick *int64 `protobuf:"varint,2,opt,name=MatchClick" json:"MatchClick,omitempty" bson:"MatchClick,omitempty"`
	//底部电竞点击人数
	EsClickCount *int64 `protobuf:"varint,3,opt,name=EsClickCount" json:"EsClickCount,omitempty" bson:"EsClickCount,omitempty"`
	//人均停留时长
	AvgTime *int64 `protobuf:"varint,4,opt,name=AvgTime" json:"AvgTime,omitempty" bson:"AvgTime,omitempty"`
	//单次停留平均时长
	SigAvgTime *int64 `protobuf:"varint,5,opt,name=SigAvgTime" json:"SigAvgTime,omitempty" bson:"SigAvgTime,omitempty"`
	//阵容点击人数
	LineupCount *int64 `protobuf:"varint,6,opt,name=LineupCount" json:"LineupCount,omitempty" bson:"LineupCount,omitempty"`
	//数据点击人数
	DataCount *int64 `protobuf:"varint,7,opt,name=DataCount" json:"DataCount,omitempty" bson:"DataCount,omitempty"`
	//数据页人均停留时长
	DataAvgTime *int64 `protobuf:"varint,8,opt,name=DataAvgTime" json:"DataAvgTime,omitempty" bson:"DataAvgTime,omitempty"`
	//数据页单次停留时长
	DataSigAvgTime *int64 `protobuf:"varint,9,opt,name=DataSigAvgTime" json:"DataSigAvgTime,omitempty" bson:"DataSigAvgTime,omitempty"`
	//竞猜点击人数
	GuessCount *int64 `protobuf:"varint,10,opt,name=GuessCount" json:"GuessCount,omitempty" bson:"GuessCount,omitempty"`
	//竞猜页人均停留时长
	GuessAvgTime *int64 `protobuf:"varint,11,opt,name=GuessAvgTime" json:"GuessAvgTime,omitempty" bson:"GuessAvgTime,omitempty"`
	//竞猜页单次停留时长
	GuessSigTime *int64 `protobuf:"varint,12,opt,name=GuessSigTime" json:"GuessSigTime,omitempty" bson:"GuessSigTime,omitempty"`
	//赛事详情点击人数
	MatchDilCount        *int64   `protobuf:"varint,13,opt,name=MatchDilCount" json:"MatchDilCount,omitempty" bson:"MatchDilCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *MatchDilPointsReport) Reset()         { *m = MatchDilPointsReport{} }
func (m *MatchDilPointsReport) String() string { return proto.CompactTextString(m) }
func (*MatchDilPointsReport) ProtoMessage()    {}
func (*MatchDilPointsReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bfe6afed18066f1, []int{10}
}
func (m *MatchDilPointsReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchDilPointsReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchDilPointsReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchDilPointsReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchDilPointsReport.Merge(m, src)
}
func (m *MatchDilPointsReport) XXX_Size() int {
	return m.Size()
}
func (m *MatchDilPointsReport) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchDilPointsReport.DiscardUnknown(m)
}

var xxx_messageInfo_MatchDilPointsReport proto.InternalMessageInfo

func (m *MatchDilPointsReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *MatchDilPointsReport) GetMatchClick() int64 {
	if m != nil && m.MatchClick != nil {
		return *m.MatchClick
	}
	return 0
}

func (m *MatchDilPointsReport) GetEsClickCount() int64 {
	if m != nil && m.EsClickCount != nil {
		return *m.EsClickCount
	}
	return 0
}

func (m *MatchDilPointsReport) GetAvgTime() int64 {
	if m != nil && m.AvgTime != nil {
		return *m.AvgTime
	}
	return 0
}

func (m *MatchDilPointsReport) GetSigAvgTime() int64 {
	if m != nil && m.SigAvgTime != nil {
		return *m.SigAvgTime
	}
	return 0
}

func (m *MatchDilPointsReport) GetLineupCount() int64 {
	if m != nil && m.LineupCount != nil {
		return *m.LineupCount
	}
	return 0
}

func (m *MatchDilPointsReport) GetDataCount() int64 {
	if m != nil && m.DataCount != nil {
		return *m.DataCount
	}
	return 0
}

func (m *MatchDilPointsReport) GetDataAvgTime() int64 {
	if m != nil && m.DataAvgTime != nil {
		return *m.DataAvgTime
	}
	return 0
}

func (m *MatchDilPointsReport) GetDataSigAvgTime() int64 {
	if m != nil && m.DataSigAvgTime != nil {
		return *m.DataSigAvgTime
	}
	return 0
}

func (m *MatchDilPointsReport) GetGuessCount() int64 {
	if m != nil && m.GuessCount != nil {
		return *m.GuessCount
	}
	return 0
}

func (m *MatchDilPointsReport) GetGuessAvgTime() int64 {
	if m != nil && m.GuessAvgTime != nil {
		return *m.GuessAvgTime
	}
	return 0
}

func (m *MatchDilPointsReport) GetGuessSigTime() int64 {
	if m != nil && m.GuessSigTime != nil {
		return *m.GuessSigTime
	}
	return 0
}

func (m *MatchDilPointsReport) GetMatchDilCount() int64 {
	if m != nil && m.MatchDilCount != nil {
		return *m.MatchDilCount
	}
	return 0
}

//竞猜页埋点报表
type GuessPointsReport struct {
	//日期
	CreateTime *int64 `protobuf:"varint,1,opt,name=CreateTime" json:"_id,omitempty" bson:"_id,omitempty"`
	//底部电竞点击人数
	EsClickCount *int64 `protobuf:"varint,2,opt,name=EsClickCount" json:"EsClickCount,omitempty" bson:"EsClickCount,omitempty"`
	//点击投注按钮人数
	BetCount *int64 `protobuf:"varint,3,opt,name=BetCount" json:"BetCount,omitempty" bson:"BetCount,omitempty"`
	//投注成功人数
	BetOkCount           *int64   `protobuf:"varint,4,opt,name=BetOkCount" json:"BetOkCount,omitempty" bson:"BetOkCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GuessPointsReport) Reset()         { *m = GuessPointsReport{} }
func (m *GuessPointsReport) String() string { return proto.CompactTextString(m) }
func (*GuessPointsReport) ProtoMessage()    {}
func (*GuessPointsReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bfe6afed18066f1, []int{11}
}
func (m *GuessPointsReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuessPointsReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuessPointsReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuessPointsReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuessPointsReport.Merge(m, src)
}
func (m *GuessPointsReport) XXX_Size() int {
	return m.Size()
}
func (m *GuessPointsReport) XXX_DiscardUnknown() {
	xxx_messageInfo_GuessPointsReport.DiscardUnknown(m)
}

var xxx_messageInfo_GuessPointsReport proto.InternalMessageInfo

func (m *GuessPointsReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *GuessPointsReport) GetEsClickCount() int64 {
	if m != nil && m.EsClickCount != nil {
		return *m.EsClickCount
	}
	return 0
}

func (m *GuessPointsReport) GetBetCount() int64 {
	if m != nil && m.BetCount != nil {
		return *m.BetCount
	}
	return 0
}

func (m *GuessPointsReport) GetBetOkCount() int64 {
	if m != nil && m.BetOkCount != nil {
		return *m.BetOkCount
	}
	return 0
}

//消息页埋点报表
type MsgPointsReport struct {
	//日期
	CreateTime *int64 `protobuf:"varint,1,opt,name=CreateTime" json:"_id,omitempty" bson:"_id,omitempty"`
	//底部电竞点击人数
	EsClickCount *int64 `protobuf:"varint,2,opt,name=EsClickCount" json:"EsClickCount,omitempty" bson:"EsClickCount,omitempty"`
	//消息按钮点击人数
	MsgCount *int64 `protobuf:"varint,3,opt,name=MsgCount" json:"MsgCount,omitempty" bson:"MsgCount,omitempty"`
	//系统消息按钮点击人数
	SysMsgCount *int64 `protobuf:"varint,4,opt,name=SysMsgCount" json:"SysMsgCount,omitempty" bson:"SysMsgCount,omitempty"`
	//未结算按钮点击人数
	UnSettle *int64 `protobuf:"varint,5,opt,name=UnSettle" json:"UnSettle,omitempty" bson:"UnSettle,omitempty"`
	//已结算按钮点击人数
	Settle               *int64   `protobuf:"varint,6,opt,name=Settle" json:"Settle,omitempty" bson:"Settle,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *MsgPointsReport) Reset()         { *m = MsgPointsReport{} }
func (m *MsgPointsReport) String() string { return proto.CompactTextString(m) }
func (*MsgPointsReport) ProtoMessage()    {}
func (*MsgPointsReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bfe6afed18066f1, []int{12}
}
func (m *MsgPointsReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPointsReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPointsReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPointsReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPointsReport.Merge(m, src)
}
func (m *MsgPointsReport) XXX_Size() int {
	return m.Size()
}
func (m *MsgPointsReport) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPointsReport.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPointsReport proto.InternalMessageInfo

func (m *MsgPointsReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *MsgPointsReport) GetEsClickCount() int64 {
	if m != nil && m.EsClickCount != nil {
		return *m.EsClickCount
	}
	return 0
}

func (m *MsgPointsReport) GetMsgCount() int64 {
	if m != nil && m.MsgCount != nil {
		return *m.MsgCount
	}
	return 0
}

func (m *MsgPointsReport) GetSysMsgCount() int64 {
	if m != nil && m.SysMsgCount != nil {
		return *m.SysMsgCount
	}
	return 0
}

func (m *MsgPointsReport) GetUnSettle() int64 {
	if m != nil && m.UnSettle != nil {
		return *m.UnSettle
	}
	return 0
}

func (m *MsgPointsReport) GetSettle() int64 {
	if m != nil && m.Settle != nil {
		return *m.Settle
	}
	return 0
}

//电竞币埋点报表
type EsportCoinPointsReport struct {
	//日期
	CreateTime *int64 `protobuf:"varint,1,opt,name=CreateTime" json:"_id,omitempty" bson:"_id,omitempty"`
	//底部电竞点击人数
	EsClickCount *int64 `protobuf:"varint,2,opt,name=EsClickCount" json:"EsClickCount,omitempty" bson:"EsClickCount,omitempty"`
	//电竞币按钮点击人数
	EsCoinCount *int64 `protobuf:"varint,3,opt,name=EsCoinCount" json:"EsCoinCount,omitempty" bson:"EsCoinCount,omitempty"`
	//兑换成功人数
	ExchangeOkCount      *int64   `protobuf:"varint,4,opt,name=ExchangeOkCount" json:"ExchangeOkCount,omitempty" bson:"ExchangeOkCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *EsportCoinPointsReport) Reset()         { *m = EsportCoinPointsReport{} }
func (m *EsportCoinPointsReport) String() string { return proto.CompactTextString(m) }
func (*EsportCoinPointsReport) ProtoMessage()    {}
func (*EsportCoinPointsReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bfe6afed18066f1, []int{13}
}
func (m *EsportCoinPointsReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EsportCoinPointsReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EsportCoinPointsReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EsportCoinPointsReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EsportCoinPointsReport.Merge(m, src)
}
func (m *EsportCoinPointsReport) XXX_Size() int {
	return m.Size()
}
func (m *EsportCoinPointsReport) XXX_DiscardUnknown() {
	xxx_messageInfo_EsportCoinPointsReport.DiscardUnknown(m)
}

var xxx_messageInfo_EsportCoinPointsReport proto.InternalMessageInfo

func (m *EsportCoinPointsReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *EsportCoinPointsReport) GetEsClickCount() int64 {
	if m != nil && m.EsClickCount != nil {
		return *m.EsClickCount
	}
	return 0
}

func (m *EsportCoinPointsReport) GetEsCoinCount() int64 {
	if m != nil && m.EsCoinCount != nil {
		return *m.EsCoinCount
	}
	return 0
}

func (m *EsportCoinPointsReport) GetExchangeOkCount() int64 {
	if m != nil && m.ExchangeOkCount != nil {
		return *m.ExchangeOkCount
	}
	return 0
}

func init() {
	proto.RegisterType((*TableESPortsBpsDuration)(nil), "share_message.TableESPortsBpsDuration")
	proto.RegisterType((*TableESPortsBpsClick)(nil), "share_message.TableESPortsBpsClick")
	proto.RegisterType((*BasisPointsReport)(nil), "share_message.BasisPointsReport")
	proto.RegisterType((*MenuPointsReport)(nil), "share_message.MenuPointsReport")
	proto.RegisterType((*LabelPointsReport)(nil), "share_message.LabelPointsReport")
	proto.RegisterType((*LabelPointsstruct)(nil), "share_message.LabelPointsstruct")
	proto.RegisterType((*NewsAmusePointsReport)(nil), "share_message.NewsAmusePointsReport")
	proto.RegisterType((*VdoHallPointsReport)(nil), "share_message.VdoHallPointsReport")
	proto.RegisterType((*ApplyVdoHallPointsReport)(nil), "share_message.ApplyVdoHallPointsReport")
	proto.RegisterType((*MatchLsPointsReport)(nil), "share_message.MatchLsPointsReport")
	proto.RegisterType((*MatchDilPointsReport)(nil), "share_message.MatchDilPointsReport")
	proto.RegisterType((*GuessPointsReport)(nil), "share_message.GuessPointsReport")
	proto.RegisterType((*MsgPointsReport)(nil), "share_message.MsgPointsReport")
	proto.RegisterType((*EsportCoinPointsReport)(nil), "share_message.EsportCoinPointsReport")
}

func init() { proto.RegisterFile("table_struct_e-sports_bps.proto", fileDescriptor_3bfe6afed18066f1) }

var fileDescriptor_3bfe6afed18066f1 = []byte{
	// 998 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x6f, 0xe2, 0xc6,
	0x1b, 0x96, 0x21, 0x04, 0x78, 0x31, 0xff, 0x0c, 0x9b, 0x58, 0x3f, 0xe9, 0x97, 0x45, 0x96, 0x2a,
	0xe5, 0xd0, 0xa6, 0x55, 0xef, 0x3d, 0x04, 0xc2, 0xb6, 0xa8, 0x90, 0xa0, 0xc0, 0xee, 0x15, 0x0d,
	0x78, 0x64, 0xac, 0x1a, 0x8f, 0xe5, 0x19, 0x13, 0xb8, 0x55, 0xea, 0xad, 0xa7, 0xde, 0x2a, 0xf5,
	0x54, 0xa9, 0x5f, 0xa2, 0x1f, 0xa1, 0xc7, 0xde, 0x2b, 0xad, 0xaa, 0x1c, 0xfb, 0x25, 0x5a, 0xcd,
	0x0c, 0x63, 0xc6, 0x29, 0xd2, 0xae, 0x68, 0xf6, 0xe8, 0x87, 0xf7, 0xef, 0xf3, 0x3e, 0xef, 0x3b,
	0xc0, 0x4b, 0x86, 0xe6, 0x01, 0x9e, 0x51, 0x16, 0x27, 0x0b, 0x36, 0xc3, 0x9f, 0xd0, 0x88, 0xc4,
	0x8c, 0xce, 0xe6, 0x11, 0xbd, 0x8a, 0x62, 0xc2, 0x88, 0x55, 0xa5, 0x4b, 0x14, 0xe3, 0xd9, 0x0a,
	0x53, 0x8a, 0x3c, 0xfc, 0x3f, 0xd3, 0xf3, 0x08, 0x43, 0x9e, 0xfc, 0xd1, 0xf9, 0x3e, 0x07, 0xe7,
	0x53, 0x1e, 0xa0, 0x3f, 0x19, 0x73, 0xbf, 0x6e, 0x44, 0x6f, 0x92, 0x18, 0x31, 0x9f, 0x84, 0xd6,
	0xff, 0x21, 0x37, 0x70, 0x6d, 0xa3, 0x63, 0x5c, 0x96, 0xbb, 0xcd, 0xbf, 0xde, 0xbe, 0xac, 0xce,
	0x7c, 0xf7, 0x63, 0xb2, 0xf2, 0x19, 0x5e, 0x45, 0x6c, 0x6b, 0xd5, 0xa1, 0x38, 0xf5, 0x57, 0xf8,
	0x6b, 0xbc, 0xb5, 0x73, 0x1d, 0xe3, 0x32, 0x6f, 0x35, 0xa0, 0x34, 0x0e, 0xd0, 0x16, 0xc7, 0x03,
	0xd7, 0xce, 0x0b, 0xc4, 0x02, 0xe8, 0xc5, 0x18, 0x31, 0xcc, 0x0d, 0xed, 0x13, 0x81, 0xd5, 0xa1,
	0xd8, 0x0f, 0x5d, 0x01, 0x14, 0x94, 0x9b, 0x4a, 0x69, 0x9f, 0x0a, 0xa4, 0x06, 0xa7, 0x23, 0x1c,
	0x26, 0x03, 0xd7, 0x2e, 0x76, 0x8c, 0xcb, 0x02, 0x77, 0x19, 0xa2, 0x39, 0x0e, 0x06, 0xae, 0x5d,
	0x4a, 0x63, 0x6c, 0xa6, 0x68, 0x3e, 0x70, 0xed, 0xb2, 0xf2, 0xb8, 0x41, 0x0c, 0x0d, 0x5c, 0x1b,
	0xc4, 0xb7, 0x09, 0x27, 0xfd, 0xcd, 0xc0, 0xb5, 0x2b, 0x69, 0x61, 0xc8, 0xc3, 0xd3, 0x6d, 0x84,
	0x6d, 0x53, 0x44, 0x6c, 0x83, 0x79, 0x8b, 0xd6, 0xbe, 0x27, 0xb2, 0x0e, 0x5c, 0xbb, 0xca, 0x51,
	0xe7, 0xa7, 0x1c, 0xb4, 0x9f, 0x90, 0xd1, 0x0b, 0xfc, 0xc5, 0x37, 0x1f, 0x88, 0x89, 0x0f, 0xdf,
	0x66, 0x03, 0x4a, 0xd7, 0x0b, 0xd6, 0x23, 0x49, 0xc8, 0x64, 0x8b, 0xff, 0x6a, 0xbc, 0xa6, 0xec,
	0x78, 0x5c, 0xe1, 0x59, 0x57, 0x48, 0x37, 0x61, 0x4c, 0xd8, 0x34, 0x04, 0x39, 0x6f, 0x73, 0xd0,
	0xec, 0x22, 0xea, 0xd3, 0x31, 0xf1, 0x43, 0x46, 0xef, 0x31, 0xd7, 0x99, 0xf5, 0x51, 0xa6, 0x2f,
	0xce, 0x50, 0xfe, 0x10, 0x43, 0x0d, 0x28, 0x4d, 0x92, 0x95, 0x20, 0x73, 0x47, 0x51, 0x1b, 0xcc,
	0xbe, 0x64, 0x57, 0x96, 0x97, 0x4f, 0x3b, 0x96, 0xe8, 0x8e, 0x23, 0x0b, 0x60, 0x8c, 0xe3, 0xeb,
	0xb5, 0xa7, 0x09, 0xc6, 0x02, 0x98, 0xf8, 0x9e, 0xc2, 0xa4, 0x64, 0xce, 0xa0, 0x36, 0x24, 0x5b,
	0x14, 0xbc, 0xa6, 0x38, 0x96, 0x01, 0x25, 0x85, 0x55, 0x28, 0x8c, 0xd7, 0x93, 0x64, 0xb5, 0x23,
	0x90, 0xb7, 0x8f, 0x37, 0xec, 0x06, 0x6d, 0xa5, 0x91, 0x24, 0xee, 0x05, 0x54, 0xa7, 0xcb, 0x18,
	0xe3, 0x14, 0x36, 0x15, 0x3c, 0xc1, 0x6b, 0x1c, 0xa6, 0x70, 0x55, 0xa5, 0x1f, 0x12, 0xcf, 0x0f,
	0x25, 0x56, 0xd3, 0xe3, 0xde, 0xe2, 0x07, 0x89, 0xd6, 0x33, 0x71, 0x53, 0xb8, 0x91, 0x89, 0x9b,
	0xc2, 0x4d, 0x0e, 0x3b, 0x3f, 0x1b, 0xd0, 0xe0, 0x7a, 0x38, 0x86, 0xdf, 0x26, 0x94, 0x6f, 0xf1,
	0x03, 0x95, 0xe1, 0x72, 0xaa, 0xcc, 0xeb, 0x55, 0x42, 0xb1, 0x4e, 0x6f, 0x1b, 0xcc, 0x37, 0x2e,
	0xf9, 0x0a, 0x05, 0x81, 0x44, 0x53, 0x8e, 0x47, 0x88, 0x2d, 0x96, 0x12, 0x2b, 0x1c, 0x1c, 0x8f,
	0x60, 0xd9, 0xf9, 0xdb, 0x80, 0xa6, 0x90, 0x68, 0xa6, 0xc6, 0x77, 0x6c, 0x47, 0x56, 0xfa, 0xb9,
	0x27, 0xd2, 0xcf, 0x2b, 0x59, 0x66, 0xd2, 0x9d, 0xa4, 0x43, 0x45, 0xf3, 0x11, 0xf2, 0xba, 0x2c,
	0xd4, 0x8b, 0x93, 0x78, 0x6f, 0x89, 0x52, 0x5c, 0x8a, 0xe0, 0x33, 0x38, 0xed, 0x25, 0x94, 0x91,
	0x95, 0x5d, 0xec, 0xe4, 0x2f, 0x2b, 0x9f, 0x77, 0xae, 0x32, 0xa7, 0xef, 0x4a, 0x2b, 0x5d, 0x9e,
	0x4b, 0xeb, 0x53, 0x28, 0xbc, 0xf2, 0x37, 0x98, 0x2f, 0xdc, 0x7b, 0x39, 0x38, 0x5f, 0x64, 0x08,
	0xd8, 0x45, 0x81, 0x94, 0x00, 0x21, 0xb8, 0xa9, 0xcf, 0x02, 0xd9, 0x68, 0x99, 0x7f, 0x6a, 0x03,
	0x70, 0x7e, 0x30, 0xe0, 0x05, 0x1f, 0x94, 0x98, 0xcc, 0x73, 0x93, 0x58, 0x87, 0xa2, 0x5a, 0x8a,
	0x93, 0x03, 0x8b, 0x52, 0x50, 0x1b, 0x76, 0x8f, 0x91, 0xcb, 0x57, 0x42, 0xce, 0xf4, 0x97, 0x1c,
	0xb4, 0x76, 0xa2, 0x38, 0x46, 0x79, 0x5a, 0xbc, 0xf4, 0xf6, 0x89, 0x41, 0x72, 0x44, 0xaa, 0xae,
	0x05, 0x95, 0x3e, 0xdd, 0x2f, 0xa6, 0xac, 0xed, 0x1c, 0xea, 0xaf, 0x48, 0x10, 0x90, 0x87, 0xbd,
	0x1a, 0x0b, 0xd9, 0x1f, 0xf6, 0x1e, 0xa7, 0xaa, 0x72, 0xd5, 0x4a, 0xf1, 0x40, 0x7b, 0x25, 0xb5,
	0x5b, 0x77, 0x11, 0x0e, 0xf7, 0xbe, 0x65, 0x65, 0xfa, 0xc6, 0x25, 0xc3, 0xdd, 0x82, 0x80, 0x32,
	0x1d, 0x6d, 0x65, 0x2a, 0xfd, 0x18, 0xb4, 0xc1, 0xe4, 0xb7, 0x7b, 0x48, 0x3c, 0xed, 0x16, 0x38,
	0xdf, 0x1a, 0x60, 0x5f, 0x47, 0x51, 0xb0, 0xfd, 0x0f, 0x54, 0x35, 0xa1, 0xcc, 0x6b, 0x7b, 0xba,
	0xa4, 0x3c, 0xaa, 0xbe, 0xa4, 0x67, 0x50, 0x13, 0x58, 0x17, 0x65, 0xb6, 0xc1, 0xf9, 0xc3, 0x80,
	0x96, 0xd8, 0xd3, 0xe1, 0x51, 0x27, 0xb8, 0x0d, 0xe6, 0xce, 0x5b, 0x3f, 0xc3, 0x1a, 0xa9, 0xf9,
	0x03, 0xa4, 0xa6, 0x3a, 0x9a, 0x12, 0x57, 0x5d, 0xc1, 0xc2, 0x81, 0xa3, 0x21, 0x27, 0xd4, 0x84,
	0xf2, 0x3d, 0x51, 0xd3, 0x2c, 0x2a, 0xe8, 0x6e, 0x9d, 0x3d, 0xc9, 0x5a, 0x21, 0xfb, 0x09, 0x39,
	0xbf, 0xe6, 0xa0, 0x2d, 0xe0, 0x1b, 0xff, 0x28, 0x72, 0xd3, 0x7a, 0xde, 0xe7, 0x8d, 0x79, 0xf7,
	0x9a, 0xb4, 0xa0, 0x32, 0xf4, 0x43, 0x9c, 0x44, 0x4f, 0xfa, 0xe3, 0xcf, 0xa4, 0xde, 0x5f, 0x0b,
	0x2a, 0x1c, 0xca, 0x8a, 0xf0, 0x0c, 0x6a, 0x1c, 0xd4, 0x82, 0xa6, 0x2a, 0xfc, 0x32, 0xc1, 0x34,
	0xa3, 0xc2, 0x36, 0x98, 0x02, 0x53, 0x96, 0x95, 0x0c, 0x3a, 0xf1, 0x25, 0x9a, 0x3e, 0x48, 0x8a,
	0x22, 0xed, 0x41, 0x72, 0xd6, 0xd0, 0x14, 0xc6, 0x47, 0xaa, 0x22, 0x43, 0x51, 0xba, 0xc3, 0x5d,
	0xcc, 0x74, 0xd2, 0x2c, 0x80, 0x2e, 0x66, 0x77, 0x19, 0x41, 0xfe, 0x68, 0x40, 0x7d, 0x44, 0xbd,
	0x67, 0x4d, 0x3b, 0xa2, 0x9e, 0x9e, 0xb6, 0x05, 0x95, 0xc9, 0x96, 0xa6, 0xe0, 0x89, 0x32, 0x7b,
	0x1d, 0x4e, 0x30, 0xe3, 0x57, 0xb6, 0xa0, 0x2e, 0xe1, 0xee, 0x5b, 0xde, 0xb4, 0xef, 0x0c, 0x38,
	0xeb, 0x8b, 0x3f, 0xc2, 0x3d, 0xe2, 0x87, 0xcf, 0x57, 0xa0, 0xb8, 0x64, 0x3c, 0xa4, 0x5e, 0xe3,
	0x39, 0xd4, 0xfb, 0x9b, 0xc5, 0x12, 0x85, 0x1e, 0xce, 0xf0, 0xd3, 0x35, 0x7f, 0x7b, 0xbc, 0x30,
	0x7e, 0x7f, 0xbc, 0x30, 0xfe, 0x7c, 0xbc, 0x30, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x23, 0x75,
	0x44, 0x41, 0xa8, 0x0b, 0x00, 0x00,
}

func (m *TableESPortsBpsDuration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableESPortsBpsDuration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.TimeKey != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.TimeKey))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.PlayerId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.CreateTime))
	}
	if m.EndTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.EndTime))
	}
	if m.Duration != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.Duration))
	}
	if m.MenuId != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.MenuId))
	}
	if m.LabelId != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.LabelId))
	}
	if m.ExTabId != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.ExTabId))
	}
	if m.DataId != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.DataId))
	}
	if m.ExId != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.ExId))
	}
	if m.PageType != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.PageType))
	}
	if m.NavigationId != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.NavigationId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableESPortsBpsClick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableESPortsBpsClick) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.TimeKey != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.TimeKey))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.PlayerId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.CreateTime))
	}
	if m.MenuId != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.MenuId))
	}
	if m.LabelId != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.LabelId))
	}
	if m.ExTabId != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.ExTabId))
	}
	if m.DataId != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.DataId))
	}
	if m.ExId != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.ExId))
	}
	if m.PageType != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.PageType))
	}
	if m.ActCount != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.ActCount))
	}
	if m.NavigationId != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.NavigationId))
	}
	if m.DataType != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.DataType))
	}
	if m.ButtonId != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.ButtonId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BasisPointsReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BasisPointsReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreateTime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.CreateTime))
	}
	if m.SumClick != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.SumClick))
	}
	if m.EsClickCount != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.EsClickCount))
	}
	if m.EsClick != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.EsClick))
	}
	if m.PerAvgTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.PerAvgTime))
	}
	if m.SigAvgTime != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.SigAvgTime))
	}
	if m.LoyalUserCount != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.LoyalUserCount))
	}
	if m.PvSum != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.PvSum))
	}
	if m.NextDayCount != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.NextDayCount))
	}
	if m.ThreeDayCount != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.ThreeDayCount))
	}
	if m.SevenDayCount != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.SevenDayCount))
	}
	if m.LoginCount != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.LoginCount))
	}
	if m.NextNewCount != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.NextNewCount))
	}
	if m.ThreeNewCount != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.ThreeNewCount))
	}
	if m.SevenNewCount != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.SevenNewCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MenuPointsReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MenuPointsReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreateTime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.CreateTime))
	}
	if m.NewsCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.NewsCount))
	}
	if m.AmuseCount != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.AmuseCount))
	}
	if m.VdoHallCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.VdoHallCount))
	}
	if m.MatchCount != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.MatchCount))
	}
	if m.EsClickCount != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.EsClickCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LabelPointsReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelPointsReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.CreateTime))
	}
	if m.MenuId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.MenuId))
	}
	if m.EsClickCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.EsClickCount))
	}
	if m.LabMagBtnCount != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.LabMagBtnCount))
	}
	if m.LabChaBtnCount != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.LabChaBtnCount))
	}
	if len(m.Custom) > 0 {
		for _, msg := range m.Custom {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintTableStructESportsBps(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Fixed) > 0 {
		for _, msg := range m.Fixed {
			dAtA[i] = 0x42
			i++
			i = encodeVarintTableStructESportsBps(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LabelPointsstruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelPointsstruct) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.Id))
	}
	if m.Title != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.Count != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NewsAmusePointsReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewsAmusePointsReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.CreateTime))
	}
	if m.MenuId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.MenuId))
	}
	if m.AvgTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.AvgTime))
	}
	if m.SigAvgTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.SigAvgTime))
	}
	if m.ReadSum != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.ReadSum))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *VdoHallPointsReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VdoHallPointsReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreateTime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.CreateTime))
	}
	if m.ReadSum != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.ReadSum))
	}
	if m.ClickSum != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.ClickSum))
	}
	if m.EsUserCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.EsUserCount))
	}
	if m.FollowHallCount != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.FollowHallCount))
	}
	if m.FollowUserCount != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.FollowUserCount))
	}
	if m.AvgTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.AvgTime))
	}
	if m.SigAvgTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.SigAvgTime))
	}
	if m.OpenUserCount != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.OpenUserCount))
	}
	if m.VdoLsCount != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.VdoLsCount))
	}
	if m.MyFollowCount != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.MyFollowCount))
	}
	if m.PlayLogCount != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.PlayLogCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ApplyVdoHallPointsReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyVdoHallPointsReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreateTime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.CreateTime))
	}
	if m.OpenCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.OpenCount))
	}
	if m.ApplyCount != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.ApplyCount))
	}
	if m.ApplyBackCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.ApplyBackCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MatchLsPointsReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchLsPointsReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreateTime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.CreateTime))
	}
	if m.MatchLsClick != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.MatchLsClick))
	}
	if m.AvgTime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.AvgTime))
	}
	if m.SigAvgTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.SigAvgTime))
	}
	if m.TodayCount != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.TodayCount))
	}
	if m.MatchCount != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.MatchCount))
	}
	if m.RollCount != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.RollCount))
	}
	if m.OverCount != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.OverCount))
	}
	if m.MatchLsCount != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.MatchLsCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MatchDilPointsReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchDilPointsReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreateTime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.CreateTime))
	}
	if m.MatchClick != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.MatchClick))
	}
	if m.EsClickCount != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.EsClickCount))
	}
	if m.AvgTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.AvgTime))
	}
	if m.SigAvgTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.SigAvgTime))
	}
	if m.LineupCount != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.LineupCount))
	}
	if m.DataCount != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.DataCount))
	}
	if m.DataAvgTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.DataAvgTime))
	}
	if m.DataSigAvgTime != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.DataSigAvgTime))
	}
	if m.GuessCount != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.GuessCount))
	}
	if m.GuessAvgTime != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.GuessAvgTime))
	}
	if m.GuessSigTime != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.GuessSigTime))
	}
	if m.MatchDilCount != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.MatchDilCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GuessPointsReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuessPointsReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreateTime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.CreateTime))
	}
	if m.EsClickCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.EsClickCount))
	}
	if m.BetCount != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.BetCount))
	}
	if m.BetOkCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.BetOkCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MsgPointsReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPointsReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreateTime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.CreateTime))
	}
	if m.EsClickCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.EsClickCount))
	}
	if m.MsgCount != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.MsgCount))
	}
	if m.SysMsgCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.SysMsgCount))
	}
	if m.UnSettle != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.UnSettle))
	}
	if m.Settle != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.Settle))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EsportCoinPointsReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EsportCoinPointsReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreateTime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.CreateTime))
	}
	if m.EsClickCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.EsClickCount))
	}
	if m.EsCoinCount != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.EsCoinCount))
	}
	if m.ExchangeOkCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESportsBps(dAtA, i, uint64(*m.ExchangeOkCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTableStructESportsBps(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TableESPortsBpsDuration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStructESportsBps(uint64(l))
	}
	if m.TimeKey != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.TimeKey))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.PlayerId))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.CreateTime))
	}
	if m.EndTime != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.EndTime))
	}
	if m.Duration != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.Duration))
	}
	if m.MenuId != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.MenuId))
	}
	if m.LabelId != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.LabelId))
	}
	if m.ExTabId != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.ExTabId))
	}
	if m.DataId != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.DataId))
	}
	if m.ExId != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.ExId))
	}
	if m.PageType != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.PageType))
	}
	if m.NavigationId != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.NavigationId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableESPortsBpsClick) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStructESportsBps(uint64(l))
	}
	if m.TimeKey != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.TimeKey))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.PlayerId))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.CreateTime))
	}
	if m.MenuId != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.MenuId))
	}
	if m.LabelId != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.LabelId))
	}
	if m.ExTabId != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.ExTabId))
	}
	if m.DataId != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.DataId))
	}
	if m.ExId != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.ExId))
	}
	if m.PageType != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.PageType))
	}
	if m.ActCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.ActCount))
	}
	if m.NavigationId != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.NavigationId))
	}
	if m.DataType != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.DataType))
	}
	if m.ButtonId != nil {
		n += 2 + sovTableStructESportsBps(uint64(*m.ButtonId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BasisPointsReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateTime != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.CreateTime))
	}
	if m.SumClick != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.SumClick))
	}
	if m.EsClickCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.EsClickCount))
	}
	if m.EsClick != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.EsClick))
	}
	if m.PerAvgTime != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.PerAvgTime))
	}
	if m.SigAvgTime != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.SigAvgTime))
	}
	if m.LoyalUserCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.LoyalUserCount))
	}
	if m.PvSum != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.PvSum))
	}
	if m.NextDayCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.NextDayCount))
	}
	if m.ThreeDayCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.ThreeDayCount))
	}
	if m.SevenDayCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.SevenDayCount))
	}
	if m.LoginCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.LoginCount))
	}
	if m.NextNewCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.NextNewCount))
	}
	if m.ThreeNewCount != nil {
		n += 2 + sovTableStructESportsBps(uint64(*m.ThreeNewCount))
	}
	if m.SevenNewCount != nil {
		n += 2 + sovTableStructESportsBps(uint64(*m.SevenNewCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MenuPointsReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateTime != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.CreateTime))
	}
	if m.NewsCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.NewsCount))
	}
	if m.AmuseCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.AmuseCount))
	}
	if m.VdoHallCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.VdoHallCount))
	}
	if m.MatchCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.MatchCount))
	}
	if m.EsClickCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.EsClickCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LabelPointsReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStructESportsBps(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.CreateTime))
	}
	if m.MenuId != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.MenuId))
	}
	if m.EsClickCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.EsClickCount))
	}
	if m.LabMagBtnCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.LabMagBtnCount))
	}
	if m.LabChaBtnCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.LabChaBtnCount))
	}
	if len(m.Custom) > 0 {
		for _, e := range m.Custom {
			l = e.Size()
			n += 1 + l + sovTableStructESportsBps(uint64(l))
		}
	}
	if len(m.Fixed) > 0 {
		for _, e := range m.Fixed {
			l = e.Size()
			n += 1 + l + sovTableStructESportsBps(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LabelPointsstruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.Id))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStructESportsBps(uint64(l))
	}
	if m.Count != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewsAmusePointsReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStructESportsBps(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.CreateTime))
	}
	if m.MenuId != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.MenuId))
	}
	if m.AvgTime != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.AvgTime))
	}
	if m.SigAvgTime != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.SigAvgTime))
	}
	if m.ReadSum != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.ReadSum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VdoHallPointsReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateTime != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.CreateTime))
	}
	if m.ReadSum != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.ReadSum))
	}
	if m.ClickSum != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.ClickSum))
	}
	if m.EsUserCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.EsUserCount))
	}
	if m.FollowHallCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.FollowHallCount))
	}
	if m.FollowUserCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.FollowUserCount))
	}
	if m.AvgTime != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.AvgTime))
	}
	if m.SigAvgTime != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.SigAvgTime))
	}
	if m.OpenUserCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.OpenUserCount))
	}
	if m.VdoLsCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.VdoLsCount))
	}
	if m.MyFollowCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.MyFollowCount))
	}
	if m.PlayLogCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.PlayLogCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplyVdoHallPointsReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateTime != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.CreateTime))
	}
	if m.OpenCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.OpenCount))
	}
	if m.ApplyCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.ApplyCount))
	}
	if m.ApplyBackCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.ApplyBackCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MatchLsPointsReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateTime != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.CreateTime))
	}
	if m.MatchLsClick != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.MatchLsClick))
	}
	if m.AvgTime != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.AvgTime))
	}
	if m.SigAvgTime != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.SigAvgTime))
	}
	if m.TodayCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.TodayCount))
	}
	if m.MatchCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.MatchCount))
	}
	if m.RollCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.RollCount))
	}
	if m.OverCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.OverCount))
	}
	if m.MatchLsCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.MatchLsCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MatchDilPointsReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateTime != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.CreateTime))
	}
	if m.MatchClick != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.MatchClick))
	}
	if m.EsClickCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.EsClickCount))
	}
	if m.AvgTime != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.AvgTime))
	}
	if m.SigAvgTime != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.SigAvgTime))
	}
	if m.LineupCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.LineupCount))
	}
	if m.DataCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.DataCount))
	}
	if m.DataAvgTime != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.DataAvgTime))
	}
	if m.DataSigAvgTime != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.DataSigAvgTime))
	}
	if m.GuessCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.GuessCount))
	}
	if m.GuessAvgTime != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.GuessAvgTime))
	}
	if m.GuessSigTime != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.GuessSigTime))
	}
	if m.MatchDilCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.MatchDilCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuessPointsReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateTime != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.CreateTime))
	}
	if m.EsClickCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.EsClickCount))
	}
	if m.BetCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.BetCount))
	}
	if m.BetOkCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.BetOkCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgPointsReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateTime != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.CreateTime))
	}
	if m.EsClickCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.EsClickCount))
	}
	if m.MsgCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.MsgCount))
	}
	if m.SysMsgCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.SysMsgCount))
	}
	if m.UnSettle != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.UnSettle))
	}
	if m.Settle != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.Settle))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EsportCoinPointsReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateTime != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.CreateTime))
	}
	if m.EsClickCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.EsClickCount))
	}
	if m.EsCoinCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.EsCoinCount))
	}
	if m.ExchangeOkCount != nil {
		n += 1 + sovTableStructESportsBps(uint64(*m.ExchangeOkCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTableStructESportsBps(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTableStructESportsBps(x uint64) (n int) {
	return sovTableStructESportsBps(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TableESPortsBpsDuration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsBps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableESPortsBpsDuration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableESPortsBpsDuration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeKey", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeKey = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Duration = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MenuId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MenuId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LabelId = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExTabId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExTabId = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataId = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExId = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageType = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NavigationId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NavigationId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsBps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableESPortsBpsClick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsBps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableESPortsBpsClick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableESPortsBpsClick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeKey", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeKey = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MenuId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MenuId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LabelId = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExTabId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExTabId = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataId = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExId = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageType = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActCount = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NavigationId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NavigationId = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataType = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ButtonId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsBps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BasisPointsReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsBps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BasisPointsReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BasisPointsReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumClick", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumClick = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EsClickCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EsClickCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EsClick", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EsClick = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerAvgTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PerAvgTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigAvgTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SigAvgTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoyalUserCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LoyalUserCount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PvSum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PvSum = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextDayCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NextDayCount = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreeDayCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThreeDayCount = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SevenDayCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SevenDayCount = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LoginCount = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextNewCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NextNewCount = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreeNewCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThreeNewCount = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SevenNewCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SevenNewCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsBps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MenuPointsReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsBps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MenuPointsReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MenuPointsReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewsCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NewsCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmuseCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AmuseCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VdoHallCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VdoHallCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MatchCount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EsClickCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EsClickCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsBps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelPointsReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsBps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelPointsReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelPointsReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MenuId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MenuId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EsClickCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EsClickCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabMagBtnCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LabMagBtnCount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabChaBtnCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LabChaBtnCount = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Custom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Custom = append(m.Custom, &LabelPointsstruct{})
			if err := m.Custom[len(m.Custom)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fixed = append(m.Fixed, &LabelPointsstruct{})
			if err := m.Fixed[len(m.Fixed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsBps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelPointsstruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsBps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelPointsstruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelPointsstruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsBps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewsAmusePointsReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsBps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewsAmusePointsReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewsAmusePointsReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MenuId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MenuId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AvgTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigAvgTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SigAvgTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadSum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReadSum = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsBps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VdoHallPointsReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsBps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VdoHallPointsReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VdoHallPointsReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadSum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReadSum = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClickSum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClickSum = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EsUserCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EsUserCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowHallCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FollowHallCount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowUserCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FollowUserCount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AvgTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigAvgTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SigAvgTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenUserCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OpenUserCount = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VdoLsCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VdoLsCount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyFollowCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MyFollowCount = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayLogCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayLogCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsBps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyVdoHallPointsReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsBps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyVdoHallPointsReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyVdoHallPointsReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OpenCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ApplyCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyBackCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ApplyBackCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsBps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchLsPointsReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsBps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchLsPointsReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchLsPointsReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchLsClick", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MatchLsClick = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AvgTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigAvgTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SigAvgTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TodayCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TodayCount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MatchCount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RollCount = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OverCount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchLsCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MatchLsCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsBps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchDilPointsReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsBps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchDilPointsReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchDilPointsReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchClick", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MatchClick = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EsClickCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EsClickCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AvgTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigAvgTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SigAvgTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineupCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LineupCount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataCount = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataAvgTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataAvgTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSigAvgTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataSigAvgTime = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuessCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GuessCount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuessAvgTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GuessAvgTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuessSigTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GuessSigTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchDilCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MatchDilCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsBps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuessPointsReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsBps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuessPointsReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuessPointsReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EsClickCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EsClickCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BetCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetOkCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BetOkCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsBps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPointsReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsBps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPointsReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPointsReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EsClickCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EsClickCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MsgCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SysMsgCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SysMsgCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnSettle", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnSettle = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settle", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Settle = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsBps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EsportCoinPointsReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsBps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EsportCoinPointsReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EsportCoinPointsReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EsClickCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EsClickCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EsCoinCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EsCoinCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeOkCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExchangeOkCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsBps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsBps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTableStructESportsBps(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTableStructESportsBps
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTableStructESportsBps
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTableStructESportsBps
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTableStructESportsBps
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTableStructESportsBps
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTableStructESportsBps(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTableStructESportsBps
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTableStructESportsBps = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTableStructESportsBps   = fmt.Errorf("proto: integer overflow")
)
