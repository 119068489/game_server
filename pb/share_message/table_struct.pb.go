// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: table_struct.proto

package share_message

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	io "io"
	math "math"

	github_com_akqp2019_protobuf_proto "github.com/akqp2019/protobuf/proto"
	proto "github.com/akqp2019/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//服务器表 server_info
type ServerInfo struct {
	Sid                  *int32   `protobuf:"varint,1,opt,name=Sid" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Type                 *int32   `protobuf:"varint,3,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	ExternalIp           *string  `protobuf:"bytes,4,opt,name=ExternalIp" json:"ExternalIp,omitempty" bson:"ExternalIp,omitempty"`
	InternalIP           *string  `protobuf:"bytes,20,opt,name=InternalIP" json:"InternalIP,omitempty" bson:"InternalIP,omitempty"`
	ClientWSPort         *int32   `protobuf:"varint,5,opt,name=ClientWSPort" json:"ClientWSPort,omitempty" bson:"ClientWSPort,omitempty"`
	ClientTCPPort        *int32   `protobuf:"varint,6,opt,name=ClientTCPPort" json:"ClientTCPPort,omitempty" bson:"ClientTCPPort,omitempty"`
	ClientApiPort        *int32   `protobuf:"varint,7,opt,name=ClientApiPort" json:"ClientApiPort,omitempty" bson:"ClientApiPort,omitempty"`
	ServerApiPort        *int32   `protobuf:"varint,8,opt,name=ServerApiPort" json:"ServerApiPort,omitempty" bson:"ServerApiPort,omitempty"`
	WebApiPort           *int32   `protobuf:"varint,9,opt,name=WebApiPort" json:"WebApiPort,omitempty" bson:"WebApiPort,omitempty"`
	BackStageApiPort     *int32   `protobuf:"varint,10,opt,name=BackStageApiPort" json:"BackStageApiPort,omitempty" bson:"BackStageApiPort,omitempty"`
	State                *int32   `protobuf:"varint,11,opt,name=State" json:"State,omitempty" bson:"State,omitempty"`
	ConNum               *int32   `protobuf:"varint,12,opt,name=ConNum" json:"ConNum,omitempty" bson:"ConNum,omitempty"`
	Version              *string  `protobuf:"bytes,13,opt,name=Version" json:"Version,omitempty" bson:"Version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ServerInfo) Reset()         { *m = ServerInfo{} }
func (m *ServerInfo) String() string { return proto.CompactTextString(m) }
func (*ServerInfo) ProtoMessage()    {}
func (*ServerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{0}
}
func (m *ServerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerInfo.Merge(m, src)
}
func (m *ServerInfo) XXX_Size() int {
	return m.Size()
}
func (m *ServerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ServerInfo proto.InternalMessageInfo

func (m *ServerInfo) GetSid() int32 {
	if m != nil && m.Sid != nil {
		return *m.Sid
	}
	return 0
}

func (m *ServerInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ServerInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *ServerInfo) GetExternalIp() string {
	if m != nil && m.ExternalIp != nil {
		return *m.ExternalIp
	}
	return ""
}

func (m *ServerInfo) GetInternalIP() string {
	if m != nil && m.InternalIP != nil {
		return *m.InternalIP
	}
	return ""
}

func (m *ServerInfo) GetClientWSPort() int32 {
	if m != nil && m.ClientWSPort != nil {
		return *m.ClientWSPort
	}
	return 0
}

func (m *ServerInfo) GetClientTCPPort() int32 {
	if m != nil && m.ClientTCPPort != nil {
		return *m.ClientTCPPort
	}
	return 0
}

func (m *ServerInfo) GetClientApiPort() int32 {
	if m != nil && m.ClientApiPort != nil {
		return *m.ClientApiPort
	}
	return 0
}

func (m *ServerInfo) GetServerApiPort() int32 {
	if m != nil && m.ServerApiPort != nil {
		return *m.ServerApiPort
	}
	return 0
}

func (m *ServerInfo) GetWebApiPort() int32 {
	if m != nil && m.WebApiPort != nil {
		return *m.WebApiPort
	}
	return 0
}

func (m *ServerInfo) GetBackStageApiPort() int32 {
	if m != nil && m.BackStageApiPort != nil {
		return *m.BackStageApiPort
	}
	return 0
}

func (m *ServerInfo) GetState() int32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

func (m *ServerInfo) GetConNum() int32 {
	if m != nil && m.ConNum != nil {
		return *m.ConNum
	}
	return 0
}

func (m *ServerInfo) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

//用户金币报表 user_gold_report
type UserGoldReport struct {
	LogId                *int64   `protobuf:"varint,1,req,name=LogId" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Vip                  *int32   `protobuf:"varint,3,opt,name=Vip" json:"Vip,omitempty" bson:"Vip,omitempty"`
	ParentId             *int64   `protobuf:"varint,4,opt,name=ParentId" json:"ParentId,omitempty" bson:"ParentId,omitempty"`
	Gold                 *int64   `protobuf:"varint,5,opt,name=Gold" json:"Gold,omitempty" bson:"Gold,omitempty"`
	Profit               *int64   `protobuf:"varint,6,opt,name=Profit" json:"Profit,omitempty" bson:"Profit,omitempty"`
	Recharge             *int64   `protobuf:"varint,7,opt,name=Recharge" json:"Recharge,omitempty" bson:"Recharge,omitempty"`
	RechargeCount        *int32   `protobuf:"varint,8,opt,name=RechargeCount" json:"RechargeCount,omitempty" bson:"RechargeCount,omitempty"`
	RechargeReturn       *int64   `protobuf:"varint,9,opt,name=RechargeReturn" json:"RechargeReturn,omitempty" bson:"RechargeReturn,omitempty"`
	TxAmount             *int64   `protobuf:"varint,10,opt,name=TxAmount" json:"TxAmount,omitempty" bson:"TxAmount,omitempty"`
	CellScore            *int64   `protobuf:"varint,11,opt,name=CellScore" json:"CellScore,omitempty" bson:"CellScore,omitempty"`
	RealWin              *int64   `protobuf:"varint,12,opt,name=RealWin" json:"RealWin,omitempty" bson:"RealWin,omitempty"`
	Revenue              *int64   `protobuf:"varint,13,opt,name=Revenue" json:"Revenue,omitempty" bson:"Revenue,omitempty"`
	ReturnReward         *int64   `protobuf:"varint,14,opt,name=ReturnReward" json:"ReturnReward,omitempty" bson:"ReturnReward,omitempty"`
	CreateTime           *int64   `protobuf:"varint,15,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	GameCount            *int32   `protobuf:"varint,16,opt,name=GameCount" json:"GameCount,omitempty" bson:"GameCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *UserGoldReport) Reset()         { *m = UserGoldReport{} }
func (m *UserGoldReport) String() string { return proto.CompactTextString(m) }
func (*UserGoldReport) ProtoMessage()    {}
func (*UserGoldReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{1}
}
func (m *UserGoldReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGoldReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGoldReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserGoldReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGoldReport.Merge(m, src)
}
func (m *UserGoldReport) XXX_Size() int {
	return m.Size()
}
func (m *UserGoldReport) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGoldReport.DiscardUnknown(m)
}

var xxx_messageInfo_UserGoldReport proto.InternalMessageInfo

func (m *UserGoldReport) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *UserGoldReport) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *UserGoldReport) GetVip() int32 {
	if m != nil && m.Vip != nil {
		return *m.Vip
	}
	return 0
}

func (m *UserGoldReport) GetParentId() int64 {
	if m != nil && m.ParentId != nil {
		return *m.ParentId
	}
	return 0
}

func (m *UserGoldReport) GetGold() int64 {
	if m != nil && m.Gold != nil {
		return *m.Gold
	}
	return 0
}

func (m *UserGoldReport) GetProfit() int64 {
	if m != nil && m.Profit != nil {
		return *m.Profit
	}
	return 0
}

func (m *UserGoldReport) GetRecharge() int64 {
	if m != nil && m.Recharge != nil {
		return *m.Recharge
	}
	return 0
}

func (m *UserGoldReport) GetRechargeCount() int32 {
	if m != nil && m.RechargeCount != nil {
		return *m.RechargeCount
	}
	return 0
}

func (m *UserGoldReport) GetRechargeReturn() int64 {
	if m != nil && m.RechargeReturn != nil {
		return *m.RechargeReturn
	}
	return 0
}

func (m *UserGoldReport) GetTxAmount() int64 {
	if m != nil && m.TxAmount != nil {
		return *m.TxAmount
	}
	return 0
}

func (m *UserGoldReport) GetCellScore() int64 {
	if m != nil && m.CellScore != nil {
		return *m.CellScore
	}
	return 0
}

func (m *UserGoldReport) GetRealWin() int64 {
	if m != nil && m.RealWin != nil {
		return *m.RealWin
	}
	return 0
}

func (m *UserGoldReport) GetRevenue() int64 {
	if m != nil && m.Revenue != nil {
		return *m.Revenue
	}
	return 0
}

func (m *UserGoldReport) GetReturnReward() int64 {
	if m != nil && m.ReturnReward != nil {
		return *m.ReturnReward
	}
	return 0
}

func (m *UserGoldReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *UserGoldReport) GetGameCount() int32 {
	if m != nil && m.GameCount != nil {
		return *m.GameCount
	}
	return 0
}

//报表进度管理表 report_job
type ReportJob struct {
	Report               *string  `protobuf:"bytes,1,opt,name=Report" json:"_id,omitempty" bson:"_id,omitempty"`
	Time                 *int64   `protobuf:"varint,2,opt,name=Time" json:"Time,omitempty" bson:"Time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ReportJob) Reset()         { *m = ReportJob{} }
func (m *ReportJob) String() string { return proto.CompactTextString(m) }
func (*ReportJob) ProtoMessage()    {}
func (*ReportJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{2}
}
func (m *ReportJob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportJob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportJob.Merge(m, src)
}
func (m *ReportJob) XXX_Size() int {
	return m.Size()
}
func (m *ReportJob) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportJob.DiscardUnknown(m)
}

var xxx_messageInfo_ReportJob proto.InternalMessageInfo

func (m *ReportJob) GetReport() string {
	if m != nil && m.Report != nil {
		return *m.Report
	}
	return ""
}

func (m *ReportJob) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

// 角色权限管理 role_power
type RolePower struct {
	Id                   *int32   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	RoleName             *string  `protobuf:"bytes,2,opt,name=RoleName" json:"RoleName,omitempty" bson:"RoleName,omitempty"`
	MenuIds              []string `protobuf:"bytes,10,rep,name=MenuIds" json:"MenuIds,omitempty" bson:"MenuIds,omitempty"`
	RoleType             *int32   `protobuf:"varint,11,opt,name=RoleType" json:"RoleType,omitempty" bson:"RoleType,omitempty"`
	Note                 *string  `protobuf:"bytes,12,opt,name=Note" json:"Note,omitempty" bson:"Note,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RolePower) Reset()         { *m = RolePower{} }
func (m *RolePower) String() string { return proto.CompactTextString(m) }
func (*RolePower) ProtoMessage()    {}
func (*RolePower) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{3}
}
func (m *RolePower) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RolePower) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RolePower.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RolePower) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RolePower.Merge(m, src)
}
func (m *RolePower) XXX_Size() int {
	return m.Size()
}
func (m *RolePower) XXX_DiscardUnknown() {
	xxx_messageInfo_RolePower.DiscardUnknown(m)
}

var xxx_messageInfo_RolePower proto.InternalMessageInfo

func (m *RolePower) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RolePower) GetRoleName() string {
	if m != nil && m.RoleName != nil {
		return *m.RoleName
	}
	return ""
}

func (m *RolePower) GetMenuIds() []string {
	if m != nil {
		return m.MenuIds
	}
	return nil
}

func (m *RolePower) GetRoleType() int32 {
	if m != nil && m.RoleType != nil {
		return *m.RoleType
	}
	return 0
}

func (m *RolePower) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

//后台用户表 manager
type Manager struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Account              *string  `protobuf:"bytes,2,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	Site                 *string  `protobuf:"bytes,3,opt,name=Site" json:"Site,omitempty" bson:"Site,omitempty"`
	Password             *string  `protobuf:"bytes,4,opt,name=Password" json:"Password,omitempty" bson:"Password,omitempty"`
	Role                 *int32   `protobuf:"varint,5,opt,name=Role" json:"Role,omitempty" bson:"Role,omitempty"`
	RealName             *string  `protobuf:"bytes,6,opt,name=RealName" json:"RealName,omitempty" bson:"RealName,omitempty"`
	Phone                *string  `protobuf:"bytes,7,opt,name=Phone" json:"Phone,omitempty" bson:"Phone,omitempty"`
	Status               *int32   `protobuf:"varint,8,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	IsOnlie              *bool    `protobuf:"varint,9,opt,name=IsOnlie" json:"IsOnlie,omitempty" bson:"IsOnlie,omitempty"`
	CreateTime           *int64   `protobuf:"varint,10,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	LoginCount           *int32   `protobuf:"varint,11,opt,name=LoginCount" json:"LoginCount,omitempty" bson:"LoginCount,omitempty"`
	PrevLoginTime        *int64   `protobuf:"varint,12,opt,name=PrevLoginTime" json:"PrevLoginTime,omitempty" bson:"PrevLoginTime,omitempty"`
	PrevLoginIP          *string  `protobuf:"bytes,13,opt,name=PrevLoginIP" json:"PrevLoginIP,omitempty" bson:"PrevLoginIP,omitempty"`
	LastLoginTime        *int64   `protobuf:"varint,14,opt,name=LastLoginTime" json:"LastLoginTime,omitempty" bson:"LastLoginTime,omitempty"`
	LastLoginIP          *string  `protobuf:"bytes,15,opt,name=LastLoginIP" json:"LastLoginIP,omitempty" bson:"LastLoginIP,omitempty"`
	Salt                 *string  `protobuf:"bytes,16,opt,name=Salt" json:"Salt,omitempty" bson:"Salt,omitempty"`
	RoleType             *int32   `protobuf:"varint,17,opt,name=RoleType" json:"RoleType,omitempty" bson:"RoleType,omitempty"`
	BindIp               []string `protobuf:"bytes,18,rep,name=BindIp" json:"BindIp,omitempty" bson:"BindIp,omitempty"`
	IsGoogleVer          *bool    `protobuf:"varint,19,opt,name=IsGoogleVer" json:"IsGoogleVer,omitempty" bson:"IsGoogleVer,omitempty"`
	GoogleSecret         *string  `protobuf:"bytes,20,opt,name=GoogleSecret" json:"GoogleSecret,omitempty" bson:"GoogleSecret,omitempty"`
	Types                *int32   `protobuf:"varint,21,opt,name=Types" json:"Types,omitempty" bson:"Types,omitempty"`
	IsLoginH5            *bool    `protobuf:"varint,22,opt,name=IsLoginH5" json:"IsLoginH5,omitempty" bson:"IsLoginH5,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *Manager) Reset()         { *m = Manager{} }
func (m *Manager) String() string { return proto.CompactTextString(m) }
func (*Manager) ProtoMessage()    {}
func (*Manager) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{4}
}
func (m *Manager) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Manager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Manager.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Manager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Manager.Merge(m, src)
}
func (m *Manager) XXX_Size() int {
	return m.Size()
}
func (m *Manager) XXX_DiscardUnknown() {
	xxx_messageInfo_Manager.DiscardUnknown(m)
}

var xxx_messageInfo_Manager proto.InternalMessageInfo

func (m *Manager) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Manager) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *Manager) GetSite() string {
	if m != nil && m.Site != nil {
		return *m.Site
	}
	return ""
}

func (m *Manager) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *Manager) GetRole() int32 {
	if m != nil && m.Role != nil {
		return *m.Role
	}
	return 0
}

func (m *Manager) GetRealName() string {
	if m != nil && m.RealName != nil {
		return *m.RealName
	}
	return ""
}

func (m *Manager) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *Manager) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *Manager) GetIsOnlie() bool {
	if m != nil && m.IsOnlie != nil {
		return *m.IsOnlie
	}
	return false
}

func (m *Manager) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *Manager) GetLoginCount() int32 {
	if m != nil && m.LoginCount != nil {
		return *m.LoginCount
	}
	return 0
}

func (m *Manager) GetPrevLoginTime() int64 {
	if m != nil && m.PrevLoginTime != nil {
		return *m.PrevLoginTime
	}
	return 0
}

func (m *Manager) GetPrevLoginIP() string {
	if m != nil && m.PrevLoginIP != nil {
		return *m.PrevLoginIP
	}
	return ""
}

func (m *Manager) GetLastLoginTime() int64 {
	if m != nil && m.LastLoginTime != nil {
		return *m.LastLoginTime
	}
	return 0
}

func (m *Manager) GetLastLoginIP() string {
	if m != nil && m.LastLoginIP != nil {
		return *m.LastLoginIP
	}
	return ""
}

func (m *Manager) GetSalt() string {
	if m != nil && m.Salt != nil {
		return *m.Salt
	}
	return ""
}

func (m *Manager) GetRoleType() int32 {
	if m != nil && m.RoleType != nil {
		return *m.RoleType
	}
	return 0
}

func (m *Manager) GetBindIp() []string {
	if m != nil {
		return m.BindIp
	}
	return nil
}

func (m *Manager) GetIsGoogleVer() bool {
	if m != nil && m.IsGoogleVer != nil {
		return *m.IsGoogleVer
	}
	return false
}

func (m *Manager) GetGoogleSecret() string {
	if m != nil && m.GoogleSecret != nil {
		return *m.GoogleSecret
	}
	return ""
}

func (m *Manager) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *Manager) GetIsLoginH5() bool {
	if m != nil && m.IsLoginH5 != nil {
		return *m.IsLoginH5
	}
	return false
}

//后台客服用户类型
type ManagerTypes struct {
	Id                   *int32   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Status               *int32   `protobuf:"varint,3,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ManagerTypes) Reset()         { *m = ManagerTypes{} }
func (m *ManagerTypes) String() string { return proto.CompactTextString(m) }
func (*ManagerTypes) ProtoMessage()    {}
func (*ManagerTypes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{5}
}
func (m *ManagerTypes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManagerTypes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManagerTypes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ManagerTypes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagerTypes.Merge(m, src)
}
func (m *ManagerTypes) XXX_Size() int {
	return m.Size()
}
func (m *ManagerTypes) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagerTypes.DiscardUnknown(m)
}

var xxx_messageInfo_ManagerTypes proto.InternalMessageInfo

func (m *ManagerTypes) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ManagerTypes) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ManagerTypes) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

//后台操作记录 表名：backstage_opt_log
type BackstageOptLog struct {
	Account      *string `protobuf:"bytes,1,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	Ip           *string `protobuf:"bytes,2,opt,name=Ip" json:"Ip,omitempty" bson:"Ip,omitempty"`
	TargetUserId []int64 `protobuf:"varint,3,rep,name=TargetUserId" json:"TargetUserId,omitempty" bson:"TargetUserId,omitempty"`
	Remarks      *string `protobuf:"bytes,4,opt,name=Remarks" json:"Remarks,omitempty" bson:"Remarks,omitempty"`
	OptType      *string `protobuf:"bytes,5,opt,name=OptType" json:"OptType,omitempty" bson:"OptType,omitempty"`
	Site         *string `protobuf:"bytes,6,opt,name=Site" json:"Site,omitempty" bson:"Site,omitempty"`
	CreateTime   *int64  `protobuf:"varint,7,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	//以下是扩展字段
	F1                   *string  `protobuf:"bytes,10,opt,name=F1" json:"F1,omitempty" bson:"F1,omitempty"`
	F2                   *string  `protobuf:"bytes,11,opt,name=F2" json:"F2,omitempty" bson:"F2,omitempty"`
	F3                   *string  `protobuf:"bytes,12,opt,name=F3" json:"F3,omitempty" bson:"F3,omitempty"`
	F4                   *string  `protobuf:"bytes,13,opt,name=F4" json:"F4,omitempty" bson:"F4,omitempty"`
	F5                   *string  `protobuf:"bytes,14,opt,name=F5" json:"F5,omitempty" bson:"F5,omitempty"`
	T1                   *int64   `protobuf:"varint,15,opt,name=T1" json:"T1,omitempty" bson:"T1,omitempty"`
	T2                   *int64   `protobuf:"varint,16,opt,name=T2" json:"T2,omitempty" bson:"T2,omitempty"`
	T3                   *int32   `protobuf:"varint,17,opt,name=T3" json:"T3,omitempty" bson:"T3,omitempty"`
	T4                   *int32   `protobuf:"varint,18,opt,name=T4" json:"T4,omitempty" bson:"T4,omitempty"`
	T5                   []int32  `protobuf:"varint,19,rep,name=T5" json:"T5,omitempty" bson:"T5,omitempty"`
	T6                   []int64  `protobuf:"varint,20,rep,name=T6" json:"T6,omitempty" bson:"T6,omitempty"`
	F6                   []string `protobuf:"bytes,21,rep,name=F6" json:"F6,omitempty" bson:"F6,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *BackstageOptLog) Reset()         { *m = BackstageOptLog{} }
func (m *BackstageOptLog) String() string { return proto.CompactTextString(m) }
func (*BackstageOptLog) ProtoMessage()    {}
func (*BackstageOptLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{6}
}
func (m *BackstageOptLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackstageOptLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackstageOptLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackstageOptLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackstageOptLog.Merge(m, src)
}
func (m *BackstageOptLog) XXX_Size() int {
	return m.Size()
}
func (m *BackstageOptLog) XXX_DiscardUnknown() {
	xxx_messageInfo_BackstageOptLog.DiscardUnknown(m)
}

var xxx_messageInfo_BackstageOptLog proto.InternalMessageInfo

func (m *BackstageOptLog) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *BackstageOptLog) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *BackstageOptLog) GetTargetUserId() []int64 {
	if m != nil {
		return m.TargetUserId
	}
	return nil
}

func (m *BackstageOptLog) GetRemarks() string {
	if m != nil && m.Remarks != nil {
		return *m.Remarks
	}
	return ""
}

func (m *BackstageOptLog) GetOptType() string {
	if m != nil && m.OptType != nil {
		return *m.OptType
	}
	return ""
}

func (m *BackstageOptLog) GetSite() string {
	if m != nil && m.Site != nil {
		return *m.Site
	}
	return ""
}

func (m *BackstageOptLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *BackstageOptLog) GetF1() string {
	if m != nil && m.F1 != nil {
		return *m.F1
	}
	return ""
}

func (m *BackstageOptLog) GetF2() string {
	if m != nil && m.F2 != nil {
		return *m.F2
	}
	return ""
}

func (m *BackstageOptLog) GetF3() string {
	if m != nil && m.F3 != nil {
		return *m.F3
	}
	return ""
}

func (m *BackstageOptLog) GetF4() string {
	if m != nil && m.F4 != nil {
		return *m.F4
	}
	return ""
}

func (m *BackstageOptLog) GetF5() string {
	if m != nil && m.F5 != nil {
		return *m.F5
	}
	return ""
}

func (m *BackstageOptLog) GetT1() int64 {
	if m != nil && m.T1 != nil {
		return *m.T1
	}
	return 0
}

func (m *BackstageOptLog) GetT2() int64 {
	if m != nil && m.T2 != nil {
		return *m.T2
	}
	return 0
}

func (m *BackstageOptLog) GetT3() int32 {
	if m != nil && m.T3 != nil {
		return *m.T3
	}
	return 0
}

func (m *BackstageOptLog) GetT4() int32 {
	if m != nil && m.T4 != nil {
		return *m.T4
	}
	return 0
}

func (m *BackstageOptLog) GetT5() []int32 {
	if m != nil {
		return m.T5
	}
	return nil
}

func (m *BackstageOptLog) GetT6() []int64 {
	if m != nil {
		return m.T6
	}
	return nil
}

func (m *BackstageOptLog) GetF6() []string {
	if m != nil {
		return m.F6
	}
	return nil
}

//冻结IP信息  freeze_ip
type FreezeIpList struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	LoginIP              *string  `protobuf:"bytes,2,opt,name=LoginIP" json:"LoginIP,omitempty" bson:"LoginIP,omitempty"`
	LoginAuth            *bool    `protobuf:"varint,3,opt,name=LoginAuth" json:"LoginAuth,omitempty" bson:"LoginAuth,omitempty"`
	RegisterAuth         *bool    `protobuf:"varint,4,opt,name=RegisterAuth" json:"RegisterAuth,omitempty" bson:"RegisterAuth,omitempty"`
	Remark               *string  `protobuf:"bytes,5,opt,name=Remark" json:"Remark,omitempty" bson:"Remark,omitempty"`
	HandleTime           *int64   `protobuf:"varint,6,opt,name=HandleTime" json:"HandleTime,omitempty" bson:"HandleTime,omitempty"`
	Operator             *string  `protobuf:"bytes,7,opt,name=Operator" json:"Operator,omitempty" bson:"Operator,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *FreezeIpList) Reset()         { *m = FreezeIpList{} }
func (m *FreezeIpList) String() string { return proto.CompactTextString(m) }
func (*FreezeIpList) ProtoMessage()    {}
func (*FreezeIpList) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{7}
}
func (m *FreezeIpList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FreezeIpList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FreezeIpList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FreezeIpList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FreezeIpList.Merge(m, src)
}
func (m *FreezeIpList) XXX_Size() int {
	return m.Size()
}
func (m *FreezeIpList) XXX_DiscardUnknown() {
	xxx_messageInfo_FreezeIpList.DiscardUnknown(m)
}

var xxx_messageInfo_FreezeIpList proto.InternalMessageInfo

func (m *FreezeIpList) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FreezeIpList) GetLoginIP() string {
	if m != nil && m.LoginIP != nil {
		return *m.LoginIP
	}
	return ""
}

func (m *FreezeIpList) GetLoginAuth() bool {
	if m != nil && m.LoginAuth != nil {
		return *m.LoginAuth
	}
	return false
}

func (m *FreezeIpList) GetRegisterAuth() bool {
	if m != nil && m.RegisterAuth != nil {
		return *m.RegisterAuth
	}
	return false
}

func (m *FreezeIpList) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *FreezeIpList) GetHandleTime() int64 {
	if m != nil && m.HandleTime != nil {
		return *m.HandleTime
	}
	return 0
}

func (m *FreezeIpList) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

type FreezeAccountList struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Account              *string  `protobuf:"bytes,2,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	LoginAuth            *bool    `protobuf:"varint,3,opt,name=LoginAuth" json:"LoginAuth,omitempty" bson:"LoginAuth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *FreezeAccountList) Reset()         { *m = FreezeAccountList{} }
func (m *FreezeAccountList) String() string { return proto.CompactTextString(m) }
func (*FreezeAccountList) ProtoMessage()    {}
func (*FreezeAccountList) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{8}
}
func (m *FreezeAccountList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FreezeAccountList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FreezeAccountList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FreezeAccountList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FreezeAccountList.Merge(m, src)
}
func (m *FreezeAccountList) XXX_Size() int {
	return m.Size()
}
func (m *FreezeAccountList) XXX_DiscardUnknown() {
	xxx_messageInfo_FreezeAccountList.DiscardUnknown(m)
}

var xxx_messageInfo_FreezeAccountList proto.InternalMessageInfo

func (m *FreezeAccountList) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FreezeAccountList) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *FreezeAccountList) GetLoginAuth() bool {
	if m != nil && m.LoginAuth != nil {
		return *m.LoginAuth
	}
	return false
}

//登陆信息 log_login_info
type LogLoginInfo struct {
	Id                   *int64   `protobuf:"varint,1,req,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Account              *string  `protobuf:"bytes,2,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	PlayerId             *int64   `protobuf:"varint,3,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	State                *int32   `protobuf:"varint,4,opt,name=State" json:"State,omitempty" bson:"State,omitempty"`
	PF                   *string  `protobuf:"bytes,5,opt,name=PF" json:"PF,omitempty" bson:"PF,omitempty"`
	LoginTime            *int64   `protobuf:"varint,6,opt,name=LoginTime" json:"LoginTime,omitempty" bson:"LoginTime,omitempty"`
	RegTime              *int64   `protobuf:"varint,7,opt,name=RegTime" json:"RegTime,omitempty" bson:"RegTime,omitempty"`
	LoginIP              *string  `protobuf:"bytes,8,opt,name=LoginIP" json:"LoginIP,omitempty" bson:"LoginIP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *LogLoginInfo) Reset()         { *m = LogLoginInfo{} }
func (m *LogLoginInfo) String() string { return proto.CompactTextString(m) }
func (*LogLoginInfo) ProtoMessage()    {}
func (*LogLoginInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{9}
}
func (m *LogLoginInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogLoginInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogLoginInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogLoginInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogLoginInfo.Merge(m, src)
}
func (m *LogLoginInfo) XXX_Size() int {
	return m.Size()
}
func (m *LogLoginInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LogLoginInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LogLoginInfo proto.InternalMessageInfo

func (m *LogLoginInfo) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LogLoginInfo) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *LogLoginInfo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogLoginInfo) GetState() int32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

func (m *LogLoginInfo) GetPF() string {
	if m != nil && m.PF != nil {
		return *m.PF
	}
	return ""
}

func (m *LogLoginInfo) GetLoginTime() int64 {
	if m != nil && m.LoginTime != nil {
		return *m.LoginTime
	}
	return 0
}

func (m *LogLoginInfo) GetRegTime() int64 {
	if m != nil && m.RegTime != nil {
		return *m.RegTime
	}
	return 0
}

func (m *LogLoginInfo) GetLoginIP() string {
	if m != nil && m.LoginIP != nil {
		return *m.LoginIP
	}
	return ""
}

//现金变化源类型表 ，表名:source_type
type SourceType struct {
	Key                  *int32   `protobuf:"varint,1,req,name=Key" json:"_id,omitempty" bson:"_id,omitempty"`
	Value                *string  `protobuf:"bytes,2,opt,name=Value" json:"Value,omitempty" bson:"Value,omitempty"`
	Type                 *int32   `protobuf:"varint,3,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	Channel              *int32   `protobuf:"varint,4,opt,name=Channel" json:"Channel,omitempty" bson:"Channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *SourceType) Reset()         { *m = SourceType{} }
func (m *SourceType) String() string { return proto.CompactTextString(m) }
func (*SourceType) ProtoMessage()    {}
func (*SourceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{10}
}
func (m *SourceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SourceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SourceType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SourceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SourceType.Merge(m, src)
}
func (m *SourceType) XXX_Size() int {
	return m.Size()
}
func (m *SourceType) XXX_DiscardUnknown() {
	xxx_messageInfo_SourceType.DiscardUnknown(m)
}

var xxx_messageInfo_SourceType proto.InternalMessageInfo

func (m *SourceType) GetKey() int32 {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return 0
}

func (m *SourceType) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *SourceType) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *SourceType) GetChannel() int32 {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return 0
}

//零钱流水记录,所有零钱变化都写到连钱log中 表名：gold_change_log
type GoldChangeLog struct {
	LogId                *int64   `protobuf:"varint,1,req,name=LogId" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Account              *string  `protobuf:"bytes,3,opt,name=Account" json:"-" bson:"-"`
	ChangeGold           *int64   `protobuf:"varint,4,opt,name=ChangeGold" json:"ChangeGold,omitempty" bson:"ChangeGold,omitempty"`
	SourceType           *int32   `protobuf:"varint,5,opt,name=SourceType" json:"SourceType,omitempty" bson:"SourceType,omitempty"`
	SourceTypeName       *string  `protobuf:"bytes,6,opt,name=SourceTypeName" json:"-" bson:"-"`
	PayType              *int32   `protobuf:"varint,7,opt,name=PayType" json:"PayType,omitempty" bson:"PayType,omitempty"`
	CurGold              *int64   `protobuf:"varint,10,opt,name=CurGold" json:"CurGold,omitempty" bson:"CurGold,omitempty"`
	Gold                 *int64   `protobuf:"varint,11,opt,name=Gold" json:"Gold,omitempty" bson:"Gold,omitempty"`
	Note                 *string  `protobuf:"bytes,12,opt,name=Note" json:"Note,omitempty" bson:"Note,omitempty"`
	CreateTime           *int64   `protobuf:"varint,13,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GoldChangeLog) Reset()         { *m = GoldChangeLog{} }
func (m *GoldChangeLog) String() string { return proto.CompactTextString(m) }
func (*GoldChangeLog) ProtoMessage()    {}
func (*GoldChangeLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{11}
}
func (m *GoldChangeLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoldChangeLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoldChangeLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoldChangeLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoldChangeLog.Merge(m, src)
}
func (m *GoldChangeLog) XXX_Size() int {
	return m.Size()
}
func (m *GoldChangeLog) XXX_DiscardUnknown() {
	xxx_messageInfo_GoldChangeLog.DiscardUnknown(m)
}

var xxx_messageInfo_GoldChangeLog proto.InternalMessageInfo

func (m *GoldChangeLog) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *GoldChangeLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *GoldChangeLog) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *GoldChangeLog) GetChangeGold() int64 {
	if m != nil && m.ChangeGold != nil {
		return *m.ChangeGold
	}
	return 0
}

func (m *GoldChangeLog) GetSourceType() int32 {
	if m != nil && m.SourceType != nil {
		return *m.SourceType
	}
	return 0
}

func (m *GoldChangeLog) GetSourceTypeName() string {
	if m != nil && m.SourceTypeName != nil {
		return *m.SourceTypeName
	}
	return ""
}

func (m *GoldChangeLog) GetPayType() int32 {
	if m != nil && m.PayType != nil {
		return *m.PayType
	}
	return 0
}

func (m *GoldChangeLog) GetCurGold() int64 {
	if m != nil && m.CurGold != nil {
		return *m.CurGold
	}
	return 0
}

func (m *GoldChangeLog) GetGold() int64 {
	if m != nil && m.Gold != nil {
		return *m.Gold
	}
	return 0
}

func (m *GoldChangeLog) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

func (m *GoldChangeLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

//硬币流水记录,所有硬币变化都写到硬币log中 表名：coin_change_log
type CoinChangeLog struct {
	LogId                *int64   `protobuf:"varint,1,req,name=LogId" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Account              *string  `protobuf:"bytes,3,opt,name=Account" json:"-" bson:"-"`
	ChangeCoin           *int64   `protobuf:"varint,4,opt,name=ChangeCoin" json:"ChangeCoin,omitempty" bson:"ChangeCoin,omitempty"`
	SourceType           *int32   `protobuf:"varint,5,opt,name=SourceType" json:"SourceType,omitempty" bson:"SourceType,omitempty"`
	SourceTypeName       *string  `protobuf:"bytes,6,opt,name=SourceTypeName" json:"-" bson:"-"`
	PayType              *int32   `protobuf:"varint,7,opt,name=PayType" json:"PayType,omitempty" bson:"PayType,omitempty"`
	CurCoin              *int64   `protobuf:"varint,10,opt,name=CurCoin" json:"CurCoin,omitempty" bson:"CurCoin,omitempty"`
	Coin                 *int64   `protobuf:"varint,11,opt,name=Coin" json:"Coin,omitempty" bson:"Coin,omitempty"`
	Note                 *string  `protobuf:"bytes,12,opt,name=Note" json:"Note,omitempty" bson:"Note,omitempty"`
	CreateTime           *int64   `protobuf:"varint,13,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	CurBCoin             *int64   `protobuf:"varint,14,opt,name=CurBCoin" json:"CurBCoin,omitempty" bson:"CurBCoin,omitempty"`
	BCoin                *int64   `protobuf:"varint,15,opt,name=BCoin" json:"BCoin,omitempty" bson:"BCoin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *CoinChangeLog) Reset()         { *m = CoinChangeLog{} }
func (m *CoinChangeLog) String() string { return proto.CompactTextString(m) }
func (*CoinChangeLog) ProtoMessage()    {}
func (*CoinChangeLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{12}
}
func (m *CoinChangeLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinChangeLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinChangeLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinChangeLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinChangeLog.Merge(m, src)
}
func (m *CoinChangeLog) XXX_Size() int {
	return m.Size()
}
func (m *CoinChangeLog) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinChangeLog.DiscardUnknown(m)
}

var xxx_messageInfo_CoinChangeLog proto.InternalMessageInfo

func (m *CoinChangeLog) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *CoinChangeLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *CoinChangeLog) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *CoinChangeLog) GetChangeCoin() int64 {
	if m != nil && m.ChangeCoin != nil {
		return *m.ChangeCoin
	}
	return 0
}

func (m *CoinChangeLog) GetSourceType() int32 {
	if m != nil && m.SourceType != nil {
		return *m.SourceType
	}
	return 0
}

func (m *CoinChangeLog) GetSourceTypeName() string {
	if m != nil && m.SourceTypeName != nil {
		return *m.SourceTypeName
	}
	return ""
}

func (m *CoinChangeLog) GetPayType() int32 {
	if m != nil && m.PayType != nil {
		return *m.PayType
	}
	return 0
}

func (m *CoinChangeLog) GetCurCoin() int64 {
	if m != nil && m.CurCoin != nil {
		return *m.CurCoin
	}
	return 0
}

func (m *CoinChangeLog) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *CoinChangeLog) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

func (m *CoinChangeLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *CoinChangeLog) GetCurBCoin() int64 {
	if m != nil && m.CurBCoin != nil {
		return *m.CurBCoin
	}
	return 0
}

func (m *CoinChangeLog) GetBCoin() int64 {
	if m != nil && m.BCoin != nil {
		return *m.BCoin
	}
	return 0
}

//电竞币流水记录,所有电竞币变化都写到硬币log中 表名：log_esport_change
type ESportCoinChangeLog struct {
	LogId                *int64   `protobuf:"varint,1,req,name=LogId" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Account              *string  `protobuf:"bytes,3,opt,name=Account" json:"-" bson:"-"`
	ChangeESportCoin     *int64   `protobuf:"varint,4,opt,name=ChangeESportCoin" json:"ChangeESportCoin,omitempty" bson:"ChangeESportCoin,omitempty"`
	SourceType           *int32   `protobuf:"varint,5,opt,name=SourceType" json:"SourceType,omitempty" bson:"SourceType,omitempty"`
	SourceTypeName       *string  `protobuf:"bytes,6,opt,name=SourceTypeName" json:"-" bson:"-"`
	PayType              *int32   `protobuf:"varint,7,opt,name=PayType" json:"PayType,omitempty" bson:"PayType,omitempty"`
	CurESportCoin        *int64   `protobuf:"varint,10,opt,name=CurESportCoin" json:"CurESportCoin,omitempty" bson:"CurESportCoin,omitempty"`
	ESportCoin           *int64   `protobuf:"varint,11,opt,name=ESportCoin" json:"ESportCoin,omitempty" bson:"ESportCoin,omitempty"`
	Note                 *string  `protobuf:"bytes,12,opt,name=Note" json:"Note,omitempty" bson:"Note,omitempty"`
	CreateTime           *int64   `protobuf:"varint,13,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESportCoinChangeLog) Reset()         { *m = ESportCoinChangeLog{} }
func (m *ESportCoinChangeLog) String() string { return proto.CompactTextString(m) }
func (*ESportCoinChangeLog) ProtoMessage()    {}
func (*ESportCoinChangeLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{13}
}
func (m *ESportCoinChangeLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportCoinChangeLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportCoinChangeLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportCoinChangeLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportCoinChangeLog.Merge(m, src)
}
func (m *ESportCoinChangeLog) XXX_Size() int {
	return m.Size()
}
func (m *ESportCoinChangeLog) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportCoinChangeLog.DiscardUnknown(m)
}

var xxx_messageInfo_ESportCoinChangeLog proto.InternalMessageInfo

func (m *ESportCoinChangeLog) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *ESportCoinChangeLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *ESportCoinChangeLog) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *ESportCoinChangeLog) GetChangeESportCoin() int64 {
	if m != nil && m.ChangeESportCoin != nil {
		return *m.ChangeESportCoin
	}
	return 0
}

func (m *ESportCoinChangeLog) GetSourceType() int32 {
	if m != nil && m.SourceType != nil {
		return *m.SourceType
	}
	return 0
}

func (m *ESportCoinChangeLog) GetSourceTypeName() string {
	if m != nil && m.SourceTypeName != nil {
		return *m.SourceTypeName
	}
	return ""
}

func (m *ESportCoinChangeLog) GetPayType() int32 {
	if m != nil && m.PayType != nil {
		return *m.PayType
	}
	return 0
}

func (m *ESportCoinChangeLog) GetCurESportCoin() int64 {
	if m != nil && m.CurESportCoin != nil {
		return *m.CurESportCoin
	}
	return 0
}

func (m *ESportCoinChangeLog) GetESportCoin() int64 {
	if m != nil && m.ESportCoin != nil {
		return *m.ESportCoin
	}
	return 0
}

func (m *ESportCoinChangeLog) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

func (m *ESportCoinChangeLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

type GoldExtendLog struct {
	RedPacketId          *int64   `protobuf:"varint,1,opt,name=RedPacketId" json:"RedPacketId,omitempty" bson:"RedPacketId,omitempty"`
	OrderId              *string  `protobuf:"bytes,2,opt,name=OrderId" json:"OrderId,omitempty" bson:"OrderId,omitempty"`
	MerchantId           *string  `protobuf:"bytes,3,opt,name=MerchantId" json:"MerchantId,omitempty" bson:"MerchantId,omitempty"`
	BankName             *string  `protobuf:"bytes,4,opt,name=BankName" json:"BankName,omitempty" bson:"BankName,omitempty"`
	HeadIcon             *string  `protobuf:"bytes,5,opt,name=HeadIcon" json:"HeadIcon,omitempty" bson:"HeadIcon,omitempty"`
	PayType              *int32   `protobuf:"varint,6,opt,name=PayType" json:"PayType,omitempty" bson:"PayType,omitempty"`
	TransferText         *string  `protobuf:"bytes,7,opt,name=TransferText" json:"TransferText,omitempty" bson:"TransferText,omitempty"`
	ServiceCharge        *int64   `protobuf:"varint,8,opt,name=ServiceCharge" json:"ServiceCharge,omitempty" bson:"ServiceCharge,omitempty"`
	Title                *string  `protobuf:"bytes,9,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	Gold                 *int64   `protobuf:"varint,10,opt,name=Gold" json:"Gold,omitempty" bson:"Gold,omitempty"`
	Channel              *int32   `protobuf:"varint,11,opt,name=Channel" json:"Channel,omitempty" bson:"Channel,omitempty"`
	Account              *string  `protobuf:"bytes,12,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	PlayerId             *int64   `protobuf:"varint,13,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GoldExtendLog) Reset()         { *m = GoldExtendLog{} }
func (m *GoldExtendLog) String() string { return proto.CompactTextString(m) }
func (*GoldExtendLog) ProtoMessage()    {}
func (*GoldExtendLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{14}
}
func (m *GoldExtendLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoldExtendLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoldExtendLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoldExtendLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoldExtendLog.Merge(m, src)
}
func (m *GoldExtendLog) XXX_Size() int {
	return m.Size()
}
func (m *GoldExtendLog) XXX_DiscardUnknown() {
	xxx_messageInfo_GoldExtendLog.DiscardUnknown(m)
}

var xxx_messageInfo_GoldExtendLog proto.InternalMessageInfo

func (m *GoldExtendLog) GetRedPacketId() int64 {
	if m != nil && m.RedPacketId != nil {
		return *m.RedPacketId
	}
	return 0
}

func (m *GoldExtendLog) GetOrderId() string {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return ""
}

func (m *GoldExtendLog) GetMerchantId() string {
	if m != nil && m.MerchantId != nil {
		return *m.MerchantId
	}
	return ""
}

func (m *GoldExtendLog) GetBankName() string {
	if m != nil && m.BankName != nil {
		return *m.BankName
	}
	return ""
}

func (m *GoldExtendLog) GetHeadIcon() string {
	if m != nil && m.HeadIcon != nil {
		return *m.HeadIcon
	}
	return ""
}

func (m *GoldExtendLog) GetPayType() int32 {
	if m != nil && m.PayType != nil {
		return *m.PayType
	}
	return 0
}

func (m *GoldExtendLog) GetTransferText() string {
	if m != nil && m.TransferText != nil {
		return *m.TransferText
	}
	return ""
}

func (m *GoldExtendLog) GetServiceCharge() int64 {
	if m != nil && m.ServiceCharge != nil {
		return *m.ServiceCharge
	}
	return 0
}

func (m *GoldExtendLog) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *GoldExtendLog) GetGold() int64 {
	if m != nil && m.Gold != nil {
		return *m.Gold
	}
	return 0
}

func (m *GoldExtendLog) GetChannel() int32 {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return 0
}

func (m *GoldExtendLog) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *GoldExtendLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

////金币日志充值扩展
type RechargeExtend struct {
	Channeltype          *int32   `protobuf:"varint,2,opt,name=Channeltype" json:"Channeltype,omitempty" bson:"Channeltype,omitempty"`
	PayChannel           *int32   `protobuf:"varint,3,opt,name=PayChannel" json:"PayChannel,omitempty" bson:"PayChannel,omitempty"`
	PayType              *int32   `protobuf:"varint,4,opt,name=PayType" json:"PayType,omitempty" bson:"PayType,omitempty"`
	CreateIP             *string  `protobuf:"bytes,5,opt,name=CreateIP" json:"CreateIP,omitempty" bson:"CreateIP,omitempty"`
	OrderId              *string  `protobuf:"bytes,6,opt,name=OrderId" json:"OrderId,omitempty" bson:"OrderId,omitempty"`
	Amount               *int64   `protobuf:"varint,7,opt,name=Amount" json:"Amount,omitempty" bson:"Amount,omitempty"`
	Operator             *string  `protobuf:"bytes,8,opt,name=Operator" json:"Operator,omitempty" bson:"Operator,omitempty"`
	Account              *string  `protobuf:"bytes,12,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	PlayerId             *int64   `protobuf:"varint,13,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RechargeExtend) Reset()         { *m = RechargeExtend{} }
func (m *RechargeExtend) String() string { return proto.CompactTextString(m) }
func (*RechargeExtend) ProtoMessage()    {}
func (*RechargeExtend) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{15}
}
func (m *RechargeExtend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RechargeExtend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RechargeExtend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RechargeExtend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RechargeExtend.Merge(m, src)
}
func (m *RechargeExtend) XXX_Size() int {
	return m.Size()
}
func (m *RechargeExtend) XXX_DiscardUnknown() {
	xxx_messageInfo_RechargeExtend.DiscardUnknown(m)
}

var xxx_messageInfo_RechargeExtend proto.InternalMessageInfo

func (m *RechargeExtend) GetChanneltype() int32 {
	if m != nil && m.Channeltype != nil {
		return *m.Channeltype
	}
	return 0
}

func (m *RechargeExtend) GetPayChannel() int32 {
	if m != nil && m.PayChannel != nil {
		return *m.PayChannel
	}
	return 0
}

func (m *RechargeExtend) GetPayType() int32 {
	if m != nil && m.PayType != nil {
		return *m.PayType
	}
	return 0
}

func (m *RechargeExtend) GetCreateIP() string {
	if m != nil && m.CreateIP != nil {
		return *m.CreateIP
	}
	return ""
}

func (m *RechargeExtend) GetOrderId() string {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return ""
}

func (m *RechargeExtend) GetAmount() int64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *RechargeExtend) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *RechargeExtend) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *RechargeExtend) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

//订单,表名：order
type Order struct {
	OrderId     *string `protobuf:"bytes,1,req,name=OrderId" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId    *int64  `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Account     *string `protobuf:"bytes,3,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	NickName    *string `protobuf:"bytes,4,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	RealName    *string `protobuf:"bytes,5,opt,name=RealName" json:"RealName,omitempty" bson:"RealName,omitempty"`
	SourceType  *int32  `protobuf:"varint,6,opt,name=SourceType" json:"SourceType,omitempty" bson:"SourceType,omitempty"`
	ChangeType  *int32  `protobuf:"varint,7,opt,name=ChangeType" json:"ChangeType,omitempty" bson:"ChangeType,omitempty"`
	Channeltype *int32  `protobuf:"varint,8,opt,name=Channeltype" json:"Channeltype,omitempty" bson:"Channeltype,omitempty"`
	CurGold     *int64  `protobuf:"varint,9,opt,name=CurGold" json:"CurGold,omitempty" bson:"CurGold,omitempty"`
	ChangeGold  *int64  `protobuf:"varint,10,opt,name=ChangeGold" json:"ChangeGold,omitempty" bson:"ChangeGold,omitempty"`
	Gold        *int64  `protobuf:"varint,12,opt,name=Gold" json:"Gold,omitempty" bson:"Gold,omitempty"`
	ExternalNo  *string `protobuf:"bytes,13,opt,name=ExternalNo" json:"ExternalNo,omitempty" bson:"ExternalNo,omitempty"`
	PayChannel  *int32  `protobuf:"varint,14,opt,name=PayChannel" json:"PayChannel,omitempty" bson:"PayChannel,omitempty"`
	PayType     *int32  `protobuf:"varint,15,opt,name=PayType" json:"PayType,omitempty" bson:"PayType,omitempty"`
	Amount      *int64  `protobuf:"varint,18,opt,name=Amount" json:"Amount,omitempty" bson:"Amount,omitempty"`
	CreateTime  *int64  `protobuf:"varint,19,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	CreateIP    *string `protobuf:"bytes,20,opt,name=CreateIP" json:"CreateIP,omitempty" bson:"CreateIP,omitempty"`
	Status      *int32  `protobuf:"varint,21,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	PayStatus   *int32  `protobuf:"varint,22,opt,name=PayStatus" json:"PayStatus,omitempty" bson:"PayStatus,omitempty"`
	Note        *string `protobuf:"bytes,23,opt,name=Note" json:"Note,omitempty" bson:"Note,omitempty"`
	Tax         *int64  `protobuf:"varint,25,opt,name=Tax" json:"Tax,omitempty" bson:"Tax,omitempty"`
	Operator    *string `protobuf:"bytes,27,opt,name=Operator" json:"Operator,omitempty" bson:"Operator,omitempty"`
	OverTime    *int64  `protobuf:"varint,26,opt,name=OverTime" json:"OverTime,omitempty" bson:"OverTime,omitempty"`
	BankInfo    *string `protobuf:"bytes,28,opt,name=BankInfo" json:"BankInfo,omitempty" bson:"BankInfo,omitempty"`
	PayWay      *int32  `protobuf:"varint,29,opt,name=PayWay" json:"PayWay,omitempty" bson:"PayWay,omitempty"`
	PayTargetId *int64  `protobuf:"varint,30,opt,name=PayTargetId" json:"PayTargetId,omitempty" bson:"PayTargetId,omitempty"`
	PayOpenId   *string `protobuf:"bytes,31,opt,name=PayOpenId" json:"PayOpenId,omitempty" bson:"PayOpenId,omitempty"`
	TotalCount  *int32  `protobuf:"varint,32,opt,name=TotalCount" json:"TotalCount,omitempty" bson:"TotalCount,omitempty"`
	Content     *string `protobuf:"bytes,33,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	ExtendValue *string `protobuf:"bytes,34,opt,name=ExtendValue" json:"ExtendValue,omitempty" bson:"ExtendValue,omitempty"`
	//提现信息
	BankCode    *string `protobuf:"bytes,35,opt,name=BankCode" json:"BankCode,omitempty" bson:"BankCode,omitempty"`
	AccountType *string `protobuf:"bytes,36,opt,name=AccountType" json:"AccountType,omitempty" bson:"AccountType,omitempty"`
	AccountNo   *string `protobuf:"bytes,37,opt,name=AccountNo" json:"AccountNo,omitempty" bson:"AccountNo,omitempty"`
	AccountName *string `protobuf:"bytes,38,opt,name=AccountName" json:"AccountName,omitempty" bson:"AccountName,omitempty"`
	AccountProp *string `protobuf:"bytes,39,opt,name=AccountProp" json:"AccountProp,omitempty" bson:"AccountProp,omitempty"`
	OrderDate   *string `protobuf:"bytes,40,opt,name=OrderDate" json:"OrderDate,omitempty" bson:"OrderDate,omitempty"`
	IsCheck     *string `protobuf:"bytes,41,opt,name=IsCheck" json:"IsCheck,omitempty" bson:"IsCheck,omitempty"`
	PlatformTax *int64  `protobuf:"varint,42,opt,name=PlatformTax" json:"PlatformTax,omitempty" bson:"PlatformTax,omitempty"`
	RealTax     *int64  `protobuf:"varint,43,opt,name=RealTax" json:"RealTax,omitempty" bson:"RealTax,omitempty"`
	OrderType   *int32  `protobuf:"varint,44,opt,name=OrderType" json:"OrderType,omitempty" bson:"OrderType,omitempty"`
	// 许愿池
	PlayerReason         *string  `protobuf:"bytes,45,opt,name=PlayerReason" json:"-" bson:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{16}
}
func (m *Order) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Order.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return m.Size()
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetOrderId() string {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return ""
}

func (m *Order) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *Order) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *Order) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *Order) GetRealName() string {
	if m != nil && m.RealName != nil {
		return *m.RealName
	}
	return ""
}

func (m *Order) GetSourceType() int32 {
	if m != nil && m.SourceType != nil {
		return *m.SourceType
	}
	return 0
}

func (m *Order) GetChangeType() int32 {
	if m != nil && m.ChangeType != nil {
		return *m.ChangeType
	}
	return 0
}

func (m *Order) GetChanneltype() int32 {
	if m != nil && m.Channeltype != nil {
		return *m.Channeltype
	}
	return 0
}

func (m *Order) GetCurGold() int64 {
	if m != nil && m.CurGold != nil {
		return *m.CurGold
	}
	return 0
}

func (m *Order) GetChangeGold() int64 {
	if m != nil && m.ChangeGold != nil {
		return *m.ChangeGold
	}
	return 0
}

func (m *Order) GetGold() int64 {
	if m != nil && m.Gold != nil {
		return *m.Gold
	}
	return 0
}

func (m *Order) GetExternalNo() string {
	if m != nil && m.ExternalNo != nil {
		return *m.ExternalNo
	}
	return ""
}

func (m *Order) GetPayChannel() int32 {
	if m != nil && m.PayChannel != nil {
		return *m.PayChannel
	}
	return 0
}

func (m *Order) GetPayType() int32 {
	if m != nil && m.PayType != nil {
		return *m.PayType
	}
	return 0
}

func (m *Order) GetAmount() int64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *Order) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *Order) GetCreateIP() string {
	if m != nil && m.CreateIP != nil {
		return *m.CreateIP
	}
	return ""
}

func (m *Order) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *Order) GetPayStatus() int32 {
	if m != nil && m.PayStatus != nil {
		return *m.PayStatus
	}
	return 0
}

func (m *Order) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

func (m *Order) GetTax() int64 {
	if m != nil && m.Tax != nil {
		return *m.Tax
	}
	return 0
}

func (m *Order) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *Order) GetOverTime() int64 {
	if m != nil && m.OverTime != nil {
		return *m.OverTime
	}
	return 0
}

func (m *Order) GetBankInfo() string {
	if m != nil && m.BankInfo != nil {
		return *m.BankInfo
	}
	return ""
}

func (m *Order) GetPayWay() int32 {
	if m != nil && m.PayWay != nil {
		return *m.PayWay
	}
	return 0
}

func (m *Order) GetPayTargetId() int64 {
	if m != nil && m.PayTargetId != nil {
		return *m.PayTargetId
	}
	return 0
}

func (m *Order) GetPayOpenId() string {
	if m != nil && m.PayOpenId != nil {
		return *m.PayOpenId
	}
	return ""
}

func (m *Order) GetTotalCount() int32 {
	if m != nil && m.TotalCount != nil {
		return *m.TotalCount
	}
	return 0
}

func (m *Order) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *Order) GetExtendValue() string {
	if m != nil && m.ExtendValue != nil {
		return *m.ExtendValue
	}
	return ""
}

func (m *Order) GetBankCode() string {
	if m != nil && m.BankCode != nil {
		return *m.BankCode
	}
	return ""
}

func (m *Order) GetAccountType() string {
	if m != nil && m.AccountType != nil {
		return *m.AccountType
	}
	return ""
}

func (m *Order) GetAccountNo() string {
	if m != nil && m.AccountNo != nil {
		return *m.AccountNo
	}
	return ""
}

func (m *Order) GetAccountName() string {
	if m != nil && m.AccountName != nil {
		return *m.AccountName
	}
	return ""
}

func (m *Order) GetAccountProp() string {
	if m != nil && m.AccountProp != nil {
		return *m.AccountProp
	}
	return ""
}

func (m *Order) GetOrderDate() string {
	if m != nil && m.OrderDate != nil {
		return *m.OrderDate
	}
	return ""
}

func (m *Order) GetIsCheck() string {
	if m != nil && m.IsCheck != nil {
		return *m.IsCheck
	}
	return ""
}

func (m *Order) GetPlatformTax() int64 {
	if m != nil && m.PlatformTax != nil {
		return *m.PlatformTax
	}
	return 0
}

func (m *Order) GetRealTax() int64 {
	if m != nil && m.RealTax != nil {
		return *m.RealTax
	}
	return 0
}

func (m *Order) GetOrderType() int32 {
	if m != nil && m.OrderType != nil {
		return *m.OrderType
	}
	return 0
}

func (m *Order) GetPlayerReason() string {
	if m != nil && m.PlayerReason != nil {
		return *m.PlayerReason
	}
	return ""
}

///////////////////////////////////////////聊天平台///////////////////////////////
//游戏群组数据 team_data
type TeamData struct {
	Id                   *int64          `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string         `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	HeadUrl              *string         `protobuf:"bytes,3,opt,name=HeadUrl" json:"HeadUrl,omitempty" bson:"HeadUrl,omitempty"`
	GongGao              *string         `protobuf:"bytes,4,opt,name=GongGao" json:"GongGao,omitempty" bson:"GongGao,omitempty"`
	Owner                *int64          `protobuf:"varint,5,opt,name=Owner" json:"Owner,omitempty" bson:"Owner,omitempty"`
	QRCode               *string         `protobuf:"bytes,6,opt,name=QRCode" json:"QRCode,omitempty" bson:"QRCode,omitempty"`
	CreateTime           *int64          `protobuf:"varint,7,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	LastTalkTime         *int64          `protobuf:"varint,8,opt,name=LastTalkTime" json:"LastTalkTime,omitempty" bson:"LastTalkTime,omitempty"`
	MaxMember            *int32          `protobuf:"varint,9,opt,name=MaxMember" json:"MaxMember,omitempty" bson:"MaxMember,omitempty"`
	MemberList           []int64         `protobuf:"varint,10,rep,name=MemberList" json:"MemberList,omitempty" bson:"MemberList,omitempty"`
	ManagerList          []int64         `protobuf:"varint,11,rep,name=ManagerList" json:"ManagerList,omitempty" bson:"ManagerList,omitempty"`
	TeamChat             *string         `protobuf:"bytes,12,opt,name=TeamChat" json:"TeamChat,omitempty" bson:"TeamChat,omitempty"`
	MessageSetting       *MessageSetting `protobuf:"bytes,13,opt,name=MessageSetting" json:"MessageSetting,omitempty" bson:"MessageSetting,omitempty"`
	OutTeam              []*OutTeamInfo  `protobuf:"bytes,14,rep,name=OutTeam" json:"OutTeam,omitempty" bson:"OutTeam,omitempty"`
	Invite               []*InviteInfo   `protobuf:"bytes,15,rep,name=Invite" json:"Invite,omitempty" bson:"Invite,omitempty"`
	Status               *int32          `protobuf:"varint,16,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	IsRecommend          *bool           `protobuf:"varint,17,opt,name=IsRecommend" json:"IsRecommend,omitempty" bson:"IsRecommend,omitempty"`
	DissolveTime         *int64          `protobuf:"varint,18,opt,name=DissolveTime" json:"DissolveTime,omitempty" bson:"DissolveTime,omitempty"`
	OwnerNickName        *string         `protobuf:"bytes,19,opt,name=OwnerNickName" json:"-" bson:"-"`
	OwnerAccount         *string         `protobuf:"bytes,22,opt,name=OwnerAccount" json:"-" bson:"-"`
	RefreshTime          *int64          `protobuf:"varint,20,opt,name=RefreshTime" json:"RefreshTime,omitempty" bson:"RefreshTime,omitempty"`
	AdminID              *int64          `protobuf:"varint,21,opt,name=AdminID" json:"AdminID,omitempty" bson:"AdminID,omitempty"`
	CreateName           *string         `protobuf:"bytes,23,opt,name=CreateName" json:"CreateName,omitempty" bson:"CreateName,omitempty"`
	OperatorInfo         []*OperatorInfo `protobuf:"bytes,24,rep,name=OperatorInfo" json:"OperatorInfo,omitempty" bson:"OperatorInfo,omitempty"`
	Level                *int32          `protobuf:"varint,25,opt,name=Level" json:"Level,omitempty" bson:"Level,omitempty"`
	LogMaxId             *int64          `protobuf:"varint,26,opt,name=LogMaxId" json:"LogMaxId,omitempty" bson:"LogMaxId,omitempty"`
	WelcomeWord          *string         `protobuf:"bytes,27,opt,name=WelcomeWord" json:"WelcomeWord,omitempty" bson:"WelcomeWord,omitempty"`
	SessionId            *string         `protobuf:"bytes,28,opt,name=SessionId" json:"SessionId,omitempty" bson:"SessionId,omitempty"`
	Topic                *string         `protobuf:"bytes,29,opt,name=Topic" json:"Topic,omitempty" bson:"Topic,omitempty"`
	TopicDesc            *string         `protobuf:"bytes,30,opt,name=TopicDesc" json:"TopicDesc,omitempty" bson:"TopicDesc,omitempty"`
	TopicHeadUrls        []string        `protobuf:"bytes,31,rep,name=TopicHeadUrls" json:"-" bson:"-"`
	LastDynamicTime      *int64          `protobuf:"varint,32,opt,name=LastDynamicTime" json:"LastDynamicTime,omitempty" bson:"LastDynamicTime,omitempty"`
	DynamicId            *int64          `protobuf:"varint,33,opt,name=DynamicId" json:"DynamicId,omitempty" bson:"DynamicId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-" bson:"-"`
	XXX_unrecognized     []byte          `json:"-" bson:"-"`
	XXX_sizecache        int32           `json:"-" bson:"-"`
}

func (m *TeamData) Reset()         { *m = TeamData{} }
func (m *TeamData) String() string { return proto.CompactTextString(m) }
func (*TeamData) ProtoMessage()    {}
func (*TeamData) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{17}
}
func (m *TeamData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamData.Merge(m, src)
}
func (m *TeamData) XXX_Size() int {
	return m.Size()
}
func (m *TeamData) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamData.DiscardUnknown(m)
}

var xxx_messageInfo_TeamData proto.InternalMessageInfo

func (m *TeamData) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TeamData) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *TeamData) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *TeamData) GetGongGao() string {
	if m != nil && m.GongGao != nil {
		return *m.GongGao
	}
	return ""
}

func (m *TeamData) GetOwner() int64 {
	if m != nil && m.Owner != nil {
		return *m.Owner
	}
	return 0
}

func (m *TeamData) GetQRCode() string {
	if m != nil && m.QRCode != nil {
		return *m.QRCode
	}
	return ""
}

func (m *TeamData) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TeamData) GetLastTalkTime() int64 {
	if m != nil && m.LastTalkTime != nil {
		return *m.LastTalkTime
	}
	return 0
}

func (m *TeamData) GetMaxMember() int32 {
	if m != nil && m.MaxMember != nil {
		return *m.MaxMember
	}
	return 0
}

func (m *TeamData) GetMemberList() []int64 {
	if m != nil {
		return m.MemberList
	}
	return nil
}

func (m *TeamData) GetManagerList() []int64 {
	if m != nil {
		return m.ManagerList
	}
	return nil
}

func (m *TeamData) GetTeamChat() string {
	if m != nil && m.TeamChat != nil {
		return *m.TeamChat
	}
	return ""
}

func (m *TeamData) GetMessageSetting() *MessageSetting {
	if m != nil {
		return m.MessageSetting
	}
	return nil
}

func (m *TeamData) GetOutTeam() []*OutTeamInfo {
	if m != nil {
		return m.OutTeam
	}
	return nil
}

func (m *TeamData) GetInvite() []*InviteInfo {
	if m != nil {
		return m.Invite
	}
	return nil
}

func (m *TeamData) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *TeamData) GetIsRecommend() bool {
	if m != nil && m.IsRecommend != nil {
		return *m.IsRecommend
	}
	return false
}

func (m *TeamData) GetDissolveTime() int64 {
	if m != nil && m.DissolveTime != nil {
		return *m.DissolveTime
	}
	return 0
}

func (m *TeamData) GetOwnerNickName() string {
	if m != nil && m.OwnerNickName != nil {
		return *m.OwnerNickName
	}
	return ""
}

func (m *TeamData) GetOwnerAccount() string {
	if m != nil && m.OwnerAccount != nil {
		return *m.OwnerAccount
	}
	return ""
}

func (m *TeamData) GetRefreshTime() int64 {
	if m != nil && m.RefreshTime != nil {
		return *m.RefreshTime
	}
	return 0
}

func (m *TeamData) GetAdminID() int64 {
	if m != nil && m.AdminID != nil {
		return *m.AdminID
	}
	return 0
}

func (m *TeamData) GetCreateName() string {
	if m != nil && m.CreateName != nil {
		return *m.CreateName
	}
	return ""
}

func (m *TeamData) GetOperatorInfo() []*OperatorInfo {
	if m != nil {
		return m.OperatorInfo
	}
	return nil
}

func (m *TeamData) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *TeamData) GetLogMaxId() int64 {
	if m != nil && m.LogMaxId != nil {
		return *m.LogMaxId
	}
	return 0
}

func (m *TeamData) GetWelcomeWord() string {
	if m != nil && m.WelcomeWord != nil {
		return *m.WelcomeWord
	}
	return ""
}

func (m *TeamData) GetSessionId() string {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return ""
}

func (m *TeamData) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

func (m *TeamData) GetTopicDesc() string {
	if m != nil && m.TopicDesc != nil {
		return *m.TopicDesc
	}
	return ""
}

func (m *TeamData) GetTopicHeadUrls() []string {
	if m != nil {
		return m.TopicHeadUrls
	}
	return nil
}

func (m *TeamData) GetLastDynamicTime() int64 {
	if m != nil && m.LastDynamicTime != nil {
		return *m.LastDynamicTime
	}
	return 0
}

func (m *TeamData) GetDynamicId() int64 {
	if m != nil && m.DynamicId != nil {
		return *m.DynamicId
	}
	return 0
}

type OperatorInfo struct {
	Operator             *string  `protobuf:"bytes,1,opt,name=Operator" json:"Operator,omitempty" bson:"Operator,omitempty"`
	Time                 *int64   `protobuf:"varint,2,opt,name=Time" json:"Time,omitempty" bson:"Time,omitempty"`
	Flag                 *int32   `protobuf:"varint,3,opt,name=Flag" json:"Flag,omitempty" bson:"Flag,omitempty"`
	CloseTime            *int64   `protobuf:"varint,4,opt,name=CloseTime" json:"CloseTime,omitempty" bson:"CloseTime,omitempty"`
	Reason               *string  `protobuf:"bytes,5,opt,name=Reason" json:"Reason,omitempty" bson:"Reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *OperatorInfo) Reset()         { *m = OperatorInfo{} }
func (m *OperatorInfo) String() string { return proto.CompactTextString(m) }
func (*OperatorInfo) ProtoMessage()    {}
func (*OperatorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{18}
}
func (m *OperatorInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorInfo.Merge(m, src)
}
func (m *OperatorInfo) XXX_Size() int {
	return m.Size()
}
func (m *OperatorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorInfo proto.InternalMessageInfo

func (m *OperatorInfo) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *OperatorInfo) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *OperatorInfo) GetFlag() int32 {
	if m != nil && m.Flag != nil {
		return *m.Flag
	}
	return 0
}

func (m *OperatorInfo) GetCloseTime() int64 {
	if m != nil && m.CloseTime != nil {
		return *m.CloseTime
	}
	return 0
}

func (m *OperatorInfo) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

type OutTeamInfo struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Time                 *int64   `protobuf:"varint,2,opt,name=Time" json:"Time,omitempty" bson:"Time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *OutTeamInfo) Reset()         { *m = OutTeamInfo{} }
func (m *OutTeamInfo) String() string { return proto.CompactTextString(m) }
func (*OutTeamInfo) ProtoMessage()    {}
func (*OutTeamInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{19}
}
func (m *OutTeamInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutTeamInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutTeamInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutTeamInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutTeamInfo.Merge(m, src)
}
func (m *OutTeamInfo) XXX_Size() int {
	return m.Size()
}
func (m *OutTeamInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OutTeamInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OutTeamInfo proto.InternalMessageInfo

func (m *OutTeamInfo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *OutTeamInfo) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

type InviteInfo struct {
	PlayerId             *int64       `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	HeadIcon             *string      `protobuf:"bytes,2,opt,name=HeadIcon" json:"HeadIcon,omitempty" bson:"HeadIcon,omitempty"`
	State                *int32       `protobuf:"varint,3,opt,name=State" json:"State,omitempty" bson:"State,omitempty"`
	Channel              *string      `protobuf:"bytes,4,opt,name=Channel" json:"Channel,omitempty" bson:"Channel,omitempty"`
	InviteName           *string      `protobuf:"bytes,5,opt,name=InviteName" json:"InviteName,omitempty" bson:"InviteName,omitempty"`
	InviteId             *int64       `protobuf:"varint,6,opt,name=InviteId" json:"InviteId,omitempty" bson:"InviteId,omitempty"`
	Name                 *string      `protobuf:"bytes,7,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Time                 *int64       `protobuf:"varint,8,opt,name=Time" json:"Time,omitempty" bson:"Time,omitempty"`
	Account              *string      `protobuf:"bytes,9,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	LogId                *int64       `protobuf:"varint,10,opt,name=LogId" json:"LogId,omitempty" bson:"LogId,omitempty"`
	TeamChannel          *TeamChannel `protobuf:"bytes,11,opt,name=TeamChannel" json:"TeamChannel,omitempty" bson:"TeamChannel,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" bson:"-"`
	XXX_unrecognized     []byte       `json:"-" bson:"-"`
	XXX_sizecache        int32        `json:"-" bson:"-"`
}

func (m *InviteInfo) Reset()         { *m = InviteInfo{} }
func (m *InviteInfo) String() string { return proto.CompactTextString(m) }
func (*InviteInfo) ProtoMessage()    {}
func (*InviteInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{20}
}
func (m *InviteInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InviteInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InviteInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InviteInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InviteInfo.Merge(m, src)
}
func (m *InviteInfo) XXX_Size() int {
	return m.Size()
}
func (m *InviteInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_InviteInfo.DiscardUnknown(m)
}

var xxx_messageInfo_InviteInfo proto.InternalMessageInfo

func (m *InviteInfo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *InviteInfo) GetHeadIcon() string {
	if m != nil && m.HeadIcon != nil {
		return *m.HeadIcon
	}
	return ""
}

func (m *InviteInfo) GetState() int32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

func (m *InviteInfo) GetChannel() string {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return ""
}

func (m *InviteInfo) GetInviteName() string {
	if m != nil && m.InviteName != nil {
		return *m.InviteName
	}
	return ""
}

func (m *InviteInfo) GetInviteId() int64 {
	if m != nil && m.InviteId != nil {
		return *m.InviteId
	}
	return 0
}

func (m *InviteInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *InviteInfo) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *InviteInfo) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *InviteInfo) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *InviteInfo) GetTeamChannel() *TeamChannel {
	if m != nil {
		return m.TeamChannel
	}
	return nil
}

//群消息设置
type MessageSetting struct {
	IsTimeClean          *bool    `protobuf:"varint,1,opt,name=IsTimeClean" json:"IsTimeClean,omitempty" bson:"IsTimeClean,omitempty"`
	IsReadClean          *bool    `protobuf:"varint,2,opt,name=IsReadClean" json:"IsReadClean,omitempty" bson:"IsReadClean,omitempty"`
	IsScreenShotNotify   *bool    `protobuf:"varint,3,opt,name=IsScreenShotNotify" json:"IsScreenShotNotify,omitempty" bson:"IsScreenShotNotify,omitempty"`
	IsStopTalk           *bool    `protobuf:"varint,4,opt,name=IsStopTalk" json:"IsStopTalk,omitempty" bson:"IsStopTalk,omitempty"`
	TeamHelp             *int32   `protobuf:"varint,6,opt,name=TeamHelp" json:"TeamHelp,omitempty" bson:"TeamHelp,omitempty"`
	IsAddFriend          *bool    `protobuf:"varint,7,opt,name=IsAddFriend" json:"IsAddFriend,omitempty" bson:"IsAddFriend,omitempty"`
	IsInvite             *bool    `protobuf:"varint,8,opt,name=IsInvite" json:"IsInvite,omitempty" bson:"IsInvite,omitempty"`
	StopRedPacket        []int64  `protobuf:"varint,9,rep,name=StopRedPacket" json:"StopRedPacket,omitempty" bson:"StopRedPacket,omitempty"`
	UnTakeRedPacket      []int64  `protobuf:"varint,10,rep,name=UnTakeRedPacket" json:"UnTakeRedPacket,omitempty" bson:"UnTakeRedPacket,omitempty"`
	IsStopAddTeam        *bool    `protobuf:"varint,11,opt,name=IsStopAddTeam" json:"IsStopAddTeam,omitempty" bson:"IsStopAddTeam,omitempty"`
	IsOpenTeamMoneyCode  *bool    `protobuf:"varint,12,opt,name=IsOpenTeamMoneyCode" json:"IsOpenTeamMoneyCode,omitempty" bson:"IsOpenTeamMoneyCode,omitempty"`
	IsBan                *bool    `protobuf:"varint,13,opt,name=IsBan" json:"IsBan,omitempty" bson:"IsBan,omitempty"`
	UnBanTime            *int64   `protobuf:"varint,14,opt,name=UnBanTime" json:"UnBanTime,omitempty" bson:"UnBanTime,omitempty"`
	IsOpenWelcomeWord    *bool    `protobuf:"varint,15,opt,name=IsOpenWelcomeWord" json:"IsOpenWelcomeWord,omitempty" bson:"IsOpenWelcomeWord,omitempty"`
	IsManagerEdit        *bool    `protobuf:"varint,16,opt,name=IsManagerEdit" json:"IsManagerEdit,omitempty" bson:"IsManagerEdit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *MessageSetting) Reset()         { *m = MessageSetting{} }
func (m *MessageSetting) String() string { return proto.CompactTextString(m) }
func (*MessageSetting) ProtoMessage()    {}
func (*MessageSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{21}
}
func (m *MessageSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageSetting.Merge(m, src)
}
func (m *MessageSetting) XXX_Size() int {
	return m.Size()
}
func (m *MessageSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageSetting.DiscardUnknown(m)
}

var xxx_messageInfo_MessageSetting proto.InternalMessageInfo

func (m *MessageSetting) GetIsTimeClean() bool {
	if m != nil && m.IsTimeClean != nil {
		return *m.IsTimeClean
	}
	return false
}

func (m *MessageSetting) GetIsReadClean() bool {
	if m != nil && m.IsReadClean != nil {
		return *m.IsReadClean
	}
	return false
}

func (m *MessageSetting) GetIsScreenShotNotify() bool {
	if m != nil && m.IsScreenShotNotify != nil {
		return *m.IsScreenShotNotify
	}
	return false
}

func (m *MessageSetting) GetIsStopTalk() bool {
	if m != nil && m.IsStopTalk != nil {
		return *m.IsStopTalk
	}
	return false
}

func (m *MessageSetting) GetTeamHelp() int32 {
	if m != nil && m.TeamHelp != nil {
		return *m.TeamHelp
	}
	return 0
}

func (m *MessageSetting) GetIsAddFriend() bool {
	if m != nil && m.IsAddFriend != nil {
		return *m.IsAddFriend
	}
	return false
}

func (m *MessageSetting) GetIsInvite() bool {
	if m != nil && m.IsInvite != nil {
		return *m.IsInvite
	}
	return false
}

func (m *MessageSetting) GetStopRedPacket() []int64 {
	if m != nil {
		return m.StopRedPacket
	}
	return nil
}

func (m *MessageSetting) GetUnTakeRedPacket() []int64 {
	if m != nil {
		return m.UnTakeRedPacket
	}
	return nil
}

func (m *MessageSetting) GetIsStopAddTeam() bool {
	if m != nil && m.IsStopAddTeam != nil {
		return *m.IsStopAddTeam
	}
	return false
}

func (m *MessageSetting) GetIsOpenTeamMoneyCode() bool {
	if m != nil && m.IsOpenTeamMoneyCode != nil {
		return *m.IsOpenTeamMoneyCode
	}
	return false
}

func (m *MessageSetting) GetIsBan() bool {
	if m != nil && m.IsBan != nil {
		return *m.IsBan
	}
	return false
}

func (m *MessageSetting) GetUnBanTime() int64 {
	if m != nil && m.UnBanTime != nil {
		return *m.UnBanTime
	}
	return 0
}

func (m *MessageSetting) GetIsOpenWelcomeWord() bool {
	if m != nil && m.IsOpenWelcomeWord != nil {
		return *m.IsOpenWelcomeWord
	}
	return false
}

func (m *MessageSetting) GetIsManagerEdit() bool {
	if m != nil && m.IsManagerEdit != nil {
		return *m.IsManagerEdit
	}
	return false
}

type TeamSetting struct {
	PersonSetting        *PersonalTeamSetting `protobuf:"bytes,1,opt,name=PersonSetting" json:"PersonSetting,omitempty" bson:"PersonSetting,omitempty"`
	MessageSetting       *MessageSetting      `protobuf:"bytes,2,opt,name=MessageSetting" json:"MessageSetting,omitempty" bson:"MessageSetting,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-" bson:"-"`
	XXX_unrecognized     []byte               `json:"-" bson:"-"`
	XXX_sizecache        int32                `json:"-" bson:"-"`
}

func (m *TeamSetting) Reset()         { *m = TeamSetting{} }
func (m *TeamSetting) String() string { return proto.CompactTextString(m) }
func (*TeamSetting) ProtoMessage()    {}
func (*TeamSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{22}
}
func (m *TeamSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamSetting.Merge(m, src)
}
func (m *TeamSetting) XXX_Size() int {
	return m.Size()
}
func (m *TeamSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamSetting.DiscardUnknown(m)
}

var xxx_messageInfo_TeamSetting proto.InternalMessageInfo

func (m *TeamSetting) GetPersonSetting() *PersonalTeamSetting {
	if m != nil {
		return m.PersonSetting
	}
	return nil
}

func (m *TeamSetting) GetMessageSetting() *MessageSetting {
	if m != nil {
		return m.MessageSetting
	}
	return nil
}

type TeamChannel struct {
	Name                 *string  `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Type                 *int32   `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TeamChannel) Reset()         { *m = TeamChannel{} }
func (m *TeamChannel) String() string { return proto.CompactTextString(m) }
func (*TeamChannel) ProtoMessage()    {}
func (*TeamChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{23}
}
func (m *TeamChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamChannel.Merge(m, src)
}
func (m *TeamChannel) XXX_Size() int {
	return m.Size()
}
func (m *TeamChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamChannel.DiscardUnknown(m)
}

var xxx_messageInfo_TeamChannel proto.InternalMessageInfo

func (m *TeamChannel) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *TeamChannel) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

//群聊天记录 team_chat_log
type TeamChatLogMsg struct {
	TeamId               *int64         `protobuf:"varint,1,opt,name=TeamId" json:"_id,omitempty" bson:"_id,omitempty"`
	ChatInfo             []*TeamChatLog `protobuf:"bytes,2,rep,name=ChatInfo" json:"ChatInfo,omitempty" bson:"ChatInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-" bson:"-"`
	XXX_unrecognized     []byte         `json:"-" bson:"-"`
	XXX_sizecache        int32          `json:"-" bson:"-"`
}

func (m *TeamChatLogMsg) Reset()         { *m = TeamChatLogMsg{} }
func (m *TeamChatLogMsg) String() string { return proto.CompactTextString(m) }
func (*TeamChatLogMsg) ProtoMessage()    {}
func (*TeamChatLogMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{24}
}
func (m *TeamChatLogMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamChatLogMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamChatLogMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamChatLogMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamChatLogMsg.Merge(m, src)
}
func (m *TeamChatLogMsg) XXX_Size() int {
	return m.Size()
}
func (m *TeamChatLogMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamChatLogMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TeamChatLogMsg proto.InternalMessageInfo

func (m *TeamChatLogMsg) GetTeamId() int64 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *TeamChatLogMsg) GetChatInfo() []*TeamChatLog {
	if m != nil {
		return m.ChatInfo
	}
	return nil
}

type WithDrawInfo struct {
	LogId                *int64   `protobuf:"varint,1,opt,name=LogId" json:"LogId,omitempty" bson:"LogId,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WithDrawInfo) Reset()         { *m = WithDrawInfo{} }
func (m *WithDrawInfo) String() string { return proto.CompactTextString(m) }
func (*WithDrawInfo) ProtoMessage()    {}
func (*WithDrawInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{25}
}
func (m *WithDrawInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithDrawInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithDrawInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithDrawInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithDrawInfo.Merge(m, src)
}
func (m *WithDrawInfo) XXX_Size() int {
	return m.Size()
}
func (m *WithDrawInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_WithDrawInfo.DiscardUnknown(m)
}

var xxx_messageInfo_WithDrawInfo proto.InternalMessageInfo

func (m *WithDrawInfo) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *WithDrawInfo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

type TeamChatInfo struct {
	FirstChat            []*TeamChatLog  `protobuf:"bytes,1,rep,name=FirstChat" json:"FirstChat,omitempty" bson:"FirstChat,omitempty"`
	LastChat             []*TeamChatLog  `protobuf:"bytes,2,rep,name=LastChat" json:"LastChat,omitempty" bson:"LastChat,omitempty"`
	Count                *int32          `protobuf:"varint,3,opt,name=Count" json:"Count,omitempty" bson:"Count,omitempty"`
	ReLogIds             []*WithDrawInfo `protobuf:"bytes,4,rep,name=ReLogIds" json:"ReLogIds,omitempty" bson:"ReLogIds,omitempty"`
	IsNoticeMessage      *bool           `protobuf:"varint,5,opt,name=IsNoticeMessage" json:"IsNoticeMessage,omitempty" bson:"IsNoticeMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-" bson:"-"`
	XXX_unrecognized     []byte          `json:"-" bson:"-"`
	XXX_sizecache        int32           `json:"-" bson:"-"`
}

func (m *TeamChatInfo) Reset()         { *m = TeamChatInfo{} }
func (m *TeamChatInfo) String() string { return proto.CompactTextString(m) }
func (*TeamChatInfo) ProtoMessage()    {}
func (*TeamChatInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{26}
}
func (m *TeamChatInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamChatInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamChatInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamChatInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamChatInfo.Merge(m, src)
}
func (m *TeamChatInfo) XXX_Size() int {
	return m.Size()
}
func (m *TeamChatInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamChatInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TeamChatInfo proto.InternalMessageInfo

func (m *TeamChatInfo) GetFirstChat() []*TeamChatLog {
	if m != nil {
		return m.FirstChat
	}
	return nil
}

func (m *TeamChatInfo) GetLastChat() []*TeamChatLog {
	if m != nil {
		return m.LastChat
	}
	return nil
}

func (m *TeamChatInfo) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *TeamChatInfo) GetReLogIds() []*WithDrawInfo {
	if m != nil {
		return m.ReLogIds
	}
	return nil
}

func (m *TeamChatInfo) GetIsNoticeMessage() bool {
	if m != nil && m.IsNoticeMessage != nil {
		return *m.IsNoticeMessage
	}
	return false
}

type TeamMessage struct {
	PlayerId             *int64              `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Type                 *int32              `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	PlayerList           []int64             `protobuf:"varint,3,rep,name=PlayerList" json:"PlayerList,omitempty" bson:"PlayerList,omitempty"`
	Value                *bool               `protobuf:"varint,4,opt,name=Value" json:"Value,omitempty" bson:"Value,omitempty"`
	Value1               *string             `protobuf:"bytes,5,opt,name=Value1" json:"Value1,omitempty" bson:"Value1,omitempty"`
	IsAllNotice          *bool               `protobuf:"varint,6,opt,name=IsAllNotice" json:"IsAllNotice,omitempty" bson:"IsAllNotice,omitempty"`
	AllPlayerList        []int64             `protobuf:"varint,7,rep,name=AllPlayerList" json:"AllPlayerList,omitempty" bson:"AllPlayerList,omitempty"`
	Time                 *int64              `protobuf:"varint,8,opt,name=Time" json:"Time,omitempty" bson:"Time,omitempty"`
	TeamId               *int64              `protobuf:"varint,9,opt,name=TeamId" json:"TeamId,omitempty" bson:"TeamId,omitempty"`
	Members              []*PersonalTeamData `protobuf:"bytes,10,rep,name=Members" json:"-" bson:"-"`
	Account              *string             `protobuf:"bytes,12,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	LogId                *int64              `protobuf:"varint,11,opt,name=LogId" json:"LogId,omitempty" bson:"LogId,omitempty"`
	Pos                  *int32              `protobuf:"varint,13,opt,name=Pos" json:"Pos,omitempty" bson:"Pos,omitempty"`
	Name                 *string             `protobuf:"bytes,14,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	AdminID              *int64              `protobuf:"varint,15,opt,name=AdminID" json:"AdminID,omitempty" bson:"AdminID,omitempty"`
	AdminName            *string             `protobuf:"bytes,16,opt,name=AdminName" json:"-" bson:"-"`
	SendTime             *int64              `protobuf:"varint,17,opt,name=SendTime" json:"SendTime,omitempty" bson:"SendTime,omitempty"`
	ShowPos              *int32              `protobuf:"varint,18,opt,name=ShowPos" json:"ShowPos,omitempty" bson:"ShowPos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-" bson:"-"`
	XXX_unrecognized     []byte              `json:"-" bson:"-"`
	XXX_sizecache        int32               `json:"-" bson:"-"`
}

func (m *TeamMessage) Reset()         { *m = TeamMessage{} }
func (m *TeamMessage) String() string { return proto.CompactTextString(m) }
func (*TeamMessage) ProtoMessage()    {}
func (*TeamMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{27}
}
func (m *TeamMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamMessage.Merge(m, src)
}
func (m *TeamMessage) XXX_Size() int {
	return m.Size()
}
func (m *TeamMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TeamMessage proto.InternalMessageInfo

func (m *TeamMessage) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *TeamMessage) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *TeamMessage) GetPlayerList() []int64 {
	if m != nil {
		return m.PlayerList
	}
	return nil
}

func (m *TeamMessage) GetValue() bool {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return false
}

func (m *TeamMessage) GetValue1() string {
	if m != nil && m.Value1 != nil {
		return *m.Value1
	}
	return ""
}

func (m *TeamMessage) GetIsAllNotice() bool {
	if m != nil && m.IsAllNotice != nil {
		return *m.IsAllNotice
	}
	return false
}

func (m *TeamMessage) GetAllPlayerList() []int64 {
	if m != nil {
		return m.AllPlayerList
	}
	return nil
}

func (m *TeamMessage) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *TeamMessage) GetTeamId() int64 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *TeamMessage) GetMembers() []*PersonalTeamData {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *TeamMessage) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *TeamMessage) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *TeamMessage) GetPos() int32 {
	if m != nil && m.Pos != nil {
		return *m.Pos
	}
	return 0
}

func (m *TeamMessage) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *TeamMessage) GetAdminID() int64 {
	if m != nil && m.AdminID != nil {
		return *m.AdminID
	}
	return 0
}

func (m *TeamMessage) GetAdminName() string {
	if m != nil && m.AdminName != nil {
		return *m.AdminName
	}
	return ""
}

func (m *TeamMessage) GetSendTime() int64 {
	if m != nil && m.SendTime != nil {
		return *m.SendTime
	}
	return 0
}

func (m *TeamMessage) GetShowPos() int32 {
	if m != nil && m.ShowPos != nil {
		return *m.ShowPos
	}
	return 0
}

type NoticeMsg struct {
	IsAll                *bool    `protobuf:"varint,1,opt,name=IsAll" json:"IsAll,omitempty" bson:"IsAll,omitempty"`
	PlayerId             []int64  `protobuf:"varint,2,rep,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *NoticeMsg) Reset()         { *m = NoticeMsg{} }
func (m *NoticeMsg) String() string { return proto.CompactTextString(m) }
func (*NoticeMsg) ProtoMessage()    {}
func (*NoticeMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{28}
}
func (m *NoticeMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoticeMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoticeMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoticeMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoticeMsg.Merge(m, src)
}
func (m *NoticeMsg) XXX_Size() int {
	return m.Size()
}
func (m *NoticeMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_NoticeMsg.DiscardUnknown(m)
}

var xxx_messageInfo_NoticeMsg proto.InternalMessageInfo

func (m *NoticeMsg) GetIsAll() bool {
	if m != nil && m.IsAll != nil {
		return *m.IsAll
	}
	return false
}

func (m *NoticeMsg) GetPlayerId() []int64 {
	if m != nil {
		return m.PlayerId
	}
	return nil
}

type TeamChatLog struct {
	LogId                *int64       `protobuf:"varint,1,opt,name=LogId" json:"_id,omitempty" bson:"_id,omitempty"`
	TeamId               *int64       `protobuf:"varint,2,opt,name=TeamId" json:"TeamId,omitempty" bson:"TeamId,omitempty"`
	Talker               *int64       `protobuf:"varint,3,opt,name=Talker" json:"Talker,omitempty" bson:"Talker,omitempty"`
	Time                 *int64       `protobuf:"varint,4,opt,name=Time" json:"Time,omitempty" bson:"Time,omitempty"`
	Content              *string      `protobuf:"bytes,5,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	IsSave               *bool        `protobuf:"varint,6,opt,name=IsSave" json:"IsSave,omitempty" bson:"IsSave,omitempty"`
	Type                 *int32       `protobuf:"varint,7,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	TeamMessage          *TeamMessage `protobuf:"bytes,8,opt,name=TeamMessage" json:"TeamMessage,omitempty" bson:"TeamMessage,omitempty"`
	TeamAccount          *string      `protobuf:"bytes,9,opt,name=TeamAccount" json:"-" bson:"-"`
	TeamName             *string      `protobuf:"bytes,10,opt,name=TeamName" json:"-" bson:"-"`
	TalkerAccount        *string      `protobuf:"bytes,11,opt,name=TalkerAccount" json:"-" bson:"-"`
	TalkerName           *string      `protobuf:"bytes,12,opt,name=TalkerName" json:"TalkerName,omitempty" bson:"TalkerName,omitempty"`
	Cite                 *string      `protobuf:"bytes,13,opt,name=Cite" json:"Cite,omitempty" bson:"Cite,omitempty"`
	TeamLogId            *int64       `protobuf:"varint,14,opt,name=TeamLogId" json:"TeamLogId,omitempty" bson:"TeamLogId,omitempty"`
	NoticeInfo           *NoticeMsg   `protobuf:"bytes,15,opt,name=NoticeInfo" json:"NoticeInfo,omitempty" bson:"NoticeInfo,omitempty"`
	TalkerHeadUrl        *string      `protobuf:"bytes,16,opt,name=TalkerHeadUrl" json:"TalkerHeadUrl,omitempty" bson:"TalkerHeadUrl,omitempty"`
	QPId                 *int64       `protobuf:"varint,17,opt,name=QPId" json:"QPId,omitempty" bson:"QPId,omitempty"`
	SessionId            *string      `protobuf:"bytes,18,opt,name=SessionId" json:"SessionId,omitempty" bson:"SessionId,omitempty"`
	Status               *int32       `protobuf:"varint,19,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	Types                *int32       `protobuf:"varint,20,opt,name=Types" json:"Types,omitempty" bson:"Types,omitempty"`
	Mark                 *string      `protobuf:"bytes,21,opt,name=Mark" json:"Mark,omitempty" bson:"Mark,omitempty"`
	PlayerIds            []int64      `protobuf:"varint,23,rep,name=PlayerIds" json:"PlayerIds,omitempty" bson:"PlayerIds,omitempty"`
	IsWelComeWord        *bool        `protobuf:"varint,24,opt,name=IsWelComeWord" json:"IsWelComeWord,omitempty" bson:"IsWelComeWord,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" bson:"-"`
	XXX_unrecognized     []byte       `json:"-" bson:"-"`
	XXX_sizecache        int32        `json:"-" bson:"-"`
}

func (m *TeamChatLog) Reset()         { *m = TeamChatLog{} }
func (m *TeamChatLog) String() string { return proto.CompactTextString(m) }
func (*TeamChatLog) ProtoMessage()    {}
func (*TeamChatLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{29}
}
func (m *TeamChatLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamChatLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamChatLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamChatLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamChatLog.Merge(m, src)
}
func (m *TeamChatLog) XXX_Size() int {
	return m.Size()
}
func (m *TeamChatLog) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamChatLog.DiscardUnknown(m)
}

var xxx_messageInfo_TeamChatLog proto.InternalMessageInfo

func (m *TeamChatLog) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *TeamChatLog) GetTeamId() int64 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *TeamChatLog) GetTalker() int64 {
	if m != nil && m.Talker != nil {
		return *m.Talker
	}
	return 0
}

func (m *TeamChatLog) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *TeamChatLog) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *TeamChatLog) GetIsSave() bool {
	if m != nil && m.IsSave != nil {
		return *m.IsSave
	}
	return false
}

func (m *TeamChatLog) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *TeamChatLog) GetTeamMessage() *TeamMessage {
	if m != nil {
		return m.TeamMessage
	}
	return nil
}

func (m *TeamChatLog) GetTeamAccount() string {
	if m != nil && m.TeamAccount != nil {
		return *m.TeamAccount
	}
	return ""
}

func (m *TeamChatLog) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *TeamChatLog) GetTalkerAccount() string {
	if m != nil && m.TalkerAccount != nil {
		return *m.TalkerAccount
	}
	return ""
}

func (m *TeamChatLog) GetTalkerName() string {
	if m != nil && m.TalkerName != nil {
		return *m.TalkerName
	}
	return ""
}

func (m *TeamChatLog) GetCite() string {
	if m != nil && m.Cite != nil {
		return *m.Cite
	}
	return ""
}

func (m *TeamChatLog) GetTeamLogId() int64 {
	if m != nil && m.TeamLogId != nil {
		return *m.TeamLogId
	}
	return 0
}

func (m *TeamChatLog) GetNoticeInfo() *NoticeMsg {
	if m != nil {
		return m.NoticeInfo
	}
	return nil
}

func (m *TeamChatLog) GetTalkerHeadUrl() string {
	if m != nil && m.TalkerHeadUrl != nil {
		return *m.TalkerHeadUrl
	}
	return ""
}

func (m *TeamChatLog) GetQPId() int64 {
	if m != nil && m.QPId != nil {
		return *m.QPId
	}
	return 0
}

func (m *TeamChatLog) GetSessionId() string {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return ""
}

func (m *TeamChatLog) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *TeamChatLog) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *TeamChatLog) GetMark() string {
	if m != nil && m.Mark != nil {
		return *m.Mark
	}
	return ""
}

func (m *TeamChatLog) GetPlayerIds() []int64 {
	if m != nil {
		return m.PlayerIds
	}
	return nil
}

func (m *TeamChatLog) GetIsWelComeWord() bool {
	if m != nil && m.IsWelComeWord != nil {
		return *m.IsWelComeWord
	}
	return false
}

//个人聊天记录 personal_chat_log
type PersonalChatLogMsg struct {
	Key                  *string            `protobuf:"bytes,1,opt,name=Key" json:"_id,omitempty" bson:"_id,omitempty"`
	ChatInfo             []*PersonalChatLog `protobuf:"bytes,2,rep,name=ChatInfo" json:"ChatInfo,omitempty" bson:"ChatInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-" bson:"-"`
	XXX_unrecognized     []byte             `json:"-" bson:"-"`
	XXX_sizecache        int32              `json:"-" bson:"-"`
}

func (m *PersonalChatLogMsg) Reset()         { *m = PersonalChatLogMsg{} }
func (m *PersonalChatLogMsg) String() string { return proto.CompactTextString(m) }
func (*PersonalChatLogMsg) ProtoMessage()    {}
func (*PersonalChatLogMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{30}
}
func (m *PersonalChatLogMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersonalChatLogMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PersonalChatLogMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PersonalChatLogMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersonalChatLogMsg.Merge(m, src)
}
func (m *PersonalChatLogMsg) XXX_Size() int {
	return m.Size()
}
func (m *PersonalChatLogMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_PersonalChatLogMsg.DiscardUnknown(m)
}

var xxx_messageInfo_PersonalChatLogMsg proto.InternalMessageInfo

func (m *PersonalChatLogMsg) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *PersonalChatLogMsg) GetChatInfo() []*PersonalChatLog {
	if m != nil {
		return m.ChatInfo
	}
	return nil
}

type PersonalChatLog struct {
	LogId                *int64   `protobuf:"varint,1,opt,name=LogId" json:"_id,omitempty" bson:"_id,omitempty"`
	Talker               *int64   `protobuf:"varint,2,opt,name=Talker" json:"Talker,omitempty" bson:"Talker,omitempty"`
	TalkerAccount        *string  `protobuf:"bytes,21,opt,name=TalkerAccount" json:"-" bson:"-"`
	TalkerNickName       *string  `protobuf:"bytes,22,opt,name=TalkerNickName" json:"-" bson:"-"`
	TargetId             *int64   `protobuf:"varint,3,opt,name=TargetId" json:"TargetId,omitempty" bson:"TargetId,omitempty"`
	TargetAccount        *string  `protobuf:"bytes,31,opt,name=TargetAccount" json:"-" bson:"-"`
	TargetNickName       *string  `protobuf:"bytes,32,opt,name=TargetNickName" json:"-" bson:"-"`
	Time                 *int64   `protobuf:"varint,4,opt,name=Time" json:"Time,omitempty" bson:"Time,omitempty"`
	Content              *string  `protobuf:"bytes,5,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	IsRead               *bool    `protobuf:"varint,6,opt,name=IsRead" json:"IsRead,omitempty" bson:"IsRead,omitempty"`
	Type                 *int32   `protobuf:"varint,7,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	Cite                 *string  `protobuf:"bytes,8,opt,name=Cite" json:"Cite,omitempty" bson:"Cite,omitempty"`
	SessionId            *string  `protobuf:"bytes,9,opt,name=SessionId" json:"SessionId,omitempty" bson:"SessionId,omitempty"`
	Status               *int32   `protobuf:"varint,10,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	QPId                 *int64   `protobuf:"varint,17,opt,name=QPId" json:"QPId,omitempty" bson:"QPId,omitempty"`
	TalkLogId            *int64   `protobuf:"varint,18,opt,name=TalkLogId" json:"TalkLogId,omitempty" bson:"TalkLogId,omitempty"`
	Mark                 *string  `protobuf:"bytes,19,opt,name=Mark" json:"Mark,omitempty" bson:"Mark,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PersonalChatLog) Reset()         { *m = PersonalChatLog{} }
func (m *PersonalChatLog) String() string { return proto.CompactTextString(m) }
func (*PersonalChatLog) ProtoMessage()    {}
func (*PersonalChatLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{31}
}
func (m *PersonalChatLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersonalChatLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PersonalChatLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PersonalChatLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersonalChatLog.Merge(m, src)
}
func (m *PersonalChatLog) XXX_Size() int {
	return m.Size()
}
func (m *PersonalChatLog) XXX_DiscardUnknown() {
	xxx_messageInfo_PersonalChatLog.DiscardUnknown(m)
}

var xxx_messageInfo_PersonalChatLog proto.InternalMessageInfo

func (m *PersonalChatLog) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *PersonalChatLog) GetTalker() int64 {
	if m != nil && m.Talker != nil {
		return *m.Talker
	}
	return 0
}

func (m *PersonalChatLog) GetTalkerAccount() string {
	if m != nil && m.TalkerAccount != nil {
		return *m.TalkerAccount
	}
	return ""
}

func (m *PersonalChatLog) GetTalkerNickName() string {
	if m != nil && m.TalkerNickName != nil {
		return *m.TalkerNickName
	}
	return ""
}

func (m *PersonalChatLog) GetTargetId() int64 {
	if m != nil && m.TargetId != nil {
		return *m.TargetId
	}
	return 0
}

func (m *PersonalChatLog) GetTargetAccount() string {
	if m != nil && m.TargetAccount != nil {
		return *m.TargetAccount
	}
	return ""
}

func (m *PersonalChatLog) GetTargetNickName() string {
	if m != nil && m.TargetNickName != nil {
		return *m.TargetNickName
	}
	return ""
}

func (m *PersonalChatLog) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *PersonalChatLog) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *PersonalChatLog) GetIsRead() bool {
	if m != nil && m.IsRead != nil {
		return *m.IsRead
	}
	return false
}

func (m *PersonalChatLog) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *PersonalChatLog) GetCite() string {
	if m != nil && m.Cite != nil {
		return *m.Cite
	}
	return ""
}

func (m *PersonalChatLog) GetSessionId() string {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return ""
}

func (m *PersonalChatLog) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *PersonalChatLog) GetQPId() int64 {
	if m != nil && m.QPId != nil {
		return *m.QPId
	}
	return 0
}

func (m *PersonalChatLog) GetTalkLogId() int64 {
	if m != nil && m.TalkLogId != nil {
		return *m.TalkLogId
	}
	return 0
}

func (m *PersonalChatLog) GetMark() string {
	if m != nil && m.Mark != nil {
		return *m.Mark
	}
	return ""
}

//群信息 AllTeam_data
type AllTeamData struct {
	TeamId               *int64              `protobuf:"varint,1,req,name=TeamId" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string             `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Data                 []*PersonalTeamData `protobuf:"bytes,3,rep,name=Data" json:"Data,omitempty" bson:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-" bson:"-"`
	XXX_unrecognized     []byte              `json:"-" bson:"-"`
	XXX_sizecache        int32               `json:"-" bson:"-"`
}

func (m *AllTeamData) Reset()         { *m = AllTeamData{} }
func (m *AllTeamData) String() string { return proto.CompactTextString(m) }
func (*AllTeamData) ProtoMessage()    {}
func (*AllTeamData) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{32}
}
func (m *AllTeamData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllTeamData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllTeamData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllTeamData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllTeamData.Merge(m, src)
}
func (m *AllTeamData) XXX_Size() int {
	return m.Size()
}
func (m *AllTeamData) XXX_DiscardUnknown() {
	xxx_messageInfo_AllTeamData.DiscardUnknown(m)
}

var xxx_messageInfo_AllTeamData proto.InternalMessageInfo

func (m *AllTeamData) GetTeamId() int64 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *AllTeamData) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *AllTeamData) GetData() []*PersonalTeamData {
	if m != nil {
		return m.Data
	}
	return nil
}

type PersonalTeamData struct {
	Id                   *int64               `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	TeamId               *int64               `protobuf:"varint,2,opt,name=TeamId" json:"TeamId,omitempty" bson:"TeamId,omitempty"`
	PlayerId             *int64               `protobuf:"varint,3,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	NickName             *string              `protobuf:"bytes,4,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	Position             *int32               `protobuf:"varint,5,opt,name=Position" json:"Position,omitempty" bson:"Position,omitempty"`
	Setting              *PersonalTeamSetting `protobuf:"bytes,6,opt,name=Setting" json:"Setting,omitempty" bson:"Setting,omitempty"`
	ReadId               *int64               `protobuf:"varint,7,opt,name=ReadId" json:"ReadId,omitempty" bson:"ReadId,omitempty"`
	Phone                *string              `protobuf:"bytes,8,opt,name=Phone" json:"Phone,omitempty" bson:"Phone,omitempty"`
	WX                   *string              `protobuf:"bytes,9,opt,name=WX" json:"WX,omitempty" bson:"WX,omitempty"`
	ZFB                  *string              `protobuf:"bytes,10,opt,name=ZFB" json:"ZFB,omitempty" bson:"ZFB,omitempty"`
	Time                 *int64               `protobuf:"varint,11,opt,name=Time" json:"Time,omitempty" bson:"Time,omitempty"`
	HeadIcon             *string              `protobuf:"bytes,12,opt,name=HeadIcon" json:"-" bson:"-"`
	TeamChannel          *TeamChannel         `protobuf:"bytes,13,opt,name=TeamChannel" json:"TeamChannel,omitempty" bson:"TeamChannel,omitempty"`
	Channel              *string              `protobuf:"bytes,14,opt,name=Channel" json:"Channel,omitempty" bson:"Channel,omitempty"`
	Status               *int32               `protobuf:"varint,15,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	Sex                  *int32               `protobuf:"varint,16,opt,name=Sex" json:"-" bson:"-"`
	Signture             *string              `protobuf:"bytes,17,opt,name=Signture" json:"-" bson:"-"`
	Photo                *string              `protobuf:"bytes,18,opt,name=photo" json:"-" bson:"-"`
	IsSave               *bool                `protobuf:"varint,19,opt,name=IsSave" json:"IsSave,omitempty" bson:"IsSave,omitempty"`
	TeamName             *string              `protobuf:"bytes,20,opt,name=TeamName" json:"TeamName,omitempty" bson:"TeamName,omitempty"`
	QTX                  *bool                `protobuf:"varint,21,opt,name=QTX" json:"QTX,omitempty" bson:"QTX,omitempty"`
	Account              *string              `protobuf:"bytes,98,opt,name=Account" json:"-" bson:"-"`
	PerNickName          *string              `protobuf:"bytes,99,opt,name=PerNickName" json:"-" bson:"-"`
	OperatorInfoPer      []*OperatorInfoPer   `protobuf:"bytes,100,rep,name=OperatorInfoPer" json:"OperatorInfoPer,omitempty" bson:"OperatorInfoPer,omitempty"`
	Types                *int32               `protobuf:"varint,101,opt,name=Types" json:"-" bson:"-"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-" bson:"-"`
	XXX_unrecognized     []byte               `json:"-" bson:"-"`
	XXX_sizecache        int32                `json:"-" bson:"-"`
}

func (m *PersonalTeamData) Reset()         { *m = PersonalTeamData{} }
func (m *PersonalTeamData) String() string { return proto.CompactTextString(m) }
func (*PersonalTeamData) ProtoMessage()    {}
func (*PersonalTeamData) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{33}
}
func (m *PersonalTeamData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersonalTeamData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PersonalTeamData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PersonalTeamData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersonalTeamData.Merge(m, src)
}
func (m *PersonalTeamData) XXX_Size() int {
	return m.Size()
}
func (m *PersonalTeamData) XXX_DiscardUnknown() {
	xxx_messageInfo_PersonalTeamData.DiscardUnknown(m)
}

var xxx_messageInfo_PersonalTeamData proto.InternalMessageInfo

func (m *PersonalTeamData) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PersonalTeamData) GetTeamId() int64 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *PersonalTeamData) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PersonalTeamData) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *PersonalTeamData) GetPosition() int32 {
	if m != nil && m.Position != nil {
		return *m.Position
	}
	return 0
}

func (m *PersonalTeamData) GetSetting() *PersonalTeamSetting {
	if m != nil {
		return m.Setting
	}
	return nil
}

func (m *PersonalTeamData) GetReadId() int64 {
	if m != nil && m.ReadId != nil {
		return *m.ReadId
	}
	return 0
}

func (m *PersonalTeamData) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *PersonalTeamData) GetWX() string {
	if m != nil && m.WX != nil {
		return *m.WX
	}
	return ""
}

func (m *PersonalTeamData) GetZFB() string {
	if m != nil && m.ZFB != nil {
		return *m.ZFB
	}
	return ""
}

func (m *PersonalTeamData) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *PersonalTeamData) GetHeadIcon() string {
	if m != nil && m.HeadIcon != nil {
		return *m.HeadIcon
	}
	return ""
}

func (m *PersonalTeamData) GetTeamChannel() *TeamChannel {
	if m != nil {
		return m.TeamChannel
	}
	return nil
}

func (m *PersonalTeamData) GetChannel() string {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return ""
}

func (m *PersonalTeamData) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *PersonalTeamData) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *PersonalTeamData) GetSignture() string {
	if m != nil && m.Signture != nil {
		return *m.Signture
	}
	return ""
}

func (m *PersonalTeamData) GetPhoto() string {
	if m != nil && m.Photo != nil {
		return *m.Photo
	}
	return ""
}

func (m *PersonalTeamData) GetIsSave() bool {
	if m != nil && m.IsSave != nil {
		return *m.IsSave
	}
	return false
}

func (m *PersonalTeamData) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *PersonalTeamData) GetQTX() bool {
	if m != nil && m.QTX != nil {
		return *m.QTX
	}
	return false
}

func (m *PersonalTeamData) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *PersonalTeamData) GetPerNickName() string {
	if m != nil && m.PerNickName != nil {
		return *m.PerNickName
	}
	return ""
}

func (m *PersonalTeamData) GetOperatorInfoPer() []*OperatorInfoPer {
	if m != nil {
		return m.OperatorInfoPer
	}
	return nil
}

func (m *PersonalTeamData) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

type OperatorInfoPer struct {
	Operator             *string  `protobuf:"bytes,1,opt,name=Operator" json:"Operator,omitempty" bson:"Operator,omitempty"`
	Time                 *int64   `protobuf:"varint,2,opt,name=Time" json:"Time,omitempty" bson:"Time,omitempty"`
	Flag                 *int32   `protobuf:"varint,3,opt,name=Flag" json:"Flag,omitempty" bson:"Flag,omitempty"`
	CloseTime            *int64   `protobuf:"varint,4,opt,name=CloseTime" json:"CloseTime,omitempty" bson:"CloseTime,omitempty"`
	Reason               *string  `protobuf:"bytes,5,opt,name=Reason" json:"Reason,omitempty" bson:"Reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *OperatorInfoPer) Reset()         { *m = OperatorInfoPer{} }
func (m *OperatorInfoPer) String() string { return proto.CompactTextString(m) }
func (*OperatorInfoPer) ProtoMessage()    {}
func (*OperatorInfoPer) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{34}
}
func (m *OperatorInfoPer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorInfoPer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorInfoPer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorInfoPer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorInfoPer.Merge(m, src)
}
func (m *OperatorInfoPer) XXX_Size() int {
	return m.Size()
}
func (m *OperatorInfoPer) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorInfoPer.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorInfoPer proto.InternalMessageInfo

func (m *OperatorInfoPer) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *OperatorInfoPer) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *OperatorInfoPer) GetFlag() int32 {
	if m != nil && m.Flag != nil {
		return *m.Flag
	}
	return 0
}

func (m *OperatorInfoPer) GetCloseTime() int64 {
	if m != nil && m.CloseTime != nil {
		return *m.CloseTime
	}
	return 0
}

func (m *OperatorInfoPer) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

//个人在群里的设置
type PersonalTeamSetting struct {
	IsTopChat            *bool    `protobuf:"varint,1,opt,name=IsTopChat" json:"IsTopChat,omitempty" bson:"IsTopChat,omitempty"`
	IsNoDisturb          *bool    `protobuf:"varint,2,opt,name=IsNoDisturb" json:"IsNoDisturb,omitempty" bson:"IsNoDisturb,omitempty"`
	IsSaveAdd            *bool    `protobuf:"varint,3,opt,name=IsSaveAdd" json:"IsSaveAdd,omitempty" bson:"IsSaveAdd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PersonalTeamSetting) Reset()         { *m = PersonalTeamSetting{} }
func (m *PersonalTeamSetting) String() string { return proto.CompactTextString(m) }
func (*PersonalTeamSetting) ProtoMessage()    {}
func (*PersonalTeamSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{35}
}
func (m *PersonalTeamSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersonalTeamSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PersonalTeamSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PersonalTeamSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersonalTeamSetting.Merge(m, src)
}
func (m *PersonalTeamSetting) XXX_Size() int {
	return m.Size()
}
func (m *PersonalTeamSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_PersonalTeamSetting.DiscardUnknown(m)
}

var xxx_messageInfo_PersonalTeamSetting proto.InternalMessageInfo

func (m *PersonalTeamSetting) GetIsTopChat() bool {
	if m != nil && m.IsTopChat != nil {
		return *m.IsTopChat
	}
	return false
}

func (m *PersonalTeamSetting) GetIsNoDisturb() bool {
	if m != nil && m.IsNoDisturb != nil {
		return *m.IsNoDisturb
	}
	return false
}

func (m *PersonalTeamSetting) GetIsSaveAdd() bool {
	if m != nil && m.IsSaveAdd != nil {
		return *m.IsSaveAdd
	}
	return false
}

//领取红包记录 red_packet_log
type RedPacketLog struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	RedPacketId          *int64   `protobuf:"varint,2,opt,name=RedPacketId" json:"RedPacketId,omitempty" bson:"RedPacketId,omitempty"`
	PlayerId             *int64   `protobuf:"varint,3,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	NickName             *string  `protobuf:"bytes,4,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	HeadUrl              *string  `protobuf:"bytes,5,opt,name=HeadUrl" json:"HeadUrl,omitempty" bson:"HeadUrl,omitempty"`
	Money                *int64   `protobuf:"varint,6,opt,name=Money" json:"Money,omitempty" bson:"Money,omitempty"`
	CreateTime           *int64   `protobuf:"varint,7,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	Sex                  *int32   `protobuf:"varint,8,opt,name=Sex" json:"Sex,omitempty" bson:"Sex,omitempty"`
	IsSave               *bool    `protobuf:"varint,9,opt,name=IsSave" json:"IsSave,omitempty" bson:"IsSave,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RedPacketLog) Reset()         { *m = RedPacketLog{} }
func (m *RedPacketLog) String() string { return proto.CompactTextString(m) }
func (*RedPacketLog) ProtoMessage()    {}
func (*RedPacketLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{36}
}
func (m *RedPacketLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedPacketLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedPacketLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedPacketLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedPacketLog.Merge(m, src)
}
func (m *RedPacketLog) XXX_Size() int {
	return m.Size()
}
func (m *RedPacketLog) XXX_DiscardUnknown() {
	xxx_messageInfo_RedPacketLog.DiscardUnknown(m)
}

var xxx_messageInfo_RedPacketLog proto.InternalMessageInfo

func (m *RedPacketLog) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RedPacketLog) GetRedPacketId() int64 {
	if m != nil && m.RedPacketId != nil {
		return *m.RedPacketId
	}
	return 0
}

func (m *RedPacketLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *RedPacketLog) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *RedPacketLog) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *RedPacketLog) GetMoney() int64 {
	if m != nil && m.Money != nil {
		return *m.Money
	}
	return 0
}

func (m *RedPacketLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *RedPacketLog) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *RedPacketLog) GetIsSave() bool {
	if m != nil && m.IsSave != nil {
		return *m.IsSave
	}
	return false
}

type RedPacketTotalInfo struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	RecTotalMoney        *int64   `protobuf:"varint,3,opt,name=RecTotalMoney" json:"RecTotalMoney,omitempty" bson:"RecTotalMoney,omitempty"`
	RecCount             *int64   `protobuf:"varint,4,opt,name=RecCount" json:"RecCount,omitempty" bson:"RecCount,omitempty"`
	LuckCnt              *int64   `protobuf:"varint,5,opt,name=LuckCnt" json:"LuckCnt,omitempty" bson:"LuckCnt,omitempty"`
	SendTotalMoney       *int64   `protobuf:"varint,6,opt,name=SendTotalMoney" json:"SendTotalMoney,omitempty" bson:"SendTotalMoney,omitempty"`
	SendCount            *int64   `protobuf:"varint,7,opt,name=SendCount" json:"SendCount,omitempty" bson:"SendCount,omitempty"`
	CreateTime           *int64   `protobuf:"varint,8,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RedPacketTotalInfo) Reset()         { *m = RedPacketTotalInfo{} }
func (m *RedPacketTotalInfo) String() string { return proto.CompactTextString(m) }
func (*RedPacketTotalInfo) ProtoMessage()    {}
func (*RedPacketTotalInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{37}
}
func (m *RedPacketTotalInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedPacketTotalInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedPacketTotalInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedPacketTotalInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedPacketTotalInfo.Merge(m, src)
}
func (m *RedPacketTotalInfo) XXX_Size() int {
	return m.Size()
}
func (m *RedPacketTotalInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RedPacketTotalInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RedPacketTotalInfo proto.InternalMessageInfo

func (m *RedPacketTotalInfo) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *RedPacketTotalInfo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *RedPacketTotalInfo) GetRecTotalMoney() int64 {
	if m != nil && m.RecTotalMoney != nil {
		return *m.RecTotalMoney
	}
	return 0
}

func (m *RedPacketTotalInfo) GetRecCount() int64 {
	if m != nil && m.RecCount != nil {
		return *m.RecCount
	}
	return 0
}

func (m *RedPacketTotalInfo) GetLuckCnt() int64 {
	if m != nil && m.LuckCnt != nil {
		return *m.LuckCnt
	}
	return 0
}

func (m *RedPacketTotalInfo) GetSendTotalMoney() int64 {
	if m != nil && m.SendTotalMoney != nil {
		return *m.SendTotalMoney
	}
	return 0
}

func (m *RedPacketTotalInfo) GetSendCount() int64 {
	if m != nil && m.SendCount != nil {
		return *m.SendCount
	}
	return 0
}

func (m *RedPacketTotalInfo) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

//红包 red_packet
type RedPacket struct {
	Id                   *int64          `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Type                 *int32          `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	Sender               *int64          `protobuf:"varint,3,opt,name=Sender" json:"Sender,omitempty" bson:"Sender,omitempty"`
	SenderName           *string         `protobuf:"bytes,4,opt,name=SenderName" json:"SenderName,omitempty" bson:"SenderName,omitempty"`
	SenderHead           *string         `protobuf:"bytes,5,opt,name=SenderHead" json:"SenderHead,omitempty" bson:"SenderHead,omitempty"`
	TargetId             *int64          `protobuf:"varint,6,opt,name=TargetId" json:"TargetId,omitempty" bson:"TargetId,omitempty"`
	TotalMoney           *int64          `protobuf:"varint,7,opt,name=TotalMoney" json:"TotalMoney,omitempty" bson:"TotalMoney,omitempty"`
	TotalCount           *int32          `protobuf:"varint,8,opt,name=TotalCount" json:"TotalCount,omitempty" bson:"TotalCount,omitempty"`
	PerMoney             *int64          `protobuf:"varint,9,opt,name=PerMoney" json:"PerMoney,omitempty" bson:"PerMoney,omitempty"`
	Content              *string         `protobuf:"bytes,10,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	CreateTime           *int64          `protobuf:"varint,11,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	CurMoney             *int64          `protobuf:"varint,12,opt,name=CurMoney" json:"CurMoney,omitempty" bson:"CurMoney,omitempty"`
	CurCount             *int32          `protobuf:"varint,13,opt,name=CurCount" json:"CurCount,omitempty" bson:"CurCount,omitempty"`
	State                *int32          `protobuf:"varint,14,opt,name=State" json:"State,omitempty" bson:"State,omitempty"`
	Packets              []int64         `protobuf:"varint,15,rep,name=Packets" json:"Packets,omitempty" bson:"Packets,omitempty"`
	Logs                 []*RedPacketLog `protobuf:"bytes,16,rep,name=Logs" json:"-" bson:"-"`
	PayPassWord          *string         `protobuf:"bytes,17,opt,name=PayPassWord" json:"-" bson:"-"`
	PlayerList           []int64         `protobuf:"varint,18,rep,name=PlayerList" json:"PlayerList,omitempty" bson:"PlayerList,omitempty"`
	PayWay               *int32          `protobuf:"varint,19,opt,name=PayWay" json:"PayWay,omitempty" bson:"PayWay,omitempty"`
	BankCard             *string         `protobuf:"bytes,20,opt,name=BankCard" json:"-" bson:"-"`
	OrderId              *string         `protobuf:"bytes,21,opt,name=OrderId" json:"OrderId,omitempty" bson:"OrderId,omitempty"`
	LuckId               *int64          `protobuf:"varint,22,opt,name=LuckId" json:"LuckId,omitempty" bson:"LuckId,omitempty"`
	PayOrderInfo         *PayOrderInfo   `protobuf:"bytes,23,opt,name=PayOrderInfo" json:"-" bson:"-"`
	Sex                  *int32          `protobuf:"varint,24,opt,name=Sex" json:"Sex,omitempty" bson:"Sex,omitempty"`
	OverTime             *int64          `protobuf:"varint,25,opt,name=OverTime" json:"OverTime,omitempty" bson:"OverTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-" bson:"-"`
	XXX_unrecognized     []byte          `json:"-" bson:"-"`
	XXX_sizecache        int32           `json:"-" bson:"-"`
}

func (m *RedPacket) Reset()         { *m = RedPacket{} }
func (m *RedPacket) String() string { return proto.CompactTextString(m) }
func (*RedPacket) ProtoMessage()    {}
func (*RedPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{38}
}
func (m *RedPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedPacket.Merge(m, src)
}
func (m *RedPacket) XXX_Size() int {
	return m.Size()
}
func (m *RedPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_RedPacket.DiscardUnknown(m)
}

var xxx_messageInfo_RedPacket proto.InternalMessageInfo

func (m *RedPacket) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RedPacket) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *RedPacket) GetSender() int64 {
	if m != nil && m.Sender != nil {
		return *m.Sender
	}
	return 0
}

func (m *RedPacket) GetSenderName() string {
	if m != nil && m.SenderName != nil {
		return *m.SenderName
	}
	return ""
}

func (m *RedPacket) GetSenderHead() string {
	if m != nil && m.SenderHead != nil {
		return *m.SenderHead
	}
	return ""
}

func (m *RedPacket) GetTargetId() int64 {
	if m != nil && m.TargetId != nil {
		return *m.TargetId
	}
	return 0
}

func (m *RedPacket) GetTotalMoney() int64 {
	if m != nil && m.TotalMoney != nil {
		return *m.TotalMoney
	}
	return 0
}

func (m *RedPacket) GetTotalCount() int32 {
	if m != nil && m.TotalCount != nil {
		return *m.TotalCount
	}
	return 0
}

func (m *RedPacket) GetPerMoney() int64 {
	if m != nil && m.PerMoney != nil {
		return *m.PerMoney
	}
	return 0
}

func (m *RedPacket) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *RedPacket) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *RedPacket) GetCurMoney() int64 {
	if m != nil && m.CurMoney != nil {
		return *m.CurMoney
	}
	return 0
}

func (m *RedPacket) GetCurCount() int32 {
	if m != nil && m.CurCount != nil {
		return *m.CurCount
	}
	return 0
}

func (m *RedPacket) GetState() int32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

func (m *RedPacket) GetPackets() []int64 {
	if m != nil {
		return m.Packets
	}
	return nil
}

func (m *RedPacket) GetLogs() []*RedPacketLog {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *RedPacket) GetPayPassWord() string {
	if m != nil && m.PayPassWord != nil {
		return *m.PayPassWord
	}
	return ""
}

func (m *RedPacket) GetPlayerList() []int64 {
	if m != nil {
		return m.PlayerList
	}
	return nil
}

func (m *RedPacket) GetPayWay() int32 {
	if m != nil && m.PayWay != nil {
		return *m.PayWay
	}
	return 0
}

func (m *RedPacket) GetBankCard() string {
	if m != nil && m.BankCard != nil {
		return *m.BankCard
	}
	return ""
}

func (m *RedPacket) GetOrderId() string {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return ""
}

func (m *RedPacket) GetLuckId() int64 {
	if m != nil && m.LuckId != nil {
		return *m.LuckId
	}
	return 0
}

func (m *RedPacket) GetPayOrderInfo() *PayOrderInfo {
	if m != nil {
		return m.PayOrderInfo
	}
	return nil
}

func (m *RedPacket) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *RedPacket) GetOverTime() int64 {
	if m != nil && m.OverTime != nil {
		return *m.OverTime
	}
	return 0
}

//转账记录 transfer_money
type TransferMoney struct {
	Id                   *int64        `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Sender               *int64        `protobuf:"varint,2,opt,name=Sender" json:"Sender,omitempty" bson:"Sender,omitempty"`
	TargetId             *int64        `protobuf:"varint,3,opt,name=TargetId" json:"TargetId,omitempty" bson:"TargetId,omitempty"`
	Way                  *int32        `protobuf:"varint,4,opt,name=Way" json:"Way,omitempty" bson:"Way,omitempty"`
	Card                 *string       `protobuf:"bytes,5,opt,name=Card" json:"Card,omitempty" bson:"Card,omitempty"`
	Gold                 *int64        `protobuf:"varint,6,opt,name=Gold" json:"Gold,omitempty" bson:"Gold,omitempty"`
	Content              *string       `protobuf:"bytes,7,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	CreateTime           *int64        `protobuf:"varint,8,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	State                *int32        `protobuf:"varint,9,opt,name=State" json:"State,omitempty" bson:"State,omitempty"`
	PayPassWord          *string       `protobuf:"bytes,10,opt,name=PayPassWord" json:"-" bson:"-"`
	OpenTime             *int64        `protobuf:"varint,11,opt,name=OpenTime" json:"OpenTime,omitempty" bson:"OpenTime,omitempty"`
	OpenWay              *int32        `protobuf:"varint,12,opt,name=OpenWay" json:"-" bson:"-"`
	OrderId              *string       `protobuf:"bytes,13,opt,name=OrderId" json:"OrderId,omitempty" bson:"OrderId,omitempty"`
	PayOrderInfo         *PayOrderInfo `protobuf:"bytes,14,opt,name=PayOrderInfo" json:"-" bson:"-"`
	BankInfo             *string       `protobuf:"bytes,15,opt,name=BankInfo" json:"BankInfo,omitempty" bson:"BankInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-" bson:"-"`
	XXX_unrecognized     []byte        `json:"-" bson:"-"`
	XXX_sizecache        int32         `json:"-" bson:"-"`
}

func (m *TransferMoney) Reset()         { *m = TransferMoney{} }
func (m *TransferMoney) String() string { return proto.CompactTextString(m) }
func (*TransferMoney) ProtoMessage()    {}
func (*TransferMoney) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{39}
}
func (m *TransferMoney) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferMoney) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferMoney.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferMoney) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferMoney.Merge(m, src)
}
func (m *TransferMoney) XXX_Size() int {
	return m.Size()
}
func (m *TransferMoney) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferMoney.DiscardUnknown(m)
}

var xxx_messageInfo_TransferMoney proto.InternalMessageInfo

func (m *TransferMoney) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TransferMoney) GetSender() int64 {
	if m != nil && m.Sender != nil {
		return *m.Sender
	}
	return 0
}

func (m *TransferMoney) GetTargetId() int64 {
	if m != nil && m.TargetId != nil {
		return *m.TargetId
	}
	return 0
}

func (m *TransferMoney) GetWay() int32 {
	if m != nil && m.Way != nil {
		return *m.Way
	}
	return 0
}

func (m *TransferMoney) GetCard() string {
	if m != nil && m.Card != nil {
		return *m.Card
	}
	return ""
}

func (m *TransferMoney) GetGold() int64 {
	if m != nil && m.Gold != nil {
		return *m.Gold
	}
	return 0
}

func (m *TransferMoney) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *TransferMoney) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TransferMoney) GetState() int32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

func (m *TransferMoney) GetPayPassWord() string {
	if m != nil && m.PayPassWord != nil {
		return *m.PayPassWord
	}
	return ""
}

func (m *TransferMoney) GetOpenTime() int64 {
	if m != nil && m.OpenTime != nil {
		return *m.OpenTime
	}
	return 0
}

func (m *TransferMoney) GetOpenWay() int32 {
	if m != nil && m.OpenWay != nil {
		return *m.OpenWay
	}
	return 0
}

func (m *TransferMoney) GetOrderId() string {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return ""
}

func (m *TransferMoney) GetPayOrderInfo() *PayOrderInfo {
	if m != nil {
		return m.PayOrderInfo
	}
	return nil
}

func (m *TransferMoney) GetBankInfo() string {
	if m != nil && m.BankInfo != nil {
		return *m.BankInfo
	}
	return ""
}

type PayOrderInfo struct {
	//发起支付信息
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	ProduceName          *string  `protobuf:"bytes,2,opt,name=ProduceName" json:"ProduceName,omitempty" bson:"ProduceName,omitempty"`
	Amount               *string  `protobuf:"bytes,3,opt,name=Amount" json:"Amount,omitempty" bson:"Amount,omitempty"`
	PayId                *int32   `protobuf:"varint,4,opt,name=PayId" json:"PayId,omitempty" bson:"PayId,omitempty"`
	PayType              *int32   `protobuf:"varint,5,opt,name=PayType" json:"PayType,omitempty" bson:"PayType,omitempty"`
	PaySence             *int32   `protobuf:"varint,6,opt,name=PaySence" json:"PaySence,omitempty" bson:"PaySence,omitempty"`
	PayWay               *int32   `protobuf:"varint,7,opt,name=PayWay" json:"PayWay,omitempty" bson:"PayWay,omitempty"`
	PayTargetId          *int64   `protobuf:"varint,8,opt,name=PayTargetId" json:"PayTargetId,omitempty" bson:"PayTargetId,omitempty"`
	TotalCount           *int32   `protobuf:"varint,9,opt,name=TotalCount" json:"TotalCount,omitempty" bson:"TotalCount,omitempty"`
	Content              *string  `protobuf:"bytes,10,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	ExtendValue          *string  `protobuf:"bytes,11,opt,name=ExtendValue" json:"ExtendValue,omitempty" bson:"ExtendValue,omitempty"`
	PayBankNo            *string  `protobuf:"bytes,12,opt,name=PayBankNo" json:"PayBankNo,omitempty" bson:"PayBankNo,omitempty"`
	PayPassType          *int32   `protobuf:"varint,13,opt,name=PayPassType" json:"PayPassType,omitempty" bson:"PayPassType,omitempty"`
	ApkCode              *int32   `protobuf:"varint,14,opt,name=ApkCode" json:"ApkCode,omitempty" bson:"ApkCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PayOrderInfo) Reset()         { *m = PayOrderInfo{} }
func (m *PayOrderInfo) String() string { return proto.CompactTextString(m) }
func (*PayOrderInfo) ProtoMessage()    {}
func (*PayOrderInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{40}
}
func (m *PayOrderInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayOrderInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayOrderInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayOrderInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayOrderInfo.Merge(m, src)
}
func (m *PayOrderInfo) XXX_Size() int {
	return m.Size()
}
func (m *PayOrderInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PayOrderInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PayOrderInfo proto.InternalMessageInfo

func (m *PayOrderInfo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PayOrderInfo) GetProduceName() string {
	if m != nil && m.ProduceName != nil {
		return *m.ProduceName
	}
	return ""
}

func (m *PayOrderInfo) GetAmount() string {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return ""
}

func (m *PayOrderInfo) GetPayId() int32 {
	if m != nil && m.PayId != nil {
		return *m.PayId
	}
	return 0
}

func (m *PayOrderInfo) GetPayType() int32 {
	if m != nil && m.PayType != nil {
		return *m.PayType
	}
	return 0
}

func (m *PayOrderInfo) GetPaySence() int32 {
	if m != nil && m.PaySence != nil {
		return *m.PaySence
	}
	return 0
}

func (m *PayOrderInfo) GetPayWay() int32 {
	if m != nil && m.PayWay != nil {
		return *m.PayWay
	}
	return 0
}

func (m *PayOrderInfo) GetPayTargetId() int64 {
	if m != nil && m.PayTargetId != nil {
		return *m.PayTargetId
	}
	return 0
}

func (m *PayOrderInfo) GetTotalCount() int32 {
	if m != nil && m.TotalCount != nil {
		return *m.TotalCount
	}
	return 0
}

func (m *PayOrderInfo) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *PayOrderInfo) GetExtendValue() string {
	if m != nil && m.ExtendValue != nil {
		return *m.ExtendValue
	}
	return ""
}

func (m *PayOrderInfo) GetPayBankNo() string {
	if m != nil && m.PayBankNo != nil {
		return *m.PayBankNo
	}
	return ""
}

func (m *PayOrderInfo) GetPayPassType() int32 {
	if m != nil && m.PayPassType != nil {
		return *m.PayPassType
	}
	return 0
}

func (m *PayOrderInfo) GetApkCode() int32 {
	if m != nil && m.ApkCode != nil {
		return *m.ApkCode
	}
	return 0
}

//发起支付结果响应
type PayOrderResult struct {
	Result               *bool    `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	PayInfo              *string  `protobuf:"bytes,2,opt,name=PayInfo" json:"PayInfo,omitempty" bson:"PayInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PayOrderResult) Reset()         { *m = PayOrderResult{} }
func (m *PayOrderResult) String() string { return proto.CompactTextString(m) }
func (*PayOrderResult) ProtoMessage()    {}
func (*PayOrderResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{41}
}
func (m *PayOrderResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayOrderResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayOrderResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayOrderResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayOrderResult.Merge(m, src)
}
func (m *PayOrderResult) XXX_Size() int {
	return m.Size()
}
func (m *PayOrderResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PayOrderResult.DiscardUnknown(m)
}

var xxx_messageInfo_PayOrderResult proto.InternalMessageInfo

func (m *PayOrderResult) GetResult() bool {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return false
}

func (m *PayOrderResult) GetPayInfo() string {
	if m != nil && m.PayInfo != nil {
		return *m.PayInfo
	}
	return ""
}

//===============================================报表
//玩家留存报表 report_player_keep
type PlayerKeepReport struct {
	CreateTime           *int64   `protobuf:"varint,100,opt,name=CreateTime" json:"_id,omitempty" bson:"_id,omitempty"`
	TodayRegister        *int32   `protobuf:"varint,1,opt,name=TodayRegister" json:"TodayRegister,omitempty" bson:"TodayRegister,omitempty"`
	NextKeep             *int32   `protobuf:"varint,2,opt,name=NextKeep" json:"NextKeep,omitempty" bson:"NextKeep,omitempty"`
	ThreeKeep            *int32   `protobuf:"varint,3,opt,name=ThreeKeep" json:"ThreeKeep,omitempty" bson:"ThreeKeep,omitempty"`
	FourKeep             *int32   `protobuf:"varint,4,opt,name=FourKeep" json:"FourKeep,omitempty" bson:"FourKeep,omitempty"`
	FiveKeep             *int32   `protobuf:"varint,5,opt,name=FiveKeep" json:"FiveKeep,omitempty" bson:"FiveKeep,omitempty"`
	SixKeep              *int32   `protobuf:"varint,6,opt,name=SixKeep" json:"SixKeep,omitempty" bson:"SixKeep,omitempty"`
	SevenKeep            *int32   `protobuf:"varint,7,opt,name=SevenKeep" json:"SevenKeep,omitempty" bson:"SevenKeep,omitempty"`
	EightKeep            *int32   `protobuf:"varint,8,opt,name=EightKeep" json:"EightKeep,omitempty" bson:"EightKeep,omitempty"`
	NineKeep             *int32   `protobuf:"varint,9,opt,name=NineKeep" json:"NineKeep,omitempty" bson:"NineKeep,omitempty"`
	TenKeep              *int32   `protobuf:"varint,10,opt,name=TenKeep" json:"TenKeep,omitempty" bson:"TenKeep,omitempty"`
	ElevenKeep           *int32   `protobuf:"varint,11,opt,name=ElevenKeep" json:"ElevenKeep,omitempty" bson:"ElevenKeep,omitempty"`
	TwelveKeep           *int32   `protobuf:"varint,12,opt,name=TwelveKeep" json:"TwelveKeep,omitempty" bson:"TwelveKeep,omitempty"`
	ThirteenKeep         *int32   `protobuf:"varint,13,opt,name=ThirteenKeep" json:"ThirteenKeep,omitempty" bson:"ThirteenKeep,omitempty"`
	FourteenKeep         *int32   `protobuf:"varint,14,opt,name=FourteenKeep" json:"FourteenKeep,omitempty" bson:"FourteenKeep,omitempty"`
	FifteenKeep          *int32   `protobuf:"varint,15,opt,name=FifteenKeep" json:"FifteenKeep,omitempty" bson:"FifteenKeep,omitempty"`
	SixteenKeep          *int32   `protobuf:"varint,16,opt,name=SixteenKeep" json:"SixteenKeep,omitempty" bson:"SixteenKeep,omitempty"`
	SeventeenKeep        *int32   `protobuf:"varint,17,opt,name=SeventeenKeep" json:"SeventeenKeep,omitempty" bson:"SeventeenKeep,omitempty"`
	EighteenKeep         *int32   `protobuf:"varint,18,opt,name=EighteenKeep" json:"EighteenKeep,omitempty" bson:"EighteenKeep,omitempty"`
	NineteenKeep         *int32   `protobuf:"varint,19,opt,name=NineteenKeep" json:"NineteenKeep,omitempty" bson:"NineteenKeep,omitempty"`
	TwentyKeep           *int32   `protobuf:"varint,20,opt,name=TwentyKeep" json:"TwentyKeep,omitempty" bson:"TwentyKeep,omitempty"`
	TwentyOneKeep        *int32   `protobuf:"varint,21,opt,name=TwentyOneKeep" json:"TwentyOneKeep,omitempty" bson:"TwentyOneKeep,omitempty"`
	TwentyTwoKeep        *int32   `protobuf:"varint,22,opt,name=TwentyTwoKeep" json:"TwentyTwoKeep,omitempty" bson:"TwentyTwoKeep,omitempty"`
	TwentyThreeKeep      *int32   `protobuf:"varint,23,opt,name=TwentyThreeKeep" json:"TwentyThreeKeep,omitempty" bson:"TwentyThreeKeep,omitempty"`
	TwentyFourKeep       *int32   `protobuf:"varint,24,opt,name=TwentyFourKeep" json:"TwentyFourKeep,omitempty" bson:"TwentyFourKeep,omitempty"`
	TwentyFiveKeep       *int32   `protobuf:"varint,25,opt,name=TwentyFiveKeep" json:"TwentyFiveKeep,omitempty" bson:"TwentyFiveKeep,omitempty"`
	TwentySixKeep        *int32   `protobuf:"varint,26,opt,name=TwentySixKeep" json:"TwentySixKeep,omitempty" bson:"TwentySixKeep,omitempty"`
	TwentySevenKeep      *int32   `protobuf:"varint,27,opt,name=TwentySevenKeep" json:"TwentySevenKeep,omitempty" bson:"TwentySevenKeep,omitempty"`
	TwentyEightKeep      *int32   `protobuf:"varint,28,opt,name=TwentyEightKeep" json:"TwentyEightKeep,omitempty" bson:"TwentyEightKeep,omitempty"`
	TwentyNineKeep       *int32   `protobuf:"varint,29,opt,name=TwentyNineKeep" json:"TwentyNineKeep,omitempty" bson:"TwentyNineKeep,omitempty"`
	Thirtykeep           *int32   `protobuf:"varint,30,opt,name=Thirtykeep" json:"Thirtykeep,omitempty" bson:"Thirtykeep,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerKeepReport) Reset()         { *m = PlayerKeepReport{} }
func (m *PlayerKeepReport) String() string { return proto.CompactTextString(m) }
func (*PlayerKeepReport) ProtoMessage()    {}
func (*PlayerKeepReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{42}
}
func (m *PlayerKeepReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerKeepReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerKeepReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerKeepReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerKeepReport.Merge(m, src)
}
func (m *PlayerKeepReport) XXX_Size() int {
	return m.Size()
}
func (m *PlayerKeepReport) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerKeepReport.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerKeepReport proto.InternalMessageInfo

func (m *PlayerKeepReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PlayerKeepReport) GetTodayRegister() int32 {
	if m != nil && m.TodayRegister != nil {
		return *m.TodayRegister
	}
	return 0
}

func (m *PlayerKeepReport) GetNextKeep() int32 {
	if m != nil && m.NextKeep != nil {
		return *m.NextKeep
	}
	return 0
}

func (m *PlayerKeepReport) GetThreeKeep() int32 {
	if m != nil && m.ThreeKeep != nil {
		return *m.ThreeKeep
	}
	return 0
}

func (m *PlayerKeepReport) GetFourKeep() int32 {
	if m != nil && m.FourKeep != nil {
		return *m.FourKeep
	}
	return 0
}

func (m *PlayerKeepReport) GetFiveKeep() int32 {
	if m != nil && m.FiveKeep != nil {
		return *m.FiveKeep
	}
	return 0
}

func (m *PlayerKeepReport) GetSixKeep() int32 {
	if m != nil && m.SixKeep != nil {
		return *m.SixKeep
	}
	return 0
}

func (m *PlayerKeepReport) GetSevenKeep() int32 {
	if m != nil && m.SevenKeep != nil {
		return *m.SevenKeep
	}
	return 0
}

func (m *PlayerKeepReport) GetEightKeep() int32 {
	if m != nil && m.EightKeep != nil {
		return *m.EightKeep
	}
	return 0
}

func (m *PlayerKeepReport) GetNineKeep() int32 {
	if m != nil && m.NineKeep != nil {
		return *m.NineKeep
	}
	return 0
}

func (m *PlayerKeepReport) GetTenKeep() int32 {
	if m != nil && m.TenKeep != nil {
		return *m.TenKeep
	}
	return 0
}

func (m *PlayerKeepReport) GetElevenKeep() int32 {
	if m != nil && m.ElevenKeep != nil {
		return *m.ElevenKeep
	}
	return 0
}

func (m *PlayerKeepReport) GetTwelveKeep() int32 {
	if m != nil && m.TwelveKeep != nil {
		return *m.TwelveKeep
	}
	return 0
}

func (m *PlayerKeepReport) GetThirteenKeep() int32 {
	if m != nil && m.ThirteenKeep != nil {
		return *m.ThirteenKeep
	}
	return 0
}

func (m *PlayerKeepReport) GetFourteenKeep() int32 {
	if m != nil && m.FourteenKeep != nil {
		return *m.FourteenKeep
	}
	return 0
}

func (m *PlayerKeepReport) GetFifteenKeep() int32 {
	if m != nil && m.FifteenKeep != nil {
		return *m.FifteenKeep
	}
	return 0
}

func (m *PlayerKeepReport) GetSixteenKeep() int32 {
	if m != nil && m.SixteenKeep != nil {
		return *m.SixteenKeep
	}
	return 0
}

func (m *PlayerKeepReport) GetSeventeenKeep() int32 {
	if m != nil && m.SeventeenKeep != nil {
		return *m.SeventeenKeep
	}
	return 0
}

func (m *PlayerKeepReport) GetEighteenKeep() int32 {
	if m != nil && m.EighteenKeep != nil {
		return *m.EighteenKeep
	}
	return 0
}

func (m *PlayerKeepReport) GetNineteenKeep() int32 {
	if m != nil && m.NineteenKeep != nil {
		return *m.NineteenKeep
	}
	return 0
}

func (m *PlayerKeepReport) GetTwentyKeep() int32 {
	if m != nil && m.TwentyKeep != nil {
		return *m.TwentyKeep
	}
	return 0
}

func (m *PlayerKeepReport) GetTwentyOneKeep() int32 {
	if m != nil && m.TwentyOneKeep != nil {
		return *m.TwentyOneKeep
	}
	return 0
}

func (m *PlayerKeepReport) GetTwentyTwoKeep() int32 {
	if m != nil && m.TwentyTwoKeep != nil {
		return *m.TwentyTwoKeep
	}
	return 0
}

func (m *PlayerKeepReport) GetTwentyThreeKeep() int32 {
	if m != nil && m.TwentyThreeKeep != nil {
		return *m.TwentyThreeKeep
	}
	return 0
}

func (m *PlayerKeepReport) GetTwentyFourKeep() int32 {
	if m != nil && m.TwentyFourKeep != nil {
		return *m.TwentyFourKeep
	}
	return 0
}

func (m *PlayerKeepReport) GetTwentyFiveKeep() int32 {
	if m != nil && m.TwentyFiveKeep != nil {
		return *m.TwentyFiveKeep
	}
	return 0
}

func (m *PlayerKeepReport) GetTwentySixKeep() int32 {
	if m != nil && m.TwentySixKeep != nil {
		return *m.TwentySixKeep
	}
	return 0
}

func (m *PlayerKeepReport) GetTwentySevenKeep() int32 {
	if m != nil && m.TwentySevenKeep != nil {
		return *m.TwentySevenKeep
	}
	return 0
}

func (m *PlayerKeepReport) GetTwentyEightKeep() int32 {
	if m != nil && m.TwentyEightKeep != nil {
		return *m.TwentyEightKeep
	}
	return 0
}

func (m *PlayerKeepReport) GetTwentyNineKeep() int32 {
	if m != nil && m.TwentyNineKeep != nil {
		return *m.TwentyNineKeep
	}
	return 0
}

func (m *PlayerKeepReport) GetThirtykeep() int32 {
	if m != nil && m.Thirtykeep != nil {
		return *m.Thirtykeep
	}
	return 0
}

type PlayerOnlineReport struct {
	CreateTime           *int64   `protobuf:"varint,100,opt,name=CreateTime" json:"_id,omitempty" bson:"_id,omitempty"`
	Clock0               *int64   `protobuf:"varint,1,opt,name=Clock0" json:"Clock0,omitempty" bson:"Clock0,omitempty"`
	Clock1               *int64   `protobuf:"varint,2,opt,name=Clock1" json:"Clock1,omitempty" bson:"Clock1,omitempty"`
	Clock2               *int64   `protobuf:"varint,3,opt,name=Clock2" json:"Clock2,omitempty" bson:"Clock2,omitempty"`
	Clock3               *int64   `protobuf:"varint,4,opt,name=Clock3" json:"Clock3,omitempty" bson:"Clock3,omitempty"`
	Clock4               *int64   `protobuf:"varint,5,opt,name=Clock4" json:"Clock4,omitempty" bson:"Clock4,omitempty"`
	Clock5               *int64   `protobuf:"varint,6,opt,name=Clock5" json:"Clock5,omitempty" bson:"Clock5,omitempty"`
	Clock6               *int64   `protobuf:"varint,7,opt,name=Clock6" json:"Clock6,omitempty" bson:"Clock6,omitempty"`
	Clock7               *int64   `protobuf:"varint,8,opt,name=Clock7" json:"Clock7,omitempty" bson:"Clock7,omitempty"`
	Clock8               *int64   `protobuf:"varint,9,opt,name=Clock8" json:"Clock8,omitempty" bson:"Clock8,omitempty"`
	Clock9               *int64   `protobuf:"varint,10,opt,name=Clock9" json:"Clock9,omitempty" bson:"Clock9,omitempty"`
	Clock10              *int64   `protobuf:"varint,11,opt,name=Clock10" json:"Clock10,omitempty" bson:"Clock10,omitempty"`
	Clock11              *int64   `protobuf:"varint,12,opt,name=Clock11" json:"Clock11,omitempty" bson:"Clock11,omitempty"`
	Clock12              *int64   `protobuf:"varint,13,opt,name=Clock12" json:"Clock12,omitempty" bson:"Clock12,omitempty"`
	Clock13              *int64   `protobuf:"varint,14,opt,name=Clock13" json:"Clock13,omitempty" bson:"Clock13,omitempty"`
	Clock14              *int64   `protobuf:"varint,15,opt,name=Clock14" json:"Clock14,omitempty" bson:"Clock14,omitempty"`
	Clock15              *int64   `protobuf:"varint,16,opt,name=Clock15" json:"Clock15,omitempty" bson:"Clock15,omitempty"`
	Clock16              *int64   `protobuf:"varint,17,opt,name=Clock16" json:"Clock16,omitempty" bson:"Clock16,omitempty"`
	Clock17              *int64   `protobuf:"varint,18,opt,name=Clock17" json:"Clock17,omitempty" bson:"Clock17,omitempty"`
	Clock18              *int64   `protobuf:"varint,19,opt,name=Clock18" json:"Clock18,omitempty" bson:"Clock18,omitempty"`
	Clock19              *int64   `protobuf:"varint,20,opt,name=Clock19" json:"Clock19,omitempty" bson:"Clock19,omitempty"`
	Clock20              *int64   `protobuf:"varint,21,opt,name=Clock20" json:"Clock20,omitempty" bson:"Clock20,omitempty"`
	Clock21              *int64   `protobuf:"varint,22,opt,name=Clock21" json:"Clock21,omitempty" bson:"Clock21,omitempty"`
	Clock22              *int64   `protobuf:"varint,23,opt,name=Clock22" json:"Clock22,omitempty" bson:"Clock22,omitempty"`
	Clock23              *int64   `protobuf:"varint,24,opt,name=Clock23" json:"Clock23,omitempty" bson:"Clock23,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerOnlineReport) Reset()         { *m = PlayerOnlineReport{} }
func (m *PlayerOnlineReport) String() string { return proto.CompactTextString(m) }
func (*PlayerOnlineReport) ProtoMessage()    {}
func (*PlayerOnlineReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{43}
}
func (m *PlayerOnlineReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerOnlineReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerOnlineReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerOnlineReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerOnlineReport.Merge(m, src)
}
func (m *PlayerOnlineReport) XXX_Size() int {
	return m.Size()
}
func (m *PlayerOnlineReport) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerOnlineReport.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerOnlineReport proto.InternalMessageInfo

func (m *PlayerOnlineReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PlayerOnlineReport) GetClock0() int64 {
	if m != nil && m.Clock0 != nil {
		return *m.Clock0
	}
	return 0
}

func (m *PlayerOnlineReport) GetClock1() int64 {
	if m != nil && m.Clock1 != nil {
		return *m.Clock1
	}
	return 0
}

func (m *PlayerOnlineReport) GetClock2() int64 {
	if m != nil && m.Clock2 != nil {
		return *m.Clock2
	}
	return 0
}

func (m *PlayerOnlineReport) GetClock3() int64 {
	if m != nil && m.Clock3 != nil {
		return *m.Clock3
	}
	return 0
}

func (m *PlayerOnlineReport) GetClock4() int64 {
	if m != nil && m.Clock4 != nil {
		return *m.Clock4
	}
	return 0
}

func (m *PlayerOnlineReport) GetClock5() int64 {
	if m != nil && m.Clock5 != nil {
		return *m.Clock5
	}
	return 0
}

func (m *PlayerOnlineReport) GetClock6() int64 {
	if m != nil && m.Clock6 != nil {
		return *m.Clock6
	}
	return 0
}

func (m *PlayerOnlineReport) GetClock7() int64 {
	if m != nil && m.Clock7 != nil {
		return *m.Clock7
	}
	return 0
}

func (m *PlayerOnlineReport) GetClock8() int64 {
	if m != nil && m.Clock8 != nil {
		return *m.Clock8
	}
	return 0
}

func (m *PlayerOnlineReport) GetClock9() int64 {
	if m != nil && m.Clock9 != nil {
		return *m.Clock9
	}
	return 0
}

func (m *PlayerOnlineReport) GetClock10() int64 {
	if m != nil && m.Clock10 != nil {
		return *m.Clock10
	}
	return 0
}

func (m *PlayerOnlineReport) GetClock11() int64 {
	if m != nil && m.Clock11 != nil {
		return *m.Clock11
	}
	return 0
}

func (m *PlayerOnlineReport) GetClock12() int64 {
	if m != nil && m.Clock12 != nil {
		return *m.Clock12
	}
	return 0
}

func (m *PlayerOnlineReport) GetClock13() int64 {
	if m != nil && m.Clock13 != nil {
		return *m.Clock13
	}
	return 0
}

func (m *PlayerOnlineReport) GetClock14() int64 {
	if m != nil && m.Clock14 != nil {
		return *m.Clock14
	}
	return 0
}

func (m *PlayerOnlineReport) GetClock15() int64 {
	if m != nil && m.Clock15 != nil {
		return *m.Clock15
	}
	return 0
}

func (m *PlayerOnlineReport) GetClock16() int64 {
	if m != nil && m.Clock16 != nil {
		return *m.Clock16
	}
	return 0
}

func (m *PlayerOnlineReport) GetClock17() int64 {
	if m != nil && m.Clock17 != nil {
		return *m.Clock17
	}
	return 0
}

func (m *PlayerOnlineReport) GetClock18() int64 {
	if m != nil && m.Clock18 != nil {
		return *m.Clock18
	}
	return 0
}

func (m *PlayerOnlineReport) GetClock19() int64 {
	if m != nil && m.Clock19 != nil {
		return *m.Clock19
	}
	return 0
}

func (m *PlayerOnlineReport) GetClock20() int64 {
	if m != nil && m.Clock20 != nil {
		return *m.Clock20
	}
	return 0
}

func (m *PlayerOnlineReport) GetClock21() int64 {
	if m != nil && m.Clock21 != nil {
		return *m.Clock21
	}
	return 0
}

func (m *PlayerOnlineReport) GetClock22() int64 {
	if m != nil && m.Clock22 != nil {
		return *m.Clock22
	}
	return 0
}

func (m *PlayerOnlineReport) GetClock23() int64 {
	if m != nil && m.Clock23 != nil {
		return *m.Clock23
	}
	return 0
}

//活动报表
type ActivityReport struct {
	CreateTime           *int64   `protobuf:"varint,100,opt,name=CreateTime" json:"_id,omitempty" bson:"_id,omitempty"`
	FullPlayerCount      *int64   `protobuf:"varint,1,opt,name=FullPlayerCount" json:"FullPlayerCount,omitempty" bson:"FullPlayerCount,omitempty"`
	NewBindCount         *int64   `protobuf:"varint,2,opt,name=NewBindCount" json:"NewBindCount,omitempty" bson:"NewBindCount,omitempty"`
	NewInviteCount       *int64   `protobuf:"varint,3,opt,name=NewInviteCount" json:"NewInviteCount,omitempty" bson:"NewInviteCount,omitempty"`
	NewPlayerCount       *int64   `protobuf:"varint,4,opt,name=NewPlayerCount" json:"NewPlayerCount,omitempty" bson:"NewPlayerCount,omitempty"`
	PlayerCount          *int64   `protobuf:"varint,5,opt,name=PlayerCount" json:"PlayerCount,omitempty" bson:"PlayerCount,omitempty"`
	LuckPlayerCount      *int64   `protobuf:"varint,6,opt,name=LuckPlayerCount" json:"LuckPlayerCount,omitempty" bson:"LuckPlayerCount,omitempty"`
	ShareTimes           *int64   `protobuf:"varint,7,opt,name=ShareTimes" json:"ShareTimes,omitempty" bson:"ShareTimes,omitempty"`
	TaskSquareCount      *int64   `protobuf:"varint,8,opt,name=TaskSquareCount" json:"TaskSquareCount,omitempty" bson:"TaskSquareCount,omitempty"`
	TaskRedPackCount     *int64   `protobuf:"varint,9,opt,name=TaskRedPackCount" json:"TaskRedPackCount,omitempty" bson:"TaskRedPackCount,omitempty"`
	TaskSignIn           *int64   `protobuf:"varint,10,opt,name=TaskSignIn" json:"TaskSignIn,omitempty" bson:"TaskSignIn,omitempty"`
	TaskShare            *int64   `protobuf:"varint,11,opt,name=TaskShare" json:"TaskShare,omitempty" bson:"TaskShare,omitempty"`
	CardHe               *int64   `protobuf:"varint,12,opt,name=CardHe" json:"CardHe,omitempty" bson:"CardHe,omitempty"`
	CardNing             *int64   `protobuf:"varint,13,opt,name=CardNing" json:"CardNing,omitempty" bson:"CardNing,omitempty"`
	CardMeng             *int64   `protobuf:"varint,14,opt,name=CardMeng" json:"CardMeng,omitempty" bson:"CardMeng,omitempty"`
	CardQu               *int64   `protobuf:"varint,15,opt,name=CardQu" json:"CardQu,omitempty" bson:"CardQu,omitempty"`
	CardLv               *int64   `protobuf:"varint,16,opt,name=CardLv" json:"CardLv,omitempty" bson:"CardLv,omitempty"`
	CardXing             *int64   `protobuf:"varint,17,opt,name=CardXing" json:"CardXing,omitempty" bson:"CardXing,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ActivityReport) Reset()         { *m = ActivityReport{} }
func (m *ActivityReport) String() string { return proto.CompactTextString(m) }
func (*ActivityReport) ProtoMessage()    {}
func (*ActivityReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{44}
}
func (m *ActivityReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityReport.Merge(m, src)
}
func (m *ActivityReport) XXX_Size() int {
	return m.Size()
}
func (m *ActivityReport) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityReport.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityReport proto.InternalMessageInfo

func (m *ActivityReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ActivityReport) GetFullPlayerCount() int64 {
	if m != nil && m.FullPlayerCount != nil {
		return *m.FullPlayerCount
	}
	return 0
}

func (m *ActivityReport) GetNewBindCount() int64 {
	if m != nil && m.NewBindCount != nil {
		return *m.NewBindCount
	}
	return 0
}

func (m *ActivityReport) GetNewInviteCount() int64 {
	if m != nil && m.NewInviteCount != nil {
		return *m.NewInviteCount
	}
	return 0
}

func (m *ActivityReport) GetNewPlayerCount() int64 {
	if m != nil && m.NewPlayerCount != nil {
		return *m.NewPlayerCount
	}
	return 0
}

func (m *ActivityReport) GetPlayerCount() int64 {
	if m != nil && m.PlayerCount != nil {
		return *m.PlayerCount
	}
	return 0
}

func (m *ActivityReport) GetLuckPlayerCount() int64 {
	if m != nil && m.LuckPlayerCount != nil {
		return *m.LuckPlayerCount
	}
	return 0
}

func (m *ActivityReport) GetShareTimes() int64 {
	if m != nil && m.ShareTimes != nil {
		return *m.ShareTimes
	}
	return 0
}

func (m *ActivityReport) GetTaskSquareCount() int64 {
	if m != nil && m.TaskSquareCount != nil {
		return *m.TaskSquareCount
	}
	return 0
}

func (m *ActivityReport) GetTaskRedPackCount() int64 {
	if m != nil && m.TaskRedPackCount != nil {
		return *m.TaskRedPackCount
	}
	return 0
}

func (m *ActivityReport) GetTaskSignIn() int64 {
	if m != nil && m.TaskSignIn != nil {
		return *m.TaskSignIn
	}
	return 0
}

func (m *ActivityReport) GetTaskShare() int64 {
	if m != nil && m.TaskShare != nil {
		return *m.TaskShare
	}
	return 0
}

func (m *ActivityReport) GetCardHe() int64 {
	if m != nil && m.CardHe != nil {
		return *m.CardHe
	}
	return 0
}

func (m *ActivityReport) GetCardNing() int64 {
	if m != nil && m.CardNing != nil {
		return *m.CardNing
	}
	return 0
}

func (m *ActivityReport) GetCardMeng() int64 {
	if m != nil && m.CardMeng != nil {
		return *m.CardMeng
	}
	return 0
}

func (m *ActivityReport) GetCardQu() int64 {
	if m != nil && m.CardQu != nil {
		return *m.CardQu
	}
	return 0
}

func (m *ActivityReport) GetCardLv() int64 {
	if m != nil && m.CardLv != nil {
		return *m.CardLv
	}
	return 0
}

func (m *ActivityReport) GetCardXing() int64 {
	if m != nil && m.CardXing != nil {
		return *m.CardXing
	}
	return 0
}

//虚拟商城报表
type CoinProductReport struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	CreateTime           *int64   `protobuf:"varint,2,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	ProductId            *int64   `protobuf:"varint,3,opt,name=ProductId" json:"ProductId,omitempty" bson:"ProductId,omitempty"`
	ProductType          *int32   `protobuf:"varint,4,opt,name=ProductType" json:"-" bson:"-"`
	ProductName          *string  `protobuf:"bytes,5,opt,name=ProductName" json:"-" bson:"-"`
	EffectiveTime        *int32   `protobuf:"varint,6,opt,name=EffectiveTime" json:"-" bson:"-"`
	BuyNum               *int64   `protobuf:"varint,7,opt,name=BuyNum" json:"BuyNum,omitempty" bson:"BuyNum,omitempty"`
	BuyCount             *int64   `protobuf:"varint,8,opt,name=BuyCount" json:"BuyCount,omitempty" bson:"BuyCount,omitempty"`
	GiveNum              *int64   `protobuf:"varint,9,opt,name=GiveNum" json:"GiveNum,omitempty" bson:"GiveNum,omitempty"`
	GiveCount            *int64   `protobuf:"varint,10,opt,name=GiveCount" json:"GiveCount,omitempty" bson:"GiveCount,omitempty"`
	UserGiveNum          *int64   `protobuf:"varint,11,opt,name=UserGiveNum" json:"UserGiveNum,omitempty" bson:"UserGiveNum,omitempty"`
	UserGiveCount        *int64   `protobuf:"varint,12,opt,name=UserGiveCount" json:"UserGiveCount,omitempty" bson:"UserGiveCount,omitempty"`
	ActGiveNum           *int64   `protobuf:"varint,13,opt,name=ActGiveNum" json:"ActGiveNum,omitempty" bson:"ActGiveNum,omitempty"`
	ActGiveCount         *int64   `protobuf:"varint,14,opt,name=ActGiveCount" json:"ActGiveCount,omitempty" bson:"ActGiveCount,omitempty"`
	GoldSum              *int64   `protobuf:"varint,15,opt,name=GoldSum" json:"GoldSum,omitempty" bson:"GoldSum,omitempty"`
	CoinSum              *int64   `protobuf:"varint,16,opt,name=CoinSum" json:"CoinSum,omitempty" bson:"CoinSum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *CoinProductReport) Reset()         { *m = CoinProductReport{} }
func (m *CoinProductReport) String() string { return proto.CompactTextString(m) }
func (*CoinProductReport) ProtoMessage()    {}
func (*CoinProductReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{45}
}
func (m *CoinProductReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinProductReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinProductReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinProductReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinProductReport.Merge(m, src)
}
func (m *CoinProductReport) XXX_Size() int {
	return m.Size()
}
func (m *CoinProductReport) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinProductReport.DiscardUnknown(m)
}

var xxx_messageInfo_CoinProductReport proto.InternalMessageInfo

func (m *CoinProductReport) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *CoinProductReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *CoinProductReport) GetProductId() int64 {
	if m != nil && m.ProductId != nil {
		return *m.ProductId
	}
	return 0
}

func (m *CoinProductReport) GetProductType() int32 {
	if m != nil && m.ProductType != nil {
		return *m.ProductType
	}
	return 0
}

func (m *CoinProductReport) GetProductName() string {
	if m != nil && m.ProductName != nil {
		return *m.ProductName
	}
	return ""
}

func (m *CoinProductReport) GetEffectiveTime() int32 {
	if m != nil && m.EffectiveTime != nil {
		return *m.EffectiveTime
	}
	return 0
}

func (m *CoinProductReport) GetBuyNum() int64 {
	if m != nil && m.BuyNum != nil {
		return *m.BuyNum
	}
	return 0
}

func (m *CoinProductReport) GetBuyCount() int64 {
	if m != nil && m.BuyCount != nil {
		return *m.BuyCount
	}
	return 0
}

func (m *CoinProductReport) GetGiveNum() int64 {
	if m != nil && m.GiveNum != nil {
		return *m.GiveNum
	}
	return 0
}

func (m *CoinProductReport) GetGiveCount() int64 {
	if m != nil && m.GiveCount != nil {
		return *m.GiveCount
	}
	return 0
}

func (m *CoinProductReport) GetUserGiveNum() int64 {
	if m != nil && m.UserGiveNum != nil {
		return *m.UserGiveNum
	}
	return 0
}

func (m *CoinProductReport) GetUserGiveCount() int64 {
	if m != nil && m.UserGiveCount != nil {
		return *m.UserGiveCount
	}
	return 0
}

func (m *CoinProductReport) GetActGiveNum() int64 {
	if m != nil && m.ActGiveNum != nil {
		return *m.ActGiveNum
	}
	return 0
}

func (m *CoinProductReport) GetActGiveCount() int64 {
	if m != nil && m.ActGiveCount != nil {
		return *m.ActGiveCount
	}
	return 0
}

func (m *CoinProductReport) GetGoldSum() int64 {
	if m != nil && m.GoldSum != nil {
		return *m.GoldSum
	}
	return 0
}

func (m *CoinProductReport) GetCoinSum() int64 {
	if m != nil && m.CoinSum != nil {
		return *m.CoinSum
	}
	return 0
}

//玩家在线时长日志 log_onlinetime
type OnlineTimeLog struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	CreateTime           *int64   `protobuf:"varint,3,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	OnlineTime           *int64   `protobuf:"varint,4,opt,name=OnlineTime" json:"OnlineTime,omitempty" bson:"OnlineTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *OnlineTimeLog) Reset()         { *m = OnlineTimeLog{} }
func (m *OnlineTimeLog) String() string { return proto.CompactTextString(m) }
func (*OnlineTimeLog) ProtoMessage()    {}
func (*OnlineTimeLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{46}
}
func (m *OnlineTimeLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OnlineTimeLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OnlineTimeLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OnlineTimeLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnlineTimeLog.Merge(m, src)
}
func (m *OnlineTimeLog) XXX_Size() int {
	return m.Size()
}
func (m *OnlineTimeLog) XXX_DiscardUnknown() {
	xxx_messageInfo_OnlineTimeLog.DiscardUnknown(m)
}

var xxx_messageInfo_OnlineTimeLog proto.InternalMessageInfo

func (m *OnlineTimeLog) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *OnlineTimeLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *OnlineTimeLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *OnlineTimeLog) GetOnlineTime() int64 {
	if m != nil && m.OnlineTime != nil {
		return *m.OnlineTime
	}
	return 0
}

//玩家活跃度报表 report_player_active
type PlayerActiveReport struct {
	CreateTime           *int64   `protobuf:"varint,1,opt,name=CreateTime" json:"_id,omitempty" bson:"_id,omitempty"`
	RegisterCount        *int64   `protobuf:"varint,2,opt,name=RegisterCount" json:"RegisterCount,omitempty" bson:"RegisterCount,omitempty"`
	LoginCount           *int64   `protobuf:"varint,3,opt,name=LoginCount" json:"LoginCount,omitempty" bson:"LoginCount,omitempty"`
	SumOnlineTime        *int64   `protobuf:"varint,4,opt,name=SumOnlineTime" json:"SumOnlineTime,omitempty" bson:"SumOnlineTime,omitempty"`
	AveOnlineTime        *int64   `protobuf:"varint,5,opt,name=AveOnlineTime" json:"AveOnlineTime,omitempty" bson:"AveOnlineTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerActiveReport) Reset()         { *m = PlayerActiveReport{} }
func (m *PlayerActiveReport) String() string { return proto.CompactTextString(m) }
func (*PlayerActiveReport) ProtoMessage()    {}
func (*PlayerActiveReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{47}
}
func (m *PlayerActiveReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerActiveReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerActiveReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerActiveReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerActiveReport.Merge(m, src)
}
func (m *PlayerActiveReport) XXX_Size() int {
	return m.Size()
}
func (m *PlayerActiveReport) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerActiveReport.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerActiveReport proto.InternalMessageInfo

func (m *PlayerActiveReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PlayerActiveReport) GetRegisterCount() int64 {
	if m != nil && m.RegisterCount != nil {
		return *m.RegisterCount
	}
	return 0
}

func (m *PlayerActiveReport) GetLoginCount() int64 {
	if m != nil && m.LoginCount != nil {
		return *m.LoginCount
	}
	return 0
}

func (m *PlayerActiveReport) GetSumOnlineTime() int64 {
	if m != nil && m.SumOnlineTime != nil {
		return *m.SumOnlineTime
	}
	return 0
}

func (m *PlayerActiveReport) GetAveOnlineTime() int64 {
	if m != nil && m.AveOnlineTime != nil {
		return *m.AveOnlineTime
	}
	return 0
}

//用户行为报表 report_player_behavior
type PlayerBehaviorReport struct {
	CreateTime               *int64   `protobuf:"varint,1,opt,name=CreateTime" json:"_id,omitempty" bson:"_id,omitempty"`
	SendMsgCount             *int64   `protobuf:"varint,2,opt,name=SendMsgCount" json:"SendMsgCount,omitempty" bson:"SendMsgCount,omitempty"`
	SendRedpacketPlayerCount *int64   `protobuf:"varint,5,opt,name=SendRedpacketPlayerCount" json:"SendRedpacketPlayerCount,omitempty" bson:"SendRedpacketPlayerCount,omitempty"`
	SendRedpacketCount       *int64   `protobuf:"varint,6,opt,name=SendRedpacketCount" json:"SendRedpacketCount,omitempty" bson:"SendRedpacketCount,omitempty"`
	SendRedpacketMoney       *int64   `protobuf:"varint,7,opt,name=SendRedpacketMoney" json:"SendRedpacketMoney,omitempty" bson:"SendRedpacketMoney,omitempty"`
	RobRedpacketPlayerCount  *int64   `protobuf:"varint,10,opt,name=RobRedpacketPlayerCount" json:"RobRedpacketPlayerCount,omitempty" bson:"RobRedpacketPlayerCount,omitempty"`
	RobRedpacketCount        *int64   `protobuf:"varint,11,opt,name=RobRedpacketCount" json:"RobRedpacketCount,omitempty" bson:"RobRedpacketCount,omitempty"`
	RobRedpacketMoney        *int64   `protobuf:"varint,12,opt,name=RobRedpacketMoney" json:"RobRedpacketMoney,omitempty" bson:"RobRedpacketMoney,omitempty"`
	TransferPlayerCount      *int64   `protobuf:"varint,15,opt,name=TransferPlayerCount" json:"TransferPlayerCount,omitempty" bson:"TransferPlayerCount,omitempty"`
	TransferCount            *int64   `protobuf:"varint,16,opt,name=TransferCount" json:"TransferCount,omitempty" bson:"TransferCount,omitempty"`
	TransferMoney            *int64   `protobuf:"varint,17,opt,name=TransferMoney" json:"TransferMoney,omitempty" bson:"TransferMoney,omitempty"`
	ShopOrderCount           *int64   `protobuf:"varint,20,opt,name=ShopOrderCount" json:"ShopOrderCount,omitempty" bson:"ShopOrderCount,omitempty"`
	ShopOrderMoney           *int64   `protobuf:"varint,21,opt,name=ShopOrderMoney" json:"ShopOrderMoney,omitempty" bson:"ShopOrderMoney,omitempty"`
	OneDialogue              *int64   `protobuf:"varint,25,opt,name=OneDialogue" json:"OneDialogue,omitempty" bson:"OneDialogue,omitempty"`
	BindCard                 *int64   `protobuf:"varint,26,opt,name=BindCard" json:"BindCard,omitempty" bson:"BindCard,omitempty"`
	Start                    *int64   `protobuf:"varint,27,opt,name=Start" json:"Start,omitempty" bson:"Start,omitempty"`
	Reply                    *int64   `protobuf:"varint,28,opt,name=Reply" json:"Reply,omitempty" bson:"Reply,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-" bson:"-"`
	XXX_unrecognized         []byte   `json:"-" bson:"-"`
	XXX_sizecache            int32    `json:"-" bson:"-"`
}

func (m *PlayerBehaviorReport) Reset()         { *m = PlayerBehaviorReport{} }
func (m *PlayerBehaviorReport) String() string { return proto.CompactTextString(m) }
func (*PlayerBehaviorReport) ProtoMessage()    {}
func (*PlayerBehaviorReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{48}
}
func (m *PlayerBehaviorReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerBehaviorReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerBehaviorReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerBehaviorReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerBehaviorReport.Merge(m, src)
}
func (m *PlayerBehaviorReport) XXX_Size() int {
	return m.Size()
}
func (m *PlayerBehaviorReport) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerBehaviorReport.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerBehaviorReport proto.InternalMessageInfo

func (m *PlayerBehaviorReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PlayerBehaviorReport) GetSendMsgCount() int64 {
	if m != nil && m.SendMsgCount != nil {
		return *m.SendMsgCount
	}
	return 0
}

func (m *PlayerBehaviorReport) GetSendRedpacketPlayerCount() int64 {
	if m != nil && m.SendRedpacketPlayerCount != nil {
		return *m.SendRedpacketPlayerCount
	}
	return 0
}

func (m *PlayerBehaviorReport) GetSendRedpacketCount() int64 {
	if m != nil && m.SendRedpacketCount != nil {
		return *m.SendRedpacketCount
	}
	return 0
}

func (m *PlayerBehaviorReport) GetSendRedpacketMoney() int64 {
	if m != nil && m.SendRedpacketMoney != nil {
		return *m.SendRedpacketMoney
	}
	return 0
}

func (m *PlayerBehaviorReport) GetRobRedpacketPlayerCount() int64 {
	if m != nil && m.RobRedpacketPlayerCount != nil {
		return *m.RobRedpacketPlayerCount
	}
	return 0
}

func (m *PlayerBehaviorReport) GetRobRedpacketCount() int64 {
	if m != nil && m.RobRedpacketCount != nil {
		return *m.RobRedpacketCount
	}
	return 0
}

func (m *PlayerBehaviorReport) GetRobRedpacketMoney() int64 {
	if m != nil && m.RobRedpacketMoney != nil {
		return *m.RobRedpacketMoney
	}
	return 0
}

func (m *PlayerBehaviorReport) GetTransferPlayerCount() int64 {
	if m != nil && m.TransferPlayerCount != nil {
		return *m.TransferPlayerCount
	}
	return 0
}

func (m *PlayerBehaviorReport) GetTransferCount() int64 {
	if m != nil && m.TransferCount != nil {
		return *m.TransferCount
	}
	return 0
}

func (m *PlayerBehaviorReport) GetTransferMoney() int64 {
	if m != nil && m.TransferMoney != nil {
		return *m.TransferMoney
	}
	return 0
}

func (m *PlayerBehaviorReport) GetShopOrderCount() int64 {
	if m != nil && m.ShopOrderCount != nil {
		return *m.ShopOrderCount
	}
	return 0
}

func (m *PlayerBehaviorReport) GetShopOrderMoney() int64 {
	if m != nil && m.ShopOrderMoney != nil {
		return *m.ShopOrderMoney
	}
	return 0
}

func (m *PlayerBehaviorReport) GetOneDialogue() int64 {
	if m != nil && m.OneDialogue != nil {
		return *m.OneDialogue
	}
	return 0
}

func (m *PlayerBehaviorReport) GetBindCard() int64 {
	if m != nil && m.BindCard != nil {
		return *m.BindCard
	}
	return 0
}

func (m *PlayerBehaviorReport) GetStart() int64 {
	if m != nil && m.Start != nil {
		return *m.Start
	}
	return 0
}

func (m *PlayerBehaviorReport) GetReply() int64 {
	if m != nil && m.Reply != nil {
		return *m.Reply
	}
	return 0
}

//出入款汇总报表  report_inoutcashsum
type InOutCashSumReport struct {
	CreateTime           *int64   `protobuf:"varint,1,opt,name=CreateTime" json:"_id,omitempty" bson:"_id,omitempty"`
	Recharge             *int64   `protobuf:"varint,2,opt,name=Recharge" json:"Recharge,omitempty" bson:"Recharge,omitempty"`
	Withdraw             *int64   `protobuf:"varint,3,opt,name=Withdraw" json:"Withdraw,omitempty" bson:"Withdraw,omitempty"`
	Redundant            *int64   `protobuf:"varint,4,opt,name=Redundant" json:"Redundant,omitempty" bson:"Redundant,omitempty"`
	RechargeTimes        *int64   `protobuf:"varint,5,opt,name=RechargeTimes" json:"RechargeTimes,omitempty" bson:"RechargeTimes,omitempty"`
	RechargeCount        *int64   `protobuf:"varint,6,opt,name=RechargeCount" json:"RechargeCount,omitempty" bson:"RechargeCount,omitempty"`
	WithdrawTimes        *int64   `protobuf:"varint,7,opt,name=WithdrawTimes" json:"WithdrawTimes,omitempty" bson:"WithdrawTimes,omitempty"`
	WithdrawCount        *int64   `protobuf:"varint,8,opt,name=WithdrawCount" json:"WithdrawCount,omitempty" bson:"WithdrawCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *InOutCashSumReport) Reset()         { *m = InOutCashSumReport{} }
func (m *InOutCashSumReport) String() string { return proto.CompactTextString(m) }
func (*InOutCashSumReport) ProtoMessage()    {}
func (*InOutCashSumReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{49}
}
func (m *InOutCashSumReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InOutCashSumReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InOutCashSumReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InOutCashSumReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InOutCashSumReport.Merge(m, src)
}
func (m *InOutCashSumReport) XXX_Size() int {
	return m.Size()
}
func (m *InOutCashSumReport) XXX_DiscardUnknown() {
	xxx_messageInfo_InOutCashSumReport.DiscardUnknown(m)
}

var xxx_messageInfo_InOutCashSumReport proto.InternalMessageInfo

func (m *InOutCashSumReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *InOutCashSumReport) GetRecharge() int64 {
	if m != nil && m.Recharge != nil {
		return *m.Recharge
	}
	return 0
}

func (m *InOutCashSumReport) GetWithdraw() int64 {
	if m != nil && m.Withdraw != nil {
		return *m.Withdraw
	}
	return 0
}

func (m *InOutCashSumReport) GetRedundant() int64 {
	if m != nil && m.Redundant != nil {
		return *m.Redundant
	}
	return 0
}

func (m *InOutCashSumReport) GetRechargeTimes() int64 {
	if m != nil && m.RechargeTimes != nil {
		return *m.RechargeTimes
	}
	return 0
}

func (m *InOutCashSumReport) GetRechargeCount() int64 {
	if m != nil && m.RechargeCount != nil {
		return *m.RechargeCount
	}
	return 0
}

func (m *InOutCashSumReport) GetWithdrawTimes() int64 {
	if m != nil && m.WithdrawTimes != nil {
		return *m.WithdrawTimes
	}
	return 0
}

func (m *InOutCashSumReport) GetWithdrawCount() int64 {
	if m != nil && m.WithdrawCount != nil {
		return *m.WithdrawCount
	}
	return 0
}

//埋点统计注册登录日志报表 report_register_login
type RegisterLoginReport struct {
	CreateTime           *int64   `protobuf:"varint,1,opt,name=CreateTime" json:"_id,omitempty" bson:"_id,omitempty"`
	RegSumCount          *int64   `protobuf:"varint,2,opt,name=RegSumCount" json:"RegSumCount,omitempty" bson:"RegSumCount,omitempty"`
	WxRegCount           *int64   `protobuf:"varint,3,opt,name=WxRegCount" json:"WxRegCount,omitempty" bson:"WxRegCount,omitempty"`
	PhoneRegCount        *int64   `protobuf:"varint,4,opt,name=PhoneRegCount" json:"PhoneRegCount,omitempty" bson:"PhoneRegCount,omitempty"`
	ValidRegSumCount     *int64   `protobuf:"varint,5,opt,name=ValidRegSumCount" json:"ValidRegSumCount,omitempty" bson:"ValidRegSumCount,omitempty"`
	ValidWxRegCount      *int64   `protobuf:"varint,6,opt,name=ValidWxRegCount" json:"ValidWxRegCount,omitempty" bson:"ValidWxRegCount,omitempty"`
	ValidPhoneRegCount   *int64   `protobuf:"varint,7,opt,name=ValidPhoneRegCount" json:"ValidPhoneRegCount,omitempty" bson:"ValidPhoneRegCount,omitempty"`
	LoginSumCount        *int64   `protobuf:"varint,10,opt,name=LoginSumCount" json:"LoginSumCount,omitempty" bson:"LoginSumCount,omitempty"`
	LoginTimesCount      *int64   `protobuf:"varint,11,opt,name=LoginTimesCount" json:"LoginTimesCount,omitempty" bson:"LoginTimesCount,omitempty"`
	RealNameCount        *int64   `protobuf:"varint,18,opt,name=RealNameCount" json:"RealNameCount,omitempty" bson:"RealNameCount,omitempty"`
	BankCardCount        *int64   `protobuf:"varint,19,opt,name=BankCardCount" json:"BankCardCount,omitempty" bson:"BankCardCount,omitempty"`
	PvCount              *int64   `protobuf:"varint,20,opt,name=PvCount" json:"PvCount,omitempty" bson:"PvCount,omitempty"`
	UvCount              *int64   `protobuf:"varint,21,opt,name=UvCount" json:"UvCount,omitempty" bson:"UvCount,omitempty"`
	LabelCount           *int64   `protobuf:"varint,22,opt,name=LabelCount" json:"LabelCount,omitempty" bson:"LabelCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RegisterLoginReport) Reset()         { *m = RegisterLoginReport{} }
func (m *RegisterLoginReport) String() string { return proto.CompactTextString(m) }
func (*RegisterLoginReport) ProtoMessage()    {}
func (*RegisterLoginReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{50}
}
func (m *RegisterLoginReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterLoginReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterLoginReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterLoginReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterLoginReport.Merge(m, src)
}
func (m *RegisterLoginReport) XXX_Size() int {
	return m.Size()
}
func (m *RegisterLoginReport) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterLoginReport.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterLoginReport proto.InternalMessageInfo

func (m *RegisterLoginReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *RegisterLoginReport) GetRegSumCount() int64 {
	if m != nil && m.RegSumCount != nil {
		return *m.RegSumCount
	}
	return 0
}

func (m *RegisterLoginReport) GetWxRegCount() int64 {
	if m != nil && m.WxRegCount != nil {
		return *m.WxRegCount
	}
	return 0
}

func (m *RegisterLoginReport) GetPhoneRegCount() int64 {
	if m != nil && m.PhoneRegCount != nil {
		return *m.PhoneRegCount
	}
	return 0
}

func (m *RegisterLoginReport) GetValidRegSumCount() int64 {
	if m != nil && m.ValidRegSumCount != nil {
		return *m.ValidRegSumCount
	}
	return 0
}

func (m *RegisterLoginReport) GetValidWxRegCount() int64 {
	if m != nil && m.ValidWxRegCount != nil {
		return *m.ValidWxRegCount
	}
	return 0
}

func (m *RegisterLoginReport) GetValidPhoneRegCount() int64 {
	if m != nil && m.ValidPhoneRegCount != nil {
		return *m.ValidPhoneRegCount
	}
	return 0
}

func (m *RegisterLoginReport) GetLoginSumCount() int64 {
	if m != nil && m.LoginSumCount != nil {
		return *m.LoginSumCount
	}
	return 0
}

func (m *RegisterLoginReport) GetLoginTimesCount() int64 {
	if m != nil && m.LoginTimesCount != nil {
		return *m.LoginTimesCount
	}
	return 0
}

func (m *RegisterLoginReport) GetRealNameCount() int64 {
	if m != nil && m.RealNameCount != nil {
		return *m.RealNameCount
	}
	return 0
}

func (m *RegisterLoginReport) GetBankCardCount() int64 {
	if m != nil && m.BankCardCount != nil {
		return *m.BankCardCount
	}
	return 0
}

func (m *RegisterLoginReport) GetPvCount() int64 {
	if m != nil && m.PvCount != nil {
		return *m.PvCount
	}
	return 0
}

func (m *RegisterLoginReport) GetUvCount() int64 {
	if m != nil && m.UvCount != nil {
		return *m.UvCount
	}
	return 0
}

func (m *RegisterLoginReport) GetLabelCount() int64 {
	if m != nil && m.LabelCount != nil {
		return *m.LabelCount
	}
	return 0
}

//运营渠道汇总报表
type OperationChannelReport struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	ChannelNo            *string  `protobuf:"bytes,2,opt,name=ChannelNo" json:"ChannelNo,omitempty" bson:"ChannelNo,omitempty"`
	ChannelName          *string  `protobuf:"bytes,3,opt,name=ChannelName" json:"ChannelName,omitempty" bson:"ChannelName,omitempty"`
	Cooperation          *int32   `protobuf:"varint,4,opt,name=Cooperation" json:"Cooperation,omitempty" bson:"Cooperation,omitempty"`
	CreateTime           *int64   `protobuf:"varint,5,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	RegCount             *int64   `protobuf:"varint,6,opt,name=RegCount" json:"RegCount,omitempty" bson:"RegCount,omitempty"`
	ValidRegCount        *int64   `protobuf:"varint,7,opt,name=ValidRegCount" json:"ValidRegCount,omitempty" bson:"ValidRegCount,omitempty"`
	LoginCount           *int64   `protobuf:"varint,8,opt,name=LoginCount" json:"LoginCount,omitempty" bson:"LoginCount,omitempty"`
	ActDevCount          *int64   `protobuf:"varint,9,opt,name=ActDevCount" json:"ActDevCount,omitempty" bson:"ActDevCount,omitempty"`
	ValidActDevCount     *int64   `protobuf:"varint,10,opt,name=ValidActDevCount" json:"ValidActDevCount,omitempty" bson:"ValidActDevCount,omitempty"`
	DownLoadCount        *int64   `protobuf:"varint,11,opt,name=DownLoadCount" json:"DownLoadCount,omitempty" bson:"DownLoadCount,omitempty"`
	UvCount              *int64   `protobuf:"varint,12,opt,name=UvCount" json:"UvCount,omitempty" bson:"UvCount,omitempty"`
	OnlineSum            *int64   `protobuf:"varint,13,opt,name=OnlineSum" json:"OnlineSum,omitempty" bson:"OnlineSum,omitempty"`
	NextKeep             *int64   `protobuf:"varint,14,opt,name=NextKeep" json:"NextKeep,omitempty" bson:"NextKeep,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *OperationChannelReport) Reset()         { *m = OperationChannelReport{} }
func (m *OperationChannelReport) String() string { return proto.CompactTextString(m) }
func (*OperationChannelReport) ProtoMessage()    {}
func (*OperationChannelReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{51}
}
func (m *OperationChannelReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationChannelReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationChannelReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperationChannelReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationChannelReport.Merge(m, src)
}
func (m *OperationChannelReport) XXX_Size() int {
	return m.Size()
}
func (m *OperationChannelReport) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationChannelReport.DiscardUnknown(m)
}

var xxx_messageInfo_OperationChannelReport proto.InternalMessageInfo

func (m *OperationChannelReport) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *OperationChannelReport) GetChannelNo() string {
	if m != nil && m.ChannelNo != nil {
		return *m.ChannelNo
	}
	return ""
}

func (m *OperationChannelReport) GetChannelName() string {
	if m != nil && m.ChannelName != nil {
		return *m.ChannelName
	}
	return ""
}

func (m *OperationChannelReport) GetCooperation() int32 {
	if m != nil && m.Cooperation != nil {
		return *m.Cooperation
	}
	return 0
}

func (m *OperationChannelReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *OperationChannelReport) GetRegCount() int64 {
	if m != nil && m.RegCount != nil {
		return *m.RegCount
	}
	return 0
}

func (m *OperationChannelReport) GetValidRegCount() int64 {
	if m != nil && m.ValidRegCount != nil {
		return *m.ValidRegCount
	}
	return 0
}

func (m *OperationChannelReport) GetLoginCount() int64 {
	if m != nil && m.LoginCount != nil {
		return *m.LoginCount
	}
	return 0
}

func (m *OperationChannelReport) GetActDevCount() int64 {
	if m != nil && m.ActDevCount != nil {
		return *m.ActDevCount
	}
	return 0
}

func (m *OperationChannelReport) GetValidActDevCount() int64 {
	if m != nil && m.ValidActDevCount != nil {
		return *m.ValidActDevCount
	}
	return 0
}

func (m *OperationChannelReport) GetDownLoadCount() int64 {
	if m != nil && m.DownLoadCount != nil {
		return *m.DownLoadCount
	}
	return 0
}

func (m *OperationChannelReport) GetUvCount() int64 {
	if m != nil && m.UvCount != nil {
		return *m.UvCount
	}
	return 0
}

func (m *OperationChannelReport) GetOnlineSum() int64 {
	if m != nil && m.OnlineSum != nil {
		return *m.OnlineSum
	}
	return 0
}

func (m *OperationChannelReport) GetNextKeep() int64 {
	if m != nil && m.NextKeep != nil {
		return *m.NextKeep
	}
	return 0
}

//渠道报表
type ChannelReport struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	ChannelNo            *string  `protobuf:"bytes,2,opt,name=ChannelNo" json:"ChannelNo,omitempty" bson:"ChannelNo,omitempty"`
	ChannelName          *string  `protobuf:"bytes,3,opt,name=ChannelName" json:"ChannelName,omitempty" bson:"ChannelName,omitempty"`
	Cooperation          *int32   `protobuf:"varint,4,opt,name=Cooperation" json:"Cooperation,omitempty" bson:"Cooperation,omitempty"`
	CreateTime           *int64   `protobuf:"varint,5,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	ChannelCost          *int64   `protobuf:"varint,8,opt,name=ChannelCost" json:"ChannelCost,omitempty" bson:"ChannelCost,omitempty"`
	ActCost              *int64   `protobuf:"varint,9,opt,name=ActCost" json:"ActCost,omitempty" bson:"ActCost,omitempty"`
	LoginCost            *int64   `protobuf:"varint,10,opt,name=LoginCost" json:"LoginCost,omitempty" bson:"LoginCost,omitempty"`
	RegCost              *int64   `protobuf:"varint,11,opt,name=RegCost" json:"RegCost,omitempty" bson:"RegCost,omitempty"`
	ROI                  *float64 `protobuf:"fixed64,12,opt,name=ROI" json:"ROI,omitempty" bson:"ROI,omitempty"`
	RegRoiRate           *float64 `protobuf:"fixed64,13,opt,name=RegRoiRate" json:"RegRoiRate,omitempty" bson:"RegRoiRate,omitempty"`
	KeepRate             *float64 `protobuf:"fixed64,14,opt,name=KeepRate" json:"KeepRate,omitempty" bson:"KeepRate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ChannelReport) Reset()         { *m = ChannelReport{} }
func (m *ChannelReport) String() string { return proto.CompactTextString(m) }
func (*ChannelReport) ProtoMessage()    {}
func (*ChannelReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{52}
}
func (m *ChannelReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelReport.Merge(m, src)
}
func (m *ChannelReport) XXX_Size() int {
	return m.Size()
}
func (m *ChannelReport) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelReport.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelReport proto.InternalMessageInfo

func (m *ChannelReport) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ChannelReport) GetChannelNo() string {
	if m != nil && m.ChannelNo != nil {
		return *m.ChannelNo
	}
	return ""
}

func (m *ChannelReport) GetChannelName() string {
	if m != nil && m.ChannelName != nil {
		return *m.ChannelName
	}
	return ""
}

func (m *ChannelReport) GetCooperation() int32 {
	if m != nil && m.Cooperation != nil {
		return *m.Cooperation
	}
	return 0
}

func (m *ChannelReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ChannelReport) GetChannelCost() int64 {
	if m != nil && m.ChannelCost != nil {
		return *m.ChannelCost
	}
	return 0
}

func (m *ChannelReport) GetActCost() int64 {
	if m != nil && m.ActCost != nil {
		return *m.ActCost
	}
	return 0
}

func (m *ChannelReport) GetLoginCost() int64 {
	if m != nil && m.LoginCost != nil {
		return *m.LoginCost
	}
	return 0
}

func (m *ChannelReport) GetRegCost() int64 {
	if m != nil && m.RegCost != nil {
		return *m.RegCost
	}
	return 0
}

func (m *ChannelReport) GetROI() float64 {
	if m != nil && m.ROI != nil {
		return *m.ROI
	}
	return 0
}

func (m *ChannelReport) GetRegRoiRate() float64 {
	if m != nil && m.RegRoiRate != nil {
		return *m.RegRoiRate
	}
	return 0
}

func (m *ChannelReport) GetKeepRate() float64 {
	if m != nil && m.KeepRate != nil {
		return *m.KeepRate
	}
	return 0
}

////文章报表
type ArticleReport struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Types                *int32   `protobuf:"varint,2,opt,name=Types" json:"Types,omitempty" bson:"Types,omitempty"`
	Title                *string  `protobuf:"bytes,3,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	IsMain               *int32   `protobuf:"varint,4,opt,name=IsMain" json:"IsMain,omitempty" bson:"IsMain,omitempty"`
	CreateTime           *int64   `protobuf:"varint,5,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,6,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	PushPlayer           *int64   `protobuf:"varint,7,opt,name=PushPlayer" json:"PushPlayer,omitempty" bson:"PushPlayer,omitempty"`
	Clicks               *int64   `protobuf:"varint,8,opt,name=Clicks" json:"Clicks,omitempty" bson:"Clicks,omitempty"`
	Jumps                *int64   `protobuf:"varint,9,opt,name=Jumps" json:"Jumps,omitempty" bson:"Jumps,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ArticleReport) Reset()         { *m = ArticleReport{} }
func (m *ArticleReport) String() string { return proto.CompactTextString(m) }
func (*ArticleReport) ProtoMessage()    {}
func (*ArticleReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{53}
}
func (m *ArticleReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleReport.Merge(m, src)
}
func (m *ArticleReport) XXX_Size() int {
	return m.Size()
}
func (m *ArticleReport) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleReport.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleReport proto.InternalMessageInfo

func (m *ArticleReport) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ArticleReport) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *ArticleReport) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *ArticleReport) GetIsMain() int32 {
	if m != nil && m.IsMain != nil {
		return *m.IsMain
	}
	return 0
}

func (m *ArticleReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ArticleReport) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *ArticleReport) GetPushPlayer() int64 {
	if m != nil && m.PushPlayer != nil {
		return *m.PushPlayer
	}
	return 0
}

func (m *ArticleReport) GetClicks() int64 {
	if m != nil && m.Clicks != nil {
		return *m.Clicks
	}
	return 0
}

func (m *ArticleReport) GetJumps() int64 {
	if m != nil && m.Jumps != nil {
		return *m.Jumps
	}
	return 0
}

//社交广场动态统计报表
type SquareReport struct {
	CreateTime           *int64   `protobuf:"varint,1,opt,name=CreateTime" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerSubCount       *int64   `protobuf:"varint,2,opt,name=PlayerSubCount" json:"PlayerSubCount,omitempty" bson:"PlayerSubCount,omitempty"`
	OperatSubCount       *int64   `protobuf:"varint,3,opt,name=OperatSubCount" json:"OperatSubCount,omitempty" bson:"OperatSubCount,omitempty"`
	PlayerDelCount       *int64   `protobuf:"varint,4,opt,name=PlayerDelCount" json:"PlayerDelCount,omitempty" bson:"PlayerDelCount,omitempty"`
	BackstageDelCount    *int64   `protobuf:"varint,5,opt,name=BackstageDelCount" json:"BackstageDelCount,omitempty" bson:"BackstageDelCount,omitempty"`
	ZanCount             *int64   `protobuf:"varint,6,opt,name=ZanCount" json:"ZanCount,omitempty" bson:"ZanCount,omitempty"`
	BsZanCount           *int64   `protobuf:"varint,7,opt,name=BsZanCount" json:"BsZanCount,omitempty" bson:"BsZanCount,omitempty"`
	PlayerComm           *int64   `protobuf:"varint,8,opt,name=PlayerComm" json:"PlayerComm,omitempty" bson:"PlayerComm,omitempty"`
	OperatComm           *int64   `protobuf:"varint,9,opt,name=OperatComm" json:"OperatComm,omitempty" bson:"OperatComm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *SquareReport) Reset()         { *m = SquareReport{} }
func (m *SquareReport) String() string { return proto.CompactTextString(m) }
func (*SquareReport) ProtoMessage()    {}
func (*SquareReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{54}
}
func (m *SquareReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SquareReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SquareReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SquareReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SquareReport.Merge(m, src)
}
func (m *SquareReport) XXX_Size() int {
	return m.Size()
}
func (m *SquareReport) XXX_DiscardUnknown() {
	xxx_messageInfo_SquareReport.DiscardUnknown(m)
}

var xxx_messageInfo_SquareReport proto.InternalMessageInfo

func (m *SquareReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *SquareReport) GetPlayerSubCount() int64 {
	if m != nil && m.PlayerSubCount != nil {
		return *m.PlayerSubCount
	}
	return 0
}

func (m *SquareReport) GetOperatSubCount() int64 {
	if m != nil && m.OperatSubCount != nil {
		return *m.OperatSubCount
	}
	return 0
}

func (m *SquareReport) GetPlayerDelCount() int64 {
	if m != nil && m.PlayerDelCount != nil {
		return *m.PlayerDelCount
	}
	return 0
}

func (m *SquareReport) GetBackstageDelCount() int64 {
	if m != nil && m.BackstageDelCount != nil {
		return *m.BackstageDelCount
	}
	return 0
}

func (m *SquareReport) GetZanCount() int64 {
	if m != nil && m.ZanCount != nil {
		return *m.ZanCount
	}
	return 0
}

func (m *SquareReport) GetBsZanCount() int64 {
	if m != nil && m.BsZanCount != nil {
		return *m.BsZanCount
	}
	return 0
}

func (m *SquareReport) GetPlayerComm() int64 {
	if m != nil && m.PlayerComm != nil {
		return *m.PlayerComm
	}
	return 0
}

func (m *SquareReport) GetOperatComm() int64 {
	if m != nil && m.OperatComm != nil {
		return *m.OperatComm
	}
	return 0
}

//玩家登录地理位置分布报表
type PlayerLogLocationReport struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	DayTime              *int64   `protobuf:"varint,2,opt,name=DayTime" json:"DayTime,omitempty" bson:"DayTime,omitempty"`
	Position             *string  `protobuf:"bytes,3,opt,name=Position" json:"Position,omitempty" bson:"Position,omitempty"`
	Piece                *string  `protobuf:"bytes,4,opt,name=Piece" json:"Piece,omitempty" bson:"Piece,omitempty"`
	DeviceType           *int32   `protobuf:"varint,5,opt,name=DeviceType" json:"DeviceType,omitempty" bson:"DeviceType,omitempty"`
	Count                *int64   `protobuf:"varint,6,opt,name=Count" json:"Count,omitempty" bson:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerLogLocationReport) Reset()         { *m = PlayerLogLocationReport{} }
func (m *PlayerLogLocationReport) String() string { return proto.CompactTextString(m) }
func (*PlayerLogLocationReport) ProtoMessage()    {}
func (*PlayerLogLocationReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{55}
}
func (m *PlayerLogLocationReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerLogLocationReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerLogLocationReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerLogLocationReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerLogLocationReport.Merge(m, src)
}
func (m *PlayerLogLocationReport) XXX_Size() int {
	return m.Size()
}
func (m *PlayerLogLocationReport) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerLogLocationReport.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerLogLocationReport proto.InternalMessageInfo

func (m *PlayerLogLocationReport) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *PlayerLogLocationReport) GetDayTime() int64 {
	if m != nil && m.DayTime != nil {
		return *m.DayTime
	}
	return 0
}

func (m *PlayerLogLocationReport) GetPosition() string {
	if m != nil && m.Position != nil {
		return *m.Position
	}
	return ""
}

func (m *PlayerLogLocationReport) GetPiece() string {
	if m != nil && m.Piece != nil {
		return *m.Piece
	}
	return ""
}

func (m *PlayerLogLocationReport) GetDeviceType() int32 {
	if m != nil && m.DeviceType != nil {
		return *m.DeviceType
	}
	return 0
}

func (m *PlayerLogLocationReport) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

//短信召回统计报表
type RecallReport struct {
	CreateTime           *int64   `protobuf:"varint,1,opt,name=CreateTime" json:"_id,omitempty" bson:"_id,omitempty"`
	Pv                   *int64   `protobuf:"varint,2,opt,name=Pv" json:"Pv,omitempty" bson:"Pv,omitempty"`
	Uv                   *int64   `protobuf:"varint,3,opt,name=Uv" json:"Uv,omitempty" bson:"Uv,omitempty"`
	DownCount            *int64   `protobuf:"varint,4,opt,name=DownCount" json:"DownCount,omitempty" bson:"DownCount,omitempty"`
	RecallCount          *int64   `protobuf:"varint,5,opt,name=RecallCount" json:"RecallCount,omitempty" bson:"RecallCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RecallReport) Reset()         { *m = RecallReport{} }
func (m *RecallReport) String() string { return proto.CompactTextString(m) }
func (*RecallReport) ProtoMessage()    {}
func (*RecallReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{56}
}
func (m *RecallReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecallReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecallReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecallReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecallReport.Merge(m, src)
}
func (m *RecallReport) XXX_Size() int {
	return m.Size()
}
func (m *RecallReport) XXX_DiscardUnknown() {
	xxx_messageInfo_RecallReport.DiscardUnknown(m)
}

var xxx_messageInfo_RecallReport proto.InternalMessageInfo

func (m *RecallReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *RecallReport) GetPv() int64 {
	if m != nil && m.Pv != nil {
		return *m.Pv
	}
	return 0
}

func (m *RecallReport) GetUv() int64 {
	if m != nil && m.Uv != nil {
		return *m.Uv
	}
	return 0
}

func (m *RecallReport) GetDownCount() int64 {
	if m != nil && m.DownCount != nil {
		return *m.DownCount
	}
	return 0
}

func (m *RecallReport) GetRecallCount() int64 {
	if m != nil && m.RecallCount != nil {
		return *m.RecallCount
	}
	return 0
}

type LocationData struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	X                    *float64 `protobuf:"fixed64,2,opt,name=X" json:"X,omitempty" bson:"X,omitempty"`
	Y                    *float64 `protobuf:"fixed64,3,opt,name=Y" json:"Y,omitempty" bson:"Y,omitempty"`
	Province             *string  `protobuf:"bytes,4,opt,name=Province" json:"Province,omitempty" bson:"Province,omitempty"`
	City                 *string  `protobuf:"bytes,5,opt,name=City" json:"City,omitempty" bson:"City,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *LocationData) Reset()         { *m = LocationData{} }
func (m *LocationData) String() string { return proto.CompactTextString(m) }
func (*LocationData) ProtoMessage()    {}
func (*LocationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{57}
}
func (m *LocationData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocationData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocationData.Merge(m, src)
}
func (m *LocationData) XXX_Size() int {
	return m.Size()
}
func (m *LocationData) XXX_DiscardUnknown() {
	xxx_messageInfo_LocationData.DiscardUnknown(m)
}

var xxx_messageInfo_LocationData proto.InternalMessageInfo

func (m *LocationData) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LocationData) GetX() float64 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *LocationData) GetY() float64 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *LocationData) GetProvince() string {
	if m != nil && m.Province != nil {
		return *m.Province
	}
	return ""
}

func (m *LocationData) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

type AllLocationDate struct {
	LocationData         []*LocationData `protobuf:"bytes,1,rep,name=LocationData" json:"LocationData,omitempty" bson:"LocationData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-" bson:"-"`
	XXX_unrecognized     []byte          `json:"-" bson:"-"`
	XXX_sizecache        int32           `json:"-" bson:"-"`
}

func (m *AllLocationDate) Reset()         { *m = AllLocationDate{} }
func (m *AllLocationDate) String() string { return proto.CompactTextString(m) }
func (*AllLocationDate) ProtoMessage()    {}
func (*AllLocationDate) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{58}
}
func (m *AllLocationDate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllLocationDate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllLocationDate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllLocationDate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllLocationDate.Merge(m, src)
}
func (m *AllLocationDate) XXX_Size() int {
	return m.Size()
}
func (m *AllLocationDate) XXX_DiscardUnknown() {
	xxx_messageInfo_AllLocationDate.DiscardUnknown(m)
}

var xxx_messageInfo_AllLocationDate proto.InternalMessageInfo

func (m *AllLocationDate) GetLocationData() []*LocationData {
	if m != nil {
		return m.LocationData
	}
	return nil
}

//=================================================支付设定
//通用额度配置
type GeneralQuota struct {
	Id                   *int32   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Min                  *int64   `protobuf:"varint,2,opt,name=Min" json:"Min,omitempty" bson:"Min,omitempty"`
	Max                  *int64   `protobuf:"varint,3,opt,name=Max" json:"Max,omitempty" bson:"Max,omitempty"`
	Q1                   *int64   `protobuf:"varint,11,opt,name=Q1" json:"Q1,omitempty" bson:"Q1,omitempty"`
	Q2                   *int64   `protobuf:"varint,12,opt,name=Q2" json:"Q2,omitempty" bson:"Q2,omitempty"`
	Q3                   *int64   `protobuf:"varint,13,opt,name=Q3" json:"Q3,omitempty" bson:"Q3,omitempty"`
	Q4                   *int64   `protobuf:"varint,14,opt,name=Q4" json:"Q4,omitempty" bson:"Q4,omitempty"`
	Q5                   *int64   `protobuf:"varint,15,opt,name=Q5" json:"Q5,omitempty" bson:"Q5,omitempty"`
	Q6                   *int64   `protobuf:"varint,16,opt,name=Q6" json:"Q6,omitempty" bson:"Q6,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GeneralQuota) Reset()         { *m = GeneralQuota{} }
func (m *GeneralQuota) String() string { return proto.CompactTextString(m) }
func (*GeneralQuota) ProtoMessage()    {}
func (*GeneralQuota) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{59}
}
func (m *GeneralQuota) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeneralQuota) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GeneralQuota.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GeneralQuota) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeneralQuota.Merge(m, src)
}
func (m *GeneralQuota) XXX_Size() int {
	return m.Size()
}
func (m *GeneralQuota) XXX_DiscardUnknown() {
	xxx_messageInfo_GeneralQuota.DiscardUnknown(m)
}

var xxx_messageInfo_GeneralQuota proto.InternalMessageInfo

func (m *GeneralQuota) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *GeneralQuota) GetMin() int64 {
	if m != nil && m.Min != nil {
		return *m.Min
	}
	return 0
}

func (m *GeneralQuota) GetMax() int64 {
	if m != nil && m.Max != nil {
		return *m.Max
	}
	return 0
}

func (m *GeneralQuota) GetQ1() int64 {
	if m != nil && m.Q1 != nil {
		return *m.Q1
	}
	return 0
}

func (m *GeneralQuota) GetQ2() int64 {
	if m != nil && m.Q2 != nil {
		return *m.Q2
	}
	return 0
}

func (m *GeneralQuota) GetQ3() int64 {
	if m != nil && m.Q3 != nil {
		return *m.Q3
	}
	return 0
}

func (m *GeneralQuota) GetQ4() int64 {
	if m != nil && m.Q4 != nil {
		return *m.Q4
	}
	return 0
}

func (m *GeneralQuota) GetQ5() int64 {
	if m != nil && m.Q5 != nil {
		return *m.Q5
	}
	return 0
}

func (m *GeneralQuota) GetQ6() int64 {
	if m != nil && m.Q6 != nil {
		return *m.Q6
	}
	return 0
}

//支付方式
type PayType struct {
	Id                   *int32   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PayType) Reset()         { *m = PayType{} }
func (m *PayType) String() string { return proto.CompactTextString(m) }
func (*PayType) ProtoMessage()    {}
func (*PayType) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{60}
}
func (m *PayType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayType.Merge(m, src)
}
func (m *PayType) XXX_Size() int {
	return m.Size()
}
func (m *PayType) XXX_DiscardUnknown() {
	xxx_messageInfo_PayType.DiscardUnknown(m)
}

var xxx_messageInfo_PayType proto.InternalMessageInfo

func (m *PayType) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PayType) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

//支付场景  1.sdk支付、2.小程序、3.扫码支付、4.公众号
type PayScene struct {
	Id                   *int32   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PayScene) Reset()         { *m = PayScene{} }
func (m *PayScene) String() string { return proto.CompactTextString(m) }
func (*PayScene) ProtoMessage()    {}
func (*PayScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{61}
}
func (m *PayScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayScene.Merge(m, src)
}
func (m *PayScene) XXX_Size() int {
	return m.Size()
}
func (m *PayScene) XXX_DiscardUnknown() {
	xxx_messageInfo_PayScene.DiscardUnknown(m)
}

var xxx_messageInfo_PayScene proto.InternalMessageInfo

func (m *PayScene) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PayScene) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

//支付限定
type PaymentSetting struct {
	Id                   *int32   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	FeeRate              *int32   `protobuf:"varint,2,opt,name=FeeRate" json:"FeeRate,omitempty" bson:"FeeRate,omitempty"`
	Name                 *string  `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Types                *int32   `protobuf:"varint,4,opt,name=Types" json:"Types,omitempty" bson:"Types,omitempty"`
	PlatformTax          *int64   `protobuf:"varint,5,opt,name=PlatformTax" json:"PlatformTax,omitempty" bson:"PlatformTax,omitempty"`
	RealTax              *int64   `protobuf:"varint,6,opt,name=RealTax" json:"RealTax,omitempty" bson:"RealTax,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PaymentSetting) Reset()         { *m = PaymentSetting{} }
func (m *PaymentSetting) String() string { return proto.CompactTextString(m) }
func (*PaymentSetting) ProtoMessage()    {}
func (*PaymentSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{62}
}
func (m *PaymentSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentSetting.Merge(m, src)
}
func (m *PaymentSetting) XXX_Size() int {
	return m.Size()
}
func (m *PaymentSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentSetting.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentSetting proto.InternalMessageInfo

func (m *PaymentSetting) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PaymentSetting) GetFeeRate() int32 {
	if m != nil && m.FeeRate != nil {
		return *m.FeeRate
	}
	return 0
}

func (m *PaymentSetting) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *PaymentSetting) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *PaymentSetting) GetPlatformTax() int64 {
	if m != nil && m.PlatformTax != nil {
		return *m.PlatformTax
	}
	return 0
}

func (m *PaymentSetting) GetRealTax() int64 {
	if m != nil && m.RealTax != nil {
		return *m.RealTax
	}
	return 0
}

//支付平台设置
type PaymentPlatform struct {
	Id                   *int32   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Merchants            *string  `protobuf:"bytes,3,opt,name=Merchants" json:"Merchants,omitempty" bson:"Merchants,omitempty"`
	ApiHost              *string  `protobuf:"bytes,4,opt,name=ApiHost" json:"ApiHost,omitempty" bson:"ApiHost,omitempty"`
	Publickey            *string  `protobuf:"bytes,5,opt,name=Publickey" json:"Publickey,omitempty" bson:"Publickey,omitempty"`
	Privatekey           *string  `protobuf:"bytes,6,opt,name=Privatekey" json:"Privatekey,omitempty" bson:"Privatekey,omitempty"`
	RetrunBack           *string  `protobuf:"bytes,7,opt,name=RetrunBack" json:"RetrunBack,omitempty" bson:"RetrunBack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PaymentPlatform) Reset()         { *m = PaymentPlatform{} }
func (m *PaymentPlatform) String() string { return proto.CompactTextString(m) }
func (*PaymentPlatform) ProtoMessage()    {}
func (*PaymentPlatform) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{63}
}
func (m *PaymentPlatform) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentPlatform) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentPlatform.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentPlatform) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentPlatform.Merge(m, src)
}
func (m *PaymentPlatform) XXX_Size() int {
	return m.Size()
}
func (m *PaymentPlatform) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentPlatform.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentPlatform proto.InternalMessageInfo

func (m *PaymentPlatform) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PaymentPlatform) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *PaymentPlatform) GetMerchants() string {
	if m != nil && m.Merchants != nil {
		return *m.Merchants
	}
	return ""
}

func (m *PaymentPlatform) GetApiHost() string {
	if m != nil && m.ApiHost != nil {
		return *m.ApiHost
	}
	return ""
}

func (m *PaymentPlatform) GetPublickey() string {
	if m != nil && m.Publickey != nil {
		return *m.Publickey
	}
	return ""
}

func (m *PaymentPlatform) GetPrivatekey() string {
	if m != nil && m.Privatekey != nil {
		return *m.Privatekey
	}
	return ""
}

func (m *PaymentPlatform) GetRetrunBack() string {
	if m != nil && m.RetrunBack != nil {
		return *m.RetrunBack
	}
	return ""
}

//支付平台通道
type PlatformChannel struct {
	Id                   *int32   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Types                *int32   `protobuf:"varint,3,opt,name=Types" json:"Types,omitempty" bson:"Types,omitempty"`
	PlatformId           *int32   `protobuf:"varint,4,opt,name=PlatformId" json:"PlatformId,omitempty" bson:"PlatformId,omitempty"`
	PlatformName         *string  `protobuf:"bytes,5,opt,name=PlatformName" json:"-" bson:"-"`
	PayMin               *int64   `protobuf:"varint,6,opt,name=PayMin" json:"PayMin,omitempty" bson:"PayMin,omitempty"`
	PayMax               *int64   `protobuf:"varint,7,opt,name=PayMax" json:"PayMax,omitempty" bson:"PayMax,omitempty"`
	PayTypeId            *int32   `protobuf:"varint,8,opt,name=PayTypeId" json:"PayTypeId,omitempty" bson:"PayTypeId,omitempty"`
	PayTypeName          *string  `protobuf:"bytes,9,opt,name=PayTypeName" json:"-" bson:"-"`
	PaymentSettingId     *int32   `protobuf:"varint,10,opt,name=PaymentSettingId" json:"PaymentSettingId,omitempty" bson:"PaymentSettingId,omitempty"`
	PaymentSettingName   *string  `protobuf:"bytes,11,opt,name=PaymentSettingName" json:"-" bson:"-"`
	StopAmount           *int64   `protobuf:"varint,12,opt,name=StopAmount" json:"StopAmount,omitempty" bson:"StopAmount,omitempty"`
	Weights              *int32   `protobuf:"varint,13,opt,name=Weights" json:"Weights,omitempty" bson:"Weights,omitempty"`
	Status               *int32   `protobuf:"varint,14,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	PaySceneId           *int32   `protobuf:"varint,15,opt,name=PaySceneId" json:"PaySceneId,omitempty" bson:"PaySceneId,omitempty"`
	PaySceneName         *string  `protobuf:"bytes,16,opt,name=PaySceneName" json:"-" bson:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlatformChannel) Reset()         { *m = PlatformChannel{} }
func (m *PlatformChannel) String() string { return proto.CompactTextString(m) }
func (*PlatformChannel) ProtoMessage()    {}
func (*PlatformChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{64}
}
func (m *PlatformChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlatformChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlatformChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlatformChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlatformChannel.Merge(m, src)
}
func (m *PlatformChannel) XXX_Size() int {
	return m.Size()
}
func (m *PlatformChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_PlatformChannel.DiscardUnknown(m)
}

var xxx_messageInfo_PlatformChannel proto.InternalMessageInfo

func (m *PlatformChannel) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlatformChannel) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *PlatformChannel) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *PlatformChannel) GetPlatformId() int32 {
	if m != nil && m.PlatformId != nil {
		return *m.PlatformId
	}
	return 0
}

func (m *PlatformChannel) GetPlatformName() string {
	if m != nil && m.PlatformName != nil {
		return *m.PlatformName
	}
	return ""
}

func (m *PlatformChannel) GetPayMin() int64 {
	if m != nil && m.PayMin != nil {
		return *m.PayMin
	}
	return 0
}

func (m *PlatformChannel) GetPayMax() int64 {
	if m != nil && m.PayMax != nil {
		return *m.PayMax
	}
	return 0
}

func (m *PlatformChannel) GetPayTypeId() int32 {
	if m != nil && m.PayTypeId != nil {
		return *m.PayTypeId
	}
	return 0
}

func (m *PlatformChannel) GetPayTypeName() string {
	if m != nil && m.PayTypeName != nil {
		return *m.PayTypeName
	}
	return ""
}

func (m *PlatformChannel) GetPaymentSettingId() int32 {
	if m != nil && m.PaymentSettingId != nil {
		return *m.PaymentSettingId
	}
	return 0
}

func (m *PlatformChannel) GetPaymentSettingName() string {
	if m != nil && m.PaymentSettingName != nil {
		return *m.PaymentSettingName
	}
	return ""
}

func (m *PlatformChannel) GetStopAmount() int64 {
	if m != nil && m.StopAmount != nil {
		return *m.StopAmount
	}
	return 0
}

func (m *PlatformChannel) GetWeights() int32 {
	if m != nil && m.Weights != nil {
		return *m.Weights
	}
	return 0
}

func (m *PlatformChannel) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *PlatformChannel) GetPaySceneId() int32 {
	if m != nil && m.PaySceneId != nil {
		return *m.PaySceneId
	}
	return 0
}

func (m *PlatformChannel) GetPaySceneName() string {
	if m != nil && m.PaySceneName != nil {
		return *m.PaySceneName
	}
	return ""
}

//=================================================后台推送功能
//推送APP消息  features_apppushmsg
type AppPushMessage struct {
	Id                   *int32   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	SendState            *int32   `protobuf:"varint,2,opt,name=SendState" json:"SendState,omitempty" bson:"SendState,omitempty"`
	SendTime             *int64   `protobuf:"varint,3,opt,name=SendTime" json:"SendTime,omitempty" bson:"SendTime,omitempty"`
	CreateTime           *int64   `protobuf:"varint,4,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	Recipient            *int32   `protobuf:"varint,5,opt,name=Recipient" json:"Recipient,omitempty" bson:"Recipient,omitempty"`
	Title                *string  `protobuf:"bytes,10,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	Content              *string  `protobuf:"bytes,11,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	Operator             *string  `protobuf:"bytes,12,opt,name=Operator" json:"Operator,omitempty" bson:"Operator,omitempty"`
	Status               *int32   `protobuf:"varint,13,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	JumpObject           *int32   `protobuf:"varint,15,opt,name=JumpObject" json:"JumpObject,omitempty" bson:"JumpObject,omitempty"`
	JumpUrl              *string  `protobuf:"bytes,16,opt,name=JumpUrl" json:"JumpUrl,omitempty" bson:"JumpUrl,omitempty"`
	Label                []int32  `protobuf:"varint,17,rep,name=Label" json:"Label,omitempty" bson:"Label,omitempty"`
	GrabTag              []int32  `protobuf:"varint,18,rep,name=GrabTag" json:"GrabTag,omitempty" bson:"GrabTag,omitempty"`
	CustomTag            []int32  `protobuf:"varint,19,rep,name=CustomTag" json:"CustomTag,omitempty" bson:"CustomTag,omitempty"`
	ObjectId             *int64   `protobuf:"varint,20,opt,name=ObjectId" json:"ObjectId,omitempty" bson:"ObjectId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *AppPushMessage) Reset()         { *m = AppPushMessage{} }
func (m *AppPushMessage) String() string { return proto.CompactTextString(m) }
func (*AppPushMessage) ProtoMessage()    {}
func (*AppPushMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{65}
}
func (m *AppPushMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppPushMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppPushMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppPushMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppPushMessage.Merge(m, src)
}
func (m *AppPushMessage) XXX_Size() int {
	return m.Size()
}
func (m *AppPushMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AppPushMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AppPushMessage proto.InternalMessageInfo

func (m *AppPushMessage) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *AppPushMessage) GetSendState() int32 {
	if m != nil && m.SendState != nil {
		return *m.SendState
	}
	return 0
}

func (m *AppPushMessage) GetSendTime() int64 {
	if m != nil && m.SendTime != nil {
		return *m.SendTime
	}
	return 0
}

func (m *AppPushMessage) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *AppPushMessage) GetRecipient() int32 {
	if m != nil && m.Recipient != nil {
		return *m.Recipient
	}
	return 0
}

func (m *AppPushMessage) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *AppPushMessage) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *AppPushMessage) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *AppPushMessage) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *AppPushMessage) GetJumpObject() int32 {
	if m != nil && m.JumpObject != nil {
		return *m.JumpObject
	}
	return 0
}

func (m *AppPushMessage) GetJumpUrl() string {
	if m != nil && m.JumpUrl != nil {
		return *m.JumpUrl
	}
	return ""
}

func (m *AppPushMessage) GetLabel() []int32 {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *AppPushMessage) GetGrabTag() []int32 {
	if m != nil {
		return m.GrabTag
	}
	return nil
}

func (m *AppPushMessage) GetCustomTag() []int32 {
	if m != nil {
		return m.CustomTag
	}
	return nil
}

func (m *AppPushMessage) GetObjectId() int64 {
	if m != nil && m.ObjectId != nil {
		return *m.ObjectId
	}
	return 0
}

//帮助类型  features_helptype
type HelpType struct {
	Id                   *int32   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Icon                 *string  `protobuf:"bytes,2,opt,name=Icon" json:"Icon,omitempty" bson:"Icon,omitempty"`
	Title                *string  `protobuf:"bytes,3,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	Sort                 *int32   `protobuf:"varint,4,opt,name=Sort" json:"Sort,omitempty" bson:"Sort,omitempty"`
	Optadmin             *string  `protobuf:"bytes,5,opt,name=Optadmin" json:"Optadmin,omitempty" bson:"Optadmin,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,6,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *HelpType) Reset()         { *m = HelpType{} }
func (m *HelpType) String() string { return proto.CompactTextString(m) }
func (*HelpType) ProtoMessage()    {}
func (*HelpType) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{66}
}
func (m *HelpType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelpType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelpType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelpType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelpType.Merge(m, src)
}
func (m *HelpType) XXX_Size() int {
	return m.Size()
}
func (m *HelpType) XXX_DiscardUnknown() {
	xxx_messageInfo_HelpType.DiscardUnknown(m)
}

var xxx_messageInfo_HelpType proto.InternalMessageInfo

func (m *HelpType) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *HelpType) GetIcon() string {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return ""
}

func (m *HelpType) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *HelpType) GetSort() int32 {
	if m != nil && m.Sort != nil {
		return *m.Sort
	}
	return 0
}

func (m *HelpType) GetOptadmin() string {
	if m != nil && m.Optadmin != nil {
		return *m.Optadmin
	}
	return ""
}

func (m *HelpType) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

//帮组设置  features_helpmsg
type HelpMsg struct {
	Id                   *int32   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Types                *int32   `protobuf:"varint,2,opt,name=Types" json:"Types,omitempty" bson:"Types,omitempty"`
	Title                *string  `protobuf:"bytes,3,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	IsHot                *bool    `protobuf:"varint,4,opt,name=IsHot" json:"IsHot,omitempty" bson:"IsHot,omitempty"`
	Optadmin             *string  `protobuf:"bytes,5,opt,name=Optadmin" json:"Optadmin,omitempty" bson:"Optadmin,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,6,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	Sort                 *int32   `protobuf:"varint,7,opt,name=Sort" json:"Sort,omitempty" bson:"Sort,omitempty"`
	Content              *string  `protobuf:"bytes,8,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *HelpMsg) Reset()         { *m = HelpMsg{} }
func (m *HelpMsg) String() string { return proto.CompactTextString(m) }
func (*HelpMsg) ProtoMessage()    {}
func (*HelpMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{67}
}
func (m *HelpMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelpMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelpMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelpMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelpMsg.Merge(m, src)
}
func (m *HelpMsg) XXX_Size() int {
	return m.Size()
}
func (m *HelpMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_HelpMsg.DiscardUnknown(m)
}

var xxx_messageInfo_HelpMsg proto.InternalMessageInfo

func (m *HelpMsg) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *HelpMsg) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *HelpMsg) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *HelpMsg) GetIsHot() bool {
	if m != nil && m.IsHot != nil {
		return *m.IsHot
	}
	return false
}

func (m *HelpMsg) GetOptadmin() string {
	if m != nil && m.Optadmin != nil {
		return *m.Optadmin
	}
	return ""
}

func (m *HelpMsg) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *HelpMsg) GetSort() int32 {
	if m != nil && m.Sort != nil {
		return *m.Sort
	}
	return 0
}

func (m *HelpMsg) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

//用户投诉表 player_complaint
type PlayerComplaint struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	RespondentId         *int64   `protobuf:"varint,3,opt,name=RespondentId" json:"RespondentId,omitempty" bson:"RespondentId,omitempty"`
	CreateTime           *int64   `protobuf:"varint,4,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	Types                *int32   `protobuf:"varint,5,opt,name=Types" json:"Types,omitempty" bson:"Types,omitempty"`
	Type                 *int32   `protobuf:"varint,6,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	Content              *string  `protobuf:"bytes,10,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	Operator             *string  `protobuf:"bytes,11,opt,name=Operator" json:"Operator,omitempty" bson:"Operator,omitempty"`
	ReContent            *string  `protobuf:"bytes,12,opt,name=ReContent" json:"ReContent,omitempty" bson:"ReContent,omitempty"`
	Status               *int32   `protobuf:"varint,13,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	ReTime               *int64   `protobuf:"varint,14,opt,name=ReTime" json:"ReTime,omitempty" bson:"ReTime,omitempty"`
	OrderId              *int64   `protobuf:"varint,15,opt,name=order_id" json:"order_id,omitempty" bson:"order_id,omitempty"`
	GoodsId              *int64   `protobuf:"varint,16,opt,name=GoodsId" json:"GoodsId,omitempty" bson:"GoodsId,omitempty"`
	PlayerAcount         *string  `protobuf:"bytes,17,opt,name=PlayerAcount" json:"PlayerAcount,omitempty" bson:"PlayerAcount,omitempty"`
	RespondentAcount     *string  `protobuf:"bytes,18,opt,name=RespondentAcount" json:"RespondentAcount,omitempty" bson:"RespondentAcount,omitempty"`
	Icon                 []string `protobuf:"bytes,19,rep,name=Icon" json:"Icon,omitempty" bson:"Icon,omitempty"`
	Reason               *int32   `protobuf:"varint,20,opt,name=Reason" json:"Reason,omitempty" bson:"Reason,omitempty"`
	Name                 *string  `protobuf:"bytes,21,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Phone                *string  `protobuf:"bytes,22,opt,name=Phone" json:"Phone,omitempty" bson:"Phone,omitempty"`
	DynamicId            *int64   `protobuf:"varint,23,opt,name=DynamicId" json:"DynamicId,omitempty" bson:"DynamicId,omitempty"`
	TopicId              *int64   `protobuf:"varint,24,opt,name=TopicId" json:"TopicId,omitempty" bson:"TopicId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerComplaint) Reset()         { *m = PlayerComplaint{} }
func (m *PlayerComplaint) String() string { return proto.CompactTextString(m) }
func (*PlayerComplaint) ProtoMessage()    {}
func (*PlayerComplaint) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{68}
}
func (m *PlayerComplaint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerComplaint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerComplaint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerComplaint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerComplaint.Merge(m, src)
}
func (m *PlayerComplaint) XXX_Size() int {
	return m.Size()
}
func (m *PlayerComplaint) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerComplaint.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerComplaint proto.InternalMessageInfo

func (m *PlayerComplaint) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerComplaint) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerComplaint) GetRespondentId() int64 {
	if m != nil && m.RespondentId != nil {
		return *m.RespondentId
	}
	return 0
}

func (m *PlayerComplaint) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PlayerComplaint) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *PlayerComplaint) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *PlayerComplaint) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *PlayerComplaint) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *PlayerComplaint) GetReContent() string {
	if m != nil && m.ReContent != nil {
		return *m.ReContent
	}
	return ""
}

func (m *PlayerComplaint) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *PlayerComplaint) GetReTime() int64 {
	if m != nil && m.ReTime != nil {
		return *m.ReTime
	}
	return 0
}

func (m *PlayerComplaint) GetOrderId() int64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *PlayerComplaint) GetGoodsId() int64 {
	if m != nil && m.GoodsId != nil {
		return *m.GoodsId
	}
	return 0
}

func (m *PlayerComplaint) GetPlayerAcount() string {
	if m != nil && m.PlayerAcount != nil {
		return *m.PlayerAcount
	}
	return ""
}

func (m *PlayerComplaint) GetRespondentAcount() string {
	if m != nil && m.RespondentAcount != nil {
		return *m.RespondentAcount
	}
	return ""
}

func (m *PlayerComplaint) GetIcon() []string {
	if m != nil {
		return m.Icon
	}
	return nil
}

func (m *PlayerComplaint) GetReason() int32 {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return 0
}

func (m *PlayerComplaint) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *PlayerComplaint) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *PlayerComplaint) GetDynamicId() int64 {
	if m != nil && m.DynamicId != nil {
		return *m.DynamicId
	}
	return 0
}

func (m *PlayerComplaint) GetTopicId() int64 {
	if m != nil && m.TopicId != nil {
		return *m.TopicId
	}
	return 0
}

type NearByGreetInfo struct {
	PlayerId             *int64        `protobuf:"varint,1,opt,name=PlayerId" json:"_id,omitempty" bson:"_id,omitempty"`
	NearByInfo           []*NearByInfo `protobuf:"bytes,2,rep,name=NearByInfo" json:"NearByInfo,omitempty" bson:"NearByInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-" bson:"-"`
	XXX_unrecognized     []byte        `json:"-" bson:"-"`
	XXX_sizecache        int32         `json:"-" bson:"-"`
}

func (m *NearByGreetInfo) Reset()         { *m = NearByGreetInfo{} }
func (m *NearByGreetInfo) String() string { return proto.CompactTextString(m) }
func (*NearByGreetInfo) ProtoMessage()    {}
func (*NearByGreetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{69}
}
func (m *NearByGreetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NearByGreetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NearByGreetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NearByGreetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NearByGreetInfo.Merge(m, src)
}
func (m *NearByGreetInfo) XXX_Size() int {
	return m.Size()
}
func (m *NearByGreetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NearByGreetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NearByGreetInfo proto.InternalMessageInfo

func (m *NearByGreetInfo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *NearByGreetInfo) GetNearByInfo() []*NearByInfo {
	if m != nil {
		return m.NearByInfo
	}
	return nil
}

type NearByInfo struct {
	PlayerId             *int64   `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Content              *string  `protobuf:"bytes,2,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	IsAdd                *bool    `protobuf:"varint,3,opt,name=IsAdd" json:"IsAdd,omitempty" bson:"IsAdd,omitempty"`
	Time                 *int64   `protobuf:"varint,4,opt,name=Time" json:"Time,omitempty" bson:"Time,omitempty"`
	IsRead               *bool    `protobuf:"varint,5,opt,name=IsRead" json:"IsRead,omitempty" bson:"IsRead,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *NearByInfo) Reset()         { *m = NearByInfo{} }
func (m *NearByInfo) String() string { return proto.CompactTextString(m) }
func (*NearByInfo) ProtoMessage()    {}
func (*NearByInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{70}
}
func (m *NearByInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NearByInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NearByInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NearByInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NearByInfo.Merge(m, src)
}
func (m *NearByInfo) XXX_Size() int {
	return m.Size()
}
func (m *NearByInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NearByInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NearByInfo proto.InternalMessageInfo

func (m *NearByInfo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *NearByInfo) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *NearByInfo) GetIsAdd() bool {
	if m != nil && m.IsAdd != nil {
		return *m.IsAdd
	}
	return false
}

func (m *NearByInfo) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *NearByInfo) GetIsRead() bool {
	if m != nil && m.IsRead != nil {
		return *m.IsRead
	}
	return false
}

// 系统公告
type SystemNotice struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=id" json:"_id,omitempty" bson:"_id,omitempty"`
	CreateTime           *int64   `protobuf:"varint,2,opt,name=create_time" json:"create_time,omitempty" bson:"create_time,omitempty"`
	Title                *string  `protobuf:"bytes,3,opt,name=title" json:"title,omitempty" bson:"title,omitempty"`
	Content              *string  `protobuf:"bytes,4,opt,name=content" json:"content,omitempty" bson:"content,omitempty"`
	UserType             *int32   `protobuf:"varint,5,opt,name=user_type" json:"user_type,omitempty" bson:"user_type,omitempty"`
	Type                 *int32   `protobuf:"varint,6,opt,name=type" json:"type,omitempty" bson:"type,omitempty"`
	CountType            *int32   `protobuf:"varint,7,opt,name=count_type" json:"count_type,omitempty" bson:"count_type,omitempty"`
	State                *int32   `protobuf:"varint,8,opt,name=state" json:"state,omitempty" bson:"state,omitempty"`
	Operator             *string  `protobuf:"bytes,9,opt,name=operator" json:"operator,omitempty" bson:"operator,omitempty"`
	EditTime             *int64   `protobuf:"varint,10,opt,name=edit_time" json:"edit_time,omitempty" bson:"edit_time,omitempty"`
	SendState            *int32   `protobuf:"varint,11,opt,name=send_state" json:"send_state,omitempty" bson:"send_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *SystemNotice) Reset()         { *m = SystemNotice{} }
func (m *SystemNotice) String() string { return proto.CompactTextString(m) }
func (*SystemNotice) ProtoMessage()    {}
func (*SystemNotice) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{71}
}
func (m *SystemNotice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemNotice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemNotice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemNotice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemNotice.Merge(m, src)
}
func (m *SystemNotice) XXX_Size() int {
	return m.Size()
}
func (m *SystemNotice) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemNotice.DiscardUnknown(m)
}

var xxx_messageInfo_SystemNotice proto.InternalMessageInfo

func (m *SystemNotice) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SystemNotice) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *SystemNotice) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *SystemNotice) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *SystemNotice) GetUserType() int32 {
	if m != nil && m.UserType != nil {
		return *m.UserType
	}
	return 0
}

func (m *SystemNotice) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *SystemNotice) GetCountType() int32 {
	if m != nil && m.CountType != nil {
		return *m.CountType
	}
	return 0
}

func (m *SystemNotice) GetState() int32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

func (m *SystemNotice) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *SystemNotice) GetEditTime() int64 {
	if m != nil && m.EditTime != nil {
		return *m.EditTime
	}
	return 0
}

func (m *SystemNotice) GetSendState() int32 {
	if m != nil && m.SendState != nil {
		return *m.SendState
	}
	return 0
}

// 畅聊助手信息
type Assistant struct {
	Id                   *int64   `protobuf:"varint,1,req,name=id" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,req,name=player_id" json:"player_id,omitempty" bson:"player_id,omitempty"`
	CreateTime           *int64   `protobuf:"varint,3,req,name=create_time" json:"create_time,omitempty" bson:"create_time,omitempty"`
	Type                 *int32   `protobuf:"varint,4,req,name=type" json:"type,omitempty" bson:"type,omitempty"`
	FriendType           *int32   `protobuf:"varint,5,opt,name=friend_type" json:"friend_type,omitempty" bson:"friend_type,omitempty"`
	Nickname             *string  `protobuf:"bytes,6,opt,name=nickname" json:"nickname,omitempty" bson:"nickname,omitempty"`
	Avatar               *string  `protobuf:"bytes,7,opt,name=avatar" json:"avatar,omitempty" bson:"avatar,omitempty"`
	Account              *string  `protobuf:"bytes,8,opt,name=account" json:"account,omitempty" bson:"account,omitempty"`
	Phone                *string  `protobuf:"bytes,9,opt,name=phone" json:"phone,omitempty" bson:"phone,omitempty"`
	Content              *string  `protobuf:"bytes,10,opt,name=content" json:"content,omitempty" bson:"content,omitempty"`
	Title                *string  `protobuf:"bytes,11,opt,name=title" json:"title,omitempty" bson:"title,omitempty"`
	AddFriendType        *int32   `protobuf:"varint,12,opt,name=AddFriendType" json:"AddFriendType,omitempty" bson:"AddFriendType,omitempty"`
	Signature            *string  `protobuf:"bytes,13,opt,name=Signature" json:"Signature,omitempty" bson:"Signature,omitempty"`
	Photo                []string `protobuf:"bytes,14,rep,name=Photo" json:"Photo,omitempty" bson:"Photo,omitempty"`
	Pid                  *int64   `protobuf:"varint,15,opt,name=Pid" json:"Pid,omitempty" bson:"Pid,omitempty"`
	Sex                  *int32   `protobuf:"varint,16,opt,name=Sex" json:"Sex,omitempty" bson:"Sex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *Assistant) Reset()         { *m = Assistant{} }
func (m *Assistant) String() string { return proto.CompactTextString(m) }
func (*Assistant) ProtoMessage()    {}
func (*Assistant) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{72}
}
func (m *Assistant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Assistant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Assistant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Assistant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Assistant.Merge(m, src)
}
func (m *Assistant) XXX_Size() int {
	return m.Size()
}
func (m *Assistant) XXX_DiscardUnknown() {
	xxx_messageInfo_Assistant.DiscardUnknown(m)
}

var xxx_messageInfo_Assistant proto.InternalMessageInfo

func (m *Assistant) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Assistant) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *Assistant) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *Assistant) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *Assistant) GetFriendType() int32 {
	if m != nil && m.FriendType != nil {
		return *m.FriendType
	}
	return 0
}

func (m *Assistant) GetNickname() string {
	if m != nil && m.Nickname != nil {
		return *m.Nickname
	}
	return ""
}

func (m *Assistant) GetAvatar() string {
	if m != nil && m.Avatar != nil {
		return *m.Avatar
	}
	return ""
}

func (m *Assistant) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *Assistant) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *Assistant) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *Assistant) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *Assistant) GetAddFriendType() int32 {
	if m != nil && m.AddFriendType != nil {
		return *m.AddFriendType
	}
	return 0
}

func (m *Assistant) GetSignature() string {
	if m != nil && m.Signature != nil {
		return *m.Signature
	}
	return ""
}

func (m *Assistant) GetPhoto() []string {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *Assistant) GetPid() int64 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

func (m *Assistant) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

//
//功能名称Id:
//转账功能参数	limit_parameter
//头像参数	avatar_parameter
//兴趣参数	interest_parameter
//屏蔽值适用度	obj_moderations
//动态热门	squarehot_parameter
//支付预警	warning_parameter
//极光推送管理	push_parameter
//电竞配置	esport_parameter
type SysParameter struct {
	Id                *string `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	TransferOneMax    *int64  `protobuf:"varint,2,opt,name=TransferOneMax" json:"TransferOneMax,omitempty" bson:"TransferOneMax,omitempty"`
	TransferOneDayMax *int64  `protobuf:"varint,3,opt,name=TransferOneDayMax" json:"TransferOneDayMax,omitempty" bson:"TransferOneDayMax,omitempty"`
	IsTransfer        *bool   `protobuf:"varint,4,opt,name=IsTransfer" json:"IsTransfer,omitempty" bson:"IsTransfer,omitempty"`
	IsRedPacket       *bool   `protobuf:"varint,5,opt,name=IsRedPacket" json:"IsRedPacket,omitempty" bson:"IsRedPacket,omitempty"`
	RedPacketMin      *int64  `protobuf:"varint,6,opt,name=RedPacketMin" json:"RedPacketMin,omitempty" bson:"RedPacketMin,omitempty"`
	RedPacketMax      *int64  `protobuf:"varint,7,opt,name=RedPacketMax" json:"RedPacketMax,omitempty" bson:"RedPacketMax,omitempty"`
	TeamRedPacketNum  *int32  `protobuf:"varint,8,opt,name=TeamRedPacketNum" json:"TeamRedPacketNum,omitempty" bson:"TeamRedPacketNum,omitempty"`
	IsRecharge        *bool   `protobuf:"varint,10,opt,name=IsRecharge" json:"IsRecharge,omitempty" bson:"IsRecharge,omitempty"`
	RechargeMin       *int64  `protobuf:"varint,11,opt,name=RechargeMin" json:"RechargeMin,omitempty" bson:"RechargeMin,omitempty"`
	RechargeMax       *int64  `protobuf:"varint,12,opt,name=RechargeMax" json:"RechargeMax,omitempty" bson:"RechargeMax,omitempty"`
	IsWithdrawal      *bool   `protobuf:"varint,15,opt,name=IsWithdrawal" json:"IsWithdrawal,omitempty" bson:"IsWithdrawal,omitempty"`
	WithdrawalMin     *int64  `protobuf:"varint,16,opt,name=WithdrawalMin" json:"WithdrawalMin,omitempty" bson:"WithdrawalMin,omitempty"`
	WithdrawalMax     *int64  `protobuf:"varint,17,opt,name=WithdrawalMax" json:"WithdrawalMax,omitempty" bson:"WithdrawalMax,omitempty"`
	OutSum            *int64  `protobuf:"varint,18,opt,name=OutSum" json:"OutSum,omitempty" bson:"OutSum,omitempty"`
	OutTimes          *int32  `protobuf:"varint,19,opt,name=OutTimes" json:"OutTimes,omitempty" bson:"OutTimes,omitempty"`
	RiskControl       *int64  `protobuf:"varint,20,opt,name=RiskControl" json:"RiskControl,omitempty" bson:"RiskControl,omitempty"`
	IsQRcode          *bool   `protobuf:"varint,21,opt,name=IsQRcode" json:"IsQRcode,omitempty" bson:"IsQRcode,omitempty"`
	ExpiredDay        *int32  `protobuf:"varint,22,opt,name=ExpiredDay" json:"ExpiredDay,omitempty" bson:"ExpiredDay,omitempty"`
	//头像参数
	MavatarCount *int32 `protobuf:"varint,30,opt,name=MavatarCount" json:"MavatarCount,omitempty" bson:"MavatarCount,omitempty"`
	WavatarCount *int32 `protobuf:"varint,31,opt,name=WavatarCount" json:"WavatarCount,omitempty" bson:"WavatarCount,omitempty"`
	//兴趣参数
	InterestMin *int32 `protobuf:"varint,40,opt,name=InterestMin" json:"InterestMin,omitempty" bson:"InterestMin,omitempty"`
	InterestMax *int32 `protobuf:"varint,41,opt,name=InterestMax" json:"InterestMax,omitempty" bson:"InterestMax,omitempty"`
	//动态热门字段
	ZanScore        *int32 `protobuf:"varint,50,opt,name=ZanScore" json:"ZanScore,omitempty" bson:"ZanScore,omitempty"`
	CoinScore       *int32 `protobuf:"varint,51,opt,name=CoinScore" json:"CoinScore,omitempty" bson:"CoinScore,omitempty"`
	CommentScore    *int32 `protobuf:"varint,52,opt,name=CommentScore" json:"CommentScore,omitempty" bson:"CommentScore,omitempty"`
	HotScore        *int32 `protobuf:"varint,53,opt,name=HotScore" json:"HotScore,omitempty" bson:"HotScore,omitempty"`
	DampRatio       *int32 `protobuf:"varint,54,opt,name=DampRatio" json:"DampRatio,omitempty" bson:"DampRatio,omitempty"`
	CommentHotScore *int32 `protobuf:"varint,64,opt,name=CommentHotScore" json:"CommentHotScore,omitempty" bson:"CommentHotScore,omitempty"`
	CommentHotCount *int32 `protobuf:"varint,65,opt,name=CommentHotCount" json:"CommentHotCount,omitempty" bson:"CommentHotCount,omitempty"`
	//
	TextModerations  []*GrabTag `protobuf:"bytes,42,rep,name=TextModerations" json:"TextModerations,omitempty" bson:"TextModerations,omitempty"`
	ImageModerations []*GrabTag `protobuf:"bytes,43,rep,name=ImageModerations" json:"ImageModerations,omitempty" bson:"ImageModerations,omitempty"`
	//支付预警配置
	RechargeTime       *int64   `protobuf:"varint,55,opt,name=RechargeTime" json:"RechargeTime,omitempty" bson:"RechargeTime,omitempty"`
	RechargeTimes      *int64   `protobuf:"varint,56,opt,name=RechargeTimes" json:"RechargeTimes,omitempty" bson:"RechargeTimes,omitempty"`
	RechargeGoldRate   *int64   `protobuf:"varint,57,opt,name=RechargeGoldRate" json:"RechargeGoldRate,omitempty" bson:"RechargeGoldRate,omitempty"`
	RechargeGold       *int64   `protobuf:"varint,58,opt,name=RechargeGold" json:"RechargeGold,omitempty" bson:"RechargeGold,omitempty"`
	WithdrawalTime     *int64   `protobuf:"varint,59,opt,name=WithdrawalTime" json:"WithdrawalTime,omitempty" bson:"WithdrawalTime,omitempty"`
	WithdrawalTimes    *int64   `protobuf:"varint,60,opt,name=WithdrawalTimes" json:"WithdrawalTimes,omitempty" bson:"WithdrawalTimes,omitempty"`
	WithdrawalGoldRate *int64   `protobuf:"varint,61,opt,name=WithdrawalGoldRate" json:"WithdrawalGoldRate,omitempty" bson:"WithdrawalGoldRate,omitempty"`
	WithdrawalGold     *int64   `protobuf:"varint,62,opt,name=WithdrawalGold" json:"WithdrawalGold,omitempty" bson:"WithdrawalGold,omitempty"`
	PhoneList          []string `protobuf:"bytes,63,rep,name=PhoneList" json:"PhoneList,omitempty" bson:"PhoneList,omitempty"`
	//极光推送配置
	PushSet []*PushSettings `protobuf:"bytes,70,rep,name=PushSet" json:"PushSet,omitempty" bson:"PushSet,omitempty"`
	//电竞配置
	EsOneBetGold    *int64 `protobuf:"varint,75,opt,name=EsOneBetGold" json:"EsOneBetGold,omitempty" bson:"EsOneBetGold,omitempty"`
	EsOneDayBetGold *int64 `protobuf:"varint,76,opt,name=EsOneDayBetGold" json:"EsOneDayBetGold,omitempty" bson:"EsOneDayBetGold,omitempty"`
	EsDaySumGold    *int64 `protobuf:"varint,77,opt,name=EsDaySumGold" json:"EsDaySumGold,omitempty" bson:"EsDaySumGold,omitempty"`
	//通用参数 common_parameter
	StrangerChatCount    *int64   `protobuf:"varint,80,opt,name=StrangerChatCount" json:"StrangerChatCount,omitempty" bson:"StrangerChatCount,omitempty"`
	DayMaxMatchTimes     *int64   `protobuf:"varint,81,opt,name=DayMaxMatchTimes" json:"DayMaxMatchTimes,omitempty" bson:"DayMaxMatchTimes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *SysParameter) Reset()         { *m = SysParameter{} }
func (m *SysParameter) String() string { return proto.CompactTextString(m) }
func (*SysParameter) ProtoMessage()    {}
func (*SysParameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{73}
}
func (m *SysParameter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SysParameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SysParameter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SysParameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SysParameter.Merge(m, src)
}
func (m *SysParameter) XXX_Size() int {
	return m.Size()
}
func (m *SysParameter) XXX_DiscardUnknown() {
	xxx_messageInfo_SysParameter.DiscardUnknown(m)
}

var xxx_messageInfo_SysParameter proto.InternalMessageInfo

func (m *SysParameter) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *SysParameter) GetTransferOneMax() int64 {
	if m != nil && m.TransferOneMax != nil {
		return *m.TransferOneMax
	}
	return 0
}

func (m *SysParameter) GetTransferOneDayMax() int64 {
	if m != nil && m.TransferOneDayMax != nil {
		return *m.TransferOneDayMax
	}
	return 0
}

func (m *SysParameter) GetIsTransfer() bool {
	if m != nil && m.IsTransfer != nil {
		return *m.IsTransfer
	}
	return false
}

func (m *SysParameter) GetIsRedPacket() bool {
	if m != nil && m.IsRedPacket != nil {
		return *m.IsRedPacket
	}
	return false
}

func (m *SysParameter) GetRedPacketMin() int64 {
	if m != nil && m.RedPacketMin != nil {
		return *m.RedPacketMin
	}
	return 0
}

func (m *SysParameter) GetRedPacketMax() int64 {
	if m != nil && m.RedPacketMax != nil {
		return *m.RedPacketMax
	}
	return 0
}

func (m *SysParameter) GetTeamRedPacketNum() int32 {
	if m != nil && m.TeamRedPacketNum != nil {
		return *m.TeamRedPacketNum
	}
	return 0
}

func (m *SysParameter) GetIsRecharge() bool {
	if m != nil && m.IsRecharge != nil {
		return *m.IsRecharge
	}
	return false
}

func (m *SysParameter) GetRechargeMin() int64 {
	if m != nil && m.RechargeMin != nil {
		return *m.RechargeMin
	}
	return 0
}

func (m *SysParameter) GetRechargeMax() int64 {
	if m != nil && m.RechargeMax != nil {
		return *m.RechargeMax
	}
	return 0
}

func (m *SysParameter) GetIsWithdrawal() bool {
	if m != nil && m.IsWithdrawal != nil {
		return *m.IsWithdrawal
	}
	return false
}

func (m *SysParameter) GetWithdrawalMin() int64 {
	if m != nil && m.WithdrawalMin != nil {
		return *m.WithdrawalMin
	}
	return 0
}

func (m *SysParameter) GetWithdrawalMax() int64 {
	if m != nil && m.WithdrawalMax != nil {
		return *m.WithdrawalMax
	}
	return 0
}

func (m *SysParameter) GetOutSum() int64 {
	if m != nil && m.OutSum != nil {
		return *m.OutSum
	}
	return 0
}

func (m *SysParameter) GetOutTimes() int32 {
	if m != nil && m.OutTimes != nil {
		return *m.OutTimes
	}
	return 0
}

func (m *SysParameter) GetRiskControl() int64 {
	if m != nil && m.RiskControl != nil {
		return *m.RiskControl
	}
	return 0
}

func (m *SysParameter) GetIsQRcode() bool {
	if m != nil && m.IsQRcode != nil {
		return *m.IsQRcode
	}
	return false
}

func (m *SysParameter) GetExpiredDay() int32 {
	if m != nil && m.ExpiredDay != nil {
		return *m.ExpiredDay
	}
	return 0
}

func (m *SysParameter) GetMavatarCount() int32 {
	if m != nil && m.MavatarCount != nil {
		return *m.MavatarCount
	}
	return 0
}

func (m *SysParameter) GetWavatarCount() int32 {
	if m != nil && m.WavatarCount != nil {
		return *m.WavatarCount
	}
	return 0
}

func (m *SysParameter) GetInterestMin() int32 {
	if m != nil && m.InterestMin != nil {
		return *m.InterestMin
	}
	return 0
}

func (m *SysParameter) GetInterestMax() int32 {
	if m != nil && m.InterestMax != nil {
		return *m.InterestMax
	}
	return 0
}

func (m *SysParameter) GetZanScore() int32 {
	if m != nil && m.ZanScore != nil {
		return *m.ZanScore
	}
	return 0
}

func (m *SysParameter) GetCoinScore() int32 {
	if m != nil && m.CoinScore != nil {
		return *m.CoinScore
	}
	return 0
}

func (m *SysParameter) GetCommentScore() int32 {
	if m != nil && m.CommentScore != nil {
		return *m.CommentScore
	}
	return 0
}

func (m *SysParameter) GetHotScore() int32 {
	if m != nil && m.HotScore != nil {
		return *m.HotScore
	}
	return 0
}

func (m *SysParameter) GetDampRatio() int32 {
	if m != nil && m.DampRatio != nil {
		return *m.DampRatio
	}
	return 0
}

func (m *SysParameter) GetCommentHotScore() int32 {
	if m != nil && m.CommentHotScore != nil {
		return *m.CommentHotScore
	}
	return 0
}

func (m *SysParameter) GetCommentHotCount() int32 {
	if m != nil && m.CommentHotCount != nil {
		return *m.CommentHotCount
	}
	return 0
}

func (m *SysParameter) GetTextModerations() []*GrabTag {
	if m != nil {
		return m.TextModerations
	}
	return nil
}

func (m *SysParameter) GetImageModerations() []*GrabTag {
	if m != nil {
		return m.ImageModerations
	}
	return nil
}

func (m *SysParameter) GetRechargeTime() int64 {
	if m != nil && m.RechargeTime != nil {
		return *m.RechargeTime
	}
	return 0
}

func (m *SysParameter) GetRechargeTimes() int64 {
	if m != nil && m.RechargeTimes != nil {
		return *m.RechargeTimes
	}
	return 0
}

func (m *SysParameter) GetRechargeGoldRate() int64 {
	if m != nil && m.RechargeGoldRate != nil {
		return *m.RechargeGoldRate
	}
	return 0
}

func (m *SysParameter) GetRechargeGold() int64 {
	if m != nil && m.RechargeGold != nil {
		return *m.RechargeGold
	}
	return 0
}

func (m *SysParameter) GetWithdrawalTime() int64 {
	if m != nil && m.WithdrawalTime != nil {
		return *m.WithdrawalTime
	}
	return 0
}

func (m *SysParameter) GetWithdrawalTimes() int64 {
	if m != nil && m.WithdrawalTimes != nil {
		return *m.WithdrawalTimes
	}
	return 0
}

func (m *SysParameter) GetWithdrawalGoldRate() int64 {
	if m != nil && m.WithdrawalGoldRate != nil {
		return *m.WithdrawalGoldRate
	}
	return 0
}

func (m *SysParameter) GetWithdrawalGold() int64 {
	if m != nil && m.WithdrawalGold != nil {
		return *m.WithdrawalGold
	}
	return 0
}

func (m *SysParameter) GetPhoneList() []string {
	if m != nil {
		return m.PhoneList
	}
	return nil
}

func (m *SysParameter) GetPushSet() []*PushSettings {
	if m != nil {
		return m.PushSet
	}
	return nil
}

func (m *SysParameter) GetEsOneBetGold() int64 {
	if m != nil && m.EsOneBetGold != nil {
		return *m.EsOneBetGold
	}
	return 0
}

func (m *SysParameter) GetEsOneDayBetGold() int64 {
	if m != nil && m.EsOneDayBetGold != nil {
		return *m.EsOneDayBetGold
	}
	return 0
}

func (m *SysParameter) GetEsDaySumGold() int64 {
	if m != nil && m.EsDaySumGold != nil {
		return *m.EsDaySumGold
	}
	return 0
}

func (m *SysParameter) GetStrangerChatCount() int64 {
	if m != nil && m.StrangerChatCount != nil {
		return *m.StrangerChatCount
	}
	return 0
}

func (m *SysParameter) GetDayMaxMatchTimes() int64 {
	if m != nil && m.DayMaxMatchTimes != nil {
		return *m.DayMaxMatchTimes
	}
	return 0
}

//极光推送配置
type PushSettings struct {
	Id                   *int32   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	Title                *string  `protobuf:"bytes,2,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	ObjId                *int32   `protobuf:"varint,3,opt,name=ObjId" json:"ObjId,omitempty" bson:"ObjId,omitempty"`
	ObjTitle             *string  `protobuf:"bytes,4,opt,name=ObjTitle" json:"ObjTitle,omitempty" bson:"ObjTitle,omitempty"`
	ObjContent           *string  `protobuf:"bytes,5,opt,name=ObjContent" json:"ObjContent,omitempty" bson:"ObjContent,omitempty"`
	IsPush               *bool    `protobuf:"varint,6,opt,name=IsPush" json:"IsPush,omitempty" bson:"IsPush,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PushSettings) Reset()         { *m = PushSettings{} }
func (m *PushSettings) String() string { return proto.CompactTextString(m) }
func (*PushSettings) ProtoMessage()    {}
func (*PushSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{74}
}
func (m *PushSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushSettings.Merge(m, src)
}
func (m *PushSettings) XXX_Size() int {
	return m.Size()
}
func (m *PushSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_PushSettings.DiscardUnknown(m)
}

var xxx_messageInfo_PushSettings proto.InternalMessageInfo

func (m *PushSettings) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PushSettings) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *PushSettings) GetObjId() int32 {
	if m != nil && m.ObjId != nil {
		return *m.ObjId
	}
	return 0
}

func (m *PushSettings) GetObjTitle() string {
	if m != nil && m.ObjTitle != nil {
		return *m.ObjTitle
	}
	return ""
}

func (m *PushSettings) GetObjContent() string {
	if m != nil && m.ObjContent != nil {
		return *m.ObjContent
	}
	return ""
}

func (m *PushSettings) GetIsPush() bool {
	if m != nil && m.IsPush != nil {
		return *m.IsPush
	}
	return false
}

//注册登录日志   register_login_log
type LoginRegisterInfo struct {
	Type                 *int32   `protobuf:"varint,1,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	Time                 *int64   `protobuf:"varint,2,opt,name=Time" json:"Time,omitempty" bson:"Time,omitempty"`
	PlayerId             *int64   `protobuf:"varint,3,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Channel              *string  `protobuf:"bytes,4,opt,name=Channel" json:"Channel,omitempty" bson:"Channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *LoginRegisterInfo) Reset()         { *m = LoginRegisterInfo{} }
func (m *LoginRegisterInfo) String() string { return proto.CompactTextString(m) }
func (*LoginRegisterInfo) ProtoMessage()    {}
func (*LoginRegisterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{75}
}
func (m *LoginRegisterInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginRegisterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginRegisterInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginRegisterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRegisterInfo.Merge(m, src)
}
func (m *LoginRegisterInfo) XXX_Size() int {
	return m.Size()
}
func (m *LoginRegisterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRegisterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRegisterInfo proto.InternalMessageInfo

func (m *LoginRegisterInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *LoginRegisterInfo) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *LoginRegisterInfo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LoginRegisterInfo) GetChannel() string {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return ""
}

//运营渠道管理表 operation_channel
type OperationChannel struct {
	Id                   *int32    `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string   `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	ChannelNo            *string   `protobuf:"bytes,3,opt,name=ChannelNo" json:"ChannelNo,omitempty" bson:"ChannelNo,omitempty"`
	Type                 *string   `protobuf:"bytes,4,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	CompanyName          *string   `protobuf:"bytes,5,opt,name=CompanyName" json:"CompanyName,omitempty" bson:"CompanyName,omitempty"`
	Cooperation          *int32    `protobuf:"varint,6,opt,name=Cooperation" json:"Cooperation,omitempty" bson:"Cooperation,omitempty"`
	Price                *int64    `protobuf:"varint,7,opt,name=Price" json:"Price,omitempty" bson:"Price,omitempty"`
	Rate                 *int64    `protobuf:"varint,8,opt,name=Rate" json:"Rate,omitempty" bson:"Rate,omitempty"`
	CreateTime           *int64    `protobuf:"varint,11,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	UpdateTime           *int64    `protobuf:"varint,12,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	DpSet                *DownPage `protobuf:"bytes,13,opt,name=DpSet" json:"DpSet,omitempty" bson:"DpSet,omitempty"`
	Status               *int32    `protobuf:"varint,14,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	AddCount             *int64    `protobuf:"varint,15,opt,name=AddCount" json:"AddCount,omitempty" bson:"AddCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" bson:"-"`
	XXX_unrecognized     []byte    `json:"-" bson:"-"`
	XXX_sizecache        int32     `json:"-" bson:"-"`
}

func (m *OperationChannel) Reset()         { *m = OperationChannel{} }
func (m *OperationChannel) String() string { return proto.CompactTextString(m) }
func (*OperationChannel) ProtoMessage()    {}
func (*OperationChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{76}
}
func (m *OperationChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperationChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationChannel.Merge(m, src)
}
func (m *OperationChannel) XXX_Size() int {
	return m.Size()
}
func (m *OperationChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationChannel.DiscardUnknown(m)
}

var xxx_messageInfo_OperationChannel proto.InternalMessageInfo

func (m *OperationChannel) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *OperationChannel) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *OperationChannel) GetChannelNo() string {
	if m != nil && m.ChannelNo != nil {
		return *m.ChannelNo
	}
	return ""
}

func (m *OperationChannel) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *OperationChannel) GetCompanyName() string {
	if m != nil && m.CompanyName != nil {
		return *m.CompanyName
	}
	return ""
}

func (m *OperationChannel) GetCooperation() int32 {
	if m != nil && m.Cooperation != nil {
		return *m.Cooperation
	}
	return 0
}

func (m *OperationChannel) GetPrice() int64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *OperationChannel) GetRate() int64 {
	if m != nil && m.Rate != nil {
		return *m.Rate
	}
	return 0
}

func (m *OperationChannel) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *OperationChannel) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *OperationChannel) GetDpSet() *DownPage {
	if m != nil {
		return m.DpSet
	}
	return nil
}

func (m *OperationChannel) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *OperationChannel) GetAddCount() int64 {
	if m != nil && m.AddCount != nil {
		return *m.AddCount
	}
	return 0
}

////落地页资源结构
type DownPage struct {
	ModId                *int32   `protobuf:"varint,1,opt,name=ModId" json:"ModId,omitempty" bson:"ModId,omitempty"`
	Icon                 *string  `protobuf:"bytes,2,opt,name=Icon" json:"Icon,omitempty" bson:"Icon,omitempty"`
	Banner               []string `protobuf:"bytes,3,rep,name=Banner" json:"Banner,omitempty" bson:"Banner,omitempty"`
	BtnText              *string  `protobuf:"bytes,4,opt,name=BtnText" json:"BtnText,omitempty" bson:"BtnText,omitempty"`
	Floot                *string  `protobuf:"bytes,5,opt,name=Floot" json:"Floot,omitempty" bson:"Floot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DownPage) Reset()         { *m = DownPage{} }
func (m *DownPage) String() string { return proto.CompactTextString(m) }
func (*DownPage) ProtoMessage()    {}
func (*DownPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{77}
}
func (m *DownPage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownPage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownPage.Merge(m, src)
}
func (m *DownPage) XXX_Size() int {
	return m.Size()
}
func (m *DownPage) XXX_DiscardUnknown() {
	xxx_messageInfo_DownPage.DiscardUnknown(m)
}

var xxx_messageInfo_DownPage proto.InternalMessageInfo

func (m *DownPage) GetModId() int32 {
	if m != nil && m.ModId != nil {
		return *m.ModId
	}
	return 0
}

func (m *DownPage) GetIcon() string {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return ""
}

func (m *DownPage) GetBanner() []string {
	if m != nil {
		return m.Banner
	}
	return nil
}

func (m *DownPage) GetBtnText() string {
	if m != nil && m.BtnText != nil {
		return *m.BtnText
	}
	return ""
}

func (m *DownPage) GetFloot() string {
	if m != nil && m.Floot != nil {
		return *m.Floot
	}
	return ""
}

//访问IP库
type IpLibrary struct {
	Ip                   *string  `protobuf:"bytes,1,opt,name=Ip" json:"_id,omitempty" bson:"_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *IpLibrary) Reset()         { *m = IpLibrary{} }
func (m *IpLibrary) String() string { return proto.CompactTextString(m) }
func (*IpLibrary) ProtoMessage()    {}
func (*IpLibrary) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{78}
}
func (m *IpLibrary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IpLibrary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IpLibrary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IpLibrary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpLibrary.Merge(m, src)
}
func (m *IpLibrary) XXX_Size() int {
	return m.Size()
}
func (m *IpLibrary) XXX_DiscardUnknown() {
	xxx_messageInfo_IpLibrary.DiscardUnknown(m)
}

var xxx_messageInfo_IpLibrary proto.InternalMessageInfo

func (m *IpLibrary) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

//兴趣标签
type InterestTag struct {
	Id                   *int32   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Icon                 *string  `protobuf:"bytes,3,opt,name=Icon" json:"Icon,omitempty" bson:"Icon,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,4,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	Sort                 *int32   `protobuf:"varint,5,opt,name=Sort" json:"Sort,omitempty" bson:"Sort,omitempty"`
	PopIcon              *string  `protobuf:"bytes,6,opt,name=PopIcon" json:"PopIcon,omitempty" bson:"PopIcon,omitempty"`
	InterestType         *int32   `protobuf:"varint,7,opt,name=InterestType" json:"InterestType,omitempty" bson:"InterestType,omitempty"`
	InterestName         *int32   `protobuf:"varint,8,opt,name=InterestName" json:"-" bson:"-"`
	Status               *int32   `protobuf:"varint,9,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	PlayTime             *int32   `protobuf:"varint,10,opt,name=PlayTime" json:"PlayTime,omitempty" bson:"PlayTime,omitempty"`
	Count                *int64   `protobuf:"varint,11,opt,name=Count" json:"Count,omitempty" bson:"Count,omitempty"`
	SortName             *string  `protobuf:"bytes,12,opt,name=SortName" json:"SortName,omitempty" bson:"SortName,omitempty"`
	UnReviewCount        *int64   `protobuf:"varint,13,opt,name=UnReviewCount" json:"UnReviewCount,omitempty" bson:"UnReviewCount,omitempty"`
	UseCount             *int64   `protobuf:"varint,14,opt,name=UseCount" json:"UseCount,omitempty" bson:"UseCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *InterestTag) Reset()         { *m = InterestTag{} }
func (m *InterestTag) String() string { return proto.CompactTextString(m) }
func (*InterestTag) ProtoMessage()    {}
func (*InterestTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{79}
}
func (m *InterestTag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterestTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterestTag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterestTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterestTag.Merge(m, src)
}
func (m *InterestTag) XXX_Size() int {
	return m.Size()
}
func (m *InterestTag) XXX_DiscardUnknown() {
	xxx_messageInfo_InterestTag.DiscardUnknown(m)
}

var xxx_messageInfo_InterestTag proto.InternalMessageInfo

func (m *InterestTag) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *InterestTag) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *InterestTag) GetIcon() string {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return ""
}

func (m *InterestTag) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *InterestTag) GetSort() int32 {
	if m != nil && m.Sort != nil {
		return *m.Sort
	}
	return 0
}

func (m *InterestTag) GetPopIcon() string {
	if m != nil && m.PopIcon != nil {
		return *m.PopIcon
	}
	return ""
}

func (m *InterestTag) GetInterestType() int32 {
	if m != nil && m.InterestType != nil {
		return *m.InterestType
	}
	return 0
}

func (m *InterestTag) GetInterestName() int32 {
	if m != nil && m.InterestName != nil {
		return *m.InterestName
	}
	return 0
}

func (m *InterestTag) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *InterestTag) GetPlayTime() int32 {
	if m != nil && m.PlayTime != nil {
		return *m.PlayTime
	}
	return 0
}

func (m *InterestTag) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *InterestTag) GetSortName() string {
	if m != nil && m.SortName != nil {
		return *m.SortName
	}
	return ""
}

func (m *InterestTag) GetUnReviewCount() int64 {
	if m != nil && m.UnReviewCount != nil {
		return *m.UnReviewCount
	}
	return 0
}

func (m *InterestTag) GetUseCount() int64 {
	if m != nil && m.UseCount != nil {
		return *m.UseCount
	}
	return 0
}

//兴趣分类
type InterestType struct {
	Id                   *int32   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,4,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	Sort                 *int32   `protobuf:"varint,5,opt,name=Sort" json:"Sort,omitempty" bson:"Sort,omitempty"`
	Status               *int32   `protobuf:"varint,6,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *InterestType) Reset()         { *m = InterestType{} }
func (m *InterestType) String() string { return proto.CompactTextString(m) }
func (*InterestType) ProtoMessage()    {}
func (*InterestType) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{80}
}
func (m *InterestType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterestType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterestType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterestType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterestType.Merge(m, src)
}
func (m *InterestType) XXX_Size() int {
	return m.Size()
}
func (m *InterestType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterestType.DiscardUnknown(m)
}

var xxx_messageInfo_InterestType proto.InternalMessageInfo

func (m *InterestType) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *InterestType) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *InterestType) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *InterestType) GetSort() int32 {
	if m != nil && m.Sort != nil {
		return *m.Sort
	}
	return 0
}

func (m *InterestType) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

//兴趣组合
type InterestGroup struct {
	Id                   *int32   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Group                []int32  `protobuf:"varint,3,rep,name=Group" json:"Group,omitempty" bson:"Group,omitempty"`
	PopIcon              *string  `protobuf:"bytes,4,opt,name=PopIcon" json:"PopIcon,omitempty" bson:"PopIcon,omitempty"`
	PlayTime             *int32   `protobuf:"varint,5,opt,name=PlayTime" json:"PlayTime,omitempty" bson:"PlayTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *InterestGroup) Reset()         { *m = InterestGroup{} }
func (m *InterestGroup) String() string { return proto.CompactTextString(m) }
func (*InterestGroup) ProtoMessage()    {}
func (*InterestGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{81}
}
func (m *InterestGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterestGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterestGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterestGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterestGroup.Merge(m, src)
}
func (m *InterestGroup) XXX_Size() int {
	return m.Size()
}
func (m *InterestGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_InterestGroup.DiscardUnknown(m)
}

var xxx_messageInfo_InterestGroup proto.InternalMessageInfo

func (m *InterestGroup) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *InterestGroup) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *InterestGroup) GetGroup() []int32 {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *InterestGroup) GetPopIcon() string {
	if m != nil && m.PopIcon != nil {
		return *m.PopIcon
	}
	return ""
}

func (m *InterestGroup) GetPlayTime() int32 {
	if m != nil && m.PlayTime != nil {
		return *m.PlayTime
	}
	return 0
}

//小助手推送内容
type Tweets struct {
	ID                   *int64     `protobuf:"varint,1,opt,name=ID" json:"_id,omitempty" bson:"_id,omitempty"`
	List                 []int32    `protobuf:"varint,2,rep,name=List" json:"List,omitempty" bson:"List,omitempty"`
	UserType             *int32     `protobuf:"varint,3,opt,name=User_type" json:"User_type,omitempty" bson:"User_type,omitempty"`
	SendState            *int32     `protobuf:"varint,4,opt,name=Send_state" json:"Send_state,omitempty" bson:"Send_state,omitempty"`
	SendTime             *int64     `protobuf:"varint,5,opt,name=Send_time" json:"Send_time,omitempty" bson:"Send_time,omitempty"`
	CreateTime           *int64     `protobuf:"varint,6,opt,name=Create_time" json:"Create_time,omitempty" bson:"Create_time,omitempty"`
	Operator             *string    `protobuf:"bytes,7,opt,name=Operator" json:"Operator,omitempty" bson:"Operator,omitempty"`
	State                *int32     `protobuf:"varint,9,opt,name=State" json:"State,omitempty" bson:"State,omitempty"`
	UpdateTime           *int64     `protobuf:"varint,10,opt,name=Update_time" json:"Update_time,omitempty" bson:"Update_time,omitempty"`
	Article              []*Article `protobuf:"bytes,11,rep,name=Article" json:"Article,omitempty" bson:"Article,omitempty"`
	CatchLabel           []int32    `protobuf:"varint,12,rep,name=CatchLabel" json:"CatchLabel,omitempty" bson:"CatchLabel,omitempty"`
	CustomLabel          []int32    `protobuf:"varint,13,rep,name=CustomLabel" json:"CustomLabel,omitempty" bson:"CustomLabel,omitempty"`
	AllLabel             *int32     `protobuf:"varint,14,opt,name=AllLabel" json:"AllLabel,omitempty" bson:"AllLabel,omitempty"`
	JgPush               *int32     `protobuf:"varint,15,opt,name=JgPush" json:"JgPush,omitempty" bson:"JgPush,omitempty"`
	Validity             *float64   `protobuf:"fixed64,16,opt,name=Validity" json:"Validity,omitempty" bson:"Validity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-" bson:"-"`
	XXX_unrecognized     []byte     `json:"-" bson:"-"`
	XXX_sizecache        int32      `json:"-" bson:"-"`
}

func (m *Tweets) Reset()         { *m = Tweets{} }
func (m *Tweets) String() string { return proto.CompactTextString(m) }
func (*Tweets) ProtoMessage()    {}
func (*Tweets) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{82}
}
func (m *Tweets) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tweets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tweets.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tweets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tweets.Merge(m, src)
}
func (m *Tweets) XXX_Size() int {
	return m.Size()
}
func (m *Tweets) XXX_DiscardUnknown() {
	xxx_messageInfo_Tweets.DiscardUnknown(m)
}

var xxx_messageInfo_Tweets proto.InternalMessageInfo

func (m *Tweets) GetID() int64 {
	if m != nil && m.ID != nil {
		return *m.ID
	}
	return 0
}

func (m *Tweets) GetList() []int32 {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *Tweets) GetUserType() int32 {
	if m != nil && m.UserType != nil {
		return *m.UserType
	}
	return 0
}

func (m *Tweets) GetSendState() int32 {
	if m != nil && m.SendState != nil {
		return *m.SendState
	}
	return 0
}

func (m *Tweets) GetSendTime() int64 {
	if m != nil && m.SendTime != nil {
		return *m.SendTime
	}
	return 0
}

func (m *Tweets) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *Tweets) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *Tweets) GetState() int32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

func (m *Tweets) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *Tweets) GetArticle() []*Article {
	if m != nil {
		return m.Article
	}
	return nil
}

func (m *Tweets) GetCatchLabel() []int32 {
	if m != nil {
		return m.CatchLabel
	}
	return nil
}

func (m *Tweets) GetCustomLabel() []int32 {
	if m != nil {
		return m.CustomLabel
	}
	return nil
}

func (m *Tweets) GetAllLabel() int32 {
	if m != nil && m.AllLabel != nil {
		return *m.AllLabel
	}
	return 0
}

func (m *Tweets) GetJgPush() int32 {
	if m != nil && m.JgPush != nil {
		return *m.JgPush
	}
	return 0
}

func (m *Tweets) GetValidity() float64 {
	if m != nil && m.Validity != nil {
		return *m.Validity
	}
	return 0
}

//小助手注册推送
type RegisterPush struct {
	ID                   *int64     `protobuf:"varint,1,opt,name=ID" json:"_id,omitempty" bson:"_id,omitempty"`
	AllLabel             *int32     `protobuf:"varint,2,opt,name=AllLabel" json:"AllLabel,omitempty" bson:"AllLabel,omitempty"`
	List                 []int32    `protobuf:"varint,3,rep,name=List" json:"List,omitempty" bson:"List,omitempty"`
	CatchLabel           []int32    `protobuf:"varint,4,rep,name=CatchLabel" json:"CatchLabel,omitempty" bson:"CatchLabel,omitempty"`
	CustomLabel          []int32    `protobuf:"varint,5,rep,name=CustomLabel" json:"CustomLabel,omitempty" bson:"CustomLabel,omitempty"`
	UserType             *int32     `protobuf:"varint,6,opt,name=User_type" json:"User_type,omitempty" bson:"User_type,omitempty"`
	State                *int32     `protobuf:"varint,7,opt,name=State" json:"State,omitempty" bson:"State,omitempty"`
	CreateTime           *int64     `protobuf:"varint,8,opt,name=Create_time" json:"Create_time,omitempty" bson:"Create_time,omitempty"`
	Operator             *string    `protobuf:"bytes,9,opt,name=Operator" json:"Operator,omitempty" bson:"Operator,omitempty"`
	UpdateTime           *int64     `protobuf:"varint,10,opt,name=Update_time" json:"Update_time,omitempty" bson:"Update_time,omitempty"`
	Article              []*Article `protobuf:"bytes,11,rep,name=Article" json:"Article,omitempty" bson:"Article,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-" bson:"-"`
	XXX_unrecognized     []byte     `json:"-" bson:"-"`
	XXX_sizecache        int32      `json:"-" bson:"-"`
}

func (m *RegisterPush) Reset()         { *m = RegisterPush{} }
func (m *RegisterPush) String() string { return proto.CompactTextString(m) }
func (*RegisterPush) ProtoMessage()    {}
func (*RegisterPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{83}
}
func (m *RegisterPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterPush.Merge(m, src)
}
func (m *RegisterPush) XXX_Size() int {
	return m.Size()
}
func (m *RegisterPush) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterPush.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterPush proto.InternalMessageInfo

func (m *RegisterPush) GetID() int64 {
	if m != nil && m.ID != nil {
		return *m.ID
	}
	return 0
}

func (m *RegisterPush) GetAllLabel() int32 {
	if m != nil && m.AllLabel != nil {
		return *m.AllLabel
	}
	return 0
}

func (m *RegisterPush) GetList() []int32 {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *RegisterPush) GetCatchLabel() []int32 {
	if m != nil {
		return m.CatchLabel
	}
	return nil
}

func (m *RegisterPush) GetCustomLabel() []int32 {
	if m != nil {
		return m.CustomLabel
	}
	return nil
}

func (m *RegisterPush) GetUserType() int32 {
	if m != nil && m.UserType != nil {
		return *m.UserType
	}
	return 0
}

func (m *RegisterPush) GetState() int32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

func (m *RegisterPush) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *RegisterPush) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *RegisterPush) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *RegisterPush) GetArticle() []*Article {
	if m != nil {
		return m.Article
	}
	return nil
}

////文章:article
type Article struct {
	ID                   *int64            `protobuf:"varint,1,opt,name=ID" json:"_id,omitempty" bson:"_id,omitempty"`
	ArticleType          *int32            `protobuf:"varint,2,opt,name=ArticleType" json:"ArticleType,omitempty" bson:"ArticleType,omitempty"`
	Title                *string           `protobuf:"bytes,3,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	Icon                 *string           `protobuf:"bytes,4,opt,name=Icon" json:"Icon,omitempty" bson:"Icon,omitempty"`
	Content              *string           `protobuf:"bytes,5,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	CreateTime           *int64            `protobuf:"varint,6,opt,name=Create_time" json:"Create_time,omitempty" bson:"Create_time,omitempty"`
	EditTime             *int64            `protobuf:"varint,7,opt,name=Edit_time" json:"Edit_time,omitempty" bson:"Edit_time,omitempty"`
	State                *int32            `protobuf:"varint,8,opt,name=State" json:"State,omitempty" bson:"State,omitempty"`
	IsMain               *int32            `protobuf:"varint,9,opt,name=IsMain" json:"IsMain,omitempty" bson:"IsMain,omitempty"`
	Location             *int32            `protobuf:"varint,10,opt,name=Location" json:"Location,omitempty" bson:"Location,omitempty"`
	ObjectId             *int64            `protobuf:"varint,23,opt,name=ObjectId" json:"ObjectId,omitempty" bson:"ObjectId,omitempty"`
	ObjPlayerId          *int64            `protobuf:"varint,24,opt,name=ObjPlayerId" json:"ObjPlayerId,omitempty" bson:"ObjPlayerId,omitempty"`
	Operator             *string           `protobuf:"bytes,11,opt,name=Operator" json:"Operator,omitempty" bson:"Operator,omitempty"`
	TransArticleUrl      *string           `protobuf:"bytes,12,opt,name=TransArticleUrl" json:"TransArticleUrl,omitempty" bson:"TransArticleUrl,omitempty"`
	Sort                 *int32            `protobuf:"varint,13,opt,name=Sort" json:"Sort,omitempty" bson:"Sort,omitempty"`
	Profile              *string           `protobuf:"bytes,14,opt,name=Profile" json:"Profile,omitempty" bson:"Profile,omitempty"`
	ReadedNum            *int64            `protobuf:"varint,15,opt,name=ReadedNum" json:"ReadedNum,omitempty" bson:"ReadedNum,omitempty"`
	ReadedNumVirtual     *int64            `protobuf:"varint,16,opt,name=ReadedNumVirtual" json:"ReadedNumVirtual,omitempty" bson:"ReadedNumVirtual,omitempty"`
	ReadedBase           *int64            `protobuf:"varint,17,opt,name=ReadedBase" json:"ReadedBase,omitempty" bson:"ReadedBase,omitempty"`
	ZanNum               *int64            `protobuf:"varint,18,opt,name=ZanNum" json:"ZanNum,omitempty" bson:"ZanNum,omitempty"`
	ReadingNum           *int64            `protobuf:"varint,19,opt,name=ReadingNum" json:"ReadingNum,omitempty" bson:"ReadingNum,omitempty"`
	IsZan                *bool             `protobuf:"varint,20,opt,name=IsZan" json:"IsZan,omitempty" bson:"IsZan,omitempty"`
	Comments             []*ArticleComment `protobuf:"bytes,21,rep,name=comments" json:"comments,omitempty" bson:"comments,omitempty"`
	CommentNum           *int32            `protobuf:"varint,22,opt,name=CommentNum" json:"CommentNum,omitempty" bson:"CommentNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-" bson:"-"`
	XXX_unrecognized     []byte            `json:"-" bson:"-"`
	XXX_sizecache        int32             `json:"-" bson:"-"`
}

func (m *Article) Reset()         { *m = Article{} }
func (m *Article) String() string { return proto.CompactTextString(m) }
func (*Article) ProtoMessage()    {}
func (*Article) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{84}
}
func (m *Article) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Article) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Article.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Article) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Article.Merge(m, src)
}
func (m *Article) XXX_Size() int {
	return m.Size()
}
func (m *Article) XXX_DiscardUnknown() {
	xxx_messageInfo_Article.DiscardUnknown(m)
}

var xxx_messageInfo_Article proto.InternalMessageInfo

func (m *Article) GetID() int64 {
	if m != nil && m.ID != nil {
		return *m.ID
	}
	return 0
}

func (m *Article) GetArticleType() int32 {
	if m != nil && m.ArticleType != nil {
		return *m.ArticleType
	}
	return 0
}

func (m *Article) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *Article) GetIcon() string {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return ""
}

func (m *Article) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *Article) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *Article) GetEditTime() int64 {
	if m != nil && m.EditTime != nil {
		return *m.EditTime
	}
	return 0
}

func (m *Article) GetState() int32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

func (m *Article) GetIsMain() int32 {
	if m != nil && m.IsMain != nil {
		return *m.IsMain
	}
	return 0
}

func (m *Article) GetLocation() int32 {
	if m != nil && m.Location != nil {
		return *m.Location
	}
	return 0
}

func (m *Article) GetObjectId() int64 {
	if m != nil && m.ObjectId != nil {
		return *m.ObjectId
	}
	return 0
}

func (m *Article) GetObjPlayerId() int64 {
	if m != nil && m.ObjPlayerId != nil {
		return *m.ObjPlayerId
	}
	return 0
}

func (m *Article) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *Article) GetTransArticleUrl() string {
	if m != nil && m.TransArticleUrl != nil {
		return *m.TransArticleUrl
	}
	return ""
}

func (m *Article) GetSort() int32 {
	if m != nil && m.Sort != nil {
		return *m.Sort
	}
	return 0
}

func (m *Article) GetProfile() string {
	if m != nil && m.Profile != nil {
		return *m.Profile
	}
	return ""
}

func (m *Article) GetReadedNum() int64 {
	if m != nil && m.ReadedNum != nil {
		return *m.ReadedNum
	}
	return 0
}

func (m *Article) GetReadedNumVirtual() int64 {
	if m != nil && m.ReadedNumVirtual != nil {
		return *m.ReadedNumVirtual
	}
	return 0
}

func (m *Article) GetReadedBase() int64 {
	if m != nil && m.ReadedBase != nil {
		return *m.ReadedBase
	}
	return 0
}

func (m *Article) GetZanNum() int64 {
	if m != nil && m.ZanNum != nil {
		return *m.ZanNum
	}
	return 0
}

func (m *Article) GetReadingNum() int64 {
	if m != nil && m.ReadingNum != nil {
		return *m.ReadingNum
	}
	return 0
}

func (m *Article) GetIsZan() bool {
	if m != nil && m.IsZan != nil {
		return *m.IsZan
	}
	return false
}

func (m *Article) GetComments() []*ArticleComment {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *Article) GetCommentNum() int32 {
	if m != nil && m.CommentNum != nil {
		return *m.CommentNum
	}
	return 0
}

//文章点赞:article_zan
type ArticleZan struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	ArticleId            *int64   `protobuf:"varint,2,opt,name=ArticleId" json:"ArticleId,omitempty" bson:"ArticleId,omitempty"`
	PlayerId             *int64   `protobuf:"varint,3,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Name                 *string  `protobuf:"bytes,4,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	HeadUrl              *string  `protobuf:"bytes,5,opt,name=HeadUrl" json:"HeadUrl,omitempty" bson:"HeadUrl,omitempty"`
	CreateTime           *int64   `protobuf:"varint,6,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ArticleZan) Reset()         { *m = ArticleZan{} }
func (m *ArticleZan) String() string { return proto.CompactTextString(m) }
func (*ArticleZan) ProtoMessage()    {}
func (*ArticleZan) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{85}
}
func (m *ArticleZan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleZan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleZan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleZan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleZan.Merge(m, src)
}
func (m *ArticleZan) XXX_Size() int {
	return m.Size()
}
func (m *ArticleZan) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleZan.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleZan proto.InternalMessageInfo

func (m *ArticleZan) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ArticleZan) GetArticleId() int64 {
	if m != nil && m.ArticleId != nil {
		return *m.ArticleId
	}
	return 0
}

func (m *ArticleZan) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *ArticleZan) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ArticleZan) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *ArticleZan) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

//文章评论:article_comment
type ArticleComment struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	ArticleId            *int64   `protobuf:"varint,2,opt,name=ArticleId" json:"ArticleId,omitempty" bson:"ArticleId,omitempty"`
	Content              *string  `protobuf:"bytes,3,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	PlayerId             *int64   `protobuf:"varint,4,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Account              *string  `protobuf:"bytes,9,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	Name                 *string  `protobuf:"bytes,5,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	HeadUrl              *string  `protobuf:"bytes,6,opt,name=HeadUrl" json:"HeadUrl,omitempty" bson:"HeadUrl,omitempty"`
	CreateTime           *int64   `protobuf:"varint,7,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	Status               *int32   `protobuf:"varint,8,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	Note                 *string  `protobuf:"bytes,10,opt,name=Note" json:"Note,omitempty" bson:"Note,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ArticleComment) Reset()         { *m = ArticleComment{} }
func (m *ArticleComment) String() string { return proto.CompactTextString(m) }
func (*ArticleComment) ProtoMessage()    {}
func (*ArticleComment) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{86}
}
func (m *ArticleComment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleComment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleComment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleComment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleComment.Merge(m, src)
}
func (m *ArticleComment) XXX_Size() int {
	return m.Size()
}
func (m *ArticleComment) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleComment.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleComment proto.InternalMessageInfo

func (m *ArticleComment) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ArticleComment) GetArticleId() int64 {
	if m != nil && m.ArticleId != nil {
		return *m.ArticleId
	}
	return 0
}

func (m *ArticleComment) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *ArticleComment) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *ArticleComment) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *ArticleComment) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ArticleComment) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *ArticleComment) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ArticleComment) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *ArticleComment) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

//自定义标签
type CustomTag struct {
	Id                   *int32   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,4,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *CustomTag) Reset()         { *m = CustomTag{} }
func (m *CustomTag) String() string { return proto.CompactTextString(m) }
func (*CustomTag) ProtoMessage()    {}
func (*CustomTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{87}
}
func (m *CustomTag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomTag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomTag.Merge(m, src)
}
func (m *CustomTag) XXX_Size() int {
	return m.Size()
}
func (m *CustomTag) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomTag.DiscardUnknown(m)
}

var xxx_messageInfo_CustomTag proto.InternalMessageInfo

func (m *CustomTag) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CustomTag) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CustomTag) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

//抓取词
type CrawlWords struct {
	Id                   *int32   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	GrabTag              *int32   `protobuf:"varint,3,opt,name=GrabTag" json:"GrabTag,omitempty" bson:"GrabTag,omitempty"`
	Count                *int64   `protobuf:"varint,5,opt,name=Count" json:"Count,omitempty" bson:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *CrawlWords) Reset()         { *m = CrawlWords{} }
func (m *CrawlWords) String() string { return proto.CompactTextString(m) }
func (*CrawlWords) ProtoMessage()    {}
func (*CrawlWords) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{88}
}
func (m *CrawlWords) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrawlWords) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrawlWords.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrawlWords) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrawlWords.Merge(m, src)
}
func (m *CrawlWords) XXX_Size() int {
	return m.Size()
}
func (m *CrawlWords) XXX_DiscardUnknown() {
	xxx_messageInfo_CrawlWords.DiscardUnknown(m)
}

var xxx_messageInfo_CrawlWords proto.InternalMessageInfo

func (m *CrawlWords) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CrawlWords) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CrawlWords) GetGrabTag() int32 {
	if m != nil && m.GrabTag != nil {
		return *m.GrabTag
	}
	return 0
}

func (m *CrawlWords) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

////抓取标签
type GrabTag struct {
	Id                   *int32   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Count                *int64   `protobuf:"varint,3,opt,name=Count" json:"Count,omitempty" bson:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GrabTag) Reset()         { *m = GrabTag{} }
func (m *GrabTag) String() string { return proto.CompactTextString(m) }
func (*GrabTag) ProtoMessage()    {}
func (*GrabTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{89}
}
func (m *GrabTag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrabTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GrabTag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GrabTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrabTag.Merge(m, src)
}
func (m *GrabTag) XXX_Size() int {
	return m.Size()
}
func (m *GrabTag) XXX_DiscardUnknown() {
	xxx_messageInfo_GrabTag.DiscardUnknown(m)
}

var xxx_messageInfo_GrabTag proto.InternalMessageInfo

func (m *GrabTag) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *GrabTag) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *GrabTag) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

//系统相关存储日志
type SystemLog struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	WordPerSonalId       *int64   `protobuf:"varint,2,opt,name=WordPerSonalId" json:"WordPerSonalId,omitempty" bson:"WordPerSonalId,omitempty"`
	WordTeamId           *int64   `protobuf:"varint,3,opt,name=WordTeamId" json:"WordTeamId,omitempty" bson:"WordTeamId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *SystemLog) Reset()         { *m = SystemLog{} }
func (m *SystemLog) String() string { return proto.CompactTextString(m) }
func (*SystemLog) ProtoMessage()    {}
func (*SystemLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{90}
}
func (m *SystemLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemLog.Merge(m, src)
}
func (m *SystemLog) XXX_Size() int {
	return m.Size()
}
func (m *SystemLog) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemLog.DiscardUnknown(m)
}

var xxx_messageInfo_SystemLog proto.InternalMessageInfo

func (m *SystemLog) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SystemLog) GetWordPerSonalId() int64 {
	if m != nil && m.WordPerSonalId != nil {
		return *m.WordPerSonalId
	}
	return 0
}

func (m *SystemLog) GetWordTeamId() int64 {
	if m != nil && m.WordTeamId != nil {
		return *m.WordTeamId
	}
	return 0
}

//玩家抓取标签次数
type PlayerCrawlWords struct {
	Id                   *int64        `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Words                []*CrawlWords `protobuf:"bytes,2,rep,name=Words" json:"Words,omitempty" bson:"Words,omitempty"`
	Tags                 []*GrabTag    `protobuf:"bytes,3,rep,name=Tags" json:"Tags,omitempty" bson:"Tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-" bson:"-"`
	XXX_unrecognized     []byte        `json:"-" bson:"-"`
	XXX_sizecache        int32         `json:"-" bson:"-"`
}

func (m *PlayerCrawlWords) Reset()         { *m = PlayerCrawlWords{} }
func (m *PlayerCrawlWords) String() string { return proto.CompactTextString(m) }
func (*PlayerCrawlWords) ProtoMessage()    {}
func (*PlayerCrawlWords) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{91}
}
func (m *PlayerCrawlWords) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerCrawlWords) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerCrawlWords.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerCrawlWords) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerCrawlWords.Merge(m, src)
}
func (m *PlayerCrawlWords) XXX_Size() int {
	return m.Size()
}
func (m *PlayerCrawlWords) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerCrawlWords.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerCrawlWords proto.InternalMessageInfo

func (m *PlayerCrawlWords) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerCrawlWords) GetWords() []*CrawlWords {
	if m != nil {
		return m.Words
	}
	return nil
}

func (m *PlayerCrawlWords) GetTags() []*GrabTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

//登录设备库
type PosDeviceCode struct {
	CreateTime           *int64   `protobuf:"varint,1,opt,name=CreateTime" json:"_id,omitempty" bson:"_id,omitempty"`
	DeviceCode           *string  `protobuf:"bytes,2,opt,name=DeviceCode" json:"DeviceCode,omitempty" bson:"DeviceCode,omitempty"`
	Channle              *string  `protobuf:"bytes,3,opt,name=Channle" json:"Channle,omitempty" bson:"Channle,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PosDeviceCode) Reset()         { *m = PosDeviceCode{} }
func (m *PosDeviceCode) String() string { return proto.CompactTextString(m) }
func (*PosDeviceCode) ProtoMessage()    {}
func (*PosDeviceCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{92}
}
func (m *PosDeviceCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PosDeviceCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PosDeviceCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PosDeviceCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PosDeviceCode.Merge(m, src)
}
func (m *PosDeviceCode) XXX_Size() int {
	return m.Size()
}
func (m *PosDeviceCode) XXX_DiscardUnknown() {
	xxx_messageInfo_PosDeviceCode.DiscardUnknown(m)
}

var xxx_messageInfo_PosDeviceCode proto.InternalMessageInfo

func (m *PosDeviceCode) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PosDeviceCode) GetDeviceCode() string {
	if m != nil && m.DeviceCode != nil {
		return *m.DeviceCode
	}
	return ""
}

func (m *PosDeviceCode) GetChannle() string {
	if m != nil && m.Channle != nil {
		return *m.Channle
	}
	return ""
}

//设备Idfa库
type PosDeviceIdfa struct {
	DeviceIdfa           *string  `protobuf:"bytes,1,opt,name=DeviceIdfa" json:"_id,omitempty" bson:"_id,omitempty"`
	CreateTime           *int64   `protobuf:"varint,2,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	Source               *string  `protobuf:"bytes,3,opt,name=source" json:"source,omitempty" bson:"source,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PosDeviceIdfa) Reset()         { *m = PosDeviceIdfa{} }
func (m *PosDeviceIdfa) String() string { return proto.CompactTextString(m) }
func (*PosDeviceIdfa) ProtoMessage()    {}
func (*PosDeviceIdfa) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{93}
}
func (m *PosDeviceIdfa) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PosDeviceIdfa) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PosDeviceIdfa.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PosDeviceIdfa) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PosDeviceIdfa.Merge(m, src)
}
func (m *PosDeviceIdfa) XXX_Size() int {
	return m.Size()
}
func (m *PosDeviceIdfa) XXX_DiscardUnknown() {
	xxx_messageInfo_PosDeviceIdfa.DiscardUnknown(m)
}

var xxx_messageInfo_PosDeviceIdfa proto.InternalMessageInfo

func (m *PosDeviceIdfa) GetDeviceIdfa() string {
	if m != nil && m.DeviceIdfa != nil {
		return *m.DeviceIdfa
	}
	return ""
}

func (m *PosDeviceIdfa) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PosDeviceIdfa) GetSource() string {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return ""
}

//屏蔽词采集日志
type PlayerTalkLog struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	TargetId             *int64   `protobuf:"varint,2,opt,name=TargetId" json:"TargetId,omitempty" bson:"TargetId,omitempty"`
	Connect              *string  `protobuf:"bytes,3,opt,name=Connect" json:"Connect,omitempty" bson:"Connect,omitempty"`
	Words                []string `protobuf:"bytes,4,rep,name=Words" json:"Words,omitempty" bson:"Words,omitempty"`
	EvilType             *int32   `protobuf:"varint,5,opt,name=EvilType" json:"EvilType,omitempty" bson:"EvilType,omitempty"`
	CreateTime           *int64   `protobuf:"varint,6,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerTalkLog) Reset()         { *m = PlayerTalkLog{} }
func (m *PlayerTalkLog) String() string { return proto.CompactTextString(m) }
func (*PlayerTalkLog) ProtoMessage()    {}
func (*PlayerTalkLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{94}
}
func (m *PlayerTalkLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerTalkLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerTalkLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerTalkLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerTalkLog.Merge(m, src)
}
func (m *PlayerTalkLog) XXX_Size() int {
	return m.Size()
}
func (m *PlayerTalkLog) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerTalkLog.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerTalkLog proto.InternalMessageInfo

func (m *PlayerTalkLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerTalkLog) GetTargetId() int64 {
	if m != nil && m.TargetId != nil {
		return *m.TargetId
	}
	return 0
}

func (m *PlayerTalkLog) GetConnect() string {
	if m != nil && m.Connect != nil {
		return *m.Connect
	}
	return ""
}

func (m *PlayerTalkLog) GetWords() []string {
	if m != nil {
		return m.Words
	}
	return nil
}

func (m *PlayerTalkLog) GetEvilType() int32 {
	if m != nil && m.EvilType != nil {
		return *m.EvilType
	}
	return 0
}

func (m *PlayerTalkLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

//屏蔽词库
type DirtyWords struct {
	Word                 *string  `protobuf:"bytes,1,opt,name=Word" json:"_id,omitempty" bson:"_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DirtyWords) Reset()         { *m = DirtyWords{} }
func (m *DirtyWords) String() string { return proto.CompactTextString(m) }
func (*DirtyWords) ProtoMessage()    {}
func (*DirtyWords) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{95}
}
func (m *DirtyWords) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirtyWords) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirtyWords.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirtyWords) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirtyWords.Merge(m, src)
}
func (m *DirtyWords) XXX_Size() int {
	return m.Size()
}
func (m *DirtyWords) XXX_DiscardUnknown() {
	xxx_messageInfo_DirtyWords.DiscardUnknown(m)
}

var xxx_messageInfo_DirtyWords proto.InternalMessageInfo

func (m *DirtyWords) GetWord() string {
	if m != nil && m.Word != nil {
		return *m.Word
	}
	return ""
}

//个性签名库
type Signature struct {
	Title                *string  `protobuf:"bytes,1,opt,name=Title" json:"_id,omitempty" bson:"_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{96}
}
func (m *Signature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return m.Size()
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

//客户服务消息主体表:waiter_message
type IMmessage struct {
	Id                   *int64       `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Title                *string      `protobuf:"bytes,2,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	Content              []*IMcontent `protobuf:"bytes,3,rep,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	CreateTime           *int64       `protobuf:"varint,4,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	UpdateTime           *int64       `protobuf:"varint,5,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	PlayerId             *int64       `protobuf:"varint,10,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Account              *string      `protobuf:"bytes,11,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	NickName             *string      `protobuf:"bytes,12,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	HeadIcon             *string      `protobuf:"bytes,13,opt,name=HeadIcon" json:"HeadIcon,omitempty" bson:"HeadIcon,omitempty"`
	WaiterId             *int64       `protobuf:"varint,14,opt,name=WaiterId" json:"WaiterId,omitempty" bson:"WaiterId,omitempty"`
	WaiterName           *string      `protobuf:"bytes,15,opt,name=WaiterName" json:"WaiterName,omitempty" bson:"WaiterName,omitempty"`
	OriginalId           *int64       `protobuf:"varint,20,opt,name=OriginalId" json:"OriginalId,omitempty" bson:"OriginalId,omitempty"`
	Status               *int32       `protobuf:"varint,21,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	Cnew                 *int32       `protobuf:"varint,22,opt,name=Cnew" json:"Cnew,omitempty" bson:"Cnew,omitempty"`
	Snew                 *int32       `protobuf:"varint,23,opt,name=Snew" json:"Snew,omitempty" bson:"Snew,omitempty"`
	Grade                *int32       `protobuf:"varint,24,opt,name=Grade" json:"Grade,omitempty" bson:"Grade,omitempty"`
	SumContent           *int32       `protobuf:"varint,25,opt,name=SumContent" json:"-" bson:"-"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" bson:"-"`
	XXX_unrecognized     []byte       `json:"-" bson:"-"`
	XXX_sizecache        int32        `json:"-" bson:"-"`
}

func (m *IMmessage) Reset()         { *m = IMmessage{} }
func (m *IMmessage) String() string { return proto.CompactTextString(m) }
func (*IMmessage) ProtoMessage()    {}
func (*IMmessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{97}
}
func (m *IMmessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IMmessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IMmessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IMmessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IMmessage.Merge(m, src)
}
func (m *IMmessage) XXX_Size() int {
	return m.Size()
}
func (m *IMmessage) XXX_DiscardUnknown() {
	xxx_messageInfo_IMmessage.DiscardUnknown(m)
}

var xxx_messageInfo_IMmessage proto.InternalMessageInfo

func (m *IMmessage) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *IMmessage) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *IMmessage) GetContent() []*IMcontent {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *IMmessage) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *IMmessage) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *IMmessage) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *IMmessage) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *IMmessage) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *IMmessage) GetHeadIcon() string {
	if m != nil && m.HeadIcon != nil {
		return *m.HeadIcon
	}
	return ""
}

func (m *IMmessage) GetWaiterId() int64 {
	if m != nil && m.WaiterId != nil {
		return *m.WaiterId
	}
	return 0
}

func (m *IMmessage) GetWaiterName() string {
	if m != nil && m.WaiterName != nil {
		return *m.WaiterName
	}
	return ""
}

func (m *IMmessage) GetOriginalId() int64 {
	if m != nil && m.OriginalId != nil {
		return *m.OriginalId
	}
	return 0
}

func (m *IMmessage) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *IMmessage) GetCnew() int32 {
	if m != nil && m.Cnew != nil {
		return *m.Cnew
	}
	return 0
}

func (m *IMmessage) GetSnew() int32 {
	if m != nil && m.Snew != nil {
		return *m.Snew
	}
	return 0
}

func (m *IMmessage) GetGrade() int32 {
	if m != nil && m.Grade != nil {
		return *m.Grade
	}
	return 0
}

func (m *IMmessage) GetSumContent() int32 {
	if m != nil && m.SumContent != nil {
		return *m.SumContent
	}
	return 0
}

////客户服务消息内容结构
type IMcontent struct {
	Sendtime *int64 `protobuf:"varint,1,opt,name=Sendtime" json:"Sendtime,omitempty" bson:"Sendtime,omitempty"`
	Mtype    *int32 `protobuf:"varint,2,opt,name=Mtype" json:"Mtype,omitempty" bson:"Mtype,omitempty"`
	// optional int32 Status=3;		//阅读状态 0未读，1已读，2删除
	Messages             *string  `protobuf:"bytes,4,opt,name=Messages" json:"Messages,omitempty" bson:"Messages,omitempty"`
	Ctype                *int32   `protobuf:"varint,5,opt,name=Ctype" json:"Ctype,omitempty" bson:"Ctype,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *IMcontent) Reset()         { *m = IMcontent{} }
func (m *IMcontent) String() string { return proto.CompactTextString(m) }
func (*IMcontent) ProtoMessage()    {}
func (*IMcontent) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{98}
}
func (m *IMcontent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IMcontent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IMcontent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IMcontent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IMcontent.Merge(m, src)
}
func (m *IMcontent) XXX_Size() int {
	return m.Size()
}
func (m *IMcontent) XXX_DiscardUnknown() {
	xxx_messageInfo_IMcontent.DiscardUnknown(m)
}

var xxx_messageInfo_IMcontent proto.InternalMessageInfo

func (m *IMcontent) GetSendtime() int64 {
	if m != nil && m.Sendtime != nil {
		return *m.Sendtime
	}
	return 0
}

func (m *IMcontent) GetMtype() int32 {
	if m != nil && m.Mtype != nil {
		return *m.Mtype
	}
	return 0
}

func (m *IMcontent) GetMessages() string {
	if m != nil && m.Messages != nil {
		return *m.Messages
	}
	return ""
}

func (m *IMcontent) GetCtype() int32 {
	if m != nil && m.Ctype != nil {
		return *m.Ctype
	}
	return 0
}

//客服绩效表
type WaiterPerformance struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	CreateTime           *int64   `protobuf:"varint,2,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	WaiterId             *int64   `protobuf:"varint,3,opt,name=WaiterId" json:"WaiterId,omitempty" bson:"WaiterId,omitempty"`
	WaiterName           *string  `protobuf:"bytes,4,opt,name=WaiterName" json:"WaiterName,omitempty" bson:"WaiterName,omitempty"`
	WaiterRole           *int32   `protobuf:"varint,5,opt,name=WaiterRole" json:"WaiterRole,omitempty" bson:"WaiterRole,omitempty"`
	ConNum               *int32   `protobuf:"varint,6,opt,name=ConNum" json:"ConNum,omitempty" bson:"ConNum,omitempty"`
	GradeNum             *int32   `protobuf:"varint,7,opt,name=GradeNum" json:"GradeNum,omitempty" bson:"GradeNum,omitempty"`
	SumGrade             *int32   `protobuf:"varint,8,opt,name=SumGrade" json:"SumGrade,omitempty" bson:"SumGrade,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WaiterPerformance) Reset()         { *m = WaiterPerformance{} }
func (m *WaiterPerformance) String() string { return proto.CompactTextString(m) }
func (*WaiterPerformance) ProtoMessage()    {}
func (*WaiterPerformance) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{99}
}
func (m *WaiterPerformance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WaiterPerformance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WaiterPerformance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WaiterPerformance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaiterPerformance.Merge(m, src)
}
func (m *WaiterPerformance) XXX_Size() int {
	return m.Size()
}
func (m *WaiterPerformance) XXX_DiscardUnknown() {
	xxx_messageInfo_WaiterPerformance.DiscardUnknown(m)
}

var xxx_messageInfo_WaiterPerformance proto.InternalMessageInfo

func (m *WaiterPerformance) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WaiterPerformance) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WaiterPerformance) GetWaiterId() int64 {
	if m != nil && m.WaiterId != nil {
		return *m.WaiterId
	}
	return 0
}

func (m *WaiterPerformance) GetWaiterName() string {
	if m != nil && m.WaiterName != nil {
		return *m.WaiterName
	}
	return ""
}

func (m *WaiterPerformance) GetWaiterRole() int32 {
	if m != nil && m.WaiterRole != nil {
		return *m.WaiterRole
	}
	return 0
}

func (m *WaiterPerformance) GetConNum() int32 {
	if m != nil && m.ConNum != nil {
		return *m.ConNum
	}
	return 0
}

func (m *WaiterPerformance) GetGradeNum() int32 {
	if m != nil && m.GradeNum != nil {
		return *m.GradeNum
	}
	return 0
}

func (m *WaiterPerformance) GetSumGrade() int32 {
	if m != nil && m.SumGrade != nil {
		return *m.SumGrade
	}
	return 0
}

//客服常见问题
type WaiterFAQ struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Title                *string  `protobuf:"bytes,2,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	Content              *string  `protobuf:"bytes,3,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	KeyWord              []string `protobuf:"bytes,4,rep,name=KeyWord" json:"KeyWord,omitempty" bson:"KeyWord,omitempty"`
	Clicks               *int32   `protobuf:"varint,5,opt,name=Clicks" json:"Clicks,omitempty" bson:"Clicks,omitempty"`
	Status               *int32   `protobuf:"varint,6,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,7,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	CreateTime           *int64   `protobuf:"varint,8,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WaiterFAQ) Reset()         { *m = WaiterFAQ{} }
func (m *WaiterFAQ) String() string { return proto.CompactTextString(m) }
func (*WaiterFAQ) ProtoMessage()    {}
func (*WaiterFAQ) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{100}
}
func (m *WaiterFAQ) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WaiterFAQ) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WaiterFAQ.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WaiterFAQ) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaiterFAQ.Merge(m, src)
}
func (m *WaiterFAQ) XXX_Size() int {
	return m.Size()
}
func (m *WaiterFAQ) XXX_DiscardUnknown() {
	xxx_messageInfo_WaiterFAQ.DiscardUnknown(m)
}

var xxx_messageInfo_WaiterFAQ proto.InternalMessageInfo

func (m *WaiterFAQ) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WaiterFAQ) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *WaiterFAQ) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *WaiterFAQ) GetKeyWord() []string {
	if m != nil {
		return m.KeyWord
	}
	return nil
}

func (m *WaiterFAQ) GetClicks() int32 {
	if m != nil && m.Clicks != nil {
		return *m.Clicks
	}
	return 0
}

func (m *WaiterFAQ) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *WaiterFAQ) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *WaiterFAQ) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

//客服快捷语
type WaiterFastReply struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Content              *string  `protobuf:"bytes,2,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	Status               *int32   `protobuf:"varint,3,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,4,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	CreateTime           *int64   `protobuf:"varint,5,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WaiterFastReply) Reset()         { *m = WaiterFastReply{} }
func (m *WaiterFastReply) String() string { return proto.CompactTextString(m) }
func (*WaiterFastReply) ProtoMessage()    {}
func (*WaiterFastReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{101}
}
func (m *WaiterFastReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WaiterFastReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WaiterFastReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WaiterFastReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaiterFastReply.Merge(m, src)
}
func (m *WaiterFastReply) XXX_Size() int {
	return m.Size()
}
func (m *WaiterFastReply) XXX_DiscardUnknown() {
	xxx_messageInfo_WaiterFastReply.DiscardUnknown(m)
}

var xxx_messageInfo_WaiterFastReply proto.InternalMessageInfo

func (m *WaiterFastReply) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WaiterFastReply) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *WaiterFastReply) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *WaiterFastReply) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *WaiterFastReply) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

//后台封号记录
type PlayerFreezeLog struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Account              *string  `protobuf:"bytes,2,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	CreateTime           *int64   `protobuf:"varint,3,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	Status               *int32   `protobuf:"varint,4,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	Note                 *string  `protobuf:"bytes,5,opt,name=Note" json:"Note,omitempty" bson:"Note,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerFreezeLog) Reset()         { *m = PlayerFreezeLog{} }
func (m *PlayerFreezeLog) String() string { return proto.CompactTextString(m) }
func (*PlayerFreezeLog) ProtoMessage()    {}
func (*PlayerFreezeLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{102}
}
func (m *PlayerFreezeLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerFreezeLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerFreezeLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerFreezeLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerFreezeLog.Merge(m, src)
}
func (m *PlayerFreezeLog) XXX_Size() int {
	return m.Size()
}
func (m *PlayerFreezeLog) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerFreezeLog.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerFreezeLog proto.InternalMessageInfo

func (m *PlayerFreezeLog) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *PlayerFreezeLog) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *PlayerFreezeLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PlayerFreezeLog) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *PlayerFreezeLog) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

//注销账号记录 表：player_cancel_account
type PlayerCancleAccount struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Account              *string  `protobuf:"bytes,2,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	Phone                *string  `protobuf:"bytes,3,opt,name=Phone" json:"Phone,omitempty" bson:"Phone,omitempty"`
	PlayerId             *int64   `protobuf:"varint,4,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	CreateTime           *int64   `protobuf:"varint,5,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	RealName             *string  `protobuf:"bytes,6,opt,name=RealName" json:"RealName,omitempty" bson:"RealName,omitempty"`
	PeopleId             *string  `protobuf:"bytes,7,opt,name=PeopleId" json:"PeopleId,omitempty" bson:"PeopleId,omitempty"`
	PeopleIdBeforeUrl    *string  `protobuf:"bytes,8,opt,name=PeopleIdBeforeUrl" json:"PeopleIdBeforeUrl,omitempty" bson:"PeopleIdBeforeUrl,omitempty"`
	PeopleIdBackUrl      *string  `protobuf:"bytes,9,opt,name=PeopleIdBackUrl" json:"PeopleIdBackUrl,omitempty" bson:"PeopleIdBackUrl,omitempty"`
	PeopleIdHandUrl      *string  `protobuf:"bytes,10,opt,name=PeopleIdHandUrl" json:"PeopleIdHandUrl,omitempty" bson:"PeopleIdHandUrl,omitempty"`
	Status               *int32   `protobuf:"varint,11,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	FinishTime           *int64   `protobuf:"varint,12,opt,name=FinishTime" json:"FinishTime,omitempty" bson:"FinishTime,omitempty"`
	Note                 *string  `protobuf:"bytes,13,opt,name=Note" json:"Note,omitempty" bson:"Note,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerCancleAccount) Reset()         { *m = PlayerCancleAccount{} }
func (m *PlayerCancleAccount) String() string { return proto.CompactTextString(m) }
func (*PlayerCancleAccount) ProtoMessage()    {}
func (*PlayerCancleAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{103}
}
func (m *PlayerCancleAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerCancleAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerCancleAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerCancleAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerCancleAccount.Merge(m, src)
}
func (m *PlayerCancleAccount) XXX_Size() int {
	return m.Size()
}
func (m *PlayerCancleAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerCancleAccount.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerCancleAccount proto.InternalMessageInfo

func (m *PlayerCancleAccount) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerCancleAccount) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *PlayerCancleAccount) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *PlayerCancleAccount) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerCancleAccount) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PlayerCancleAccount) GetRealName() string {
	if m != nil && m.RealName != nil {
		return *m.RealName
	}
	return ""
}

func (m *PlayerCancleAccount) GetPeopleId() string {
	if m != nil && m.PeopleId != nil {
		return *m.PeopleId
	}
	return ""
}

func (m *PlayerCancleAccount) GetPeopleIdBeforeUrl() string {
	if m != nil && m.PeopleIdBeforeUrl != nil {
		return *m.PeopleIdBeforeUrl
	}
	return ""
}

func (m *PlayerCancleAccount) GetPeopleIdBackUrl() string {
	if m != nil && m.PeopleIdBackUrl != nil {
		return *m.PeopleIdBackUrl
	}
	return ""
}

func (m *PlayerCancleAccount) GetPeopleIdHandUrl() string {
	if m != nil && m.PeopleIdHandUrl != nil {
		return *m.PeopleIdHandUrl
	}
	return ""
}

func (m *PlayerCancleAccount) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *PlayerCancleAccount) GetFinishTime() int64 {
	if m != nil && m.FinishTime != nil {
		return *m.FinishTime
	}
	return 0
}

func (m *PlayerCancleAccount) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

//注销成功的列表: cancel_account_list
type CancelAccountList struct {
	Phone                *string  `protobuf:"bytes,1,opt,name=Phone" json:"_id,omitempty" bson:"_id,omitempty"`
	FinishTime           *int64   `protobuf:"varint,2,opt,name=FinishTime" json:"FinishTime,omitempty" bson:"FinishTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *CancelAccountList) Reset()         { *m = CancelAccountList{} }
func (m *CancelAccountList) String() string { return proto.CompactTextString(m) }
func (*CancelAccountList) ProtoMessage()    {}
func (*CancelAccountList) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{104}
}
func (m *CancelAccountList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelAccountList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelAccountList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelAccountList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelAccountList.Merge(m, src)
}
func (m *CancelAccountList) XXX_Size() int {
	return m.Size()
}
func (m *CancelAccountList) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelAccountList.DiscardUnknown(m)
}

var xxx_messageInfo_CancelAccountList proto.InternalMessageInfo

func (m *CancelAccountList) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *CancelAccountList) GetFinishTime() int64 {
	if m != nil && m.FinishTime != nil {
		return *m.FinishTime
	}
	return 0
}

//==================抽奖活动====================
// lucky_activity 活动表
type Activity struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Title                *string  `protobuf:"bytes,2,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	StartTime            *int64   `protobuf:"varint,3,opt,name=StartTime" json:"StartTime,omitempty" bson:"StartTime,omitempty"`
	EndTime              *int64   `protobuf:"varint,4,opt,name=EndTime" json:"EndTime,omitempty" bson:"EndTime,omitempty"`
	Status               *int32   `protobuf:"varint,5,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	Types                *int32   `protobuf:"varint,6,opt,name=Types" json:"Types,omitempty" bson:"Types,omitempty"`
	OpenTime             *int64   `protobuf:"varint,7,opt,name=OpenTime" json:"OpenTime,omitempty" bson:"OpenTime,omitempty"`
	CloseTime            *int64   `protobuf:"varint,8,opt,name=CloseTime" json:"CloseTime,omitempty" bson:"CloseTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *Activity) Reset()         { *m = Activity{} }
func (m *Activity) String() string { return proto.CompactTextString(m) }
func (*Activity) ProtoMessage()    {}
func (*Activity) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{105}
}
func (m *Activity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Activity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Activity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Activity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Activity.Merge(m, src)
}
func (m *Activity) XXX_Size() int {
	return m.Size()
}
func (m *Activity) XXX_DiscardUnknown() {
	xxx_messageInfo_Activity.DiscardUnknown(m)
}

var xxx_messageInfo_Activity proto.InternalMessageInfo

func (m *Activity) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Activity) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *Activity) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *Activity) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *Activity) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *Activity) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *Activity) GetOpenTime() int64 {
	if m != nil && m.OpenTime != nil {
		return *m.OpenTime
	}
	return 0
}

func (m *Activity) GetCloseTime() int64 {
	if m != nil && m.CloseTime != nil {
		return *m.CloseTime
	}
	return 0
}

// lucky_props 道具表
type Props struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Status               *int32   `protobuf:"varint,3,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	Count                *int64   `protobuf:"varint,4,opt,name=Count" json:"Count,omitempty" bson:"Count,omitempty"`
	ActivityId           *int64   `protobuf:"varint,5,opt,name=ActivityId" json:"ActivityId,omitempty" bson:"ActivityId,omitempty"`
	Rate                 *int32   `protobuf:"varint,6,opt,name=Rate" json:"Rate,omitempty" bson:"Rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *Props) Reset()         { *m = Props{} }
func (m *Props) String() string { return proto.CompactTextString(m) }
func (*Props) ProtoMessage()    {}
func (*Props) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{106}
}
func (m *Props) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Props) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Props.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Props) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Props.Merge(m, src)
}
func (m *Props) XXX_Size() int {
	return m.Size()
}
func (m *Props) XXX_DiscardUnknown() {
	xxx_messageInfo_Props.DiscardUnknown(m)
}

var xxx_messageInfo_Props proto.InternalMessageInfo

func (m *Props) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Props) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Props) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *Props) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *Props) GetActivityId() int64 {
	if m != nil && m.ActivityId != nil {
		return *m.ActivityId
	}
	return 0
}

func (m *Props) GetRate() int32 {
	if m != nil && m.Rate != nil {
		return *m.Rate
	}
	return 0
}

// lucky_day_props 每天掉落
type DayProps struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Count                *int64   `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty" bson:"Count,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,3,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DayProps) Reset()         { *m = DayProps{} }
func (m *DayProps) String() string { return proto.CompactTextString(m) }
func (*DayProps) ProtoMessage()    {}
func (*DayProps) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{107}
}
func (m *DayProps) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DayProps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DayProps.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DayProps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DayProps.Merge(m, src)
}
func (m *DayProps) XXX_Size() int {
	return m.Size()
}
func (m *DayProps) XXX_DiscardUnknown() {
	xxx_messageInfo_DayProps.DiscardUnknown(m)
}

var xxx_messageInfo_DayProps proto.InternalMessageInfo

func (m *DayProps) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DayProps) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *DayProps) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

// lucky_player_props 用户道具背包
type PlayerProps struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	PropsId              *int64   `protobuf:"varint,2,opt,name=PropsId" json:"PropsId,omitempty" bson:"PropsId,omitempty"`
	PlayerId             *int64   `protobuf:"varint,3,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	CreateTime           *int64   `protobuf:"varint,4,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	ExpiredTime          *int64   `protobuf:"varint,5,opt,name=ExpiredTime" json:"ExpiredTime,omitempty" bson:"ExpiredTime,omitempty"`
	Status               *int64   `protobuf:"varint,6,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	Count                *int64   `protobuf:"varint,7,opt,name=Count" json:"Count,omitempty" bson:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerProps) Reset()         { *m = PlayerProps{} }
func (m *PlayerProps) String() string { return proto.CompactTextString(m) }
func (*PlayerProps) ProtoMessage()    {}
func (*PlayerProps) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{108}
}
func (m *PlayerProps) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerProps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerProps.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerProps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerProps.Merge(m, src)
}
func (m *PlayerProps) XXX_Size() int {
	return m.Size()
}
func (m *PlayerProps) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerProps.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerProps proto.InternalMessageInfo

func (m *PlayerProps) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerProps) GetPropsId() int64 {
	if m != nil && m.PropsId != nil {
		return *m.PropsId
	}
	return 0
}

func (m *PlayerProps) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerProps) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PlayerProps) GetExpiredTime() int64 {
	if m != nil && m.ExpiredTime != nil {
		return *m.ExpiredTime
	}
	return 0
}

func (m *PlayerProps) GetStatus() int64 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *PlayerProps) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

// lucky_player_use_props_log 用户道具使用日志
type PlayerUsePropsLog struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	PropsId              *int64   `protobuf:"varint,2,opt,name=PropsId" json:"PropsId,omitempty" bson:"PropsId,omitempty"`
	PlayerId             *int64   `protobuf:"varint,3,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	RevPlayerId          *int64   `protobuf:"varint,4,opt,name=RevPlayerId" json:"RevPlayerId,omitempty" bson:"RevPlayerId,omitempty"`
	CreateTime           *int64   `protobuf:"varint,5,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	Types                *int32   `protobuf:"varint,6,opt,name=Types" json:"Types,omitempty" bson:"Types,omitempty"`
	Count                *int64   `protobuf:"varint,7,opt,name=Count" json:"Count,omitempty" bson:"Count,omitempty"`
	HeadIcon             *string  `protobuf:"bytes,8,opt,name=HeadIcon" json:"HeadIcon,omitempty" bson:"HeadIcon,omitempty"`
	NickName             *string  `protobuf:"bytes,9,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerUsePropsLog) Reset()         { *m = PlayerUsePropsLog{} }
func (m *PlayerUsePropsLog) String() string { return proto.CompactTextString(m) }
func (*PlayerUsePropsLog) ProtoMessage()    {}
func (*PlayerUsePropsLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{109}
}
func (m *PlayerUsePropsLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerUsePropsLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerUsePropsLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerUsePropsLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerUsePropsLog.Merge(m, src)
}
func (m *PlayerUsePropsLog) XXX_Size() int {
	return m.Size()
}
func (m *PlayerUsePropsLog) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerUsePropsLog.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerUsePropsLog proto.InternalMessageInfo

func (m *PlayerUsePropsLog) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerUsePropsLog) GetPropsId() int64 {
	if m != nil && m.PropsId != nil {
		return *m.PropsId
	}
	return 0
}

func (m *PlayerUsePropsLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerUsePropsLog) GetRevPlayerId() int64 {
	if m != nil && m.RevPlayerId != nil {
		return *m.RevPlayerId
	}
	return 0
}

func (m *PlayerUsePropsLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PlayerUsePropsLog) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *PlayerUsePropsLog) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *PlayerUsePropsLog) GetHeadIcon() string {
	if m != nil && m.HeadIcon != nil {
		return *m.HeadIcon
	}
	return ""
}

func (m *PlayerUsePropsLog) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

// lucky_player 参加抽奖的玩家信息.
type LuckyPlayer struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"_id,omitempty" bson:"_id,omitempty"`
	LuckyCount           *int32   `protobuf:"varint,2,opt,name=LuckyCount" json:"LuckyCount,omitempty" bson:"LuckyCount,omitempty"`
	IsFull               *bool    `protobuf:"varint,3,opt,name=IsFull" json:"IsFull,omitempty" bson:"IsFull,omitempty"`
	FullTime             *int64   `protobuf:"varint,4,opt,name=FullTime" json:"FullTime,omitempty" bson:"FullTime,omitempty"`
	LuckyMoney           *int64   `protobuf:"varint,5,opt,name=LuckyMoney" json:"LuckyMoney,omitempty" bson:"LuckyMoney,omitempty"`
	IsOpen               *bool    `protobuf:"varint,6,opt,name=IsOpen" json:"IsOpen,omitempty" bson:"IsOpen,omitempty"`
	OpenTime             *int64   `protobuf:"varint,7,opt,name=OpenTime" json:"OpenTime,omitempty" bson:"OpenTime,omitempty"`
	IsNewLucky           *bool    `protobuf:"varint,8,opt,name=IsNewLucky" json:"IsNewLucky,omitempty" bson:"IsNewLucky,omitempty"`
	FullPlaces           *int64   `protobuf:"varint,9,opt,name=FullPlaces" json:"FullPlaces,omitempty" bson:"FullPlaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *LuckyPlayer) Reset()         { *m = LuckyPlayer{} }
func (m *LuckyPlayer) String() string { return proto.CompactTextString(m) }
func (*LuckyPlayer) ProtoMessage()    {}
func (*LuckyPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{110}
}
func (m *LuckyPlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LuckyPlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LuckyPlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LuckyPlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LuckyPlayer.Merge(m, src)
}
func (m *LuckyPlayer) XXX_Size() int {
	return m.Size()
}
func (m *LuckyPlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_LuckyPlayer.DiscardUnknown(m)
}

var xxx_messageInfo_LuckyPlayer proto.InternalMessageInfo

func (m *LuckyPlayer) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LuckyPlayer) GetLuckyCount() int32 {
	if m != nil && m.LuckyCount != nil {
		return *m.LuckyCount
	}
	return 0
}

func (m *LuckyPlayer) GetIsFull() bool {
	if m != nil && m.IsFull != nil {
		return *m.IsFull
	}
	return false
}

func (m *LuckyPlayer) GetFullTime() int64 {
	if m != nil && m.FullTime != nil {
		return *m.FullTime
	}
	return 0
}

func (m *LuckyPlayer) GetLuckyMoney() int64 {
	if m != nil && m.LuckyMoney != nil {
		return *m.LuckyMoney
	}
	return 0
}

func (m *LuckyPlayer) GetIsOpen() bool {
	if m != nil && m.IsOpen != nil {
		return *m.IsOpen
	}
	return false
}

func (m *LuckyPlayer) GetOpenTime() int64 {
	if m != nil && m.OpenTime != nil {
		return *m.OpenTime
	}
	return 0
}

func (m *LuckyPlayer) GetIsNewLucky() bool {
	if m != nil && m.IsNewLucky != nil {
		return *m.IsNewLucky
	}
	return false
}

func (m *LuckyPlayer) GetFullPlaces() int64 {
	if m != nil && m.FullPlaces != nil {
		return *m.FullPlaces
	}
	return 0
}

// lucky_player_related 玩家邀请关联
type LuckyPlayerRelated struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	FriendPhone          *string  `protobuf:"bytes,3,opt,name=FriendPhone" json:"FriendPhone,omitempty" bson:"FriendPhone,omitempty"`
	RelatedTime          *int64   `protobuf:"varint,4,opt,name=RelatedTime" json:"RelatedTime,omitempty" bson:"RelatedTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *LuckyPlayerRelated) Reset()         { *m = LuckyPlayerRelated{} }
func (m *LuckyPlayerRelated) String() string { return proto.CompactTextString(m) }
func (*LuckyPlayerRelated) ProtoMessage()    {}
func (*LuckyPlayerRelated) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{111}
}
func (m *LuckyPlayerRelated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LuckyPlayerRelated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LuckyPlayerRelated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LuckyPlayerRelated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LuckyPlayerRelated.Merge(m, src)
}
func (m *LuckyPlayerRelated) XXX_Size() int {
	return m.Size()
}
func (m *LuckyPlayerRelated) XXX_DiscardUnknown() {
	xxx_messageInfo_LuckyPlayerRelated.DiscardUnknown(m)
}

var xxx_messageInfo_LuckyPlayerRelated proto.InternalMessageInfo

func (m *LuckyPlayerRelated) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *LuckyPlayerRelated) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LuckyPlayerRelated) GetFriendPhone() string {
	if m != nil && m.FriendPhone != nil {
		return *m.FriendPhone
	}
	return ""
}

func (m *LuckyPlayerRelated) GetRelatedTime() int64 {
	if m != nil && m.RelatedTime != nil {
		return *m.RelatedTime
	}
	return 0
}

//抽卡概率 lucky_props_rate
type PropsRate struct {
	CreateTime           *int64   `protobuf:"varint,1,opt,name=CreateTime" json:"_id,omitempty" bson:"_id,omitempty"`
	Rate                 []*Props `protobuf:"bytes,2,rep,name=Rate" json:"Rate,omitempty" bson:"Rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PropsRate) Reset()         { *m = PropsRate{} }
func (m *PropsRate) String() string { return proto.CompactTextString(m) }
func (*PropsRate) ProtoMessage()    {}
func (*PropsRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{112}
}
func (m *PropsRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PropsRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PropsRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PropsRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PropsRate.Merge(m, src)
}
func (m *PropsRate) XXX_Size() int {
	return m.Size()
}
func (m *PropsRate) XXX_DiscardUnknown() {
	xxx_messageInfo_PropsRate.DiscardUnknown(m)
}

var xxx_messageInfo_PropsRate proto.InternalMessageInfo

func (m *PropsRate) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PropsRate) GetRate() []*Props {
	if m != nil {
		return m.Rate
	}
	return nil
}

// lucky_sys_full_count 当前集满人数(系统自身生成的和真实用户 ).
type LuckySysFullCount struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	FullCount            *int64   `protobuf:"varint,2,opt,name=FullCount" json:"FullCount,omitempty" bson:"FullCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *LuckySysFullCount) Reset()         { *m = LuckySysFullCount{} }
func (m *LuckySysFullCount) String() string { return proto.CompactTextString(m) }
func (*LuckySysFullCount) ProtoMessage()    {}
func (*LuckySysFullCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{113}
}
func (m *LuckySysFullCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LuckySysFullCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LuckySysFullCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LuckySysFullCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LuckySysFullCount.Merge(m, src)
}
func (m *LuckySysFullCount) XXX_Size() int {
	return m.Size()
}
func (m *LuckySysFullCount) XXX_DiscardUnknown() {
	xxx_messageInfo_LuckySysFullCount.DiscardUnknown(m)
}

var xxx_messageInfo_LuckySysFullCount proto.InternalMessageInfo

func (m *LuckySysFullCount) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LuckySysFullCount) GetFullCount() int64 {
	if m != nil && m.FullCount != nil {
		return *m.FullCount
	}
	return 0
}

//==================抽奖活动====================
//国家库
type DataCountry struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Code                 *string  `protobuf:"bytes,2,opt,name=Code" json:"Code,omitempty" bson:"Code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DataCountry) Reset()         { *m = DataCountry{} }
func (m *DataCountry) String() string { return proto.CompactTextString(m) }
func (*DataCountry) ProtoMessage()    {}
func (*DataCountry) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{114}
}
func (m *DataCountry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataCountry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataCountry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataCountry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataCountry.Merge(m, src)
}
func (m *DataCountry) XXX_Size() int {
	return m.Size()
}
func (m *DataCountry) XXX_DiscardUnknown() {
	xxx_messageInfo_DataCountry.DiscardUnknown(m)
}

var xxx_messageInfo_DataCountry proto.InternalMessageInfo

func (m *DataCountry) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *DataCountry) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

//区域库
type DataArea struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Country              *string  `protobuf:"bytes,2,opt,name=Country" json:"Country,omitempty" bson:"Country,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DataArea) Reset()         { *m = DataArea{} }
func (m *DataArea) String() string { return proto.CompactTextString(m) }
func (*DataArea) ProtoMessage()    {}
func (*DataArea) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{115}
}
func (m *DataArea) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataArea) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataArea.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataArea) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataArea.Merge(m, src)
}
func (m *DataArea) XXX_Size() int {
	return m.Size()
}
func (m *DataArea) XXX_DiscardUnknown() {
	xxx_messageInfo_DataArea.DiscardUnknown(m)
}

var xxx_messageInfo_DataArea proto.InternalMessageInfo

func (m *DataArea) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *DataArea) GetCountry() string {
	if m != nil && m.Country != nil {
		return *m.Country
	}
	return ""
}

//省库
type DataRegion struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Code                 *string  `protobuf:"bytes,2,opt,name=Code" json:"Code,omitempty" bson:"Code,omitempty"`
	Country              *string  `protobuf:"bytes,3,opt,name=Country" json:"Country,omitempty" bson:"Country,omitempty"`
	Area                 *string  `protobuf:"bytes,4,opt,name=Area" json:"Area,omitempty" bson:"Area,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DataRegion) Reset()         { *m = DataRegion{} }
func (m *DataRegion) String() string { return proto.CompactTextString(m) }
func (*DataRegion) ProtoMessage()    {}
func (*DataRegion) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{116}
}
func (m *DataRegion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataRegion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataRegion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataRegion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataRegion.Merge(m, src)
}
func (m *DataRegion) XXX_Size() int {
	return m.Size()
}
func (m *DataRegion) XXX_DiscardUnknown() {
	xxx_messageInfo_DataRegion.DiscardUnknown(m)
}

var xxx_messageInfo_DataRegion proto.InternalMessageInfo

func (m *DataRegion) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *DataRegion) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

func (m *DataRegion) GetCountry() string {
	if m != nil && m.Country != nil {
		return *m.Country
	}
	return ""
}

func (m *DataRegion) GetArea() string {
	if m != nil && m.Area != nil {
		return *m.Area
	}
	return ""
}

//市库
type DataCity struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Code                 *string  `protobuf:"bytes,2,opt,name=Code" json:"Code,omitempty" bson:"Code,omitempty"`
	Country              *string  `protobuf:"bytes,3,opt,name=Country" json:"Country,omitempty" bson:"Country,omitempty"`
	Area                 *string  `protobuf:"bytes,4,opt,name=Area" json:"Area,omitempty" bson:"Area,omitempty"`
	Region               *string  `protobuf:"bytes,5,opt,name=Region" json:"Region,omitempty" bson:"Region,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DataCity) Reset()         { *m = DataCity{} }
func (m *DataCity) String() string { return proto.CompactTextString(m) }
func (*DataCity) ProtoMessage()    {}
func (*DataCity) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{117}
}
func (m *DataCity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataCity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataCity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataCity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataCity.Merge(m, src)
}
func (m *DataCity) XXX_Size() int {
	return m.Size()
}
func (m *DataCity) XXX_DiscardUnknown() {
	xxx_messageInfo_DataCity.DiscardUnknown(m)
}

var xxx_messageInfo_DataCity proto.InternalMessageInfo

func (m *DataCity) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *DataCity) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

func (m *DataCity) GetCountry() string {
	if m != nil && m.Country != nil {
		return *m.Country
	}
	return ""
}

func (m *DataCity) GetArea() string {
	if m != nil && m.Area != nil {
		return *m.Area
	}
	return ""
}

func (m *DataCity) GetRegion() string {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return ""
}

//访问社交动态的设备库
type ReadDynamicDevice struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Code                 *string  `protobuf:"bytes,2,opt,name=Code" json:"Code,omitempty" bson:"Code,omitempty"`
	LogId                *int64   `protobuf:"varint,3,opt,name=LogId" json:"LogId,omitempty" bson:"LogId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ReadDynamicDevice) Reset()         { *m = ReadDynamicDevice{} }
func (m *ReadDynamicDevice) String() string { return proto.CompactTextString(m) }
func (*ReadDynamicDevice) ProtoMessage()    {}
func (*ReadDynamicDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{118}
}
func (m *ReadDynamicDevice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadDynamicDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadDynamicDevice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadDynamicDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadDynamicDevice.Merge(m, src)
}
func (m *ReadDynamicDevice) XXX_Size() int {
	return m.Size()
}
func (m *ReadDynamicDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadDynamicDevice.DiscardUnknown(m)
}

var xxx_messageInfo_ReadDynamicDevice proto.InternalMessageInfo

func (m *ReadDynamicDevice) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *ReadDynamicDevice) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

func (m *ReadDynamicDevice) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

// 广告埋点数据.
type AdvLogReq struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	AdvId                *int64   `protobuf:"varint,2,opt,name=AdvId" json:"AdvId,omitempty" bson:"AdvId,omitempty"`
	PlayerId             *int64   `protobuf:"varint,3,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	OpType               *int32   `protobuf:"varint,4,opt,name=OpType" json:"OpType,omitempty" bson:"OpType,omitempty"`
	OpTime               *int64   `protobuf:"varint,5,opt,name=OpTime" json:"OpTime,omitempty" bson:"OpTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *AdvLogReq) Reset()         { *m = AdvLogReq{} }
func (m *AdvLogReq) String() string { return proto.CompactTextString(m) }
func (*AdvLogReq) ProtoMessage()    {}
func (*AdvLogReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{119}
}
func (m *AdvLogReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdvLogReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdvLogReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdvLogReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvLogReq.Merge(m, src)
}
func (m *AdvLogReq) XXX_Size() int {
	return m.Size()
}
func (m *AdvLogReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvLogReq.DiscardUnknown(m)
}

var xxx_messageInfo_AdvLogReq proto.InternalMessageInfo

func (m *AdvLogReq) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *AdvLogReq) GetAdvId() int64 {
	if m != nil && m.AdvId != nil {
		return *m.AdvId
	}
	return 0
}

func (m *AdvLogReq) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *AdvLogReq) GetOpType() int32 {
	if m != nil && m.OpType != nil {
		return *m.OpType
	}
	return 0
}

func (m *AdvLogReq) GetOpTime() int64 {
	if m != nil && m.OpTime != nil {
		return *m.OpTime
	}
	return 0
}

//快手广告设备Idfa库
type KsPosAdvIdfa struct {
	CodeMd5              *string  `protobuf:"bytes,1,opt,name=CodeMd5" json:"_id,omitempty" bson:"_id,omitempty"`
	CreateTime           *int64   `protobuf:"varint,2,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	AdvId                *int64   `protobuf:"varint,3,opt,name=AdvId" json:"AdvId,omitempty" bson:"AdvId,omitempty"`
	OsType               *int32   `protobuf:"varint,4,opt,name=OsType" json:"OsType,omitempty" bson:"OsType,omitempty"`
	Ip                   *string  `protobuf:"bytes,5,opt,name=Ip" json:"Ip,omitempty" bson:"Ip,omitempty"`
	ScenesId             *int32   `protobuf:"varint,6,opt,name=ScenesId" json:"ScenesId,omitempty" bson:"ScenesId,omitempty"`
	Callback             *string  `protobuf:"bytes,7,opt,name=Callback" json:"Callback,omitempty" bson:"Callback,omitempty"`
	IsActive             *bool    `protobuf:"varint,8,opt,name=IsActive" json:"IsActive,omitempty" bson:"IsActive,omitempty"`
	ActiveTime           *int64   `protobuf:"varint,9,opt,name=ActiveTime" json:"ActiveTime,omitempty" bson:"ActiveTime,omitempty"`
	IsRegister           *bool    `protobuf:"varint,10,opt,name=IsRegister" json:"IsRegister,omitempty" bson:"IsRegister,omitempty"`
	RegisterTime         *int64   `protobuf:"varint,11,opt,name=RegisterTime" json:"RegisterTime,omitempty" bson:"RegisterTime,omitempty"`
	Platform             *string  `protobuf:"bytes,12,opt,name=Platform" json:"Platform,omitempty" bson:"Platform,omitempty"`
	Code                 *string  `protobuf:"bytes,13,opt,name=Code" json:"Code,omitempty" bson:"Code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *KsPosAdvIdfa) Reset()         { *m = KsPosAdvIdfa{} }
func (m *KsPosAdvIdfa) String() string { return proto.CompactTextString(m) }
func (*KsPosAdvIdfa) ProtoMessage()    {}
func (*KsPosAdvIdfa) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{120}
}
func (m *KsPosAdvIdfa) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KsPosAdvIdfa) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KsPosAdvIdfa.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KsPosAdvIdfa) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KsPosAdvIdfa.Merge(m, src)
}
func (m *KsPosAdvIdfa) XXX_Size() int {
	return m.Size()
}
func (m *KsPosAdvIdfa) XXX_DiscardUnknown() {
	xxx_messageInfo_KsPosAdvIdfa.DiscardUnknown(m)
}

var xxx_messageInfo_KsPosAdvIdfa proto.InternalMessageInfo

func (m *KsPosAdvIdfa) GetCodeMd5() string {
	if m != nil && m.CodeMd5 != nil {
		return *m.CodeMd5
	}
	return ""
}

func (m *KsPosAdvIdfa) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *KsPosAdvIdfa) GetAdvId() int64 {
	if m != nil && m.AdvId != nil {
		return *m.AdvId
	}
	return 0
}

func (m *KsPosAdvIdfa) GetOsType() int32 {
	if m != nil && m.OsType != nil {
		return *m.OsType
	}
	return 0
}

func (m *KsPosAdvIdfa) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *KsPosAdvIdfa) GetScenesId() int32 {
	if m != nil && m.ScenesId != nil {
		return *m.ScenesId
	}
	return 0
}

func (m *KsPosAdvIdfa) GetCallback() string {
	if m != nil && m.Callback != nil {
		return *m.Callback
	}
	return ""
}

func (m *KsPosAdvIdfa) GetIsActive() bool {
	if m != nil && m.IsActive != nil {
		return *m.IsActive
	}
	return false
}

func (m *KsPosAdvIdfa) GetActiveTime() int64 {
	if m != nil && m.ActiveTime != nil {
		return *m.ActiveTime
	}
	return 0
}

func (m *KsPosAdvIdfa) GetIsRegister() bool {
	if m != nil && m.IsRegister != nil {
		return *m.IsRegister
	}
	return false
}

func (m *KsPosAdvIdfa) GetRegisterTime() int64 {
	if m != nil && m.RegisterTime != nil {
		return *m.RegisterTime
	}
	return 0
}

func (m *KsPosAdvIdfa) GetPlatform() string {
	if m != nil && m.Platform != nil {
		return *m.Platform
	}
	return ""
}

func (m *KsPosAdvIdfa) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

//视频语音时长日志 log_vv_duration
type VideoVoiceDurationLog struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Types                *int32   `protobuf:"varint,2,opt,name=Types" json:"Types,omitempty" bson:"Types,omitempty"`
	Duration             *int64   `protobuf:"varint,3,opt,name=Duration" json:"Duration,omitempty" bson:"Duration,omitempty"`
	CreateTime           *int64   `protobuf:"varint,4,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	SendId               *int64   `protobuf:"varint,5,opt,name=SendId" json:"SendId,omitempty" bson:"SendId,omitempty"`
	TargetId             *int64   `protobuf:"varint,6,opt,name=TargetId" json:"TargetId,omitempty" bson:"TargetId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *VideoVoiceDurationLog) Reset()         { *m = VideoVoiceDurationLog{} }
func (m *VideoVoiceDurationLog) String() string { return proto.CompactTextString(m) }
func (*VideoVoiceDurationLog) ProtoMessage()    {}
func (*VideoVoiceDurationLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{121}
}
func (m *VideoVoiceDurationLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoVoiceDurationLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoVoiceDurationLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoVoiceDurationLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoVoiceDurationLog.Merge(m, src)
}
func (m *VideoVoiceDurationLog) XXX_Size() int {
	return m.Size()
}
func (m *VideoVoiceDurationLog) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoVoiceDurationLog.DiscardUnknown(m)
}

var xxx_messageInfo_VideoVoiceDurationLog proto.InternalMessageInfo

func (m *VideoVoiceDurationLog) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *VideoVoiceDurationLog) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *VideoVoiceDurationLog) GetDuration() int64 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

func (m *VideoVoiceDurationLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *VideoVoiceDurationLog) GetSendId() int64 {
	if m != nil && m.SendId != nil {
		return *m.SendId
	}
	return 0
}

func (m *VideoVoiceDurationLog) GetTargetId() int64 {
	if m != nil && m.TargetId != nil {
		return *m.TargetId
	}
	return 0
}

//老用户回归日志
type RecallPlayerLog struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,req,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	NickName             *string  `protobuf:"bytes,3,opt,name=NickName" json:"-" bson:"-"`
	Account              *string  `protobuf:"bytes,4,opt,name=Account" json:"-" bson:"-"`
	RecallTime           *int64   `protobuf:"varint,5,opt,name=RecallTime" json:"RecallTime,omitempty" bson:"RecallTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RecallPlayerLog) Reset()         { *m = RecallPlayerLog{} }
func (m *RecallPlayerLog) String() string { return proto.CompactTextString(m) }
func (*RecallPlayerLog) ProtoMessage()    {}
func (*RecallPlayerLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{122}
}
func (m *RecallPlayerLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecallPlayerLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecallPlayerLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecallPlayerLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecallPlayerLog.Merge(m, src)
}
func (m *RecallPlayerLog) XXX_Size() int {
	return m.Size()
}
func (m *RecallPlayerLog) XXX_DiscardUnknown() {
	xxx_messageInfo_RecallPlayerLog.DiscardUnknown(m)
}

var xxx_messageInfo_RecallPlayerLog proto.InternalMessageInfo

func (m *RecallPlayerLog) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *RecallPlayerLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *RecallPlayerLog) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *RecallPlayerLog) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *RecallPlayerLog) GetRecallTime() int64 {
	if m != nil && m.RecallTime != nil {
		return *m.RecallTime
	}
	return 0
}

//附近的人 引导项/快捷打招呼 near_lead/near_fast_term
type NearSet struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Icon                 *string  `protobuf:"bytes,3,opt,name=Icon" json:"Icon,omitempty" bson:"Icon,omitempty"`
	JumpType             *int32   `protobuf:"varint,4,opt,name=JumpType" json:"JumpType,omitempty" bson:"JumpType,omitempty"`
	JumpObjId            *int64   `protobuf:"varint,5,opt,name=JumpObjId" json:"JumpObjId,omitempty" bson:"JumpObjId,omitempty"`
	JumpObject           *int32   `protobuf:"varint,6,opt,name=JumpObject" json:"JumpObject,omitempty" bson:"JumpObject,omitempty"`
	JumpUrl              *string  `protobuf:"bytes,7,opt,name=JumpUrl" json:"JumpUrl,omitempty" bson:"JumpUrl,omitempty"`
	Weights              *int32   `protobuf:"varint,8,opt,name=Weights" json:"Weights,omitempty" bson:"Weights,omitempty"`
	Status               *int32   `protobuf:"varint,9,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	JumpStyle            *int32   `protobuf:"varint,10,opt,name=JumpStyle" json:"JumpStyle,omitempty" bson:"JumpStyle,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *NearSet) Reset()         { *m = NearSet{} }
func (m *NearSet) String() string { return proto.CompactTextString(m) }
func (*NearSet) ProtoMessage()    {}
func (*NearSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{123}
}
func (m *NearSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NearSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NearSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NearSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NearSet.Merge(m, src)
}
func (m *NearSet) XXX_Size() int {
	return m.Size()
}
func (m *NearSet) XXX_DiscardUnknown() {
	xxx_messageInfo_NearSet.DiscardUnknown(m)
}

var xxx_messageInfo_NearSet proto.InternalMessageInfo

func (m *NearSet) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *NearSet) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *NearSet) GetIcon() string {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return ""
}

func (m *NearSet) GetJumpType() int32 {
	if m != nil && m.JumpType != nil {
		return *m.JumpType
	}
	return 0
}

func (m *NearSet) GetJumpObjId() int64 {
	if m != nil && m.JumpObjId != nil {
		return *m.JumpObjId
	}
	return 0
}

func (m *NearSet) GetJumpObject() int32 {
	if m != nil && m.JumpObject != nil {
		return *m.JumpObject
	}
	return 0
}

func (m *NearSet) GetJumpUrl() string {
	if m != nil && m.JumpUrl != nil {
		return *m.JumpUrl
	}
	return ""
}

func (m *NearSet) GetWeights() int32 {
	if m != nil && m.Weights != nil {
		return *m.Weights
	}
	return 0
}

func (m *NearSet) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *NearSet) GetJumpStyle() int32 {
	if m != nil && m.JumpStyle != nil {
		return *m.JumpStyle
	}
	return 0
}

// 附近的人打招呼会话列表
type NearSessionList struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	SendPlayerId         *int64   `protobuf:"varint,2,opt,name=SendPlayerId" json:"SendPlayerId,omitempty" bson:"SendPlayerId,omitempty"`
	ReceivePlayerId      *int64   `protobuf:"varint,3,opt,name=ReceivePlayerId" json:"ReceivePlayerId,omitempty" bson:"ReceivePlayerId,omitempty"`
	Status               *int32   `protobuf:"varint,4,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	IsRead               *bool    `protobuf:"varint,5,opt,name=IsRead" json:"IsRead,omitempty" bson:"IsRead,omitempty"`
	CreateTime           *int64   `protobuf:"varint,6,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	Content              *string  `protobuf:"bytes,7,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	ContentType          *int32   `protobuf:"varint,8,opt,name=ContentType" json:"ContentType,omitempty" bson:"ContentType,omitempty"`
	ClientUnique         *string  `protobuf:"bytes,10,opt,name=ClientUnique" json:"-" bson:"-"`
	PropsId              *int64   `protobuf:"varint,11,opt,name=PropsId" json:"-" bson:"-"`
	UpdateTime           *int64   `protobuf:"varint,12,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *NearSessionList) Reset()         { *m = NearSessionList{} }
func (m *NearSessionList) String() string { return proto.CompactTextString(m) }
func (*NearSessionList) ProtoMessage()    {}
func (*NearSessionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{124}
}
func (m *NearSessionList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NearSessionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NearSessionList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NearSessionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NearSessionList.Merge(m, src)
}
func (m *NearSessionList) XXX_Size() int {
	return m.Size()
}
func (m *NearSessionList) XXX_DiscardUnknown() {
	xxx_messageInfo_NearSessionList.DiscardUnknown(m)
}

var xxx_messageInfo_NearSessionList proto.InternalMessageInfo

func (m *NearSessionList) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *NearSessionList) GetSendPlayerId() int64 {
	if m != nil && m.SendPlayerId != nil {
		return *m.SendPlayerId
	}
	return 0
}

func (m *NearSessionList) GetReceivePlayerId() int64 {
	if m != nil && m.ReceivePlayerId != nil {
		return *m.ReceivePlayerId
	}
	return 0
}

func (m *NearSessionList) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *NearSessionList) GetIsRead() bool {
	if m != nil && m.IsRead != nil {
		return *m.IsRead
	}
	return false
}

func (m *NearSessionList) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *NearSessionList) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *NearSessionList) GetContentType() int32 {
	if m != nil && m.ContentType != nil {
		return *m.ContentType
	}
	return 0
}

func (m *NearSessionList) GetClientUnique() string {
	if m != nil && m.ClientUnique != nil {
		return *m.ClientUnique
	}
	return ""
}

func (m *NearSessionList) GetPropsId() int64 {
	if m != nil && m.PropsId != nil {
		return *m.PropsId
	}
	return 0
}

func (m *NearSessionList) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

// 说话的消息
type NearMessageNewLog struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	SendPlayerId         *int64   `protobuf:"varint,2,opt,name=SendPlayerId" json:"SendPlayerId,omitempty" bson:"SendPlayerId,omitempty"`
	ReceivePlayerId      *int64   `protobuf:"varint,3,opt,name=ReceivePlayerId" json:"ReceivePlayerId,omitempty" bson:"ReceivePlayerId,omitempty"`
	Content              *string  `protobuf:"bytes,4,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	ContentType          *int32   `protobuf:"varint,5,opt,name=ContentType" json:"ContentType,omitempty" bson:"ContentType,omitempty"`
	Status               *int32   `protobuf:"varint,6,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	IsRead               *bool    `protobuf:"varint,7,opt,name=IsRead" json:"IsRead,omitempty" bson:"IsRead,omitempty"`
	CreateTime           *int64   `protobuf:"varint,8,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,9,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	IsFirst              *bool    `protobuf:"varint,10,opt,name=IsFirst" json:"IsFirst,omitempty" bson:"IsFirst,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *NearMessageNewLog) Reset()         { *m = NearMessageNewLog{} }
func (m *NearMessageNewLog) String() string { return proto.CompactTextString(m) }
func (*NearMessageNewLog) ProtoMessage()    {}
func (*NearMessageNewLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{125}
}
func (m *NearMessageNewLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NearMessageNewLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NearMessageNewLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NearMessageNewLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NearMessageNewLog.Merge(m, src)
}
func (m *NearMessageNewLog) XXX_Size() int {
	return m.Size()
}
func (m *NearMessageNewLog) XXX_DiscardUnknown() {
	xxx_messageInfo_NearMessageNewLog.DiscardUnknown(m)
}

var xxx_messageInfo_NearMessageNewLog proto.InternalMessageInfo

func (m *NearMessageNewLog) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *NearMessageNewLog) GetSendPlayerId() int64 {
	if m != nil && m.SendPlayerId != nil {
		return *m.SendPlayerId
	}
	return 0
}

func (m *NearMessageNewLog) GetReceivePlayerId() int64 {
	if m != nil && m.ReceivePlayerId != nil {
		return *m.ReceivePlayerId
	}
	return 0
}

func (m *NearMessageNewLog) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *NearMessageNewLog) GetContentType() int32 {
	if m != nil && m.ContentType != nil {
		return *m.ContentType
	}
	return 0
}

func (m *NearMessageNewLog) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *NearMessageNewLog) GetIsRead() bool {
	if m != nil && m.IsRead != nil {
		return *m.IsRead
	}
	return false
}

func (m *NearMessageNewLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *NearMessageNewLog) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *NearMessageNewLog) GetIsFirst() bool {
	if m != nil && m.IsFirst != nil {
		return *m.IsFirst
	}
	return false
}

//聊天会话:chat_session todo 注释的是给前端的时候返回使用,到时候重新定义新的proto
type ChatSession struct {
	Id                   *string        `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Type                 *int32         `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	PlayerIds            []int64        `protobuf:"varint,3,rep,name=PlayerIds" json:"PlayerIds,omitempty" bson:"PlayerIds,omitempty"`
	SessionName          *string        `protobuf:"bytes,4,opt,name=SessionName" json:"SessionName,omitempty" bson:"SessionName,omitempty"`
	SessionHeadUrl       *string        `protobuf:"bytes,5,opt,name=SessionHeadUrl" json:"SessionHeadUrl,omitempty" bson:"SessionHeadUrl,omitempty"`
	MaxLogId             *int64         `protobuf:"varint,6,opt,name=MaxLogId" json:"MaxLogId,omitempty" bson:"MaxLogId,omitempty"`
	ReadInfo             []*ReadLogInfo `protobuf:"bytes,7,rep,name=ReadInfo" json:"ReadInfo,omitempty" bson:"ReadInfo,omitempty"`
	TeamName             *string        `protobuf:"bytes,8,opt,name=TeamName" json:"TeamName,omitempty" bson:"TeamName,omitempty"`
	Topic                *string        `protobuf:"bytes,9,opt,name=Topic" json:"Topic,omitempty" bson:"Topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-" bson:"-"`
	XXX_unrecognized     []byte         `json:"-" bson:"-"`
	XXX_sizecache        int32          `json:"-" bson:"-"`
}

func (m *ChatSession) Reset()         { *m = ChatSession{} }
func (m *ChatSession) String() string { return proto.CompactTextString(m) }
func (*ChatSession) ProtoMessage()    {}
func (*ChatSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{126}
}
func (m *ChatSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatSession.Merge(m, src)
}
func (m *ChatSession) XXX_Size() int {
	return m.Size()
}
func (m *ChatSession) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatSession.DiscardUnknown(m)
}

var xxx_messageInfo_ChatSession proto.InternalMessageInfo

func (m *ChatSession) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *ChatSession) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *ChatSession) GetPlayerIds() []int64 {
	if m != nil {
		return m.PlayerIds
	}
	return nil
}

func (m *ChatSession) GetSessionName() string {
	if m != nil && m.SessionName != nil {
		return *m.SessionName
	}
	return ""
}

func (m *ChatSession) GetSessionHeadUrl() string {
	if m != nil && m.SessionHeadUrl != nil {
		return *m.SessionHeadUrl
	}
	return ""
}

func (m *ChatSession) GetMaxLogId() int64 {
	if m != nil && m.MaxLogId != nil {
		return *m.MaxLogId
	}
	return 0
}

func (m *ChatSession) GetReadInfo() []*ReadLogInfo {
	if m != nil {
		return m.ReadInfo
	}
	return nil
}

func (m *ChatSession) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *ChatSession) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

type ReadLogInfo struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	ReadId               *int64   `protobuf:"varint,2,opt,name=ReadId" json:"ReadId,omitempty" bson:"ReadId,omitempty"`
	LogId                *int64   `protobuf:"varint,3,opt,name=LogId" json:"LogId,omitempty" bson:"LogId,omitempty"`
	TalkNum              *int32   `protobuf:"varint,4,opt,name=TalkNum" json:"TalkNum,omitempty" bson:"TalkNum,omitempty"`
	LastTalkTime         *int64   `protobuf:"varint,5,opt,name=LastTalkTime" json:"LastTalkTime,omitempty" bson:"LastTalkTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ReadLogInfo) Reset()         { *m = ReadLogInfo{} }
func (m *ReadLogInfo) String() string { return proto.CompactTextString(m) }
func (*ReadLogInfo) ProtoMessage()    {}
func (*ReadLogInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{127}
}
func (m *ReadLogInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadLogInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadLogInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadLogInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadLogInfo.Merge(m, src)
}
func (m *ReadLogInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReadLogInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadLogInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReadLogInfo proto.InternalMessageInfo

func (m *ReadLogInfo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *ReadLogInfo) GetReadId() int64 {
	if m != nil && m.ReadId != nil {
		return *m.ReadId
	}
	return 0
}

func (m *ReadLogInfo) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *ReadLogInfo) GetTalkNum() int32 {
	if m != nil && m.TalkNum != nil {
		return *m.TalkNum
	}
	return 0
}

func (m *ReadLogInfo) GetLastTalkTime() int64 {
	if m != nil && m.LastTalkTime != nil {
		return *m.LastTalkTime
	}
	return 0
}

//附近的人报表
type NearReport struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	CreateTime           *int64   `protobuf:"varint,2,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	AdvId                *int64   `protobuf:"varint,3,opt,name=AdvId" json:"AdvId,omitempty" bson:"AdvId,omitempty"`
	PvCount              *int64   `protobuf:"varint,4,opt,name=PvCount" json:"PvCount,omitempty" bson:"PvCount,omitempty"`
	UvCount              *int64   `protobuf:"varint,5,opt,name=UvCount" json:"UvCount,omitempty" bson:"UvCount,omitempty"`
	Clicks               *int64   `protobuf:"varint,6,opt,name=Clicks" json:"Clicks,omitempty" bson:"Clicks,omitempty"`
	ClickPlayers         *int64   `protobuf:"varint,7,opt,name=ClickPlayers" json:"ClickPlayers,omitempty" bson:"ClickPlayers,omitempty"`
	Near                 *NearSet `protobuf:"bytes,8,opt,name=Near" json:"Near,omitempty" bson:"Near,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *NearReport) Reset()         { *m = NearReport{} }
func (m *NearReport) String() string { return proto.CompactTextString(m) }
func (*NearReport) ProtoMessage()    {}
func (*NearReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{128}
}
func (m *NearReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NearReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NearReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NearReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NearReport.Merge(m, src)
}
func (m *NearReport) XXX_Size() int {
	return m.Size()
}
func (m *NearReport) XXX_DiscardUnknown() {
	xxx_messageInfo_NearReport.DiscardUnknown(m)
}

var xxx_messageInfo_NearReport proto.InternalMessageInfo

func (m *NearReport) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *NearReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *NearReport) GetAdvId() int64 {
	if m != nil && m.AdvId != nil {
		return *m.AdvId
	}
	return 0
}

func (m *NearReport) GetPvCount() int64 {
	if m != nil && m.PvCount != nil {
		return *m.PvCount
	}
	return 0
}

func (m *NearReport) GetUvCount() int64 {
	if m != nil && m.UvCount != nil {
		return *m.UvCount
	}
	return 0
}

func (m *NearReport) GetClicks() int64 {
	if m != nil && m.Clicks != nil {
		return *m.Clicks
	}
	return 0
}

func (m *NearReport) GetClickPlayers() int64 {
	if m != nil && m.ClickPlayers != nil {
		return *m.ClickPlayers
	}
	return 0
}

func (m *NearReport) GetNear() *NearSet {
	if m != nil {
		return m.Near
	}
	return nil
}

//通用主键字符串表
type CommStrId struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *CommStrId) Reset()         { *m = CommStrId{} }
func (m *CommStrId) String() string { return proto.CompactTextString(m) }
func (*CommStrId) ProtoMessage()    {}
func (*CommStrId) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{129}
}
func (m *CommStrId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommStrId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommStrId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommStrId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommStrId.Merge(m, src)
}
func (m *CommStrId) XXX_Size() int {
	return m.Size()
}
func (m *CommStrId) XXX_DiscardUnknown() {
	xxx_messageInfo_CommStrId.DiscardUnknown(m)
}

var xxx_messageInfo_CommStrId proto.InternalMessageInfo

func (m *CommStrId) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

//电竞硬币、电竞币中间结构体
type ESportCoinRecharge struct {
	PlayerId             *int64         `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	RechargeCoin         *int64         `protobuf:"varint,2,opt,name=RechargeCoin" json:"RechargeCoin,omitempty" bson:"RechargeCoin,omitempty"`
	OrderId              *string        `protobuf:"bytes,3,opt,name=OrderId" json:"OrderId,omitempty" bson:"OrderId,omitempty"`
	SourceType           *int32         `protobuf:"varint,4,opt,name=SourceType" json:"SourceType,omitempty" bson:"SourceType,omitempty"`
	Note                 *string        `protobuf:"bytes,5,opt,name=Note" json:"Note,omitempty" bson:"Note,omitempty"`
	ExtendLog            *GoldExtendLog `protobuf:"bytes,6,opt,name=extendLog" json:"extendLog,omitempty" bson:"extendLog,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-" bson:"-"`
	XXX_unrecognized     []byte         `json:"-" bson:"-"`
	XXX_sizecache        int32          `json:"-" bson:"-"`
}

func (m *ESportCoinRecharge) Reset()         { *m = ESportCoinRecharge{} }
func (m *ESportCoinRecharge) String() string { return proto.CompactTextString(m) }
func (*ESportCoinRecharge) ProtoMessage()    {}
func (*ESportCoinRecharge) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{130}
}
func (m *ESportCoinRecharge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportCoinRecharge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportCoinRecharge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportCoinRecharge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportCoinRecharge.Merge(m, src)
}
func (m *ESportCoinRecharge) XXX_Size() int {
	return m.Size()
}
func (m *ESportCoinRecharge) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportCoinRecharge.DiscardUnknown(m)
}

var xxx_messageInfo_ESportCoinRecharge proto.InternalMessageInfo

func (m *ESportCoinRecharge) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *ESportCoinRecharge) GetRechargeCoin() int64 {
	if m != nil && m.RechargeCoin != nil {
		return *m.RechargeCoin
	}
	return 0
}

func (m *ESportCoinRecharge) GetOrderId() string {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return ""
}

func (m *ESportCoinRecharge) GetSourceType() int32 {
	if m != nil && m.SourceType != nil {
		return *m.SourceType
	}
	return 0
}

func (m *ESportCoinRecharge) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

func (m *ESportCoinRecharge) GetExtendLog() *GoldExtendLog {
	if m != nil {
		return m.ExtendLog
	}
	return nil
}

//按钮点击行为报表
type ButtonClickReport struct {
	CreateTime           *int64   `protobuf:"varint,1,opt,name=CreateTime" json:"_id,omitempty" bson:"_id,omitempty"`
	AgreementYes         *int64   `protobuf:"varint,3,opt,name=AgreementYes" json:"AgreementYes,omitempty" bson:"AgreementYes,omitempty"`
	AgreementNo          *int64   `protobuf:"varint,4,opt,name=AgreementNo" json:"AgreementNo,omitempty" bson:"AgreementNo,omitempty"`
	Phone                *int64   `protobuf:"varint,5,opt,name=Phone" json:"Phone,omitempty" bson:"Phone,omitempty"`
	WeChat               *int64   `protobuf:"varint,6,opt,name=WeChat" json:"WeChat,omitempty" bson:"WeChat,omitempty"`
	OneClick             *int64   `protobuf:"varint,7,opt,name=OneClick" json:"OneClick,omitempty" bson:"OneClick,omitempty"`
	OneClickCount        *int64   `protobuf:"varint,8,opt,name=OneClickCount" json:"OneClickCount,omitempty" bson:"OneClickCount,omitempty"`
	OtherClick           *int64   `protobuf:"varint,9,opt,name=OtherClick" json:"OtherClick,omitempty" bson:"OtherClick,omitempty"`
	LoginBack            *int64   `protobuf:"varint,10,opt,name=LoginBack" json:"LoginBack,omitempty" bson:"LoginBack,omitempty"`
	SendCode             *int64   `protobuf:"varint,11,opt,name=SendCode" json:"SendCode,omitempty" bson:"SendCode,omitempty"`
	ReSendCode           *int64   `protobuf:"varint,12,opt,name=ReSendCode" json:"ReSendCode,omitempty" bson:"ReSendCode,omitempty"`
	InPhoneBack          *int64   `protobuf:"varint,13,opt,name=InPhoneBack" json:"InPhoneBack,omitempty" bson:"InPhoneBack,omitempty"`
	InCodeBack           *int64   `protobuf:"varint,14,opt,name=InCodeBack" json:"InCodeBack,omitempty" bson:"InCodeBack,omitempty"`
	InfoBack             *int64   `protobuf:"varint,15,opt,name=InfoBack" json:"InfoBack,omitempty" bson:"InfoBack,omitempty"`
	InNmBtnCLick         *int64   `protobuf:"varint,21,opt,name=InNmBtnCLick" json:"InNmBtnCLick,omitempty" bson:"InNmBtnCLick,omitempty"`
	InNmBtnCount         *int64   `protobuf:"varint,22,opt,name=InNmBtnCount" json:"InNmBtnCount,omitempty" bson:"InNmBtnCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ButtonClickReport) Reset()         { *m = ButtonClickReport{} }
func (m *ButtonClickReport) String() string { return proto.CompactTextString(m) }
func (*ButtonClickReport) ProtoMessage()    {}
func (*ButtonClickReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{131}
}
func (m *ButtonClickReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ButtonClickReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ButtonClickReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ButtonClickReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ButtonClickReport.Merge(m, src)
}
func (m *ButtonClickReport) XXX_Size() int {
	return m.Size()
}
func (m *ButtonClickReport) XXX_DiscardUnknown() {
	xxx_messageInfo_ButtonClickReport.DiscardUnknown(m)
}

var xxx_messageInfo_ButtonClickReport proto.InternalMessageInfo

func (m *ButtonClickReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ButtonClickReport) GetAgreementYes() int64 {
	if m != nil && m.AgreementYes != nil {
		return *m.AgreementYes
	}
	return 0
}

func (m *ButtonClickReport) GetAgreementNo() int64 {
	if m != nil && m.AgreementNo != nil {
		return *m.AgreementNo
	}
	return 0
}

func (m *ButtonClickReport) GetPhone() int64 {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return 0
}

func (m *ButtonClickReport) GetWeChat() int64 {
	if m != nil && m.WeChat != nil {
		return *m.WeChat
	}
	return 0
}

func (m *ButtonClickReport) GetOneClick() int64 {
	if m != nil && m.OneClick != nil {
		return *m.OneClick
	}
	return 0
}

func (m *ButtonClickReport) GetOneClickCount() int64 {
	if m != nil && m.OneClickCount != nil {
		return *m.OneClickCount
	}
	return 0
}

func (m *ButtonClickReport) GetOtherClick() int64 {
	if m != nil && m.OtherClick != nil {
		return *m.OtherClick
	}
	return 0
}

func (m *ButtonClickReport) GetLoginBack() int64 {
	if m != nil && m.LoginBack != nil {
		return *m.LoginBack
	}
	return 0
}

func (m *ButtonClickReport) GetSendCode() int64 {
	if m != nil && m.SendCode != nil {
		return *m.SendCode
	}
	return 0
}

func (m *ButtonClickReport) GetReSendCode() int64 {
	if m != nil && m.ReSendCode != nil {
		return *m.ReSendCode
	}
	return 0
}

func (m *ButtonClickReport) GetInPhoneBack() int64 {
	if m != nil && m.InPhoneBack != nil {
		return *m.InPhoneBack
	}
	return 0
}

func (m *ButtonClickReport) GetInCodeBack() int64 {
	if m != nil && m.InCodeBack != nil {
		return *m.InCodeBack
	}
	return 0
}

func (m *ButtonClickReport) GetInfoBack() int64 {
	if m != nil && m.InfoBack != nil {
		return *m.InfoBack
	}
	return 0
}

func (m *ButtonClickReport) GetInNmBtnCLick() int64 {
	if m != nil && m.InNmBtnCLick != nil {
		return *m.InNmBtnCLick
	}
	return 0
}

func (m *ButtonClickReport) GetInNmBtnCount() int64 {
	if m != nil && m.InNmBtnCount != nil {
		return *m.InNmBtnCount
	}
	return 0
}

//按钮点击行为日志
type ButtonClickLog struct {
	//Type类型按钮值
	//1-协议页面同意按钮点击
	//2-协议页面不同意按钮点击
	//3-手机登录注册按钮点击次数
	//4-微信登录注册点击次数
	//5-本机号码一键登录次数 s
	//6-其他号码登录点击次数
	//7-一键登录页返回键次数 注册登录页2返回键次数
	//8-获取验证码次数
	//9-重新获取验证码按钮点击次数
	//10-兴趣墙确定按钮点击次数 s
	//11-兴趣墙返回键点击次数 s
	//12-推荐页面跳过按钮点击次数 s
	//13-推荐页面下一步按钮点击次数 s
	//14-进入柠檬畅聊按钮 s
	//15-输入手机号页返回次数
	//16-输入验证码页返回次数
	//17-信息页返回次数
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	CreateTime           *int64   `protobuf:"varint,2,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	PlayerId             *int64   `protobuf:"varint,3,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Type                 *int32   `protobuf:"varint,4,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ButtonClickLog) Reset()         { *m = ButtonClickLog{} }
func (m *ButtonClickLog) String() string { return proto.CompactTextString(m) }
func (*ButtonClickLog) ProtoMessage()    {}
func (*ButtonClickLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{132}
}
func (m *ButtonClickLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ButtonClickLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ButtonClickLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ButtonClickLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ButtonClickLog.Merge(m, src)
}
func (m *ButtonClickLog) XXX_Size() int {
	return m.Size()
}
func (m *ButtonClickLog) XXX_DiscardUnknown() {
	xxx_messageInfo_ButtonClickLog.DiscardUnknown(m)
}

var xxx_messageInfo_ButtonClickLog proto.InternalMessageInfo

func (m *ButtonClickLog) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *ButtonClickLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ButtonClickLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *ButtonClickLog) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

//注册登录页面埋点报表
type PageRegLogReport struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	CreateTime           *int64   `protobuf:"varint,2,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	Channel              *string  `protobuf:"bytes,3,opt,name=Channel" json:"Channel,omitempty" bson:"Channel,omitempty"`
	DicType              *int32   `protobuf:"varint,4,opt,name=DicType" json:"DicType,omitempty" bson:"DicType,omitempty"`
	LoginTimes           *int64   `protobuf:"varint,5,opt,name=LoginTimes" json:"LoginTimes,omitempty" bson:"LoginTimes,omitempty"`
	LoginCount           *int64   `protobuf:"varint,6,opt,name=LoginCount" json:"LoginCount,omitempty" bson:"LoginCount,omitempty"`
	OneLoginTimes        *int64   `protobuf:"varint,7,opt,name=OneLoginTimes" json:"OneLoginTimes,omitempty" bson:"OneLoginTimes,omitempty"`
	OneLoginCount        *int64   `protobuf:"varint,8,opt,name=OneLoginCount" json:"OneLoginCount,omitempty" bson:"OneLoginCount,omitempty"`
	WxLoginTimes         *int64   `protobuf:"varint,9,opt,name=WxLoginTimes" json:"WxLoginTimes,omitempty" bson:"WxLoginTimes,omitempty"`
	WxLoginCount         *int64   `protobuf:"varint,10,opt,name=WxLoginCount" json:"WxLoginCount,omitempty" bson:"WxLoginCount,omitempty"`
	PhoneRegTimes        *int64   `protobuf:"varint,11,opt,name=PhoneRegTimes" json:"PhoneRegTimes,omitempty" bson:"PhoneRegTimes,omitempty"`
	PhoneRegCount        *int64   `protobuf:"varint,12,opt,name=PhoneRegCount" json:"PhoneRegCount,omitempty" bson:"PhoneRegCount,omitempty"`
	RegCodeTimes         *int64   `protobuf:"varint,13,opt,name=RegCodeTimes" json:"RegCodeTimes,omitempty" bson:"RegCodeTimes,omitempty"`
	RegCodeCount         *int64   `protobuf:"varint,14,opt,name=RegCodeCount" json:"RegCodeCount,omitempty" bson:"RegCodeCount,omitempty"`
	UseInfoTimes         *int64   `protobuf:"varint,15,opt,name=UseInfoTimes" json:"UseInfoTimes,omitempty" bson:"UseInfoTimes,omitempty"`
	UseInfoCount         *int64   `protobuf:"varint,16,opt,name=UseInfoCount" json:"UseInfoCount,omitempty" bson:"UseInfoCount,omitempty"`
	IntWallTimes         *int64   `protobuf:"varint,17,opt,name=IntWallTimes" json:"IntWallTimes,omitempty" bson:"IntWallTimes,omitempty"`
	IntWallCount         *int64   `protobuf:"varint,18,opt,name=IntWallCount" json:"IntWallCount,omitempty" bson:"IntWallCount,omitempty"`
	RecPageTimes         *int64   `protobuf:"varint,19,opt,name=RecPageTimes" json:"RecPageTimes,omitempty" bson:"RecPageTimes,omitempty"`
	RecPageCount         *int64   `protobuf:"varint,20,opt,name=RecPageCount" json:"RecPageCount,omitempty" bson:"RecPageCount,omitempty"`
	ActDevCount          *int64   `protobuf:"varint,21,opt,name=ActDevCount" json:"ActDevCount,omitempty" bson:"ActDevCount,omitempty"`
	ValidActDevCount     *int64   `protobuf:"varint,22,opt,name=ValidActDevCount" json:"ValidActDevCount,omitempty" bson:"ValidActDevCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PageRegLogReport) Reset()         { *m = PageRegLogReport{} }
func (m *PageRegLogReport) String() string { return proto.CompactTextString(m) }
func (*PageRegLogReport) ProtoMessage()    {}
func (*PageRegLogReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{133}
}
func (m *PageRegLogReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageRegLogReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageRegLogReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageRegLogReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageRegLogReport.Merge(m, src)
}
func (m *PageRegLogReport) XXX_Size() int {
	return m.Size()
}
func (m *PageRegLogReport) XXX_DiscardUnknown() {
	xxx_messageInfo_PageRegLogReport.DiscardUnknown(m)
}

var xxx_messageInfo_PageRegLogReport proto.InternalMessageInfo

func (m *PageRegLogReport) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *PageRegLogReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PageRegLogReport) GetChannel() string {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return ""
}

func (m *PageRegLogReport) GetDicType() int32 {
	if m != nil && m.DicType != nil {
		return *m.DicType
	}
	return 0
}

func (m *PageRegLogReport) GetLoginTimes() int64 {
	if m != nil && m.LoginTimes != nil {
		return *m.LoginTimes
	}
	return 0
}

func (m *PageRegLogReport) GetLoginCount() int64 {
	if m != nil && m.LoginCount != nil {
		return *m.LoginCount
	}
	return 0
}

func (m *PageRegLogReport) GetOneLoginTimes() int64 {
	if m != nil && m.OneLoginTimes != nil {
		return *m.OneLoginTimes
	}
	return 0
}

func (m *PageRegLogReport) GetOneLoginCount() int64 {
	if m != nil && m.OneLoginCount != nil {
		return *m.OneLoginCount
	}
	return 0
}

func (m *PageRegLogReport) GetWxLoginTimes() int64 {
	if m != nil && m.WxLoginTimes != nil {
		return *m.WxLoginTimes
	}
	return 0
}

func (m *PageRegLogReport) GetWxLoginCount() int64 {
	if m != nil && m.WxLoginCount != nil {
		return *m.WxLoginCount
	}
	return 0
}

func (m *PageRegLogReport) GetPhoneRegTimes() int64 {
	if m != nil && m.PhoneRegTimes != nil {
		return *m.PhoneRegTimes
	}
	return 0
}

func (m *PageRegLogReport) GetPhoneRegCount() int64 {
	if m != nil && m.PhoneRegCount != nil {
		return *m.PhoneRegCount
	}
	return 0
}

func (m *PageRegLogReport) GetRegCodeTimes() int64 {
	if m != nil && m.RegCodeTimes != nil {
		return *m.RegCodeTimes
	}
	return 0
}

func (m *PageRegLogReport) GetRegCodeCount() int64 {
	if m != nil && m.RegCodeCount != nil {
		return *m.RegCodeCount
	}
	return 0
}

func (m *PageRegLogReport) GetUseInfoTimes() int64 {
	if m != nil && m.UseInfoTimes != nil {
		return *m.UseInfoTimes
	}
	return 0
}

func (m *PageRegLogReport) GetUseInfoCount() int64 {
	if m != nil && m.UseInfoCount != nil {
		return *m.UseInfoCount
	}
	return 0
}

func (m *PageRegLogReport) GetIntWallTimes() int64 {
	if m != nil && m.IntWallTimes != nil {
		return *m.IntWallTimes
	}
	return 0
}

func (m *PageRegLogReport) GetIntWallCount() int64 {
	if m != nil && m.IntWallCount != nil {
		return *m.IntWallCount
	}
	return 0
}

func (m *PageRegLogReport) GetRecPageTimes() int64 {
	if m != nil && m.RecPageTimes != nil {
		return *m.RecPageTimes
	}
	return 0
}

func (m *PageRegLogReport) GetRecPageCount() int64 {
	if m != nil && m.RecPageCount != nil {
		return *m.RecPageCount
	}
	return 0
}

func (m *PageRegLogReport) GetActDevCount() int64 {
	if m != nil && m.ActDevCount != nil {
		return *m.ActDevCount
	}
	return 0
}

func (m *PageRegLogReport) GetValidActDevCount() int64 {
	if m != nil && m.ValidActDevCount != nil {
		return *m.ValidActDevCount
	}
	return 0
}

//注册登录页面埋点日志
type PageRegLog struct {
	//Type类型按钮值
	//1-登录页面浏览次数
	//2-一键登录页面浏览次数
	//3-微信绑定页浏览次数
	//4-手机号注册页浏览次数
	//5-验证码填写页浏览次数
	//6-个人信息页浏览次数
	//7-兴趣墙页的浏览次数
	//8-推荐页的浏览次数
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	CreateTime           *int64   `protobuf:"varint,2,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	Code                 *string  `protobuf:"bytes,3,opt,name=Code" json:"Code,omitempty" bson:"Code,omitempty"`
	DicType              *int32   `protobuf:"varint,4,opt,name=DicType" json:"DicType,omitempty" bson:"DicType,omitempty"`
	Channel              *string  `protobuf:"bytes,5,opt,name=Channel" json:"Channel,omitempty" bson:"Channel,omitempty"`
	Type                 *int32   `protobuf:"varint,6,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PageRegLog) Reset()         { *m = PageRegLog{} }
func (m *PageRegLog) String() string { return proto.CompactTextString(m) }
func (*PageRegLog) ProtoMessage()    {}
func (*PageRegLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{134}
}
func (m *PageRegLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageRegLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageRegLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageRegLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageRegLog.Merge(m, src)
}
func (m *PageRegLog) XXX_Size() int {
	return m.Size()
}
func (m *PageRegLog) XXX_DiscardUnknown() {
	xxx_messageInfo_PageRegLog.DiscardUnknown(m)
}

var xxx_messageInfo_PageRegLog proto.InternalMessageInfo

func (m *PageRegLog) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *PageRegLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PageRegLog) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

func (m *PageRegLog) GetDicType() int32 {
	if m != nil && m.DicType != nil {
		return *m.DicType
	}
	return 0
}

func (m *PageRegLog) GetChannel() string {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return ""
}

func (m *PageRegLog) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

//匹配运营号的信息:player_operate
type PlayerOperate struct {
	Account              *string  `protobuf:"bytes,1,opt,name=Account" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Type                 *int32   `protobuf:"varint,3,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerOperate) Reset()         { *m = PlayerOperate{} }
func (m *PlayerOperate) String() string { return proto.CompactTextString(m) }
func (*PlayerOperate) ProtoMessage()    {}
func (*PlayerOperate) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{135}
}
func (m *PlayerOperate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerOperate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerOperate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerOperate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerOperate.Merge(m, src)
}
func (m *PlayerOperate) XXX_Size() int {
	return m.Size()
}
func (m *PlayerOperate) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerOperate.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerOperate proto.InternalMessageInfo

func (m *PlayerOperate) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *PlayerOperate) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerOperate) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

//首页tips配置表:index_tips
type IndexTips struct {
	//固定ID:1-谁喜欢我,2-热门话题,3-柠檬花田,4-附近的人
	Id                   *int32   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Title                *string  `protobuf:"bytes,2,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	Weights              *int32   `protobuf:"varint,3,opt,name=Weights" json:"Weights,omitempty" bson:"Weights,omitempty"`
	Status               *int32   `protobuf:"varint,4,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	AdvId                *int64   `protobuf:"varint,5,opt,name=AdvId" json:"AdvId,omitempty" bson:"AdvId,omitempty"`
	Types                *int32   `protobuf:"varint,6,opt,name=Types" json:"Types,omitempty" bson:"Types,omitempty"`
	BKUrl                *string  `protobuf:"bytes,7,opt,name=BKUrl" json:"BKUrl,omitempty" bson:"BKUrl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *IndexTips) Reset()         { *m = IndexTips{} }
func (m *IndexTips) String() string { return proto.CompactTextString(m) }
func (*IndexTips) ProtoMessage()    {}
func (*IndexTips) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{136}
}
func (m *IndexTips) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexTips) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexTips.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexTips) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexTips.Merge(m, src)
}
func (m *IndexTips) XXX_Size() int {
	return m.Size()
}
func (m *IndexTips) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexTips.DiscardUnknown(m)
}

var xxx_messageInfo_IndexTips proto.InternalMessageInfo

func (m *IndexTips) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *IndexTips) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *IndexTips) GetWeights() int32 {
	if m != nil && m.Weights != nil {
		return *m.Weights
	}
	return 0
}

func (m *IndexTips) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *IndexTips) GetAdvId() int64 {
	if m != nil && m.AdvId != nil {
		return *m.AdvId
	}
	return 0
}

func (m *IndexTips) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *IndexTips) GetBKUrl() string {
	if m != nil && m.BKUrl != nil {
		return *m.BKUrl
	}
	return ""
}

//弹窗悬浮球配置:pop_suspend
type PopSuspend struct {
	//固定ID:1-恰柠檬,2-消息,3-广场,4-电竞,5-我的
	Id                   *int32   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Title                *string  `protobuf:"bytes,2,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	IsPop                *bool    `protobuf:"varint,3,opt,name=IsPop" json:"IsPop,omitempty" bson:"IsPop,omitempty"`
	IsSuspend            *bool    `protobuf:"varint,4,opt,name=IsSuspend" json:"IsSuspend,omitempty" bson:"IsSuspend,omitempty"`
	AdvId                *int64   `protobuf:"varint,5,opt,name=AdvId" json:"AdvId,omitempty" bson:"AdvId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PopSuspend) Reset()         { *m = PopSuspend{} }
func (m *PopSuspend) String() string { return proto.CompactTextString(m) }
func (*PopSuspend) ProtoMessage()    {}
func (*PopSuspend) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c04aa9fca473b2c, []int{137}
}
func (m *PopSuspend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PopSuspend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PopSuspend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PopSuspend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PopSuspend.Merge(m, src)
}
func (m *PopSuspend) XXX_Size() int {
	return m.Size()
}
func (m *PopSuspend) XXX_DiscardUnknown() {
	xxx_messageInfo_PopSuspend.DiscardUnknown(m)
}

var xxx_messageInfo_PopSuspend proto.InternalMessageInfo

func (m *PopSuspend) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PopSuspend) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *PopSuspend) GetIsPop() bool {
	if m != nil && m.IsPop != nil {
		return *m.IsPop
	}
	return false
}

func (m *PopSuspend) GetIsSuspend() bool {
	if m != nil && m.IsSuspend != nil {
		return *m.IsSuspend
	}
	return false
}

func (m *PopSuspend) GetAdvId() int64 {
	if m != nil && m.AdvId != nil {
		return *m.AdvId
	}
	return 0
}

func init() {
	proto.RegisterType((*ServerInfo)(nil), "share_message.ServerInfo")
	proto.RegisterType((*UserGoldReport)(nil), "share_message.UserGoldReport")
	proto.RegisterType((*ReportJob)(nil), "share_message.ReportJob")
	proto.RegisterType((*RolePower)(nil), "share_message.RolePower")
	proto.RegisterType((*Manager)(nil), "share_message.Manager")
	proto.RegisterType((*ManagerTypes)(nil), "share_message.ManagerTypes")
	proto.RegisterType((*BackstageOptLog)(nil), "share_message.BackstageOptLog")
	proto.RegisterType((*FreezeIpList)(nil), "share_message.FreezeIpList")
	proto.RegisterType((*FreezeAccountList)(nil), "share_message.FreezeAccountList")
	proto.RegisterType((*LogLoginInfo)(nil), "share_message.LogLoginInfo")
	proto.RegisterType((*SourceType)(nil), "share_message.SourceType")
	proto.RegisterType((*GoldChangeLog)(nil), "share_message.GoldChangeLog")
	proto.RegisterType((*CoinChangeLog)(nil), "share_message.CoinChangeLog")
	proto.RegisterType((*ESportCoinChangeLog)(nil), "share_message.ESportCoinChangeLog")
	proto.RegisterType((*GoldExtendLog)(nil), "share_message.GoldExtendLog")
	proto.RegisterType((*RechargeExtend)(nil), "share_message.RechargeExtend")
	proto.RegisterType((*Order)(nil), "share_message.Order")
	proto.RegisterType((*TeamData)(nil), "share_message.TeamData")
	proto.RegisterType((*OperatorInfo)(nil), "share_message.OperatorInfo")
	proto.RegisterType((*OutTeamInfo)(nil), "share_message.OutTeamInfo")
	proto.RegisterType((*InviteInfo)(nil), "share_message.InviteInfo")
	proto.RegisterType((*MessageSetting)(nil), "share_message.MessageSetting")
	proto.RegisterType((*TeamSetting)(nil), "share_message.TeamSetting")
	proto.RegisterType((*TeamChannel)(nil), "share_message.TeamChannel")
	proto.RegisterType((*TeamChatLogMsg)(nil), "share_message.TeamChatLogMsg")
	proto.RegisterType((*WithDrawInfo)(nil), "share_message.WithDrawInfo")
	proto.RegisterType((*TeamChatInfo)(nil), "share_message.TeamChatInfo")
	proto.RegisterType((*TeamMessage)(nil), "share_message.TeamMessage")
	proto.RegisterType((*NoticeMsg)(nil), "share_message.NoticeMsg")
	proto.RegisterType((*TeamChatLog)(nil), "share_message.TeamChatLog")
	proto.RegisterType((*PersonalChatLogMsg)(nil), "share_message.PersonalChatLogMsg")
	proto.RegisterType((*PersonalChatLog)(nil), "share_message.PersonalChatLog")
	proto.RegisterType((*AllTeamData)(nil), "share_message.AllTeamData")
	proto.RegisterType((*PersonalTeamData)(nil), "share_message.PersonalTeamData")
	proto.RegisterType((*OperatorInfoPer)(nil), "share_message.OperatorInfoPer")
	proto.RegisterType((*PersonalTeamSetting)(nil), "share_message.PersonalTeamSetting")
	proto.RegisterType((*RedPacketLog)(nil), "share_message.RedPacketLog")
	proto.RegisterType((*RedPacketTotalInfo)(nil), "share_message.RedPacketTotalInfo")
	proto.RegisterType((*RedPacket)(nil), "share_message.RedPacket")
	proto.RegisterType((*TransferMoney)(nil), "share_message.TransferMoney")
	proto.RegisterType((*PayOrderInfo)(nil), "share_message.PayOrderInfo")
	proto.RegisterType((*PayOrderResult)(nil), "share_message.PayOrderResult")
	proto.RegisterType((*PlayerKeepReport)(nil), "share_message.PlayerKeepReport")
	proto.RegisterType((*PlayerOnlineReport)(nil), "share_message.PlayerOnlineReport")
	proto.RegisterType((*ActivityReport)(nil), "share_message.ActivityReport")
	proto.RegisterType((*CoinProductReport)(nil), "share_message.CoinProductReport")
	proto.RegisterType((*OnlineTimeLog)(nil), "share_message.OnlineTimeLog")
	proto.RegisterType((*PlayerActiveReport)(nil), "share_message.PlayerActiveReport")
	proto.RegisterType((*PlayerBehaviorReport)(nil), "share_message.PlayerBehaviorReport")
	proto.RegisterType((*InOutCashSumReport)(nil), "share_message.InOutCashSumReport")
	proto.RegisterType((*RegisterLoginReport)(nil), "share_message.RegisterLoginReport")
	proto.RegisterType((*OperationChannelReport)(nil), "share_message.OperationChannelReport")
	proto.RegisterType((*ChannelReport)(nil), "share_message.ChannelReport")
	proto.RegisterType((*ArticleReport)(nil), "share_message.ArticleReport")
	proto.RegisterType((*SquareReport)(nil), "share_message.SquareReport")
	proto.RegisterType((*PlayerLogLocationReport)(nil), "share_message.PlayerLogLocationReport")
	proto.RegisterType((*RecallReport)(nil), "share_message.RecallReport")
	proto.RegisterType((*LocationData)(nil), "share_message.LocationData")
	proto.RegisterType((*AllLocationDate)(nil), "share_message.AllLocationDate")
	proto.RegisterType((*GeneralQuota)(nil), "share_message.GeneralQuota")
	proto.RegisterType((*PayType)(nil), "share_message.PayType")
	proto.RegisterType((*PayScene)(nil), "share_message.PayScene")
	proto.RegisterType((*PaymentSetting)(nil), "share_message.PaymentSetting")
	proto.RegisterType((*PaymentPlatform)(nil), "share_message.PaymentPlatform")
	proto.RegisterType((*PlatformChannel)(nil), "share_message.PlatformChannel")
	proto.RegisterType((*AppPushMessage)(nil), "share_message.AppPushMessage")
	proto.RegisterType((*HelpType)(nil), "share_message.HelpType")
	proto.RegisterType((*HelpMsg)(nil), "share_message.HelpMsg")
	proto.RegisterType((*PlayerComplaint)(nil), "share_message.PlayerComplaint")
	proto.RegisterType((*NearByGreetInfo)(nil), "share_message.NearByGreetInfo")
	proto.RegisterType((*NearByInfo)(nil), "share_message.NearByInfo")
	proto.RegisterType((*SystemNotice)(nil), "share_message.SystemNotice")
	proto.RegisterType((*Assistant)(nil), "share_message.Assistant")
	proto.RegisterType((*SysParameter)(nil), "share_message.SysParameter")
	proto.RegisterType((*PushSettings)(nil), "share_message.PushSettings")
	proto.RegisterType((*LoginRegisterInfo)(nil), "share_message.LoginRegisterInfo")
	proto.RegisterType((*OperationChannel)(nil), "share_message.OperationChannel")
	proto.RegisterType((*DownPage)(nil), "share_message.DownPage")
	proto.RegisterType((*IpLibrary)(nil), "share_message.IpLibrary")
	proto.RegisterType((*InterestTag)(nil), "share_message.InterestTag")
	proto.RegisterType((*InterestType)(nil), "share_message.InterestType")
	proto.RegisterType((*InterestGroup)(nil), "share_message.InterestGroup")
	proto.RegisterType((*Tweets)(nil), "share_message.Tweets")
	proto.RegisterType((*RegisterPush)(nil), "share_message.RegisterPush")
	proto.RegisterType((*Article)(nil), "share_message.Article")
	proto.RegisterType((*ArticleZan)(nil), "share_message.ArticleZan")
	proto.RegisterType((*ArticleComment)(nil), "share_message.ArticleComment")
	proto.RegisterType((*CustomTag)(nil), "share_message.CustomTag")
	proto.RegisterType((*CrawlWords)(nil), "share_message.CrawlWords")
	proto.RegisterType((*GrabTag)(nil), "share_message.GrabTag")
	proto.RegisterType((*SystemLog)(nil), "share_message.SystemLog")
	proto.RegisterType((*PlayerCrawlWords)(nil), "share_message.PlayerCrawlWords")
	proto.RegisterType((*PosDeviceCode)(nil), "share_message.PosDeviceCode")
	proto.RegisterType((*PosDeviceIdfa)(nil), "share_message.PosDeviceIdfa")
	proto.RegisterType((*PlayerTalkLog)(nil), "share_message.PlayerTalkLog")
	proto.RegisterType((*DirtyWords)(nil), "share_message.DirtyWords")
	proto.RegisterType((*Signature)(nil), "share_message.Signature")
	proto.RegisterType((*IMmessage)(nil), "share_message.IMmessage")
	proto.RegisterType((*IMcontent)(nil), "share_message.IMcontent")
	proto.RegisterType((*WaiterPerformance)(nil), "share_message.WaiterPerformance")
	proto.RegisterType((*WaiterFAQ)(nil), "share_message.WaiterFAQ")
	proto.RegisterType((*WaiterFastReply)(nil), "share_message.WaiterFastReply")
	proto.RegisterType((*PlayerFreezeLog)(nil), "share_message.PlayerFreezeLog")
	proto.RegisterType((*PlayerCancleAccount)(nil), "share_message.PlayerCancleAccount")
	proto.RegisterType((*CancelAccountList)(nil), "share_message.CancelAccountList")
	proto.RegisterType((*Activity)(nil), "share_message.Activity")
	proto.RegisterType((*Props)(nil), "share_message.Props")
	proto.RegisterType((*DayProps)(nil), "share_message.DayProps")
	proto.RegisterType((*PlayerProps)(nil), "share_message.PlayerProps")
	proto.RegisterType((*PlayerUsePropsLog)(nil), "share_message.PlayerUsePropsLog")
	proto.RegisterType((*LuckyPlayer)(nil), "share_message.LuckyPlayer")
	proto.RegisterType((*LuckyPlayerRelated)(nil), "share_message.LuckyPlayerRelated")
	proto.RegisterType((*PropsRate)(nil), "share_message.PropsRate")
	proto.RegisterType((*LuckySysFullCount)(nil), "share_message.LuckySysFullCount")
	proto.RegisterType((*DataCountry)(nil), "share_message.DataCountry")
	proto.RegisterType((*DataArea)(nil), "share_message.DataArea")
	proto.RegisterType((*DataRegion)(nil), "share_message.DataRegion")
	proto.RegisterType((*DataCity)(nil), "share_message.DataCity")
	proto.RegisterType((*ReadDynamicDevice)(nil), "share_message.ReadDynamicDevice")
	proto.RegisterType((*AdvLogReq)(nil), "share_message.AdvLogReq")
	proto.RegisterType((*KsPosAdvIdfa)(nil), "share_message.KsPosAdvIdfa")
	proto.RegisterType((*VideoVoiceDurationLog)(nil), "share_message.VideoVoiceDurationLog")
	proto.RegisterType((*RecallPlayerLog)(nil), "share_message.RecallPlayerLog")
	proto.RegisterType((*NearSet)(nil), "share_message.NearSet")
	proto.RegisterType((*NearSessionList)(nil), "share_message.NearSessionList")
	proto.RegisterType((*NearMessageNewLog)(nil), "share_message.NearMessageNewLog")
	proto.RegisterType((*ChatSession)(nil), "share_message.ChatSession")
	proto.RegisterType((*ReadLogInfo)(nil), "share_message.ReadLogInfo")
	proto.RegisterType((*NearReport)(nil), "share_message.NearReport")
	proto.RegisterType((*CommStrId)(nil), "share_message.CommStrId")
	proto.RegisterType((*ESportCoinRecharge)(nil), "share_message.ESportCoinRecharge")
	proto.RegisterType((*ButtonClickReport)(nil), "share_message.ButtonClickReport")
	proto.RegisterType((*ButtonClickLog)(nil), "share_message.ButtonClickLog")
	proto.RegisterType((*PageRegLogReport)(nil), "share_message.PageRegLogReport")
	proto.RegisterType((*PageRegLog)(nil), "share_message.PageRegLog")
	proto.RegisterType((*PlayerOperate)(nil), "share_message.PlayerOperate")
	proto.RegisterType((*IndexTips)(nil), "share_message.IndexTips")
	proto.RegisterType((*PopSuspend)(nil), "share_message.PopSuspend")
}

func init() { proto.RegisterFile("table_struct.proto", fileDescriptor_1c04aa9fca473b2c) }

var fileDescriptor_1c04aa9fca473b2c = []byte{
	// 8782 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x7d, 0x4b, 0x6c, 0x24, 0x49,
	0x76, 0x18, 0xea, 0xc7, 0xaa, 0x7a, 0xf5, 0x23, 0x8b, 0xec, 0xee, 0x9a, 0xee, 0xf9, 0xf4, 0xa6,
	0x56, 0x52, 0xef, 0xee, 0xf4, 0xce, 0x74, 0xcf, 0xf4, 0xcc, 0xee, 0x5a, 0xfe, 0x90, 0xc5, 0x66,
	0x77, 0xed, 0xf0, 0x53, 0xcd, 0x62, 0x37, 0x67, 0xc7, 0x06, 0x06, 0xc1, 0xca, 0xe8, 0x62, 0x2e,
	0xb3, 0x32, 0x6b, 0x33, 0xb3, 0x48, 0x96, 0x00, 0xc3, 0xb0, 0x04, 0xc3, 0x17, 0x0b, 0x82, 0x01,
	0x0b, 0x92, 0x05, 0x2c, 0x20, 0xc0, 0x80, 0x0d, 0xeb, 0x68, 0x08, 0xd0, 0xc5, 0x30, 0x64, 0xc1,
	0xf0, 0xe7, 0x62, 0x08, 0xbe, 0x0a, 0x90, 0xe4, 0x15, 0xe0, 0x83, 0x20, 0x1b, 0x3e, 0x18, 0x3a,
	0xd9, 0x80, 0x11, 0x2f, 0xe2, 0x45, 0x44, 0x66, 0x15, 0x9b, 0xc5, 0xd1, 0x4a, 0x37, 0xd6, 0xcb,
	0xc8, 0xc8, 0x88, 0xf7, 0xff, 0x45, 0x10, 0xda, 0x09, 0x3b, 0xf1, 0xf9, 0x97, 0x71, 0x12, 0x4d,
	0x87, 0xc9, 0xb7, 0x27, 0x51, 0x98, 0x84, 0xed, 0x46, 0x7c, 0xca, 0x22, 0xfe, 0xe5, 0x98, 0xc7,
	0x31, 0x1b, 0xf1, 0xbb, 0xf5, 0xd1, 0x28, 0x4c, 0xd8, 0x48, 0x3e, 0x74, 0xfe, 0x75, 0x1e, 0x60,
	0xc0, 0xa3, 0x73, 0x1e, 0xf5, 0x82, 0xd7, 0x61, 0xfb, 0x5d, 0x28, 0x0c, 0x3c, 0xb7, 0x93, 0xbb,
	0x9f, 0x7b, 0x50, 0xda, 0x5a, 0xfb, 0xb3, 0x3f, 0x7a, 0xaf, 0xf1, 0xa5, 0xe7, 0xbe, 0x1f, 0x8e,
	0xbd, 0x84, 0x8f, 0x27, 0xc9, 0xac, 0x5d, 0x87, 0xe2, 0x3e, 0x1b, 0xf3, 0x4e, 0xfe, 0x7e, 0xee,
	0x41, 0x55, 0xfc, 0x3a, 0x9a, 0x4d, 0x78, 0xa7, 0x20, 0x86, 0xb7, 0xdb, 0x00, 0x4f, 0x2f, 0x13,
	0x1e, 0x05, 0xcc, 0xef, 0x4d, 0x3a, 0x45, 0x1c, 0xd1, 0x06, 0xe8, 0x05, 0x0a, 0xd6, 0xef, 0x6c,
	0x20, 0x6c, 0x03, 0xea, 0x5d, 0xdf, 0xe3, 0x41, 0x72, 0x3c, 0xe8, 0x87, 0x51, 0xd2, 0x29, 0xe1,
	0xdb, 0xb7, 0xa0, 0x21, 0xa1, 0x47, 0xdd, 0x3e, 0x82, 0x57, 0xd2, 0xe0, 0xcd, 0x89, 0x87, 0xe0,
	0x32, 0x81, 0xe5, 0xaa, 0x09, 0x5c, 0xa1, 0x25, 0x1c, 0xf3, 0x13, 0x82, 0x55, 0x11, 0xd6, 0x81,
	0xd5, 0x2d, 0x36, 0x3c, 0x1b, 0x24, 0x6c, 0xc4, 0xe9, 0x09, 0xe0, 0x93, 0x06, 0x94, 0x06, 0x09,
	0x4b, 0x78, 0xa7, 0x86, 0x3f, 0x9b, 0xb0, 0xd2, 0x0d, 0x83, 0xfd, 0xe9, 0xb8, 0x53, 0xc7, 0xdf,
	0x2d, 0x28, 0xbf, 0xe2, 0x51, 0xec, 0x85, 0x41, 0xa7, 0x21, 0x16, 0xee, 0xfc, 0xc7, 0x3c, 0x34,
	0x5f, 0xc6, 0x3c, 0x7a, 0x16, 0xfa, 0xee, 0x21, 0x9f, 0x84, 0x51, 0xd2, 0xbe, 0x0f, 0xa5, 0xdd,
	0x70, 0xd4, 0x13, 0x18, 0xcb, 0x3f, 0x28, 0x2c, 0xc2, 0xd8, 0x2a, 0x54, 0xfa, 0x3e, 0x9b, 0xf1,
	0xa8, 0xe7, 0x22, 0xd6, 0x0a, 0xed, 0x1a, 0x14, 0x5e, 0x79, 0x13, 0x85, 0x34, 0xf1, 0x98, 0x45,
	0x3c, 0x48, 0x7a, 0x2e, 0xa2, 0xac, 0x20, 0x90, 0x2a, 0x3e, 0x80, 0x68, 0x29, 0x88, 0x45, 0xf5,
	0xa3, 0xf0, 0xb5, 0x27, 0xf1, 0x51, 0x10, 0xe3, 0x0f, 0xf9, 0xf0, 0x94, 0x45, 0x23, 0x8e, 0xa8,
	0x28, 0x08, 0x54, 0x10, 0xa4, 0x1b, 0x4e, 0x03, 0x42, 0xc5, 0x6d, 0x68, 0x12, 0xf8, 0x90, 0x27,
	0xd3, 0x28, 0x40, 0x74, 0xe0, 0x04, 0x47, 0x97, 0x9b, 0x63, 0x1c, 0x09, 0x08, 0x59, 0x83, 0x6a,
	0x97, 0xfb, 0xfe, 0x60, 0x18, 0x46, 0x12, 0x15, 0x05, 0xb1, 0xf5, 0x43, 0xce, 0xfc, 0x63, 0x2f,
	0x40, 0x5c, 0x28, 0xc0, 0x39, 0x0f, 0xa6, 0x1c, 0x71, 0x51, 0x10, 0x44, 0x94, 0xd3, 0x1e, 0xf2,
	0x0b, 0x16, 0xb9, 0x9d, 0x26, 0x42, 0xdb, 0x00, 0xdd, 0x88, 0xb3, 0x84, 0x1f, 0x79, 0x63, 0xde,
	0x69, 0xd1, 0xf4, 0xcf, 0xd8, 0x58, 0xad, 0x6d, 0x55, 0xac, 0xcd, 0xf9, 0x05, 0xa8, 0x4a, 0xfc,
	0x7d, 0x3f, 0x3c, 0x69, 0x7f, 0x0d, 0x56, 0xe4, 0x0f, 0xe4, 0xba, 0xea, 0x15, 0x5c, 0x87, 0x13,
	0x22, 0xfe, 0x9c, 0x31, 0x54, 0x0f, 0x43, 0x9f, 0xf7, 0xc3, 0x0b, 0x1e, 0xb5, 0xdf, 0x81, 0x7c,
	0xef, 0x0d, 0xfc, 0x2a, 0xd0, 0x15, 0xfa, 0xdc, 0xe2, 0xd9, 0x16, 0x94, 0xf7, 0x78, 0x30, 0xed,
	0xb9, 0x71, 0x07, 0xee, 0x17, 0x1e, 0x54, 0x69, 0x08, 0x32, 0xb2, 0x64, 0x04, 0xc1, 0xe4, 0x61,
	0xc2, 0x71, 0xeb, 0x55, 0xe7, 0x5f, 0x16, 0xa0, 0xbc, 0xc7, 0x02, 0x36, 0x4a, 0x7d, 0x6d, 0x21,
	0xad, 0x5b, 0x50, 0xde, 0x1c, 0x0e, 0x71, 0xa3, 0x5a, 0x40, 0x06, 0x5e, 0x22, 0x05, 0xa4, 0x2a,
	0x69, 0x1d, 0xc7, 0x17, 0x61, 0xe4, 0x2a, 0xf1, 0xa8, 0x43, 0x51, 0x7c, 0x5b, 0x89, 0x00, 0xd2,
	0x96, 0xf9, 0xb8, 0xd8, 0x15, 0x7c, 0xde, 0x80, 0x52, 0xff, 0x34, 0x0c, 0x24, 0xa9, 0xab, 0x82,
	0x19, 0x04, 0xc3, 0x4e, 0x63, 0x45, 0xe3, 0x16, 0x94, 0x7b, 0xf1, 0x41, 0xe0, 0x7b, 0x1c, 0x89,
	0x5b, 0xc9, 0xe0, 0x1f, 0x88, 0x26, 0xbb, 0xe1, 0xc8, 0x0b, 0x24, 0x01, 0x6a, 0x24, 0x3e, 0xfd,
	0x88, 0x9f, 0x23, 0x1c, 0x87, 0x4a, 0x2a, 0xaf, 0x43, 0x4d, 0x83, 0x7b, 0x7d, 0xc9, 0xf5, 0x62,
	0xec, 0x2e, 0x8b, 0x13, 0x33, 0xb6, 0x49, 0x63, 0x35, 0xb8, 0xd7, 0x47, 0x5a, 0xcb, 0xfd, 0x32,
	0x5f, 0x92, 0x39, 0x8d, 0xd9, 0x35, 0x12, 0xb1, 0x2d, 0x2f, 0x70, 0x7b, 0x93, 0x4e, 0x1b, 0x71,
	0xbf, 0x0e, 0xb5, 0x5e, 0xfc, 0x2c, 0x0c, 0x47, 0x3e, 0x7f, 0xc5, 0xa3, 0xce, 0x3a, 0x6e, 0x62,
	0x03, 0xea, 0x12, 0x34, 0xe0, 0xc3, 0x88, 0x27, 0x4a, 0x6b, 0x34, 0xa0, 0x24, 0x26, 0x8a, 0x3b,
	0xb7, 0x70, 0xa6, 0x35, 0xa8, 0xf6, 0x62, 0xfc, 0xf8, 0xf3, 0x27, 0x9d, 0xdb, 0xe2, 0x3d, 0xe7,
	0x33, 0xa8, 0x2b, 0x3a, 0xe1, 0xc0, 0xeb, 0x58, 0x23, 0xad, 0xca, 0x0c, 0x6a, 0x51, 0x2e, 0x9d,
	0xdf, 0xc8, 0x43, 0x4b, 0xa8, 0x8d, 0x58, 0xa8, 0x8d, 0x83, 0x89, 0xd8, 0xa7, 0x4d, 0x5e, 0x64,
	0xd5, 0x36, 0x40, 0xbe, 0x37, 0x51, 0x13, 0x6c, 0x40, 0xfd, 0x48, 0x08, 0x5b, 0x22, 0x34, 0x44,
	0xcf, 0xed, 0x14, 0xee, 0x17, 0x48, 0x6e, 0xc6, 0x2c, 0x3a, 0x8b, 0x15, 0xc5, 0x5b, 0x50, 0x3e,
	0x98, 0x24, 0x88, 0x92, 0x52, 0x8a, 0x45, 0x56, 0x48, 0x5f, 0x5a, 0x04, 0x94, 0x02, 0x0e, 0x90,
	0xdf, 0x79, 0x84, 0xc4, 0xc4, 0x2f, 0xee, 0x3c, 0x46, 0x22, 0xca, 0xbf, 0x3f, 0x92, 0x4c, 0x8a,
	0x7f, 0x7f, 0xac, 0x08, 0x26, 0xfe, 0x7e, 0x82, 0x54, 0xc2, 0xbf, 0x8f, 0x1e, 0x29, 0x41, 0x14,
	0x7f, 0x3f, 0x46, 0xd2, 0xc8, 0xbf, 0x3f, 0x52, 0x44, 0x11, 0x7f, 0x7f, 0xdc, 0x69, 0xeb, 0xbf,
	0x9f, 0x74, 0xd6, 0xef, 0x17, 0xd4, 0xdf, 0x9f, 0x74, 0x36, 0x70, 0x1f, 0x62, 0xce, 0x4f, 0x3a,
	0xb7, 0x04, 0xd1, 0x9c, 0x1f, 0xe7, 0xa0, 0xbe, 0x13, 0x71, 0xfe, 0x8b, 0xbc, 0x37, 0xd9, 0xf5,
	0xe2, 0x64, 0x09, 0xa9, 0x20, 0x2e, 0x91, 0xa8, 0x5a, 0x83, 0x2a, 0x02, 0x36, 0xa7, 0xc9, 0x29,
	0xa2, 0xbb, 0x22, 0xd5, 0xc9, 0xc8, 0x8b, 0x13, 0x1e, 0x21, 0xb4, 0x88, 0xd0, 0xa6, 0x50, 0x0d,
	0x02, 0x7b, 0x0a, 0x57, 0x6d, 0x80, 0xe7, 0x2c, 0x70, 0x7d, 0x89, 0x1d, 0xad, 0x10, 0x0f, 0x26,
	0x3c, 0x62, 0x49, 0x18, 0x49, 0x29, 0x71, 0x5e, 0xc1, 0x9a, 0x5c, 0x9e, 0x22, 0xd6, 0x92, 0x6b,
	0x4c, 0x4b, 0xee, 0xfc, 0x1a, 0x9d, 0xdf, 0xca, 0x41, 0x7d, 0x37, 0x1c, 0xc9, 0xbd, 0x08, 0x63,
	0x49, 0x73, 0xe6, 0x97, 0x9c, 0xd3, 0x36, 0x05, 0x05, 0x5c, 0xbc, 0xb6, 0x40, 0x45, 0xc2, 0x7e,
	0x7f, 0x47, 0xed, 0x95, 0x16, 0x60, 0x6d, 0x15, 0x99, 0x69, 0x64, 0x71, 0x86, 0x85, 0xd9, 0x0a,
	0x6e, 0xfd, 0x0b, 0x80, 0x41, 0x38, 0x8d, 0x86, 0x28, 0x73, 0xc2, 0x98, 0x7f, 0xc6, 0x67, 0xb8,
	0xc0, 0x85, 0x12, 0xd0, 0x80, 0xd2, 0x2b, 0xe6, 0x4f, 0x17, 0x5b, 0xf3, 0x16, 0x94, 0xbb, 0xa7,
	0x2c, 0x08, 0xb8, 0x2f, 0x17, 0xe7, 0xfc, 0x9f, 0x1c, 0x34, 0x84, 0x61, 0x12, 0xd0, 0x11, 0x17,
	0xf2, 0xf0, 0x55, 0x8c, 0xdf, 0x6d, 0x83, 0x14, 0x54, 0x8a, 0x5b, 0xa5, 0x3f, 0xfb, 0xa3, 0xf7,
	0x72, 0x0f, 0x91, 0xf1, 0x71, 0x62, 0xb4, 0x7d, 0x45, 0xd2, 0x5c, 0x66, 0x37, 0x4a, 0x47, 0xbe,
	0x03, 0x4d, 0x03, 0x33, 0x9a, 0x92, 0xa6, 0x69, 0x41, 0xb9, 0xcf, 0x66, 0x38, 0xbe, 0xac, 0xb7,
	0x31, 0x45, 0x8b, 0xad, 0xd4, 0x21, 0x99, 0xd7, 0x1a, 0xfd, 0x32, 0xaa, 0x3e, 0x23, 0x7d, 0x68,
	0xe8, 0x9c, 0x5f, 0xcb, 0x43, 0xa3, 0x1b, 0x7a, 0xc1, 0x5f, 0xf1, 0xb6, 0xc5, 0x27, 0x7e, 0xea,
	0xdb, 0xc6, 0x49, 0xf5, 0xb6, 0xf1, 0xd7, 0x92, 0xdb, 0x16, 0x5b, 0xe8, 0x4e, 0xa3, 0x2d, 0x7c,
	0xa7, 0x49, 0xbc, 0x2a, 0x7f, 0xa2, 0x36, 0x71, 0xfe, 0x49, 0x1e, 0xd6, 0x9f, 0x0e, 0x84, 0xdd,
	0xfe, 0xab, 0xc3, 0x4e, 0x07, 0x56, 0xe5, 0xc4, 0xe6, 0x43, 0x3f, 0x45, 0x1c, 0x09, 0xd7, 0x72,
	0x1a, 0x59, 0x53, 0x6b, 0x7b, 0x69, 0xc1, 0x96, 0x65, 0x93, 0xff, 0xab, 0xa4, 0x43, 0x78, 0xc0,
	0x81, 0x2b, 0x10, 0xb1, 0x0e, 0xb5, 0x43, 0xee, 0xf6, 0xd9, 0xf0, 0x8c, 0x27, 0xa4, 0x7a, 0x50,
	0xfd, 0x47, 0xae, 0xde, 0x3a, 0xce, 0xb5, 0xc7, 0xa3, 0xe1, 0x29, 0x43, 0x0f, 0x50, 0xfb, 0x09,
	0x5b, 0x2c, 0x38, 0xc3, 0x2d, 0x14, 0x09, 0xf2, 0x9c, 0x33, 0xb7, 0x37, 0x0c, 0x03, 0xa5, 0x1e,
	0xac, 0xdd, 0x48, 0x47, 0x59, 0xd8, 0x9f, 0x88, 0x05, 0xf1, 0x6b, 0x1e, 0x1d, 0xf1, 0xcb, 0x44,
	0x79, 0x0c, 0xca, 0x4f, 0xf6, 0x86, 0xbc, 0x2b, 0x7d, 0xc6, 0x0a, 0xd1, 0xf2, 0xc8, 0x4b, 0x7c,
	0xe9, 0x36, 0x54, 0xb5, 0x4c, 0x00, 0xad, 0x91, 0x24, 0xbf, 0x46, 0xcc, 0x44, 0xe4, 0xa9, 0xcf,
	0x29, 0x32, 0xb9, 0xfd, 0x7f, 0x93, 0x33, 0xee, 0xa6, 0x44, 0x81, 0xd8, 0xbf, 0x9a, 0x26, 0x11,
	0xab, 0xcc, 0x93, 0x83, 0xde, 0x67, 0x33, 0x9a, 0x5e, 0x6b, 0x1a, 0xda, 0x4a, 0x91, 0xfc, 0x20,
	0x89, 0xdf, 0x5e, 0xdf, 0xec, 0x96, 0xd0, 0xb6, 0x42, 0xe6, 0x5a, 0xf9, 0xb0, 0xe5, 0x39, 0x2b,
	0x50, 0xa1, 0x57, 0xae, 0x5b, 0xf4, 0xaf, 0xad, 0x40, 0x09, 0xa7, 0x6d, 0x3b, 0x66, 0x7e, 0xc1,
	0xb6, 0xd5, 0xe5, 0xd8, 0xb6, 0x95, 0x61, 0x5b, 0x31, 0x64, 0xdf, 0x1b, 0x66, 0x08, 0xa7, 0x5d,
	0x3a, 0x6d, 0xc3, 0x2c, 0xce, 0x5d, 0x21, 0xac, 0x48, 0x3e, 0xb7, 0xb8, 0x33, 0x83, 0xbe, 0x4a,
	0x56, 0x9b, 0x55, 0xb5, 0xc3, 0x6d, 0xd4, 0x66, 0x5a, 0xc3, 0xd5, 0x35, 0x3b, 0xab, 0xa8, 0x6c,
	0x3f, 0x54, 0x1e, 0x42, 0x9a, 0x0a, 0xcd, 0x2c, 0x15, 0x5a, 0xe4, 0xab, 0x29, 0x14, 0xb7, 0x17,
	0xf8, 0xf6, 0xeb, 0x5a, 0x4b, 0x10, 0xa5, 0x36, 0x32, 0x7e, 0x94, 0xf6, 0xd3, 0xfa, 0x6c, 0xa6,
	0x40, 0xb7, 0x53, 0xee, 0xf5, 0x1d, 0x7c, 0xa1, 0x06, 0x85, 0x23, 0x76, 0xd9, 0x79, 0x6b, 0x8e,
	0x8c, 0xf7, 0x08, 0x81, 0x07, 0xe7, 0x3c, 0xc2, 0x6f, 0xde, 0xa5, 0x31, 0x42, 0x3a, 0x84, 0x05,
	0xee, 0xbc, 0x4d, 0xdf, 0xec, 0xb3, 0xd9, 0x31, 0x9b, 0x75, 0xde, 0x21, 0xd4, 0x89, 0xad, 0xa0,
	0x37, 0xd6, 0x73, 0x3b, 0xef, 0x52, 0x18, 0xd2, 0x67, 0xb3, 0x83, 0x09, 0x0f, 0x7a, 0x6e, 0xe7,
	0x3d, 0x42, 0xc3, 0x51, 0x98, 0x30, 0x5f, 0x7a, 0xc6, 0xf7, 0x35, 0x86, 0xc3, 0x20, 0xe1, 0x41,
	0xd2, 0xf9, 0x1a, 0x0e, 0x5a, 0x87, 0x9a, 0x64, 0x68, 0x69, 0x2a, 0x1d, 0x5b, 0x42, 0xbb, 0xa1,
	0xcb, 0x3b, 0x3f, 0x43, 0xc3, 0x14, 0x2f, 0x20, 0x0a, 0xbf, 0x4e, 0x36, 0x5c, 0x01, 0xf7, 0xc3,
	0xce, 0xcf, 0x66, 0xc6, 0x21, 0x4f, 0xfc, 0x5c, 0x06, 0xd8, 0x8f, 0xc2, 0x49, 0xe7, 0xe7, 0xe9,
	0x65, 0xe4, 0xc9, 0x6d, 0xe1, 0x1f, 0x3c, 0x20, 0x9e, 0xee, 0xc5, 0xdd, 0x53, 0x3e, 0x3c, 0xeb,
	0x7c, 0x83, 0x5e, 0xec, 0xfb, 0x2c, 0x79, 0x1d, 0x46, 0x63, 0x81, 0xc4, 0x6f, 0xda, 0xc1, 0x9b,
	0x00, 0x7c, 0x8b, 0xb6, 0x8e, 0x33, 0xe1, 0xca, 0xde, 0xc7, 0x6d, 0xde, 0x83, 0xba, 0x64, 0xe6,
	0x43, 0xce, 0xe2, 0x30, 0xe8, 0x3c, 0xb4, 0x34, 0xa5, 0xf3, 0xeb, 0x2b, 0x50, 0x39, 0xe2, 0x6c,
	0xbc, 0xcd, 0x12, 0x76, 0x9d, 0xe3, 0x94, 0xf6, 0xa2, 0x5b, 0x50, 0x16, 0x7a, 0xea, 0x65, 0xe4,
	0x2b, 0x89, 0x68, 0x41, 0xf9, 0x59, 0x18, 0x8c, 0x9e, 0xb1, 0x50, 0x09, 0x44, 0x03, 0x4a, 0x07,
	0x17, 0x01, 0x8f, 0x4c, 0x78, 0xfb, 0xe2, 0x10, 0xd1, 0x78, 0xb5, 0xff, 0xbb, 0x01, 0x75, 0x11,
	0x69, 0x1c, 0x31, 0xff, 0x0c, 0xa1, 0x15, 0xda, 0xd4, 0x1e, 0xbb, 0xdc, 0xe3, 0xe3, 0x13, 0x1e,
	0xa9, 0x48, 0x1f, 0x75, 0xa9, 0xf8, 0x2d, 0x3c, 0x3e, 0x8c, 0xee, 0x30, 0x4c, 0x51, 0x41, 0x01,
	0x02, 0x6b, 0x08, 0x5c, 0x95, 0xfb, 0xeb, 0x9e, 0x32, 0x52, 0x0e, 0x4f, 0xa0, 0xb9, 0x27, 0xf3,
	0x23, 0x03, 0x9e, 0x24, 0x5e, 0x30, 0x42, 0x49, 0xa9, 0x3d, 0x7e, 0xe7, 0xdb, 0xa9, 0xe4, 0xc9,
	0xb7, 0xd3, 0x83, 0xda, 0xdf, 0x82, 0xf2, 0xc1, 0x34, 0x11, 0x73, 0x75, 0x9a, 0xf7, 0x0b, 0x0f,
	0x6a, 0x8f, 0xef, 0x66, 0xc6, 0xab, 0xa7, 0xe8, 0x2e, 0x7e, 0x03, 0x56, 0x7a, 0xc1, 0xb9, 0xf0,
	0xf5, 0x5b, 0x38, 0xf6, 0xad, 0xcc, 0x58, 0xf9, 0x10, 0x87, 0x1a, 0x29, 0x5a, 0x25, 0x8e, 0xee,
	0xc5, 0x87, 0x7c, 0x18, 0x8e, 0xc7, 0x3c, 0x70, 0xd1, 0x6f, 0x47, 0x9f, 0x79, 0xdb, 0x8b, 0xe3,
	0xd0, 0x3f, 0x97, 0xd8, 0x92, 0x62, 0xfa, 0x36, 0x34, 0x10, 0xc1, 0x5a, 0x11, 0xad, 0xdb, 0x46,
	0xf0, 0x1e, 0xd4, 0xf1, 0x29, 0xe9, 0xad, 0xdb, 0xf6, 0x43, 0xb4, 0x58, 0xaf, 0x23, 0x1e, 0x9f,
	0xe2, 0x7c, 0x1b, 0x5a, 0xc9, 0xb9, 0x63, 0x2f, 0xe8, 0x6d, 0xa3, 0x44, 0x5b, 0x7a, 0x00, 0x67,
	0x97, 0x42, 0xfc, 0x08, 0xea, 0x24, 0xb7, 0x28, 0x97, 0x1d, 0xdc, 0xe0, 0xbd, 0x2c, 0x32, 0xac,
	0x21, 0x82, 0x11, 0x76, 0xf9, 0x39, 0xf7, 0x51, 0xf2, 0x51, 0xe7, 0xef, 0x86, 0xa3, 0x3d, 0x76,
	0xd9, 0x73, 0x95, 0x9c, 0xaf, 0x43, 0xed, 0x98, 0xfb, 0xc3, 0x70, 0xcc, 0x8f, 0x45, 0xc0, 0x7c,
	0x8f, 0x84, 0x62, 0xc0, 0xe3, 0xd8, 0x0b, 0x85, 0x14, 0xbf, 0xad, 0x03, 0xc3, 0x70, 0xe2, 0x0d,
	0x51, 0xf8, 0x71, 0x04, 0xfe, 0xdc, 0xe6, 0xf1, 0x10, 0x45, 0xbf, 0x2a, 0x50, 0x82, 0x20, 0xc5,
	0x9a, 0x71, 0xe7, 0x3d, 0x11, 0xc7, 0xd0, 0xae, 0xef, 0x40, 0x4b, 0xb0, 0xd7, 0xf6, 0x2c, 0x60,
	0x63, 0x6f, 0x88, 0x3b, 0xbf, 0x4f, 0x1c, 0xa6, 0x80, 0x3d, 0x17, 0x95, 0x41, 0xc1, 0xf9, 0x32,
	0xbd, 0xcf, 0x94, 0xbe, 0xca, 0x69, 0x27, 0x5a, 0xa7, 0x2a, 0xc4, 0xaf, 0x1d, 0x9f, 0x8d, 0x94,
	0xa1, 0x5b, 0x83, 0x6a, 0xd7, 0x0f, 0x63, 0x49, 0xad, 0x22, 0xf1, 0xbf, 0x92, 0x40, 0xb4, 0x0e,
	0xce, 0x43, 0xa8, 0xd9, 0x2c, 0x63, 0xdb, 0x9c, 0x1c, 0xcd, 0x68, 0xa5, 0x42, 0xfe, 0x34, 0x07,
	0x60, 0xb1, 0xcd, 0xfc, 0x70, 0xdb, 0x71, 0xc8, 0x13, 0xba, 0x64, 0xc8, 0xb1, 0xd0, 0xcd, 0x57,
	0x19, 0x3b, 0x31, 0xa3, 0x65, 0xb3, 0x56, 0xa1, 0xa2, 0xbe, 0xe2, 0xaa, 0x50, 0x84, 0xc4, 0xbe,
	0x9c, 0xda, 0x74, 0x25, 0x6b, 0x16, 0xab, 0xf4, 0x49, 0xe9, 0x12, 0x4a, 0xfb, 0xf4, 0x01, 0xd4,
	0x94, 0xf4, 0x69, 0x1f, 0x63, 0x5e, 0x70, 0xac, 0x11, 0xce, 0x1f, 0xe6, 0xb3, 0xd2, 0x29, 0x05,
	0x42, 0x7c, 0xb3, 0xeb, 0x73, 0x16, 0xe0, 0x66, 0x2b, 0x24, 0x25, 0xcc, 0x95, 0xc0, 0x3c, 0x02,
	0xef, 0x42, 0xbb, 0x17, 0x0f, 0x86, 0x11, 0xe7, 0xc1, 0xe0, 0x34, 0x4c, 0xf6, 0xc3, 0xc4, 0x7b,
	0x3d, 0x53, 0x51, 0xa7, 0xd8, 0x6b, 0x3c, 0x48, 0xc2, 0x89, 0xd0, 0x2d, 0x2a, 0xe6, 0x54, 0xba,
	0xe1, 0x39, 0xf7, 0x27, 0xca, 0x3a, 0xe3, 0xb4, 0x9b, 0xae, 0xbb, 0x13, 0x79, 0x42, 0xf8, 0xca,
	0x34, 0xac, 0x17, 0x2b, 0x71, 0xae, 0x20, 0x44, 0xb8, 0x5a, 0x49, 0x38, 0xd1, 0x3e, 0x5f, 0xa7,
	0x8a, 0xba, 0xe6, 0x0e, 0xb4, 0x5e, 0x06, 0x47, 0xec, 0x8c, 0x9b, 0x07, 0x52, 0x33, 0xdd, 0x82,
	0x86, 0xfc, 0xf8, 0xa6, 0xeb, 0xa2, 0x06, 0xa9, 0xe1, 0x34, 0xf7, 0x60, 0xbd, 0x17, 0x0b, 0x33,
	0x25, 0x60, 0x7b, 0x61, 0xc0, 0x67, 0xa8, 0x1e, 0xeb, 0xf8, 0xb0, 0x01, 0xa5, 0x5e, 0xbc, 0xc5,
	0x64, 0x42, 0xb2, 0x22, 0x18, 0xea, 0x65, 0xb0, 0xc5, 0xec, 0xb4, 0xcc, 0x5b, 0xb0, 0x26, 0x5f,
	0xb7, 0x65, 0xa7, 0x45, 0x0b, 0xec, 0xc5, 0x4a, 0x19, 0x3e, 0x75, 0x3d, 0x99, 0xa5, 0xa9, 0x38,
	0xff, 0x40, 0x92, 0x83, 0x30, 0xfb, 0x5d, 0x68, 0xf4, 0x79, 0x14, 0x87, 0x01, 0x29, 0xc2, 0x1c,
	0xd2, 0xc7, 0xc9, 0xd0, 0x47, 0x8e, 0x61, 0xbe, 0xfd, 0xea, 0xbc, 0x12, 0xcd, 0x2f, 0xa1, 0x44,
	0x9d, 0x6f, 0xa4, 0xf8, 0x41, 0xb3, 0x56, 0x2e, 0x15, 0x94, 0xa2, 0xfb, 0xe8, 0x30, 0x68, 0x92,
	0xe2, 0x16, 0xda, 0x22, 0x1e, 0xb5, 0xbf, 0x06, 0x2b, 0x28, 0x2d, 0x6f, 0x30, 0x51, 0xef, 0x43,
	0x45, 0xbc, 0x80, 0x8a, 0x29, 0xbf, 0x50, 0x4b, 0x5b, 0x73, 0x3a, 0x1f, 0x40, 0xfd, 0xd8, 0x4b,
	0x4e, 0xb7, 0x23, 0x76, 0xa1, 0xf5, 0x94, 0x8a, 0x67, 0x94, 0x40, 0xa5, 0xbd, 0x40, 0xe7, 0xf7,
	0x73, 0x50, 0xa7, 0x09, 0xf0, 0x8d, 0x87, 0x50, 0xdd, 0xf1, 0xa2, 0x38, 0x41, 0xf3, 0x92, 0xbb,
	0xee, 0x83, 0x62, 0x79, 0x42, 0xff, 0xe0, 0xe8, 0x6b, 0x97, 0x27, 0x96, 0xd3, 0xd5, 0x1e, 0x67,
	0xa9, 0xfd, 0x50, 0xf8, 0x97, 0xb8, 0xbe, 0xb8, 0x53, 0x5c, 0xa8, 0x74, 0x53, 0x9b, 0xb9, 0x03,
	0xad, 0x5e, 0x2c, 0x44, 0x60, 0xc8, 0x15, 0x11, 0x50, 0xc2, 0x2b, 0xce, 0x9f, 0xe7, 0x25, 0x11,
	0x14, 0xf4, 0x0a, 0xc5, 0x93, 0xf6, 0xe3, 0xf1, 0x39, 0x5a, 0x55, 0x99, 0xeb, 0xd2, 0xe9, 0x04,
	0x9d, 0xbc, 0xc1, 0x9f, 0x8f, 0x94, 0x12, 0x91, 0x62, 0xe4, 0xfb, 0xf2, 0xf3, 0x28, 0x5b, 0xc8,
	0x93, 0x9b, 0xbe, 0x6f, 0x4d, 0x55, 0xc6, 0xa9, 0xd2, 0x0a, 0xa5, 0xa9, 0x69, 0x2c, 0x9d, 0xde,
	0x4f, 0xa1, 0x2c, 0xed, 0xbc, 0x4c, 0xe1, 0xd6, 0x1e, 0xbf, 0xf7, 0x06, 0xe6, 0x14, 0x4e, 0x8c,
	0x15, 0x02, 0xa6, 0x63, 0x02, 0x4d, 0xdc, 0x1a, 0x65, 0xe6, 0xfb, 0x61, 0x8c, 0xc2, 0x55, 0xd2,
	0x7c, 0xd8, 0xd4, 0xe1, 0x84, 0x32, 0x83, 0x32, 0x9b, 0xd6, 0x81, 0x2a, 0x02, 0x70, 0xcc, 0xaa,
	0x6d, 0x46, 0x57, 0xa1, 0x32, 0xe0, 0x81, 0x8b, 0x1b, 0x58, 0x23, 0x8d, 0x38, 0x38, 0x0d, 0x2f,
	0xc4, 0xdc, 0x98, 0x66, 0x73, 0xde, 0x87, 0xaa, 0xa2, 0x42, 0x3c, 0x92, 0x42, 0xbd, 0xe9, 0xfb,
	0x4a, 0x8b, 0xa5, 0x39, 0xac, 0xf0, 0xa0, 0xe0, 0xfc, 0x52, 0x51, 0x4b, 0x48, 0x92, 0x09, 0xb1,
	0xaf, 0x60, 0x79, 0x83, 0xb1, 0xbc, 0xc6, 0x20, 0xf3, 0xcf, 0x78, 0xa4, 0xf2, 0x4e, 0x84, 0xdf,
	0xa2, 0x0e, 0xf8, 0x94, 0xcf, 0x5b, 0x22, 0x87, 0xba, 0x17, 0x0f, 0xd8, 0x39, 0x51, 0x89, 0x68,
	0x2f, 0x23, 0x93, 0x0f, 0x52, 0xac, 0x82, 0x34, 0x5a, 0xcc, 0xb3, 0xc4, 0x4c, 0x77, 0xe5, 0x0b,
	0x29, 0xa3, 0x60, 0xac, 0x2f, 0xaa, 0x5b, 0xc4, 0x22, 0xd8, 0x0f, 0x84, 0xd1, 0xc6, 0x25, 0xd3,
	0x6b, 0xb5, 0x4c, 0xde, 0x44, 0x3e, 0xc5, 0x17, 0xeb, 0xa4, 0x2a, 0xba, 0x42, 0x1d, 0x37, 0xb4,
	0x1f, 0xc0, 0xd9, 0x58, 0x22, 0x4a, 0xea, 0xc6, 0xf7, 0x01, 0x24, 0xd6, 0x51, 0x15, 0xb4, 0x70,
	0xdd, 0x9d, 0xcc, 0xba, 0x0d, 0x59, 0x6e, 0xd1, 0x02, 0xc8, 0xa3, 0x5d, 0xa5, 0xaf, 0xbc, 0xe8,
	0xf7, 0x5c, 0x45, 0xd9, 0x94, 0x3f, 0xd2, 0xce, 0x44, 0x40, 0xeb, 0x54, 0x65, 0x92, 0x89, 0xeb,
	0x0d, 0x62, 0xab, 0x3d, 0x16, 0x9d, 0xa1, 0x33, 0x85, 0xab, 0x24, 0x62, 0xc7, 0x9d, 0x3b, 0xc6,
	0x2e, 0x1c, 0x73, 0xbf, 0x4b, 0xda, 0xbb, 0x83, 0x12, 0xfa, 0x1a, 0xda, 0xc4, 0xd6, 0x96, 0xfa,
	0xd3, 0x29, 0xbe, 0x2b, 0x2a, 0x27, 0x1f, 0xce, 0xe9, 0xbe, 0x77, 0xaf, 0x90, 0x15, 0xd2, 0x7f,
	0x7f, 0x9e, 0x87, 0x56, 0x06, 0xb6, 0x24, 0xc3, 0x49, 0x06, 0xcb, 0x93, 0x17, 0x9a, 0xa6, 0xde,
	0x2d, 0x9b, 0x7a, 0xef, 0x40, 0x53, 0x51, 0x8f, 0x9c, 0xd4, 0xdb, 0x19, 0x01, 0xd2, 0xc1, 0x5b,
	0xc1, 0x4c, 0x27, 0x20, 0x34, 0xdd, 0x7b, 0x73, 0xd3, 0x89, 0xa7, 0x7a, 0xba, 0xfb, 0xf6, 0xe3,
	0x65, 0x98, 0x5d, 0x78, 0x0d, 0x0b, 0x99, 0x9d, 0x98, 0xaa, 0x32, 0xef, 0x7e, 0x56, 0x33, 0xe4,
	0x06, 0x7a, 0x21, 0xcd, 0x1f, 0x62, 0xa7, 0x12, 0x7b, 0x6d, 0x92, 0x3d, 0x64, 0x00, 0xf4, 0xcb,
	0x9d, 0x31, 0xd4, 0x36, 0x7d, 0xad, 0xa8, 0x52, 0xe6, 0x2c, 0xbf, 0x4c, 0xc4, 0xf5, 0x10, 0x8a,
	0xe2, 0x45, 0x54, 0xc1, 0xd7, 0x2b, 0x42, 0xe7, 0xbf, 0x15, 0x61, 0x35, 0x0b, 0xbc, 0x2e, 0xc4,
	0xcb, 0x2a, 0x93, 0xf9, 0x34, 0xf6, 0xc2, 0xbc, 0x47, 0x3f, 0x8c, 0xbd, 0xc4, 0x53, 0x9e, 0x6d,
	0xa9, 0xfd, 0x11, 0x94, 0xc9, 0x2b, 0x58, 0x59, 0xda, 0xa3, 0x90, 0xee, 0xb1, 0xdb, 0x73, 0x55,
	0x28, 0xa8, 0xeb, 0x61, 0x15, 0xaa, 0x6e, 0x1c, 0x7f, 0xae, 0xe8, 0x50, 0x83, 0xc2, 0x17, 0x3b,
	0x5b, 0xaa, 0x4c, 0x42, 0x24, 0x97, 0x6a, 0xfd, 0x8e, 0xe5, 0x04, 0xd7, 0x6d, 0xce, 0xc8, 0x78,
	0xa2, 0x8d, 0xeb, 0x3c, 0x51, 0xdb, 0x5b, 0x6e, 0x66, 0xa8, 0xdf, 0x52, 0x76, 0xb1, 0x30, 0xe0,
	0x97, 0x32, 0x6a, 0xb3, 0x54, 0xdc, 0xc0, 0x1b, 0x05, 0xc9, 0x34, 0x92, 0xf6, 0x40, 0x7f, 0x7e,
	0x03, 0x4a, 0x93, 0xd3, 0x30, 0x09, 0xa5, 0xe2, 0x20, 0xa8, 0x51, 0xbe, 0xeb, 0xb6, 0x43, 0x8a,
	0xc8, 0xdd, 0xa0, 0xad, 0xbe, 0x38, 0xfa, 0x1c, 0x45, 0xaa, 0x62, 0xe7, 0x4e, 0x4f, 0xec, 0x69,
	0xee, 0x42, 0xad, 0x6f, 0x09, 0xd8, 0xd0, 0x7e, 0xf6, 0x29, 0xb4, 0xec, 0x30, 0xa6, 0xcf, 0xa3,
	0x8e, 0xbb, 0x50, 0x39, 0x64, 0x46, 0x89, 0x15, 0x4b, 0x5d, 0xc6, 0xad, 0x0d, 0x3a, 0x27, 0x73,
	0xd3, 0xfd, 0xf4, 0x03, 0xa3, 0x3e, 0xac, 0x2f, 0x62, 0x10, 0x2c, 0x03, 0x1e, 0x85, 0x13, 0xe5,
	0x6b, 0xe9, 0x28, 0x60, 0x3f, 0xdc, 0xf6, 0xe2, 0x64, 0x1a, 0x9d, 0xa8, 0x28, 0x00, 0xc7, 0x09,
	0xa4, 0x6e, 0xba, 0xae, 0x2a, 0xe7, 0xfc, 0x6e, 0x0e, 0xea, 0xda, 0x27, 0x17, 0x5a, 0xee, 0x1a,
	0x31, 0xc8, 0xe4, 0x73, 0x97, 0x97, 0x05, 0x2b, 0x29, 0x52, 0x22, 0xaf, 0x03, 0x1d, 0x7b, 0x15,
	0x4b, 0x2d, 0xca, 0x79, 0xd4, 0x24, 0x1f, 0x55, 0x28, 0x13, 0xa7, 0x38, 0x02, 0xab, 0xbc, 0xce,
	0xbf, 0xcb, 0x41, 0x5b, 0x2f, 0x05, 0x33, 0x58, 0xa9, 0x72, 0x54, 0x6e, 0xd9, 0xfc, 0xa5, 0xec,
	0x1c, 0xc0, 0x09, 0xe4, 0x7a, 0x0a, 0x56, 0x8b, 0x81, 0xf4, 0x32, 0xb5, 0xce, 0xdc, 0x9d, 0x0e,
	0xcf, 0xba, 0x4a, 0x67, 0x16, 0xda, 0xb7, 0xa1, 0x89, 0x2e, 0x8e, 0x79, 0x75, 0xc5, 0x98, 0xc3,
	0xc0, 0xed, 0x5a, 0x99, 0xd9, 0xf4, 0xee, 0xd0, 0xa1, 0x73, 0x7e, 0xbb, 0x08, 0x55, 0xbd, 0x81,
	0x25, 0x32, 0x4c, 0x96, 0xe3, 0x29, 0x04, 0x8e, 0x07, 0xae, 0xf6, 0x64, 0xda, 0x00, 0xf2, 0xb7,
	0x85, 0x70, 0x0d, 0x13, 0x68, 0x37, 0x21, 0xac, 0xb6, 0x29, 0x1a, 0xed, 0xd6, 0xfa, 0xcb, 0x29,
	0x98, 0xdd, 0x48, 0x21, 0xf0, 0xc6, 0x23, 0x39, 0xaa, 0x9a, 0x35, 0x21, 0xb0, 0x20, 0x6b, 0x55,
	0xb3, 0x0a, 0x28, 0xf2, 0xb5, 0xba, 0x05, 0x91, 0x53, 0x37, 0xd2, 0x0d, 0x28, 0x56, 0x0a, 0x56,
	0xa0, 0x24, 0xc6, 0x0c, 0x51, 0xa1, 0xfd, 0x21, 0x14, 0x77, 0xc3, 0x51, 0xdc, 0x59, 0x5d, 0xe8,
	0xd9, 0xdb, 0xcc, 0x6b, 0x4b, 0x3d, 0x9b, 0xf5, 0x59, 0x1c, 0xa3, 0xeb, 0xb0, 0x96, 0xf1, 0x99,
	0x2c, 0x47, 0xbb, 0x8d, 0x5f, 0x30, 0xa9, 0x53, 0xe9, 0xac, 0xdc, 0x51, 0x89, 0x4d, 0x16, 0xb9,
	0x52, 0xd9, 0x58, 0xae, 0x33, 0x65, 0xc8, 0x6f, 0x91, 0xe6, 0x13, 0x3c, 0xd1, 0x73, 0xd1, 0x76,
	0x17, 0xda, 0xdf, 0x81, 0x7a, 0x9f, 0xcd, 0xe4, 0x18, 0xe1, 0x6d, 0xdc, 0x41, 0x65, 0x9a, 0x5d,
	0xb3, 0x3d, 0x84, 0xa6, 0x56, 0xbc, 0xde, 0x21, 0x6c, 0xeb, 0x7c, 0x2f, 0xe6, 0x84, 0x9d, 0x3f,
	0xc8, 0x43, 0x83, 0x2a, 0x1b, 0x88, 0xce, 0x25, 0xec, 0x95, 0x62, 0x11, 0x2d, 0xa3, 0x19, 0x77,
	0xa2, 0x06, 0x05, 0xb1, 0xe5, 0xa2, 0xb6, 0xf0, 0x62, 0xbb, 0xa5, 0x54, 0x29, 0x64, 0x25, 0x4b,
	0xe9, 0xf2, 0x02, 0x4a, 0x57, 0xd2, 0x45, 0x5c, 0x99, 0x85, 0xcc, 0x90, 0x00, 0x32, 0x9e, 0x0d,
	0x86, 0xf6, 0x86, 0x4d, 0x6e, 0x43, 0x19, 0xa3, 0x75, 0x26, 0xb9, 0xa4, 0xb4, 0x00, 0xdf, 0xd2,
	0x9f, 0xcd, 0xe2, 0xb7, 0xb9, 0x34, 0x7e, 0xed, 0x84, 0x39, 0xb6, 0x69, 0x38, 0xbf, 0x9a, 0x4f,
	0x4f, 0xb6, 0x20, 0xdc, 0xc3, 0x56, 0x90, 0xd0, 0x9d, 0x0e, 0x79, 0xba, 0x49, 0x42, 0x95, 0x04,
	0x0a, 0xba, 0x3d, 0x85, 0xcd, 0x54, 0xe7, 0x52, 0xaa, 0x84, 0x50, 0x32, 0xcd, 0x4d, 0xb3, 0x01,
	0x0f, 0x86, 0x54, 0xe9, 0x30, 0xfc, 0x56, 0x5e, 0x94, 0xaa, 0xaf, 0x2c, 0x90, 0xc2, 0x6a, 0x36,
	0x2f, 0x0f, 0x8b, 0xf2, 0xf2, 0x35, 0xed, 0x4e, 0xb3, 0x19, 0x16, 0xcf, 0x42, 0x15, 0x15, 0xac,
	0x6b, 0x72, 0xe0, 0xc2, 0x1a, 0xba, 0xa2, 0x35, 0x91, 0xe9, 0x7b, 0x14, 0x3d, 0xe7, 0x11, 0x34,
	0x09, 0x21, 0x87, 0x3c, 0x9e, 0xfa, 0x89, 0x34, 0x40, 0xe2, 0x2f, 0x65, 0x56, 0xe4, 0xe6, 0x94,
	0x23, 0x2d, 0x90, 0xf8, 0x3b, 0x25, 0x58, 0x95, 0x48, 0xfb, 0x8c, 0xf3, 0x89, 0xea, 0x07, 0xfb,
	0xd9, 0x14, 0x7f, 0xb8, 0x57, 0xb1, 0xa8, 0x88, 0x2d, 0x42, 0x97, 0xcd, 0xa8, 0xe7, 0x41, 0x76,
	0xa9, 0xa0, 0xed, 0xe0, 0x97, 0x89, 0x98, 0x4f, 0xa9, 0x3b, 0xe1, 0x3f, 0x9e, 0x46, 0x9c, 0x23,
	0x48, 0x77, 0x8c, 0xed, 0x84, 0x53, 0xfc, 0xa8, 0xa9, 0x97, 0xed, 0x78, 0xe7, 0x72, 0x4c, 0x89,
	0xf6, 0x37, 0xf0, 0x2e, 0x11, 0xb0, 0x42, 0xf3, 0x0c, 0xf8, 0x39, 0x0f, 0x10, 0x54, 0x26, 0xd0,
	0x53, 0x6f, 0x74, 0x2a, 0xbf, 0xa6, 0x55, 0xdd, 0xbe, 0x17, 0xc8, 0x89, 0x34, 0xda, 0x8f, 0xd4,
	0x5b, 0xa0, 0x9b, 0xfc, 0x7c, 0x3d, 0x53, 0x8d, 0x60, 0x47, 0x17, 0xdc, 0x57, 0x2b, 0xa8, 0xeb,
	0x72, 0xe4, 0xa9, 0x17, 0x25, 0x5c, 0x8d, 0x6c, 0x10, 0x54, 0xac, 0x5d, 0x43, 0x9b, 0xc4, 0x04,
	0x3b, 0xde, 0x6b, 0x0d, 0x6c, 0x11, 0x70, 0xe0, 0x5d, 0x6a, 0xe0, 0xaa, 0x69, 0xfb, 0x3b, 0xe7,
	0x81, 0x06, 0xaf, 0xd1, 0xb4, 0xb8, 0x15, 0x82, 0xb6, 0x09, 0x2a, 0x76, 0xa3, 0xa1, 0xeb, 0xd6,
	0x62, 0x83, 0x64, 0x86, 0xb0, 0x0d, 0x9a, 0x56, 0xc2, 0x0e, 0xd4, 0xe6, 0x6f, 0xa5, 0xc1, 0x47,
	0x17, 0x21, 0x82, 0x6f, 0x2b, 0x1d, 0xd9, 0x52, 0x60, 0x4d, 0x99, 0x3b, 0xd4, 0x72, 0x27, 0x1f,
	0x68, 0xfa, 0x74, 0x32, 0x70, 0xa2, 0xd2, 0x5b, 0xe9, 0xf9, 0x89, 0x56, 0x77, 0xd3, 0xf3, 0x1b,
	0x8a, 0xdd, 0x4b, 0x3f, 0x30, 0x74, 0x7b, 0x3b, 0xfd, 0x01, 0x4d, 0xbd, 0x77, 0xf4, 0x5e, 0x05,
	0x11, 0x66, 0x67, 0x02, 0xf6, 0x2e, 0x72, 0xfa, 0x7f, 0x29, 0x40, 0x5b, 0xb2, 0xed, 0x41, 0xe0,
	0x7b, 0x01, 0xbf, 0x19, 0xe3, 0x36, 0x61, 0xa5, 0xeb, 0x87, 0xc3, 0xb3, 0x0f, 0x95, 0x9a, 0xa0,
	0xdf, 0x8f, 0x4c, 0xa2, 0x01, 0x7f, 0x3f, 0x56, 0x9a, 0x96, 0x7e, 0x7f, 0x64, 0xdc, 0x3a, 0xfc,
	0xfd, 0xb1, 0xa9, 0xff, 0xe0, 0xef, 0x27, 0x4a, 0xe1, 0xd2, 0xef, 0x4f, 0x94, 0x41, 0xa6, 0xdf,
	0x9f, 0x9a, 0x54, 0x10, 0xfe, 0xfe, 0x8e, 0x32, 0xc5, 0xf4, 0xfb, 0xbb, 0x56, 0xed, 0x1a, 0xd7,
	0xf3, 0xa1, 0xe9, 0x64, 0x94, 0x80, 0x47, 0xa6, 0x93, 0x51, 0x02, 0x1e, 0xab, 0x4e, 0x07, 0x0d,
	0xf8, 0x48, 0xa5, 0x09, 0x34, 0xe0, 0x63, 0x95, 0xea, 0xd1, 0x80, 0x27, 0xaa, 0x7b, 0x4a, 0x03,
	0x3e, 0x31, 0x09, 0x1e, 0x09, 0xf8, 0x54, 0x05, 0x79, 0x1a, 0xf0, 0x1d, 0x55, 0x29, 0xd5, 0x80,
	0xef, 0x9a, 0xba, 0x8a, 0xc4, 0xd4, 0x87, 0xaa, 0xae, 0xa2, 0x01, 0x8f, 0x94, 0x45, 0xd5, 0x80,
	0xc7, 0xc8, 0x5f, 0x16, 0xe0, 0x23, 0x64, 0xac, 0x82, 0xf3, 0x1b, 0x05, 0x68, 0x6e, 0x0e, 0x13,
	0xef, 0xdc, 0x4b, 0x66, 0x37, 0xa3, 0xe3, 0x1d, 0x68, 0xed, 0x4c, 0x29, 0xf1, 0xd6, 0xd5, 0x2d,
	0x6d, 0x58, 0x6c, 0xdb, 0xe7, 0x17, 0x5b, 0x1e, 0x39, 0x71, 0xd4, 0xa0, 0xd1, 0xdc, 0xe7, 0x17,
	0x32, 0xdd, 0x6d, 0xd2, 0x8f, 0x04, 0xb7, 0x67, 0x29, 0x6a, 0xeb, 0x61, 0x01, 0x4b, 0x2a, 0x0c,
	0x6b, 0x09, 0x8f, 0xc1, 0x7e, 0xa0, 0x3d, 0xb1, 0x81, 0xb0, 0x62, 0x62, 0xc9, 0xb1, 0x22, 0xbc,
	0xe0, 0x75, 0x16, 0x9f, 0x0d, 0x7e, 0x34, 0x65, 0x91, 0xd5, 0xd7, 0x5a, 0x68, 0x77, 0x60, 0x55,
	0x3c, 0x50, 0xce, 0x8f, 0x31, 0x11, 0xd2, 0x6c, 0x88, 0x57, 0xbc, 0x51, 0xd0, 0x0b, 0x4c, 0x6f,
	0x2b, 0xc2, 0xc4, 0xf4, 0x8a, 0x23, 0x04, 0xcb, 0xb0, 0xc8, 0x7d, 0xce, 0x2d, 0xb7, 0x8c, 0x45,
	0xee, 0x3e, 0x15, 0xfd, 0x34, 0x64, 0x8f, 0x07, 0x23, 0xc5, 0x12, 0xea, 0x9d, 0x17, 0x53, 0xc5,
	0x11, 0xea, 0xf7, 0xee, 0xb9, 0x62, 0x08, 0xf5, 0xc6, 0xe7, 0x62, 0x0e, 0xe4, 0x08, 0xe7, 0x7f,
	0xe6, 0x61, 0xad, 0x1b, 0x7a, 0x81, 0x34, 0xa2, 0x89, 0xa2, 0xce, 0x35, 0x2e, 0x7a, 0xda, 0xbb,
	0xc8, 0xeb, 0xba, 0xb5, 0x9c, 0x43, 0xbb, 0x2f, 0x77, 0xc9, 0x36, 0x27, 0xa6, 0x69, 0xc2, 0x76,
	0x00, 0xe5, 0x33, 0x53, 0xbf, 0xb1, 0x52, 0x6a, 0x4f, 0x5f, 0xbf, 0xe6, 0x82, 0x61, 0x4c, 0x07,
	0x5d, 0xc9, 0x8a, 0x3b, 0xb7, 0xa6, 0xb3, 0xfd, 0xe9, 0xd8, 0xb4, 0x54, 0x6c, 0x4d, 0x67, 0x36,
	0xea, 0x5b, 0x50, 0x7e, 0xe6, 0x9d, 0x73, 0x31, 0xa4, 0xaa, 0x5b, 0x7b, 0xbd, 0x73, 0x45, 0x1e,
	0x20, 0xca, 0x63, 0x8b, 0xb4, 0x1a, 0x57, 0xa3, 0x40, 0x83, 0x80, 0x5d, 0x9d, 0x7d, 0x45, 0x82,
	0x6d, 0x0e, 0x13, 0x1a, 0xaa, 0xfb, 0x8a, 0x15, 0x4c, 0x8e, 0xd4, 0x22, 0x29, 0xbc, 0xb2, 0xc1,
	0x74, 0x6c, 0x89, 0x64, 0xe8, 0x05, 0x02, 0x80, 0x14, 0x70, 0x4e, 0xa1, 0x21, 0xf5, 0x99, 0xd8,
	0xd8, 0x12, 0xd1, 0xdc, 0x7c, 0x34, 0x94, 0x46, 0xbe, 0x8e, 0x2e, 0xcc, 0xac, 0x92, 0xb7, 0x9d,
	0x7f, 0x96, 0x23, 0x05, 0x8a, 0xa2, 0xb7, 0x58, 0x81, 0xe6, 0xde, 0x60, 0xf9, 0xc9, 0xe8, 0xdb,
	0x02, 0x96, 0x6e, 0xd2, 0x2d, 0x10, 0xd6, 0x06, 0xd3, 0x71, 0xf6, 0xfb, 0x98, 0x32, 0x3f, 0xe7,
	0x16, 0x18, 0xa5, 0xcb, 0xf9, 0x0f, 0x05, 0xd8, 0x90, 0xcb, 0xda, 0xe2, 0xa7, 0xec, 0xdc, 0x0b,
	0xa3, 0x9b, 0x2d, 0x6c, 0x03, 0xea, 0xc2, 0x6b, 0xde, 0x8b, 0x47, 0xf6, 0xba, 0xee, 0x43, 0x47,
	0x40, 0x0f, 0xb9, 0x3b, 0xc1, 0x50, 0x63, 0x5e, 0xaa, 0xef, 0x42, 0x3b, 0x35, 0xc2, 0x16, 0xec,
	0xec, 0x33, 0x3b, 0xd4, 0x7a, 0x0f, 0xee, 0x1c, 0x86, 0x27, 0x0b, 0x27, 0x06, 0xaa, 0x64, 0xd9,
	0x03, 0x4c, 0xfb, 0xf2, 0xdc, 0x23, 0x3b, 0xc8, 0xba, 0x07, 0xeb, 0x14, 0x2c, 0xd8, 0x53, 0xb6,
	0x08, 0x75, 0xf4, 0xd0, 0xb4, 0xa3, 0xa7, 0xc0, 0x72, 0xaa, 0x35, 0x1d, 0xe4, 0x9e, 0x86, 0x13,
	0x74, 0x0a, 0xe5, 0xf0, 0x8d, 0x39, 0xb8, 0x1c, 0x7f, 0x8b, 0x58, 0xff, 0x20, 0xe0, 0xdb, 0x1e,
	0xf3, 0xc3, 0xd1, 0x94, 0x9b, 0x8e, 0x16, 0x54, 0xa6, 0x22, 0xc2, 0xb8, 0x6b, 0x85, 0x0b, 0x51,
	0x82, 0x46, 0x1d, 0x7f, 0x1e, 0xf2, 0x89, 0x3f, 0x43, 0x53, 0x5e, 0x70, 0xfe, 0x6b, 0x0e, 0xda,
	0xbd, 0xe0, 0x60, 0x9a, 0x74, 0x59, 0x7c, 0x3a, 0x98, 0x8e, 0x6f, 0x46, 0x44, 0xfb, 0x74, 0x80,
	0x0e, 0x7e, 0x8e, 0xbd, 0xe4, 0xd4, 0x8d, 0xd8, 0x85, 0x62, 0xab, 0x35, 0x8c, 0xbd, 0xa7, 0x81,
	0xcb, 0xb4, 0xba, 0xb6, 0x8e, 0x10, 0x48, 0x1d, 0x5c, 0x5a, 0x7c, 0xb2, 0x60, 0x85, 0xc0, 0x34,
	0xa5, 0xad, 0xb1, 0x2d, 0xb0, 0xa5, 0x34, 0x9c, 0x3f, 0xce, 0xc3, 0x3a, 0x71, 0x3c, 0xb2, 0xf8,
	0xcd, 0x76, 0x84, 0x59, 0x97, 0xd1, 0x60, 0x3a, 0xce, 0x48, 0xcb, 0xf1, 0xe5, 0x21, 0x1f, 0x65,
	0xa4, 0x05, 0x53, 0x83, 0x1a, 0x5c, 0x24, 0x73, 0xf1, 0x8a, 0xf9, 0x9e, 0x6b, 0x4f, 0xa2, 0xcd,
	0x11, 0x3e, 0xb1, 0x66, 0xd2, 0x5c, 0x8b, 0x0f, 0xd2, 0xd3, 0xe9, 0x4d, 0xe2, 0x26, 0xf4, 0x5c,
	0xa0, 0x4d, 0x1b, 0x35, 0xeb, 0xc6, 0x36, 0xa7, 0x22, 0x0a, 0x65, 0xff, 0x57, 0xd7, 0xea, 0xa5,
	0xba, 0x05, 0x0d, 0x0a, 0xb3, 0x25, 0x58, 0x3b, 0x09, 0xfd, 0x73, 0x9b, 0xd5, 0x5a, 0x50, 0x7e,
	0xa9, 0x00, 0xba, 0xf9, 0x62, 0x97, 0x9d, 0x70, 0x15, 0x1a, 0xa1, 0x9f, 0xe0, 0xfc, 0xfb, 0x3c,
	0xdc, 0x96, 0xc9, 0x36, 0x2f, 0x0c, 0x54, 0x7a, 0x72, 0x39, 0x7b, 0xb3, 0x06, 0x55, 0x35, 0x7e,
	0x5f, 0x45, 0x35, 0x56, 0xdb, 0x19, 0xda, 0x8f, 0x82, 0x06, 0x86, 0x21, 0x7d, 0x42, 0x45, 0x1d,
	0x69, 0x7d, 0x59, 0x32, 0xa9, 0xa3, 0x51, 0x86, 0x59, 0x08, 0xff, 0x99, 0xac, 0x90, 0xa5, 0xef,
	0x2a, 0x24, 0x3f, 0x9b, 0xc3, 0x64, 0x9b, 0x9f, 0xdb, 0x46, 0x9d, 0xe8, 0x67, 0x3f, 0x01, 0x9a,
	0x79, 0x3b, 0xbc, 0x08, 0x76, 0x43, 0xe6, 0xda, 0x18, 0xb7, 0x50, 0x56, 0xd7, 0xdd, 0x4f, 0xa8,
	0x2c, 0x07, 0xda, 0xc8, 0xd8, 0x71, 0x56, 0x53, 0xb7, 0x6f, 0x5e, 0x85, 0xba, 0xc2, 0x5f, 0x0b,
	0xea, 0xcc, 0xdb, 0xdd, 0x30, 0x4e, 0xec, 0x56, 0x8a, 0x04, 0x01, 0xda, 0xe2, 0x2a, 0xbc, 0xc5,
	0x89, 0x71, 0x79, 0x11, 0xb9, 0x71, 0x62, 0xaa, 0x98, 0x87, 0x07, 0x3d, 0xdc, 0x7d, 0x4e, 0x7c,
	0xea, 0x90, 0x8f, 0x0e, 0x43, 0xef, 0x90, 0xa9, 0xd2, 0x58, 0x4e, 0x6c, 0x1f, 0x43, 0x56, 0xca,
	0x3c, 0xe5, 0x9c, 0xdf, 0xcd, 0x41, 0x63, 0x33, 0x4a, 0xbc, 0xa1, 0xcf, 0x97, 0xdb, 0xbe, 0x2e,
	0x6a, 0xe5, 0x75, 0x8d, 0x0b, 0xfb, 0x49, 0x0b, 0xa6, 0xa4, 0xb2, 0xc7, 0xbc, 0x37, 0xed, 0xb7,
	0x0d, 0xf0, 0x72, 0xe2, 0x12, 0x4c, 0x3b, 0x82, 0xfd, 0x69, 0x7c, 0x2a, 0x15, 0xb7, 0x1d, 0x01,
	0x78, 0xc3, 0xb3, 0xd8, 0x64, 0x5b, 0xbe, 0x3f, 0x1d, 0x4f, 0x62, 0x89, 0x10, 0xe7, 0x7f, 0xe4,
	0xa0, 0x2e, 0x9d, 0xc4, 0x9b, 0xe9, 0x95, 0xdb, 0xd0, 0x94, 0x9f, 0x19, 0x4c, 0x4f, 0x32, 0x9e,
	0xae, 0x94, 0x25, 0x0d, 0xd7, 0x9e, 0xae, 0x1c, 0xbf, 0x4d, 0xc2, 0x57, 0x24, 0x53, 0xa4, 0x8f,
	0x89, 0xe8, 0x47, 0x5a, 0x18, 0xbe, 0x60, 0x41, 0xc6, 0xd1, 0xdd, 0x8a, 0x35, 0x4c, 0x4b, 0x02,
	0x19, 0xaa, 0xf1, 0xd8, 0x24, 0x40, 0xe4, 0x22, 0x10, 0x26, 0x37, 0xfa, 0x2b, 0x39, 0xb8, 0xa3,
	0xd2, 0x77, 0xe1, 0x68, 0x37, 0x1c, 0x22, 0x3f, 0x2d, 0x27, 0xe6, 0x2d, 0x28, 0x6f, 0xb3, 0x99,
	0xe5, 0x53, 0xda, 0xd5, 0x19, 0x93, 0xc9, 0xf1, 0xf8, 0xd0, 0xca, 0xa0, 0x6e, 0xf3, 0x73, 0x2f,
	0xd5, 0x5e, 0xad, 0x3b, 0x0f, 0x70, 0x2f, 0xce, 0x14, 0xea, 0x87, 0x7c, 0xc8, 0x7c, 0xff, 0x66,
	0x78, 0x07, 0xc8, 0xf7, 0xcf, 0xd5, 0x32, 0x00, 0xf2, 0x2f, 0xcf, 0x8d, 0x55, 0x12, 0xd2, 0x9c,
	0x09, 0x22, 0xe4, 0x17, 0x2c, 0xa4, 0x3a, 0xaf, 0xa0, 0x4e, 0x9b, 0xc7, 0xda, 0xd5, 0x7c, 0xe6,
	0xaa, 0x0a, 0xb9, 0xcf, 0xf1, 0x03, 0x39, 0xf1, 0xe7, 0x0f, 0x70, 0x7e, 0xe4, 0xf9, 0x7e, 0x14,
	0x9e, 0x7b, 0x81, 0xde, 0xa3, 0xac, 0xec, 0xcd, 0x54, 0x7d, 0x61, 0x1b, 0x5a, 0x9b, 0xbe, 0x6f,
	0x4d, 0xcd, 0xdb, 0x8f, 0xd2, 0x9f, 0x52, 0xad, 0x1c, 0xd9, 0x8c, 0x9b, 0x3d, 0xc4, 0xf9, 0xd5,
	0x1c, 0xd4, 0x9f, 0xf1, 0x80, 0x47, 0xcc, 0x7f, 0x31, 0x0d, 0x53, 0xa5, 0xb5, 0x85, 0x27, 0x30,
	0x6a, 0x50, 0xd8, 0xf3, 0x02, 0x73, 0x2e, 0x70, 0x8f, 0x5d, 0x2a, 0x7c, 0x00, 0xe4, 0x5f, 0x3c,
	0x52, 0x02, 0x2d, 0xfe, 0x7e, 0xac, 0xb4, 0x99, 0xf8, 0xfb, 0x23, 0xa5, 0xc6, 0xc4, 0xdf, 0x1f,
	0x2b, 0x0f, 0x59, 0xfc, 0xfd, 0xc4, 0x1c, 0xf4, 0x79, 0xf1, 0x89, 0xf2, 0x8b, 0x3f, 0xd1, 0x39,
	0xb9, 0x1b, 0x9d, 0x87, 0x72, 0x3e, 0x95, 0xa9, 0xbb, 0x21, 0x0f, 0x6e, 0xf8, 0xe2, 0x2f, 0xe7,
	0x30, 0x95, 0x36, 0xe6, 0x41, 0x42, 0x45, 0x9a, 0x6b, 0xde, 0x6f, 0x41, 0x79, 0x87, 0x73, 0xd4,
	0x46, 0xf9, 0x54, 0xe7, 0x45, 0x21, 0x7d, 0xf0, 0xab, 0xa8, 0x33, 0x86, 0x56, 0xcb, 0x6b, 0x29,
	0xdb, 0xf2, 0x2a, 0xb9, 0xf3, 0xc7, 0x39, 0x68, 0xa9, 0x55, 0xd0, 0xe8, 0x9b, 0x9d, 0x07, 0x5b,
	0x83, 0x2a, 0xf5, 0xe5, 0xc7, 0xa6, 0x97, 0x75, 0x73, 0xe2, 0x3d, 0x17, 0x8a, 0xb6, 0xa8, 0xb3,
	0x8d, 0xd3, 0x13, 0xa1, 0x9c, 0xf8, 0xcc, 0x74, 0x77, 0xf7, 0x23, 0xef, 0x9c, 0x25, 0xfc, 0x4c,
	0x15, 0x45, 0xaa, 0x52, 0x05, 0x27, 0xd1, 0x34, 0x10, 0x8a, 0x42, 0x9d, 0x51, 0xfa, 0xdf, 0x79,
	0x68, 0xd1, 0xc2, 0xa8, 0xb8, 0x78, 0xa3, 0xf5, 0x69, 0xac, 0x14, 0xac, 0x7e, 0x1c, 0x9c, 0x4e,
	0xa7, 0x63, 0x65, 0x8f, 0x2f, 0xc2, 0xe6, 0x63, 0x41, 0x99, 0x88, 0x15, 0xcc, 0xa7, 0x13, 0x2f,
	0xe2, 0x37, 0xbb, 0x54, 0x6a, 0x49, 0x66, 0x52, 0xc5, 0x27, 0x54, 0x5a, 0x96, 0x12, 0xdb, 0xfa,
	0x70, 0x45, 0x35, 0x73, 0x52, 0x23, 0x4d, 0x74, 0xd5, 0xed, 0x57, 0x6a, 0x7f, 0x0d, 0xda, 0xe9,
	0x27, 0xf8, 0x72, 0xb6, 0x99, 0x03, 0xfb, 0xe0, 0xc6, 0x96, 0xd5, 0x6e, 0x41, 0xf9, 0x98, 0x7b,
	0xa3, 0xd3, 0x84, 0xda, 0x71, 0x4c, 0xa5, 0xb5, 0x69, 0x9d, 0x24, 0x40, 0x06, 0xed, 0xb9, 0x2a,
	0x67, 0x78, 0x0f, 0xd3, 0xda, 0x08, 0x9b, 0x6b, 0xcb, 0x71, 0xfe, 0x55, 0x1e, 0x9a, 0x9b, 0x93,
	0x89, 0x30, 0x30, 0xd4, 0x98, 0x72, 0x0d, 0xc6, 0x55, 0x35, 0x4b, 0x26, 0xf7, 0xf3, 0x94, 0x21,
	0xd5, 0xbd, 0x3d, 0x85, 0x05, 0x61, 0x63, 0xd1, 0xb8, 0xd8, 0x43, 0x6f, 0xe2, 0x51, 0x97, 0x81,
	0x65, 0x21, 0x81, 0x78, 0x89, 0xd2, 0xd9, 0x35, 0xdd, 0xe7, 0x4e, 0x05, 0xd3, 0x7a, 0xa6, 0xb4,
	0xdc, 0xa0, 0x0d, 0x0b, 0xc3, 0x77, 0x70, 0xf2, 0x43, 0x3e, 0x4c, 0xd4, 0x86, 0x5b, 0x50, 0x16,
	0x30, 0xd3, 0x9d, 0xd2, 0x80, 0x12, 0xfa, 0x87, 0x9d, 0x35, 0x3c, 0xc2, 0x27, 0xe2, 0xe6, 0x88,
	0x9d, 0x1c, 0xb1, 0x11, 0xd6, 0x7b, 0x64, 0xa5, 0x75, 0x1a, 0x27, 0xe1, 0x58, 0x80, 0xe4, 0x31,
	0x3f, 0xf1, 0x65, 0x9c, 0xb3, 0x27, 0x4b, 0x3e, 0x05, 0xe7, 0x17, 0xa1, 0xf2, 0x9c, 0xfb, 0x93,
	0x25, 0x95, 0x46, 0xba, 0xb7, 0xd4, 0x76, 0x03, 0xea, 0x50, 0x1c, 0x84, 0x51, 0x62, 0xb2, 0xd4,
	0x07, 0x93, 0x84, 0xb9, 0x63, 0x2f, 0x30, 0xc2, 0x92, 0x75, 0x01, 0x9c, 0xdf, 0xcc, 0x41, 0x59,
	0x7c, 0x7c, 0x2f, 0xbe, 0x56, 0x6f, 0xbc, 0xd9, 0x07, 0xc1, 0xae, 0xaa, 0xe7, 0x61, 0x62, 0xda,
	0x3a, 0xaf, 0xff, 0xba, 0x5e, 0x71, 0x39, 0x5b, 0x73, 0x90, 0xc7, 0xeb, 0xfe, 0x69, 0x01, 0xa5,
	0x56, 0x1a, 0xeb, 0x89, 0xcf, 0xbc, 0x20, 0xb9, 0x79, 0x9e, 0x01, 0x8f, 0x3a, 0xc6, 0x93, 0x30,
	0x70, 0x79, 0x60, 0x72, 0x3a, 0x8b, 0xd8, 0x48, 0x6f, 0xb0, 0x44, 0x6a, 0xd1, 0x3a, 0x33, 0x32,
	0x57, 0x10, 0xb1, 0x39, 0x48, 0x57, 0x43, 0x0e, 0x39, 0x0d, 0x5a, 0xcc, 0x54, 0x58, 0xe5, 0xb0,
	0xda, 0x47, 0x57, 0xa1, 0x12, 0x8a, 0xb8, 0xf6, 0x4b, 0xcf, 0x35, 0x99, 0x96, 0x67, 0x61, 0xe8,
	0xc6, 0x3d, 0x57, 0x45, 0xcb, 0x1b, 0x74, 0x74, 0x60, 0x53, 0x76, 0x1d, 0x60, 0x8d, 0x51, 0x28,
	0x00, 0xb3, 0x2b, 0xf5, 0xa4, 0x4d, 0x5c, 0x80, 0x2c, 0xb2, 0x8e, 0x27, 0x7e, 0x4d, 0x5d, 0x7f,
	0x23, 0xa5, 0xeb, 0x6f, 0xa5, 0xcf, 0x3b, 0xdf, 0xa6, 0x0d, 0x98, 0x0e, 0x6c, 0x9d, 0x03, 0xc5,
	0x5e, 0xee, 0x9e, 0xab, 0x72, 0xa0, 0x1c, 0x5a, 0xfb, 0x9c, 0x45, 0x5b, 0xb3, 0x67, 0x11, 0xe7,
	0xb2, 0x01, 0xf3, 0x67, 0xb2, 0x3e, 0xc1, 0x22, 0xc2, 0x3c, 0x04, 0x90, 0xef, 0x59, 0xbd, 0x51,
	0xd9, 0x8e, 0x7c, 0x33, 0xc0, 0xf9, 0x7b, 0xf6, 0xf0, 0x8c, 0xd7, 0x91, 0x4f, 0x57, 0x0a, 0xf3,
	0x86, 0xff, 0x74, 0xb7, 0x41, 0xa6, 0x09, 0xc9, 0xf4, 0x1c, 0xc9, 0xf6, 0xcb, 0x3f, 0x16, 0x5e,
	0xec, 0x2c, 0x4e, 0xf8, 0x58, 0xf6, 0x9f, 0x09, 0xae, 0xf2, 0xde, 0xdc, 0x8b, 0x30, 0x44, 0x6e,
	0xf9, 0x32, 0x31, 0x5e, 0x5d, 0x03, 0x4a, 0x89, 0x25, 0x00, 0x2d, 0x28, 0x0f, 0xd5, 0x8a, 0xb4,
	0xb9, 0x9a, 0xc6, 0x3c, 0xfa, 0x32, 0x31, 0x3e, 0x5d, 0x1d, 0x8a, 0x49, 0xea, 0x18, 0x12, 0x12,
	0x4e, 0x8e, 0x28, 0x93, 0x54, 0xc5, 0xa8, 0xff, 0x74, 0x85, 0x28, 0x24, 0x26, 0xab, 0xd2, 0xac,
	0xdc, 0xf5, 0x12, 0xb9, 0x10, 0x7d, 0x82, 0x2e, 0xe6, 0x81, 0xfb, 0x65, 0x6c, 0x2e, 0x57, 0x70,
	0x7e, 0x3b, 0x0f, 0xd5, 0xcd, 0x38, 0xf6, 0xe2, 0x84, 0x49, 0xa1, 0xf1, 0xde, 0xd0, 0xe2, 0xb4,
	0x06, 0xd5, 0x09, 0xa2, 0x57, 0xb0, 0x61, 0x1e, 0xf1, 0x9b, 0xd9, 0x71, 0x01, 0x81, 0xb4, 0xfc,
	0xe2, 0xfd, 0xbc, 0xf4, 0x0c, 0x5e, 0x63, 0x8b, 0xb6, 0xbd, 0xc3, 0x55, 0xa8, 0x04, 0xde, 0xf0,
	0x2c, 0x30, 0x67, 0xea, 0x9b, 0xb0, 0xc2, 0xce, 0x59, 0xc2, 0xd4, 0x71, 0x61, 0x81, 0x27, 0xa6,
	0x1a, 0x68, 0x2a, 0x44, 0xb9, 0x09, 0x32, 0x61, 0x35, 0x8b, 0x47, 0xa0, 0xe7, 0x12, 0xcf, 0x35,
	0x3a, 0x62, 0xa7, 0x9b, 0xc3, 0x51, 0x3e, 0xeb, 0xba, 0xe2, 0xe6, 0x8d, 0x02, 0x86, 0x6d, 0x3f,
	0x0d, 0x8b, 0xbb, 0x93, 0x10, 0xcf, 0x8a, 0x60, 0x1b, 0x4f, 0x5f, 0x8b, 0x59, 0xcd, 0x6a, 0x1c,
	0x72, 0xfe, 0xa2, 0x82, 0xec, 0xd0, 0x67, 0x11, 0x1b, 0xf3, 0x24, 0x75, 0xef, 0x40, 0xf5, 0x8a,
	0x60, 0x86, 0x12, 0x58, 0x07, 0x01, 0x17, 0x46, 0x3c, 0x4f, 0xc1, 0x89, 0x05, 0xdf, 0x96, 0xf6,
	0x5d, 0xeb, 0x9b, 0x5e, 0x4c, 0x0f, 0x95, 0x8e, 0x54, 0xfd, 0xf3, 0xd4, 0xa6, 0x5e, 0x32, 0x27,
	0xb3, 0x15, 0xc8, 0xb8, 0x0b, 0x29, 0xa8, 0x76, 0x1a, 0x3a, 0xb0, 0x7a, 0xc4, 0xd9, 0x58, 0x3f,
	0xd9, 0x9f, 0x8e, 0xcd, 0xc5, 0x1c, 0x78, 0x80, 0x45, 0xa6, 0xa6, 0x80, 0x3e, 0x47, 0x90, 0x3d,
	0x7d, 0xd2, 0xd2, 0x06, 0xb2, 0x4b, 0xe5, 0x0c, 0x6c, 0x40, 0xbd, 0x17, 0x53, 0x72, 0x89, 0xf9,
	0xa6, 0x9f, 0xdd, 0xc0, 0xc4, 0x0c, 0xab, 0xd9, 0x3c, 0x14, 0xf3, 0xc5, 0x1c, 0x6b, 0x24, 0x72,
	0x07, 0xd3, 0x64, 0x30, 0x1d, 0xab, 0x14, 0x8c, 0x50, 0x97, 0xd3, 0x44, 0x26, 0xb0, 0xd6, 0xc9,
	0xb3, 0x3c, 0xf4, 0xe2, 0x33, 0x21, 0xc6, 0x51, 0xe8, 0xab, 0x0c, 0x0c, 0xf6, 0xf9, 0xbf, 0x38,
	0x1c, 0x86, 0x2e, 0x57, 0x0d, 0x57, 0x78, 0xa0, 0x6e, 0xe2, 0x45, 0xdc, 0xdd, 0x66, 0x33, 0x55,
	0x12, 0xdc, 0x80, 0xfa, 0x9e, 0x64, 0x2a, 0x19, 0xab, 0xbc, 0x4b, 0xd0, 0x63, 0x1b, 0xfa, 0x9e,
	0x3e, 0x4e, 0x10, 0x24, 0x3c, 0xe2, 0x31, 0xe2, 0xf3, 0xc1, 0x1c, 0x90, 0x5d, 0xe2, 0xe9, 0xae,
	0x92, 0x0a, 0x20, 0xe5, 0xbd, 0x1c, 0x8f, 0x75, 0xa3, 0x54, 0xe8, 0x29, 0xd0, 0x47, 0xf4, 0x91,
	0x2e, 0x1e, 0x0b, 0x4a, 0x24, 0xf4, 0x63, 0x7a, 0xf5, 0x79, 0xa8, 0x20, 0x4f, 0xe8, 0xd5, 0x6d,
	0x36, 0x16, 0x41, 0xbf, 0x17, 0x76, 0x3e, 0xa1, 0x7a, 0xa2, 0x7a, 0x55, 0x8f, 0xfd, 0x3b, 0xf3,
	0x0f, 0xe4, 0xda, 0x37, 0x55, 0xeb, 0x6f, 0xeb, 0x88, 0x5f, 0x26, 0x7b, 0xa1, 0xab, 0x12, 0x1a,
	0x71, 0xe7, 0x9b, 0xa8, 0x39, 0x6f, 0x67, 0x34, 0xa7, 0xf2, 0x3a, 0xda, 0x1f, 0xc2, 0x6a, 0x6f,
	0xcc, 0x46, 0xdc, 0x7e, 0xe3, 0x5b, 0x6f, 0x7c, 0x03, 0x39, 0xcb, 0xe4, 0x22, 0x3b, 0x9f, 0x2e,
	0xce, 0x50, 0x7e, 0x87, 0x18, 0x8e, 0xc0, 0x78, 0x29, 0x8b, 0xd0, 0x37, 0xdf, 0x35, 0x0c, 0x6a,
	0x9e, 0x74, 0xbe, 0x47, 0x51, 0xbc, 0xe1, 0x0d, 0x9c, 0xfe, 0x6f, 0x50, 0xfe, 0x2e, 0x0d, 0x8f,
	0x3b, 0xbf, 0x40, 0xb9, 0x40, 0xf3, 0x40, 0x7f, 0xe2, 0x6f, 0xce, 0x4f, 0x86, 0x1f, 0xf9, 0x5b,
	0xda, 0x75, 0x16, 0xfa, 0x03, 0xdb, 0x6c, 0xfe, 0x36, 0x8a, 0xfa, 0xfb, 0x50, 0x16, 0x7e, 0xe7,
	0x80, 0x27, 0x9d, 0x9d, 0x85, 0x51, 0xa4, 0x7a, 0x2a, 0xfc, 0xe3, 0x18, 0xcb, 0xd9, 0xf1, 0x41,
	0xc0, 0xb7, 0x78, 0x82, 0xd3, 0x7e, 0x46, 0x6b, 0x44, 0xe8, 0x36, 0x9b, 0xd1, 0x83, 0x5d, 0xda,
	0xea, 0xd3, 0x78, 0x9b, 0xcd, 0x06, 0xd3, 0x31, 0x42, 0xf7, 0x48, 0xf6, 0x07, 0x49, 0xc4, 0x82,
	0x11, 0x8f, 0xba, 0xa7, 0x4c, 0x51, 0xb1, 0x4f, 0x58, 0x93, 0xba, 0x60, 0x8f, 0x25, 0xc3, 0x53,
	0xb9, 0xdd, 0x17, 0x68, 0x4c, 0x03, 0xa8, 0xa7, 0x56, 0x02, 0xc6, 0x03, 0x33, 0xfe, 0x95, 0xb6,
	0x6f, 0x07, 0x27, 0x3f, 0x54, 0xfe, 0x0b, 0x79, 0x91, 0x72, 0x80, 0xce, 0x21, 0x1c, 0x9c, 0xfc,
	0x70, 0x41, 0xaf, 0xad, 0xf8, 0x82, 0xec, 0xb5, 0x75, 0x0e, 0x61, 0x4d, 0xe5, 0x84, 0x65, 0x82,
	0x18, 0x8d, 0x2b, 0xf9, 0x39, 0x39, 0xed, 0xf5, 0xa4, 0x33, 0x17, 0xe9, 0x7e, 0xbb, 0xec, 0x01,
	0x26, 0xe7, 0x9f, 0xe7, 0x61, 0x35, 0x9b, 0x0e, 0xbd, 0x71, 0xec, 0x67, 0x72, 0x7b, 0x85, 0xd4,
	0x31, 0x94, 0xa2, 0x49, 0xea, 0x8d, 0x27, 0x2c, 0x98, 0x59, 0x87, 0xa4, 0x32, 0x99, 0xbe, 0x15,
	0x42, 0x5a, 0x3f, 0xf2, 0x86, 0xd4, 0xd6, 0x57, 0x87, 0xe2, 0x21, 0x19, 0xd3, 0xc2, 0xc2, 0xb6,
	0xb1, 0xb4, 0x57, 0x2a, 0xd5, 0xdf, 0xcf, 0x41, 0x69, 0x7b, 0x22, 0x78, 0x47, 0x36, 0xa8, 0xde,
	0xc9, 0xf0, 0xce, 0x76, 0x78, 0x11, 0xf4, 0x45, 0x38, 0x93, 0x0d, 0x91, 0x56, 0xa1, 0xb2, 0xe9,
	0xba, 0x56, 0x01, 0xc4, 0x39, 0x86, 0x8a, 0x1e, 0x8d, 0x5d, 0x88, 0xae, 0x26, 0x6f, 0xda, 0x93,
	0x6f, 0xc2, 0xca, 0x96, 0xc0, 0x40, 0x84, 0x8d, 0xc5, 0x68, 0x04, 0xb7, 0x92, 0x00, 0x0f, 0x96,
	0xeb, 0x73, 0x9c, 0x3b, 0x7e, 0x18, 0x2a, 0xc2, 0x3a, 0xdf, 0x84, 0x6a, 0x6f, 0xb2, 0xeb, 0x9d,
	0x44, 0x2c, 0x92, 0xfd, 0x59, 0x93, 0x2b, 0xad, 0x95, 0xf3, 0x9b, 0x79, 0xa3, 0xec, 0x84, 0xc4,
	0xdf, 0x88, 0x36, 0xb4, 0xcc, 0xc2, 0x02, 0x1f, 0xbe, 0x98, 0xf2, 0xe1, 0x75, 0x27, 0x4c, 0x3f,
	0x9c, 0xe0, 0x2b, 0x2b, 0x74, 0x4f, 0x8b, 0xfe, 0xb8, 0x71, 0x73, 0xee, 0x19, 0x28, 0x7e, 0xac,
	0x92, 0xa9, 0x8c, 0x2a, 0xbc, 0x56, 0x75, 0x5b, 0x93, 0xaf, 0x12, 0x6a, 0x90, 0xce, 0x8d, 0xe9,
	0xde, 0x3f, 0xb1, 0x04, 0xeb, 0x6c, 0xc2, 0x2d, 0x68, 0xbc, 0x0c, 0x0e, 0xf9, 0xb9, 0xc7, 0x2f,
	0x4c, 0x03, 0x20, 0x0e, 0x7c, 0x19, 0xdb, 0x95, 0x4e, 0x67, 0x9c, 0x5e, 0xde, 0xcd, 0x90, 0x73,
	0x3d, 0x3a, 0xcc, 0x56, 0x90, 0x3f, 0x9d, 0x00, 0x1a, 0xf4, 0xb9, 0x67, 0x51, 0x38, 0x9d, 0xdc,
	0x38, 0x09, 0x81, 0x6f, 0x21, 0x93, 0xa4, 0x70, 0x5d, 0xb4, 0x8f, 0xdc, 0xeb, 0xac, 0x6f, 0xc9,
	0xf9, 0xbd, 0x3c, 0xac, 0x1c, 0x5d, 0x70, 0x9e, 0xc8, 0xeb, 0x79, 0xb6, 0xdf, 0xd8, 0xf6, 0x89,
	0x0a, 0x34, 0x4f, 0x71, 0xeb, 0x4b, 0xed, 0xbb, 0xea, 0x94, 0xc7, 0xc0, 0x78, 0x99, 0x45, 0xd3,
	0xe6, 0x24, 0x1c, 0xc0, 0x74, 0x5e, 0xdd, 0x72, 0x1c, 0xaf, 0xb8, 0x34, 0x26, 0xdb, 0xc4, 0xb7,
	0x0e, 0x35, 0x89, 0x49, 0xdb, 0xaf, 0xfd, 0x79, 0x28, 0xab, 0x24, 0x39, 0x9e, 0x23, 0x9e, 0xb7,
	0x61, 0xea, 0x29, 0x0a, 0xb6, 0x50, 0xad, 0x32, 0x14, 0xaf, 0xe3, 0x0e, 0xc4, 0x3a, 0x30, 0xf2,
	0x96, 0xc0, 0x06, 0xc5, 0xde, 0x9b, 0xbe, 0x2f, 0x21, 0x4d, 0x22, 0xd0, 0xf7, 0x47, 0xa8, 0x21,
	0x5b, 0xc4, 0x6b, 0x58, 0xff, 0xf0, 0x92, 0x19, 0xfa, 0x37, 0x39, 0xe7, 0xff, 0xe5, 0xcc, 0x5d,
	0x39, 0x62, 0xe0, 0x75, 0x88, 0xb4, 0xbf, 0xa1, 0xf3, 0x6b, 0xfa, 0xd8, 0x56, 0x29, 0xb3, 0xd8,
	0xe2, 0xa2, 0xc5, 0x96, 0xe6, 0x69, 0xb0, 0x92, 0x6e, 0x60, 0x35, 0x77, 0x16, 0x58, 0xb8, 0xae,
	0xcc, 0xe1, 0xba, 0x4a, 0x9a, 0xf2, 0xab, 0x23, 0xd7, 0xf9, 0x5f, 0x05, 0x3d, 0xf2, 0xba, 0xad,
	0xaf, 0x43, 0x4d, 0x8d, 0xb4, 0x3a, 0x88, 0xe7, 0x93, 0x14, 0x16, 0xc7, 0xce, 0x9d, 0x0e, 0x59,
	0xc8, 0x3e, 0x6b, 0x50, 0x7d, 0xaa, 0x63, 0x9e, 0x72, 0xba, 0x09, 0xd4, 0x6a, 0xd9, 0xc6, 0x0a,
	0x48, 0xd5, 0x1c, 0x6f, 0x96, 0x89, 0x62, 0xa5, 0x32, 0xec, 0xb4, 0xcb, 0x1d, 0x5d, 0x3f, 0x3e,
	0xf9, 0xa1, 0x36, 0x6f, 0x9d, 0x39, 0xec, 0xc9, 0x78, 0xe3, 0x0e, 0xb4, 0xd0, 0x6f, 0x57, 0x3b,
	0x7b, 0x19, 0xf9, 0xe6, 0xfc, 0x13, 0x4a, 0xba, 0x6e, 0x71, 0xc4, 0x8b, 0xe3, 0x7c, 0x3a, 0xc1,
	0x86, 0xd9, 0x00, 0xe6, 0x72, 0x77, 0x5f, 0x77, 0x51, 0xa0, 0xfb, 0xa4, 0x40, 0xaf, 0xbc, 0x28,
	0x99, 0x32, 0x5f, 0x39, 0xd1, 0x98, 0xb3, 0x14, 0x4f, 0xb6, 0x58, 0xcc, 0x8d, 0x07, 0xfd, 0x05,
	0xc3, 0xfb, 0xf1, 0xda, 0xf6, 0x18, 0x2f, 0x18, 0x09, 0xd8, 0x3a, 0xa1, 0xa1, 0x17, 0x7f, 0xc1,
	0x64, 0x74, 0x5f, 0x69, 0x7f, 0x00, 0x15, 0x79, 0x66, 0x3d, 0x89, 0xf1, 0xf2, 0xa8, 0xf9, 0xb3,
	0xa0, 0x6a, 0x17, 0xca, 0xdd, 0x44, 0x66, 0x94, 0x7f, 0x8a, 0x39, 0xd1, 0xb9, 0x76, 0x7e, 0x39,
	0x07, 0xa0, 0x86, 0x7d, 0xc1, 0x82, 0x25, 0x0a, 0x73, 0x6a, 0xf0, 0x1b, 0x9a, 0xf4, 0x49, 0x8d,
	0x5d, 0xd1, 0xa0, 0x9f, 0x36, 0xcc, 0x32, 0x31, 0xf5, 0x9f, 0x72, 0xd0, 0xcc, 0x2c, 0xf6, 0xe6,
	0x2b, 0xb1, 0xd8, 0xab, 0x30, 0x77, 0x29, 0x49, 0x71, 0xf1, 0xe9, 0x69, 0x5a, 0x6b, 0x29, 0xbb,
	0xd6, 0xab, 0x6f, 0x4c, 0xc8, 0xde, 0x13, 0x47, 0x37, 0x6e, 0x60, 0xfc, 0xea, 0xec, 0x5a, 0x39,
	0xc0, 0xbf, 0xb4, 0x7d, 0x71, 0x7e, 0x20, 0xbe, 0xcf, 0x2e, 0xfc, 0xe3, 0x30, 0x72, 0x6f, 0x78,
	0xe7, 0x9a, 0x95, 0x9d, 0x2c, 0xa4, 0xcd, 0xa8, 0xac, 0xf5, 0x3c, 0xd5, 0xcf, 0x6f, 0x6c, 0x96,
	0xac, 0xd2, 0x9d, 0xf3, 0x0a, 0xaa, 0x32, 0xb7, 0xb2, 0x44, 0x5b, 0x90, 0xf0, 0xe9, 0xc3, 0xc8,
	0xed, 0xf3, 0x68, 0x10, 0x06, 0xcc, 0xb7, 0x9b, 0x83, 0x04, 0x5c, 0x9d, 0x83, 0x92, 0xf3, 0xfe,
	0xc3, 0x1c, 0x35, 0x00, 0x2f, 0x44, 0xc0, 0xc2, 0xf9, 0x1f, 0x40, 0x09, 0xc7, 0x5d, 0x91, 0x70,
	0xb2, 0x26, 0xfa, 0x3a, 0x14, 0x8f, 0xd8, 0x28, 0x56, 0x07, 0xbb, 0xae, 0x88, 0x96, 0x9c, 0xbf,
	0x0b, 0x8d, 0x7e, 0x18, 0xcb, 0x5a, 0x5d, 0x37, 0x74, 0xf9, 0xb2, 0x65, 0x38, 0x5d, 0xe0, 0xc3,
	0x1e, 0x68, 0x4d, 0x0e, 0x74, 0x7b, 0x49, 0x35, 0x3a, 0x5f, 0x58, 0x93, 0xf7, 0xdc, 0xd7, 0x4c,
	0x4c, 0x6e, 0x7e, 0xdd, 0xac, 0x8d, 0xad, 0x09, 0x2b, 0x31, 0x5e, 0x7b, 0xa3, 0xe6, 0x9e, 0x41,
	0x43, 0xe2, 0x4e, 0x1d, 0x8f, 0x5b, 0x7c, 0x77, 0x81, 0x6e, 0x0c, 0xb7, 0xc5, 0x27, 0xe0, 0x43,
	0xab, 0x01, 0x5d, 0xa2, 0xb3, 0x48, 0x57, 0x39, 0x3e, 0x3d, 0xf7, 0x7c, 0xab, 0x68, 0xb9, 0x48,
	0x92, 0x1f, 0x02, 0x6c, 0x7b, 0x51, 0x32, 0x93, 0x78, 0x7e, 0x0f, 0x8a, 0xd8, 0xa7, 0x7f, 0xa5,
	0xbb, 0xfa, 0xd0, 0x4a, 0xe4, 0xb4, 0xef, 0x93, 0xf1, 0xb8, 0x72, 0xf8, 0x9f, 0xe6, 0xa1, 0xda,
	0xdb, 0x1b, 0xcf, 0x55, 0x18, 0xae, 0x2c, 0xa3, 0x5b, 0x31, 0xd5, 0x37, 0x6c, 0xf5, 0x50, 0x58,
	0x70, 0x3a, 0xb5, 0xb7, 0xa7, 0x52, 0x51, 0x0b, 0xf3, 0xc5, 0x69, 0xf1, 0x2c, 0xcd, 0xe9, 0x3e,
	0xc8, 0x2a, 0x98, 0xda, 0xdc, 0xad, 0x45, 0xf5, 0xb9, 0xeb, 0xa6, 0x1a, 0x04, 0x39, 0x66, 0x5e,
	0x82, 0xd3, 0xe8, 0xab, 0x3e, 0x25, 0x04, 0xdf, 0x6b, 0xe9, 0x90, 0x2f, 0xf2, 0x46, 0x9e, 0x94,
	0x9c, 0x8d, 0x8c, 0x2e, 0xba, 0xa5, 0x8f, 0x5b, 0x04, 0xfc, 0xc2, 0xdc, 0x05, 0x34, 0x10, 0xbf,
	0xee, 0x90, 0xfc, 0x3f, 0x8b, 0x98, 0xcb, 0x55, 0xdf, 0xf4, 0x5b, 0x00, 0xd8, 0x67, 0x23, 0x31,
	0xf2, 0x96, 0x7d, 0xe4, 0x6c, 0x4f, 0x20, 0x99, 0x70, 0xa1, 0x8a, 0x32, 0x89, 0xe6, 0x78, 0x8c,
	0x6d, 0xac, 0x5b, 0xa7, 0x56, 0xa1, 0xa2, 0x4a, 0x3e, 0xb1, 0x09, 0x5f, 0xba, 0x26, 0x4b, 0xe8,
	0xfc, 0x4e, 0x0e, 0xd6, 0xe4, 0x6e, 0xfa, 0x3c, 0x7a, 0x1d, 0x46, 0x63, 0x16, 0x0c, 0xaf, 0x25,
	0xde, 0x22, 0x36, 0xb7, 0xf1, 0x54, 0x58, 0x80, 0x27, 0x1d, 0x1a, 0x4b, 0x98, 0x75, 0xf9, 0xa7,
	0xb9, 0x7d, 0x76, 0x85, 0xd6, 0x8c, 0xb8, 0xa0, 0x86, 0x4c, 0x59, 0x7b, 0x9a, 0x8e, 0x25, 0x82,
	0x50, 0xaf, 0x3b, 0xff, 0x22, 0x07, 0x55, 0x39, 0xd1, 0xce, 0xe6, 0x8b, 0x1b, 0xf2, 0xda, 0x9c,
	0x29, 0x6a, 0x41, 0xf9, 0x33, 0x8e, 0x42, 0xa1, 0xa4, 0xc9, 0x74, 0x5e, 0x2c, 0x8c, 0x1d, 0x32,
	0xec, 0x76, 0xf5, 0x69, 0xaf, 0x19, 0xb4, 0xd4, 0x22, 0x59, 0x9c, 0x60, 0xaf, 0xdb, 0x12, 0xb7,
	0x31, 0xa6, 0x93, 0xe9, 0x99, 0xdb, 0x39, 0x17, 0x06, 0x3a, 0x0b, 0x9a, 0x4c, 0x9c, 0x98, 0xea,
	0x35, 0xf2, 0x42, 0xc8, 0xb4, 0x01, 0xa8, 0x2e, 0x75, 0x69, 0xe3, 0xa2, 0xb6, 0x50, 0xb3, 0x9c,
	0x62, 0xca, 0xbe, 0xca, 0x58, 0xf8, 0xc7, 0x79, 0x58, 0x57, 0x76, 0x81, 0x05, 0x43, 0x9f, 0xae,
	0xa1, 0xbc, 0xf1, 0x15, 0x94, 0xba, 0x18, 0x72, 0x95, 0xab, 0x70, 0x65, 0x07, 0x56, 0xea, 0x0e,
	0x59, 0x3c, 0xbf, 0x16, 0x4e, 0xd0, 0x0b, 0x91, 0xb1, 0xce, 0x5b, 0xb0, 0x46, 0x90, 0x2d, 0xfe,
	0x3a, 0x8c, 0xd0, 0x87, 0xac, 0x90, 0x73, 0xa9, 0x1f, 0xb1, 0xe1, 0x99, 0x78, 0x50, 0xcd, 0x3e,
	0x78, 0xce, 0x02, 0xf4, 0x3f, 0x20, 0x43, 0x1a, 0x7d, 0x18, 0x64, 0xc7, 0x0b, 0x3c, 0x75, 0x87,
	0x50, 0x3d, 0x75, 0x7d, 0x9e, 0xbc, 0x46, 0xb9, 0x07, 0x6b, 0x02, 0x31, 0xdc, 0xb7, 0xef, 0xe7,
	0xbc, 0x4f, 0x9b, 0x7d, 0x93, 0x55, 0xb1, 0x26, 0x96, 0x77, 0x6f, 0xfc, 0x56, 0x0e, 0x2a, 0xd4,
	0x00, 0x7f, 0x43, 0xfe, 0x17, 0xa1, 0x62, 0xc2, 0xa2, 0xc4, 0x22, 0x6b, 0x0b, 0xca, 0x4f, 0x55,
	0x6d, 0xb7, 0x98, 0xa1, 0x73, 0x29, 0x7d, 0x94, 0x7f, 0xc5, 0x54, 0x34, 0xd5, 0x69, 0x2e, 0x5d,
	0x35, 0x37, 0x07, 0x59, 0x2b, 0xaa, 0x4f, 0xa6, 0xd4, 0x8f, 0xc2, 0x49, 0x7c, 0xb3, 0x8b, 0xb4,
	0xb2, 0x0c, 0xaf, 0x5d, 0x9a, 0xa2, 0xd5, 0x39, 0x8d, 0xdb, 0xee, 0xd1, 0x4d, 0xd1, 0x94, 0x5b,
	0x92, 0x81, 0xfd, 0x2e, 0x54, 0xb6, 0xd9, 0x6c, 0xa9, 0x2f, 0xeb, 0xb9, 0xf3, 0x0b, 0xac, 0x88,
	0x74, 0x75, 0x7e, 0x3d, 0x47, 0x0d, 0xfd, 0x4b, 0xcd, 0x28, 0x63, 0x8f, 0x49, 0xfc, 0x06, 0x0f,
	0x7c, 0x91, 0xfd, 0xc2, 0x23, 0x5d, 0x98, 0x59, 0xb7, 0x18, 0x3a, 0xad, 0x75, 0x0a, 0x66, 0xb5,
	0x88, 0x71, 0xe7, 0xf7, 0x72, 0xb0, 0x26, 0xa7, 0x7e, 0x19, 0x73, 0xfc, 0xe8, 0x12, 0x5e, 0xde,
	0x12, 0xeb, 0xc3, 0x3a, 0xc4, 0xf9, 0x12, 0x02, 0x97, 0xe1, 0x89, 0xf4, 0xf2, 0x52, 0x96, 0xb4,
	0x32, 0x67, 0x6d, 0xab, 0xf2, 0x5a, 0xf1, 0x1c, 0xd4, 0x76, 0xa7, 0xc3, 0xb3, 0x99, 0xfc, 0xda,
	0x72, 0xe5, 0xcb, 0x36, 0x00, 0xbe, 0x63, 0x28, 0xa7, 0x82, 0xce, 0x9d, 0xa9, 0xef, 0xab, 0x9a,
	0xe3, 0x2a, 0x54, 0xc4, 0xaf, 0xb4, 0x8e, 0xc4, 0xb7, 0x64, 0xdb, 0x72, 0xc9, 0xd4, 0x22, 0x05,
	0x1f, 0xab, 0xfb, 0x0f, 0xe6, 0xb9, 0x1a, 0x8b, 0x37, 0xfb, 0xfc, 0x02, 0x5f, 0x55, 0xb7, 0x1d,
	0x09, 0x69, 0x94, 0x07, 0x48, 0x86, 0x9c, 0x7a, 0xf1, 0x42, 0x68, 0x5b, 0xfb, 0x38, 0xe4, 0x3e,
	0x4b, 0xb8, 0x7b, 0xf3, 0x63, 0xc9, 0xeb, 0x50, 0x93, 0xd5, 0x34, 0x5b, 0xfb, 0x21, 0x3d, 0x70,
	0x42, 0x2b, 0xf6, 0x78, 0x85, 0x67, 0x23, 0x26, 0xb1, 0xe0, 0xfb, 0x65, 0x3d, 0x5f, 0x47, 0x89,
	0x89, 0x74, 0xc0, 0x37, 0xb2, 0x79, 0x78, 0x31, 0x9d, 0xf3, 0x14, 0xd6, 0x70, 0x23, 0x83, 0x19,
	0xa2, 0xb3, 0xbb, 0x8c, 0xfa, 0x5e, 0x83, 0xaa, 0x1e, 0xab, 0xb4, 0xd3, 0xf7, 0xa0, 0xb6, 0xcd,
	0x12, 0x86, 0xa0, 0x68, 0x76, 0x1d, 0x22, 0xf0, 0x86, 0x56, 0x72, 0xc6, 0x9d, 0xef, 0x09, 0xf9,
	0x4d, 0xd8, 0x66, 0xc4, 0xd9, 0x12, 0x26, 0x4b, 0x7d, 0x42, 0xbd, 0xfb, 0x39, 0x80, 0x78, 0xf7,
	0x90, 0x8f, 0xbc, 0x30, 0xb8, 0xd1, 0x67, 0xed, 0xb9, 0x74, 0x7a, 0x44, 0xac, 0x41, 0xe5, 0xd6,
	0x5f, 0xcb, 0x55, 0x75, 0xd3, 0xea, 0xf6, 0x2f, 0x3d, 0xaf, 0xec, 0x0a, 0x18, 0x79, 0xfa, 0xb4,
	0xff, 0x01, 0xac, 0x1d, 0x72, 0xe6, 0xaa, 0xe2, 0xbf, 0x8c, 0x39, 0x6e, 0xf6, 0x41, 0x7d, 0xb3,
	0x8f, 0x54, 0x60, 0x67, 0x50, 0xdd, 0x74, 0xcf, 0x77, 0xc3, 0xd1, 0x21, 0xff, 0xd1, 0x12, 0xfa,
	0x70, 0xd3, 0x3d, 0x7f, 0x83, 0x6e, 0x68, 0xc2, 0xca, 0xc1, 0xc4, 0xba, 0xaf, 0x54, 0xfe, 0x36,
	0x5e, 0xc7, 0x3f, 0xca, 0x43, 0xfd, 0xb3, 0xb8, 0x1f, 0xc6, 0x38, 0xcd, 0x6b, 0xd6, 0x76, 0xc4,
	0xee, 0x5d, 0xbe, 0xe7, 0x3e, 0xb9, 0x59, 0xd0, 0xa4, 0x57, 0x62, 0xbe, 0x1b, 0x5b, 0xdf, 0x95,
	0xd7, 0x8f, 0xeb, 0xf3, 0xed, 0xd8, 0xf7, 0x14, 0xab, 0xf3, 0xed, 0xf2, 0x16, 0x55, 0xe6, 0xfb,
	0x27, 0xba, 0xe9, 0x4c, 0xd6, 0x32, 0xe5, 0xa1, 0x15, 0x23, 0xc5, 0x9b, 0xe6, 0x38, 0x50, 0xd5,
	0x48, 0xbb, 0x3e, 0x98, 0x0a, 0xd9, 0xeb, 0xb9, 0xd3, 0x47, 0xdc, 0xa9, 0xc1, 0xcc, 0xba, 0x82,
	0x47, 0xd0, 0x40, 0x1a, 0xfa, 0x5f, 0xc9, 0xc1, 0xad, 0x57, 0x9e, 0xcb, 0xc3, 0x57, 0xa1, 0x37,
	0xe4, 0xdb, 0x53, 0x59, 0x19, 0x59, 0xc2, 0x09, 0xcb, 0x74, 0xf6, 0xac, 0x42, 0x85, 0x5e, 0x7e,
	0x83, 0xf5, 0x50, 0xc7, 0xbe, 0xb5, 0x3d, 0x9c, 0x3b, 0xf1, 0xef, 0xfc, 0xe3, 0x1c, 0xb4, 0x64,
	0x47, 0xa9, 0x6e, 0xa4, 0xbd, 0x99, 0x76, 0xca, 0xcb, 0xcb, 0x44, 0xb4, 0xfe, 0x4e, 0x5d, 0x56,
	0x6c, 0x5d, 0xc4, 0x51, 0xcc, 0x74, 0xb7, 0xc9, 0x8f, 0x5a, 0x1c, 0xf2, 0xfb, 0x39, 0x28, 0xef,
	0x73, 0x16, 0x0d, 0x96, 0xba, 0xfe, 0xe0, 0xca, 0xf2, 0xc7, 0x2a, 0x54, 0xbe, 0x3f, 0x1d, 0xdb,
	0xac, 0xb8, 0x06, 0x55, 0xd5, 0x24, 0xa6, 0xf1, 0x90, 0xee, 0x1b, 0x5b, 0xc9, 0xf6, 0x8d, 0xe9,
	0x26, 0x08, 0x6a, 0xb7, 0xab, 0x64, 0x9c, 0xfd, 0xaa, 0x3d, 0xf1, 0x20, 0x99, 0xa9, 0x1e, 0xb6,
	0x92, 0xf3, 0x4b, 0x79, 0xd9, 0x7a, 0xa3, 0x6e, 0xc4, 0xc9, 0x5c, 0xb3, 0x5e, 0x7d, 0xc3, 0x21,
	0xa3, 0x8c, 0xc2, 0xbf, 0x83, 0x64, 0xe1, 0xde, 0x39, 0x9f, 0x17, 0xb4, 0x94, 0x9f, 0x9d, 0x69,
	0x9b, 0x59, 0x14, 0xdd, 0xcf, 0x1f, 0xd9, 0xc7, 0xba, 0x1c, 0x02, 0x8e, 0xcc, 0x45, 0xba, 0xf7,
	0xe8, 0x7f, 0x90, 0xbc, 0x0c, 0xbc, 0x1f, 0x4d, 0x33, 0x57, 0x4f, 0xdd, 0x36, 0xee, 0x01, 0x32,
	0xba, 0x45, 0xc9, 0x6c, 0x6d, 0xce, 0xf9, 0x93, 0x1c, 0xac, 0x09, 0x24, 0xa8, 0xf8, 0x52, 0x58,
	0xc9, 0xeb, 0xfd, 0x8f, 0x1b, 0xa2, 0xc1, 0xda, 0x52, 0x71, 0xd1, 0x96, 0x16, 0x87, 0x67, 0x06,
	0x59, 0xe5, 0x05, 0xc8, 0xaa, 0x2c, 0xf0, 0xf5, 0xf4, 0xed, 0x16, 0xbd, 0x18, 0x2f, 0xb0, 0x93,
	0xc2, 0xef, 0xfc, 0x61, 0x0e, 0x8f, 0x26, 0x24, 0x8a, 0xce, 0x4b, 0xe8, 0x61, 0x2b, 0xdb, 0x9e,
	0xba, 0xe0, 0xaa, 0x40, 0x57, 0xb2, 0xaa, 0xa9, 0xac, 0x90, 0x18, 0x6f, 0x14, 0x41, 0x60, 0x3a,
	0x15, 0x2b, 0x42, 0x77, 0x76, 0x29, 0x55, 0xf9, 0x8a, 0xba, 0xc5, 0xab, 0x82, 0x77, 0x02, 0x05,
	0xaf, 0x43, 0xbc, 0x2d, 0x6e, 0xfe, 0xc6, 0x1e, 0xf1, 0x58, 0xbc, 0xa1, 0x3a, 0xb5, 0xf4, 0xed,
	0x39, 0x95, 0xf4, 0x7d, 0xa1, 0xd2, 0xfb, 0xe2, 0xc2, 0xb1, 0x48, 0x8d, 0xcf, 0xa4, 0xa1, 0xcc,
	0x1d, 0x44, 0x5a, 0x29, 0x5b, 0x96, 0x05, 0x1b, 0xd2, 0x98, 0x7f, 0x26, 0xc2, 0xf4, 0x22, 0x35,
	0x64, 0xa4, 0xae, 0xab, 0x95, 0x12, 0xff, 0x6f, 0x73, 0xb2, 0x81, 0xec, 0xab, 0x1f, 0x04, 0xcd,
	0x18, 0x03, 0xeb, 0xac, 0x50, 0x31, 0x7b, 0xf0, 0xa5, 0x94, 0x39, 0x39, 0xa1, 0x7b, 0x76, 0xf0,
	0xb7, 0xdc, 0x1f, 0x1d, 0xdb, 0xfa, 0x3a, 0x14, 0xc5, 0xba, 0xd4, 0x35, 0x6e, 0xb7, 0x17, 0x74,
	0xc0, 0x0d, 0x78, 0xe2, 0x7c, 0x13, 0xaa, 0xdd, 0x70, 0x3c, 0x1e, 0x24, 0x51, 0xef, 0x3a, 0x8f,
	0x4e, 0x04, 0x65, 0x6d, 0x73, 0x83, 0x3a, 0x75, 0x61, 0x2c, 0xc0, 0xac, 0xd5, 0xa3, 0x81, 0x77,
	0xad, 0xe7, 0xb3, 0x57, 0xa4, 0x17, 0x16, 0xdc, 0x98, 0xbd, 0x20, 0xe2, 0x6e, 0x7f, 0x00, 0x55,
	0x4e, 0xf7, 0xae, 0xab, 0xdb, 0xa5, 0xde, 0xce, 0x26, 0x4c, 0xed, 0xbb, 0xd9, 0x9d, 0xff, 0x9e,
	0x87, 0xb5, 0xad, 0x69, 0x92, 0x84, 0x01, 0x62, 0xe4, 0xc6, 0x27, 0x25, 0x37, 0x47, 0x11, 0xe7,
	0x63, 0x1e, 0x24, 0x3f, 0x50, 0x1d, 0xd8, 0xf2, 0xf4, 0x12, 0x41, 0xf7, 0x43, 0xd3, 0xc1, 0x29,
	0x9d, 0x58, 0x4d, 0x91, 0x63, 0x8e, 0x57, 0x15, 0x99, 0x32, 0x64, 0xc0, 0x71, 0x09, 0xe6, 0x7c,
	0x19, 0x41, 0xec, 0xa3, 0x51, 0x6d, 0x80, 0x83, 0xe4, 0x94, 0x47, 0x72, 0x68, 0xfa, 0x28, 0x10,
	0x76, 0x95, 0x83, 0xae, 0x3b, 0xe3, 0xf5, 0x3b, 0xae, 0xd5, 0x4e, 0x70, 0xc8, 0x35, 0x4c, 0xff,
	0x97, 0x97, 0x5e, 0x80, 0xcb, 0xc2, 0x57, 0x1b, 0xda, 0xea, 0x07, 0x62, 0x10, 0xc2, 0x74, 0x33,
	0x28, 0xde, 0x23, 0x22, 0x20, 0x2d, 0xdd, 0x88, 0x15, 0xec, 0x8f, 0xb7, 0x92, 0xa0, 0xbb, 0x2b,
	0x56, 0x72, 0x2b, 0x0b, 0xb5, 0x8e, 0xa5, 0x0d, 0xa1, 0x69, 0xa1, 0x78, 0x09, 0x5b, 0x7b, 0x45,
	0x3e, 0x6d, 0xbe, 0x74, 0x63, 0xf8, 0xc0, 0xf9, 0x8b, 0x02, 0xac, 0xf6, 0xd9, 0x88, 0x1f, 0xf2,
	0x11, 0x3a, 0x77, 0x5f, 0x55, 0xb8, 0xac, 0x2e, 0x12, 0x9d, 0x0d, 0xdb, 0xf6, 0x86, 0x16, 0xc7,
	0xd1, 0x89, 0x35, 0xfb, 0x80, 0x64, 0xfa, 0x14, 0xdb, 0x8a, 0x45, 0x41, 0x6b, 0x68, 0x39, 0x0b,
	0xb6, 0x09, 0xbb, 0x01, 0xf5, 0xe3, 0x4b, 0x6b, 0x70, 0x35, 0x03, 0xcd, 0x1c, 0x78, 0xa3, 0x23,
	0x89, 0x72, 0x70, 0x6d, 0xf1, 0xc1, 0xc7, 0xba, 0x11, 0xae, 0x91, 0xa0, 0xa8, 0x1c, 0xdc, 0xc8,
	0x40, 0xed, 0xe3, 0xd5, 0x1b, 0x50, 0x7f, 0x19, 0xe3, 0xad, 0x88, 0x72, 0x6c, 0x2b, 0x03, 0xb5,
	0x0f, 0xcb, 0xca, 0xfe, 0x89, 0x63, 0xe5, 0xcf, 0xc4, 0xaa, 0x36, 0x68, 0xa0, 0xf6, 0x31, 0x47,
	0x29, 0xe0, 0x82, 0x3e, 0xa6, 0xcf, 0xce, 0x86, 0xda, 0x47, 0x1d, 0x33, 0xa7, 0xff, 0x6e, 0x5d,
	0x79, 0xfa, 0x4f, 0x72, 0xd7, 0xdf, 0x07, 0x30, 0x74, 0xff, 0x2a, 0x14, 0x27, 0x57, 0xf5, 0x0a,
	0x72, 0x5b, 0x0c, 0x51, 0x4a, 0x75, 0x00, 0xc9, 0xf4, 0xca, 0x80, 0xca, 0x17, 0xb2, 0x38, 0xcb,
	0x85, 0x8b, 0x9f, 0xfa, 0xdf, 0x40, 0xcb, 0x85, 0xba, 0xa9, 0x7f, 0xb9, 0x22, 0xfc, 0xd3, 0x6a,
	0x2f, 0x70, 0xf9, 0xe5, 0x91, 0x37, 0x89, 0x97, 0xe9, 0x7e, 0x4f, 0xa7, 0x73, 0xc9, 0x81, 0x2b,
	0x64, 0xdc, 0x81, 0x22, 0x25, 0x26, 0xa4, 0xf9, 0xb8, 0x2a, 0x6d, 0xb1, 0xf5, 0x99, 0x76, 0x07,
	0x9d, 0x33, 0x80, 0x7e, 0x38, 0x19, 0x4c, 0xe3, 0x09, 0x0f, 0xdc, 0x1b, 0xae, 0x04, 0x4b, 0xc0,
	0xfd, 0x70, 0xa2, 0x92, 0x10, 0xf2, 0xe6, 0x35, 0x39, 0x93, 0xea, 0x33, 0x4d, 0x2f, 0x65, 0xab,
	0xfe, 0x9f, 0x7f, 0xf2, 0x6e, 0xee, 0x0f, 0x7e, 0xf2, 0x6e, 0xee, 0x4f, 0x7e, 0xf2, 0x6e, 0xee,
	0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x40, 0x12, 0xbd, 0xc2, 0x6e, 0x00, 0x00,
}

func (m *ServerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sid != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Sid))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Type != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Type))
	}
	if m.ExternalIp != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.ExternalIp)))
		i += copy(dAtA[i:], *m.ExternalIp)
	}
	if m.ClientWSPort != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ClientWSPort))
	}
	if m.ClientTCPPort != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ClientTCPPort))
	}
	if m.ClientApiPort != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ClientApiPort))
	}
	if m.ServerApiPort != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ServerApiPort))
	}
	if m.WebApiPort != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.WebApiPort))
	}
	if m.BackStageApiPort != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.BackStageApiPort))
	}
	if m.State != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.State))
	}
	if m.ConNum != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ConNum))
	}
	if m.Version != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Version)))
		i += copy(dAtA[i:], *m.Version)
	}
	if m.InternalIP != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.InternalIP)))
		i += copy(dAtA[i:], *m.InternalIP)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserGoldReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGoldReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LogId == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("LogId")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Vip != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Vip))
	}
	if m.ParentId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ParentId))
	}
	if m.Gold != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Gold))
	}
	if m.Profit != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Profit))
	}
	if m.Recharge != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Recharge))
	}
	if m.RechargeCount != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RechargeCount))
	}
	if m.RechargeReturn != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RechargeReturn))
	}
	if m.TxAmount != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TxAmount))
	}
	if m.CellScore != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CellScore))
	}
	if m.RealWin != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RealWin))
	}
	if m.Revenue != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Revenue))
	}
	if m.ReturnReward != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ReturnReward))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.GameCount != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.GameCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReportJob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportJob) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Report != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Report)))
		i += copy(dAtA[i:], *m.Report)
	}
	if m.Time != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Time))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RolePower) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RolePower) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.RoleName != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.RoleName)))
		i += copy(dAtA[i:], *m.RoleName)
	}
	if len(m.MenuIds) > 0 {
		for _, s := range m.MenuIds {
			dAtA[i] = 0x52
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.RoleType != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RoleType))
	}
	if m.Note != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Note)))
		i += copy(dAtA[i:], *m.Note)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Manager) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Manager) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Account != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.Site != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Site)))
		i += copy(dAtA[i:], *m.Site)
	}
	if m.Password != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Password)))
		i += copy(dAtA[i:], *m.Password)
	}
	if m.Role != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Role))
	}
	if m.RealName != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.RealName)))
		i += copy(dAtA[i:], *m.RealName)
	}
	if m.Phone != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Phone)))
		i += copy(dAtA[i:], *m.Phone)
	}
	if m.Status != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Status))
	}
	if m.IsOnlie != nil {
		dAtA[i] = 0x48
		i++
		if *m.IsOnlie {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.LoginCount != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LoginCount))
	}
	if m.PrevLoginTime != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PrevLoginTime))
	}
	if m.PrevLoginIP != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.PrevLoginIP)))
		i += copy(dAtA[i:], *m.PrevLoginIP)
	}
	if m.LastLoginTime != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LastLoginTime))
	}
	if m.LastLoginIP != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.LastLoginIP)))
		i += copy(dAtA[i:], *m.LastLoginIP)
	}
	if m.Salt != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Salt)))
		i += copy(dAtA[i:], *m.Salt)
	}
	if m.RoleType != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RoleType))
	}
	if len(m.BindIp) > 0 {
		for _, s := range m.BindIp {
			dAtA[i] = 0x92
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.IsGoogleVer != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsGoogleVer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.GoogleSecret != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.GoogleSecret)))
		i += copy(dAtA[i:], *m.GoogleSecret)
	}
	if m.Types != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Types))
	}
	if m.IsLoginH5 != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsLoginH5 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ManagerTypes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManagerTypes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Status != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Status))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BackstageOptLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackstageOptLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.Ip != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Ip)))
		i += copy(dAtA[i:], *m.Ip)
	}
	if len(m.TargetUserId) > 0 {
		for _, num := range m.TargetUserId {
			dAtA[i] = 0x18
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(num))
		}
	}
	if m.Remarks != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Remarks)))
		i += copy(dAtA[i:], *m.Remarks)
	}
	if m.OptType != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.OptType)))
		i += copy(dAtA[i:], *m.OptType)
	}
	if m.Site != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Site)))
		i += copy(dAtA[i:], *m.Site)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.F1 != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.F1)))
		i += copy(dAtA[i:], *m.F1)
	}
	if m.F2 != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.F2)))
		i += copy(dAtA[i:], *m.F2)
	}
	if m.F3 != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.F3)))
		i += copy(dAtA[i:], *m.F3)
	}
	if m.F4 != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.F4)))
		i += copy(dAtA[i:], *m.F4)
	}
	if m.F5 != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.F5)))
		i += copy(dAtA[i:], *m.F5)
	}
	if m.T1 != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.T1))
	}
	if m.T2 != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.T2))
	}
	if m.T3 != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.T3))
	}
	if m.T4 != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.T4))
	}
	if len(m.T5) > 0 {
		for _, num := range m.T5 {
			dAtA[i] = 0x98
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(num))
		}
	}
	if len(m.T6) > 0 {
		for _, num := range m.T6 {
			dAtA[i] = 0xa0
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(num))
		}
	}
	if len(m.F6) > 0 {
		for _, s := range m.F6 {
			dAtA[i] = 0xaa
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FreezeIpList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FreezeIpList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.LoginIP != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.LoginIP)))
		i += copy(dAtA[i:], *m.LoginIP)
	}
	if m.LoginAuth != nil {
		dAtA[i] = 0x18
		i++
		if *m.LoginAuth {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RegisterAuth != nil {
		dAtA[i] = 0x20
		i++
		if *m.RegisterAuth {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Remark != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Remark)))
		i += copy(dAtA[i:], *m.Remark)
	}
	if m.HandleTime != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.HandleTime))
	}
	if m.Operator != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Operator)))
		i += copy(dAtA[i:], *m.Operator)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FreezeAccountList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FreezeAccountList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Account != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.LoginAuth != nil {
		dAtA[i] = 0x18
		i++
		if *m.LoginAuth {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LogLoginInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogLoginInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("Id")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Account != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.State != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.State))
	}
	if m.PF != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.PF)))
		i += copy(dAtA[i:], *m.PF)
	}
	if m.LoginTime != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LoginTime))
	}
	if m.RegTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RegTime))
	}
	if m.LoginIP != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.LoginIP)))
		i += copy(dAtA[i:], *m.LoginIP)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SourceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SourceType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("Key")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Key))
	}
	if m.Value != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Value)))
		i += copy(dAtA[i:], *m.Value)
	}
	if m.Type != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Type))
	}
	if m.Channel != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Channel))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GoldChangeLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoldChangeLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LogId == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("LogId")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Account != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.ChangeGold != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ChangeGold))
	}
	if m.SourceType != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.SourceType))
	}
	if m.SourceTypeName != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.SourceTypeName)))
		i += copy(dAtA[i:], *m.SourceTypeName)
	}
	if m.PayType != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PayType))
	}
	if m.CurGold != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CurGold))
	}
	if m.Gold != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Gold))
	}
	if m.Note != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Note)))
		i += copy(dAtA[i:], *m.Note)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CoinChangeLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinChangeLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LogId == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("LogId")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Account != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.ChangeCoin != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ChangeCoin))
	}
	if m.SourceType != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.SourceType))
	}
	if m.SourceTypeName != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.SourceTypeName)))
		i += copy(dAtA[i:], *m.SourceTypeName)
	}
	if m.PayType != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PayType))
	}
	if m.CurCoin != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CurCoin))
	}
	if m.Coin != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Coin))
	}
	if m.Note != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Note)))
		i += copy(dAtA[i:], *m.Note)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.CurBCoin != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CurBCoin))
	}
	if m.BCoin != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.BCoin))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESportCoinChangeLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportCoinChangeLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LogId == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("LogId")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Account != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.ChangeESportCoin != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ChangeESportCoin))
	}
	if m.SourceType != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.SourceType))
	}
	if m.SourceTypeName != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.SourceTypeName)))
		i += copy(dAtA[i:], *m.SourceTypeName)
	}
	if m.PayType != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PayType))
	}
	if m.CurESportCoin != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CurESportCoin))
	}
	if m.ESportCoin != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ESportCoin))
	}
	if m.Note != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Note)))
		i += copy(dAtA[i:], *m.Note)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GoldExtendLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoldExtendLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RedPacketId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RedPacketId))
	}
	if m.OrderId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.OrderId)))
		i += copy(dAtA[i:], *m.OrderId)
	}
	if m.MerchantId != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.MerchantId)))
		i += copy(dAtA[i:], *m.MerchantId)
	}
	if m.BankName != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.BankName)))
		i += copy(dAtA[i:], *m.BankName)
	}
	if m.HeadIcon != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.HeadIcon)))
		i += copy(dAtA[i:], *m.HeadIcon)
	}
	if m.PayType != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PayType))
	}
	if m.TransferText != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.TransferText)))
		i += copy(dAtA[i:], *m.TransferText)
	}
	if m.ServiceCharge != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ServiceCharge))
	}
	if m.Title != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.Gold != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Gold))
	}
	if m.Channel != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Channel))
	}
	if m.Account != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RechargeExtend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RechargeExtend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channeltype != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Channeltype))
	}
	if m.PayChannel != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PayChannel))
	}
	if m.PayType != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PayType))
	}
	if m.CreateIP != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.CreateIP)))
		i += copy(dAtA[i:], *m.CreateIP)
	}
	if m.OrderId != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.OrderId)))
		i += copy(dAtA[i:], *m.OrderId)
	}
	if m.Amount != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Amount))
	}
	if m.Operator != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Operator)))
		i += copy(dAtA[i:], *m.Operator)
	}
	if m.Account != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Order) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrderId == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("OrderId")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.OrderId)))
		i += copy(dAtA[i:], *m.OrderId)
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Account != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.NickName != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.RealName != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.RealName)))
		i += copy(dAtA[i:], *m.RealName)
	}
	if m.SourceType != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.SourceType))
	}
	if m.ChangeType != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ChangeType))
	}
	if m.Channeltype != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Channeltype))
	}
	if m.CurGold != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CurGold))
	}
	if m.ChangeGold != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ChangeGold))
	}
	if m.Gold != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Gold))
	}
	if m.ExternalNo != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.ExternalNo)))
		i += copy(dAtA[i:], *m.ExternalNo)
	}
	if m.PayChannel != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PayChannel))
	}
	if m.PayType != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PayType))
	}
	if m.Amount != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Amount))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.CreateIP != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.CreateIP)))
		i += copy(dAtA[i:], *m.CreateIP)
	}
	if m.Status != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Status))
	}
	if m.PayStatus != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PayStatus))
	}
	if m.Note != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Note)))
		i += copy(dAtA[i:], *m.Note)
	}
	if m.Tax != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Tax))
	}
	if m.OverTime != nil {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.OverTime))
	}
	if m.Operator != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Operator)))
		i += copy(dAtA[i:], *m.Operator)
	}
	if m.BankInfo != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.BankInfo)))
		i += copy(dAtA[i:], *m.BankInfo)
	}
	if m.PayWay != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PayWay))
	}
	if m.PayTargetId != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PayTargetId))
	}
	if m.PayOpenId != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.PayOpenId)))
		i += copy(dAtA[i:], *m.PayOpenId)
	}
	if m.TotalCount != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TotalCount))
	}
	if m.Content != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.ExtendValue != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.ExtendValue)))
		i += copy(dAtA[i:], *m.ExtendValue)
	}
	if m.BankCode != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.BankCode)))
		i += copy(dAtA[i:], *m.BankCode)
	}
	if m.AccountType != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.AccountType)))
		i += copy(dAtA[i:], *m.AccountType)
	}
	if m.AccountNo != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.AccountNo)))
		i += copy(dAtA[i:], *m.AccountNo)
	}
	if m.AccountName != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.AccountName)))
		i += copy(dAtA[i:], *m.AccountName)
	}
	if m.AccountProp != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.AccountProp)))
		i += copy(dAtA[i:], *m.AccountProp)
	}
	if m.OrderDate != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.OrderDate)))
		i += copy(dAtA[i:], *m.OrderDate)
	}
	if m.IsCheck != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.IsCheck)))
		i += copy(dAtA[i:], *m.IsCheck)
	}
	if m.PlatformTax != nil {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlatformTax))
	}
	if m.RealTax != nil {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RealTax))
	}
	if m.OrderType != nil {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.OrderType))
	}
	if m.PlayerReason != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.PlayerReason)))
		i += copy(dAtA[i:], *m.PlayerReason)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TeamData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.HeadUrl != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.HeadUrl)))
		i += copy(dAtA[i:], *m.HeadUrl)
	}
	if m.GongGao != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.GongGao)))
		i += copy(dAtA[i:], *m.GongGao)
	}
	if m.Owner != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Owner))
	}
	if m.QRCode != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.QRCode)))
		i += copy(dAtA[i:], *m.QRCode)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.LastTalkTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LastTalkTime))
	}
	if m.MaxMember != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.MaxMember))
	}
	if len(m.MemberList) > 0 {
		for _, num := range m.MemberList {
			dAtA[i] = 0x50
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(num))
		}
	}
	if len(m.ManagerList) > 0 {
		for _, num := range m.ManagerList {
			dAtA[i] = 0x58
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(num))
		}
	}
	if m.TeamChat != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.TeamChat)))
		i += copy(dAtA[i:], *m.TeamChat)
	}
	if m.MessageSetting != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(m.MessageSetting.Size()))
		n1, err := m.MessageSetting.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.OutTeam) > 0 {
		for _, msg := range m.OutTeam {
			dAtA[i] = 0x72
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Invite) > 0 {
		for _, msg := range m.Invite {
			dAtA[i] = 0x7a
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Status != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Status))
	}
	if m.IsRecommend != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsRecommend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DissolveTime != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.DissolveTime))
	}
	if m.OwnerNickName != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.OwnerNickName)))
		i += copy(dAtA[i:], *m.OwnerNickName)
	}
	if m.RefreshTime != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RefreshTime))
	}
	if m.AdminID != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.AdminID))
	}
	if m.OwnerAccount != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.OwnerAccount)))
		i += copy(dAtA[i:], *m.OwnerAccount)
	}
	if m.CreateName != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.CreateName)))
		i += copy(dAtA[i:], *m.CreateName)
	}
	if len(m.OperatorInfo) > 0 {
		for _, msg := range m.OperatorInfo {
			dAtA[i] = 0xc2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Level != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Level))
	}
	if m.LogMaxId != nil {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LogMaxId))
	}
	if m.WelcomeWord != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.WelcomeWord)))
		i += copy(dAtA[i:], *m.WelcomeWord)
	}
	if m.SessionId != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.SessionId)))
		i += copy(dAtA[i:], *m.SessionId)
	}
	if m.Topic != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Topic)))
		i += copy(dAtA[i:], *m.Topic)
	}
	if m.TopicDesc != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.TopicDesc)))
		i += copy(dAtA[i:], *m.TopicDesc)
	}
	if len(m.TopicHeadUrls) > 0 {
		for _, s := range m.TopicHeadUrls {
			dAtA[i] = 0xfa
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.LastDynamicTime != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LastDynamicTime))
	}
	if m.DynamicId != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.DynamicId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OperatorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Operator != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Operator)))
		i += copy(dAtA[i:], *m.Operator)
	}
	if m.Time != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Time))
	}
	if m.Flag != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Flag))
	}
	if m.CloseTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CloseTime))
	}
	if m.Reason != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Reason)))
		i += copy(dAtA[i:], *m.Reason)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OutTeamInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutTeamInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Time != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Time))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *InviteInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InviteInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.HeadIcon != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.HeadIcon)))
		i += copy(dAtA[i:], *m.HeadIcon)
	}
	if m.State != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.State))
	}
	if m.Channel != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Channel)))
		i += copy(dAtA[i:], *m.Channel)
	}
	if m.InviteName != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.InviteName)))
		i += copy(dAtA[i:], *m.InviteName)
	}
	if m.InviteId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.InviteId))
	}
	if m.Name != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Time != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Time))
	}
	if m.Account != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.LogId != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LogId))
	}
	if m.TeamChannel != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(m.TeamChannel.Size()))
		n2, err := m.TeamChannel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MessageSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageSetting) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsTimeClean != nil {
		dAtA[i] = 0x8
		i++
		if *m.IsTimeClean {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsReadClean != nil {
		dAtA[i] = 0x10
		i++
		if *m.IsReadClean {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsScreenShotNotify != nil {
		dAtA[i] = 0x18
		i++
		if *m.IsScreenShotNotify {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsStopTalk != nil {
		dAtA[i] = 0x20
		i++
		if *m.IsStopTalk {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TeamHelp != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TeamHelp))
	}
	if m.IsAddFriend != nil {
		dAtA[i] = 0x38
		i++
		if *m.IsAddFriend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsInvite != nil {
		dAtA[i] = 0x40
		i++
		if *m.IsInvite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.StopRedPacket) > 0 {
		for _, num := range m.StopRedPacket {
			dAtA[i] = 0x48
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(num))
		}
	}
	if len(m.UnTakeRedPacket) > 0 {
		for _, num := range m.UnTakeRedPacket {
			dAtA[i] = 0x50
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(num))
		}
	}
	if m.IsStopAddTeam != nil {
		dAtA[i] = 0x58
		i++
		if *m.IsStopAddTeam {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsOpenTeamMoneyCode != nil {
		dAtA[i] = 0x60
		i++
		if *m.IsOpenTeamMoneyCode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsBan != nil {
		dAtA[i] = 0x68
		i++
		if *m.IsBan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UnBanTime != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.UnBanTime))
	}
	if m.IsOpenWelcomeWord != nil {
		dAtA[i] = 0x78
		i++
		if *m.IsOpenWelcomeWord {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsManagerEdit != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsManagerEdit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TeamSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamSetting) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PersonSetting != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(m.PersonSetting.Size()))
		n3, err := m.PersonSetting.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.MessageSetting != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(m.MessageSetting.Size()))
		n4, err := m.MessageSetting.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TeamChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Type != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TeamChatLogMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamChatLogMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TeamId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TeamId))
	}
	if len(m.ChatInfo) > 0 {
		for _, msg := range m.ChatInfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WithDrawInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithDrawInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LogId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TeamChatInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamChatInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FirstChat) > 0 {
		for _, msg := range m.FirstChat {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.LastChat) > 0 {
		for _, msg := range m.LastChat {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Count != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Count))
	}
	if len(m.ReLogIds) > 0 {
		for _, msg := range m.ReLogIds {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IsNoticeMessage != nil {
		dAtA[i] = 0x28
		i++
		if *m.IsNoticeMessage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TeamMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Type != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Type))
	}
	if len(m.PlayerList) > 0 {
		for _, num := range m.PlayerList {
			dAtA[i] = 0x18
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(num))
		}
	}
	if m.Value != nil {
		dAtA[i] = 0x20
		i++
		if *m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Value1 != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Value1)))
		i += copy(dAtA[i:], *m.Value1)
	}
	if m.IsAllNotice != nil {
		dAtA[i] = 0x30
		i++
		if *m.IsAllNotice {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.AllPlayerList) > 0 {
		for _, num := range m.AllPlayerList {
			dAtA[i] = 0x38
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(num))
		}
	}
	if m.Time != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Time))
	}
	if m.TeamId != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TeamId))
	}
	if len(m.Members) > 0 {
		for _, msg := range m.Members {
			dAtA[i] = 0x52
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LogId != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LogId))
	}
	if m.Account != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.Pos != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Pos))
	}
	if m.Name != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.AdminID != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.AdminID))
	}
	if m.AdminName != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.AdminName)))
		i += copy(dAtA[i:], *m.AdminName)
	}
	if m.SendTime != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.SendTime))
	}
	if m.ShowPos != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ShowPos))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NoticeMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoticeMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsAll != nil {
		dAtA[i] = 0x8
		i++
		if *m.IsAll {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.PlayerId) > 0 {
		for _, num := range m.PlayerId {
			dAtA[i] = 0x10
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TeamChatLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamChatLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LogId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LogId))
	}
	if m.TeamId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TeamId))
	}
	if m.Talker != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Talker))
	}
	if m.Time != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Time))
	}
	if m.Content != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.IsSave != nil {
		dAtA[i] = 0x30
		i++
		if *m.IsSave {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Type != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Type))
	}
	if m.TeamMessage != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(m.TeamMessage.Size()))
		n5, err := m.TeamMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.TeamAccount != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.TeamAccount)))
		i += copy(dAtA[i:], *m.TeamAccount)
	}
	if m.TeamName != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.TeamName)))
		i += copy(dAtA[i:], *m.TeamName)
	}
	if m.TalkerAccount != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.TalkerAccount)))
		i += copy(dAtA[i:], *m.TalkerAccount)
	}
	if m.TalkerName != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.TalkerName)))
		i += copy(dAtA[i:], *m.TalkerName)
	}
	if m.Cite != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Cite)))
		i += copy(dAtA[i:], *m.Cite)
	}
	if m.TeamLogId != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TeamLogId))
	}
	if m.NoticeInfo != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(m.NoticeInfo.Size()))
		n6, err := m.NoticeInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.TalkerHeadUrl != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.TalkerHeadUrl)))
		i += copy(dAtA[i:], *m.TalkerHeadUrl)
	}
	if m.QPId != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.QPId))
	}
	if m.SessionId != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.SessionId)))
		i += copy(dAtA[i:], *m.SessionId)
	}
	if m.Status != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Status))
	}
	if m.Types != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Types))
	}
	if m.Mark != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Mark)))
		i += copy(dAtA[i:], *m.Mark)
	}
	if len(m.PlayerIds) > 0 {
		for _, num := range m.PlayerIds {
			dAtA[i] = 0xb8
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(num))
		}
	}
	if m.IsWelComeWord != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsWelComeWord {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PersonalChatLogMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersonalChatLogMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Key)))
		i += copy(dAtA[i:], *m.Key)
	}
	if len(m.ChatInfo) > 0 {
		for _, msg := range m.ChatInfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PersonalChatLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersonalChatLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LogId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LogId))
	}
	if m.Talker != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Talker))
	}
	if m.TargetId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TargetId))
	}
	if m.Time != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Time))
	}
	if m.Content != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.IsRead != nil {
		dAtA[i] = 0x30
		i++
		if *m.IsRead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Type != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Type))
	}
	if m.Cite != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Cite)))
		i += copy(dAtA[i:], *m.Cite)
	}
	if m.SessionId != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.SessionId)))
		i += copy(dAtA[i:], *m.SessionId)
	}
	if m.Status != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Status))
	}
	if m.QPId != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.QPId))
	}
	if m.TalkLogId != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TalkLogId))
	}
	if m.Mark != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Mark)))
		i += copy(dAtA[i:], *m.Mark)
	}
	if m.TalkerAccount != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.TalkerAccount)))
		i += copy(dAtA[i:], *m.TalkerAccount)
	}
	if m.TalkerNickName != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.TalkerNickName)))
		i += copy(dAtA[i:], *m.TalkerNickName)
	}
	if m.TargetAccount != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.TargetAccount)))
		i += copy(dAtA[i:], *m.TargetAccount)
	}
	if m.TargetNickName != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.TargetNickName)))
		i += copy(dAtA[i:], *m.TargetNickName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AllTeamData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllTeamData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TeamId == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("TeamId")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TeamId))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PersonalTeamData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersonalTeamData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.TeamId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TeamId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.NickName != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.Position != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Position))
	}
	if m.Setting != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(m.Setting.Size()))
		n7, err := m.Setting.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.ReadId != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ReadId))
	}
	if m.Phone != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Phone)))
		i += copy(dAtA[i:], *m.Phone)
	}
	if m.WX != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.WX)))
		i += copy(dAtA[i:], *m.WX)
	}
	if m.ZFB != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.ZFB)))
		i += copy(dAtA[i:], *m.ZFB)
	}
	if m.Time != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Time))
	}
	if m.HeadIcon != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.HeadIcon)))
		i += copy(dAtA[i:], *m.HeadIcon)
	}
	if m.TeamChannel != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(m.TeamChannel.Size()))
		n8, err := m.TeamChannel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Channel != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Channel)))
		i += copy(dAtA[i:], *m.Channel)
	}
	if m.Status != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Status))
	}
	if m.Sex != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Sex))
	}
	if m.Signture != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Signture)))
		i += copy(dAtA[i:], *m.Signture)
	}
	if m.Photo != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Photo)))
		i += copy(dAtA[i:], *m.Photo)
	}
	if m.IsSave != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsSave {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TeamName != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.TeamName)))
		i += copy(dAtA[i:], *m.TeamName)
	}
	if m.QTX != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		if *m.QTX {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Account != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.PerNickName != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.PerNickName)))
		i += copy(dAtA[i:], *m.PerNickName)
	}
	if len(m.OperatorInfoPer) > 0 {
		for _, msg := range m.OperatorInfoPer {
			dAtA[i] = 0xa2
			i++
			dAtA[i] = 0x6
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Types != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Types))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OperatorInfoPer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorInfoPer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Operator != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Operator)))
		i += copy(dAtA[i:], *m.Operator)
	}
	if m.Time != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Time))
	}
	if m.Flag != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Flag))
	}
	if m.CloseTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CloseTime))
	}
	if m.Reason != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Reason)))
		i += copy(dAtA[i:], *m.Reason)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PersonalTeamSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersonalTeamSetting) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsTopChat != nil {
		dAtA[i] = 0x8
		i++
		if *m.IsTopChat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsNoDisturb != nil {
		dAtA[i] = 0x10
		i++
		if *m.IsNoDisturb {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsSaveAdd != nil {
		dAtA[i] = 0x18
		i++
		if *m.IsSaveAdd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RedPacketLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedPacketLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.RedPacketId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RedPacketId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.NickName != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.HeadUrl != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.HeadUrl)))
		i += copy(dAtA[i:], *m.HeadUrl)
	}
	if m.Money != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Money))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Sex != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Sex))
	}
	if m.IsSave != nil {
		dAtA[i] = 0x48
		i++
		if *m.IsSave {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RedPacketTotalInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedPacketTotalInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.RecTotalMoney != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RecTotalMoney))
	}
	if m.RecCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RecCount))
	}
	if m.LuckCnt != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LuckCnt))
	}
	if m.SendTotalMoney != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.SendTotalMoney))
	}
	if m.SendCount != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.SendCount))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RedPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedPacket) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Type != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Type))
	}
	if m.Sender != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Sender))
	}
	if m.SenderName != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.SenderName)))
		i += copy(dAtA[i:], *m.SenderName)
	}
	if m.SenderHead != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.SenderHead)))
		i += copy(dAtA[i:], *m.SenderHead)
	}
	if m.TargetId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TargetId))
	}
	if m.TotalMoney != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TotalMoney))
	}
	if m.TotalCount != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TotalCount))
	}
	if m.PerMoney != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PerMoney))
	}
	if m.Content != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.CurMoney != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CurMoney))
	}
	if m.CurCount != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CurCount))
	}
	if m.State != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.State))
	}
	if len(m.Packets) > 0 {
		for _, num := range m.Packets {
			dAtA[i] = 0x78
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(num))
		}
	}
	if len(m.Logs) > 0 {
		for _, msg := range m.Logs {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.PayPassWord != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.PayPassWord)))
		i += copy(dAtA[i:], *m.PayPassWord)
	}
	if len(m.PlayerList) > 0 {
		for _, num := range m.PlayerList {
			dAtA[i] = 0x90
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(num))
		}
	}
	if m.PayWay != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PayWay))
	}
	if m.BankCard != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.BankCard)))
		i += copy(dAtA[i:], *m.BankCard)
	}
	if m.OrderId != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.OrderId)))
		i += copy(dAtA[i:], *m.OrderId)
	}
	if m.LuckId != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LuckId))
	}
	if m.PayOrderInfo != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(m.PayOrderInfo.Size()))
		n9, err := m.PayOrderInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Sex != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Sex))
	}
	if m.OverTime != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.OverTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TransferMoney) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferMoney) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Sender != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Sender))
	}
	if m.TargetId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TargetId))
	}
	if m.Way != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Way))
	}
	if m.Card != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Card)))
		i += copy(dAtA[i:], *m.Card)
	}
	if m.Gold != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Gold))
	}
	if m.Content != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.State != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.State))
	}
	if m.PayPassWord != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.PayPassWord)))
		i += copy(dAtA[i:], *m.PayPassWord)
	}
	if m.OpenTime != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.OpenTime))
	}
	if m.OpenWay != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.OpenWay))
	}
	if m.OrderId != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.OrderId)))
		i += copy(dAtA[i:], *m.OrderId)
	}
	if m.PayOrderInfo != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(m.PayOrderInfo.Size()))
		n10, err := m.PayOrderInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.BankInfo != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.BankInfo)))
		i += copy(dAtA[i:], *m.BankInfo)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayOrderInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayOrderInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.ProduceName != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.ProduceName)))
		i += copy(dAtA[i:], *m.ProduceName)
	}
	if m.Amount != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Amount)))
		i += copy(dAtA[i:], *m.Amount)
	}
	if m.PayId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PayId))
	}
	if m.PayType != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PayType))
	}
	if m.PaySence != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PaySence))
	}
	if m.PayWay != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PayWay))
	}
	if m.PayTargetId != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PayTargetId))
	}
	if m.TotalCount != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TotalCount))
	}
	if m.Content != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.ExtendValue != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.ExtendValue)))
		i += copy(dAtA[i:], *m.ExtendValue)
	}
	if m.PayBankNo != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.PayBankNo)))
		i += copy(dAtA[i:], *m.PayBankNo)
	}
	if m.PayPassType != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PayPassType))
	}
	if m.ApkCode != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ApkCode))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayOrderResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayOrderResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0x8
		i++
		if *m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PayInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.PayInfo)))
		i += copy(dAtA[i:], *m.PayInfo)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerKeepReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerKeepReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TodayRegister != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TodayRegister))
	}
	if m.NextKeep != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.NextKeep))
	}
	if m.ThreeKeep != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ThreeKeep))
	}
	if m.FourKeep != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.FourKeep))
	}
	if m.FiveKeep != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.FiveKeep))
	}
	if m.SixKeep != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.SixKeep))
	}
	if m.SevenKeep != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.SevenKeep))
	}
	if m.EightKeep != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.EightKeep))
	}
	if m.NineKeep != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.NineKeep))
	}
	if m.TenKeep != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TenKeep))
	}
	if m.ElevenKeep != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ElevenKeep))
	}
	if m.TwelveKeep != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TwelveKeep))
	}
	if m.ThirteenKeep != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ThirteenKeep))
	}
	if m.FourteenKeep != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.FourteenKeep))
	}
	if m.FifteenKeep != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.FifteenKeep))
	}
	if m.SixteenKeep != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.SixteenKeep))
	}
	if m.SeventeenKeep != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.SeventeenKeep))
	}
	if m.EighteenKeep != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.EighteenKeep))
	}
	if m.NineteenKeep != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.NineteenKeep))
	}
	if m.TwentyKeep != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TwentyKeep))
	}
	if m.TwentyOneKeep != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TwentyOneKeep))
	}
	if m.TwentyTwoKeep != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TwentyTwoKeep))
	}
	if m.TwentyThreeKeep != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TwentyThreeKeep))
	}
	if m.TwentyFourKeep != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TwentyFourKeep))
	}
	if m.TwentyFiveKeep != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TwentyFiveKeep))
	}
	if m.TwentySixKeep != nil {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TwentySixKeep))
	}
	if m.TwentySevenKeep != nil {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TwentySevenKeep))
	}
	if m.TwentyEightKeep != nil {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TwentyEightKeep))
	}
	if m.TwentyNineKeep != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TwentyNineKeep))
	}
	if m.Thirtykeep != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Thirtykeep))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerOnlineReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerOnlineReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Clock0 != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Clock0))
	}
	if m.Clock1 != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Clock1))
	}
	if m.Clock2 != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Clock2))
	}
	if m.Clock3 != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Clock3))
	}
	if m.Clock4 != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Clock4))
	}
	if m.Clock5 != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Clock5))
	}
	if m.Clock6 != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Clock6))
	}
	if m.Clock7 != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Clock7))
	}
	if m.Clock8 != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Clock8))
	}
	if m.Clock9 != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Clock9))
	}
	if m.Clock10 != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Clock10))
	}
	if m.Clock11 != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Clock11))
	}
	if m.Clock12 != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Clock12))
	}
	if m.Clock13 != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Clock13))
	}
	if m.Clock14 != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Clock14))
	}
	if m.Clock15 != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Clock15))
	}
	if m.Clock16 != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Clock16))
	}
	if m.Clock17 != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Clock17))
	}
	if m.Clock18 != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Clock18))
	}
	if m.Clock19 != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Clock19))
	}
	if m.Clock20 != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Clock20))
	}
	if m.Clock21 != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Clock21))
	}
	if m.Clock22 != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Clock22))
	}
	if m.Clock23 != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Clock23))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ActivityReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FullPlayerCount != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.FullPlayerCount))
	}
	if m.NewBindCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.NewBindCount))
	}
	if m.NewInviteCount != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.NewInviteCount))
	}
	if m.NewPlayerCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.NewPlayerCount))
	}
	if m.PlayerCount != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerCount))
	}
	if m.LuckPlayerCount != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LuckPlayerCount))
	}
	if m.ShareTimes != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ShareTimes))
	}
	if m.TaskSquareCount != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TaskSquareCount))
	}
	if m.TaskRedPackCount != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TaskRedPackCount))
	}
	if m.TaskSignIn != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TaskSignIn))
	}
	if m.TaskShare != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TaskShare))
	}
	if m.CardHe != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CardHe))
	}
	if m.CardNing != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CardNing))
	}
	if m.CardMeng != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CardMeng))
	}
	if m.CardQu != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CardQu))
	}
	if m.CardLv != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CardLv))
	}
	if m.CardXing != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CardXing))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CoinProductReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinProductReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.ProductId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ProductId))
	}
	if m.ProductType != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ProductType))
	}
	if m.ProductName != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.ProductName)))
		i += copy(dAtA[i:], *m.ProductName)
	}
	if m.EffectiveTime != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.EffectiveTime))
	}
	if m.BuyNum != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.BuyNum))
	}
	if m.BuyCount != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.BuyCount))
	}
	if m.GiveNum != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.GiveNum))
	}
	if m.GiveCount != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.GiveCount))
	}
	if m.UserGiveNum != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.UserGiveNum))
	}
	if m.UserGiveCount != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.UserGiveCount))
	}
	if m.ActGiveNum != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ActGiveNum))
	}
	if m.ActGiveCount != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ActGiveCount))
	}
	if m.GoldSum != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.GoldSum))
	}
	if m.CoinSum != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CoinSum))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OnlineTimeLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnlineTimeLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.OnlineTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.OnlineTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerActiveReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerActiveReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreateTime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.RegisterCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RegisterCount))
	}
	if m.LoginCount != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LoginCount))
	}
	if m.SumOnlineTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.SumOnlineTime))
	}
	if m.AveOnlineTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.AveOnlineTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerBehaviorReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerBehaviorReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreateTime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.SendMsgCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.SendMsgCount))
	}
	if m.SendRedpacketPlayerCount != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.SendRedpacketPlayerCount))
	}
	if m.SendRedpacketCount != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.SendRedpacketCount))
	}
	if m.SendRedpacketMoney != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.SendRedpacketMoney))
	}
	if m.RobRedpacketPlayerCount != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RobRedpacketPlayerCount))
	}
	if m.RobRedpacketCount != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RobRedpacketCount))
	}
	if m.RobRedpacketMoney != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RobRedpacketMoney))
	}
	if m.TransferPlayerCount != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TransferPlayerCount))
	}
	if m.TransferCount != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TransferCount))
	}
	if m.TransferMoney != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TransferMoney))
	}
	if m.ShopOrderCount != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ShopOrderCount))
	}
	if m.ShopOrderMoney != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ShopOrderMoney))
	}
	if m.OneDialogue != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.OneDialogue))
	}
	if m.BindCard != nil {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.BindCard))
	}
	if m.Start != nil {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Start))
	}
	if m.Reply != nil {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Reply))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *InOutCashSumReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InOutCashSumReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreateTime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Recharge != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Recharge))
	}
	if m.Withdraw != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Withdraw))
	}
	if m.Redundant != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Redundant))
	}
	if m.RechargeTimes != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RechargeTimes))
	}
	if m.RechargeCount != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RechargeCount))
	}
	if m.WithdrawTimes != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.WithdrawTimes))
	}
	if m.WithdrawCount != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.WithdrawCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RegisterLoginReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterLoginReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreateTime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.RegSumCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RegSumCount))
	}
	if m.WxRegCount != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.WxRegCount))
	}
	if m.PhoneRegCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PhoneRegCount))
	}
	if m.ValidRegSumCount != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ValidRegSumCount))
	}
	if m.ValidWxRegCount != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ValidWxRegCount))
	}
	if m.ValidPhoneRegCount != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ValidPhoneRegCount))
	}
	if m.LoginSumCount != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LoginSumCount))
	}
	if m.LoginTimesCount != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LoginTimesCount))
	}
	if m.RealNameCount != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RealNameCount))
	}
	if m.BankCardCount != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.BankCardCount))
	}
	if m.PvCount != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PvCount))
	}
	if m.UvCount != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.UvCount))
	}
	if m.LabelCount != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LabelCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OperationChannelReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationChannelReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.ChannelNo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.ChannelNo)))
		i += copy(dAtA[i:], *m.ChannelNo)
	}
	if m.ChannelName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.ChannelName)))
		i += copy(dAtA[i:], *m.ChannelName)
	}
	if m.Cooperation != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Cooperation))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.RegCount != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RegCount))
	}
	if m.ValidRegCount != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ValidRegCount))
	}
	if m.LoginCount != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LoginCount))
	}
	if m.ActDevCount != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ActDevCount))
	}
	if m.ValidActDevCount != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ValidActDevCount))
	}
	if m.DownLoadCount != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.DownLoadCount))
	}
	if m.UvCount != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.UvCount))
	}
	if m.OnlineSum != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.OnlineSum))
	}
	if m.NextKeep != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.NextKeep))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.ChannelNo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.ChannelNo)))
		i += copy(dAtA[i:], *m.ChannelNo)
	}
	if m.ChannelName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.ChannelName)))
		i += copy(dAtA[i:], *m.ChannelName)
	}
	if m.Cooperation != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Cooperation))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.ChannelCost != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ChannelCost))
	}
	if m.ActCost != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ActCost))
	}
	if m.LoginCost != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LoginCost))
	}
	if m.RegCost != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RegCost))
	}
	if m.ROI != nil {
		dAtA[i] = 0x61
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.ROI))))
		i += 8
	}
	if m.RegRoiRate != nil {
		dAtA[i] = 0x69
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.RegRoiRate))))
		i += 8
	}
	if m.KeepRate != nil {
		dAtA[i] = 0x71
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.KeepRate))))
		i += 8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ArticleReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Types != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Types))
	}
	if m.Title != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.IsMain != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.IsMain))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.PushPlayer != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PushPlayer))
	}
	if m.Clicks != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Clicks))
	}
	if m.Jumps != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Jumps))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SquareReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SquareReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreateTime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.PlayerSubCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerSubCount))
	}
	if m.OperatSubCount != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.OperatSubCount))
	}
	if m.PlayerDelCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerDelCount))
	}
	if m.BackstageDelCount != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.BackstageDelCount))
	}
	if m.ZanCount != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ZanCount))
	}
	if m.BsZanCount != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.BsZanCount))
	}
	if m.PlayerComm != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerComm))
	}
	if m.OperatComm != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.OperatComm))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerLogLocationReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerLogLocationReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.DayTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.DayTime))
	}
	if m.Position != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Position)))
		i += copy(dAtA[i:], *m.Position)
	}
	if m.Piece != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Piece)))
		i += copy(dAtA[i:], *m.Piece)
	}
	if m.DeviceType != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.DeviceType))
	}
	if m.Count != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RecallReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecallReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreateTime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Pv != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Pv))
	}
	if m.Uv != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Uv))
	}
	if m.DownCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.DownCount))
	}
	if m.RecallCount != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RecallCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LocationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocationData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.X != nil {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.X))))
		i += 8
	}
	if m.Y != nil {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Y))))
		i += 8
	}
	if m.Province != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Province)))
		i += copy(dAtA[i:], *m.Province)
	}
	if m.City != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.City)))
		i += copy(dAtA[i:], *m.City)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AllLocationDate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllLocationDate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LocationData) > 0 {
		for _, msg := range m.LocationData {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GeneralQuota) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeneralQuota) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Min != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Min))
	}
	if m.Max != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Max))
	}
	if m.Q1 != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Q1))
	}
	if m.Q2 != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Q2))
	}
	if m.Q3 != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Q3))
	}
	if m.Q4 != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Q4))
	}
	if m.Q5 != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Q5))
	}
	if m.Q6 != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Q6))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayScene) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PaymentSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentSetting) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.FeeRate != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.FeeRate))
	}
	if m.Name != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Types != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Types))
	}
	if m.PlatformTax != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlatformTax))
	}
	if m.RealTax != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RealTax))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PaymentPlatform) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentPlatform) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Merchants != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Merchants)))
		i += copy(dAtA[i:], *m.Merchants)
	}
	if m.ApiHost != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.ApiHost)))
		i += copy(dAtA[i:], *m.ApiHost)
	}
	if m.Publickey != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Publickey)))
		i += copy(dAtA[i:], *m.Publickey)
	}
	if m.Privatekey != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Privatekey)))
		i += copy(dAtA[i:], *m.Privatekey)
	}
	if m.RetrunBack != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.RetrunBack)))
		i += copy(dAtA[i:], *m.RetrunBack)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlatformChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlatformChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Types != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Types))
	}
	if m.PlatformId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlatformId))
	}
	if m.PlatformName != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.PlatformName)))
		i += copy(dAtA[i:], *m.PlatformName)
	}
	if m.PayMin != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PayMin))
	}
	if m.PayMax != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PayMax))
	}
	if m.PayTypeId != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PayTypeId))
	}
	if m.PayTypeName != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.PayTypeName)))
		i += copy(dAtA[i:], *m.PayTypeName)
	}
	if m.PaymentSettingId != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PaymentSettingId))
	}
	if m.PaymentSettingName != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.PaymentSettingName)))
		i += copy(dAtA[i:], *m.PaymentSettingName)
	}
	if m.StopAmount != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.StopAmount))
	}
	if m.Weights != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Weights))
	}
	if m.Status != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Status))
	}
	if m.PaySceneId != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PaySceneId))
	}
	if m.PaySceneName != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.PaySceneName)))
		i += copy(dAtA[i:], *m.PaySceneName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AppPushMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppPushMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.SendState != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.SendState))
	}
	if m.SendTime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.SendTime))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Recipient != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Recipient))
	}
	if m.Title != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.Content != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.Operator != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Operator)))
		i += copy(dAtA[i:], *m.Operator)
	}
	if m.Status != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Status))
	}
	if m.JumpObject != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.JumpObject))
	}
	if m.JumpUrl != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.JumpUrl)))
		i += copy(dAtA[i:], *m.JumpUrl)
	}
	if len(m.Label) > 0 {
		for _, num := range m.Label {
			dAtA[i] = 0x88
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(num))
		}
	}
	if len(m.GrabTag) > 0 {
		for _, num := range m.GrabTag {
			dAtA[i] = 0x90
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(num))
		}
	}
	if len(m.CustomTag) > 0 {
		for _, num := range m.CustomTag {
			dAtA[i] = 0x98
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(num))
		}
	}
	if m.ObjectId != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ObjectId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HelpType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelpType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Icon != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Icon)))
		i += copy(dAtA[i:], *m.Icon)
	}
	if m.Title != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.Sort != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Sort))
	}
	if m.Optadmin != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Optadmin)))
		i += copy(dAtA[i:], *m.Optadmin)
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HelpMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelpMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Types != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Types))
	}
	if m.Title != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.IsHot != nil {
		dAtA[i] = 0x20
		i++
		if *m.IsHot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Optadmin != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Optadmin)))
		i += copy(dAtA[i:], *m.Optadmin)
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.Sort != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Sort))
	}
	if m.Content != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerComplaint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerComplaint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.RespondentId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RespondentId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Types != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Types))
	}
	if m.Type != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Type))
	}
	if m.Content != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.Operator != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Operator)))
		i += copy(dAtA[i:], *m.Operator)
	}
	if m.ReContent != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.ReContent)))
		i += copy(dAtA[i:], *m.ReContent)
	}
	if m.Status != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Status))
	}
	if m.ReTime != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ReTime))
	}
	if m.OrderId != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.OrderId))
	}
	if m.GoodsId != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.GoodsId))
	}
	if m.PlayerAcount != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.PlayerAcount)))
		i += copy(dAtA[i:], *m.PlayerAcount)
	}
	if m.RespondentAcount != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.RespondentAcount)))
		i += copy(dAtA[i:], *m.RespondentAcount)
	}
	if len(m.Icon) > 0 {
		for _, s := range m.Icon {
			dAtA[i] = 0x9a
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Reason != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Reason))
	}
	if m.Name != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Phone != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Phone)))
		i += copy(dAtA[i:], *m.Phone)
	}
	if m.DynamicId != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.DynamicId))
	}
	if m.TopicId != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TopicId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NearByGreetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NearByGreetInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if len(m.NearByInfo) > 0 {
		for _, msg := range m.NearByInfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NearByInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NearByInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("PlayerId")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Content != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.IsAdd != nil {
		dAtA[i] = 0x18
		i++
		if *m.IsAdd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Time != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Time))
	}
	if m.IsRead != nil {
		dAtA[i] = 0x28
		i++
		if *m.IsRead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SystemNotice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemNotice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Title != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.Content != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.UserType != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.UserType))
	}
	if m.Type != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Type))
	}
	if m.CountType != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CountType))
	}
	if m.State != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.State))
	}
	if m.Operator != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Operator)))
		i += copy(dAtA[i:], *m.Operator)
	}
	if m.EditTime != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.EditTime))
	}
	if m.SendState != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.SendState))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Assistant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Assistant) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("id")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.PlayerId == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("player_id")
	} else {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.CreateTime == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("create_time")
	} else {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Type == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("type")
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Type))
	}
	if m.FriendType != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.FriendType))
	}
	if m.Nickname != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Nickname)))
		i += copy(dAtA[i:], *m.Nickname)
	}
	if m.Avatar != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Avatar)))
		i += copy(dAtA[i:], *m.Avatar)
	}
	if m.Account != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.Phone != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Phone)))
		i += copy(dAtA[i:], *m.Phone)
	}
	if m.Content != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.Title != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.AddFriendType != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.AddFriendType))
	}
	if m.Signature != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Signature)))
		i += copy(dAtA[i:], *m.Signature)
	}
	if len(m.Photo) > 0 {
		for _, s := range m.Photo {
			dAtA[i] = 0x72
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Pid != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Pid))
	}
	if m.Sex != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Sex))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SysParameter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SysParameter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.TransferOneMax != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TransferOneMax))
	}
	if m.TransferOneDayMax != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TransferOneDayMax))
	}
	if m.IsTransfer != nil {
		dAtA[i] = 0x20
		i++
		if *m.IsTransfer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsRedPacket != nil {
		dAtA[i] = 0x28
		i++
		if *m.IsRedPacket {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RedPacketMin != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RedPacketMin))
	}
	if m.RedPacketMax != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RedPacketMax))
	}
	if m.TeamRedPacketNum != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TeamRedPacketNum))
	}
	if m.IsRecharge != nil {
		dAtA[i] = 0x50
		i++
		if *m.IsRecharge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RechargeMin != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RechargeMin))
	}
	if m.RechargeMax != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RechargeMax))
	}
	if m.IsWithdrawal != nil {
		dAtA[i] = 0x78
		i++
		if *m.IsWithdrawal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WithdrawalMin != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.WithdrawalMin))
	}
	if m.WithdrawalMax != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.WithdrawalMax))
	}
	if m.OutSum != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.OutSum))
	}
	if m.OutTimes != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.OutTimes))
	}
	if m.RiskControl != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RiskControl))
	}
	if m.IsQRcode != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsQRcode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ExpiredDay != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ExpiredDay))
	}
	if m.MavatarCount != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.MavatarCount))
	}
	if m.WavatarCount != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.WavatarCount))
	}
	if m.InterestMin != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.InterestMin))
	}
	if m.InterestMax != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.InterestMax))
	}
	if len(m.TextModerations) > 0 {
		for _, msg := range m.TextModerations {
			dAtA[i] = 0xd2
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ImageModerations) > 0 {
		for _, msg := range m.ImageModerations {
			dAtA[i] = 0xda
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ZanScore != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ZanScore))
	}
	if m.CoinScore != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CoinScore))
	}
	if m.CommentScore != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CommentScore))
	}
	if m.HotScore != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.HotScore))
	}
	if m.DampRatio != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.DampRatio))
	}
	if m.RechargeTime != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RechargeTime))
	}
	if m.RechargeTimes != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RechargeTimes))
	}
	if m.RechargeGoldRate != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RechargeGoldRate))
	}
	if m.RechargeGold != nil {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RechargeGold))
	}
	if m.WithdrawalTime != nil {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.WithdrawalTime))
	}
	if m.WithdrawalTimes != nil {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.WithdrawalTimes))
	}
	if m.WithdrawalGoldRate != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.WithdrawalGoldRate))
	}
	if m.WithdrawalGold != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.WithdrawalGold))
	}
	if len(m.PhoneList) > 0 {
		for _, s := range m.PhoneList {
			dAtA[i] = 0xfa
			i++
			dAtA[i] = 0x3
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.CommentHotScore != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CommentHotScore))
	}
	if m.CommentHotCount != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CommentHotCount))
	}
	if len(m.PushSet) > 0 {
		for _, msg := range m.PushSet {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x4
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.EsOneBetGold != nil {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.EsOneBetGold))
	}
	if m.EsOneDayBetGold != nil {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.EsOneDayBetGold))
	}
	if m.EsDaySumGold != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.EsDaySumGold))
	}
	if m.StrangerChatCount != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.StrangerChatCount))
	}
	if m.DayMaxMatchTimes != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.DayMaxMatchTimes))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PushSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushSettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Title != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.ObjId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ObjId))
	}
	if m.ObjTitle != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.ObjTitle)))
		i += copy(dAtA[i:], *m.ObjTitle)
	}
	if m.ObjContent != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.ObjContent)))
		i += copy(dAtA[i:], *m.ObjContent)
	}
	if m.IsPush != nil {
		dAtA[i] = 0x30
		i++
		if *m.IsPush {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LoginRegisterInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginRegisterInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Type))
	}
	if m.Time != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Time))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Channel != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Channel)))
		i += copy(dAtA[i:], *m.Channel)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OperationChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.ChannelNo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.ChannelNo)))
		i += copy(dAtA[i:], *m.ChannelNo)
	}
	if m.Type != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Type)))
		i += copy(dAtA[i:], *m.Type)
	}
	if m.CompanyName != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.CompanyName)))
		i += copy(dAtA[i:], *m.CompanyName)
	}
	if m.Cooperation != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Cooperation))
	}
	if m.Price != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Price))
	}
	if m.Rate != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Rate))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.DpSet != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(m.DpSet.Size()))
		n11, err := m.DpSet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Status != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Status))
	}
	if m.AddCount != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.AddCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DownPage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownPage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ModId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ModId))
	}
	if m.Icon != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Icon)))
		i += copy(dAtA[i:], *m.Icon)
	}
	if len(m.Banner) > 0 {
		for _, s := range m.Banner {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.BtnText != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.BtnText)))
		i += copy(dAtA[i:], *m.BtnText)
	}
	if m.Floot != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Floot)))
		i += copy(dAtA[i:], *m.Floot)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IpLibrary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpLibrary) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ip != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Ip)))
		i += copy(dAtA[i:], *m.Ip)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *InterestTag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterestTag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Icon != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Icon)))
		i += copy(dAtA[i:], *m.Icon)
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.Sort != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Sort))
	}
	if m.PopIcon != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.PopIcon)))
		i += copy(dAtA[i:], *m.PopIcon)
	}
	if m.InterestType != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.InterestType))
	}
	if m.InterestName != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.InterestName))
	}
	if m.Status != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Status))
	}
	if m.PlayTime != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayTime))
	}
	if m.Count != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Count))
	}
	if m.SortName != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.SortName)))
		i += copy(dAtA[i:], *m.SortName)
	}
	if m.UnReviewCount != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.UnReviewCount))
	}
	if m.UseCount != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.UseCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *InterestType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterestType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.Sort != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Sort))
	}
	if m.Status != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Status))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *InterestGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterestGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if len(m.Group) > 0 {
		for _, num := range m.Group {
			dAtA[i] = 0x18
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(num))
		}
	}
	if m.PopIcon != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.PopIcon)))
		i += copy(dAtA[i:], *m.PopIcon)
	}
	if m.PlayTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Tweets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tweets) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ID))
	}
	if len(m.List) > 0 {
		for _, num := range m.List {
			dAtA[i] = 0x10
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(num))
		}
	}
	if m.UserType != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.UserType))
	}
	if m.SendState != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.SendState))
	}
	if m.SendTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.SendTime))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Operator != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Operator)))
		i += copy(dAtA[i:], *m.Operator)
	}
	if m.State != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.State))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.UpdateTime))
	}
	if len(m.Article) > 0 {
		for _, msg := range m.Article {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.CatchLabel) > 0 {
		for _, num := range m.CatchLabel {
			dAtA[i] = 0x60
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(num))
		}
	}
	if len(m.CustomLabel) > 0 {
		for _, num := range m.CustomLabel {
			dAtA[i] = 0x68
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(num))
		}
	}
	if m.AllLabel != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.AllLabel))
	}
	if m.JgPush != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.JgPush))
	}
	if m.Validity != nil {
		dAtA[i] = 0x81
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Validity))))
		i += 8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RegisterPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ID))
	}
	if m.AllLabel != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.AllLabel))
	}
	if len(m.List) > 0 {
		for _, num := range m.List {
			dAtA[i] = 0x18
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(num))
		}
	}
	if len(m.CatchLabel) > 0 {
		for _, num := range m.CatchLabel {
			dAtA[i] = 0x20
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(num))
		}
	}
	if len(m.CustomLabel) > 0 {
		for _, num := range m.CustomLabel {
			dAtA[i] = 0x28
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(num))
		}
	}
	if m.UserType != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.UserType))
	}
	if m.State != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.State))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Operator != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Operator)))
		i += copy(dAtA[i:], *m.Operator)
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.UpdateTime))
	}
	if len(m.Article) > 0 {
		for _, msg := range m.Article {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Article) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Article) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ID))
	}
	if m.ArticleType != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ArticleType))
	}
	if m.Title != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.Icon != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Icon)))
		i += copy(dAtA[i:], *m.Icon)
	}
	if m.Content != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.EditTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.EditTime))
	}
	if m.State != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.State))
	}
	if m.IsMain != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.IsMain))
	}
	if m.Location != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Location))
	}
	if m.Operator != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Operator)))
		i += copy(dAtA[i:], *m.Operator)
	}
	if m.TransArticleUrl != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.TransArticleUrl)))
		i += copy(dAtA[i:], *m.TransArticleUrl)
	}
	if m.Sort != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Sort))
	}
	if m.Profile != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Profile)))
		i += copy(dAtA[i:], *m.Profile)
	}
	if m.ReadedNum != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ReadedNum))
	}
	if m.ReadedNumVirtual != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ReadedNumVirtual))
	}
	if m.ReadedBase != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ReadedBase))
	}
	if m.ZanNum != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ZanNum))
	}
	if m.ReadingNum != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ReadingNum))
	}
	if m.IsZan != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsZan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Comments) > 0 {
		for _, msg := range m.Comments {
			dAtA[i] = 0xaa
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CommentNum != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CommentNum))
	}
	if m.ObjectId != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ObjectId))
	}
	if m.ObjPlayerId != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ObjPlayerId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ArticleZan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleZan) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.ArticleId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ArticleId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Name != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.HeadUrl != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.HeadUrl)))
		i += copy(dAtA[i:], *m.HeadUrl)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ArticleComment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleComment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.ArticleId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ArticleId))
	}
	if m.Content != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Name != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.HeadUrl != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.HeadUrl)))
		i += copy(dAtA[i:], *m.HeadUrl)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Status != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Status))
	}
	if m.Account != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.Note != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Note)))
		i += copy(dAtA[i:], *m.Note)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CustomTag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomTag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CrawlWords) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrawlWords) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.GrabTag != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.GrabTag))
	}
	if m.Count != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GrabTag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrabTag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Count != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SystemLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.WordPerSonalId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.WordPerSonalId))
	}
	if m.WordTeamId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.WordTeamId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerCrawlWords) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerCrawlWords) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if len(m.Words) > 0 {
		for _, msg := range m.Words {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PosDeviceCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PosDeviceCode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreateTime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.DeviceCode != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.DeviceCode)))
		i += copy(dAtA[i:], *m.DeviceCode)
	}
	if m.Channle != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Channle)))
		i += copy(dAtA[i:], *m.Channle)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PosDeviceIdfa) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PosDeviceIdfa) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DeviceIdfa != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.DeviceIdfa)))
		i += copy(dAtA[i:], *m.DeviceIdfa)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Source != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Source)))
		i += copy(dAtA[i:], *m.Source)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerTalkLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerTalkLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.TargetId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TargetId))
	}
	if m.Connect != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Connect)))
		i += copy(dAtA[i:], *m.Connect)
	}
	if len(m.Words) > 0 {
		for _, s := range m.Words {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.EvilType != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.EvilType))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DirtyWords) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirtyWords) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Word != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Word)))
		i += copy(dAtA[i:], *m.Word)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Signature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Title != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IMmessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IMmessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Title != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if len(m.Content) > 0 {
		for _, msg := range m.Content {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Account != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.NickName != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.HeadIcon != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.HeadIcon)))
		i += copy(dAtA[i:], *m.HeadIcon)
	}
	if m.WaiterId != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.WaiterId))
	}
	if m.WaiterName != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.WaiterName)))
		i += copy(dAtA[i:], *m.WaiterName)
	}
	if m.OriginalId != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.OriginalId))
	}
	if m.Status != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Status))
	}
	if m.Cnew != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Cnew))
	}
	if m.Snew != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Snew))
	}
	if m.Grade != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Grade))
	}
	if m.SumContent != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.SumContent))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IMcontent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IMcontent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sendtime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Sendtime))
	}
	if m.Mtype != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Mtype))
	}
	if m.Messages != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Messages)))
		i += copy(dAtA[i:], *m.Messages)
	}
	if m.Ctype != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Ctype))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WaiterPerformance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WaiterPerformance) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.WaiterId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.WaiterId))
	}
	if m.WaiterName != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.WaiterName)))
		i += copy(dAtA[i:], *m.WaiterName)
	}
	if m.WaiterRole != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.WaiterRole))
	}
	if m.ConNum != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ConNum))
	}
	if m.GradeNum != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.GradeNum))
	}
	if m.SumGrade != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.SumGrade))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WaiterFAQ) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WaiterFAQ) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Title != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.Content != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if len(m.KeyWord) > 0 {
		for _, s := range m.KeyWord {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Clicks != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Clicks))
	}
	if m.Status != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Status))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WaiterFastReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WaiterFastReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Content != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.Status != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Status))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerFreezeLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerFreezeLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.Account != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Status != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Status))
	}
	if m.Note != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Note)))
		i += copy(dAtA[i:], *m.Note)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerCancleAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerCancleAccount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Account != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.Phone != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Phone)))
		i += copy(dAtA[i:], *m.Phone)
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.RealName != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.RealName)))
		i += copy(dAtA[i:], *m.RealName)
	}
	if m.PeopleId != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.PeopleId)))
		i += copy(dAtA[i:], *m.PeopleId)
	}
	if m.PeopleIdBeforeUrl != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.PeopleIdBeforeUrl)))
		i += copy(dAtA[i:], *m.PeopleIdBeforeUrl)
	}
	if m.PeopleIdBackUrl != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.PeopleIdBackUrl)))
		i += copy(dAtA[i:], *m.PeopleIdBackUrl)
	}
	if m.PeopleIdHandUrl != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.PeopleIdHandUrl)))
		i += copy(dAtA[i:], *m.PeopleIdHandUrl)
	}
	if m.Status != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Status))
	}
	if m.FinishTime != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.FinishTime))
	}
	if m.Note != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Note)))
		i += copy(dAtA[i:], *m.Note)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CancelAccountList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelAccountList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Phone != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Phone)))
		i += copy(dAtA[i:], *m.Phone)
	}
	if m.FinishTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.FinishTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Activity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Activity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Title != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.StartTime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.EndTime))
	}
	if m.Status != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Status))
	}
	if m.Types != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Types))
	}
	if m.OpenTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.OpenTime))
	}
	if m.CloseTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CloseTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Props) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Props) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Status != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Status))
	}
	if m.Count != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Count))
	}
	if m.ActivityId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ActivityId))
	}
	if m.Rate != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Rate))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DayProps) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DayProps) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Count != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Count))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerProps) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerProps) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.PropsId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PropsId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.ExpiredTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ExpiredTime))
	}
	if m.Status != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Status))
	}
	if m.Count != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerUsePropsLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerUsePropsLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.PropsId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PropsId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.RevPlayerId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RevPlayerId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Types != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Types))
	}
	if m.Count != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Count))
	}
	if m.HeadIcon != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.HeadIcon)))
		i += copy(dAtA[i:], *m.HeadIcon)
	}
	if m.NickName != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LuckyPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LuckyPlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.LuckyCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LuckyCount))
	}
	if m.IsFull != nil {
		dAtA[i] = 0x18
		i++
		if *m.IsFull {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FullTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.FullTime))
	}
	if m.LuckyMoney != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LuckyMoney))
	}
	if m.IsOpen != nil {
		dAtA[i] = 0x30
		i++
		if *m.IsOpen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.OpenTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.OpenTime))
	}
	if m.IsNewLucky != nil {
		dAtA[i] = 0x40
		i++
		if *m.IsNewLucky {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FullPlaces != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.FullPlaces))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LuckyPlayerRelated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LuckyPlayerRelated) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.FriendPhone != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.FriendPhone)))
		i += copy(dAtA[i:], *m.FriendPhone)
	}
	if m.RelatedTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RelatedTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PropsRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PropsRate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreateTime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if len(m.Rate) > 0 {
		for _, msg := range m.Rate {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LuckySysFullCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LuckySysFullCount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.FullCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.FullCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DataCountry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataCountry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.Code != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Code)))
		i += copy(dAtA[i:], *m.Code)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DataArea) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataArea) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.Country != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Country)))
		i += copy(dAtA[i:], *m.Country)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DataRegion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataRegion) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.Code != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Code)))
		i += copy(dAtA[i:], *m.Code)
	}
	if m.Country != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Country)))
		i += copy(dAtA[i:], *m.Country)
	}
	if m.Area != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Area)))
		i += copy(dAtA[i:], *m.Area)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DataCity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataCity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.Code != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Code)))
		i += copy(dAtA[i:], *m.Code)
	}
	if m.Country != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Country)))
		i += copy(dAtA[i:], *m.Country)
	}
	if m.Area != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Area)))
		i += copy(dAtA[i:], *m.Area)
	}
	if m.Region != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Region)))
		i += copy(dAtA[i:], *m.Region)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReadDynamicDevice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadDynamicDevice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.Code != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Code)))
		i += copy(dAtA[i:], *m.Code)
	}
	if m.LogId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LogId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdvLogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvLogReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.AdvId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.AdvId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.OpType != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.OpType))
	}
	if m.OpTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.OpTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KsPosAdvIdfa) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KsPosAdvIdfa) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CodeMd5 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.CodeMd5)))
		i += copy(dAtA[i:], *m.CodeMd5)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.AdvId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.AdvId))
	}
	if m.OsType != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.OsType))
	}
	if m.Ip != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Ip)))
		i += copy(dAtA[i:], *m.Ip)
	}
	if m.ScenesId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ScenesId))
	}
	if m.Callback != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Callback)))
		i += copy(dAtA[i:], *m.Callback)
	}
	if m.IsActive != nil {
		dAtA[i] = 0x40
		i++
		if *m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ActiveTime != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ActiveTime))
	}
	if m.IsRegister != nil {
		dAtA[i] = 0x50
		i++
		if *m.IsRegister {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RegisterTime != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RegisterTime))
	}
	if m.Platform != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Platform)))
		i += copy(dAtA[i:], *m.Platform)
	}
	if m.Code != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Code)))
		i += copy(dAtA[i:], *m.Code)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *VideoVoiceDurationLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoVoiceDurationLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.Types != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Types))
	}
	if m.Duration != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Duration))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.SendId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.SendId))
	}
	if m.TargetId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TargetId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RecallPlayerLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecallPlayerLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.PlayerId == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("PlayerId")
	} else {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.NickName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.Account != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.RecallTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RecallTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NearSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NearSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Icon != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Icon)))
		i += copy(dAtA[i:], *m.Icon)
	}
	if m.JumpType != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.JumpType))
	}
	if m.JumpObjId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.JumpObjId))
	}
	if m.JumpObject != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.JumpObject))
	}
	if m.JumpUrl != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.JumpUrl)))
		i += copy(dAtA[i:], *m.JumpUrl)
	}
	if m.Weights != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Weights))
	}
	if m.Status != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Status))
	}
	if m.JumpStyle != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.JumpStyle))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NearSessionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NearSessionList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.SendPlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.SendPlayerId))
	}
	if m.ReceivePlayerId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ReceivePlayerId))
	}
	if m.Status != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Status))
	}
	if m.IsRead != nil {
		dAtA[i] = 0x28
		i++
		if *m.IsRead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Content != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.ContentType != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ContentType))
	}
	if m.ClientUnique != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.ClientUnique)))
		i += copy(dAtA[i:], *m.ClientUnique)
	}
	if m.PropsId != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PropsId))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NearMessageNewLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NearMessageNewLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.SendPlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.SendPlayerId))
	}
	if m.ReceivePlayerId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ReceivePlayerId))
	}
	if m.Content != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.ContentType != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ContentType))
	}
	if m.Status != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Status))
	}
	if m.IsRead != nil {
		dAtA[i] = 0x38
		i++
		if *m.IsRead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.IsFirst != nil {
		dAtA[i] = 0x50
		i++
		if *m.IsFirst {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChatSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatSession) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.Type != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Type))
	}
	if len(m.PlayerIds) > 0 {
		for _, num := range m.PlayerIds {
			dAtA[i] = 0x18
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(num))
		}
	}
	if m.SessionName != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.SessionName)))
		i += copy(dAtA[i:], *m.SessionName)
	}
	if m.SessionHeadUrl != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.SessionHeadUrl)))
		i += copy(dAtA[i:], *m.SessionHeadUrl)
	}
	if m.MaxLogId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.MaxLogId))
	}
	if len(m.ReadInfo) > 0 {
		for _, msg := range m.ReadInfo {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintTableStruct(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TeamName != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.TeamName)))
		i += copy(dAtA[i:], *m.TeamName)
	}
	if m.Topic != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Topic)))
		i += copy(dAtA[i:], *m.Topic)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReadLogInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadLogInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.ReadId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ReadId))
	}
	if m.LogId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LogId))
	}
	if m.TalkNum != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.TalkNum))
	}
	if m.LastTalkTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LastTalkTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NearReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NearReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.AdvId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.AdvId))
	}
	if m.PvCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PvCount))
	}
	if m.UvCount != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.UvCount))
	}
	if m.Clicks != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Clicks))
	}
	if m.ClickPlayers != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ClickPlayers))
	}
	if m.Near != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(m.Near.Size()))
		n12, err := m.Near.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CommStrId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommStrId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESportCoinRecharge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportCoinRecharge) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.RechargeCoin != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RechargeCoin))
	}
	if m.OrderId != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.OrderId)))
		i += copy(dAtA[i:], *m.OrderId)
	}
	if m.SourceType != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.SourceType))
	}
	if m.Note != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Note)))
		i += copy(dAtA[i:], *m.Note)
	}
	if m.ExtendLog != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(m.ExtendLog.Size()))
		n13, err := m.ExtendLog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ButtonClickReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ButtonClickReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreateTime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.AgreementYes != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.AgreementYes))
	}
	if m.AgreementNo != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.AgreementNo))
	}
	if m.Phone != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Phone))
	}
	if m.WeChat != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.WeChat))
	}
	if m.OneClick != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.OneClick))
	}
	if m.OneClickCount != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.OneClickCount))
	}
	if m.OtherClick != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.OtherClick))
	}
	if m.LoginBack != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LoginBack))
	}
	if m.SendCode != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.SendCode))
	}
	if m.ReSendCode != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ReSendCode))
	}
	if m.InPhoneBack != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.InPhoneBack))
	}
	if m.InCodeBack != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.InCodeBack))
	}
	if m.InfoBack != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.InfoBack))
	}
	if m.InNmBtnCLick != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.InNmBtnCLick))
	}
	if m.InNmBtnCount != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.InNmBtnCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ButtonClickLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ButtonClickLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Type != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PageRegLogReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageRegLogReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Channel != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Channel)))
		i += copy(dAtA[i:], *m.Channel)
	}
	if m.DicType != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.DicType))
	}
	if m.LoginTimes != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LoginTimes))
	}
	if m.LoginCount != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.LoginCount))
	}
	if m.OneLoginTimes != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.OneLoginTimes))
	}
	if m.OneLoginCount != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.OneLoginCount))
	}
	if m.WxLoginTimes != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.WxLoginTimes))
	}
	if m.WxLoginCount != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.WxLoginCount))
	}
	if m.PhoneRegTimes != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PhoneRegTimes))
	}
	if m.PhoneRegCount != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PhoneRegCount))
	}
	if m.RegCodeTimes != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RegCodeTimes))
	}
	if m.RegCodeCount != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RegCodeCount))
	}
	if m.UseInfoTimes != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.UseInfoTimes))
	}
	if m.UseInfoCount != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.UseInfoCount))
	}
	if m.IntWallTimes != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.IntWallTimes))
	}
	if m.IntWallCount != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.IntWallCount))
	}
	if m.RecPageTimes != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RecPageTimes))
	}
	if m.RecPageCount != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.RecPageCount))
	}
	if m.ActDevCount != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ActDevCount))
	}
	if m.ValidActDevCount != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.ValidActDevCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PageRegLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageRegLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Code != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Code)))
		i += copy(dAtA[i:], *m.Code)
	}
	if m.DicType != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.DicType))
	}
	if m.Channel != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Channel)))
		i += copy(dAtA[i:], *m.Channel)
	}
	if m.Type != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerOperate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerOperate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Type != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IndexTips) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexTips) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Title != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.Weights != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Weights))
	}
	if m.Status != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Status))
	}
	if m.AdvId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.AdvId))
	}
	if m.Types != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Types))
	}
	if m.BKUrl != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.BKUrl)))
		i += copy(dAtA[i:], *m.BKUrl)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PopSuspend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PopSuspend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.Id))
	}
	if m.Title != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.IsPop != nil {
		dAtA[i] = 0x18
		i++
		if *m.IsPop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsSuspend != nil {
		dAtA[i] = 0x20
		i++
		if *m.IsSuspend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AdvId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStruct(dAtA, i, uint64(*m.AdvId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTableStruct(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ServerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != nil {
		n += 1 + sovTableStruct(uint64(*m.Sid))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovTableStruct(uint64(*m.Type))
	}
	if m.ExternalIp != nil {
		l = len(*m.ExternalIp)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.ClientWSPort != nil {
		n += 1 + sovTableStruct(uint64(*m.ClientWSPort))
	}
	if m.ClientTCPPort != nil {
		n += 1 + sovTableStruct(uint64(*m.ClientTCPPort))
	}
	if m.ClientApiPort != nil {
		n += 1 + sovTableStruct(uint64(*m.ClientApiPort))
	}
	if m.ServerApiPort != nil {
		n += 1 + sovTableStruct(uint64(*m.ServerApiPort))
	}
	if m.WebApiPort != nil {
		n += 1 + sovTableStruct(uint64(*m.WebApiPort))
	}
	if m.BackStageApiPort != nil {
		n += 1 + sovTableStruct(uint64(*m.BackStageApiPort))
	}
	if m.State != nil {
		n += 1 + sovTableStruct(uint64(*m.State))
	}
	if m.ConNum != nil {
		n += 1 + sovTableStruct(uint64(*m.ConNum))
	}
	if m.Version != nil {
		l = len(*m.Version)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.InternalIP != nil {
		l = len(*m.InternalIP)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserGoldReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogId != nil {
		n += 1 + sovTableStruct(uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.Vip != nil {
		n += 1 + sovTableStruct(uint64(*m.Vip))
	}
	if m.ParentId != nil {
		n += 1 + sovTableStruct(uint64(*m.ParentId))
	}
	if m.Gold != nil {
		n += 1 + sovTableStruct(uint64(*m.Gold))
	}
	if m.Profit != nil {
		n += 1 + sovTableStruct(uint64(*m.Profit))
	}
	if m.Recharge != nil {
		n += 1 + sovTableStruct(uint64(*m.Recharge))
	}
	if m.RechargeCount != nil {
		n += 1 + sovTableStruct(uint64(*m.RechargeCount))
	}
	if m.RechargeReturn != nil {
		n += 1 + sovTableStruct(uint64(*m.RechargeReturn))
	}
	if m.TxAmount != nil {
		n += 1 + sovTableStruct(uint64(*m.TxAmount))
	}
	if m.CellScore != nil {
		n += 1 + sovTableStruct(uint64(*m.CellScore))
	}
	if m.RealWin != nil {
		n += 1 + sovTableStruct(uint64(*m.RealWin))
	}
	if m.Revenue != nil {
		n += 1 + sovTableStruct(uint64(*m.Revenue))
	}
	if m.ReturnReward != nil {
		n += 1 + sovTableStruct(uint64(*m.ReturnReward))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.GameCount != nil {
		n += 2 + sovTableStruct(uint64(*m.GameCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReportJob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Report != nil {
		l = len(*m.Report)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Time != nil {
		n += 1 + sovTableStruct(uint64(*m.Time))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RolePower) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.RoleName != nil {
		l = len(*m.RoleName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if len(m.MenuIds) > 0 {
		for _, s := range m.MenuIds {
			l = len(s)
			n += 1 + l + sovTableStruct(uint64(l))
		}
	}
	if m.RoleType != nil {
		n += 1 + sovTableStruct(uint64(*m.RoleType))
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Manager) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Site != nil {
		l = len(*m.Site)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Password != nil {
		l = len(*m.Password)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Role != nil {
		n += 1 + sovTableStruct(uint64(*m.Role))
	}
	if m.RealName != nil {
		l = len(*m.RealName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Phone != nil {
		l = len(*m.Phone)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovTableStruct(uint64(*m.Status))
	}
	if m.IsOnlie != nil {
		n += 2
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.LoginCount != nil {
		n += 1 + sovTableStruct(uint64(*m.LoginCount))
	}
	if m.PrevLoginTime != nil {
		n += 1 + sovTableStruct(uint64(*m.PrevLoginTime))
	}
	if m.PrevLoginIP != nil {
		l = len(*m.PrevLoginIP)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.LastLoginTime != nil {
		n += 1 + sovTableStruct(uint64(*m.LastLoginTime))
	}
	if m.LastLoginIP != nil {
		l = len(*m.LastLoginIP)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Salt != nil {
		l = len(*m.Salt)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.RoleType != nil {
		n += 2 + sovTableStruct(uint64(*m.RoleType))
	}
	if len(m.BindIp) > 0 {
		for _, s := range m.BindIp {
			l = len(s)
			n += 2 + l + sovTableStruct(uint64(l))
		}
	}
	if m.IsGoogleVer != nil {
		n += 3
	}
	if m.GoogleSecret != nil {
		l = len(*m.GoogleSecret)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.Types != nil {
		n += 2 + sovTableStruct(uint64(*m.Types))
	}
	if m.IsLoginH5 != nil {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ManagerTypes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovTableStruct(uint64(*m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BackstageOptLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Ip != nil {
		l = len(*m.Ip)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if len(m.TargetUserId) > 0 {
		for _, e := range m.TargetUserId {
			n += 1 + sovTableStruct(uint64(e))
		}
	}
	if m.Remarks != nil {
		l = len(*m.Remarks)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.OptType != nil {
		l = len(*m.OptType)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Site != nil {
		l = len(*m.Site)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.F1 != nil {
		l = len(*m.F1)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.F2 != nil {
		l = len(*m.F2)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.F3 != nil {
		l = len(*m.F3)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.F4 != nil {
		l = len(*m.F4)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.F5 != nil {
		l = len(*m.F5)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.T1 != nil {
		n += 1 + sovTableStruct(uint64(*m.T1))
	}
	if m.T2 != nil {
		n += 2 + sovTableStruct(uint64(*m.T2))
	}
	if m.T3 != nil {
		n += 2 + sovTableStruct(uint64(*m.T3))
	}
	if m.T4 != nil {
		n += 2 + sovTableStruct(uint64(*m.T4))
	}
	if len(m.T5) > 0 {
		for _, e := range m.T5 {
			n += 2 + sovTableStruct(uint64(e))
		}
	}
	if len(m.T6) > 0 {
		for _, e := range m.T6 {
			n += 2 + sovTableStruct(uint64(e))
		}
	}
	if len(m.F6) > 0 {
		for _, s := range m.F6 {
			l = len(s)
			n += 2 + l + sovTableStruct(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FreezeIpList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.LoginIP != nil {
		l = len(*m.LoginIP)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.LoginAuth != nil {
		n += 2
	}
	if m.RegisterAuth != nil {
		n += 2
	}
	if m.Remark != nil {
		l = len(*m.Remark)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.HandleTime != nil {
		n += 1 + sovTableStruct(uint64(*m.HandleTime))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FreezeAccountList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.LoginAuth != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogLoginInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.State != nil {
		n += 1 + sovTableStruct(uint64(*m.State))
	}
	if m.PF != nil {
		l = len(*m.PF)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.LoginTime != nil {
		n += 1 + sovTableStruct(uint64(*m.LoginTime))
	}
	if m.RegTime != nil {
		n += 1 + sovTableStruct(uint64(*m.RegTime))
	}
	if m.LoginIP != nil {
		l = len(*m.LoginIP)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SourceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		n += 1 + sovTableStruct(uint64(*m.Key))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovTableStruct(uint64(*m.Type))
	}
	if m.Channel != nil {
		n += 1 + sovTableStruct(uint64(*m.Channel))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GoldChangeLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogId != nil {
		n += 1 + sovTableStruct(uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.ChangeGold != nil {
		n += 1 + sovTableStruct(uint64(*m.ChangeGold))
	}
	if m.SourceType != nil {
		n += 1 + sovTableStruct(uint64(*m.SourceType))
	}
	if m.SourceTypeName != nil {
		l = len(*m.SourceTypeName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.PayType != nil {
		n += 1 + sovTableStruct(uint64(*m.PayType))
	}
	if m.CurGold != nil {
		n += 1 + sovTableStruct(uint64(*m.CurGold))
	}
	if m.Gold != nil {
		n += 1 + sovTableStruct(uint64(*m.Gold))
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CoinChangeLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogId != nil {
		n += 1 + sovTableStruct(uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.ChangeCoin != nil {
		n += 1 + sovTableStruct(uint64(*m.ChangeCoin))
	}
	if m.SourceType != nil {
		n += 1 + sovTableStruct(uint64(*m.SourceType))
	}
	if m.SourceTypeName != nil {
		l = len(*m.SourceTypeName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.PayType != nil {
		n += 1 + sovTableStruct(uint64(*m.PayType))
	}
	if m.CurCoin != nil {
		n += 1 + sovTableStruct(uint64(*m.CurCoin))
	}
	if m.Coin != nil {
		n += 1 + sovTableStruct(uint64(*m.Coin))
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.CurBCoin != nil {
		n += 1 + sovTableStruct(uint64(*m.CurBCoin))
	}
	if m.BCoin != nil {
		n += 1 + sovTableStruct(uint64(*m.BCoin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESportCoinChangeLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogId != nil {
		n += 1 + sovTableStruct(uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.ChangeESportCoin != nil {
		n += 1 + sovTableStruct(uint64(*m.ChangeESportCoin))
	}
	if m.SourceType != nil {
		n += 1 + sovTableStruct(uint64(*m.SourceType))
	}
	if m.SourceTypeName != nil {
		l = len(*m.SourceTypeName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.PayType != nil {
		n += 1 + sovTableStruct(uint64(*m.PayType))
	}
	if m.CurESportCoin != nil {
		n += 1 + sovTableStruct(uint64(*m.CurESportCoin))
	}
	if m.ESportCoin != nil {
		n += 1 + sovTableStruct(uint64(*m.ESportCoin))
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GoldExtendLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RedPacketId != nil {
		n += 1 + sovTableStruct(uint64(*m.RedPacketId))
	}
	if m.OrderId != nil {
		l = len(*m.OrderId)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.MerchantId != nil {
		l = len(*m.MerchantId)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.BankName != nil {
		l = len(*m.BankName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.HeadIcon != nil {
		l = len(*m.HeadIcon)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.PayType != nil {
		n += 1 + sovTableStruct(uint64(*m.PayType))
	}
	if m.TransferText != nil {
		l = len(*m.TransferText)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.ServiceCharge != nil {
		n += 1 + sovTableStruct(uint64(*m.ServiceCharge))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Gold != nil {
		n += 1 + sovTableStruct(uint64(*m.Gold))
	}
	if m.Channel != nil {
		n += 1 + sovTableStruct(uint64(*m.Channel))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RechargeExtend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channeltype != nil {
		n += 1 + sovTableStruct(uint64(*m.Channeltype))
	}
	if m.PayChannel != nil {
		n += 1 + sovTableStruct(uint64(*m.PayChannel))
	}
	if m.PayType != nil {
		n += 1 + sovTableStruct(uint64(*m.PayType))
	}
	if m.CreateIP != nil {
		l = len(*m.CreateIP)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.OrderId != nil {
		l = len(*m.OrderId)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Amount != nil {
		n += 1 + sovTableStruct(uint64(*m.Amount))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Order) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != nil {
		l = len(*m.OrderId)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.RealName != nil {
		l = len(*m.RealName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.SourceType != nil {
		n += 1 + sovTableStruct(uint64(*m.SourceType))
	}
	if m.ChangeType != nil {
		n += 1 + sovTableStruct(uint64(*m.ChangeType))
	}
	if m.Channeltype != nil {
		n += 1 + sovTableStruct(uint64(*m.Channeltype))
	}
	if m.CurGold != nil {
		n += 1 + sovTableStruct(uint64(*m.CurGold))
	}
	if m.ChangeGold != nil {
		n += 1 + sovTableStruct(uint64(*m.ChangeGold))
	}
	if m.Gold != nil {
		n += 1 + sovTableStruct(uint64(*m.Gold))
	}
	if m.ExternalNo != nil {
		l = len(*m.ExternalNo)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.PayChannel != nil {
		n += 1 + sovTableStruct(uint64(*m.PayChannel))
	}
	if m.PayType != nil {
		n += 1 + sovTableStruct(uint64(*m.PayType))
	}
	if m.Amount != nil {
		n += 2 + sovTableStruct(uint64(*m.Amount))
	}
	if m.CreateTime != nil {
		n += 2 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.CreateIP != nil {
		l = len(*m.CreateIP)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.Status != nil {
		n += 2 + sovTableStruct(uint64(*m.Status))
	}
	if m.PayStatus != nil {
		n += 2 + sovTableStruct(uint64(*m.PayStatus))
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.Tax != nil {
		n += 2 + sovTableStruct(uint64(*m.Tax))
	}
	if m.OverTime != nil {
		n += 2 + sovTableStruct(uint64(*m.OverTime))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.BankInfo != nil {
		l = len(*m.BankInfo)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.PayWay != nil {
		n += 2 + sovTableStruct(uint64(*m.PayWay))
	}
	if m.PayTargetId != nil {
		n += 2 + sovTableStruct(uint64(*m.PayTargetId))
	}
	if m.PayOpenId != nil {
		l = len(*m.PayOpenId)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.TotalCount != nil {
		n += 2 + sovTableStruct(uint64(*m.TotalCount))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.ExtendValue != nil {
		l = len(*m.ExtendValue)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.BankCode != nil {
		l = len(*m.BankCode)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.AccountType != nil {
		l = len(*m.AccountType)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.AccountNo != nil {
		l = len(*m.AccountNo)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.AccountName != nil {
		l = len(*m.AccountName)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.AccountProp != nil {
		l = len(*m.AccountProp)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.OrderDate != nil {
		l = len(*m.OrderDate)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.IsCheck != nil {
		l = len(*m.IsCheck)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.PlatformTax != nil {
		n += 2 + sovTableStruct(uint64(*m.PlatformTax))
	}
	if m.RealTax != nil {
		n += 2 + sovTableStruct(uint64(*m.RealTax))
	}
	if m.OrderType != nil {
		n += 2 + sovTableStruct(uint64(*m.OrderType))
	}
	if m.PlayerReason != nil {
		l = len(*m.PlayerReason)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeamData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.HeadUrl != nil {
		l = len(*m.HeadUrl)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.GongGao != nil {
		l = len(*m.GongGao)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Owner != nil {
		n += 1 + sovTableStruct(uint64(*m.Owner))
	}
	if m.QRCode != nil {
		l = len(*m.QRCode)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.LastTalkTime != nil {
		n += 1 + sovTableStruct(uint64(*m.LastTalkTime))
	}
	if m.MaxMember != nil {
		n += 1 + sovTableStruct(uint64(*m.MaxMember))
	}
	if len(m.MemberList) > 0 {
		for _, e := range m.MemberList {
			n += 1 + sovTableStruct(uint64(e))
		}
	}
	if len(m.ManagerList) > 0 {
		for _, e := range m.ManagerList {
			n += 1 + sovTableStruct(uint64(e))
		}
	}
	if m.TeamChat != nil {
		l = len(*m.TeamChat)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.MessageSetting != nil {
		l = m.MessageSetting.Size()
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if len(m.OutTeam) > 0 {
		for _, e := range m.OutTeam {
			l = e.Size()
			n += 1 + l + sovTableStruct(uint64(l))
		}
	}
	if len(m.Invite) > 0 {
		for _, e := range m.Invite {
			l = e.Size()
			n += 1 + l + sovTableStruct(uint64(l))
		}
	}
	if m.Status != nil {
		n += 2 + sovTableStruct(uint64(*m.Status))
	}
	if m.IsRecommend != nil {
		n += 3
	}
	if m.DissolveTime != nil {
		n += 2 + sovTableStruct(uint64(*m.DissolveTime))
	}
	if m.OwnerNickName != nil {
		l = len(*m.OwnerNickName)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.RefreshTime != nil {
		n += 2 + sovTableStruct(uint64(*m.RefreshTime))
	}
	if m.AdminID != nil {
		n += 2 + sovTableStruct(uint64(*m.AdminID))
	}
	if m.OwnerAccount != nil {
		l = len(*m.OwnerAccount)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.CreateName != nil {
		l = len(*m.CreateName)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if len(m.OperatorInfo) > 0 {
		for _, e := range m.OperatorInfo {
			l = e.Size()
			n += 2 + l + sovTableStruct(uint64(l))
		}
	}
	if m.Level != nil {
		n += 2 + sovTableStruct(uint64(*m.Level))
	}
	if m.LogMaxId != nil {
		n += 2 + sovTableStruct(uint64(*m.LogMaxId))
	}
	if m.WelcomeWord != nil {
		l = len(*m.WelcomeWord)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.SessionId != nil {
		l = len(*m.SessionId)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.Topic != nil {
		l = len(*m.Topic)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.TopicDesc != nil {
		l = len(*m.TopicDesc)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if len(m.TopicHeadUrls) > 0 {
		for _, s := range m.TopicHeadUrls {
			l = len(s)
			n += 2 + l + sovTableStruct(uint64(l))
		}
	}
	if m.LastDynamicTime != nil {
		n += 2 + sovTableStruct(uint64(*m.LastDynamicTime))
	}
	if m.DynamicId != nil {
		n += 2 + sovTableStruct(uint64(*m.DynamicId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OperatorInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Time != nil {
		n += 1 + sovTableStruct(uint64(*m.Time))
	}
	if m.Flag != nil {
		n += 1 + sovTableStruct(uint64(*m.Flag))
	}
	if m.CloseTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CloseTime))
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OutTeamInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.Time != nil {
		n += 1 + sovTableStruct(uint64(*m.Time))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InviteInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.HeadIcon != nil {
		l = len(*m.HeadIcon)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.State != nil {
		n += 1 + sovTableStruct(uint64(*m.State))
	}
	if m.Channel != nil {
		l = len(*m.Channel)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.InviteName != nil {
		l = len(*m.InviteName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.InviteId != nil {
		n += 1 + sovTableStruct(uint64(*m.InviteId))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Time != nil {
		n += 1 + sovTableStruct(uint64(*m.Time))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.LogId != nil {
		n += 1 + sovTableStruct(uint64(*m.LogId))
	}
	if m.TeamChannel != nil {
		l = m.TeamChannel.Size()
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsTimeClean != nil {
		n += 2
	}
	if m.IsReadClean != nil {
		n += 2
	}
	if m.IsScreenShotNotify != nil {
		n += 2
	}
	if m.IsStopTalk != nil {
		n += 2
	}
	if m.TeamHelp != nil {
		n += 1 + sovTableStruct(uint64(*m.TeamHelp))
	}
	if m.IsAddFriend != nil {
		n += 2
	}
	if m.IsInvite != nil {
		n += 2
	}
	if len(m.StopRedPacket) > 0 {
		for _, e := range m.StopRedPacket {
			n += 1 + sovTableStruct(uint64(e))
		}
	}
	if len(m.UnTakeRedPacket) > 0 {
		for _, e := range m.UnTakeRedPacket {
			n += 1 + sovTableStruct(uint64(e))
		}
	}
	if m.IsStopAddTeam != nil {
		n += 2
	}
	if m.IsOpenTeamMoneyCode != nil {
		n += 2
	}
	if m.IsBan != nil {
		n += 2
	}
	if m.UnBanTime != nil {
		n += 1 + sovTableStruct(uint64(*m.UnBanTime))
	}
	if m.IsOpenWelcomeWord != nil {
		n += 2
	}
	if m.IsManagerEdit != nil {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeamSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PersonSetting != nil {
		l = m.PersonSetting.Size()
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.MessageSetting != nil {
		l = m.MessageSetting.Size()
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeamChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovTableStruct(uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeamChatLogMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamId != nil {
		n += 1 + sovTableStruct(uint64(*m.TeamId))
	}
	if len(m.ChatInfo) > 0 {
		for _, e := range m.ChatInfo {
			l = e.Size()
			n += 1 + l + sovTableStruct(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WithDrawInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogId != nil {
		n += 1 + sovTableStruct(uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeamChatInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FirstChat) > 0 {
		for _, e := range m.FirstChat {
			l = e.Size()
			n += 1 + l + sovTableStruct(uint64(l))
		}
	}
	if len(m.LastChat) > 0 {
		for _, e := range m.LastChat {
			l = e.Size()
			n += 1 + l + sovTableStruct(uint64(l))
		}
	}
	if m.Count != nil {
		n += 1 + sovTableStruct(uint64(*m.Count))
	}
	if len(m.ReLogIds) > 0 {
		for _, e := range m.ReLogIds {
			l = e.Size()
			n += 1 + l + sovTableStruct(uint64(l))
		}
	}
	if m.IsNoticeMessage != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeamMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.Type != nil {
		n += 1 + sovTableStruct(uint64(*m.Type))
	}
	if len(m.PlayerList) > 0 {
		for _, e := range m.PlayerList {
			n += 1 + sovTableStruct(uint64(e))
		}
	}
	if m.Value != nil {
		n += 2
	}
	if m.Value1 != nil {
		l = len(*m.Value1)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.IsAllNotice != nil {
		n += 2
	}
	if len(m.AllPlayerList) > 0 {
		for _, e := range m.AllPlayerList {
			n += 1 + sovTableStruct(uint64(e))
		}
	}
	if m.Time != nil {
		n += 1 + sovTableStruct(uint64(*m.Time))
	}
	if m.TeamId != nil {
		n += 1 + sovTableStruct(uint64(*m.TeamId))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovTableStruct(uint64(l))
		}
	}
	if m.LogId != nil {
		n += 1 + sovTableStruct(uint64(*m.LogId))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Pos != nil {
		n += 1 + sovTableStruct(uint64(*m.Pos))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.AdminID != nil {
		n += 1 + sovTableStruct(uint64(*m.AdminID))
	}
	if m.AdminName != nil {
		l = len(*m.AdminName)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.SendTime != nil {
		n += 2 + sovTableStruct(uint64(*m.SendTime))
	}
	if m.ShowPos != nil {
		n += 2 + sovTableStruct(uint64(*m.ShowPos))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NoticeMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsAll != nil {
		n += 2
	}
	if len(m.PlayerId) > 0 {
		for _, e := range m.PlayerId {
			n += 1 + sovTableStruct(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeamChatLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogId != nil {
		n += 1 + sovTableStruct(uint64(*m.LogId))
	}
	if m.TeamId != nil {
		n += 1 + sovTableStruct(uint64(*m.TeamId))
	}
	if m.Talker != nil {
		n += 1 + sovTableStruct(uint64(*m.Talker))
	}
	if m.Time != nil {
		n += 1 + sovTableStruct(uint64(*m.Time))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.IsSave != nil {
		n += 2
	}
	if m.Type != nil {
		n += 1 + sovTableStruct(uint64(*m.Type))
	}
	if m.TeamMessage != nil {
		l = m.TeamMessage.Size()
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.TeamAccount != nil {
		l = len(*m.TeamAccount)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.TeamName != nil {
		l = len(*m.TeamName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.TalkerAccount != nil {
		l = len(*m.TalkerAccount)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.TalkerName != nil {
		l = len(*m.TalkerName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Cite != nil {
		l = len(*m.Cite)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.TeamLogId != nil {
		n += 1 + sovTableStruct(uint64(*m.TeamLogId))
	}
	if m.NoticeInfo != nil {
		l = m.NoticeInfo.Size()
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.TalkerHeadUrl != nil {
		l = len(*m.TalkerHeadUrl)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.QPId != nil {
		n += 2 + sovTableStruct(uint64(*m.QPId))
	}
	if m.SessionId != nil {
		l = len(*m.SessionId)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.Status != nil {
		n += 2 + sovTableStruct(uint64(*m.Status))
	}
	if m.Types != nil {
		n += 2 + sovTableStruct(uint64(*m.Types))
	}
	if m.Mark != nil {
		l = len(*m.Mark)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if len(m.PlayerIds) > 0 {
		for _, e := range m.PlayerIds {
			n += 2 + sovTableStruct(uint64(e))
		}
	}
	if m.IsWelComeWord != nil {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PersonalChatLogMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(*m.Key)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if len(m.ChatInfo) > 0 {
		for _, e := range m.ChatInfo {
			l = e.Size()
			n += 1 + l + sovTableStruct(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PersonalChatLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogId != nil {
		n += 1 + sovTableStruct(uint64(*m.LogId))
	}
	if m.Talker != nil {
		n += 1 + sovTableStruct(uint64(*m.Talker))
	}
	if m.TargetId != nil {
		n += 1 + sovTableStruct(uint64(*m.TargetId))
	}
	if m.Time != nil {
		n += 1 + sovTableStruct(uint64(*m.Time))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.IsRead != nil {
		n += 2
	}
	if m.Type != nil {
		n += 1 + sovTableStruct(uint64(*m.Type))
	}
	if m.Cite != nil {
		l = len(*m.Cite)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.SessionId != nil {
		l = len(*m.SessionId)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovTableStruct(uint64(*m.Status))
	}
	if m.QPId != nil {
		n += 2 + sovTableStruct(uint64(*m.QPId))
	}
	if m.TalkLogId != nil {
		n += 2 + sovTableStruct(uint64(*m.TalkLogId))
	}
	if m.Mark != nil {
		l = len(*m.Mark)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.TalkerAccount != nil {
		l = len(*m.TalkerAccount)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.TalkerNickName != nil {
		l = len(*m.TalkerNickName)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.TargetAccount != nil {
		l = len(*m.TargetAccount)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.TargetNickName != nil {
		l = len(*m.TargetNickName)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllTeamData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamId != nil {
		n += 1 + sovTableStruct(uint64(*m.TeamId))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovTableStruct(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PersonalTeamData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.TeamId != nil {
		n += 1 + sovTableStruct(uint64(*m.TeamId))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Position != nil {
		n += 1 + sovTableStruct(uint64(*m.Position))
	}
	if m.Setting != nil {
		l = m.Setting.Size()
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.ReadId != nil {
		n += 1 + sovTableStruct(uint64(*m.ReadId))
	}
	if m.Phone != nil {
		l = len(*m.Phone)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.WX != nil {
		l = len(*m.WX)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.ZFB != nil {
		l = len(*m.ZFB)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Time != nil {
		n += 1 + sovTableStruct(uint64(*m.Time))
	}
	if m.HeadIcon != nil {
		l = len(*m.HeadIcon)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.TeamChannel != nil {
		l = m.TeamChannel.Size()
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Channel != nil {
		l = len(*m.Channel)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovTableStruct(uint64(*m.Status))
	}
	if m.Sex != nil {
		n += 2 + sovTableStruct(uint64(*m.Sex))
	}
	if m.Signture != nil {
		l = len(*m.Signture)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.Photo != nil {
		l = len(*m.Photo)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.IsSave != nil {
		n += 3
	}
	if m.TeamName != nil {
		l = len(*m.TeamName)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.QTX != nil {
		n += 3
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.PerNickName != nil {
		l = len(*m.PerNickName)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if len(m.OperatorInfoPer) > 0 {
		for _, e := range m.OperatorInfoPer {
			l = e.Size()
			n += 2 + l + sovTableStruct(uint64(l))
		}
	}
	if m.Types != nil {
		n += 2 + sovTableStruct(uint64(*m.Types))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OperatorInfoPer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Time != nil {
		n += 1 + sovTableStruct(uint64(*m.Time))
	}
	if m.Flag != nil {
		n += 1 + sovTableStruct(uint64(*m.Flag))
	}
	if m.CloseTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CloseTime))
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PersonalTeamSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsTopChat != nil {
		n += 2
	}
	if m.IsNoDisturb != nil {
		n += 2
	}
	if m.IsSaveAdd != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RedPacketLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.RedPacketId != nil {
		n += 1 + sovTableStruct(uint64(*m.RedPacketId))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.HeadUrl != nil {
		l = len(*m.HeadUrl)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Money != nil {
		n += 1 + sovTableStruct(uint64(*m.Money))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.Sex != nil {
		n += 1 + sovTableStruct(uint64(*m.Sex))
	}
	if m.IsSave != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RedPacketTotalInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.RecTotalMoney != nil {
		n += 1 + sovTableStruct(uint64(*m.RecTotalMoney))
	}
	if m.RecCount != nil {
		n += 1 + sovTableStruct(uint64(*m.RecCount))
	}
	if m.LuckCnt != nil {
		n += 1 + sovTableStruct(uint64(*m.LuckCnt))
	}
	if m.SendTotalMoney != nil {
		n += 1 + sovTableStruct(uint64(*m.SendTotalMoney))
	}
	if m.SendCount != nil {
		n += 1 + sovTableStruct(uint64(*m.SendCount))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RedPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Type != nil {
		n += 1 + sovTableStruct(uint64(*m.Type))
	}
	if m.Sender != nil {
		n += 1 + sovTableStruct(uint64(*m.Sender))
	}
	if m.SenderName != nil {
		l = len(*m.SenderName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.SenderHead != nil {
		l = len(*m.SenderHead)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.TargetId != nil {
		n += 1 + sovTableStruct(uint64(*m.TargetId))
	}
	if m.TotalMoney != nil {
		n += 1 + sovTableStruct(uint64(*m.TotalMoney))
	}
	if m.TotalCount != nil {
		n += 1 + sovTableStruct(uint64(*m.TotalCount))
	}
	if m.PerMoney != nil {
		n += 1 + sovTableStruct(uint64(*m.PerMoney))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.CurMoney != nil {
		n += 1 + sovTableStruct(uint64(*m.CurMoney))
	}
	if m.CurCount != nil {
		n += 1 + sovTableStruct(uint64(*m.CurCount))
	}
	if m.State != nil {
		n += 1 + sovTableStruct(uint64(*m.State))
	}
	if len(m.Packets) > 0 {
		for _, e := range m.Packets {
			n += 1 + sovTableStruct(uint64(e))
		}
	}
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 2 + l + sovTableStruct(uint64(l))
		}
	}
	if m.PayPassWord != nil {
		l = len(*m.PayPassWord)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if len(m.PlayerList) > 0 {
		for _, e := range m.PlayerList {
			n += 2 + sovTableStruct(uint64(e))
		}
	}
	if m.PayWay != nil {
		n += 2 + sovTableStruct(uint64(*m.PayWay))
	}
	if m.BankCard != nil {
		l = len(*m.BankCard)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.OrderId != nil {
		l = len(*m.OrderId)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.LuckId != nil {
		n += 2 + sovTableStruct(uint64(*m.LuckId))
	}
	if m.PayOrderInfo != nil {
		l = m.PayOrderInfo.Size()
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.Sex != nil {
		n += 2 + sovTableStruct(uint64(*m.Sex))
	}
	if m.OverTime != nil {
		n += 2 + sovTableStruct(uint64(*m.OverTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransferMoney) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Sender != nil {
		n += 1 + sovTableStruct(uint64(*m.Sender))
	}
	if m.TargetId != nil {
		n += 1 + sovTableStruct(uint64(*m.TargetId))
	}
	if m.Way != nil {
		n += 1 + sovTableStruct(uint64(*m.Way))
	}
	if m.Card != nil {
		l = len(*m.Card)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Gold != nil {
		n += 1 + sovTableStruct(uint64(*m.Gold))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.State != nil {
		n += 1 + sovTableStruct(uint64(*m.State))
	}
	if m.PayPassWord != nil {
		l = len(*m.PayPassWord)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.OpenTime != nil {
		n += 1 + sovTableStruct(uint64(*m.OpenTime))
	}
	if m.OpenWay != nil {
		n += 1 + sovTableStruct(uint64(*m.OpenWay))
	}
	if m.OrderId != nil {
		l = len(*m.OrderId)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.PayOrderInfo != nil {
		l = m.PayOrderInfo.Size()
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.BankInfo != nil {
		l = len(*m.BankInfo)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayOrderInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.ProduceName != nil {
		l = len(*m.ProduceName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Amount != nil {
		l = len(*m.Amount)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.PayId != nil {
		n += 1 + sovTableStruct(uint64(*m.PayId))
	}
	if m.PayType != nil {
		n += 1 + sovTableStruct(uint64(*m.PayType))
	}
	if m.PaySence != nil {
		n += 1 + sovTableStruct(uint64(*m.PaySence))
	}
	if m.PayWay != nil {
		n += 1 + sovTableStruct(uint64(*m.PayWay))
	}
	if m.PayTargetId != nil {
		n += 1 + sovTableStruct(uint64(*m.PayTargetId))
	}
	if m.TotalCount != nil {
		n += 1 + sovTableStruct(uint64(*m.TotalCount))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.ExtendValue != nil {
		l = len(*m.ExtendValue)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.PayBankNo != nil {
		l = len(*m.PayBankNo)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.PayPassType != nil {
		n += 1 + sovTableStruct(uint64(*m.PayPassType))
	}
	if m.ApkCode != nil {
		n += 1 + sovTableStruct(uint64(*m.ApkCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayOrderResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += 2
	}
	if m.PayInfo != nil {
		l = len(*m.PayInfo)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerKeepReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TodayRegister != nil {
		n += 1 + sovTableStruct(uint64(*m.TodayRegister))
	}
	if m.NextKeep != nil {
		n += 1 + sovTableStruct(uint64(*m.NextKeep))
	}
	if m.ThreeKeep != nil {
		n += 1 + sovTableStruct(uint64(*m.ThreeKeep))
	}
	if m.FourKeep != nil {
		n += 1 + sovTableStruct(uint64(*m.FourKeep))
	}
	if m.FiveKeep != nil {
		n += 1 + sovTableStruct(uint64(*m.FiveKeep))
	}
	if m.SixKeep != nil {
		n += 1 + sovTableStruct(uint64(*m.SixKeep))
	}
	if m.SevenKeep != nil {
		n += 1 + sovTableStruct(uint64(*m.SevenKeep))
	}
	if m.EightKeep != nil {
		n += 1 + sovTableStruct(uint64(*m.EightKeep))
	}
	if m.NineKeep != nil {
		n += 1 + sovTableStruct(uint64(*m.NineKeep))
	}
	if m.TenKeep != nil {
		n += 1 + sovTableStruct(uint64(*m.TenKeep))
	}
	if m.ElevenKeep != nil {
		n += 1 + sovTableStruct(uint64(*m.ElevenKeep))
	}
	if m.TwelveKeep != nil {
		n += 1 + sovTableStruct(uint64(*m.TwelveKeep))
	}
	if m.ThirteenKeep != nil {
		n += 1 + sovTableStruct(uint64(*m.ThirteenKeep))
	}
	if m.FourteenKeep != nil {
		n += 1 + sovTableStruct(uint64(*m.FourteenKeep))
	}
	if m.FifteenKeep != nil {
		n += 1 + sovTableStruct(uint64(*m.FifteenKeep))
	}
	if m.SixteenKeep != nil {
		n += 2 + sovTableStruct(uint64(*m.SixteenKeep))
	}
	if m.SeventeenKeep != nil {
		n += 2 + sovTableStruct(uint64(*m.SeventeenKeep))
	}
	if m.EighteenKeep != nil {
		n += 2 + sovTableStruct(uint64(*m.EighteenKeep))
	}
	if m.NineteenKeep != nil {
		n += 2 + sovTableStruct(uint64(*m.NineteenKeep))
	}
	if m.TwentyKeep != nil {
		n += 2 + sovTableStruct(uint64(*m.TwentyKeep))
	}
	if m.TwentyOneKeep != nil {
		n += 2 + sovTableStruct(uint64(*m.TwentyOneKeep))
	}
	if m.TwentyTwoKeep != nil {
		n += 2 + sovTableStruct(uint64(*m.TwentyTwoKeep))
	}
	if m.TwentyThreeKeep != nil {
		n += 2 + sovTableStruct(uint64(*m.TwentyThreeKeep))
	}
	if m.TwentyFourKeep != nil {
		n += 2 + sovTableStruct(uint64(*m.TwentyFourKeep))
	}
	if m.TwentyFiveKeep != nil {
		n += 2 + sovTableStruct(uint64(*m.TwentyFiveKeep))
	}
	if m.TwentySixKeep != nil {
		n += 2 + sovTableStruct(uint64(*m.TwentySixKeep))
	}
	if m.TwentySevenKeep != nil {
		n += 2 + sovTableStruct(uint64(*m.TwentySevenKeep))
	}
	if m.TwentyEightKeep != nil {
		n += 2 + sovTableStruct(uint64(*m.TwentyEightKeep))
	}
	if m.TwentyNineKeep != nil {
		n += 2 + sovTableStruct(uint64(*m.TwentyNineKeep))
	}
	if m.Thirtykeep != nil {
		n += 2 + sovTableStruct(uint64(*m.Thirtykeep))
	}
	if m.CreateTime != nil {
		n += 2 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerOnlineReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Clock0 != nil {
		n += 1 + sovTableStruct(uint64(*m.Clock0))
	}
	if m.Clock1 != nil {
		n += 1 + sovTableStruct(uint64(*m.Clock1))
	}
	if m.Clock2 != nil {
		n += 1 + sovTableStruct(uint64(*m.Clock2))
	}
	if m.Clock3 != nil {
		n += 1 + sovTableStruct(uint64(*m.Clock3))
	}
	if m.Clock4 != nil {
		n += 1 + sovTableStruct(uint64(*m.Clock4))
	}
	if m.Clock5 != nil {
		n += 1 + sovTableStruct(uint64(*m.Clock5))
	}
	if m.Clock6 != nil {
		n += 1 + sovTableStruct(uint64(*m.Clock6))
	}
	if m.Clock7 != nil {
		n += 1 + sovTableStruct(uint64(*m.Clock7))
	}
	if m.Clock8 != nil {
		n += 1 + sovTableStruct(uint64(*m.Clock8))
	}
	if m.Clock9 != nil {
		n += 1 + sovTableStruct(uint64(*m.Clock9))
	}
	if m.Clock10 != nil {
		n += 1 + sovTableStruct(uint64(*m.Clock10))
	}
	if m.Clock11 != nil {
		n += 1 + sovTableStruct(uint64(*m.Clock11))
	}
	if m.Clock12 != nil {
		n += 1 + sovTableStruct(uint64(*m.Clock12))
	}
	if m.Clock13 != nil {
		n += 1 + sovTableStruct(uint64(*m.Clock13))
	}
	if m.Clock14 != nil {
		n += 1 + sovTableStruct(uint64(*m.Clock14))
	}
	if m.Clock15 != nil {
		n += 2 + sovTableStruct(uint64(*m.Clock15))
	}
	if m.Clock16 != nil {
		n += 2 + sovTableStruct(uint64(*m.Clock16))
	}
	if m.Clock17 != nil {
		n += 2 + sovTableStruct(uint64(*m.Clock17))
	}
	if m.Clock18 != nil {
		n += 2 + sovTableStruct(uint64(*m.Clock18))
	}
	if m.Clock19 != nil {
		n += 2 + sovTableStruct(uint64(*m.Clock19))
	}
	if m.Clock20 != nil {
		n += 2 + sovTableStruct(uint64(*m.Clock20))
	}
	if m.Clock21 != nil {
		n += 2 + sovTableStruct(uint64(*m.Clock21))
	}
	if m.Clock22 != nil {
		n += 2 + sovTableStruct(uint64(*m.Clock22))
	}
	if m.Clock23 != nil {
		n += 2 + sovTableStruct(uint64(*m.Clock23))
	}
	if m.CreateTime != nil {
		n += 2 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActivityReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FullPlayerCount != nil {
		n += 1 + sovTableStruct(uint64(*m.FullPlayerCount))
	}
	if m.NewBindCount != nil {
		n += 1 + sovTableStruct(uint64(*m.NewBindCount))
	}
	if m.NewInviteCount != nil {
		n += 1 + sovTableStruct(uint64(*m.NewInviteCount))
	}
	if m.NewPlayerCount != nil {
		n += 1 + sovTableStruct(uint64(*m.NewPlayerCount))
	}
	if m.PlayerCount != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerCount))
	}
	if m.LuckPlayerCount != nil {
		n += 1 + sovTableStruct(uint64(*m.LuckPlayerCount))
	}
	if m.ShareTimes != nil {
		n += 1 + sovTableStruct(uint64(*m.ShareTimes))
	}
	if m.TaskSquareCount != nil {
		n += 1 + sovTableStruct(uint64(*m.TaskSquareCount))
	}
	if m.TaskRedPackCount != nil {
		n += 1 + sovTableStruct(uint64(*m.TaskRedPackCount))
	}
	if m.TaskSignIn != nil {
		n += 1 + sovTableStruct(uint64(*m.TaskSignIn))
	}
	if m.TaskShare != nil {
		n += 1 + sovTableStruct(uint64(*m.TaskShare))
	}
	if m.CardHe != nil {
		n += 1 + sovTableStruct(uint64(*m.CardHe))
	}
	if m.CardNing != nil {
		n += 1 + sovTableStruct(uint64(*m.CardNing))
	}
	if m.CardMeng != nil {
		n += 1 + sovTableStruct(uint64(*m.CardMeng))
	}
	if m.CardQu != nil {
		n += 1 + sovTableStruct(uint64(*m.CardQu))
	}
	if m.CardLv != nil {
		n += 2 + sovTableStruct(uint64(*m.CardLv))
	}
	if m.CardXing != nil {
		n += 2 + sovTableStruct(uint64(*m.CardXing))
	}
	if m.CreateTime != nil {
		n += 2 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CoinProductReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.ProductId != nil {
		n += 1 + sovTableStruct(uint64(*m.ProductId))
	}
	if m.ProductType != nil {
		n += 1 + sovTableStruct(uint64(*m.ProductType))
	}
	if m.ProductName != nil {
		l = len(*m.ProductName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.EffectiveTime != nil {
		n += 1 + sovTableStruct(uint64(*m.EffectiveTime))
	}
	if m.BuyNum != nil {
		n += 1 + sovTableStruct(uint64(*m.BuyNum))
	}
	if m.BuyCount != nil {
		n += 1 + sovTableStruct(uint64(*m.BuyCount))
	}
	if m.GiveNum != nil {
		n += 1 + sovTableStruct(uint64(*m.GiveNum))
	}
	if m.GiveCount != nil {
		n += 1 + sovTableStruct(uint64(*m.GiveCount))
	}
	if m.UserGiveNum != nil {
		n += 1 + sovTableStruct(uint64(*m.UserGiveNum))
	}
	if m.UserGiveCount != nil {
		n += 1 + sovTableStruct(uint64(*m.UserGiveCount))
	}
	if m.ActGiveNum != nil {
		n += 1 + sovTableStruct(uint64(*m.ActGiveNum))
	}
	if m.ActGiveCount != nil {
		n += 1 + sovTableStruct(uint64(*m.ActGiveCount))
	}
	if m.GoldSum != nil {
		n += 1 + sovTableStruct(uint64(*m.GoldSum))
	}
	if m.CoinSum != nil {
		n += 2 + sovTableStruct(uint64(*m.CoinSum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OnlineTimeLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.OnlineTime != nil {
		n += 1 + sovTableStruct(uint64(*m.OnlineTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerActiveReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.RegisterCount != nil {
		n += 1 + sovTableStruct(uint64(*m.RegisterCount))
	}
	if m.LoginCount != nil {
		n += 1 + sovTableStruct(uint64(*m.LoginCount))
	}
	if m.SumOnlineTime != nil {
		n += 1 + sovTableStruct(uint64(*m.SumOnlineTime))
	}
	if m.AveOnlineTime != nil {
		n += 1 + sovTableStruct(uint64(*m.AveOnlineTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerBehaviorReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.SendMsgCount != nil {
		n += 1 + sovTableStruct(uint64(*m.SendMsgCount))
	}
	if m.SendRedpacketPlayerCount != nil {
		n += 1 + sovTableStruct(uint64(*m.SendRedpacketPlayerCount))
	}
	if m.SendRedpacketCount != nil {
		n += 1 + sovTableStruct(uint64(*m.SendRedpacketCount))
	}
	if m.SendRedpacketMoney != nil {
		n += 1 + sovTableStruct(uint64(*m.SendRedpacketMoney))
	}
	if m.RobRedpacketPlayerCount != nil {
		n += 1 + sovTableStruct(uint64(*m.RobRedpacketPlayerCount))
	}
	if m.RobRedpacketCount != nil {
		n += 1 + sovTableStruct(uint64(*m.RobRedpacketCount))
	}
	if m.RobRedpacketMoney != nil {
		n += 1 + sovTableStruct(uint64(*m.RobRedpacketMoney))
	}
	if m.TransferPlayerCount != nil {
		n += 1 + sovTableStruct(uint64(*m.TransferPlayerCount))
	}
	if m.TransferCount != nil {
		n += 2 + sovTableStruct(uint64(*m.TransferCount))
	}
	if m.TransferMoney != nil {
		n += 2 + sovTableStruct(uint64(*m.TransferMoney))
	}
	if m.ShopOrderCount != nil {
		n += 2 + sovTableStruct(uint64(*m.ShopOrderCount))
	}
	if m.ShopOrderMoney != nil {
		n += 2 + sovTableStruct(uint64(*m.ShopOrderMoney))
	}
	if m.OneDialogue != nil {
		n += 2 + sovTableStruct(uint64(*m.OneDialogue))
	}
	if m.BindCard != nil {
		n += 2 + sovTableStruct(uint64(*m.BindCard))
	}
	if m.Start != nil {
		n += 2 + sovTableStruct(uint64(*m.Start))
	}
	if m.Reply != nil {
		n += 2 + sovTableStruct(uint64(*m.Reply))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InOutCashSumReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.Recharge != nil {
		n += 1 + sovTableStruct(uint64(*m.Recharge))
	}
	if m.Withdraw != nil {
		n += 1 + sovTableStruct(uint64(*m.Withdraw))
	}
	if m.Redundant != nil {
		n += 1 + sovTableStruct(uint64(*m.Redundant))
	}
	if m.RechargeTimes != nil {
		n += 1 + sovTableStruct(uint64(*m.RechargeTimes))
	}
	if m.RechargeCount != nil {
		n += 1 + sovTableStruct(uint64(*m.RechargeCount))
	}
	if m.WithdrawTimes != nil {
		n += 1 + sovTableStruct(uint64(*m.WithdrawTimes))
	}
	if m.WithdrawCount != nil {
		n += 1 + sovTableStruct(uint64(*m.WithdrawCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegisterLoginReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.RegSumCount != nil {
		n += 1 + sovTableStruct(uint64(*m.RegSumCount))
	}
	if m.WxRegCount != nil {
		n += 1 + sovTableStruct(uint64(*m.WxRegCount))
	}
	if m.PhoneRegCount != nil {
		n += 1 + sovTableStruct(uint64(*m.PhoneRegCount))
	}
	if m.ValidRegSumCount != nil {
		n += 1 + sovTableStruct(uint64(*m.ValidRegSumCount))
	}
	if m.ValidWxRegCount != nil {
		n += 1 + sovTableStruct(uint64(*m.ValidWxRegCount))
	}
	if m.ValidPhoneRegCount != nil {
		n += 1 + sovTableStruct(uint64(*m.ValidPhoneRegCount))
	}
	if m.LoginSumCount != nil {
		n += 1 + sovTableStruct(uint64(*m.LoginSumCount))
	}
	if m.LoginTimesCount != nil {
		n += 1 + sovTableStruct(uint64(*m.LoginTimesCount))
	}
	if m.RealNameCount != nil {
		n += 2 + sovTableStruct(uint64(*m.RealNameCount))
	}
	if m.BankCardCount != nil {
		n += 2 + sovTableStruct(uint64(*m.BankCardCount))
	}
	if m.PvCount != nil {
		n += 2 + sovTableStruct(uint64(*m.PvCount))
	}
	if m.UvCount != nil {
		n += 2 + sovTableStruct(uint64(*m.UvCount))
	}
	if m.LabelCount != nil {
		n += 2 + sovTableStruct(uint64(*m.LabelCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OperationChannelReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.ChannelNo != nil {
		l = len(*m.ChannelNo)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.ChannelName != nil {
		l = len(*m.ChannelName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Cooperation != nil {
		n += 1 + sovTableStruct(uint64(*m.Cooperation))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.RegCount != nil {
		n += 1 + sovTableStruct(uint64(*m.RegCount))
	}
	if m.ValidRegCount != nil {
		n += 1 + sovTableStruct(uint64(*m.ValidRegCount))
	}
	if m.LoginCount != nil {
		n += 1 + sovTableStruct(uint64(*m.LoginCount))
	}
	if m.ActDevCount != nil {
		n += 1 + sovTableStruct(uint64(*m.ActDevCount))
	}
	if m.ValidActDevCount != nil {
		n += 1 + sovTableStruct(uint64(*m.ValidActDevCount))
	}
	if m.DownLoadCount != nil {
		n += 1 + sovTableStruct(uint64(*m.DownLoadCount))
	}
	if m.UvCount != nil {
		n += 1 + sovTableStruct(uint64(*m.UvCount))
	}
	if m.OnlineSum != nil {
		n += 1 + sovTableStruct(uint64(*m.OnlineSum))
	}
	if m.NextKeep != nil {
		n += 1 + sovTableStruct(uint64(*m.NextKeep))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.ChannelNo != nil {
		l = len(*m.ChannelNo)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.ChannelName != nil {
		l = len(*m.ChannelName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Cooperation != nil {
		n += 1 + sovTableStruct(uint64(*m.Cooperation))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.ChannelCost != nil {
		n += 1 + sovTableStruct(uint64(*m.ChannelCost))
	}
	if m.ActCost != nil {
		n += 1 + sovTableStruct(uint64(*m.ActCost))
	}
	if m.LoginCost != nil {
		n += 1 + sovTableStruct(uint64(*m.LoginCost))
	}
	if m.RegCost != nil {
		n += 1 + sovTableStruct(uint64(*m.RegCost))
	}
	if m.ROI != nil {
		n += 9
	}
	if m.RegRoiRate != nil {
		n += 9
	}
	if m.KeepRate != nil {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArticleReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Types != nil {
		n += 1 + sovTableStruct(uint64(*m.Types))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.IsMain != nil {
		n += 1 + sovTableStruct(uint64(*m.IsMain))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.UpdateTime))
	}
	if m.PushPlayer != nil {
		n += 1 + sovTableStruct(uint64(*m.PushPlayer))
	}
	if m.Clicks != nil {
		n += 1 + sovTableStruct(uint64(*m.Clicks))
	}
	if m.Jumps != nil {
		n += 1 + sovTableStruct(uint64(*m.Jumps))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SquareReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.PlayerSubCount != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerSubCount))
	}
	if m.OperatSubCount != nil {
		n += 1 + sovTableStruct(uint64(*m.OperatSubCount))
	}
	if m.PlayerDelCount != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerDelCount))
	}
	if m.BackstageDelCount != nil {
		n += 1 + sovTableStruct(uint64(*m.BackstageDelCount))
	}
	if m.ZanCount != nil {
		n += 1 + sovTableStruct(uint64(*m.ZanCount))
	}
	if m.BsZanCount != nil {
		n += 1 + sovTableStruct(uint64(*m.BsZanCount))
	}
	if m.PlayerComm != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerComm))
	}
	if m.OperatComm != nil {
		n += 1 + sovTableStruct(uint64(*m.OperatComm))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerLogLocationReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.DayTime != nil {
		n += 1 + sovTableStruct(uint64(*m.DayTime))
	}
	if m.Position != nil {
		l = len(*m.Position)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Piece != nil {
		l = len(*m.Piece)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.DeviceType != nil {
		n += 1 + sovTableStruct(uint64(*m.DeviceType))
	}
	if m.Count != nil {
		n += 1 + sovTableStruct(uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecallReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.Pv != nil {
		n += 1 + sovTableStruct(uint64(*m.Pv))
	}
	if m.Uv != nil {
		n += 1 + sovTableStruct(uint64(*m.Uv))
	}
	if m.DownCount != nil {
		n += 1 + sovTableStruct(uint64(*m.DownCount))
	}
	if m.RecallCount != nil {
		n += 1 + sovTableStruct(uint64(*m.RecallCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocationData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.X != nil {
		n += 9
	}
	if m.Y != nil {
		n += 9
	}
	if m.Province != nil {
		l = len(*m.Province)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.City != nil {
		l = len(*m.City)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllLocationDate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LocationData) > 0 {
		for _, e := range m.LocationData {
			l = e.Size()
			n += 1 + l + sovTableStruct(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GeneralQuota) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Min != nil {
		n += 1 + sovTableStruct(uint64(*m.Min))
	}
	if m.Max != nil {
		n += 1 + sovTableStruct(uint64(*m.Max))
	}
	if m.Q1 != nil {
		n += 1 + sovTableStruct(uint64(*m.Q1))
	}
	if m.Q2 != nil {
		n += 1 + sovTableStruct(uint64(*m.Q2))
	}
	if m.Q3 != nil {
		n += 1 + sovTableStruct(uint64(*m.Q3))
	}
	if m.Q4 != nil {
		n += 1 + sovTableStruct(uint64(*m.Q4))
	}
	if m.Q5 != nil {
		n += 1 + sovTableStruct(uint64(*m.Q5))
	}
	if m.Q6 != nil {
		n += 2 + sovTableStruct(uint64(*m.Q6))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaymentSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.FeeRate != nil {
		n += 1 + sovTableStruct(uint64(*m.FeeRate))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Types != nil {
		n += 1 + sovTableStruct(uint64(*m.Types))
	}
	if m.PlatformTax != nil {
		n += 1 + sovTableStruct(uint64(*m.PlatformTax))
	}
	if m.RealTax != nil {
		n += 1 + sovTableStruct(uint64(*m.RealTax))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaymentPlatform) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Merchants != nil {
		l = len(*m.Merchants)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.ApiHost != nil {
		l = len(*m.ApiHost)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Publickey != nil {
		l = len(*m.Publickey)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Privatekey != nil {
		l = len(*m.Privatekey)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.RetrunBack != nil {
		l = len(*m.RetrunBack)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlatformChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Types != nil {
		n += 1 + sovTableStruct(uint64(*m.Types))
	}
	if m.PlatformId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlatformId))
	}
	if m.PlatformName != nil {
		l = len(*m.PlatformName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.PayMin != nil {
		n += 1 + sovTableStruct(uint64(*m.PayMin))
	}
	if m.PayMax != nil {
		n += 1 + sovTableStruct(uint64(*m.PayMax))
	}
	if m.PayTypeId != nil {
		n += 1 + sovTableStruct(uint64(*m.PayTypeId))
	}
	if m.PayTypeName != nil {
		l = len(*m.PayTypeName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.PaymentSettingId != nil {
		n += 1 + sovTableStruct(uint64(*m.PaymentSettingId))
	}
	if m.PaymentSettingName != nil {
		l = len(*m.PaymentSettingName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.StopAmount != nil {
		n += 1 + sovTableStruct(uint64(*m.StopAmount))
	}
	if m.Weights != nil {
		n += 1 + sovTableStruct(uint64(*m.Weights))
	}
	if m.Status != nil {
		n += 1 + sovTableStruct(uint64(*m.Status))
	}
	if m.PaySceneId != nil {
		n += 1 + sovTableStruct(uint64(*m.PaySceneId))
	}
	if m.PaySceneName != nil {
		l = len(*m.PaySceneName)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppPushMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.SendState != nil {
		n += 1 + sovTableStruct(uint64(*m.SendState))
	}
	if m.SendTime != nil {
		n += 1 + sovTableStruct(uint64(*m.SendTime))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.Recipient != nil {
		n += 1 + sovTableStruct(uint64(*m.Recipient))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovTableStruct(uint64(*m.Status))
	}
	if m.JumpObject != nil {
		n += 1 + sovTableStruct(uint64(*m.JumpObject))
	}
	if m.JumpUrl != nil {
		l = len(*m.JumpUrl)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if len(m.Label) > 0 {
		for _, e := range m.Label {
			n += 2 + sovTableStruct(uint64(e))
		}
	}
	if len(m.GrabTag) > 0 {
		for _, e := range m.GrabTag {
			n += 2 + sovTableStruct(uint64(e))
		}
	}
	if len(m.CustomTag) > 0 {
		for _, e := range m.CustomTag {
			n += 2 + sovTableStruct(uint64(e))
		}
	}
	if m.ObjectId != nil {
		n += 2 + sovTableStruct(uint64(*m.ObjectId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HelpType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Icon != nil {
		l = len(*m.Icon)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Sort != nil {
		n += 1 + sovTableStruct(uint64(*m.Sort))
	}
	if m.Optadmin != nil {
		l = len(*m.Optadmin)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HelpMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Types != nil {
		n += 1 + sovTableStruct(uint64(*m.Types))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.IsHot != nil {
		n += 2
	}
	if m.Optadmin != nil {
		l = len(*m.Optadmin)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.UpdateTime))
	}
	if m.Sort != nil {
		n += 1 + sovTableStruct(uint64(*m.Sort))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerComplaint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.RespondentId != nil {
		n += 1 + sovTableStruct(uint64(*m.RespondentId))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.Types != nil {
		n += 1 + sovTableStruct(uint64(*m.Types))
	}
	if m.Type != nil {
		n += 1 + sovTableStruct(uint64(*m.Type))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.ReContent != nil {
		l = len(*m.ReContent)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovTableStruct(uint64(*m.Status))
	}
	if m.ReTime != nil {
		n += 1 + sovTableStruct(uint64(*m.ReTime))
	}
	if m.OrderId != nil {
		n += 1 + sovTableStruct(uint64(*m.OrderId))
	}
	if m.GoodsId != nil {
		n += 2 + sovTableStruct(uint64(*m.GoodsId))
	}
	if m.PlayerAcount != nil {
		l = len(*m.PlayerAcount)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.RespondentAcount != nil {
		l = len(*m.RespondentAcount)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if len(m.Icon) > 0 {
		for _, s := range m.Icon {
			l = len(s)
			n += 2 + l + sovTableStruct(uint64(l))
		}
	}
	if m.Reason != nil {
		n += 2 + sovTableStruct(uint64(*m.Reason))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.Phone != nil {
		l = len(*m.Phone)
		n += 2 + l + sovTableStruct(uint64(l))
	}
	if m.DynamicId != nil {
		n += 2 + sovTableStruct(uint64(*m.DynamicId))
	}
	if m.TopicId != nil {
		n += 2 + sovTableStruct(uint64(*m.TopicId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NearByGreetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if len(m.NearByInfo) > 0 {
		for _, e := range m.NearByInfo {
			l = e.Size()
			n += 1 + l + sovTableStruct(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NearByInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.IsAdd != nil {
		n += 2
	}
	if m.Time != nil {
		n += 1 + sovTableStruct(uint64(*m.Time))
	}
	if m.IsRead != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SystemNotice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.UserType != nil {
		n += 1 + sovTableStruct(uint64(*m.UserType))
	}
	if m.Type != nil {
		n += 1 + sovTableStruct(uint64(*m.Type))
	}
	if m.CountType != nil {
		n += 1 + sovTableStruct(uint64(*m.CountType))
	}
	if m.State != nil {
		n += 1 + sovTableStruct(uint64(*m.State))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.EditTime != nil {
		n += 1 + sovTableStruct(uint64(*m.EditTime))
	}
	if m.SendState != nil {
		n += 1 + sovTableStruct(uint64(*m.SendState))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Assistant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.Type != nil {
		n += 1 + sovTableStruct(uint64(*m.Type))
	}
	if m.FriendType != nil {
		n += 1 + sovTableStruct(uint64(*m.FriendType))
	}
	if m.Nickname != nil {
		l = len(*m.Nickname)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Avatar != nil {
		l = len(*m.Avatar)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Phone != nil {
		l = len(*m.Phone)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.AddFriendType != nil {
		n += 1 + sovTableStruct(uint64(*m.AddFriendType))
	}
	if m.Signature != nil {
		l = len(*m.Signature)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if len(m.Photo) > 0 {
		for _, s := range m.Photo {
			l = len(s)
			n += 1 + l + sovTableStruct(uint64(l))
		}
	}
	if m.Pid != nil {
		n += 1 + sovTableStruct(uint64(*m.Pid))
	}
	if m.Sex != nil {
		n += 2 + sovTableStruct(uint64(*m.Sex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SysParameter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.TransferOneMax != nil {
		n += 1 + sovTableStruct(uint64(*m.TransferOneMax))
	}
	if m.TransferOneDayMax != nil {
		n += 1 + sovTableStruct(uint64(*m.TransferOneDayMax))
	}
	if m.IsTransfer != nil {
		n += 2
	}
	if m.IsRedPacket != nil {
		n += 2
	}
	if m.RedPacketMin != nil {
		n += 1 + sovTableStruct(uint64(*m.RedPacketMin))
	}
	if m.RedPacketMax != nil {
		n += 1 + sovTableStruct(uint64(*m.RedPacketMax))
	}
	if m.TeamRedPacketNum != nil {
		n += 1 + sovTableStruct(uint64(*m.TeamRedPacketNum))
	}
	if m.IsRecharge != nil {
		n += 2
	}
	if m.RechargeMin != nil {
		n += 1 + sovTableStruct(uint64(*m.RechargeMin))
	}
	if m.RechargeMax != nil {
		n += 1 + sovTableStruct(uint64(*m.RechargeMax))
	}
	if m.IsWithdrawal != nil {
		n += 2
	}
	if m.WithdrawalMin != nil {
		n += 2 + sovTableStruct(uint64(*m.WithdrawalMin))
	}
	if m.WithdrawalMax != nil {
		n += 2 + sovTableStruct(uint64(*m.WithdrawalMax))
	}
	if m.OutSum != nil {
		n += 2 + sovTableStruct(uint64(*m.OutSum))
	}
	if m.OutTimes != nil {
		n += 2 + sovTableStruct(uint64(*m.OutTimes))
	}
	if m.RiskControl != nil {
		n += 2 + sovTableStruct(uint64(*m.RiskControl))
	}
	if m.IsQRcode != nil {
		n += 3
	}
	if m.ExpiredDay != nil {
		n += 2 + sovTableStruct(uint64(*m.ExpiredDay))
	}
	if m.MavatarCount != nil {
		n += 2 + sovTableStruct(uint64(*m.MavatarCount))
	}
	if m.WavatarCount != nil {
		n += 2 + sovTableStruct(uint64(*m.WavatarCount))
	}
	if m.InterestMin != nil {
		n += 2 + sovTableStruct(uint64(*m.InterestMin))
	}
	if m.InterestMax != nil {
		n += 2 + sovTableStruct(uint64(*m.InterestMax))
	}
	if len(m.TextModerations) > 0 {
		for _, e := range m.TextModerations {
			l = e.Size()
			n += 2 + l + sovTableStruct(uint64(l))
		}
	}
	if len(m.ImageModerations) > 0 {
		for _, e := range m.ImageModerations {
			l = e.Size()
			n += 2 + l + sovTableStruct(uint64(l))
		}
	}
	if m.ZanScore != nil {
		n += 2 + sovTableStruct(uint64(*m.ZanScore))
	}
	if m.CoinScore != nil {
		n += 2 + sovTableStruct(uint64(*m.CoinScore))
	}
	if m.CommentScore != nil {
		n += 2 + sovTableStruct(uint64(*m.CommentScore))
	}
	if m.HotScore != nil {
		n += 2 + sovTableStruct(uint64(*m.HotScore))
	}
	if m.DampRatio != nil {
		n += 2 + sovTableStruct(uint64(*m.DampRatio))
	}
	if m.RechargeTime != nil {
		n += 2 + sovTableStruct(uint64(*m.RechargeTime))
	}
	if m.RechargeTimes != nil {
		n += 2 + sovTableStruct(uint64(*m.RechargeTimes))
	}
	if m.RechargeGoldRate != nil {
		n += 2 + sovTableStruct(uint64(*m.RechargeGoldRate))
	}
	if m.RechargeGold != nil {
		n += 2 + sovTableStruct(uint64(*m.RechargeGold))
	}
	if m.WithdrawalTime != nil {
		n += 2 + sovTableStruct(uint64(*m.WithdrawalTime))
	}
	if m.WithdrawalTimes != nil {
		n += 2 + sovTableStruct(uint64(*m.WithdrawalTimes))
	}
	if m.WithdrawalGoldRate != nil {
		n += 2 + sovTableStruct(uint64(*m.WithdrawalGoldRate))
	}
	if m.WithdrawalGold != nil {
		n += 2 + sovTableStruct(uint64(*m.WithdrawalGold))
	}
	if len(m.PhoneList) > 0 {
		for _, s := range m.PhoneList {
			l = len(s)
			n += 2 + l + sovTableStruct(uint64(l))
		}
	}
	if m.CommentHotScore != nil {
		n += 2 + sovTableStruct(uint64(*m.CommentHotScore))
	}
	if m.CommentHotCount != nil {
		n += 2 + sovTableStruct(uint64(*m.CommentHotCount))
	}
	if len(m.PushSet) > 0 {
		for _, e := range m.PushSet {
			l = e.Size()
			n += 2 + l + sovTableStruct(uint64(l))
		}
	}
	if m.EsOneBetGold != nil {
		n += 2 + sovTableStruct(uint64(*m.EsOneBetGold))
	}
	if m.EsOneDayBetGold != nil {
		n += 2 + sovTableStruct(uint64(*m.EsOneDayBetGold))
	}
	if m.EsDaySumGold != nil {
		n += 2 + sovTableStruct(uint64(*m.EsDaySumGold))
	}
	if m.StrangerChatCount != nil {
		n += 2 + sovTableStruct(uint64(*m.StrangerChatCount))
	}
	if m.DayMaxMatchTimes != nil {
		n += 2 + sovTableStruct(uint64(*m.DayMaxMatchTimes))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.ObjId != nil {
		n += 1 + sovTableStruct(uint64(*m.ObjId))
	}
	if m.ObjTitle != nil {
		l = len(*m.ObjTitle)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.ObjContent != nil {
		l = len(*m.ObjContent)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.IsPush != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoginRegisterInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovTableStruct(uint64(*m.Type))
	}
	if m.Time != nil {
		n += 1 + sovTableStruct(uint64(*m.Time))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.Channel != nil {
		l = len(*m.Channel)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OperationChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.ChannelNo != nil {
		l = len(*m.ChannelNo)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.CompanyName != nil {
		l = len(*m.CompanyName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Cooperation != nil {
		n += 1 + sovTableStruct(uint64(*m.Cooperation))
	}
	if m.Price != nil {
		n += 1 + sovTableStruct(uint64(*m.Price))
	}
	if m.Rate != nil {
		n += 1 + sovTableStruct(uint64(*m.Rate))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.UpdateTime))
	}
	if m.DpSet != nil {
		l = m.DpSet.Size()
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovTableStruct(uint64(*m.Status))
	}
	if m.AddCount != nil {
		n += 1 + sovTableStruct(uint64(*m.AddCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModId != nil {
		n += 1 + sovTableStruct(uint64(*m.ModId))
	}
	if m.Icon != nil {
		l = len(*m.Icon)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if len(m.Banner) > 0 {
		for _, s := range m.Banner {
			l = len(s)
			n += 1 + l + sovTableStruct(uint64(l))
		}
	}
	if m.BtnText != nil {
		l = len(*m.BtnText)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Floot != nil {
		l = len(*m.Floot)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IpLibrary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ip != nil {
		l = len(*m.Ip)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterestTag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Icon != nil {
		l = len(*m.Icon)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.UpdateTime))
	}
	if m.Sort != nil {
		n += 1 + sovTableStruct(uint64(*m.Sort))
	}
	if m.PopIcon != nil {
		l = len(*m.PopIcon)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.InterestType != nil {
		n += 1 + sovTableStruct(uint64(*m.InterestType))
	}
	if m.InterestName != nil {
		n += 1 + sovTableStruct(uint64(*m.InterestName))
	}
	if m.Status != nil {
		n += 1 + sovTableStruct(uint64(*m.Status))
	}
	if m.PlayTime != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayTime))
	}
	if m.Count != nil {
		n += 1 + sovTableStruct(uint64(*m.Count))
	}
	if m.SortName != nil {
		l = len(*m.SortName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.UnReviewCount != nil {
		n += 1 + sovTableStruct(uint64(*m.UnReviewCount))
	}
	if m.UseCount != nil {
		n += 1 + sovTableStruct(uint64(*m.UseCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterestType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.UpdateTime))
	}
	if m.Sort != nil {
		n += 1 + sovTableStruct(uint64(*m.Sort))
	}
	if m.Status != nil {
		n += 1 + sovTableStruct(uint64(*m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterestGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if len(m.Group) > 0 {
		for _, e := range m.Group {
			n += 1 + sovTableStruct(uint64(e))
		}
	}
	if m.PopIcon != nil {
		l = len(*m.PopIcon)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.PlayTime != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Tweets) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		n += 1 + sovTableStruct(uint64(*m.ID))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			n += 1 + sovTableStruct(uint64(e))
		}
	}
	if m.UserType != nil {
		n += 1 + sovTableStruct(uint64(*m.UserType))
	}
	if m.SendState != nil {
		n += 1 + sovTableStruct(uint64(*m.SendState))
	}
	if m.SendTime != nil {
		n += 1 + sovTableStruct(uint64(*m.SendTime))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.State != nil {
		n += 1 + sovTableStruct(uint64(*m.State))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.UpdateTime))
	}
	if len(m.Article) > 0 {
		for _, e := range m.Article {
			l = e.Size()
			n += 1 + l + sovTableStruct(uint64(l))
		}
	}
	if len(m.CatchLabel) > 0 {
		for _, e := range m.CatchLabel {
			n += 1 + sovTableStruct(uint64(e))
		}
	}
	if len(m.CustomLabel) > 0 {
		for _, e := range m.CustomLabel {
			n += 1 + sovTableStruct(uint64(e))
		}
	}
	if m.AllLabel != nil {
		n += 1 + sovTableStruct(uint64(*m.AllLabel))
	}
	if m.JgPush != nil {
		n += 1 + sovTableStruct(uint64(*m.JgPush))
	}
	if m.Validity != nil {
		n += 10
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegisterPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		n += 1 + sovTableStruct(uint64(*m.ID))
	}
	if m.AllLabel != nil {
		n += 1 + sovTableStruct(uint64(*m.AllLabel))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			n += 1 + sovTableStruct(uint64(e))
		}
	}
	if len(m.CatchLabel) > 0 {
		for _, e := range m.CatchLabel {
			n += 1 + sovTableStruct(uint64(e))
		}
	}
	if len(m.CustomLabel) > 0 {
		for _, e := range m.CustomLabel {
			n += 1 + sovTableStruct(uint64(e))
		}
	}
	if m.UserType != nil {
		n += 1 + sovTableStruct(uint64(*m.UserType))
	}
	if m.State != nil {
		n += 1 + sovTableStruct(uint64(*m.State))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.UpdateTime))
	}
	if len(m.Article) > 0 {
		for _, e := range m.Article {
			l = e.Size()
			n += 1 + l + sovTableStruct(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Article) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		n += 1 + sovTableStruct(uint64(*m.ID))
	}
	if m.ArticleType != nil {
		n += 1 + sovTableStruct(uint64(*m.ArticleType))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Icon != nil {
		l = len(*m.Icon)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.EditTime != nil {
		n += 1 + sovTableStruct(uint64(*m.EditTime))
	}
	if m.State != nil {
		n += 1 + sovTableStruct(uint64(*m.State))
	}
	if m.IsMain != nil {
		n += 1 + sovTableStruct(uint64(*m.IsMain))
	}
	if m.Location != nil {
		n += 1 + sovTableStruct(uint64(*m.Location))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.TransArticleUrl != nil {
		l = len(*m.TransArticleUrl)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Sort != nil {
		n += 1 + sovTableStruct(uint64(*m.Sort))
	}
	if m.Profile != nil {
		l = len(*m.Profile)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.ReadedNum != nil {
		n += 1 + sovTableStruct(uint64(*m.ReadedNum))
	}
	if m.ReadedNumVirtual != nil {
		n += 2 + sovTableStruct(uint64(*m.ReadedNumVirtual))
	}
	if m.ReadedBase != nil {
		n += 2 + sovTableStruct(uint64(*m.ReadedBase))
	}
	if m.ZanNum != nil {
		n += 2 + sovTableStruct(uint64(*m.ZanNum))
	}
	if m.ReadingNum != nil {
		n += 2 + sovTableStruct(uint64(*m.ReadingNum))
	}
	if m.IsZan != nil {
		n += 3
	}
	if len(m.Comments) > 0 {
		for _, e := range m.Comments {
			l = e.Size()
			n += 2 + l + sovTableStruct(uint64(l))
		}
	}
	if m.CommentNum != nil {
		n += 2 + sovTableStruct(uint64(*m.CommentNum))
	}
	if m.ObjectId != nil {
		n += 2 + sovTableStruct(uint64(*m.ObjectId))
	}
	if m.ObjPlayerId != nil {
		n += 2 + sovTableStruct(uint64(*m.ObjPlayerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArticleZan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.ArticleId != nil {
		n += 1 + sovTableStruct(uint64(*m.ArticleId))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.HeadUrl != nil {
		l = len(*m.HeadUrl)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArticleComment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.ArticleId != nil {
		n += 1 + sovTableStruct(uint64(*m.ArticleId))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.HeadUrl != nil {
		l = len(*m.HeadUrl)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.Status != nil {
		n += 1 + sovTableStruct(uint64(*m.Status))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CustomTag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CrawlWords) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.GrabTag != nil {
		n += 1 + sovTableStruct(uint64(*m.GrabTag))
	}
	if m.Count != nil {
		n += 1 + sovTableStruct(uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GrabTag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Count != nil {
		n += 1 + sovTableStruct(uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SystemLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.WordPerSonalId != nil {
		n += 1 + sovTableStruct(uint64(*m.WordPerSonalId))
	}
	if m.WordTeamId != nil {
		n += 1 + sovTableStruct(uint64(*m.WordTeamId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerCrawlWords) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if len(m.Words) > 0 {
		for _, e := range m.Words {
			l = e.Size()
			n += 1 + l + sovTableStruct(uint64(l))
		}
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovTableStruct(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PosDeviceCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.DeviceCode != nil {
		l = len(*m.DeviceCode)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Channle != nil {
		l = len(*m.Channle)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PosDeviceIdfa) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceIdfa != nil {
		l = len(*m.DeviceIdfa)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.Source != nil {
		l = len(*m.Source)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerTalkLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.TargetId != nil {
		n += 1 + sovTableStruct(uint64(*m.TargetId))
	}
	if m.Connect != nil {
		l = len(*m.Connect)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if len(m.Words) > 0 {
		for _, s := range m.Words {
			l = len(s)
			n += 1 + l + sovTableStruct(uint64(l))
		}
	}
	if m.EvilType != nil {
		n += 1 + sovTableStruct(uint64(*m.EvilType))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DirtyWords) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Word != nil {
		l = len(*m.Word)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Signature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IMmessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if len(m.Content) > 0 {
		for _, e := range m.Content {
			l = e.Size()
			n += 1 + l + sovTableStruct(uint64(l))
		}
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.UpdateTime))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.HeadIcon != nil {
		l = len(*m.HeadIcon)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.WaiterId != nil {
		n += 1 + sovTableStruct(uint64(*m.WaiterId))
	}
	if m.WaiterName != nil {
		l = len(*m.WaiterName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.OriginalId != nil {
		n += 2 + sovTableStruct(uint64(*m.OriginalId))
	}
	if m.Status != nil {
		n += 2 + sovTableStruct(uint64(*m.Status))
	}
	if m.Cnew != nil {
		n += 2 + sovTableStruct(uint64(*m.Cnew))
	}
	if m.Snew != nil {
		n += 2 + sovTableStruct(uint64(*m.Snew))
	}
	if m.Grade != nil {
		n += 2 + sovTableStruct(uint64(*m.Grade))
	}
	if m.SumContent != nil {
		n += 2 + sovTableStruct(uint64(*m.SumContent))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IMcontent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sendtime != nil {
		n += 1 + sovTableStruct(uint64(*m.Sendtime))
	}
	if m.Mtype != nil {
		n += 1 + sovTableStruct(uint64(*m.Mtype))
	}
	if m.Messages != nil {
		l = len(*m.Messages)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Ctype != nil {
		n += 1 + sovTableStruct(uint64(*m.Ctype))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WaiterPerformance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.WaiterId != nil {
		n += 1 + sovTableStruct(uint64(*m.WaiterId))
	}
	if m.WaiterName != nil {
		l = len(*m.WaiterName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.WaiterRole != nil {
		n += 1 + sovTableStruct(uint64(*m.WaiterRole))
	}
	if m.ConNum != nil {
		n += 1 + sovTableStruct(uint64(*m.ConNum))
	}
	if m.GradeNum != nil {
		n += 1 + sovTableStruct(uint64(*m.GradeNum))
	}
	if m.SumGrade != nil {
		n += 1 + sovTableStruct(uint64(*m.SumGrade))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WaiterFAQ) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if len(m.KeyWord) > 0 {
		for _, s := range m.KeyWord {
			l = len(s)
			n += 1 + l + sovTableStruct(uint64(l))
		}
	}
	if m.Clicks != nil {
		n += 1 + sovTableStruct(uint64(*m.Clicks))
	}
	if m.Status != nil {
		n += 1 + sovTableStruct(uint64(*m.Status))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.UpdateTime))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WaiterFastReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovTableStruct(uint64(*m.Status))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.UpdateTime))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerFreezeLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.Status != nil {
		n += 1 + sovTableStruct(uint64(*m.Status))
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerCancleAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Phone != nil {
		l = len(*m.Phone)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.RealName != nil {
		l = len(*m.RealName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.PeopleId != nil {
		l = len(*m.PeopleId)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.PeopleIdBeforeUrl != nil {
		l = len(*m.PeopleIdBeforeUrl)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.PeopleIdBackUrl != nil {
		l = len(*m.PeopleIdBackUrl)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.PeopleIdHandUrl != nil {
		l = len(*m.PeopleIdHandUrl)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovTableStruct(uint64(*m.Status))
	}
	if m.FinishTime != nil {
		n += 1 + sovTableStruct(uint64(*m.FinishTime))
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CancelAccountList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Phone != nil {
		l = len(*m.Phone)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.FinishTime != nil {
		n += 1 + sovTableStruct(uint64(*m.FinishTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Activity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.StartTime != nil {
		n += 1 + sovTableStruct(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 1 + sovTableStruct(uint64(*m.EndTime))
	}
	if m.Status != nil {
		n += 1 + sovTableStruct(uint64(*m.Status))
	}
	if m.Types != nil {
		n += 1 + sovTableStruct(uint64(*m.Types))
	}
	if m.OpenTime != nil {
		n += 1 + sovTableStruct(uint64(*m.OpenTime))
	}
	if m.CloseTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CloseTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Props) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovTableStruct(uint64(*m.Status))
	}
	if m.Count != nil {
		n += 1 + sovTableStruct(uint64(*m.Count))
	}
	if m.ActivityId != nil {
		n += 1 + sovTableStruct(uint64(*m.ActivityId))
	}
	if m.Rate != nil {
		n += 1 + sovTableStruct(uint64(*m.Rate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DayProps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Count != nil {
		n += 1 + sovTableStruct(uint64(*m.Count))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerProps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.PropsId != nil {
		n += 1 + sovTableStruct(uint64(*m.PropsId))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.ExpiredTime != nil {
		n += 1 + sovTableStruct(uint64(*m.ExpiredTime))
	}
	if m.Status != nil {
		n += 1 + sovTableStruct(uint64(*m.Status))
	}
	if m.Count != nil {
		n += 1 + sovTableStruct(uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerUsePropsLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.PropsId != nil {
		n += 1 + sovTableStruct(uint64(*m.PropsId))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.RevPlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.RevPlayerId))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.Types != nil {
		n += 1 + sovTableStruct(uint64(*m.Types))
	}
	if m.Count != nil {
		n += 1 + sovTableStruct(uint64(*m.Count))
	}
	if m.HeadIcon != nil {
		l = len(*m.HeadIcon)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LuckyPlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.LuckyCount != nil {
		n += 1 + sovTableStruct(uint64(*m.LuckyCount))
	}
	if m.IsFull != nil {
		n += 2
	}
	if m.FullTime != nil {
		n += 1 + sovTableStruct(uint64(*m.FullTime))
	}
	if m.LuckyMoney != nil {
		n += 1 + sovTableStruct(uint64(*m.LuckyMoney))
	}
	if m.IsOpen != nil {
		n += 2
	}
	if m.OpenTime != nil {
		n += 1 + sovTableStruct(uint64(*m.OpenTime))
	}
	if m.IsNewLucky != nil {
		n += 2
	}
	if m.FullPlaces != nil {
		n += 1 + sovTableStruct(uint64(*m.FullPlaces))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LuckyPlayerRelated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.FriendPhone != nil {
		l = len(*m.FriendPhone)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.RelatedTime != nil {
		n += 1 + sovTableStruct(uint64(*m.RelatedTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PropsRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if len(m.Rate) > 0 {
		for _, e := range m.Rate {
			l = e.Size()
			n += 1 + l + sovTableStruct(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LuckySysFullCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.FullCount != nil {
		n += 1 + sovTableStruct(uint64(*m.FullCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataCountry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Code != nil {
		l = len(*m.Code)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataArea) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Country != nil {
		l = len(*m.Country)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataRegion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Code != nil {
		l = len(*m.Code)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Country != nil {
		l = len(*m.Country)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Area != nil {
		l = len(*m.Area)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataCity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Code != nil {
		l = len(*m.Code)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Country != nil {
		l = len(*m.Country)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Area != nil {
		l = len(*m.Area)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Region != nil {
		l = len(*m.Region)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReadDynamicDevice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Code != nil {
		l = len(*m.Code)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.LogId != nil {
		n += 1 + sovTableStruct(uint64(*m.LogId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdvLogReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.AdvId != nil {
		n += 1 + sovTableStruct(uint64(*m.AdvId))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.OpType != nil {
		n += 1 + sovTableStruct(uint64(*m.OpType))
	}
	if m.OpTime != nil {
		n += 1 + sovTableStruct(uint64(*m.OpTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KsPosAdvIdfa) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CodeMd5 != nil {
		l = len(*m.CodeMd5)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.AdvId != nil {
		n += 1 + sovTableStruct(uint64(*m.AdvId))
	}
	if m.OsType != nil {
		n += 1 + sovTableStruct(uint64(*m.OsType))
	}
	if m.Ip != nil {
		l = len(*m.Ip)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.ScenesId != nil {
		n += 1 + sovTableStruct(uint64(*m.ScenesId))
	}
	if m.Callback != nil {
		l = len(*m.Callback)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.IsActive != nil {
		n += 2
	}
	if m.ActiveTime != nil {
		n += 1 + sovTableStruct(uint64(*m.ActiveTime))
	}
	if m.IsRegister != nil {
		n += 2
	}
	if m.RegisterTime != nil {
		n += 1 + sovTableStruct(uint64(*m.RegisterTime))
	}
	if m.Platform != nil {
		l = len(*m.Platform)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Code != nil {
		l = len(*m.Code)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoVoiceDurationLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Types != nil {
		n += 1 + sovTableStruct(uint64(*m.Types))
	}
	if m.Duration != nil {
		n += 1 + sovTableStruct(uint64(*m.Duration))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.SendId != nil {
		n += 1 + sovTableStruct(uint64(*m.SendId))
	}
	if m.TargetId != nil {
		n += 1 + sovTableStruct(uint64(*m.TargetId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecallPlayerLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.RecallTime != nil {
		n += 1 + sovTableStruct(uint64(*m.RecallTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NearSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Icon != nil {
		l = len(*m.Icon)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.JumpType != nil {
		n += 1 + sovTableStruct(uint64(*m.JumpType))
	}
	if m.JumpObjId != nil {
		n += 1 + sovTableStruct(uint64(*m.JumpObjId))
	}
	if m.JumpObject != nil {
		n += 1 + sovTableStruct(uint64(*m.JumpObject))
	}
	if m.JumpUrl != nil {
		l = len(*m.JumpUrl)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Weights != nil {
		n += 1 + sovTableStruct(uint64(*m.Weights))
	}
	if m.Status != nil {
		n += 1 + sovTableStruct(uint64(*m.Status))
	}
	if m.JumpStyle != nil {
		n += 1 + sovTableStruct(uint64(*m.JumpStyle))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NearSessionList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.SendPlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.SendPlayerId))
	}
	if m.ReceivePlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.ReceivePlayerId))
	}
	if m.Status != nil {
		n += 1 + sovTableStruct(uint64(*m.Status))
	}
	if m.IsRead != nil {
		n += 2
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.ContentType != nil {
		n += 1 + sovTableStruct(uint64(*m.ContentType))
	}
	if m.ClientUnique != nil {
		l = len(*m.ClientUnique)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.PropsId != nil {
		n += 1 + sovTableStruct(uint64(*m.PropsId))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NearMessageNewLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.SendPlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.SendPlayerId))
	}
	if m.ReceivePlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.ReceivePlayerId))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.ContentType != nil {
		n += 1 + sovTableStruct(uint64(*m.ContentType))
	}
	if m.Status != nil {
		n += 1 + sovTableStruct(uint64(*m.Status))
	}
	if m.IsRead != nil {
		n += 2
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.UpdateTime))
	}
	if m.IsFirst != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChatSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovTableStruct(uint64(*m.Type))
	}
	if len(m.PlayerIds) > 0 {
		for _, e := range m.PlayerIds {
			n += 1 + sovTableStruct(uint64(e))
		}
	}
	if m.SessionName != nil {
		l = len(*m.SessionName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.SessionHeadUrl != nil {
		l = len(*m.SessionHeadUrl)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.MaxLogId != nil {
		n += 1 + sovTableStruct(uint64(*m.MaxLogId))
	}
	if len(m.ReadInfo) > 0 {
		for _, e := range m.ReadInfo {
			l = e.Size()
			n += 1 + l + sovTableStruct(uint64(l))
		}
	}
	if m.TeamName != nil {
		l = len(*m.TeamName)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Topic != nil {
		l = len(*m.Topic)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReadLogInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.ReadId != nil {
		n += 1 + sovTableStruct(uint64(*m.ReadId))
	}
	if m.LogId != nil {
		n += 1 + sovTableStruct(uint64(*m.LogId))
	}
	if m.TalkNum != nil {
		n += 1 + sovTableStruct(uint64(*m.TalkNum))
	}
	if m.LastTalkTime != nil {
		n += 1 + sovTableStruct(uint64(*m.LastTalkTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NearReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.AdvId != nil {
		n += 1 + sovTableStruct(uint64(*m.AdvId))
	}
	if m.PvCount != nil {
		n += 1 + sovTableStruct(uint64(*m.PvCount))
	}
	if m.UvCount != nil {
		n += 1 + sovTableStruct(uint64(*m.UvCount))
	}
	if m.Clicks != nil {
		n += 1 + sovTableStruct(uint64(*m.Clicks))
	}
	if m.ClickPlayers != nil {
		n += 1 + sovTableStruct(uint64(*m.ClickPlayers))
	}
	if m.Near != nil {
		l = m.Near.Size()
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommStrId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESportCoinRecharge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.RechargeCoin != nil {
		n += 1 + sovTableStruct(uint64(*m.RechargeCoin))
	}
	if m.OrderId != nil {
		l = len(*m.OrderId)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.SourceType != nil {
		n += 1 + sovTableStruct(uint64(*m.SourceType))
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.ExtendLog != nil {
		l = m.ExtendLog.Size()
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ButtonClickReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.AgreementYes != nil {
		n += 1 + sovTableStruct(uint64(*m.AgreementYes))
	}
	if m.AgreementNo != nil {
		n += 1 + sovTableStruct(uint64(*m.AgreementNo))
	}
	if m.Phone != nil {
		n += 1 + sovTableStruct(uint64(*m.Phone))
	}
	if m.WeChat != nil {
		n += 1 + sovTableStruct(uint64(*m.WeChat))
	}
	if m.OneClick != nil {
		n += 1 + sovTableStruct(uint64(*m.OneClick))
	}
	if m.OneClickCount != nil {
		n += 1 + sovTableStruct(uint64(*m.OneClickCount))
	}
	if m.OtherClick != nil {
		n += 1 + sovTableStruct(uint64(*m.OtherClick))
	}
	if m.LoginBack != nil {
		n += 1 + sovTableStruct(uint64(*m.LoginBack))
	}
	if m.SendCode != nil {
		n += 1 + sovTableStruct(uint64(*m.SendCode))
	}
	if m.ReSendCode != nil {
		n += 1 + sovTableStruct(uint64(*m.ReSendCode))
	}
	if m.InPhoneBack != nil {
		n += 1 + sovTableStruct(uint64(*m.InPhoneBack))
	}
	if m.InCodeBack != nil {
		n += 1 + sovTableStruct(uint64(*m.InCodeBack))
	}
	if m.InfoBack != nil {
		n += 1 + sovTableStruct(uint64(*m.InfoBack))
	}
	if m.InNmBtnCLick != nil {
		n += 2 + sovTableStruct(uint64(*m.InNmBtnCLick))
	}
	if m.InNmBtnCount != nil {
		n += 2 + sovTableStruct(uint64(*m.InNmBtnCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ButtonClickLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.Type != nil {
		n += 1 + sovTableStruct(uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PageRegLogReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.Channel != nil {
		l = len(*m.Channel)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.DicType != nil {
		n += 1 + sovTableStruct(uint64(*m.DicType))
	}
	if m.LoginTimes != nil {
		n += 1 + sovTableStruct(uint64(*m.LoginTimes))
	}
	if m.LoginCount != nil {
		n += 1 + sovTableStruct(uint64(*m.LoginCount))
	}
	if m.OneLoginTimes != nil {
		n += 1 + sovTableStruct(uint64(*m.OneLoginTimes))
	}
	if m.OneLoginCount != nil {
		n += 1 + sovTableStruct(uint64(*m.OneLoginCount))
	}
	if m.WxLoginTimes != nil {
		n += 1 + sovTableStruct(uint64(*m.WxLoginTimes))
	}
	if m.WxLoginCount != nil {
		n += 1 + sovTableStruct(uint64(*m.WxLoginCount))
	}
	if m.PhoneRegTimes != nil {
		n += 1 + sovTableStruct(uint64(*m.PhoneRegTimes))
	}
	if m.PhoneRegCount != nil {
		n += 1 + sovTableStruct(uint64(*m.PhoneRegCount))
	}
	if m.RegCodeTimes != nil {
		n += 1 + sovTableStruct(uint64(*m.RegCodeTimes))
	}
	if m.RegCodeCount != nil {
		n += 1 + sovTableStruct(uint64(*m.RegCodeCount))
	}
	if m.UseInfoTimes != nil {
		n += 1 + sovTableStruct(uint64(*m.UseInfoTimes))
	}
	if m.UseInfoCount != nil {
		n += 2 + sovTableStruct(uint64(*m.UseInfoCount))
	}
	if m.IntWallTimes != nil {
		n += 2 + sovTableStruct(uint64(*m.IntWallTimes))
	}
	if m.IntWallCount != nil {
		n += 2 + sovTableStruct(uint64(*m.IntWallCount))
	}
	if m.RecPageTimes != nil {
		n += 2 + sovTableStruct(uint64(*m.RecPageTimes))
	}
	if m.RecPageCount != nil {
		n += 2 + sovTableStruct(uint64(*m.RecPageCount))
	}
	if m.ActDevCount != nil {
		n += 2 + sovTableStruct(uint64(*m.ActDevCount))
	}
	if m.ValidActDevCount != nil {
		n += 2 + sovTableStruct(uint64(*m.ValidActDevCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PageRegLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStruct(uint64(*m.CreateTime))
	}
	if m.Code != nil {
		l = len(*m.Code)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.DicType != nil {
		n += 1 + sovTableStruct(uint64(*m.DicType))
	}
	if m.Channel != nil {
		l = len(*m.Channel)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovTableStruct(uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerOperate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStruct(uint64(*m.PlayerId))
	}
	if m.Type != nil {
		n += 1 + sovTableStruct(uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IndexTips) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.Weights != nil {
		n += 1 + sovTableStruct(uint64(*m.Weights))
	}
	if m.Status != nil {
		n += 1 + sovTableStruct(uint64(*m.Status))
	}
	if m.AdvId != nil {
		n += 1 + sovTableStruct(uint64(*m.AdvId))
	}
	if m.Types != nil {
		n += 1 + sovTableStruct(uint64(*m.Types))
	}
	if m.BKUrl != nil {
		l = len(*m.BKUrl)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PopSuspend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStruct(uint64(*m.Id))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStruct(uint64(l))
	}
	if m.IsPop != nil {
		n += 2
	}
	if m.IsSuspend != nil {
		n += 2
	}
	if m.AdvId != nil {
		n += 1 + sovTableStruct(uint64(*m.AdvId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTableStruct(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTableStruct(x uint64) (n int) {
	return sovTableStruct(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ServerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sid = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ExternalIp = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientWSPort", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClientWSPort = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientTCPPort", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClientTCPPort = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientApiPort", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClientApiPort = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerApiPort", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServerApiPort = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebApiPort", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WebApiPort = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackStageApiPort", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BackStageApiPort = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConNum = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Version = &s
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.InternalIP = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGoldReport) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserGoldReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserGoldReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Vip = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ParentId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Gold = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Profit = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recharge", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Recharge = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargeCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RechargeCount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargeReturn", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RechargeReturn = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxAmount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TxAmount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellScore", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CellScore = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealWin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RealWin = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revenue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Revenue = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnReward", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnReward = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GameCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("LogId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportJob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportJob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportJob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Report", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Report = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Time = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RolePower) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RolePower: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RolePower: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RoleName = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MenuIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MenuIds = append(m.MenuIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RoleType = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Manager) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Manager: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Manager: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Site = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Password = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Role = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RealName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Phone = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnlie", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOnlie = &b
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LoginCount = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevLoginTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PrevLoginTime = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevLoginIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PrevLoginIP = &s
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLoginTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastLoginTime = &v
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLoginIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LastLoginIP = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Salt = &s
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RoleType = &v
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BindIp = append(m.BindIp, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGoogleVer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsGoogleVer = &b
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoogleSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GoogleSecret = &s
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLoginH5", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsLoginH5 = &b
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManagerTypes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManagerTypes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManagerTypes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackstageOptLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackstageOptLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackstageOptLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ip = &s
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TargetUserId = append(m.TargetUserId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TargetUserId) == 0 {
					m.TargetUserId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TargetUserId = append(m.TargetUserId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUserId", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remarks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Remarks = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OptType = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Site = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.F1 = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.F2 = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.F3 = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.F4 = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.F5 = &s
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T1", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.T1 = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T2", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.T2 = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T3", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.T3 = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T4", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.T4 = &v
		case 19:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.T5 = append(m.T5, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.T5) == 0 {
					m.T5 = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.T5 = append(m.T5, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field T5", wireType)
			}
		case 20:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.T6 = append(m.T6, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.T6) == 0 {
					m.T6 = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.T6 = append(m.T6, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field T6", wireType)
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.F6 = append(m.F6, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FreezeIpList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FreezeIpList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FreezeIpList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LoginIP = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginAuth", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.LoginAuth = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterAuth", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.RegisterAuth = &b
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Remark = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandleTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HandleTime = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FreezeAccountList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FreezeAccountList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FreezeAccountList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginAuth", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.LoginAuth = &b
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogLoginInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogLoginInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogLoginInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PF", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PF = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LoginTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegTime = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LoginIP = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("Id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SourceType) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SourceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SourceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Key = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Channel = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("Key")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoldChangeLog) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoldChangeLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoldChangeLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeGold", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangeGold = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SourceType = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SourceTypeName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayType = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurGold", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurGold = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Gold = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("LogId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinChangeLog) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinChangeLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinChangeLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeCoin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangeCoin = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SourceType = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SourceTypeName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayType = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurCoin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurCoin = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Coin = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurBCoin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurBCoin = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BCoin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BCoin = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("LogId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESportCoinChangeLog) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportCoinChangeLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportCoinChangeLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeESportCoin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangeESportCoin = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SourceType = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SourceTypeName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayType = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurESportCoin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurESportCoin = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ESportCoin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ESportCoin = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("LogId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoldExtendLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoldExtendLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoldExtendLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedPacketId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RedPacketId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OrderId = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MerchantId = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadIcon = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayType = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TransferText = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceCharge", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceCharge = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Gold = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Channel = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RechargeExtend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RechargeExtend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RechargeExtend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channeltype", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Channeltype = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayChannel", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayChannel = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayType = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CreateIP = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OrderId = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Amount = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Order) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Order: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Order: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OrderId = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RealName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SourceType = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangeType = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channeltype", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Channeltype = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurGold", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurGold = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeGold", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangeGold = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Gold = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ExternalNo = &s
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayChannel", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayChannel = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayType = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Amount = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CreateIP = &s
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayStatus", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayStatus = &v
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tax", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tax = &v
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OverTime = &v
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankInfo = &s
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayWay", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayWay = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayTargetId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayTargetId = &v
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayOpenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PayOpenId = &s
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalCount = &v
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ExtendValue = &s
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankCode = &s
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AccountType = &s
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AccountNo = &s
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AccountName = &s
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountProp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AccountProp = &s
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OrderDate = &s
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCheck", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.IsCheck = &s
			iNdEx = postIndex
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformTax", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlatformTax = &v
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealTax", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RealTax = &v
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderType = &v
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PlayerReason = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("OrderId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadUrl = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GongGao", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GongGao = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Owner = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QRCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.QRCode = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTalkTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastTalkTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMember", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxMember = &v
		case 10:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MemberList = append(m.MemberList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MemberList) == 0 {
					m.MemberList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MemberList = append(m.MemberList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberList", wireType)
			}
		case 11:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ManagerList = append(m.ManagerList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ManagerList) == 0 {
					m.ManagerList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ManagerList = append(m.ManagerList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerList", wireType)
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamChat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamChat = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MessageSetting == nil {
				m.MessageSetting = &MessageSetting{}
			}
			if err := m.MessageSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutTeam = append(m.OutTeam, &OutTeamInfo{})
			if err := m.OutTeam[len(m.OutTeam)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Invite = append(m.Invite, &InviteInfo{})
			if err := m.Invite[len(m.Invite)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRecommend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsRecommend = &b
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DissolveTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DissolveTime = &v
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerNickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OwnerNickName = &s
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefreshTime = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdminID = &v
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OwnerAccount = &s
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CreateName = &s
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorInfo = append(m.OperatorInfo, &OperatorInfo{})
			if err := m.OperatorInfo[len(m.OperatorInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Level = &v
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogMaxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogMaxId = &v
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WelcomeWord", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WelcomeWord = &s
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SessionId = &s
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Topic = &s
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TopicDesc = &s
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicHeadUrls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicHeadUrls = append(m.TopicHeadUrls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDynamicTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastDynamicTime = &v
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DynamicId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Time = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Flag = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CloseTime = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutTeamInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutTeamInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutTeamInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Time = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InviteInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadIcon = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Channel = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.InviteName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InviteId = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Time = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamChannel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamChannel == nil {
				m.TeamChannel = &TeamChannel{}
			}
			if err := m.TeamChannel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTimeClean", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsTimeClean = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReadClean", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsReadClean = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsScreenShotNotify", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsScreenShotNotify = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsStopTalk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsStopTalk = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamHelp", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TeamHelp = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAddFriend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsAddFriend = &b
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInvite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsInvite = &b
		case 9:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StopRedPacket = append(m.StopRedPacket, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.StopRedPacket) == 0 {
					m.StopRedPacket = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StopRedPacket = append(m.StopRedPacket, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StopRedPacket", wireType)
			}
		case 10:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UnTakeRedPacket = append(m.UnTakeRedPacket, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UnTakeRedPacket) == 0 {
					m.UnTakeRedPacket = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UnTakeRedPacket = append(m.UnTakeRedPacket, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UnTakeRedPacket", wireType)
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsStopAddTeam", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsStopAddTeam = &b
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpenTeamMoneyCode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOpenTeamMoneyCode = &b
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsBan = &b
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnBanTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnBanTime = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpenWelcomeWord", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOpenWelcomeWord = &b
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsManagerEdit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsManagerEdit = &b
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersonSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PersonSetting == nil {
				m.PersonSetting = &PersonalTeamSetting{}
			}
			if err := m.PersonSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MessageSetting == nil {
				m.MessageSetting = &MessageSetting{}
			}
			if err := m.MessageSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamChatLogMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamChatLogMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamChatLogMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TeamId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatInfo = append(m.ChatInfo, &TeamChatLog{})
			if err := m.ChatInfo[len(m.ChatInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithDrawInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithDrawInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithDrawInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamChatInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamChatInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamChatInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstChat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstChat = append(m.FirstChat, &TeamChatLog{})
			if err := m.FirstChat[len(m.FirstChat)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastChat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastChat = append(m.LastChat, &TeamChatLog{})
			if err := m.LastChat[len(m.LastChat)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReLogIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReLogIds = append(m.ReLogIds, &WithDrawInfo{})
			if err := m.ReLogIds[len(m.ReLogIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNoticeMessage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsNoticeMessage = &b
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PlayerList = append(m.PlayerList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PlayerList) == 0 {
					m.PlayerList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PlayerList = append(m.PlayerList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerList", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Value = &b
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value1 = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAllNotice", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsAllNotice = &b
		case 7:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AllPlayerList = append(m.AllPlayerList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AllPlayerList) == 0 {
					m.AllPlayerList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AllPlayerList = append(m.AllPlayerList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AllPlayerList", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Time = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TeamId = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &PersonalTeamData{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pos = &v
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdminID = &v
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AdminName = &s
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendTime = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowPos", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowPos = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoticeMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoticeMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoticeMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsAll = &b
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PlayerId = append(m.PlayerId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PlayerId) == 0 {
					m.PlayerId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PlayerId = append(m.PlayerId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamChatLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamChatLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamChatLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TeamId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Talker", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Talker = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Time = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSave", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsSave = &b
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamMessage == nil {
				m.TeamMessage = &TeamMessage{}
			}
			if err := m.TeamMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamAccount = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamName = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TalkerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TalkerAccount = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TalkerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TalkerName = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Cite = &s
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamLogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TeamLogId = &v
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NoticeInfo == nil {
				m.NoticeInfo = &NoticeMsg{}
			}
			if err := m.NoticeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TalkerHeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TalkerHeadUrl = &s
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QPId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QPId = &v
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SessionId = &s
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Mark = &s
			iNdEx = postIndex
		case 23:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PlayerIds = append(m.PlayerIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PlayerIds) == 0 {
					m.PlayerIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PlayerIds = append(m.PlayerIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerIds", wireType)
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWelComeWord", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsWelComeWord = &b
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersonalChatLogMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersonalChatLogMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersonalChatLogMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatInfo = append(m.ChatInfo, &PersonalChatLog{})
			if err := m.ChatInfo[len(m.ChatInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersonalChatLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersonalChatLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersonalChatLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Talker", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Talker = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TargetId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Time = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsRead = &b
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Cite = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SessionId = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QPId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QPId = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TalkLogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TalkLogId = &v
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Mark = &s
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TalkerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TalkerAccount = &s
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TalkerNickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TalkerNickName = &s
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TargetAccount = &s
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetNickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TargetNickName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllTeamData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllTeamData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllTeamData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TeamId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &PersonalTeamData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("TeamId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersonalTeamData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersonalTeamData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersonalTeamData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TeamId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Position = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Setting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Setting == nil {
				m.Setting = &PersonalTeamSetting{}
			}
			if err := m.Setting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReadId = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Phone = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WX", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WX = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZFB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ZFB = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Time = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadIcon = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamChannel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamChannel == nil {
				m.TeamChannel = &TeamChannel{}
			}
			if err := m.TeamChannel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Channel = &s
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sex = &v
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signture", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Signture = &s
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Photo = &s
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSave", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsSave = &b
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamName = &s
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QTX", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.QTX = &b
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerNickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PerNickName = &s
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorInfoPer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorInfoPer = append(m.OperatorInfoPer, &OperatorInfoPer{})
			if err := m.OperatorInfoPer[len(m.OperatorInfoPer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorInfoPer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorInfoPer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorInfoPer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Time = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Flag = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CloseTime = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersonalTeamSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersonalTeamSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersonalTeamSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTopChat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsTopChat = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNoDisturb", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsNoDisturb = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSaveAdd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsSaveAdd = &b
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedPacketLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedPacketLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedPacketLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedPacketId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RedPacketId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadUrl = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Money = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sex = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSave", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsSave = &b
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedPacketTotalInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedPacketTotalInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedPacketTotalInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecTotalMoney", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecTotalMoney = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckCnt", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckCnt = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTotalMoney", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendTotalMoney = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendCount = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sender = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SenderName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderHead", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SenderHead = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TargetId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalMoney", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalMoney = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalCount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerMoney", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PerMoney = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurMoney", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurMoney = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurCount = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = &v
		case 15:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Packets = append(m.Packets, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Packets) == 0 {
					m.Packets = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Packets = append(m.Packets, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Packets", wireType)
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, &RedPacketLog{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayPassWord", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PayPassWord = &s
			iNdEx = postIndex
		case 18:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PlayerList = append(m.PlayerList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PlayerList) == 0 {
					m.PlayerList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PlayerList = append(m.PlayerList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerList", wireType)
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayWay", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayWay = &v
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankCard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankCard = &s
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OrderId = &s
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckId = &v
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayOrderInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PayOrderInfo == nil {
				m.PayOrderInfo = &PayOrderInfo{}
			}
			if err := m.PayOrderInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sex = &v
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OverTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferMoney) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferMoney: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferMoney: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sender = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TargetId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Way", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Way = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Card = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Gold = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayPassWord", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PayPassWord = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OpenTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenWay", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OpenWay = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OrderId = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayOrderInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PayOrderInfo == nil {
				m.PayOrderInfo = &PayOrderInfo{}
			}
			if err := m.PayOrderInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankInfo = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayOrderInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayOrderInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayOrderInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProduceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProduceName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Amount = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayType = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaySence", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaySence = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayWay", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayWay = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayTargetId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayTargetId = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalCount = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ExtendValue = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayBankNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PayBankNo = &s
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayPassType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayPassType = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApkCode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ApkCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayOrderResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayOrderResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayOrderResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Result = &b
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PayInfo = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerKeepReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerKeepReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerKeepReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TodayRegister", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TodayRegister = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NextKeep = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreeKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThreeKeep = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FourKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FourKeep = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FiveKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FiveKeep = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SixKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SixKeep = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SevenKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SevenKeep = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EightKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EightKeep = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NineKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NineKeep = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TenKeep = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElevenKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ElevenKeep = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwelveKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TwelveKeep = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThirteenKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThirteenKeep = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FourteenKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FourteenKeep = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FifteenKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FifteenKeep = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SixteenKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SixteenKeep = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeventeenKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SeventeenKeep = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EighteenKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EighteenKeep = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NineteenKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NineteenKeep = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwentyKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TwentyKeep = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwentyOneKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TwentyOneKeep = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwentyTwoKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TwentyTwoKeep = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwentyThreeKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TwentyThreeKeep = &v
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwentyFourKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TwentyFourKeep = &v
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwentyFiveKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TwentyFiveKeep = &v
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwentySixKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TwentySixKeep = &v
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwentySevenKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TwentySevenKeep = &v
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwentyEightKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TwentyEightKeep = &v
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwentyNineKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TwentyNineKeep = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thirtykeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Thirtykeep = &v
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerOnlineReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerOnlineReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerOnlineReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock0", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clock0 = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock1", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clock1 = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock2", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clock2 = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock3", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clock3 = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock4", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clock4 = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock5", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clock5 = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock6", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clock6 = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock7", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clock7 = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock8", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clock8 = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock9", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clock9 = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock10", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clock10 = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock11", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clock11 = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock12", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clock12 = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock13", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clock13 = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock14", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clock14 = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock15", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clock15 = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock16", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clock16 = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock17", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clock17 = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock18", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clock18 = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock19", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clock19 = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock20", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clock20 = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock21", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clock21 = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock22", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clock22 = &v
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock23", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clock23 = &v
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullPlayerCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FullPlayerCount = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewBindCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NewBindCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewInviteCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NewInviteCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPlayerCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NewPlayerCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerCount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckPlayerCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckPlayerCount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareTimes", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShareTimes = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskSquareCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TaskSquareCount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskRedPackCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TaskRedPackCount = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskSignIn", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TaskSignIn = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskShare", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TaskShare = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardHe", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CardHe = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardNing", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CardNing = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardMeng", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CardMeng = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardQu", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CardQu = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardLv", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CardLv = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardXing", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CardXing = &v
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinProductReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinProductReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinProductReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductType = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProductName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EffectiveTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BuyNum = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BuyCount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GiveNum = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GiveCount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserGiveNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserGiveNum = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserGiveCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserGiveCount = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActGiveNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActGiveNum = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActGiveCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActGiveCount = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldSum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GoldSum = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinSum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CoinSum = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnlineTimeLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnlineTimeLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnlineTimeLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnlineTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerActiveReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerActiveReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerActiveReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegisterCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LoginCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumOnlineTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumOnlineTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AveOnlineTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AveOnlineTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerBehaviorReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerBehaviorReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerBehaviorReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendMsgCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendMsgCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendRedpacketPlayerCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendRedpacketPlayerCount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendRedpacketCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendRedpacketCount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendRedpacketMoney", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendRedpacketMoney = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RobRedpacketPlayerCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RobRedpacketPlayerCount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RobRedpacketCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RobRedpacketCount = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RobRedpacketMoney", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RobRedpacketMoney = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferPlayerCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransferPlayerCount = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransferCount = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferMoney", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransferMoney = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopOrderCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShopOrderCount = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopOrderMoney", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShopOrderMoney = &v
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneDialogue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OneDialogue = &v
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindCard", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BindCard = &v
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Start = &v
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reply = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InOutCashSumReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InOutCashSumReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InOutCashSumReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recharge", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Recharge = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdraw", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Withdraw = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redundant", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Redundant = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargeTimes", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RechargeTimes = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargeCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RechargeCount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawTimes", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithdrawTimes = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithdrawCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterLoginReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterLoginReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterLoginReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegSumCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegSumCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WxRegCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WxRegCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneRegCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PhoneRegCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidRegSumCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ValidRegSumCount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidWxRegCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ValidWxRegCount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidPhoneRegCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ValidPhoneRegCount = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginSumCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LoginSumCount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginTimesCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LoginTimesCount = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealNameCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RealNameCount = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankCardCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BankCardCount = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PvCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PvCount = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UvCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UvCount = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LabelCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationChannelReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationChannelReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationChannelReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ChannelNo = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ChannelName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cooperation", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cooperation = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegCount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidRegCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ValidRegCount = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LoginCount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActDevCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActDevCount = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidActDevCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ValidActDevCount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownLoadCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DownLoadCount = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UvCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UvCount = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineSum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnlineSum = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextKeep", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NextKeep = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ChannelNo = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ChannelName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cooperation", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cooperation = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelCost", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChannelCost = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActCost", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActCost = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginCost", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LoginCost = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegCost", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegCost = &v
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ROI", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.ROI = &v2
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegRoiRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.RegRoiRate = &v2
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeepRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.KeepRate = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMain", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMain = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushPlayer", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PushPlayer = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clicks", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clicks = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jumps", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Jumps = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SquareReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SquareReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SquareReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerSubCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerSubCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatSubCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OperatSubCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDelCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDelCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackstageDelCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BackstageDelCount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZanCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ZanCount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BsZanCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BsZanCount = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerComm", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerComm = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatComm", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OperatComm = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerLogLocationReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerLogLocationReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerLogLocationReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayTime = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Position = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Piece", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Piece = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeviceType = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecallReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecallReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecallReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pv", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pv = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uv", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Uv = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DownCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecallCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecallCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.X = &v2
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Y = &v2
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Province", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Province = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.City = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllLocationDate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllLocationDate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllLocationDate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationData = append(m.LocationData, &LocationData{})
			if err := m.LocationData[len(m.LocationData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeneralQuota) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeneralQuota: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeneralQuota: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Min = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Max = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q1", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Q1 = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q2", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Q2 = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q3", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Q3 = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q4", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Q4 = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q5", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Q5 = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q6", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Q6 = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRate", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FeeRate = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformTax", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlatformTax = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealTax", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RealTax = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentPlatform) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentPlatform: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentPlatform: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merchants", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Merchants = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ApiHost = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publickey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Publickey = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privatekey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Privatekey = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetrunBack", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RetrunBack = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlatformChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlatformChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlatformChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlatformId = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PlatformName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayMin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayMin = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayMax", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayMax = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayTypeId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayTypeId = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayTypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PayTypeName = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentSettingId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentSettingId = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentSettingName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PaymentSettingName = &s
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopAmount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StopAmount = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weights", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Weights = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaySceneId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaySceneId = &v
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaySceneName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PaySceneName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppPushMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppPushMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppPushMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendState", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendState = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Recipient = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpObject", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JumpObject = &v
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.JumpUrl = &s
			iNdEx = postIndex
		case 17:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Label = append(m.Label, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Label) == 0 {
					m.Label = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Label = append(m.Label, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
		case 18:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GrabTag = append(m.GrabTag, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.GrabTag) == 0 {
					m.GrabTag = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GrabTag = append(m.GrabTag, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GrabTag", wireType)
			}
		case 19:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CustomTag = append(m.CustomTag, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CustomTag) == 0 {
					m.CustomTag = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CustomTag = append(m.CustomTag, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomTag", wireType)
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ObjectId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelpType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelpType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelpType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Icon = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sort = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Optadmin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Optadmin = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelpMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelpMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelpMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsHot = &b
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Optadmin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Optadmin = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sort = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerComplaint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerComplaint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerComplaint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespondentId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RespondentId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ReContent = &s
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReTime = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GoodsId = &v
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerAcount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PlayerAcount = &s
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespondentAcount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RespondentAcount = &s
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = append(m.Icon, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reason = &v
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Phone = &s
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DynamicId = &v
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NearByGreetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NearByGreetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NearByGreetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NearByInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NearByInfo = append(m.NearByInfo, &NearByInfo{})
			if err := m.NearByInfo[len(m.NearByInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NearByInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NearByInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NearByInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsAdd = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Time = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsRead = &b
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("PlayerId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemNotice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemNotice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemNotice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserType = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CountType = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EditTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendState", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendState = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Assistant) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Assistant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Assistant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FriendType = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Nickname = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Avatar = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Phone = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddFriendType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddFriendType = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Signature = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = append(m.Photo, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pid = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sex = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("player_id")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("create_time")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("type")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SysParameter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SysParameter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SysParameter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferOneMax", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransferOneMax = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferOneDayMax", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransferOneDayMax = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTransfer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsTransfer = &b
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRedPacket", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsRedPacket = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedPacketMin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RedPacketMin = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedPacketMax", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RedPacketMax = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamRedPacketNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TeamRedPacketNum = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRecharge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsRecharge = &b
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargeMin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RechargeMin = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargeMax", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RechargeMax = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWithdrawal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsWithdrawal = &b
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalMin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithdrawalMin = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalMax", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithdrawalMax = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutSum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutSum = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTimes", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutTimes = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RiskControl", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RiskControl = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsQRcode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsQRcode = &b
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredDay", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpiredDay = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MavatarCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MavatarCount = &v
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WavatarCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WavatarCount = &v
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestMin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InterestMin = &v
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestMax", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InterestMax = &v
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextModerations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextModerations = append(m.TextModerations, &GrabTag{})
			if err := m.TextModerations[len(m.TextModerations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageModerations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageModerations = append(m.ImageModerations, &GrabTag{})
			if err := m.ImageModerations[len(m.ImageModerations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 50:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZanScore", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ZanScore = &v
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinScore", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CoinScore = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentScore", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommentScore = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotScore", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HotScore = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DampRatio", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DampRatio = &v
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargeTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RechargeTime = &v
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargeTimes", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RechargeTimes = &v
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargeGoldRate", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RechargeGoldRate = &v
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargeGold", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RechargeGold = &v
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithdrawalTime = &v
		case 60:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalTimes", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithdrawalTimes = &v
		case 61:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalGoldRate", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithdrawalGoldRate = &v
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalGold", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithdrawalGold = &v
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneList = append(m.PhoneList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 64:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentHotScore", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommentHotScore = &v
		case 65:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentHotCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommentHotCount = &v
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushSet = append(m.PushSet, &PushSettings{})
			if err := m.PushSet[len(m.PushSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 75:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EsOneBetGold", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EsOneBetGold = &v
		case 76:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EsOneDayBetGold", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EsOneDayBetGold = &v
		case 77:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EsDaySumGold", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EsDaySumGold = &v
		case 80:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrangerChatCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StrangerChatCount = &v
		case 81:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayMaxMatchTimes", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayMaxMatchTimes = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ObjId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ObjTitle = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ObjContent = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPush", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsPush = &b
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginRegisterInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginRegisterInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginRegisterInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Time = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Channel = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ChannelNo = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CompanyName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cooperation", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cooperation = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rate = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DpSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DpSet == nil {
				m.DpSet = &DownPage{}
			}
			if err := m.DpSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownPage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownPage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownPage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ModId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Icon = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Banner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Banner = append(m.Banner, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtnText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BtnText = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Floot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Floot = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpLibrary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpLibrary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpLibrary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ip = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterestTag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterestTag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterestTag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Icon = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sort = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PopIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PopIcon = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InterestType = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestName", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InterestName = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SortName = &s
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnReviewCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnReviewCount = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterestType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterestType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterestType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sort = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterestGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterestGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterestGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Group = append(m.Group, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Group) == 0 {
					m.Group = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Group = append(m.Group, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PopIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PopIcon = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tweets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tweets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tweets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ID = &v
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.List = append(m.List, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.List) == 0 {
					m.List = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.List = append(m.List, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserType = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendState", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendState = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Article", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Article = append(m.Article, &Article{})
			if err := m.Article[len(m.Article)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CatchLabel = append(m.CatchLabel, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CatchLabel) == 0 {
					m.CatchLabel = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CatchLabel = append(m.CatchLabel, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CatchLabel", wireType)
			}
		case 13:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CustomLabel = append(m.CustomLabel, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CustomLabel) == 0 {
					m.CustomLabel = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CustomLabel = append(m.CustomLabel, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomLabel", wireType)
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllLabel", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllLabel = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JgPush", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JgPush = &v
		case 16:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validity", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Validity = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ID = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllLabel", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllLabel = &v
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.List = append(m.List, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.List) == 0 {
					m.List = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.List = append(m.List, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CatchLabel = append(m.CatchLabel, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CatchLabel) == 0 {
					m.CatchLabel = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CatchLabel = append(m.CatchLabel, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CatchLabel", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CustomLabel = append(m.CustomLabel, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CustomLabel) == 0 {
					m.CustomLabel = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CustomLabel = append(m.CustomLabel, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomLabel", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserType = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Article", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Article = append(m.Article, &Article{})
			if err := m.Article[len(m.Article)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Article) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Article: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Article: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ID = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ArticleType = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Icon = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EditTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMain", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMain = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Location = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransArticleUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TransArticleUrl = &s
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sort = &v
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Profile = &s
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadedNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReadedNum = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadedNumVirtual", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReadedNumVirtual = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadedBase", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReadedBase = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZanNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ZanNum = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadingNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReadingNum = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsZan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsZan = &b
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = append(m.Comments, &ArticleComment{})
			if err := m.Comments[len(m.Comments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommentNum = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ObjectId = &v
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjPlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ObjPlayerId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleZan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleZan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleZan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ArticleId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadUrl = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleComment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleComment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleComment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ArticleId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadUrl = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomTag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomTag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomTag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrawlWords) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrawlWords: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrawlWords: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrabTag", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GrabTag = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrabTag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrabTag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrabTag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WordPerSonalId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WordPerSonalId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WordTeamId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WordTeamId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerCrawlWords) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerCrawlWords: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerCrawlWords: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Words", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Words = append(m.Words, &CrawlWords{})
			if err := m.Words[len(m.Words)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &GrabTag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PosDeviceCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PosDeviceCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PosDeviceCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DeviceCode = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Channle = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PosDeviceIdfa) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PosDeviceIdfa: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PosDeviceIdfa: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceIdfa", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DeviceIdfa = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Source = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerTalkLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerTalkLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerTalkLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TargetId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connect", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Connect = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Words", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Words = append(m.Words, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvilType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EvilType = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirtyWords) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirtyWords: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirtyWords: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Word", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Word = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Signature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IMmessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IMmessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IMmessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content, &IMcontent{})
			if err := m.Content[len(m.Content)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadIcon = &s
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaiterId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WaiterId = &v
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaiterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WaiterName = &s
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OriginalId = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnew", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cnew = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snew", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Snew = &v
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Grade = &v
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumContent", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumContent = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IMcontent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IMcontent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IMcontent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sendtime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sendtime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtype", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mtype = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Messages = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctype", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ctype = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WaiterPerformance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WaiterPerformance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WaiterPerformance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaiterId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WaiterId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaiterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WaiterName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaiterRole", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WaiterRole = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConNum = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GradeNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GradeNum = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumGrade", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumGrade = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WaiterFAQ) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WaiterFAQ: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WaiterFAQ: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyWord", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyWord = append(m.KeyWord, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clicks", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clicks = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WaiterFastReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WaiterFastReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WaiterFastReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerFreezeLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerFreezeLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerFreezeLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerCancleAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerCancleAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerCancleAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Phone = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RealName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeopleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PeopleId = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeopleIdBeforeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PeopleIdBeforeUrl = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeopleIdBackUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PeopleIdBackUrl = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeopleIdHandUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PeopleIdHandUrl = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FinishTime = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelAccountList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelAccountList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelAccountList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Phone = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FinishTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Activity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Activity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Activity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OpenTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CloseTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Props) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Props: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Props: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActivityId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rate = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DayProps) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DayProps: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DayProps: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerProps) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerProps: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerProps: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropsId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PropsId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpiredTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerUsePropsLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerUsePropsLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerUsePropsLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropsId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PropsId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevPlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RevPlayerId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadIcon = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LuckyPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LuckyPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LuckyPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFull", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsFull = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FullTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyMoney", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyMoney = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOpen = &b
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OpenTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNewLucky", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsNewLucky = &b
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullPlaces", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FullPlaces = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LuckyPlayerRelated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LuckyPlayerRelated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LuckyPlayerRelated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FriendPhone = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelatedTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RelatedTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PropsRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PropsRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PropsRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rate = append(m.Rate, &Props{})
			if err := m.Rate[len(m.Rate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LuckySysFullCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LuckySysFullCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LuckySysFullCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FullCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataCountry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataCountry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataCountry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Code = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataArea) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataArea: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataArea: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Country = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataRegion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataRegion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataRegion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Code = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Country = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Area = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataCity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataCity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataCity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Code = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Country = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Area = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Region = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadDynamicDevice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadDynamicDevice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadDynamicDevice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Code = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvLogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvLogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvLogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdvId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OpType = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OpTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KsPosAdvIdfa) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KsPosAdvIdfa: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KsPosAdvIdfa: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeMd5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CodeMd5 = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdvId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OsType = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ip = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScenesId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ScenesId = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Callback", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Callback = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsActive = &b
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActiveTime = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRegister", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsRegister = &b
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegisterTime = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Platform = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Code = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoVoiceDurationLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoVoiceDurationLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoVoiceDurationLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Duration = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TargetId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecallPlayerLog) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecallPlayerLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecallPlayerLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecallTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecallTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("PlayerId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NearSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NearSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NearSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Icon = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JumpType = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpObjId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JumpObjId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpObject", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JumpObject = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.JumpUrl = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weights", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Weights = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpStyle", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JumpStyle = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NearSessionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NearSessionList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NearSessionList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendPlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendPlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivePlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReceivePlayerId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsRead = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ContentType = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientUnique", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ClientUnique = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropsId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PropsId = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NearMessageNewLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NearMessageNewLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NearMessageNewLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendPlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendPlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivePlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReceivePlayerId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ContentType = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsRead = &b
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFirst", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsFirst = &b
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PlayerIds = append(m.PlayerIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PlayerIds) == 0 {
					m.PlayerIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PlayerIds = append(m.PlayerIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerIds", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SessionName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionHeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SessionHeadUrl = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxLogId = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReadInfo = append(m.ReadInfo, &ReadLogInfo{})
			if err := m.ReadInfo[len(m.ReadInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamName = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Topic = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadLogInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadLogInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadLogInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReadId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TalkNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TalkNum = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTalkTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastTalkTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NearReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NearReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NearReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdvId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PvCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PvCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UvCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UvCount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clicks", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clicks = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClickPlayers", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClickPlayers = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Near", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Near == nil {
				m.Near = &NearSet{}
			}
			if err := m.Near.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommStrId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommStrId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommStrId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESportCoinRecharge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportCoinRecharge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportCoinRecharge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargeCoin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RechargeCoin = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OrderId = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SourceType = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtendLog == nil {
				m.ExtendLog = &GoldExtendLog{}
			}
			if err := m.ExtendLog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ButtonClickReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ButtonClickReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ButtonClickReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgreementYes", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AgreementYes = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgreementNo", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AgreementNo = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Phone = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeChat", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WeChat = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneClick", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OneClick = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneClickCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OneClickCount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherClick", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OtherClick = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginBack", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LoginBack = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendCode", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendCode = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReSendCode", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReSendCode = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InPhoneBack", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InPhoneBack = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InCodeBack", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InCodeBack = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfoBack", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InfoBack = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InNmBtnCLick", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InNmBtnCLick = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InNmBtnCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InNmBtnCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ButtonClickLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ButtonClickLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ButtonClickLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageRegLogReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageRegLogReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageRegLogReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Channel = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DicType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DicType = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginTimes", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LoginTimes = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LoginCount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneLoginTimes", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OneLoginTimes = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneLoginCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OneLoginCount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WxLoginTimes", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WxLoginTimes = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WxLoginCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WxLoginCount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneRegTimes", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PhoneRegTimes = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneRegCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PhoneRegCount = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegCodeTimes", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegCodeTimes = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegCodeCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegCodeCount = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseInfoTimes", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseInfoTimes = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseInfoCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseInfoCount = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntWallTimes", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IntWallTimes = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntWallCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IntWallCount = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecPageTimes", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecPageTimes = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecPageCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecPageCount = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActDevCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActDevCount = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidActDevCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ValidActDevCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageRegLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageRegLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageRegLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Code = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DicType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DicType = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Channel = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerOperate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerOperate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerOperate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexTips) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexTips: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexTips: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weights", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Weights = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdvId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BKUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BKUrl = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PopSuspend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PopSuspend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PopSuspend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsPop = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuspend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsSuspend = &b
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdvId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTableStruct(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTableStruct
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTableStruct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTableStruct
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTableStruct
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTableStruct
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTableStruct(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTableStruct
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTableStruct = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTableStruct   = fmt.Errorf("proto: integer overflow")
)
