// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: table_struct_voice_love.proto

package share_message

import (
	fmt "fmt"
	proto "github.com/akqp2019/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//亲密度配置:intimacy_config
type IntimacyConfig struct {
	Lv                   *int32   `protobuf:"varint,1,opt,name=Lv" json:"_id,omitempty" bson:"_id,omitempty"`
	MaxVal               *int64   `protobuf:"varint,2,opt,name=MaxVal" json:"MaxVal,omitempty" bson:"MaxVal,omitempty"`
	PerDayVal            *int32   `protobuf:"varint,3,opt,name=PerDayVal" json:"PerDayVal,omitempty" bson:"PerDayVal,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *IntimacyConfig) Reset()         { *m = IntimacyConfig{} }
func (m *IntimacyConfig) String() string { return proto.CompactTextString(m) }
func (*IntimacyConfig) ProtoMessage()    {}
func (*IntimacyConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df4ca03cd427f53, []int{0}
}
func (m *IntimacyConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IntimacyConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IntimacyConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IntimacyConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntimacyConfig.Merge(m, src)
}
func (m *IntimacyConfig) XXX_Size() int {
	return m.Size()
}
func (m *IntimacyConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_IntimacyConfig.DiscardUnknown(m)
}

var xxx_messageInfo_IntimacyConfig proto.InternalMessageInfo

func (m *IntimacyConfig) GetLv() int32 {
	if m != nil && m.Lv != nil {
		return *m.Lv
	}
	return 0
}

func (m *IntimacyConfig) GetMaxVal() int64 {
	if m != nil && m.MaxVal != nil {
		return *m.MaxVal
	}
	return 0
}

func (m *IntimacyConfig) GetPerDayVal() int32 {
	if m != nil && m.PerDayVal != nil {
		return *m.PerDayVal
	}
	return 0
}

//玩家亲密度
type PlayerIntimacy struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	IntimacyVal          *int64   `protobuf:"varint,2,opt,name=IntimacyVal" json:"IntimacyVal,omitempty" bson:"IntimacyVal,omitempty"`
	IntimacyLv           *int32   `protobuf:"varint,3,opt,name=IntimacyLv" json:"IntimacyLv,omitempty" bson:"IntimacyLv,omitempty"`
	LastTime             *int64   `protobuf:"varint,4,opt,name=LastTime" json:"LastTime,omitempty" bson:"LastTime,omitempty"`
	IsSayHi              *bool    `protobuf:"varint,5,opt,name=IsSayHi" json:"IsSayHi,omitempty" bson:"IsSayHi,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerIntimacy) Reset()         { *m = PlayerIntimacy{} }
func (m *PlayerIntimacy) String() string { return proto.CompactTextString(m) }
func (*PlayerIntimacy) ProtoMessage()    {}
func (*PlayerIntimacy) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df4ca03cd427f53, []int{1}
}
func (m *PlayerIntimacy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerIntimacy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerIntimacy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerIntimacy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerIntimacy.Merge(m, src)
}
func (m *PlayerIntimacy) XXX_Size() int {
	return m.Size()
}
func (m *PlayerIntimacy) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerIntimacy.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerIntimacy proto.InternalMessageInfo

func (m *PlayerIntimacy) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *PlayerIntimacy) GetIntimacyVal() int64 {
	if m != nil && m.IntimacyVal != nil {
		return *m.IntimacyVal
	}
	return 0
}

func (m *PlayerIntimacy) GetIntimacyLv() int32 {
	if m != nil && m.IntimacyLv != nil {
		return *m.IntimacyLv
	}
	return 0
}

func (m *PlayerIntimacy) GetLastTime() int64 {
	if m != nil && m.LastTime != nil {
		return *m.LastTime
	}
	return 0
}

func (m *PlayerIntimacy) GetIsSayHi() bool {
	if m != nil && m.IsSayHi != nil {
		return *m.IsSayHi
	}
	return false
}

//语音恋爱操作行为:player_vc_zan_log
type PlayerVCZanLog struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	TargetId             *int64   `protobuf:"varint,3,opt,name=TargetId" json:"TargetId,omitempty" bson:"TargetId,omitempty"`
	CreateTime           *int64   `protobuf:"varint,4,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	ZanNum               *int32   `protobuf:"varint,5,opt,name=ZanNum" json:"ZanNum,omitempty" bson:"ZanNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerVCZanLog) Reset()         { *m = PlayerVCZanLog{} }
func (m *PlayerVCZanLog) String() string { return proto.CompactTextString(m) }
func (*PlayerVCZanLog) ProtoMessage()    {}
func (*PlayerVCZanLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df4ca03cd427f53, []int{2}
}
func (m *PlayerVCZanLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerVCZanLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerVCZanLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerVCZanLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerVCZanLog.Merge(m, src)
}
func (m *PlayerVCZanLog) XXX_Size() int {
	return m.Size()
}
func (m *PlayerVCZanLog) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerVCZanLog.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerVCZanLog proto.InternalMessageInfo

func (m *PlayerVCZanLog) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerVCZanLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerVCZanLog) GetTargetId() int64 {
	if m != nil && m.TargetId != nil {
		return *m.TargetId
	}
	return 0
}

func (m *PlayerVCZanLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PlayerVCZanLog) GetZanNum() int32 {
	if m != nil && m.ZanNum != nil {
		return *m.ZanNum
	}
	return 0
}

//打招呼行为列表:player_vc_say_hi_log
type PlayerVCSayHiLog struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	TargetId             *int64   `protobuf:"varint,3,opt,name=TargetId" json:"TargetId,omitempty" bson:"TargetId,omitempty"`
	CreateTime           *int64   `protobuf:"varint,4,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerVCSayHiLog) Reset()         { *m = PlayerVCSayHiLog{} }
func (m *PlayerVCSayHiLog) String() string { return proto.CompactTextString(m) }
func (*PlayerVCSayHiLog) ProtoMessage()    {}
func (*PlayerVCSayHiLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df4ca03cd427f53, []int{3}
}
func (m *PlayerVCSayHiLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerVCSayHiLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerVCSayHiLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerVCSayHiLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerVCSayHiLog.Merge(m, src)
}
func (m *PlayerVCSayHiLog) XXX_Size() int {
	return m.Size()
}
func (m *PlayerVCSayHiLog) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerVCSayHiLog.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerVCSayHiLog proto.InternalMessageInfo

func (m *PlayerVCSayHiLog) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerVCSayHiLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerVCSayHiLog) GetTargetId() int64 {
	if m != nil && m.TargetId != nil {
		return *m.TargetId
	}
	return 0
}

func (m *PlayerVCSayHiLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

//关注，包括打招呼和点赞的玩家
type PlayerAttentionLog struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	TargetId             *int64   `protobuf:"varint,3,opt,name=TargetId" json:"TargetId,omitempty" bson:"TargetId,omitempty"`
	SortTime             *int64   `protobuf:"varint,4,opt,name=SortTime" json:"SortTime,omitempty" bson:"SortTime,omitempty"`
	SayHiTime            *int64   `protobuf:"varint,5,opt,name=SayHiTime" json:"SayHiTime,omitempty" bson:"SayHiTime,omitempty"`
	Opt                  *int32   `protobuf:"varint,6,opt,name=Opt" json:"Opt,omitempty" bson:"Opt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerAttentionLog) Reset()         { *m = PlayerAttentionLog{} }
func (m *PlayerAttentionLog) String() string { return proto.CompactTextString(m) }
func (*PlayerAttentionLog) ProtoMessage()    {}
func (*PlayerAttentionLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df4ca03cd427f53, []int{4}
}
func (m *PlayerAttentionLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerAttentionLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerAttentionLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerAttentionLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerAttentionLog.Merge(m, src)
}
func (m *PlayerAttentionLog) XXX_Size() int {
	return m.Size()
}
func (m *PlayerAttentionLog) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerAttentionLog.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerAttentionLog proto.InternalMessageInfo

func (m *PlayerAttentionLog) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerAttentionLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerAttentionLog) GetTargetId() int64 {
	if m != nil && m.TargetId != nil {
		return *m.TargetId
	}
	return 0
}

func (m *PlayerAttentionLog) GetSortTime() int64 {
	if m != nil && m.SortTime != nil {
		return *m.SortTime
	}
	return 0
}

func (m *PlayerAttentionLog) GetSayHiTime() int64 {
	if m != nil && m.SayHiTime != nil {
		return *m.SayHiTime
	}
	return 0
}

func (m *PlayerAttentionLog) GetOpt() int32 {
	if m != nil && m.Opt != nil {
		return *m.Opt
	}
	return 0
}

//公共背景音频短片:bg_voice_video
type BgVoiceVideo struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Maker                *string  `protobuf:"bytes,3,opt,name=Maker" json:"Maker,omitempty" bson:"Maker,omitempty"`
	Name                 *string  `protobuf:"bytes,4,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Tags                 []int32  `protobuf:"varint,5,rep,name=Tags" json:"Tags,omitempty" bson:"Tags,omitempty"`
	Content              *string  `protobuf:"bytes,6,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	MusicUrl             *string  `protobuf:"bytes,7,opt,name=MusicUrl" json:"MusicUrl,omitempty" bson:"MusicUrl,omitempty"`
	ImageUrl             *string  `protobuf:"bytes,8,opt,name=ImageUrl" json:"ImageUrl,omitempty" bson:"ImageUrl,omitempty"`
	Type                 *int32   `protobuf:"varint,9,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	CreateTime           *int64   `protobuf:"varint,10,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	PlayerType           *int64   `protobuf:"varint,11,opt,name=PlayerType" json:"PlayerType,omitempty" bson:"PlayerType,omitempty"`
	UseCount             *int64   `protobuf:"varint,12,opt,name=UseCount" json:"UseCount,omitempty" bson:"UseCount,omitempty"`
	Status               *int32   `protobuf:"varint,13,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	MusicTime            *int64   `protobuf:"varint,14,opt,name=MusicTime" json:"MusicTime,omitempty" bson:"MusicTime,omitempty"`
	PlayerAccount        *string  `protobuf:"bytes,18,opt,name=PlayerAccount" json:"-" bson:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *BgVoiceVideo) Reset()         { *m = BgVoiceVideo{} }
func (m *BgVoiceVideo) String() string { return proto.CompactTextString(m) }
func (*BgVoiceVideo) ProtoMessage()    {}
func (*BgVoiceVideo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df4ca03cd427f53, []int{5}
}
func (m *BgVoiceVideo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BgVoiceVideo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BgVoiceVideo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BgVoiceVideo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgVoiceVideo.Merge(m, src)
}
func (m *BgVoiceVideo) XXX_Size() int {
	return m.Size()
}
func (m *BgVoiceVideo) XXX_DiscardUnknown() {
	xxx_messageInfo_BgVoiceVideo.DiscardUnknown(m)
}

var xxx_messageInfo_BgVoiceVideo proto.InternalMessageInfo

func (m *BgVoiceVideo) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BgVoiceVideo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *BgVoiceVideo) GetMaker() string {
	if m != nil && m.Maker != nil {
		return *m.Maker
	}
	return ""
}

func (m *BgVoiceVideo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BgVoiceVideo) GetTags() []int32 {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *BgVoiceVideo) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *BgVoiceVideo) GetMusicUrl() string {
	if m != nil && m.MusicUrl != nil {
		return *m.MusicUrl
	}
	return ""
}

func (m *BgVoiceVideo) GetImageUrl() string {
	if m != nil && m.ImageUrl != nil {
		return *m.ImageUrl
	}
	return ""
}

func (m *BgVoiceVideo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *BgVoiceVideo) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *BgVoiceVideo) GetPlayerType() int64 {
	if m != nil && m.PlayerType != nil {
		return *m.PlayerType
	}
	return 0
}

func (m *BgVoiceVideo) GetUseCount() int64 {
	if m != nil && m.UseCount != nil {
		return *m.UseCount
	}
	return 0
}

func (m *BgVoiceVideo) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *BgVoiceVideo) GetMusicTime() int64 {
	if m != nil && m.MusicTime != nil {
		return *m.MusicTime
	}
	return 0
}

func (m *BgVoiceVideo) GetPlayerAccount() string {
	if m != nil && m.PlayerAccount != nil {
		return *m.PlayerAccount
	}
	return ""
}

//玩家制作的语音:player_mix_voice_video
type PlayerMixVoiceVideo struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	BgId                 *int64   `protobuf:"varint,3,opt,name=BgId" json:"BgId,omitempty" bson:"BgId,omitempty"`
	MixVoiceUrl          *string  `protobuf:"bytes,4,opt,name=MixVoiceUrl" json:"MixVoiceUrl,omitempty" bson:"MixVoiceUrl,omitempty"`
	CreateTime           *int64   `protobuf:"varint,5,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	PlayerType           *int64   `protobuf:"varint,6,opt,name=PlayerType" json:"PlayerType,omitempty" bson:"PlayerType,omitempty"`
	Status               *int32   `protobuf:"varint,7,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	MixTime              *int64   `protobuf:"varint,8,opt,name=MixTime" json:"MixTime,omitempty" bson:"MixTime,omitempty"`
	IsUse                *bool    `protobuf:"varint,13,opt,name=IsUse" json:"IsUse,omitempty" bson:"IsUse,omitempty"`
	PlayerAccount        *string  `protobuf:"bytes,10,opt,name=PlayerAccount" json:"-" bson:"-"`
	Type                 *int32   `protobuf:"varint,11,opt,name=Type" json:"-" bson:"-"`
	Content              *string  `protobuf:"bytes,12,opt,name=Content" json:"-" bson:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerMixVoiceVideo) Reset()         { *m = PlayerMixVoiceVideo{} }
func (m *PlayerMixVoiceVideo) String() string { return proto.CompactTextString(m) }
func (*PlayerMixVoiceVideo) ProtoMessage()    {}
func (*PlayerMixVoiceVideo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df4ca03cd427f53, []int{6}
}
func (m *PlayerMixVoiceVideo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerMixVoiceVideo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerMixVoiceVideo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerMixVoiceVideo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerMixVoiceVideo.Merge(m, src)
}
func (m *PlayerMixVoiceVideo) XXX_Size() int {
	return m.Size()
}
func (m *PlayerMixVoiceVideo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerMixVoiceVideo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerMixVoiceVideo proto.InternalMessageInfo

func (m *PlayerMixVoiceVideo) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerMixVoiceVideo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerMixVoiceVideo) GetBgId() int64 {
	if m != nil && m.BgId != nil {
		return *m.BgId
	}
	return 0
}

func (m *PlayerMixVoiceVideo) GetMixVoiceUrl() string {
	if m != nil && m.MixVoiceUrl != nil {
		return *m.MixVoiceUrl
	}
	return ""
}

func (m *PlayerMixVoiceVideo) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PlayerMixVoiceVideo) GetPlayerType() int64 {
	if m != nil && m.PlayerType != nil {
		return *m.PlayerType
	}
	return 0
}

func (m *PlayerMixVoiceVideo) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *PlayerMixVoiceVideo) GetMixTime() int64 {
	if m != nil && m.MixTime != nil {
		return *m.MixTime
	}
	return 0
}

func (m *PlayerMixVoiceVideo) GetIsUse() bool {
	if m != nil && m.IsUse != nil {
		return *m.IsUse
	}
	return false
}

func (m *PlayerMixVoiceVideo) GetPlayerAccount() string {
	if m != nil && m.PlayerAccount != nil {
		return *m.PlayerAccount
	}
	return ""
}

func (m *PlayerMixVoiceVideo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *PlayerMixVoiceVideo) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

//匹配度分值配置
type MatchingDegreeParam struct {
	OnLine               *int32   `protobuf:"varint,1,opt,name=OnLine" json:"OnLine,omitempty" bson:"OnLine,omitempty"`
	OffLine              *int32   `protobuf:"varint,2,opt,name=OffLine" json:"OffLine,omitempty" bson:"OffLine,omitempty"`
	SameSex              *int32   `protobuf:"varint,3,opt,name=SameSex" json:"SameSex,omitempty" bson:"SameSex,omitempty"`
	UnSameSex            *int32   `protobuf:"varint,4,opt,name=UnSameSex" json:"UnSameSex,omitempty" bson:"UnSameSex,omitempty"`
	LabelMax             *int32   `protobuf:"varint,5,opt,name=LabelMax" json:"LabelMax,omitempty" bson:"LabelMax,omitempty"`
	LabelPer             *int32   `protobuf:"varint,6,opt,name=LabelPer" json:"LabelPer,omitempty" bson:"LabelPer,omitempty"`
	PersonalTagMax       *int32   `protobuf:"varint,7,opt,name=PersonalTagMax" json:"PersonalTagMax,omitempty" bson:"PersonalTagMax,omitempty"`
	PersonalTagPer       *int32   `protobuf:"varint,8,opt,name=PersonalTagPer" json:"PersonalTagPer,omitempty" bson:"PersonalTagPer,omitempty"`
	Constellation        *int32   `protobuf:"varint,9,opt,name=Constellation" json:"Constellation,omitempty" bson:"Constellation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *MatchingDegreeParam) Reset()         { *m = MatchingDegreeParam{} }
func (m *MatchingDegreeParam) String() string { return proto.CompactTextString(m) }
func (*MatchingDegreeParam) ProtoMessage()    {}
func (*MatchingDegreeParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df4ca03cd427f53, []int{7}
}
func (m *MatchingDegreeParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchingDegreeParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchingDegreeParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchingDegreeParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchingDegreeParam.Merge(m, src)
}
func (m *MatchingDegreeParam) XXX_Size() int {
	return m.Size()
}
func (m *MatchingDegreeParam) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchingDegreeParam.DiscardUnknown(m)
}

var xxx_messageInfo_MatchingDegreeParam proto.InternalMessageInfo

func (m *MatchingDegreeParam) GetOnLine() int32 {
	if m != nil && m.OnLine != nil {
		return *m.OnLine
	}
	return 0
}

func (m *MatchingDegreeParam) GetOffLine() int32 {
	if m != nil && m.OffLine != nil {
		return *m.OffLine
	}
	return 0
}

func (m *MatchingDegreeParam) GetSameSex() int32 {
	if m != nil && m.SameSex != nil {
		return *m.SameSex
	}
	return 0
}

func (m *MatchingDegreeParam) GetUnSameSex() int32 {
	if m != nil && m.UnSameSex != nil {
		return *m.UnSameSex
	}
	return 0
}

func (m *MatchingDegreeParam) GetLabelMax() int32 {
	if m != nil && m.LabelMax != nil {
		return *m.LabelMax
	}
	return 0
}

func (m *MatchingDegreeParam) GetLabelPer() int32 {
	if m != nil && m.LabelPer != nil {
		return *m.LabelPer
	}
	return 0
}

func (m *MatchingDegreeParam) GetPersonalTagMax() int32 {
	if m != nil && m.PersonalTagMax != nil {
		return *m.PersonalTagMax
	}
	return 0
}

func (m *MatchingDegreeParam) GetPersonalTagPer() int32 {
	if m != nil && m.PersonalTagPer != nil {
		return *m.PersonalTagPer
	}
	return 0
}

func (m *MatchingDegreeParam) GetConstellation() int32 {
	if m != nil && m.Constellation != nil {
		return *m.Constellation
	}
	return 0
}

//系统背景图:system_bg_image
type SystemBgImage struct {
	Url                  *string  `protobuf:"bytes,1,opt,name=Url" json:"_id,omitempty" bson:"_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *SystemBgImage) Reset()         { *m = SystemBgImage{} }
func (m *SystemBgImage) String() string { return proto.CompactTextString(m) }
func (*SystemBgImage) ProtoMessage()    {}
func (*SystemBgImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df4ca03cd427f53, []int{8}
}
func (m *SystemBgImage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemBgImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemBgImage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemBgImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemBgImage.Merge(m, src)
}
func (m *SystemBgImage) XXX_Size() int {
	return m.Size()
}
func (m *SystemBgImage) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemBgImage.DiscardUnknown(m)
}

var xxx_messageInfo_SystemBgImage proto.InternalMessageInfo

func (m *SystemBgImage) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

//埋点日志记录:burying_point_log
type BuryingPointLog struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	EventType            *int32   `protobuf:"varint,3,opt,name=EventType" json:"EventType,omitempty" bson:"EventType,omitempty"`
	Time                 *int64   `protobuf:"varint,4,opt,name=Time" json:"Time,omitempty" bson:"Time,omitempty"`
	LastTime             *int64   `protobuf:"varint,5,opt,name=LastTime" json:"LastTime,omitempty" bson:"LastTime,omitempty"`
	TargetId             *int64   `protobuf:"varint,6,opt,name=TargetId" json:"TargetId,omitempty" bson:"TargetId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *BuryingPointLog) Reset()         { *m = BuryingPointLog{} }
func (m *BuryingPointLog) String() string { return proto.CompactTextString(m) }
func (*BuryingPointLog) ProtoMessage()    {}
func (*BuryingPointLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df4ca03cd427f53, []int{9}
}
func (m *BuryingPointLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuryingPointLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuryingPointLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuryingPointLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuryingPointLog.Merge(m, src)
}
func (m *BuryingPointLog) XXX_Size() int {
	return m.Size()
}
func (m *BuryingPointLog) XXX_DiscardUnknown() {
	xxx_messageInfo_BuryingPointLog.DiscardUnknown(m)
}

var xxx_messageInfo_BuryingPointLog proto.InternalMessageInfo

func (m *BuryingPointLog) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BuryingPointLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *BuryingPointLog) GetEventType() int32 {
	if m != nil && m.EventType != nil {
		return *m.EventType
	}
	return 0
}

func (m *BuryingPointLog) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *BuryingPointLog) GetLastTime() int64 {
	if m != nil && m.LastTime != nil {
		return *m.LastTime
	}
	return 0
}

func (m *BuryingPointLog) GetTargetId() int64 {
	if m != nil && m.TargetId != nil {
		return *m.TargetId
	}
	return 0
}

//埋点报表，每天一份:vc_burying_point_report
type VCBuryingPointReport struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	MainEnterPeopleNum   *int64   `protobuf:"varint,2,opt,name=MainEnterPeopleNum" json:"MainEnterPeopleNum,omitempty" bson:"MainEnterPeopleNum,omitempty"`
	MainEnterNum         *int64   `protobuf:"varint,3,opt,name=MainEnterNum" json:"MainEnterNum,omitempty" bson:"MainEnterNum,omitempty"`
	MainReadCardNum      *int64   `protobuf:"varint,4,opt,name=MainReadCardNum" json:"MainReadCardNum,omitempty" bson:"MainReadCardNum,omitempty"`
	MainSayHiNum         *int64   `protobuf:"varint,5,opt,name=MainSayHiNum" json:"MainSayHiNum,omitempty" bson:"MainSayHiNum,omitempty"`
	MainZanNum           *int64   `protobuf:"varint,6,opt,name=MainZanNum" json:"MainZanNum,omitempty" bson:"MainZanNum,omitempty"`
	MainFreshNum         *int64   `protobuf:"varint,7,opt,name=MainFreshNum" json:"MainFreshNum,omitempty" bson:"MainFreshNum,omitempty"`
	MainHeadNum          *int64   `protobuf:"varint,8,opt,name=MainHeadNum" json:"MainHeadNum,omitempty" bson:"MainHeadNum,omitempty"`
	MainRecordNum        *int64   `protobuf:"varint,9,opt,name=MainRecordNum" json:"MainRecordNum,omitempty" bson:"MainRecordNum,omitempty"`
	MainFinishNum        *int64   `protobuf:"varint,10,opt,name=MainFinishNum" json:"MainFinishNum,omitempty" bson:"MainFinishNum,omitempty"`
	MainHeadCardNum      *int64   `protobuf:"varint,11,opt,name=MainHeadCardNum" json:"MainHeadCardNum,omitempty" bson:"MainHeadCardNum,omitempty"`
	MainHandShake        *int64   `protobuf:"varint,12,opt,name=MainHandShake" json:"MainHandShake,omitempty" bson:"MainHandShake,omitempty"`
	MainOnLineTime       *int64   `protobuf:"varint,13,opt,name=MainOnLineTime" json:"MainOnLineTime,omitempty" bson:"MainOnLineTime,omitempty"`
	LZMPEnterPeopleNum   *int64   `protobuf:"varint,14,opt,name=LZMPEnterPeopleNum" json:"LZMPEnterPeopleNum,omitempty" bson:"LZMPEnterPeopleNum,omitempty"`
	LZMPEnterNum         *int64   `protobuf:"varint,15,opt,name=LZMPEnterNum" json:"LZMPEnterNum,omitempty" bson:"LZMPEnterNum,omitempty"`
	LZMPBackNum          *int64   `protobuf:"varint,16,opt,name=LZMPBackNum" json:"LZMPBackNum,omitempty" bson:"LZMPBackNum,omitempty"`
	LZMPDuBai            *int64   `protobuf:"varint,17,opt,name=LZMPDuBai" json:"LZMPDuBai,omitempty" bson:"LZMPDuBai,omitempty"`
	LZMPdypy             *int64   `protobuf:"varint,18,opt,name=LZMPdypy" json:"LZMPdypy,omitempty" bson:"LZMPdypy,omitempty"`
	LZMPcyc              *int64   `protobuf:"varint,19,opt,name=LZMPcyc" json:"LZMPcyc,omitempty" bson:"LZMPcyc,omitempty"`
	LZMPly               *int64   `protobuf:"varint,20,opt,name=LZMPly" json:"LZMPly,omitempty" bson:"LZMPly,omitempty"`
	LZMPlyNum            *int64   `protobuf:"varint,21,opt,name=LZMPlyNum" json:"LZMPlyNum,omitempty" bson:"LZMPlyNum,omitempty"`
	LZMPssgd             *int64   `protobuf:"varint,22,opt,name=LZMPssgd" json:"LZMPssgd,omitempty" bson:"LZMPssgd,omitempty"`
	LZMPqx               *int64   `protobuf:"varint,23,opt,name=LZMPqx" json:"LZMPqx,omitempty" bson:"LZMPqx,omitempty"`
	LZMPcg               *int64   `protobuf:"varint,24,opt,name=LZMPcg" json:"LZMPcg,omitempty" bson:"LZMPcg,omitempty"`
	LZMPjymp             *int64   `protobuf:"varint,25,opt,name=LZMPjymp" json:"LZMPjymp,omitempty" bson:"LZMPjymp,omitempty"`
	LZMPOnlineTime       *int64   `protobuf:"varint,26,opt,name=LZMPOnlineTime" json:"LZMPOnlineTime,omitempty" bson:"LZMPOnlineTime,omitempty"`
	SXHWEnterPeopleNum   *int64   `protobuf:"varint,27,opt,name=SXHWEnterPeopleNum" json:"SXHWEnterPeopleNum,omitempty" bson:"SXHWEnterPeopleNum,omitempty"`
	SXHWxhw              *int64   `protobuf:"varint,28,opt,name=SXHWxhw" json:"SXHWxhw,omitempty" bson:"SXHWxhw,omitempty"`
	SXHWwxh              *int64   `protobuf:"varint,29,opt,name=SXHWwxh" json:"SXHWwxh,omitempty" bson:"SXHWwxh,omitempty"`
	SXHWxhwHuiFu         *int64   `protobuf:"varint,30,opt,name=SXHWxhwHuiFu" json:"SXHWxhwHuiFu,omitempty" bson:"SXHWxhwHuiFu,omitempty"`
	SXHWxhwSayHi         *int64   `protobuf:"varint,31,opt,name=SXHWxhwSayHi" json:"SXHWxhwSayHi,omitempty" bson:"SXHWxhwSayHi,omitempty"`
	SXHWxhwZan           *int64   `protobuf:"varint,32,opt,name=SXHWxhwZan" json:"SXHWxhwZan,omitempty" bson:"SXHWxhwZan,omitempty"`
	SXHWwxhBoFang        *int64   `protobuf:"varint,33,opt,name=SXHWwxhBoFang" json:"SXHWwxhBoFang,omitempty" bson:"SXHWwxhBoFang,omitempty"`
	SXHWwxhChat          *int64   `protobuf:"varint,34,opt,name=SXHWwxhChat" json:"SXHWwxhChat,omitempty" bson:"SXHWwxhChat,omitempty"`
	SXHWwxhHead          *int64   `protobuf:"varint,35,opt,name=SXHWwxhHead" json:"SXHWwxhHead,omitempty" bson:"SXHWwxhHead,omitempty"`
	SSGDEnterPeopleNum   *int64   `protobuf:"varint,36,opt,name=SSGDEnterPeopleNum" json:"SSGDEnterPeopleNum,omitempty" bson:"SSGDEnterPeopleNum,omitempty"`
	SSGDsc               *int64   `protobuf:"varint,37,opt,name=SSGDsc" json:"SSGDsc,omitempty" bson:"SSGDsc,omitempty"`
	SSGDscBackNum        *int64   `protobuf:"varint,38,opt,name=SSGDscBackNum" json:"SSGDscBackNum,omitempty" bson:"SSGDscBackNum,omitempty"`
	SSGDscTJNum          *int64   `protobuf:"varint,39,opt,name=SSGDscTJNum" json:"SSGDscTJNum,omitempty" bson:"SSGDscTJNum,omitempty"`
	SSGDOnlineTime       *int64   `protobuf:"varint,40,opt,name=SSGDOnlineTime" json:"SSGDOnlineTime,omitempty" bson:"SSGDOnlineTime,omitempty"`
	LZMPcgOK             *int64   `protobuf:"varint,41,opt,name=LZMPcgOK" json:"LZMPcgOK,omitempty" bson:"LZMPcgOK,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *VCBuryingPointReport) Reset()         { *m = VCBuryingPointReport{} }
func (m *VCBuryingPointReport) String() string { return proto.CompactTextString(m) }
func (*VCBuryingPointReport) ProtoMessage()    {}
func (*VCBuryingPointReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df4ca03cd427f53, []int{10}
}
func (m *VCBuryingPointReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VCBuryingPointReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VCBuryingPointReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VCBuryingPointReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VCBuryingPointReport.Merge(m, src)
}
func (m *VCBuryingPointReport) XXX_Size() int {
	return m.Size()
}
func (m *VCBuryingPointReport) XXX_DiscardUnknown() {
	xxx_messageInfo_VCBuryingPointReport.DiscardUnknown(m)
}

var xxx_messageInfo_VCBuryingPointReport proto.InternalMessageInfo

func (m *VCBuryingPointReport) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *VCBuryingPointReport) GetMainEnterPeopleNum() int64 {
	if m != nil && m.MainEnterPeopleNum != nil {
		return *m.MainEnterPeopleNum
	}
	return 0
}

func (m *VCBuryingPointReport) GetMainEnterNum() int64 {
	if m != nil && m.MainEnterNum != nil {
		return *m.MainEnterNum
	}
	return 0
}

func (m *VCBuryingPointReport) GetMainReadCardNum() int64 {
	if m != nil && m.MainReadCardNum != nil {
		return *m.MainReadCardNum
	}
	return 0
}

func (m *VCBuryingPointReport) GetMainSayHiNum() int64 {
	if m != nil && m.MainSayHiNum != nil {
		return *m.MainSayHiNum
	}
	return 0
}

func (m *VCBuryingPointReport) GetMainZanNum() int64 {
	if m != nil && m.MainZanNum != nil {
		return *m.MainZanNum
	}
	return 0
}

func (m *VCBuryingPointReport) GetMainFreshNum() int64 {
	if m != nil && m.MainFreshNum != nil {
		return *m.MainFreshNum
	}
	return 0
}

func (m *VCBuryingPointReport) GetMainHeadNum() int64 {
	if m != nil && m.MainHeadNum != nil {
		return *m.MainHeadNum
	}
	return 0
}

func (m *VCBuryingPointReport) GetMainRecordNum() int64 {
	if m != nil && m.MainRecordNum != nil {
		return *m.MainRecordNum
	}
	return 0
}

func (m *VCBuryingPointReport) GetMainFinishNum() int64 {
	if m != nil && m.MainFinishNum != nil {
		return *m.MainFinishNum
	}
	return 0
}

func (m *VCBuryingPointReport) GetMainHeadCardNum() int64 {
	if m != nil && m.MainHeadCardNum != nil {
		return *m.MainHeadCardNum
	}
	return 0
}

func (m *VCBuryingPointReport) GetMainHandShake() int64 {
	if m != nil && m.MainHandShake != nil {
		return *m.MainHandShake
	}
	return 0
}

func (m *VCBuryingPointReport) GetMainOnLineTime() int64 {
	if m != nil && m.MainOnLineTime != nil {
		return *m.MainOnLineTime
	}
	return 0
}

func (m *VCBuryingPointReport) GetLZMPEnterPeopleNum() int64 {
	if m != nil && m.LZMPEnterPeopleNum != nil {
		return *m.LZMPEnterPeopleNum
	}
	return 0
}

func (m *VCBuryingPointReport) GetLZMPEnterNum() int64 {
	if m != nil && m.LZMPEnterNum != nil {
		return *m.LZMPEnterNum
	}
	return 0
}

func (m *VCBuryingPointReport) GetLZMPBackNum() int64 {
	if m != nil && m.LZMPBackNum != nil {
		return *m.LZMPBackNum
	}
	return 0
}

func (m *VCBuryingPointReport) GetLZMPDuBai() int64 {
	if m != nil && m.LZMPDuBai != nil {
		return *m.LZMPDuBai
	}
	return 0
}

func (m *VCBuryingPointReport) GetLZMPdypy() int64 {
	if m != nil && m.LZMPdypy != nil {
		return *m.LZMPdypy
	}
	return 0
}

func (m *VCBuryingPointReport) GetLZMPcyc() int64 {
	if m != nil && m.LZMPcyc != nil {
		return *m.LZMPcyc
	}
	return 0
}

func (m *VCBuryingPointReport) GetLZMPly() int64 {
	if m != nil && m.LZMPly != nil {
		return *m.LZMPly
	}
	return 0
}

func (m *VCBuryingPointReport) GetLZMPlyNum() int64 {
	if m != nil && m.LZMPlyNum != nil {
		return *m.LZMPlyNum
	}
	return 0
}

func (m *VCBuryingPointReport) GetLZMPssgd() int64 {
	if m != nil && m.LZMPssgd != nil {
		return *m.LZMPssgd
	}
	return 0
}

func (m *VCBuryingPointReport) GetLZMPqx() int64 {
	if m != nil && m.LZMPqx != nil {
		return *m.LZMPqx
	}
	return 0
}

func (m *VCBuryingPointReport) GetLZMPcg() int64 {
	if m != nil && m.LZMPcg != nil {
		return *m.LZMPcg
	}
	return 0
}

func (m *VCBuryingPointReport) GetLZMPjymp() int64 {
	if m != nil && m.LZMPjymp != nil {
		return *m.LZMPjymp
	}
	return 0
}

func (m *VCBuryingPointReport) GetLZMPOnlineTime() int64 {
	if m != nil && m.LZMPOnlineTime != nil {
		return *m.LZMPOnlineTime
	}
	return 0
}

func (m *VCBuryingPointReport) GetSXHWEnterPeopleNum() int64 {
	if m != nil && m.SXHWEnterPeopleNum != nil {
		return *m.SXHWEnterPeopleNum
	}
	return 0
}

func (m *VCBuryingPointReport) GetSXHWxhw() int64 {
	if m != nil && m.SXHWxhw != nil {
		return *m.SXHWxhw
	}
	return 0
}

func (m *VCBuryingPointReport) GetSXHWwxh() int64 {
	if m != nil && m.SXHWwxh != nil {
		return *m.SXHWwxh
	}
	return 0
}

func (m *VCBuryingPointReport) GetSXHWxhwHuiFu() int64 {
	if m != nil && m.SXHWxhwHuiFu != nil {
		return *m.SXHWxhwHuiFu
	}
	return 0
}

func (m *VCBuryingPointReport) GetSXHWxhwSayHi() int64 {
	if m != nil && m.SXHWxhwSayHi != nil {
		return *m.SXHWxhwSayHi
	}
	return 0
}

func (m *VCBuryingPointReport) GetSXHWxhwZan() int64 {
	if m != nil && m.SXHWxhwZan != nil {
		return *m.SXHWxhwZan
	}
	return 0
}

func (m *VCBuryingPointReport) GetSXHWwxhBoFang() int64 {
	if m != nil && m.SXHWwxhBoFang != nil {
		return *m.SXHWwxhBoFang
	}
	return 0
}

func (m *VCBuryingPointReport) GetSXHWwxhChat() int64 {
	if m != nil && m.SXHWwxhChat != nil {
		return *m.SXHWwxhChat
	}
	return 0
}

func (m *VCBuryingPointReport) GetSXHWwxhHead() int64 {
	if m != nil && m.SXHWwxhHead != nil {
		return *m.SXHWwxhHead
	}
	return 0
}

func (m *VCBuryingPointReport) GetSSGDEnterPeopleNum() int64 {
	if m != nil && m.SSGDEnterPeopleNum != nil {
		return *m.SSGDEnterPeopleNum
	}
	return 0
}

func (m *VCBuryingPointReport) GetSSGDsc() int64 {
	if m != nil && m.SSGDsc != nil {
		return *m.SSGDsc
	}
	return 0
}

func (m *VCBuryingPointReport) GetSSGDscBackNum() int64 {
	if m != nil && m.SSGDscBackNum != nil {
		return *m.SSGDscBackNum
	}
	return 0
}

func (m *VCBuryingPointReport) GetSSGDscTJNum() int64 {
	if m != nil && m.SSGDscTJNum != nil {
		return *m.SSGDscTJNum
	}
	return 0
}

func (m *VCBuryingPointReport) GetSSGDOnlineTime() int64 {
	if m != nil && m.SSGDOnlineTime != nil {
		return *m.SSGDOnlineTime
	}
	return 0
}

func (m *VCBuryingPointReport) GetLZMPcgOK() int64 {
	if m != nil && m.LZMPcgOK != nil {
		return *m.LZMPcgOK
	}
	return 0
}

func init() {
	proto.RegisterType((*IntimacyConfig)(nil), "share_message.IntimacyConfig")
	proto.RegisterType((*PlayerIntimacy)(nil), "share_message.PlayerIntimacy")
	proto.RegisterType((*PlayerVCZanLog)(nil), "share_message.PlayerVCZanLog")
	proto.RegisterType((*PlayerVCSayHiLog)(nil), "share_message.PlayerVCSayHiLog")
	proto.RegisterType((*PlayerAttentionLog)(nil), "share_message.PlayerAttentionLog")
	proto.RegisterType((*BgVoiceVideo)(nil), "share_message.BgVoiceVideo")
	proto.RegisterType((*PlayerMixVoiceVideo)(nil), "share_message.PlayerMixVoiceVideo")
	proto.RegisterType((*MatchingDegreeParam)(nil), "share_message.MatchingDegreeParam")
	proto.RegisterType((*SystemBgImage)(nil), "share_message.SystemBgImage")
	proto.RegisterType((*BuryingPointLog)(nil), "share_message.BuryingPointLog")
	proto.RegisterType((*VCBuryingPointReport)(nil), "share_message.VCBuryingPointReport")
}

func init() { proto.RegisterFile("table_struct_voice_love.proto", fileDescriptor_9df4ca03cd427f53) }

var fileDescriptor_9df4ca03cd427f53 = []byte{
	// 1067 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0xeb, 0x6e, 0xe3, 0x44,
	0x14, 0xc7, 0xe5, 0xa6, 0x69, 0x92, 0x93, 0x4b, 0x13, 0x67, 0xdb, 0x1d, 0xca, 0xf6, 0x42, 0xb8,
	0x15, 0x89, 0xcb, 0x33, 0x90, 0x74, 0xbb, 0x09, 0x24, 0xdb, 0xa8, 0x69, 0x0b, 0xea, 0x97, 0x6a,
	0xd6, 0x9e, 0x3a, 0x43, 0xed, 0x71, 0xb0, 0x27, 0x69, 0x2c, 0x1e, 0x00, 0x90, 0x78, 0x10, 0x5e,
	0x04, 0x89, 0x8f, 0x3c, 0xc1, 0x0a, 0xf5, 0xe3, 0x3e, 0x05, 0x9a, 0x63, 0x8f, 0x3b, 0x9b, 0x2d,
	0x42, 0xdc, 0x3e, 0xfa, 0x37, 0x67, 0xce, 0xf9, 0x9f, 0xcb, 0x1c, 0xc3, 0xae, 0xa4, 0x2f, 0x7c,
	0x76, 0x15, 0xcb, 0x68, 0xee, 0xc8, 0xab, 0x45, 0xc8, 0x1d, 0x76, 0xe5, 0x87, 0x0b, 0xf6, 0xe9,
	0x2c, 0x0a, 0x65, 0x68, 0xd7, 0xe3, 0x29, 0x8d, 0xd8, 0x55, 0xc0, 0xe2, 0x98, 0x7a, 0x6c, 0xa7,
	0xe6, 0x79, 0xa1, 0xa4, 0x5e, 0x7a, 0xd8, 0x39, 0x85, 0xc6, 0x40, 0x48, 0x1e, 0x50, 0x27, 0xe9,
	0x85, 0xe2, 0x9a, 0x7b, 0xf6, 0x2e, 0xac, 0x0d, 0x17, 0xc4, 0x3a, 0xb0, 0x0e, 0x8b, 0xdd, 0xd6,
	0xab, 0x97, 0xfb, 0xf5, 0x2b, 0xee, 0x7e, 0x1c, 0x06, 0x5c, 0xb2, 0x60, 0x26, 0x13, 0xbb, 0x01,
	0x1b, 0x23, 0xba, 0xbc, 0xa0, 0x3e, 0x59, 0x3b, 0xb0, 0x0e, 0x0b, 0x76, 0x0b, 0x2a, 0x63, 0x16,
	0x1d, 0xd1, 0x44, 0xa1, 0x82, 0xba, 0xd5, 0xf9, 0x0e, 0x1a, 0x63, 0x9f, 0x26, 0x2c, 0xd2, 0x9e,
	0x95, 0xcf, 0x81, 0x8b, 0x3e, 0x2b, 0x0f, 0xf9, 0x6c, 0x43, 0x55, 0x9b, 0xde, 0x3b, 0xb6, 0x01,
	0x34, 0x1c, 0x2e, 0x52, 0xcf, 0x76, 0x13, 0xca, 0x43, 0x1a, 0xcb, 0x33, 0x1e, 0x30, 0xb2, 0x8e,
	0x56, 0x9b, 0x50, 0x1a, 0xc4, 0x13, 0x9a, 0xf4, 0x39, 0x29, 0x1e, 0x58, 0x87, 0xe5, 0xce, 0xad,
	0x0e, 0x7e, 0xd1, 0xbb, 0xa4, 0x62, 0x18, 0x7a, 0x46, 0xf0, 0xc2, 0x43, 0xc1, 0x9b, 0x50, 0xce,
	0xd4, 0xba, 0x59, 0xe4, 0x26, 0x94, 0xcf, 0x68, 0xe4, 0x31, 0x39, 0x70, 0x31, 0x2e, 0x6a, 0xe9,
	0x45, 0x8c, 0x4a, 0x66, 0x44, 0x6e, 0xc0, 0xc6, 0x25, 0x15, 0xcf, 0xe7, 0x01, 0x06, 0x2e, 0x76,
	0x38, 0x34, 0x75, 0x60, 0xd4, 0xf3, 0xff, 0x85, 0xee, 0xfc, 0x68, 0x81, 0x9d, 0x5e, 0xfc, 0x5c,
	0x4a, 0x26, 0x24, 0x0f, 0xff, 0xab, 0x44, 0x9b, 0x50, 0x9e, 0x84, 0x91, 0x59, 0xe0, 0x16, 0x54,
	0x30, 0x1d, 0x44, 0x45, 0x44, 0x55, 0x28, 0x9c, 0xcc, 0x24, 0xd9, 0xc0, 0xb4, 0x7f, 0x5e, 0x83,
	0x5a, 0xd7, 0xbb, 0x50, 0x43, 0x77, 0xc1, 0x5d, 0x16, 0xfe, 0x7d, 0x15, 0x75, 0x28, 0x8e, 0xe8,
	0x0d, 0x8b, 0x50, 0x42, 0xc5, 0xae, 0xc1, 0xfa, 0x73, 0x9a, 0x85, 0xc7, 0xaf, 0x33, 0xea, 0xc5,
	0xa4, 0x78, 0x50, 0x38, 0x2c, 0xaa, 0x6e, 0xf7, 0x42, 0xa1, 0x52, 0xc6, 0xe8, 0x15, 0xe5, 0x6d,
	0x34, 0x8f, 0xb9, 0x73, 0x1e, 0xf9, 0xa4, 0xa4, 0xc9, 0x20, 0xa0, 0x1e, 0x53, 0xa4, 0x9c, 0xbb,
	0x48, 0x66, 0x8c, 0x54, 0x70, 0x84, 0x5e, 0xaf, 0x27, 0xe8, 0x1a, 0xa7, 0x9a, 0xd0, 0xae, 0xaa,
	0x2b, 0x71, 0x1e, 0xb3, 0x5e, 0x38, 0x17, 0x92, 0xd4, 0x74, 0xc3, 0x27, 0x92, 0xca, 0x79, 0x4c,
	0xea, 0xe8, 0xa9, 0x05, 0x15, 0x8c, 0x8d, 0x8e, 0x1a, 0x68, 0xf2, 0x04, 0xea, 0x59, 0x5f, 0x1c,
	0x07, 0x6f, 0xda, 0x38, 0xf2, 0xc5, 0x57, 0x2f, 0xf7, 0xad, 0x4f, 0x3a, 0x3f, 0xad, 0x41, 0x3b,
	0x3d, 0x1e, 0xf1, 0xe5, 0xbf, 0xa9, 0x58, 0x0d, 0xd6, 0xbb, 0x5e, 0xde, 0xb3, 0x36, 0x54, 0xb5,
	0x3f, 0x95, 0x74, 0x5a, 0xb7, 0xd7, 0xd3, 0x2c, 0x3e, 0x90, 0xe6, 0xc6, 0x4a, 0x52, 0x25, 0x4c,
	0x6a, 0x13, 0x4a, 0x23, 0xbe, 0xc4, 0x4b, 0x65, 0xdd, 0x9d, 0x41, 0x7c, 0x1e, 0x33, 0x4c, 0xba,
	0xfc, 0x66, 0x86, 0x60, 0x64, 0x68, 0xb7, 0xb3, 0x52, 0x57, 0x71, 0x7b, 0x64, 0x70, 0xfb, 0xbe,
	0x69, 0x35, 0xb3, 0x1c, 0xbf, 0x58, 0xd0, 0x1e, 0x51, 0xe9, 0x4c, 0xb9, 0xf0, 0x8e, 0x98, 0x17,
	0x31, 0x36, 0xa6, 0x11, 0x0d, 0x94, 0xa4, 0x13, 0x31, 0xe4, 0x82, 0xa5, 0x4b, 0x48, 0x49, 0x3a,
	0xb9, 0xbe, 0x46, 0xb0, 0xa6, 0xc1, 0x84, 0x06, 0x6c, 0xc2, 0x96, 0xd9, 0x5a, 0x68, 0x41, 0xe5,
	0x5c, 0x68, 0xb4, 0x7e, 0xbf, 0x29, 0x5e, 0x30, 0x7f, 0x44, 0x97, 0xe9, 0xfb, 0xcc, 0xc9, 0x98,
	0x45, 0xe9, 0xe8, 0xda, 0xdb, 0xd0, 0x18, 0xb3, 0x28, 0x0e, 0x05, 0xf5, 0xcf, 0xa8, 0xa7, 0x2c,
	0x4b, 0x0f, 0x70, 0x65, 0x5f, 0x46, 0xbe, 0x05, 0xf5, 0x5e, 0x28, 0x62, 0xc9, 0x7c, 0x9f, 0xaa,
	0x37, 0x97, 0x4e, 0x54, 0xe7, 0x33, 0xa8, 0x4f, 0x92, 0x58, 0xb2, 0xa0, 0xeb, 0xe1, 0xe4, 0xd9,
	0x7b, 0x50, 0x50, 0x8d, 0xf8, 0xb3, 0x75, 0xd7, 0xf9, 0xde, 0x82, 0xcd, 0xee, 0x3c, 0x4a, 0xb8,
	0xf0, 0xc6, 0x21, 0x17, 0xf2, 0x1f, 0xbd, 0xdd, 0x16, 0x54, 0x9e, 0x2e, 0x98, 0x90, 0x58, 0xef,
	0xb4, 0x0c, 0x6a, 0xd0, 0xef, 0x1f, 0xae, 0xb9, 0x2b, 0x8b, 0x6f, 0x3c, 0x77, 0xec, 0x7e, 0xe7,
	0x87, 0x12, 0x3c, 0xba, 0xe8, 0x99, 0x5a, 0x4e, 0xd9, 0x2c, 0x8c, 0xe4, 0x5f, 0xc9, 0xd9, 0x01,
	0x7b, 0x44, 0xb9, 0x78, 0x2a, 0x24, 0x8b, 0xc6, 0x2c, 0x9c, 0xf9, 0x4c, 0xed, 0xc1, 0x54, 0xd8,
	0x23, 0xa8, 0xe5, 0x67, 0x8a, 0xa6, 0x43, 0xfa, 0x18, 0x36, 0x15, 0x3d, 0x65, 0xd4, 0xed, 0xd1,
	0xc8, 0x55, 0x07, 0xeb, 0xa6, 0x39, 0xee, 0x18, 0xbd, 0x4c, 0x71, 0x54, 0x15, 0xcd, 0x16, 0xec,
	0x86, 0x69, 0x79, 0x1c, 0xb1, 0x78, 0xaa, 0x68, 0x29, 0x9f, 0x7e, 0xca, 0x45, 0x9f, 0x51, 0x74,
	0x9a, 0x0e, 0xed, 0x16, 0xd4, 0xd3, 0x68, 0x4e, 0x98, 0xc6, 0xaa, 0x98, 0xf8, 0x98, 0x0b, 0x9e,
	0xba, 0x00, 0x53, 0x5b, 0xdf, 0xd0, 0x56, 0x35, 0xed, 0xfb, 0x54, 0xb8, 0x93, 0x29, 0xbd, 0x61,
	0xd9, 0x22, 0xd8, 0x86, 0x86, 0xc2, 0xe9, 0x90, 0x62, 0x7d, 0xeb, 0xc8, 0x77, 0xc0, 0x1e, 0x5e,
	0x8e, 0xc6, 0x2b, 0x55, 0x69, 0x68, 0xf1, 0xf9, 0x99, 0xa2, 0x9b, 0x5a, 0xbc, 0xa2, 0x5d, 0xea,
	0xdc, 0x28, 0xd8, 0xd4, 0x9d, 0x55, 0xf0, 0x68, 0xde, 0xa5, 0x9c, 0xb4, 0xf2, 0x5e, 0x5e, 0x8e,
	0xc6, 0x6e, 0x32, 0x4b, 0x70, 0xa5, 0xe0, 0x7f, 0x4f, 0x11, 0x27, 0x71, 0x48, 0x5b, 0x3f, 0x64,
	0x05, 0xfc, 0x84, 0x3c, 0x32, 0xbd, 0xf8, 0x89, 0x72, 0xbc, 0x65, 0x7a, 0x89, 0x63, 0xcf, 0x25,
	0xdb, 0xe6, 0xa5, 0x6f, 0x97, 0xe4, 0xb1, 0xf9, 0xed, 0x78, 0x84, 0x98, 0x37, 0xbe, 0x49, 0x82,
	0x19, 0x79, 0x4b, 0xe7, 0xae, 0xc8, 0x89, 0xf0, 0x75, 0xee, 0x3b, 0x3a, 0xf7, 0xc9, 0xd7, 0xfd,
	0xaf, 0x56, 0x72, 0x7f, 0x5b, 0x6b, 0x55, 0x67, 0xcb, 0xe9, 0x2d, 0x79, 0x62, 0x82, 0xdb, 0xe5,
	0x94, 0xec, 0xea, 0xea, 0x64, 0x16, 0xfd, 0x39, 0x3f, 0x9e, 0x93, 0xbd, 0x15, 0x9a, 0xfe, 0xe0,
	0xf7, 0xf5, 0x68, 0x64, 0xf4, 0x92, 0x0a, 0x72, 0xa0, 0x1b, 0x95, 0x39, 0xec, 0x86, 0xc7, 0x54,
	0x78, 0xe4, 0x1d, 0x5d, 0xde, 0x0c, 0xf7, 0xa6, 0x54, 0x92, 0xce, 0x0a, 0x54, 0x0d, 0x27, 0xef,
	0xe6, 0xf2, 0x27, 0xcf, 0x8e, 0x56, 0xe4, 0xbf, 0x97, 0xaf, 0xc8, 0xc9, 0xb3, 0xa3, 0xd8, 0x21,
	0xef, 0xe7, 0xc1, 0xf0, 0x5b, 0xb7, 0xed, 0x83, 0xdc, 0x2f, 0xe2, 0xb3, 0x2f, 0x14, 0xfc, 0x50,
	0x97, 0x4b, 0x41, 0xa3, 0x5c, 0x87, 0x66, 0x61, 0x1d, 0xef, 0xe4, 0x4b, 0xf2, 0x11, 0xbe, 0xb2,
	0xda, 0xaf, 0x77, 0x7b, 0xd6, 0x6f, 0x77, 0x7b, 0xd6, 0xef, 0x77, 0x7b, 0xd6, 0x1f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x5f, 0xc2, 0xc6, 0xa0, 0xd3, 0x09, 0x00, 0x00,
}

func (m *IntimacyConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntimacyConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Lv != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.Lv))
	}
	if m.MaxVal != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.MaxVal))
	}
	if m.PerDayVal != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.PerDayVal))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerIntimacy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerIntimacy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.IntimacyVal != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.IntimacyVal))
	}
	if m.IntimacyLv != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.IntimacyLv))
	}
	if m.LastTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.LastTime))
	}
	if m.IsSayHi != nil {
		dAtA[i] = 0x28
		i++
		if *m.IsSayHi {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerVCZanLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerVCZanLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.Id))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.PlayerId))
	}
	if m.TargetId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.TargetId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.CreateTime))
	}
	if m.ZanNum != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.ZanNum))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerVCSayHiLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerVCSayHiLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.Id))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.PlayerId))
	}
	if m.TargetId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.TargetId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerAttentionLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerAttentionLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.Id))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.PlayerId))
	}
	if m.TargetId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.TargetId))
	}
	if m.SortTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.SortTime))
	}
	if m.SayHiTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.SayHiTime))
	}
	if m.Opt != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.Opt))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BgVoiceVideo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BgVoiceVideo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.Id))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Maker != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(len(*m.Maker)))
		i += copy(dAtA[i:], *m.Maker)
	}
	if m.Name != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if len(m.Tags) > 0 {
		for _, num := range m.Tags {
			dAtA[i] = 0x28
			i++
			i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(num))
		}
	}
	if m.Content != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.MusicUrl != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(len(*m.MusicUrl)))
		i += copy(dAtA[i:], *m.MusicUrl)
	}
	if m.ImageUrl != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(len(*m.ImageUrl)))
		i += copy(dAtA[i:], *m.ImageUrl)
	}
	if m.Type != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.Type))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.CreateTime))
	}
	if m.PlayerType != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.PlayerType))
	}
	if m.UseCount != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.UseCount))
	}
	if m.Status != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.Status))
	}
	if m.MusicTime != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.MusicTime))
	}
	if m.PlayerAccount != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(len(*m.PlayerAccount)))
		i += copy(dAtA[i:], *m.PlayerAccount)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerMixVoiceVideo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerMixVoiceVideo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.Id))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.PlayerId))
	}
	if m.BgId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.BgId))
	}
	if m.MixVoiceUrl != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(len(*m.MixVoiceUrl)))
		i += copy(dAtA[i:], *m.MixVoiceUrl)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.CreateTime))
	}
	if m.PlayerType != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.PlayerType))
	}
	if m.Status != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.Status))
	}
	if m.MixTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.MixTime))
	}
	if m.PlayerAccount != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(len(*m.PlayerAccount)))
		i += copy(dAtA[i:], *m.PlayerAccount)
	}
	if m.Type != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.Type))
	}
	if m.Content != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.IsUse != nil {
		dAtA[i] = 0x68
		i++
		if *m.IsUse {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MatchingDegreeParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchingDegreeParam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OnLine != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.OnLine))
	}
	if m.OffLine != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.OffLine))
	}
	if m.SameSex != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.SameSex))
	}
	if m.UnSameSex != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.UnSameSex))
	}
	if m.LabelMax != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.LabelMax))
	}
	if m.LabelPer != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.LabelPer))
	}
	if m.PersonalTagMax != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.PersonalTagMax))
	}
	if m.PersonalTagPer != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.PersonalTagPer))
	}
	if m.Constellation != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.Constellation))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SystemBgImage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemBgImage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Url != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(len(*m.Url)))
		i += copy(dAtA[i:], *m.Url)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BuryingPointLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuryingPointLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.Id))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.PlayerId))
	}
	if m.EventType != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.EventType))
	}
	if m.Time != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.Time))
	}
	if m.LastTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.LastTime))
	}
	if m.TargetId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.TargetId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *VCBuryingPointReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VCBuryingPointReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.Id))
	}
	if m.MainEnterPeopleNum != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.MainEnterPeopleNum))
	}
	if m.MainEnterNum != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.MainEnterNum))
	}
	if m.MainReadCardNum != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.MainReadCardNum))
	}
	if m.MainSayHiNum != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.MainSayHiNum))
	}
	if m.MainZanNum != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.MainZanNum))
	}
	if m.MainFreshNum != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.MainFreshNum))
	}
	if m.MainHeadNum != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.MainHeadNum))
	}
	if m.MainRecordNum != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.MainRecordNum))
	}
	if m.MainFinishNum != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.MainFinishNum))
	}
	if m.MainHeadCardNum != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.MainHeadCardNum))
	}
	if m.MainHandShake != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.MainHandShake))
	}
	if m.MainOnLineTime != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.MainOnLineTime))
	}
	if m.LZMPEnterPeopleNum != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.LZMPEnterPeopleNum))
	}
	if m.LZMPEnterNum != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.LZMPEnterNum))
	}
	if m.LZMPBackNum != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.LZMPBackNum))
	}
	if m.LZMPDuBai != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.LZMPDuBai))
	}
	if m.LZMPdypy != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.LZMPdypy))
	}
	if m.LZMPcyc != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.LZMPcyc))
	}
	if m.LZMPly != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.LZMPly))
	}
	if m.LZMPlyNum != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.LZMPlyNum))
	}
	if m.LZMPssgd != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.LZMPssgd))
	}
	if m.LZMPqx != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.LZMPqx))
	}
	if m.LZMPcg != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.LZMPcg))
	}
	if m.LZMPjymp != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.LZMPjymp))
	}
	if m.LZMPOnlineTime != nil {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.LZMPOnlineTime))
	}
	if m.SXHWEnterPeopleNum != nil {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.SXHWEnterPeopleNum))
	}
	if m.SXHWxhw != nil {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.SXHWxhw))
	}
	if m.SXHWwxh != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.SXHWwxh))
	}
	if m.SXHWxhwHuiFu != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.SXHWxhwHuiFu))
	}
	if m.SXHWxhwSayHi != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.SXHWxhwSayHi))
	}
	if m.SXHWxhwZan != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.SXHWxhwZan))
	}
	if m.SXHWwxhBoFang != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.SXHWwxhBoFang))
	}
	if m.SXHWwxhChat != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.SXHWwxhChat))
	}
	if m.SXHWwxhHead != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.SXHWwxhHead))
	}
	if m.SSGDEnterPeopleNum != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.SSGDEnterPeopleNum))
	}
	if m.SSGDsc != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.SSGDsc))
	}
	if m.SSGDscBackNum != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.SSGDscBackNum))
	}
	if m.SSGDscTJNum != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.SSGDscTJNum))
	}
	if m.SSGDOnlineTime != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.SSGDOnlineTime))
	}
	if m.LZMPcgOK != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructVoiceLove(dAtA, i, uint64(*m.LZMPcgOK))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTableStructVoiceLove(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *IntimacyConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lv != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.Lv))
	}
	if m.MaxVal != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.MaxVal))
	}
	if m.PerDayVal != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.PerDayVal))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerIntimacy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStructVoiceLove(uint64(l))
	}
	if m.IntimacyVal != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.IntimacyVal))
	}
	if m.IntimacyLv != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.IntimacyLv))
	}
	if m.LastTime != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.LastTime))
	}
	if m.IsSayHi != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerVCZanLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.Id))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.PlayerId))
	}
	if m.TargetId != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.TargetId))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.CreateTime))
	}
	if m.ZanNum != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.ZanNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerVCSayHiLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.Id))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.PlayerId))
	}
	if m.TargetId != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.TargetId))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerAttentionLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.Id))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.PlayerId))
	}
	if m.TargetId != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.TargetId))
	}
	if m.SortTime != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.SortTime))
	}
	if m.SayHiTime != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.SayHiTime))
	}
	if m.Opt != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.Opt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BgVoiceVideo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.Id))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.PlayerId))
	}
	if m.Maker != nil {
		l = len(*m.Maker)
		n += 1 + l + sovTableStructVoiceLove(uint64(l))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructVoiceLove(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			n += 1 + sovTableStructVoiceLove(uint64(e))
		}
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStructVoiceLove(uint64(l))
	}
	if m.MusicUrl != nil {
		l = len(*m.MusicUrl)
		n += 1 + l + sovTableStructVoiceLove(uint64(l))
	}
	if m.ImageUrl != nil {
		l = len(*m.ImageUrl)
		n += 1 + l + sovTableStructVoiceLove(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.Type))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.CreateTime))
	}
	if m.PlayerType != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.PlayerType))
	}
	if m.UseCount != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.UseCount))
	}
	if m.Status != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.Status))
	}
	if m.MusicTime != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.MusicTime))
	}
	if m.PlayerAccount != nil {
		l = len(*m.PlayerAccount)
		n += 2 + l + sovTableStructVoiceLove(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerMixVoiceVideo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.Id))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.PlayerId))
	}
	if m.BgId != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.BgId))
	}
	if m.MixVoiceUrl != nil {
		l = len(*m.MixVoiceUrl)
		n += 1 + l + sovTableStructVoiceLove(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.CreateTime))
	}
	if m.PlayerType != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.PlayerType))
	}
	if m.Status != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.Status))
	}
	if m.MixTime != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.MixTime))
	}
	if m.PlayerAccount != nil {
		l = len(*m.PlayerAccount)
		n += 1 + l + sovTableStructVoiceLove(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.Type))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStructVoiceLove(uint64(l))
	}
	if m.IsUse != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MatchingDegreeParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OnLine != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.OnLine))
	}
	if m.OffLine != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.OffLine))
	}
	if m.SameSex != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.SameSex))
	}
	if m.UnSameSex != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.UnSameSex))
	}
	if m.LabelMax != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.LabelMax))
	}
	if m.LabelPer != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.LabelPer))
	}
	if m.PersonalTagMax != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.PersonalTagMax))
	}
	if m.PersonalTagPer != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.PersonalTagPer))
	}
	if m.Constellation != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.Constellation))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SystemBgImage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Url != nil {
		l = len(*m.Url)
		n += 1 + l + sovTableStructVoiceLove(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BuryingPointLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.Id))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.PlayerId))
	}
	if m.EventType != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.EventType))
	}
	if m.Time != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.Time))
	}
	if m.LastTime != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.LastTime))
	}
	if m.TargetId != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.TargetId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VCBuryingPointReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.Id))
	}
	if m.MainEnterPeopleNum != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.MainEnterPeopleNum))
	}
	if m.MainEnterNum != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.MainEnterNum))
	}
	if m.MainReadCardNum != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.MainReadCardNum))
	}
	if m.MainSayHiNum != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.MainSayHiNum))
	}
	if m.MainZanNum != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.MainZanNum))
	}
	if m.MainFreshNum != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.MainFreshNum))
	}
	if m.MainHeadNum != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.MainHeadNum))
	}
	if m.MainRecordNum != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.MainRecordNum))
	}
	if m.MainFinishNum != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.MainFinishNum))
	}
	if m.MainHeadCardNum != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.MainHeadCardNum))
	}
	if m.MainHandShake != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.MainHandShake))
	}
	if m.MainOnLineTime != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.MainOnLineTime))
	}
	if m.LZMPEnterPeopleNum != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.LZMPEnterPeopleNum))
	}
	if m.LZMPEnterNum != nil {
		n += 1 + sovTableStructVoiceLove(uint64(*m.LZMPEnterNum))
	}
	if m.LZMPBackNum != nil {
		n += 2 + sovTableStructVoiceLove(uint64(*m.LZMPBackNum))
	}
	if m.LZMPDuBai != nil {
		n += 2 + sovTableStructVoiceLove(uint64(*m.LZMPDuBai))
	}
	if m.LZMPdypy != nil {
		n += 2 + sovTableStructVoiceLove(uint64(*m.LZMPdypy))
	}
	if m.LZMPcyc != nil {
		n += 2 + sovTableStructVoiceLove(uint64(*m.LZMPcyc))
	}
	if m.LZMPly != nil {
		n += 2 + sovTableStructVoiceLove(uint64(*m.LZMPly))
	}
	if m.LZMPlyNum != nil {
		n += 2 + sovTableStructVoiceLove(uint64(*m.LZMPlyNum))
	}
	if m.LZMPssgd != nil {
		n += 2 + sovTableStructVoiceLove(uint64(*m.LZMPssgd))
	}
	if m.LZMPqx != nil {
		n += 2 + sovTableStructVoiceLove(uint64(*m.LZMPqx))
	}
	if m.LZMPcg != nil {
		n += 2 + sovTableStructVoiceLove(uint64(*m.LZMPcg))
	}
	if m.LZMPjymp != nil {
		n += 2 + sovTableStructVoiceLove(uint64(*m.LZMPjymp))
	}
	if m.LZMPOnlineTime != nil {
		n += 2 + sovTableStructVoiceLove(uint64(*m.LZMPOnlineTime))
	}
	if m.SXHWEnterPeopleNum != nil {
		n += 2 + sovTableStructVoiceLove(uint64(*m.SXHWEnterPeopleNum))
	}
	if m.SXHWxhw != nil {
		n += 2 + sovTableStructVoiceLove(uint64(*m.SXHWxhw))
	}
	if m.SXHWwxh != nil {
		n += 2 + sovTableStructVoiceLove(uint64(*m.SXHWwxh))
	}
	if m.SXHWxhwHuiFu != nil {
		n += 2 + sovTableStructVoiceLove(uint64(*m.SXHWxhwHuiFu))
	}
	if m.SXHWxhwSayHi != nil {
		n += 2 + sovTableStructVoiceLove(uint64(*m.SXHWxhwSayHi))
	}
	if m.SXHWxhwZan != nil {
		n += 2 + sovTableStructVoiceLove(uint64(*m.SXHWxhwZan))
	}
	if m.SXHWwxhBoFang != nil {
		n += 2 + sovTableStructVoiceLove(uint64(*m.SXHWwxhBoFang))
	}
	if m.SXHWwxhChat != nil {
		n += 2 + sovTableStructVoiceLove(uint64(*m.SXHWwxhChat))
	}
	if m.SXHWwxhHead != nil {
		n += 2 + sovTableStructVoiceLove(uint64(*m.SXHWwxhHead))
	}
	if m.SSGDEnterPeopleNum != nil {
		n += 2 + sovTableStructVoiceLove(uint64(*m.SSGDEnterPeopleNum))
	}
	if m.SSGDsc != nil {
		n += 2 + sovTableStructVoiceLove(uint64(*m.SSGDsc))
	}
	if m.SSGDscBackNum != nil {
		n += 2 + sovTableStructVoiceLove(uint64(*m.SSGDscBackNum))
	}
	if m.SSGDscTJNum != nil {
		n += 2 + sovTableStructVoiceLove(uint64(*m.SSGDscTJNum))
	}
	if m.SSGDOnlineTime != nil {
		n += 2 + sovTableStructVoiceLove(uint64(*m.SSGDOnlineTime))
	}
	if m.LZMPcgOK != nil {
		n += 2 + sovTableStructVoiceLove(uint64(*m.LZMPcgOK))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTableStructVoiceLove(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTableStructVoiceLove(x uint64) (n int) {
	return sovTableStructVoiceLove(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IntimacyConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntimacyConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntimacyConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Lv = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxVal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxVal = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerDayVal", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PerDayVal = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerIntimacy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerIntimacy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerIntimacy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntimacyVal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IntimacyVal = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntimacyLv", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IntimacyLv = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSayHi", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsSayHi = &b
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerVCZanLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerVCZanLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerVCZanLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TargetId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZanNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ZanNum = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerVCSayHiLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerVCSayHiLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerVCSayHiLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TargetId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerAttentionLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerAttentionLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerAttentionLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TargetId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SortTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SayHiTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SayHiTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opt", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Opt = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BgVoiceVideo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BgVoiceVideo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BgVoiceVideo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Maker = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructVoiceLove
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Tags = append(m.Tags, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructVoiceLove
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructVoiceLove
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructVoiceLove
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Tags) == 0 {
					m.Tags = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructVoiceLove
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Tags = append(m.Tags, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MusicUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MusicUrl = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ImageUrl = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerType", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerType = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseCount = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MusicTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MusicTime = &v
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PlayerAccount = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerMixVoiceVideo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerMixVoiceVideo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerMixVoiceVideo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BgId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MixVoiceUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MixVoiceUrl = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerType", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerType = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MixTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MixTime = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PlayerAccount = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUse", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsUse = &b
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchingDegreeParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchingDegreeParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchingDegreeParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnLine", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnLine = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffLine", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OffLine = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SameSex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SameSex = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnSameSex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnSameSex = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelMax", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LabelMax = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelPer", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LabelPer = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersonalTagMax", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PersonalTagMax = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersonalTagPer", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PersonalTagPer = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constellation", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Constellation = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemBgImage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemBgImage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemBgImage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Url = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuryingPointLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuryingPointLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuryingPointLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EventType = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Time = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TargetId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VCBuryingPointReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructVoiceLove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VCBuryingPointReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VCBuryingPointReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainEnterPeopleNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MainEnterPeopleNum = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainEnterNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MainEnterNum = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainReadCardNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MainReadCardNum = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainSayHiNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MainSayHiNum = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainZanNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MainZanNum = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainFreshNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MainFreshNum = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainHeadNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MainHeadNum = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainRecordNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MainRecordNum = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainFinishNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MainFinishNum = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainHeadCardNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MainHeadCardNum = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainHandShake", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MainHandShake = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainOnLineTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MainOnLineTime = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LZMPEnterPeopleNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LZMPEnterPeopleNum = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LZMPEnterNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LZMPEnterNum = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LZMPBackNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LZMPBackNum = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LZMPDuBai", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LZMPDuBai = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LZMPdypy", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LZMPdypy = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LZMPcyc", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LZMPcyc = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LZMPly", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LZMPly = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LZMPlyNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LZMPlyNum = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LZMPssgd", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LZMPssgd = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LZMPqx", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LZMPqx = &v
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LZMPcg", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LZMPcg = &v
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LZMPjymp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LZMPjymp = &v
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LZMPOnlineTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LZMPOnlineTime = &v
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SXHWEnterPeopleNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SXHWEnterPeopleNum = &v
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SXHWxhw", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SXHWxhw = &v
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SXHWwxh", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SXHWwxh = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SXHWxhwHuiFu", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SXHWxhwHuiFu = &v
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SXHWxhwSayHi", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SXHWxhwSayHi = &v
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SXHWxhwZan", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SXHWxhwZan = &v
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SXHWwxhBoFang", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SXHWwxhBoFang = &v
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SXHWwxhChat", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SXHWwxhChat = &v
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SXHWwxhHead", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SXHWwxhHead = &v
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SSGDEnterPeopleNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SSGDEnterPeopleNum = &v
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SSGDsc", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SSGDsc = &v
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SSGDscBackNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SSGDscBackNum = &v
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SSGDscTJNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SSGDscTJNum = &v
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SSGDOnlineTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SSGDOnlineTime = &v
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LZMPcgOK", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LZMPcgOK = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructVoiceLove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructVoiceLove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTableStructVoiceLove(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTableStructVoiceLove
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTableStructVoiceLove
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTableStructVoiceLove
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTableStructVoiceLove
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTableStructVoiceLove
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTableStructVoiceLove(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTableStructVoiceLove
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTableStructVoiceLove = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTableStructVoiceLove   = fmt.Errorf("proto: integer overflow")
)
