// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: table_struct_wish.proto

// 如果仅用于通讯的 message,别放在这里

package share_message

import (
	fmt "fmt"
	github_com_akqp2019_protobuf_proto "github.com/akqp2019/protobuf/proto"
	proto "github.com/akqp2019/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//许愿池用户相关数据存储:wish_player
type WishPlayer struct {
	Id                      *int64         `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Account                 *string        `protobuf:"bytes,2,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	Channel                 *int32         `protobuf:"varint,3,opt,name=Channel" json:"Channel,omitempty" bson:"Channel,omitempty"`
	NickName                *string        `protobuf:"bytes,4,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	HeadUrl                 *string        `protobuf:"bytes,5,opt,name=HeadUrl" json:"HeadUrl,omitempty" bson:"HeadUrl,omitempty"`
	PlayerId                *int64         `protobuf:"varint,6,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Token                   *string        `protobuf:"bytes,7,opt,name=Token" json:"Token,omitempty" bson:"Token,omitempty"`
	IsTryOne                *bool          `protobuf:"varint,8,opt,name=IsTryOne" json:"IsTryOne,omitempty" bson:"IsTryOne,omitempty"`
	CreateTime              *int64         `protobuf:"varint,9,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	Address                 []*WishAddress `protobuf:"bytes,10,rep,name=Address" json:"Address,omitempty" bson:"Address,omitempty"`
	HallSid                 *int32         `protobuf:"varint,11,opt,name=HallSid" json:"HallSid,omitempty" bson:"HallSid,omitempty"`
	NotOne                  *bool          `protobuf:"varint,12,opt,name=NotOne" json:"NotOne,omitempty" bson:"NotOne,omitempty"`
	NotOneWish              *bool          `protobuf:"varint,13,opt,name=NotOneWish" json:"NotOneWish,omitempty" bson:"NotOneWish,omitempty"`
	Diamond                 *int64         `protobuf:"varint,14,opt,name=Diamond" json:"Diamond,omitempty" bson:"Diamond,omitempty"`
	Types                   *int32         `protobuf:"varint,15,opt,name=Types" json:"Types,omitempty" bson:"Types,omitempty"`
	LastExchangeDiamondTime *int64         `protobuf:"varint,16,opt,name=LastExchangeDiamondTime" json:"LastExchangeDiamondTime,omitempty" bson:"LastExchangeDiamondTime,omitempty"`
	IsFreeze                *bool          `protobuf:"varint,17,opt,name=IsFreeze" json:"IsFreeze,omitempty" bson:"IsFreeze,omitempty"`
	FreezeTime              *int64         `protobuf:"varint,18,opt,name=FreezeTime" json:"FreezeTime,omitempty" bson:"FreezeTime,omitempty"`
	Note                    *string        `protobuf:"bytes,19,opt,name=Note" json:"Note,omitempty" bson:"Note,omitempty"`
	Operator                *string        `protobuf:"bytes,20,opt,name=Operator" json:"Operator,omitempty" bson:"Operator,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}       `json:"-" bson:"-"`
	XXX_unrecognized        []byte         `json:"-" bson:"-"`
	XXX_sizecache           int32          `json:"-" bson:"-"`
}

func (m *WishPlayer) Reset()         { *m = WishPlayer{} }
func (m *WishPlayer) String() string { return proto.CompactTextString(m) }
func (*WishPlayer) ProtoMessage()    {}
func (*WishPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{0}
}
func (m *WishPlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishPlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishPlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishPlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishPlayer.Merge(m, src)
}
func (m *WishPlayer) XXX_Size() int {
	return m.Size()
}
func (m *WishPlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_WishPlayer.DiscardUnknown(m)
}

var xxx_messageInfo_WishPlayer proto.InternalMessageInfo

func (m *WishPlayer) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishPlayer) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *WishPlayer) GetChannel() int32 {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return 0
}

func (m *WishPlayer) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *WishPlayer) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *WishPlayer) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *WishPlayer) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *WishPlayer) GetIsTryOne() bool {
	if m != nil && m.IsTryOne != nil {
		return *m.IsTryOne
	}
	return false
}

func (m *WishPlayer) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishPlayer) GetAddress() []*WishAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *WishPlayer) GetHallSid() int32 {
	if m != nil && m.HallSid != nil {
		return *m.HallSid
	}
	return 0
}

func (m *WishPlayer) GetNotOne() bool {
	if m != nil && m.NotOne != nil {
		return *m.NotOne
	}
	return false
}

func (m *WishPlayer) GetNotOneWish() bool {
	if m != nil && m.NotOneWish != nil {
		return *m.NotOneWish
	}
	return false
}

func (m *WishPlayer) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *WishPlayer) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *WishPlayer) GetLastExchangeDiamondTime() int64 {
	if m != nil && m.LastExchangeDiamondTime != nil {
		return *m.LastExchangeDiamondTime
	}
	return 0
}

func (m *WishPlayer) GetIsFreeze() bool {
	if m != nil && m.IsFreeze != nil {
		return *m.IsFreeze
	}
	return false
}

func (m *WishPlayer) GetFreezeTime() int64 {
	if m != nil && m.FreezeTime != nil {
		return *m.FreezeTime
	}
	return 0
}

func (m *WishPlayer) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

func (m *WishPlayer) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

type WishAddress struct {
	Name                 *string  `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Phone                *string  `protobuf:"bytes,2,opt,name=Phone" json:"Phone,omitempty" bson:"Phone,omitempty"`
	Detail               *string  `protobuf:"bytes,3,opt,name=Detail" json:"Detail,omitempty" bson:"Detail,omitempty"`
	IfDefault            *bool    `protobuf:"varint,4,opt,name=IfDefault" json:"IfDefault,omitempty" bson:"IfDefault,omitempty"`
	AddressId            *int64   `protobuf:"varint,5,opt,name=AddressId" json:"AddressId,omitempty" bson:"AddressId,omitempty"`
	Province             *string  `protobuf:"bytes,6,opt,name=Province" json:"Province,omitempty" bson:"Province,omitempty"`
	City                 *string  `protobuf:"bytes,7,opt,name=City" json:"City,omitempty" bson:"City,omitempty"`
	Area                 *string  `protobuf:"bytes,8,opt,name=Area" json:"Area,omitempty" bson:"Area,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishAddress) Reset()         { *m = WishAddress{} }
func (m *WishAddress) String() string { return proto.CompactTextString(m) }
func (*WishAddress) ProtoMessage()    {}
func (*WishAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{1}
}
func (m *WishAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishAddress.Merge(m, src)
}
func (m *WishAddress) XXX_Size() int {
	return m.Size()
}
func (m *WishAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_WishAddress.DiscardUnknown(m)
}

var xxx_messageInfo_WishAddress proto.InternalMessageInfo

func (m *WishAddress) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *WishAddress) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *WishAddress) GetDetail() string {
	if m != nil && m.Detail != nil {
		return *m.Detail
	}
	return ""
}

func (m *WishAddress) GetIfDefault() bool {
	if m != nil && m.IfDefault != nil {
		return *m.IfDefault
	}
	return false
}

func (m *WishAddress) GetAddressId() int64 {
	if m != nil && m.AddressId != nil {
		return *m.AddressId
	}
	return 0
}

func (m *WishAddress) GetProvince() string {
	if m != nil && m.Province != nil {
		return *m.Province
	}
	return ""
}

func (m *WishAddress) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

func (m *WishAddress) GetArea() string {
	if m != nil && m.Area != nil {
		return *m.Area
	}
	return ""
}

//菜单列表 wish_menu
type WishMenu struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishMenu) Reset()         { *m = WishMenu{} }
func (m *WishMenu) String() string { return proto.CompactTextString(m) }
func (*WishMenu) ProtoMessage()    {}
func (*WishMenu) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{2}
}
func (m *WishMenu) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishMenu) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishMenu.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishMenu) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishMenu.Merge(m, src)
}
func (m *WishMenu) XXX_Size() int {
	return m.Size()
}
func (m *WishMenu) XXX_DiscardUnknown() {
	xxx_messageInfo_WishMenu.DiscardUnknown(m)
}

var xxx_messageInfo_WishMenu proto.InternalMessageInfo

func (m *WishMenu) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishMenu) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

//品牌 wish_brand
type WishBrand struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Type                 *string  `protobuf:"bytes,3,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	IsHot                *bool    `protobuf:"varint,4,opt,name=IsHot" json:"IsHot,omitempty" bson:"IsHot,omitempty"`
	ClickCount           *int32   `protobuf:"varint,10,opt,name=ClickCount" json:"ClickCount,omitempty" bson:"ClickCount,omitempty"`
	CreateTime           *int64   `protobuf:"varint,11,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,12,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	Status               *int32   `protobuf:"varint,13,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	HostWeight           *int32   `protobuf:"varint,15,opt,name=HostWeight" json:"HostWeight,omitempty" bson:"HostWeight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishBrand) Reset()         { *m = WishBrand{} }
func (m *WishBrand) String() string { return proto.CompactTextString(m) }
func (*WishBrand) ProtoMessage()    {}
func (*WishBrand) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{3}
}
func (m *WishBrand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishBrand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishBrand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishBrand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishBrand.Merge(m, src)
}
func (m *WishBrand) XXX_Size() int {
	return m.Size()
}
func (m *WishBrand) XXX_DiscardUnknown() {
	xxx_messageInfo_WishBrand.DiscardUnknown(m)
}

var xxx_messageInfo_WishBrand proto.InternalMessageInfo

func (m *WishBrand) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishBrand) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *WishBrand) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *WishBrand) GetIsHot() bool {
	if m != nil && m.IsHot != nil {
		return *m.IsHot
	}
	return false
}

func (m *WishBrand) GetClickCount() int32 {
	if m != nil && m.ClickCount != nil {
		return *m.ClickCount
	}
	return 0
}

func (m *WishBrand) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishBrand) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *WishBrand) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *WishBrand) GetHostWeight() int32 {
	if m != nil && m.HostWeight != nil {
		return *m.HostWeight
	}
	return 0
}

//物品类型 wish_item_type
type WishItemType struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Type                 *string  `protobuf:"bytes,3,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	IsRecommend          *bool    `protobuf:"varint,4,opt,name=IsRecommend" json:"IsRecommend,omitempty" bson:"IsRecommend,omitempty"`
	HostWeight           *int32   `protobuf:"varint,5,opt,name=HostWeight" json:"HostWeight,omitempty" bson:"HostWeight,omitempty"`
	ClickCount           *int32   `protobuf:"varint,10,opt,name=ClickCount" json:"ClickCount,omitempty" bson:"ClickCount,omitempty"`
	CreateTime           *int64   `protobuf:"varint,11,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,12,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	Status               *int32   `protobuf:"varint,13,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	IsHot                *bool    `protobuf:"varint,6,opt,name=IsHot" json:"IsHot,omitempty" bson:"IsHot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishItemType) Reset()         { *m = WishItemType{} }
func (m *WishItemType) String() string { return proto.CompactTextString(m) }
func (*WishItemType) ProtoMessage()    {}
func (*WishItemType) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{4}
}
func (m *WishItemType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishItemType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishItemType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishItemType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishItemType.Merge(m, src)
}
func (m *WishItemType) XXX_Size() int {
	return m.Size()
}
func (m *WishItemType) XXX_DiscardUnknown() {
	xxx_messageInfo_WishItemType.DiscardUnknown(m)
}

var xxx_messageInfo_WishItemType proto.InternalMessageInfo

func (m *WishItemType) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishItemType) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *WishItemType) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *WishItemType) GetIsRecommend() bool {
	if m != nil && m.IsRecommend != nil {
		return *m.IsRecommend
	}
	return false
}

func (m *WishItemType) GetHostWeight() int32 {
	if m != nil && m.HostWeight != nil {
		return *m.HostWeight
	}
	return 0
}

func (m *WishItemType) GetClickCount() int32 {
	if m != nil && m.ClickCount != nil {
		return *m.ClickCount
	}
	return 0
}

func (m *WishItemType) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishItemType) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *WishItemType) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *WishItemType) GetIsHot() bool {
	if m != nil && m.IsHot != nil {
		return *m.IsHot
	}
	return false
}

//物品款式 wish_style
type WishStyle struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishStyle) Reset()         { *m = WishStyle{} }
func (m *WishStyle) String() string { return proto.CompactTextString(m) }
func (*WishStyle) ProtoMessage()    {}
func (*WishStyle) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{5}
}
func (m *WishStyle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishStyle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishStyle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishStyle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishStyle.Merge(m, src)
}
func (m *WishStyle) XXX_Size() int {
	return m.Size()
}
func (m *WishStyle) XXX_DiscardUnknown() {
	xxx_messageInfo_WishStyle.DiscardUnknown(m)
}

var xxx_messageInfo_WishStyle proto.InternalMessageInfo

func (m *WishStyle) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishStyle) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

//物品配置 wish_item
type WishItem struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Icon                 *string  `protobuf:"bytes,3,opt,name=Icon" json:"Icon,omitempty" bson:"Icon,omitempty"`
	Desc                 *string  `protobuf:"bytes,4,opt,name=Desc" json:"Desc,omitempty" bson:"Desc,omitempty"`
	Brand                *int32   `protobuf:"varint,5,opt,name=Brand" json:"Brand,omitempty" bson:"Brand,omitempty"`
	Type                 *int32   `protobuf:"varint,6,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	Price                *int64   `protobuf:"varint,7,opt,name=Price" json:"Price,omitempty" bson:"Price,omitempty"`
	RecoveryPrice        *int64   `protobuf:"varint,8,opt,name=RecoveryPrice" json:"RecoveryPrice,omitempty" bson:"RecoveryPrice,omitempty"`
	Length               *int32   `protobuf:"varint,9,opt,name=Length" json:"Length,omitempty" bson:"Length,omitempty"`
	Wide                 *int32   `protobuf:"varint,10,opt,name=Wide" json:"Wide,omitempty" bson:"Wide,omitempty"`
	High                 *int32   `protobuf:"varint,11,opt,name=High" json:"High,omitempty" bson:"High,omitempty"`
	BigSize              *string  `protobuf:"bytes,12,opt,name=BigSize" json:"BigSize,omitempty" bson:"BigSize,omitempty"`
	Material             []string `protobuf:"bytes,13,rep,name=Material" json:"Material,omitempty" bson:"Material,omitempty"`
	Diamond              *int64   `protobuf:"varint,15,opt,name=Diamond" json:"Diamond,omitempty" bson:"Diamond,omitempty"`
	StockAmount          *int32   `protobuf:"varint,22,opt,name=StockAmount" json:"StockAmount,omitempty" bson:"StockAmount,omitempty"`
	Status               *int32   `protobuf:"varint,23,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	PreHaveTime          *int64   `protobuf:"varint,24,opt,name=PreHaveTime" json:"PreHaveTime,omitempty" bson:"PreHaveTime,omitempty"`
	IsPreSale            *bool    `protobuf:"varint,25,opt,name=IsPreSale" json:"IsPreSale,omitempty" bson:"IsPreSale,omitempty"`
	UploadTime           *int64   `protobuf:"varint,26,opt,name=UploadTime" json:"UploadTime,omitempty" bson:"UploadTime,omitempty"`
	SoldOutTime          *int64   `protobuf:"varint,27,opt,name=SoldOutTime" json:"SoldOutTime,omitempty" bson:"SoldOutTime,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,28,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	UseType              *int32   `protobuf:"varint,30,opt,name=UseType" json:"UseType,omitempty" bson:"UseType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishItem) Reset()         { *m = WishItem{} }
func (m *WishItem) String() string { return proto.CompactTextString(m) }
func (*WishItem) ProtoMessage()    {}
func (*WishItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{6}
}
func (m *WishItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishItem.Merge(m, src)
}
func (m *WishItem) XXX_Size() int {
	return m.Size()
}
func (m *WishItem) XXX_DiscardUnknown() {
	xxx_messageInfo_WishItem.DiscardUnknown(m)
}

var xxx_messageInfo_WishItem proto.InternalMessageInfo

func (m *WishItem) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishItem) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *WishItem) GetIcon() string {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return ""
}

func (m *WishItem) GetDesc() string {
	if m != nil && m.Desc != nil {
		return *m.Desc
	}
	return ""
}

func (m *WishItem) GetBrand() int32 {
	if m != nil && m.Brand != nil {
		return *m.Brand
	}
	return 0
}

func (m *WishItem) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *WishItem) GetPrice() int64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *WishItem) GetRecoveryPrice() int64 {
	if m != nil && m.RecoveryPrice != nil {
		return *m.RecoveryPrice
	}
	return 0
}

func (m *WishItem) GetLength() int32 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

func (m *WishItem) GetWide() int32 {
	if m != nil && m.Wide != nil {
		return *m.Wide
	}
	return 0
}

func (m *WishItem) GetHigh() int32 {
	if m != nil && m.High != nil {
		return *m.High
	}
	return 0
}

func (m *WishItem) GetBigSize() string {
	if m != nil && m.BigSize != nil {
		return *m.BigSize
	}
	return ""
}

func (m *WishItem) GetMaterial() []string {
	if m != nil {
		return m.Material
	}
	return nil
}

func (m *WishItem) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *WishItem) GetStockAmount() int32 {
	if m != nil && m.StockAmount != nil {
		return *m.StockAmount
	}
	return 0
}

func (m *WishItem) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *WishItem) GetPreHaveTime() int64 {
	if m != nil && m.PreHaveTime != nil {
		return *m.PreHaveTime
	}
	return 0
}

func (m *WishItem) GetIsPreSale() bool {
	if m != nil && m.IsPreSale != nil {
		return *m.IsPreSale
	}
	return false
}

func (m *WishItem) GetUploadTime() int64 {
	if m != nil && m.UploadTime != nil {
		return *m.UploadTime
	}
	return 0
}

func (m *WishItem) GetSoldOutTime() int64 {
	if m != nil && m.SoldOutTime != nil {
		return *m.SoldOutTime
	}
	return 0
}

func (m *WishItem) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *WishItem) GetUseType() int32 {
	if m != nil && m.UseType != nil {
		return *m.UseType
	}
	return 0
}

//盲盒出售物品 wish_box_item /tool_wish_box_item
type WishBoxItem struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	WishItemId           *int64   `protobuf:"varint,2,opt,name=WishItemId" json:"WishItemId,omitempty" bson:"WishItemId,omitempty"`
	Status               *int32   `protobuf:"varint,3,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	PreStartTime         *int64   `protobuf:"varint,4,opt,name=PreStartTime" json:"PreStartTime,omitempty" bson:"PreStartTime,omitempty"`
	PreEndTime           *int64   `protobuf:"varint,5,opt,name=PreEndTime" json:"PreEndTime,omitempty" bson:"PreEndTime,omitempty"`
	WishBoxId            *int64   `protobuf:"varint,6,opt,name=WishBoxId" json:"WishBoxId,omitempty" bson:"WishBoxId,omitempty"`
	Style                *int32   `protobuf:"varint,7,opt,name=Style" json:"Style,omitempty" bson:"Style,omitempty"`
	IsWin                *bool    `protobuf:"varint,8,opt,name=IsWin" json:"IsWin,omitempty" bson:"IsWin,omitempty"`
	PerNum               *int32   `protobuf:"varint,9,opt,name=PerNum" json:"PerNum,omitempty" bson:"PerNum,omitempty"`
	PerTime              *int32   `protobuf:"varint,10,opt,name=PerTime" json:"PerTime,omitempty" bson:"PerTime,omitempty"`
	PerRate              *int32   `protobuf:"varint,11,opt,name=PerRate" json:"PerRate,omitempty" bson:"PerRate,omitempty"`
	CreateTime           *int64   `protobuf:"varint,12,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	Price                *int64   `protobuf:"varint,13,opt,name=Price" json:"Price,omitempty" bson:"Price,omitempty"`
	PredictArrivalTime   *int64   `protobuf:"varint,14,opt,name=PredictArrivalTime" json:"PredictArrivalTime,omitempty" bson:"PredictArrivalTime,omitempty"`
	Diamond              *int64   `protobuf:"varint,15,opt,name=Diamond" json:"Diamond,omitempty" bson:"Diamond,omitempty"`
	BigLoss              *int32   `protobuf:"varint,16,opt,name=BigLoss" json:"BigLoss,omitempty" bson:"BigLoss,omitempty"`
	SmallLoss            *int32   `protobuf:"varint,17,opt,name=SmallLoss" json:"SmallLoss,omitempty" bson:"SmallLoss,omitempty"`
	Common               *int32   `protobuf:"varint,18,opt,name=Common" json:"Common,omitempty" bson:"Common,omitempty"`
	BigWin               *int32   `protobuf:"varint,19,opt,name=BigWin" json:"BigWin,omitempty" bson:"BigWin,omitempty"`
	SmallWin             *int32   `protobuf:"varint,20,opt,name=SmallWin" json:"SmallWin,omitempty" bson:"SmallWin,omitempty"`
	CommonAddWeight      *int32   `protobuf:"varint,21,opt,name=CommonAddWeight" json:"CommonAddWeight,omitempty" bson:"CommonAddWeight,omitempty"`
	BigWinAddWeight      *int32   `protobuf:"varint,22,opt,name=BigWinAddWeight" json:"BigWinAddWeight,omitempty" bson:"BigWinAddWeight,omitempty"`
	SmallWinAddWeight    *int32   `protobuf:"varint,23,opt,name=SmallWinAddWeight" json:"SmallWinAddWeight,omitempty" bson:"SmallWinAddWeight,omitempty"`
	RewardLv             *int32   `protobuf:"varint,30,opt,name=RewardLv" json:"RewardLv,omitempty" bson:"RewardLv,omitempty"`
	IsMakeWish           *bool    `protobuf:"varint,31,opt,name=IsMakeWish" json:"IsMakeWish,omitempty" bson:"IsMakeWish,omitempty"`
	LocalNum             *int32   `protobuf:"varint,35,opt,name=LocalNum" json:"LocalNum,omitempty" bson:"LocalNum,omitempty"`
	TaskTime             *int64   `protobuf:"varint,36,opt,name=TaskTime" json:"TaskTime,omitempty" bson:"TaskTime,omitempty"`
	WishItemName         *string  `protobuf:"bytes,37,opt,name=WishItemName" json:"WishItemName,omitempty" bson:"WishItemName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishBoxItem) Reset()         { *m = WishBoxItem{} }
func (m *WishBoxItem) String() string { return proto.CompactTextString(m) }
func (*WishBoxItem) ProtoMessage()    {}
func (*WishBoxItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{7}
}
func (m *WishBoxItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishBoxItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishBoxItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishBoxItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishBoxItem.Merge(m, src)
}
func (m *WishBoxItem) XXX_Size() int {
	return m.Size()
}
func (m *WishBoxItem) XXX_DiscardUnknown() {
	xxx_messageInfo_WishBoxItem.DiscardUnknown(m)
}

var xxx_messageInfo_WishBoxItem proto.InternalMessageInfo

func (m *WishBoxItem) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishBoxItem) GetWishItemId() int64 {
	if m != nil && m.WishItemId != nil {
		return *m.WishItemId
	}
	return 0
}

func (m *WishBoxItem) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *WishBoxItem) GetPreStartTime() int64 {
	if m != nil && m.PreStartTime != nil {
		return *m.PreStartTime
	}
	return 0
}

func (m *WishBoxItem) GetPreEndTime() int64 {
	if m != nil && m.PreEndTime != nil {
		return *m.PreEndTime
	}
	return 0
}

func (m *WishBoxItem) GetWishBoxId() int64 {
	if m != nil && m.WishBoxId != nil {
		return *m.WishBoxId
	}
	return 0
}

func (m *WishBoxItem) GetStyle() int32 {
	if m != nil && m.Style != nil {
		return *m.Style
	}
	return 0
}

func (m *WishBoxItem) GetIsWin() bool {
	if m != nil && m.IsWin != nil {
		return *m.IsWin
	}
	return false
}

func (m *WishBoxItem) GetPerNum() int32 {
	if m != nil && m.PerNum != nil {
		return *m.PerNum
	}
	return 0
}

func (m *WishBoxItem) GetPerTime() int32 {
	if m != nil && m.PerTime != nil {
		return *m.PerTime
	}
	return 0
}

func (m *WishBoxItem) GetPerRate() int32 {
	if m != nil && m.PerRate != nil {
		return *m.PerRate
	}
	return 0
}

func (m *WishBoxItem) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishBoxItem) GetPrice() int64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *WishBoxItem) GetPredictArrivalTime() int64 {
	if m != nil && m.PredictArrivalTime != nil {
		return *m.PredictArrivalTime
	}
	return 0
}

func (m *WishBoxItem) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *WishBoxItem) GetBigLoss() int32 {
	if m != nil && m.BigLoss != nil {
		return *m.BigLoss
	}
	return 0
}

func (m *WishBoxItem) GetSmallLoss() int32 {
	if m != nil && m.SmallLoss != nil {
		return *m.SmallLoss
	}
	return 0
}

func (m *WishBoxItem) GetCommon() int32 {
	if m != nil && m.Common != nil {
		return *m.Common
	}
	return 0
}

func (m *WishBoxItem) GetBigWin() int32 {
	if m != nil && m.BigWin != nil {
		return *m.BigWin
	}
	return 0
}

func (m *WishBoxItem) GetSmallWin() int32 {
	if m != nil && m.SmallWin != nil {
		return *m.SmallWin
	}
	return 0
}

func (m *WishBoxItem) GetCommonAddWeight() int32 {
	if m != nil && m.CommonAddWeight != nil {
		return *m.CommonAddWeight
	}
	return 0
}

func (m *WishBoxItem) GetBigWinAddWeight() int32 {
	if m != nil && m.BigWinAddWeight != nil {
		return *m.BigWinAddWeight
	}
	return 0
}

func (m *WishBoxItem) GetSmallWinAddWeight() int32 {
	if m != nil && m.SmallWinAddWeight != nil {
		return *m.SmallWinAddWeight
	}
	return 0
}

func (m *WishBoxItem) GetRewardLv() int32 {
	if m != nil && m.RewardLv != nil {
		return *m.RewardLv
	}
	return 0
}

func (m *WishBoxItem) GetIsMakeWish() bool {
	if m != nil && m.IsMakeWish != nil {
		return *m.IsMakeWish
	}
	return false
}

func (m *WishBoxItem) GetLocalNum() int32 {
	if m != nil && m.LocalNum != nil {
		return *m.LocalNum
	}
	return 0
}

func (m *WishBoxItem) GetTaskTime() int64 {
	if m != nil && m.TaskTime != nil {
		return *m.TaskTime
	}
	return 0
}

func (m *WishBoxItem) GetWishItemName() string {
	if m != nil && m.WishItemName != nil {
		return *m.WishItemName
	}
	return ""
}

//盲合数据存储结构 wish_box
type WishBox struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Icon                 *string  `protobuf:"bytes,3,opt,name=Icon" json:"Icon,omitempty" bson:"Icon,omitempty"`
	Menu                 []int32  `protobuf:"varint,4,rep,name=Menu" json:"Menu,omitempty" bson:"Menu,omitempty"`
	Items                []int64  `protobuf:"varint,5,rep,name=items" json:"items,omitempty" bson:"items,omitempty"`
	Desc                 *string  `protobuf:"bytes,6,opt,name=Desc" json:"Desc,omitempty" bson:"Desc,omitempty"`
	Index                *string  `protobuf:"bytes,7,opt,name=Index" json:"Index,omitempty" bson:"Index,omitempty"`
	Match                *int32   `protobuf:"varint,8,opt,name=Match" json:"Match,omitempty" bson:"Match,omitempty"`
	TotalNum             *int32   `protobuf:"varint,9,opt,name=TotalNum" json:"TotalNum,omitempty" bson:"TotalNum,omitempty"`
	RareNum              *int32   `protobuf:"varint,10,opt,name=RareNum" json:"RareNum,omitempty" bson:"RareNum,omitempty"`
	Price                *int64   `protobuf:"varint,11,opt,name=Price" json:"Price,omitempty" bson:"Price,omitempty"`
	Status               *int32   `protobuf:"varint,12,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	CreateTime           *int64   `protobuf:"varint,13,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	Brands               []int64  `protobuf:"varint,14,rep,name=Brands" json:"Brands,omitempty" bson:"Brands,omitempty"`
	Types                []int64  `protobuf:"varint,15,rep,name=Types" json:"Types,omitempty" bson:"Types,omitempty"`
	Styles               []int32  `protobuf:"varint,16,rep,name=Styles" json:"Styles,omitempty" bson:"Styles,omitempty"`
	WinNum               *int64   `protobuf:"varint,17,opt,name=WinNum" json:"WinNum,omitempty" bson:"WinNum,omitempty"`
	GuardianId           *int64   `protobuf:"varint,18,opt,name=GuardianId" json:"GuardianId,omitempty" bson:"GuardianId,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,31,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	PutOnTime            *int64   `protobuf:"varint,32,opt,name=PutOnTime" json:"PutOnTime,omitempty" bson:"PutOnTime,omitempty"`
	SortWeight           *int64   `protobuf:"varint,33,opt,name=SortWeight" json:"SortWeight,omitempty" bson:"SortWeight,omitempty"`
	HaveIsWin            *bool    `protobuf:"varint,34,opt,name=HaveIsWin" json:"HaveIsWin,omitempty" bson:"HaveIsWin,omitempty"`
	WishPoolId           *int64   `protobuf:"varint,40,opt,name=WishPoolId" json:"WishPoolId,omitempty" bson:"WishPoolId,omitempty"`
	WishItems            []int64  `protobuf:"varint,41,rep,name=wishItems" json:"wishItems,omitempty" bson:"wishItems,omitempty"`
	IsTask               *bool    `protobuf:"varint,45,opt,name=IsTask" json:"IsTask,omitempty" bson:"IsTask,omitempty"`
	ProductStatus        *int32   `protobuf:"varint,46,opt,name=ProductStatus" json:"ProductStatus,omitempty" bson:"ProductStatus,omitempty"`
	GuardianOverTime     *int64   `protobuf:"varint,47,opt,name=GuardianOverTime" json:"GuardianOverTime,omitempty" bson:"GuardianOverTime,omitempty"`
	IsGuardian           *bool    `protobuf:"varint,48,opt,name=IsGuardian" json:"IsGuardian,omitempty" bson:"IsGuardian,omitempty"`
	IsRecommend          *bool    `protobuf:"varint,49,opt,name=IsRecommend" json:"IsRecommend,omitempty" bson:"IsRecommend,omitempty"`
	GuardType            *int32   `protobuf:"varint,50,opt,name=GuardType" json:"GuardType,omitempty" bson:"GuardType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishBox) Reset()         { *m = WishBox{} }
func (m *WishBox) String() string { return proto.CompactTextString(m) }
func (*WishBox) ProtoMessage()    {}
func (*WishBox) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{8}
}
func (m *WishBox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishBox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishBox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishBox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishBox.Merge(m, src)
}
func (m *WishBox) XXX_Size() int {
	return m.Size()
}
func (m *WishBox) XXX_DiscardUnknown() {
	xxx_messageInfo_WishBox.DiscardUnknown(m)
}

var xxx_messageInfo_WishBox proto.InternalMessageInfo

func (m *WishBox) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishBox) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *WishBox) GetIcon() string {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return ""
}

func (m *WishBox) GetMenu() []int32 {
	if m != nil {
		return m.Menu
	}
	return nil
}

func (m *WishBox) GetItems() []int64 {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *WishBox) GetDesc() string {
	if m != nil && m.Desc != nil {
		return *m.Desc
	}
	return ""
}

func (m *WishBox) GetIndex() string {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return ""
}

func (m *WishBox) GetMatch() int32 {
	if m != nil && m.Match != nil {
		return *m.Match
	}
	return 0
}

func (m *WishBox) GetTotalNum() int32 {
	if m != nil && m.TotalNum != nil {
		return *m.TotalNum
	}
	return 0
}

func (m *WishBox) GetRareNum() int32 {
	if m != nil && m.RareNum != nil {
		return *m.RareNum
	}
	return 0
}

func (m *WishBox) GetPrice() int64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *WishBox) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *WishBox) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishBox) GetBrands() []int64 {
	if m != nil {
		return m.Brands
	}
	return nil
}

func (m *WishBox) GetTypes() []int64 {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *WishBox) GetStyles() []int32 {
	if m != nil {
		return m.Styles
	}
	return nil
}

func (m *WishBox) GetWinNum() int64 {
	if m != nil && m.WinNum != nil {
		return *m.WinNum
	}
	return 0
}

func (m *WishBox) GetGuardianId() int64 {
	if m != nil && m.GuardianId != nil {
		return *m.GuardianId
	}
	return 0
}

func (m *WishBox) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *WishBox) GetPutOnTime() int64 {
	if m != nil && m.PutOnTime != nil {
		return *m.PutOnTime
	}
	return 0
}

func (m *WishBox) GetSortWeight() int64 {
	if m != nil && m.SortWeight != nil {
		return *m.SortWeight
	}
	return 0
}

func (m *WishBox) GetHaveIsWin() bool {
	if m != nil && m.HaveIsWin != nil {
		return *m.HaveIsWin
	}
	return false
}

func (m *WishBox) GetWishPoolId() int64 {
	if m != nil && m.WishPoolId != nil {
		return *m.WishPoolId
	}
	return 0
}

func (m *WishBox) GetWishItems() []int64 {
	if m != nil {
		return m.WishItems
	}
	return nil
}

func (m *WishBox) GetIsTask() bool {
	if m != nil && m.IsTask != nil {
		return *m.IsTask
	}
	return false
}

func (m *WishBox) GetProductStatus() int32 {
	if m != nil && m.ProductStatus != nil {
		return *m.ProductStatus
	}
	return 0
}

func (m *WishBox) GetGuardianOverTime() int64 {
	if m != nil && m.GuardianOverTime != nil {
		return *m.GuardianOverTime
	}
	return 0
}

func (m *WishBox) GetIsGuardian() bool {
	if m != nil && m.IsGuardian != nil {
		return *m.IsGuardian
	}
	return false
}

func (m *WishBox) GetIsRecommend() bool {
	if m != nil && m.IsRecommend != nil {
		return *m.IsRecommend
	}
	return false
}

func (m *WishBox) GetGuardType() int32 {
	if m != nil && m.GuardType != nil {
		return *m.GuardType
	}
	return 0
}

//盲盒挑战记录 wish_log
type WishLog struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	WishBoxId            *int64   `protobuf:"varint,2,opt,name=WishBoxId" json:"WishBoxId,omitempty" bson:"WishBoxId,omitempty"`
	DareId               *int64   `protobuf:"varint,3,opt,name=DareId" json:"DareId,omitempty" bson:"DareId,omitempty"`
	DareName             *string  `protobuf:"bytes,4,opt,name=DareName" json:"DareName,omitempty" bson:"DareName,omitempty"`
	BeDareId             *int64   `protobuf:"varint,5,opt,name=BeDareId" json:"BeDareId,omitempty" bson:"BeDareId,omitempty"`
	BeDareName           *string  `protobuf:"bytes,6,opt,name=BeDareName" json:"BeDareName,omitempty" bson:"BeDareName,omitempty"`
	CreateTime           *int64   `protobuf:"varint,7,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	Result               *bool    `protobuf:"varint,8,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	ChallengeItemId      *int64   `protobuf:"varint,9,opt,name=ChallengeItemId" json:"ChallengeItemId,omitempty" bson:"ChallengeItemId,omitempty"`
	DareHeadIcon         *string  `protobuf:"bytes,10,opt,name=DareHeadIcon" json:"DareHeadIcon,omitempty" bson:"DareHeadIcon,omitempty"`
	DefendTime           *int64   `protobuf:"varint,11,opt,name=DefendTime" json:"DefendTime,omitempty" bson:"DefendTime,omitempty"`
	DarePrice            *int64   `protobuf:"varint,12,opt,name=DarePrice" json:"DarePrice,omitempty" bson:"DarePrice,omitempty"`
	DareType             *int32   `protobuf:"varint,13,opt,name=DareType" json:"DareType,omitempty" bson:"DareType,omitempty"`
	WishItemId           *int64   `protobuf:"varint,20,opt,name=WishItemId" json:"WishItemId,omitempty" bson:"WishItemId,omitempty"`
	ChallengeItemName    *string  `protobuf:"bytes,25,opt,name=ChallengeItemName" json:"ChallengeItemName,omitempty" bson:"ChallengeItemName,omitempty"`
	PoolLocalStatus      *int64   `protobuf:"varint,21,opt,name=PoolLocalStatus" json:"PoolLocalStatus,omitempty" bson:"PoolLocalStatus,omitempty"`
	PoolIsOpenAward      *bool    `protobuf:"varint,22,opt,name=PoolIsOpenAward" json:"PoolIsOpenAward,omitempty" bson:"PoolIsOpenAward,omitempty"`
	PoolId               *int64   `protobuf:"varint,23,opt,name=PoolId" json:"PoolId,omitempty" bson:"PoolId,omitempty"`
	PoolIncomeValue      *int64   `protobuf:"varint,24,opt,name=PoolIncomeValue" json:"PoolIncomeValue,omitempty" bson:"PoolIncomeValue,omitempty"`
	AfterPoolIncomeValue *int64   `protobuf:"varint,26,opt,name=AfterPoolIncomeValue" json:"AfterPoolIncomeValue,omitempty" bson:"AfterPoolIncomeValue,omitempty"`
	GuardType            *int32   `protobuf:"varint,50,opt,name=GuardType" json:"GuardType,omitempty" bson:"GuardType,omitempty"`
	AfterPoolIsOpenAward *bool    `protobuf:"varint,39,opt,name=AfterPoolIsOpenAward" json:"AfterPoolIsOpenAward,omitempty" bson:"AfterPoolIsOpenAward,omitempty"`
	AfterPoolLocalStatus *int64   `protobuf:"varint,51,opt,name=AfterPoolLocalStatus" json:"AfterPoolLocalStatus,omitempty" bson:"AfterPoolLocalStatus,omitempty"`
	CreateTimeMill       *int64   `protobuf:"varint,63,opt,name=CreateTimeMill" json:"CreateTimeMill,omitempty" bson:"CreateTimeMill,omitempty"`
	GoroutineID          *int64   `protobuf:"varint,64,opt,name=GoroutineID" json:"GoroutineID,omitempty" bson:"GoroutineID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishLog) Reset()         { *m = WishLog{} }
func (m *WishLog) String() string { return proto.CompactTextString(m) }
func (*WishLog) ProtoMessage()    {}
func (*WishLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{9}
}
func (m *WishLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishLog.Merge(m, src)
}
func (m *WishLog) XXX_Size() int {
	return m.Size()
}
func (m *WishLog) XXX_DiscardUnknown() {
	xxx_messageInfo_WishLog.DiscardUnknown(m)
}

var xxx_messageInfo_WishLog proto.InternalMessageInfo

func (m *WishLog) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishLog) GetWishBoxId() int64 {
	if m != nil && m.WishBoxId != nil {
		return *m.WishBoxId
	}
	return 0
}

func (m *WishLog) GetDareId() int64 {
	if m != nil && m.DareId != nil {
		return *m.DareId
	}
	return 0
}

func (m *WishLog) GetDareName() string {
	if m != nil && m.DareName != nil {
		return *m.DareName
	}
	return ""
}

func (m *WishLog) GetBeDareId() int64 {
	if m != nil && m.BeDareId != nil {
		return *m.BeDareId
	}
	return 0
}

func (m *WishLog) GetBeDareName() string {
	if m != nil && m.BeDareName != nil {
		return *m.BeDareName
	}
	return ""
}

func (m *WishLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishLog) GetResult() bool {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return false
}

func (m *WishLog) GetChallengeItemId() int64 {
	if m != nil && m.ChallengeItemId != nil {
		return *m.ChallengeItemId
	}
	return 0
}

func (m *WishLog) GetDareHeadIcon() string {
	if m != nil && m.DareHeadIcon != nil {
		return *m.DareHeadIcon
	}
	return ""
}

func (m *WishLog) GetDefendTime() int64 {
	if m != nil && m.DefendTime != nil {
		return *m.DefendTime
	}
	return 0
}

func (m *WishLog) GetDarePrice() int64 {
	if m != nil && m.DarePrice != nil {
		return *m.DarePrice
	}
	return 0
}

func (m *WishLog) GetDareType() int32 {
	if m != nil && m.DareType != nil {
		return *m.DareType
	}
	return 0
}

func (m *WishLog) GetWishItemId() int64 {
	if m != nil && m.WishItemId != nil {
		return *m.WishItemId
	}
	return 0
}

func (m *WishLog) GetChallengeItemName() string {
	if m != nil && m.ChallengeItemName != nil {
		return *m.ChallengeItemName
	}
	return ""
}

func (m *WishLog) GetPoolLocalStatus() int64 {
	if m != nil && m.PoolLocalStatus != nil {
		return *m.PoolLocalStatus
	}
	return 0
}

func (m *WishLog) GetPoolIsOpenAward() bool {
	if m != nil && m.PoolIsOpenAward != nil {
		return *m.PoolIsOpenAward
	}
	return false
}

func (m *WishLog) GetPoolId() int64 {
	if m != nil && m.PoolId != nil {
		return *m.PoolId
	}
	return 0
}

func (m *WishLog) GetPoolIncomeValue() int64 {
	if m != nil && m.PoolIncomeValue != nil {
		return *m.PoolIncomeValue
	}
	return 0
}

func (m *WishLog) GetAfterPoolIncomeValue() int64 {
	if m != nil && m.AfterPoolIncomeValue != nil {
		return *m.AfterPoolIncomeValue
	}
	return 0
}

func (m *WishLog) GetGuardType() int32 {
	if m != nil && m.GuardType != nil {
		return *m.GuardType
	}
	return 0
}

func (m *WishLog) GetAfterPoolIsOpenAward() bool {
	if m != nil && m.AfterPoolIsOpenAward != nil {
		return *m.AfterPoolIsOpenAward
	}
	return false
}

func (m *WishLog) GetAfterPoolLocalStatus() int64 {
	if m != nil && m.AfterPoolLocalStatus != nil {
		return *m.AfterPoolLocalStatus
	}
	return 0
}

func (m *WishLog) GetCreateTimeMill() int64 {
	if m != nil && m.CreateTimeMill != nil {
		return *m.CreateTimeMill
	}
	return 0
}

func (m *WishLog) GetGoroutineID() int64 {
	if m != nil && m.GoroutineID != nil {
		return *m.GoroutineID
	}
	return 0
}

//盲盒挑战占领时长表 wish_occupied
type WishOccupied struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	WishBoxId            *int64   `protobuf:"varint,2,opt,name=WishBoxId" json:"WishBoxId,omitempty" bson:"WishBoxId,omitempty"`
	NickName             *string  `protobuf:"bytes,4,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	HeadUrl              *string  `protobuf:"bytes,5,opt,name=HeadUrl" json:"HeadUrl,omitempty" bson:"HeadUrl,omitempty"`
	PlayerId             *int64   `protobuf:"varint,6,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	CreateTime           *int64   `protobuf:"varint,7,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	EndTime              *int64   `protobuf:"varint,8,opt,name=EndTime" json:"EndTime,omitempty" bson:"EndTime,omitempty"`
	OccupiedTime         *int64   `protobuf:"varint,9,opt,name=OccupiedTime" json:"OccupiedTime,omitempty" bson:"OccupiedTime,omitempty"`
	Status               *int32   `protobuf:"varint,10,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	CoinNum              *int32   `protobuf:"varint,11,opt,name=CoinNum" json:"CoinNum,omitempty" bson:"CoinNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishOccupied) Reset()         { *m = WishOccupied{} }
func (m *WishOccupied) String() string { return proto.CompactTextString(m) }
func (*WishOccupied) ProtoMessage()    {}
func (*WishOccupied) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{10}
}
func (m *WishOccupied) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishOccupied) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishOccupied.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishOccupied) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishOccupied.Merge(m, src)
}
func (m *WishOccupied) XXX_Size() int {
	return m.Size()
}
func (m *WishOccupied) XXX_DiscardUnknown() {
	xxx_messageInfo_WishOccupied.DiscardUnknown(m)
}

var xxx_messageInfo_WishOccupied proto.InternalMessageInfo

func (m *WishOccupied) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishOccupied) GetWishBoxId() int64 {
	if m != nil && m.WishBoxId != nil {
		return *m.WishBoxId
	}
	return 0
}

func (m *WishOccupied) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *WishOccupied) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *WishOccupied) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *WishOccupied) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishOccupied) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *WishOccupied) GetOccupiedTime() int64 {
	if m != nil && m.OccupiedTime != nil {
		return *m.OccupiedTime
	}
	return 0
}

func (m *WishOccupied) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *WishOccupied) GetCoinNum() int32 {
	if m != nil && m.CoinNum != nil {
		return *m.CoinNum
	}
	return 0
}

//玩家愿望数据 player_wish_data
type PlayerWishData struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	WishBoxId            *int64   `protobuf:"varint,3,opt,name=WishBoxId" json:"WishBoxId,omitempty" bson:"WishBoxId,omitempty"`
	CreateTime           *int64   `protobuf:"varint,4,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	WishBoxItemId        *int64   `protobuf:"varint,5,opt,name=WishBoxItemId" json:"WishBoxItemId,omitempty" bson:"WishBoxItemId,omitempty"`
	Status               *int32   `protobuf:"varint,6,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	FinishTime           *int64   `protobuf:"varint,7,opt,name=FinishTime" json:"FinishTime,omitempty" bson:"FinishTime,omitempty"`
	ProductUrl           *string  `protobuf:"bytes,8,opt,name=ProductUrl" json:"ProductUrl,omitempty" bson:"ProductUrl,omitempty"`
	Match                *int32   `protobuf:"varint,9,opt,name=Match" json:"Match,omitempty" bson:"Match,omitempty"`
	IsMakeWish           *bool    `protobuf:"varint,10,opt,name=IsMakeWish" json:"IsMakeWish,omitempty" bson:"IsMakeWish,omitempty"`
	WishItemId           *int64   `protobuf:"varint,20,opt,name=WishItemId" json:"WishItemId,omitempty" bson:"WishItemId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerWishData) Reset()         { *m = PlayerWishData{} }
func (m *PlayerWishData) String() string { return proto.CompactTextString(m) }
func (*PlayerWishData) ProtoMessage()    {}
func (*PlayerWishData) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{11}
}
func (m *PlayerWishData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerWishData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerWishData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerWishData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerWishData.Merge(m, src)
}
func (m *PlayerWishData) XXX_Size() int {
	return m.Size()
}
func (m *PlayerWishData) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerWishData.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerWishData proto.InternalMessageInfo

func (m *PlayerWishData) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerWishData) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerWishData) GetWishBoxId() int64 {
	if m != nil && m.WishBoxId != nil {
		return *m.WishBoxId
	}
	return 0
}

func (m *PlayerWishData) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PlayerWishData) GetWishBoxItemId() int64 {
	if m != nil && m.WishBoxItemId != nil {
		return *m.WishBoxItemId
	}
	return 0
}

func (m *PlayerWishData) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *PlayerWishData) GetFinishTime() int64 {
	if m != nil && m.FinishTime != nil {
		return *m.FinishTime
	}
	return 0
}

func (m *PlayerWishData) GetProductUrl() string {
	if m != nil && m.ProductUrl != nil {
		return *m.ProductUrl
	}
	return ""
}

func (m *PlayerWishData) GetMatch() int32 {
	if m != nil && m.Match != nil {
		return *m.Match
	}
	return 0
}

func (m *PlayerWishData) GetIsMakeWish() bool {
	if m != nil && m.IsMakeWish != nil {
		return *m.IsMakeWish
	}
	return false
}

func (m *PlayerWishData) GetWishItemId() int64 {
	if m != nil && m.WishItemId != nil {
		return *m.WishItemId
	}
	return 0
}

//玩家物品列表(挑战产生物品):player_wish_item/tool_player_wish_item
type PlayerWishItem struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	ChallengeItemId      *int64   `protobuf:"varint,3,opt,name=ChallengeItemId" json:"ChallengeItemId,omitempty" bson:"ChallengeItemId,omitempty"`
	CreateTime           *int64   `protobuf:"varint,4,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	Status               *int32   `protobuf:"varint,5,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	WishBoxId            *int64   `protobuf:"varint,6,opt,name=WishBoxId" json:"WishBoxId,omitempty" bson:"WishBoxId,omitempty"`
	IsRead               *bool    `protobuf:"varint,7,opt,name=IsRead" json:"IsRead,omitempty" bson:"IsRead,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,8,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	ExpireTime           *int64   `protobuf:"varint,9,opt,name=ExpireTime" json:"ExpireTime,omitempty" bson:"ExpireTime,omitempty"`
	RecyclePrice         *int64   `protobuf:"varint,10,opt,name=RecyclePrice" json:"RecyclePrice,omitempty" bson:"RecyclePrice,omitempty"`
	RecycleType          *int32   `protobuf:"varint,12,opt,name=RecycleType" json:"RecycleType,omitempty" bson:"RecycleType,omitempty"`
	Operator             *string  `protobuf:"bytes,13,opt,name=Operator" json:"Operator,omitempty" bson:"Operator,omitempty"`
	WishItemId           *int64   `protobuf:"varint,20,opt,name=WishItemId" json:"WishItemId,omitempty" bson:"WishItemId,omitempty"`
	WishItemPrice        *int64   `protobuf:"varint,21,opt,name=WishItemPrice" json:"WishItemPrice,omitempty" bson:"WishItemPrice,omitempty"`
	DareDiamond          *int64   `protobuf:"varint,22,opt,name=DareDiamond" json:"DareDiamond,omitempty" bson:"DareDiamond,omitempty"`
	ProductName          *string  `protobuf:"bytes,23,opt,name=ProductName" json:"ProductName,omitempty" bson:"ProductName,omitempty"`
	WishItemDiamond      *int64   `protobuf:"varint,24,opt,name=WishItemDiamond" json:"WishItemDiamond,omitempty" bson:"WishItemDiamond,omitempty"`
	WishItemIcon         *string  `protobuf:"bytes,25,opt,name=WishItemIcon" json:"WishItemIcon,omitempty" bson:"WishItemIcon,omitempty"`
	WishItemStyle        *int32   `protobuf:"varint,29,opt,name=WishItemStyle" json:"WishItemStyle,omitempty" bson:"WishItemStyle,omitempty"`
	BoxName              *string  `protobuf:"bytes,30,opt,name=BoxName" json:"BoxName,omitempty" bson:"BoxName,omitempty"`
	BoxIcon              *string  `protobuf:"bytes,31,opt,name=BoxIcon" json:"BoxIcon,omitempty" bson:"BoxIcon,omitempty"`
	BoxMatch             *int32   `protobuf:"varint,32,opt,name=BoxMatch" json:"BoxMatch,omitempty" bson:"BoxMatch,omitempty"`
	AfterIsOpenAward     *bool    `protobuf:"varint,39,opt,name=AfterIsOpenAward" json:"AfterIsOpenAward,omitempty" bson:"AfterIsOpenAward,omitempty"`
	AfterLocalStatus     *int64   `protobuf:"varint,51,opt,name=AfterLocalStatus" json:"AfterLocalStatus,omitempty" bson:"AfterLocalStatus,omitempty"`
	IsOpenAward          *bool    `protobuf:"varint,40,opt,name=IsOpenAward" json:"IsOpenAward,omitempty" bson:"IsOpenAward,omitempty"`
	LocalStatus          *int64   `protobuf:"varint,52,opt,name=LocalStatus" json:"LocalStatus,omitempty" bson:"LocalStatus,omitempty"`
	CreateTimeMill       *int64   `protobuf:"varint,63,opt,name=CreateTimeMill" json:"CreateTimeMill,omitempty" bson:"CreateTimeMill,omitempty"`
	GoroutineID          *int64   `protobuf:"varint,64,opt,name=GoroutineID" json:"GoroutineID,omitempty" bson:"GoroutineID,omitempty"`
	GiveType             *int64   `protobuf:"varint,65,opt,name=GiveType" json:"GiveType,omitempty" bson:"GiveType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerWishItem) Reset()         { *m = PlayerWishItem{} }
func (m *PlayerWishItem) String() string { return proto.CompactTextString(m) }
func (*PlayerWishItem) ProtoMessage()    {}
func (*PlayerWishItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{12}
}
func (m *PlayerWishItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerWishItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerWishItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerWishItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerWishItem.Merge(m, src)
}
func (m *PlayerWishItem) XXX_Size() int {
	return m.Size()
}
func (m *PlayerWishItem) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerWishItem.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerWishItem proto.InternalMessageInfo

func (m *PlayerWishItem) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerWishItem) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerWishItem) GetChallengeItemId() int64 {
	if m != nil && m.ChallengeItemId != nil {
		return *m.ChallengeItemId
	}
	return 0
}

func (m *PlayerWishItem) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PlayerWishItem) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *PlayerWishItem) GetWishBoxId() int64 {
	if m != nil && m.WishBoxId != nil {
		return *m.WishBoxId
	}
	return 0
}

func (m *PlayerWishItem) GetIsRead() bool {
	if m != nil && m.IsRead != nil {
		return *m.IsRead
	}
	return false
}

func (m *PlayerWishItem) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *PlayerWishItem) GetExpireTime() int64 {
	if m != nil && m.ExpireTime != nil {
		return *m.ExpireTime
	}
	return 0
}

func (m *PlayerWishItem) GetRecyclePrice() int64 {
	if m != nil && m.RecyclePrice != nil {
		return *m.RecyclePrice
	}
	return 0
}

func (m *PlayerWishItem) GetRecycleType() int32 {
	if m != nil && m.RecycleType != nil {
		return *m.RecycleType
	}
	return 0
}

func (m *PlayerWishItem) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *PlayerWishItem) GetWishItemId() int64 {
	if m != nil && m.WishItemId != nil {
		return *m.WishItemId
	}
	return 0
}

func (m *PlayerWishItem) GetWishItemPrice() int64 {
	if m != nil && m.WishItemPrice != nil {
		return *m.WishItemPrice
	}
	return 0
}

func (m *PlayerWishItem) GetDareDiamond() int64 {
	if m != nil && m.DareDiamond != nil {
		return *m.DareDiamond
	}
	return 0
}

func (m *PlayerWishItem) GetProductName() string {
	if m != nil && m.ProductName != nil {
		return *m.ProductName
	}
	return ""
}

func (m *PlayerWishItem) GetWishItemDiamond() int64 {
	if m != nil && m.WishItemDiamond != nil {
		return *m.WishItemDiamond
	}
	return 0
}

func (m *PlayerWishItem) GetWishItemIcon() string {
	if m != nil && m.WishItemIcon != nil {
		return *m.WishItemIcon
	}
	return ""
}

func (m *PlayerWishItem) GetWishItemStyle() int32 {
	if m != nil && m.WishItemStyle != nil {
		return *m.WishItemStyle
	}
	return 0
}

func (m *PlayerWishItem) GetBoxName() string {
	if m != nil && m.BoxName != nil {
		return *m.BoxName
	}
	return ""
}

func (m *PlayerWishItem) GetBoxIcon() string {
	if m != nil && m.BoxIcon != nil {
		return *m.BoxIcon
	}
	return ""
}

func (m *PlayerWishItem) GetBoxMatch() int32 {
	if m != nil && m.BoxMatch != nil {
		return *m.BoxMatch
	}
	return 0
}

func (m *PlayerWishItem) GetAfterIsOpenAward() bool {
	if m != nil && m.AfterIsOpenAward != nil {
		return *m.AfterIsOpenAward
	}
	return false
}

func (m *PlayerWishItem) GetAfterLocalStatus() int64 {
	if m != nil && m.AfterLocalStatus != nil {
		return *m.AfterLocalStatus
	}
	return 0
}

func (m *PlayerWishItem) GetIsOpenAward() bool {
	if m != nil && m.IsOpenAward != nil {
		return *m.IsOpenAward
	}
	return false
}

func (m *PlayerWishItem) GetLocalStatus() int64 {
	if m != nil && m.LocalStatus != nil {
		return *m.LocalStatus
	}
	return 0
}

func (m *PlayerWishItem) GetCreateTimeMill() int64 {
	if m != nil && m.CreateTimeMill != nil {
		return *m.CreateTimeMill
	}
	return 0
}

func (m *PlayerWishItem) GetGoroutineID() int64 {
	if m != nil && m.GoroutineID != nil {
		return *m.GoroutineID
	}
	return 0
}

func (m *PlayerWishItem) GetGiveType() int64 {
	if m != nil && m.GiveType != nil {
		return *m.GiveType
	}
	return 0
}

//玩家盲盒商品兑换记录
type PlayerExchangeLog struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	PlayerAccount        *string  `protobuf:"bytes,3,opt,name=PlayerAccount" json:"PlayerAccount,omitempty" bson:"PlayerAccount,omitempty"`
	Status               *int32   `protobuf:"varint,4,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	Receiver             *string  `protobuf:"bytes,5,opt,name=Receiver" json:"Receiver,omitempty" bson:"Receiver,omitempty"`
	Phone                *string  `protobuf:"bytes,6,opt,name=Phone" json:"Phone,omitempty" bson:"Phone,omitempty"`
	Address              *string  `protobuf:"bytes,7,opt,name=Address" json:"Address,omitempty" bson:"Address,omitempty"`
	CreateTime           *int64   `protobuf:"varint,8,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	DeliveryTime         *int64   `protobuf:"varint,9,opt,name=DeliveryTime" json:"DeliveryTime,omitempty" bson:"DeliveryTime,omitempty"`
	OrderId              *string  `protobuf:"bytes,10,opt,name=OrderId" json:"OrderId,omitempty" bson:"OrderId,omitempty"`
	BoxDrawPrice         *int64   `protobuf:"varint,14,opt,name=BoxDrawPrice" json:"BoxDrawPrice,omitempty" bson:"BoxDrawPrice,omitempty"`
	WishBoxItem          *int64   `protobuf:"varint,15,opt,name=WishBoxItem" json:"WishBoxItem,omitempty" bson:"WishBoxItem,omitempty"`
	Note                 *string  `protobuf:"bytes,23,opt,name=Note" json:"Note,omitempty" bson:"Note,omitempty"`
	Company              *string  `protobuf:"bytes,24,opt,name=Company" json:"Company,omitempty" bson:"Company,omitempty"`
	CompanyCode          *string  `protobuf:"bytes,25,opt,name=CompanyCode" json:"CompanyCode,omitempty" bson:"CompanyCode,omitempty"`
	Odd                  *string  `protobuf:"bytes,26,opt,name=Odd" json:"Odd,omitempty" bson:"Odd,omitempty"`
	WishBoxId            *int64   `protobuf:"varint,30,opt,name=WishBoxId" json:"WishBoxId,omitempty" bson:"WishBoxId,omitempty"`
	ProductId            *int64   `protobuf:"varint,32,opt,name=ProductId" json:"ProductId,omitempty" bson:"ProductId,omitempty"`
	ProductName          *string  `protobuf:"bytes,37,opt,name=ProductName" json:"ProductName,omitempty" bson:"ProductName,omitempty"`
	ProductIcon          *string  `protobuf:"bytes,38,opt,name=ProductIcon" json:"ProductIcon,omitempty" bson:"ProductIcon,omitempty"`
	ProductPrice         *int64   `protobuf:"varint,39,opt,name=ProductPrice" json:"ProductPrice,omitempty" bson:"ProductPrice,omitempty"`
	ProductDiamond       *int64   `protobuf:"varint,40,opt,name=ProductDiamond" json:"ProductDiamond,omitempty" bson:"ProductDiamond,omitempty"`
	PlayerItemId         *int64   `protobuf:"varint,41,opt,name=PlayerItemId" json:"PlayerItemId,omitempty" bson:"PlayerItemId,omitempty"`
	UserId               *int64   `protobuf:"varint,42,opt,name=UserId" json:"UserId,omitempty" bson:"UserId,omitempty"`
	Postage              *int64   `protobuf:"varint,43,opt,name=Postage" json:"Postage,omitempty" bson:"Postage,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,45,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	Operator             *string  `protobuf:"bytes,46,opt,name=Operator" json:"Operator,omitempty" bson:"Operator,omitempty"`
	GiveType             *int64   `protobuf:"varint,47,opt,name=GiveType" json:"GiveType,omitempty" bson:"GiveType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerExchangeLog) Reset()         { *m = PlayerExchangeLog{} }
func (m *PlayerExchangeLog) String() string { return proto.CompactTextString(m) }
func (*PlayerExchangeLog) ProtoMessage()    {}
func (*PlayerExchangeLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{13}
}
func (m *PlayerExchangeLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerExchangeLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerExchangeLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerExchangeLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerExchangeLog.Merge(m, src)
}
func (m *PlayerExchangeLog) XXX_Size() int {
	return m.Size()
}
func (m *PlayerExchangeLog) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerExchangeLog.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerExchangeLog proto.InternalMessageInfo

func (m *PlayerExchangeLog) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerExchangeLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerExchangeLog) GetPlayerAccount() string {
	if m != nil && m.PlayerAccount != nil {
		return *m.PlayerAccount
	}
	return ""
}

func (m *PlayerExchangeLog) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *PlayerExchangeLog) GetReceiver() string {
	if m != nil && m.Receiver != nil {
		return *m.Receiver
	}
	return ""
}

func (m *PlayerExchangeLog) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *PlayerExchangeLog) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *PlayerExchangeLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PlayerExchangeLog) GetDeliveryTime() int64 {
	if m != nil && m.DeliveryTime != nil {
		return *m.DeliveryTime
	}
	return 0
}

func (m *PlayerExchangeLog) GetOrderId() string {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return ""
}

func (m *PlayerExchangeLog) GetBoxDrawPrice() int64 {
	if m != nil && m.BoxDrawPrice != nil {
		return *m.BoxDrawPrice
	}
	return 0
}

func (m *PlayerExchangeLog) GetWishBoxItem() int64 {
	if m != nil && m.WishBoxItem != nil {
		return *m.WishBoxItem
	}
	return 0
}

func (m *PlayerExchangeLog) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

func (m *PlayerExchangeLog) GetCompany() string {
	if m != nil && m.Company != nil {
		return *m.Company
	}
	return ""
}

func (m *PlayerExchangeLog) GetCompanyCode() string {
	if m != nil && m.CompanyCode != nil {
		return *m.CompanyCode
	}
	return ""
}

func (m *PlayerExchangeLog) GetOdd() string {
	if m != nil && m.Odd != nil {
		return *m.Odd
	}
	return ""
}

func (m *PlayerExchangeLog) GetWishBoxId() int64 {
	if m != nil && m.WishBoxId != nil {
		return *m.WishBoxId
	}
	return 0
}

func (m *PlayerExchangeLog) GetProductId() int64 {
	if m != nil && m.ProductId != nil {
		return *m.ProductId
	}
	return 0
}

func (m *PlayerExchangeLog) GetProductName() string {
	if m != nil && m.ProductName != nil {
		return *m.ProductName
	}
	return ""
}

func (m *PlayerExchangeLog) GetProductIcon() string {
	if m != nil && m.ProductIcon != nil {
		return *m.ProductIcon
	}
	return ""
}

func (m *PlayerExchangeLog) GetProductPrice() int64 {
	if m != nil && m.ProductPrice != nil {
		return *m.ProductPrice
	}
	return 0
}

func (m *PlayerExchangeLog) GetProductDiamond() int64 {
	if m != nil && m.ProductDiamond != nil {
		return *m.ProductDiamond
	}
	return 0
}

func (m *PlayerExchangeLog) GetPlayerItemId() int64 {
	if m != nil && m.PlayerItemId != nil {
		return *m.PlayerItemId
	}
	return 0
}

func (m *PlayerExchangeLog) GetUserId() int64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *PlayerExchangeLog) GetPostage() int64 {
	if m != nil && m.Postage != nil {
		return *m.Postage
	}
	return 0
}

func (m *PlayerExchangeLog) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *PlayerExchangeLog) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *PlayerExchangeLog) GetGiveType() int64 {
	if m != nil && m.GiveType != nil {
		return *m.GiveType
	}
	return 0
}

//玩家盲盒商品兑换记录
type PlayerExchangeItem struct {
	BoxDrawPrice         *int64   `protobuf:"varint,14,opt,name=BoxDrawPrice" json:"BoxDrawPrice,omitempty" bson:"BoxDrawPrice,omitempty"`
	WishBoxItem          *int64   `protobuf:"varint,15,opt,name=WishBoxItem" json:"WishBoxItem,omitempty" bson:"WishBoxItem,omitempty"`
	WishBoxId            *int64   `protobuf:"varint,30,opt,name=WishBoxId" json:"WishBoxId,omitempty" bson:"WishBoxId,omitempty"`
	ProductId            *int64   `protobuf:"varint,32,opt,name=ProductId" json:"ProductId,omitempty" bson:"ProductId,omitempty"`
	Style                *int32   `protobuf:"varint,33,opt,name=Style" json:"Style,omitempty" bson:"Style,omitempty"`
	SaleStatus           *int32   `protobuf:"varint,35,opt,name=SaleStatus" json:"SaleStatus,omitempty" bson:"SaleStatus,omitempty"`
	PreHaveTime          *int64   `protobuf:"varint,36,opt,name=PreHaveTime" json:"PreHaveTime,omitempty" bson:"PreHaveTime,omitempty"`
	ProductName          *string  `protobuf:"bytes,37,opt,name=ProductName" json:"ProductName,omitempty" bson:"ProductName,omitempty"`
	ProductIcon          *string  `protobuf:"bytes,38,opt,name=ProductIcon" json:"ProductIcon,omitempty" bson:"ProductIcon,omitempty"`
	ProductPrice         *int64   `protobuf:"varint,39,opt,name=ProductPrice" json:"ProductPrice,omitempty" bson:"ProductPrice,omitempty"`
	WinTime              *int64   `protobuf:"varint,40,opt,name=WinTime" json:"WinTime,omitempty" bson:"WinTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerExchangeItem) Reset()         { *m = PlayerExchangeItem{} }
func (m *PlayerExchangeItem) String() string { return proto.CompactTextString(m) }
func (*PlayerExchangeItem) ProtoMessage()    {}
func (*PlayerExchangeItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{14}
}
func (m *PlayerExchangeItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerExchangeItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerExchangeItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerExchangeItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerExchangeItem.Merge(m, src)
}
func (m *PlayerExchangeItem) XXX_Size() int {
	return m.Size()
}
func (m *PlayerExchangeItem) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerExchangeItem.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerExchangeItem proto.InternalMessageInfo

func (m *PlayerExchangeItem) GetBoxDrawPrice() int64 {
	if m != nil && m.BoxDrawPrice != nil {
		return *m.BoxDrawPrice
	}
	return 0
}

func (m *PlayerExchangeItem) GetWishBoxItem() int64 {
	if m != nil && m.WishBoxItem != nil {
		return *m.WishBoxItem
	}
	return 0
}

func (m *PlayerExchangeItem) GetWishBoxId() int64 {
	if m != nil && m.WishBoxId != nil {
		return *m.WishBoxId
	}
	return 0
}

func (m *PlayerExchangeItem) GetProductId() int64 {
	if m != nil && m.ProductId != nil {
		return *m.ProductId
	}
	return 0
}

func (m *PlayerExchangeItem) GetStyle() int32 {
	if m != nil && m.Style != nil {
		return *m.Style
	}
	return 0
}

func (m *PlayerExchangeItem) GetSaleStatus() int32 {
	if m != nil && m.SaleStatus != nil {
		return *m.SaleStatus
	}
	return 0
}

func (m *PlayerExchangeItem) GetPreHaveTime() int64 {
	if m != nil && m.PreHaveTime != nil {
		return *m.PreHaveTime
	}
	return 0
}

func (m *PlayerExchangeItem) GetProductName() string {
	if m != nil && m.ProductName != nil {
		return *m.ProductName
	}
	return ""
}

func (m *PlayerExchangeItem) GetProductIcon() string {
	if m != nil && m.ProductIcon != nil {
		return *m.ProductIcon
	}
	return ""
}

func (m *PlayerExchangeItem) GetProductPrice() int64 {
	if m != nil && m.ProductPrice != nil {
		return *m.ProductPrice
	}
	return 0
}

func (m *PlayerExchangeItem) GetWinTime() int64 {
	if m != nil && m.WinTime != nil {
		return *m.WinTime
	}
	return 0
}

// 回收订单
type WishRecycleOrder struct {
	Id                   *int64             `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	RecycleTime          *int64             `protobuf:"varint,5,opt,name=RecycleTime" json:"RecycleTime,omitempty" bson:"RecycleTime,omitempty"`
	UserAccount          *string            `protobuf:"bytes,6,opt,name=UserAccount" json:"UserAccount,omitempty" bson:"UserAccount,omitempty"`
	PlayerId             *int64             `protobuf:"varint,7,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	UserId               *int64             `protobuf:"varint,11,opt,name=UserId" json:"UserId,omitempty" bson:"UserId,omitempty"`
	Type                 *int32             `protobuf:"varint,12,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	Channel              *int32             `protobuf:"varint,13,opt,name=Channel" json:"Channel,omitempty" bson:"Channel,omitempty"`
	BankCardId           *string            `protobuf:"bytes,21,opt,name=BankCardId" json:"BankCardId,omitempty" bson:"BankCardId,omitempty"`
	RecycleItemList      []*WishRecycleItem `protobuf:"bytes,35,rep,name=RecycleItemList" json:"RecycleItemList,omitempty" bson:"RecycleItemList,omitempty"`
	Status               *int32             `protobuf:"varint,40,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	InitTime             *int64             `protobuf:"varint,41,opt,name=InitTime" json:"InitTime,omitempty" bson:"InitTime,omitempty"`
	RecyclePriceTotal    *int64             `protobuf:"varint,44,opt,name=RecyclePriceTotal" json:"RecyclePriceTotal,omitempty" bson:"RecyclePriceTotal,omitempty"`
	ProductPriceTotal    *int64             `protobuf:"varint,45,opt,name=ProductPriceTotal" json:"ProductPriceTotal,omitempty" bson:"ProductPriceTotal,omitempty"`
	RecycleDiamond       *int64             `protobuf:"varint,46,opt,name=RecycleDiamond" json:"RecycleDiamond,omitempty" bson:"RecycleDiamond,omitempty"`
	RecycleNote          *int32             `protobuf:"varint,47,opt,name=RecycleNote" json:"RecycleNote,omitempty" bson:"RecycleNote,omitempty"`
	RefusalNote          *string            `protobuf:"bytes,48,opt,name=RefusalNote" json:"RefusalNote,omitempty" bson:"RefusalNote,omitempty"`
	Remarks              *string            `protobuf:"bytes,49,opt,name=Remarks" json:"Remarks,omitempty" bson:"Remarks,omitempty"`
	UpdateTime           *int64             `protobuf:"varint,50,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	PaymentOrderId       *string            `protobuf:"bytes,51,opt,name=PaymentOrderId" json:"PaymentOrderId,omitempty" bson:"PaymentOrderId,omitempty"`
	Operator             *string            `protobuf:"bytes,52,opt,name=Operator" json:"Operator,omitempty" bson:"Operator,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-" bson:"-"`
	XXX_unrecognized     []byte             `json:"-" bson:"-"`
	XXX_sizecache        int32              `json:"-" bson:"-"`
}

func (m *WishRecycleOrder) Reset()         { *m = WishRecycleOrder{} }
func (m *WishRecycleOrder) String() string { return proto.CompactTextString(m) }
func (*WishRecycleOrder) ProtoMessage()    {}
func (*WishRecycleOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{15}
}
func (m *WishRecycleOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishRecycleOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishRecycleOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishRecycleOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishRecycleOrder.Merge(m, src)
}
func (m *WishRecycleOrder) XXX_Size() int {
	return m.Size()
}
func (m *WishRecycleOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_WishRecycleOrder.DiscardUnknown(m)
}

var xxx_messageInfo_WishRecycleOrder proto.InternalMessageInfo

func (m *WishRecycleOrder) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishRecycleOrder) GetRecycleTime() int64 {
	if m != nil && m.RecycleTime != nil {
		return *m.RecycleTime
	}
	return 0
}

func (m *WishRecycleOrder) GetUserAccount() string {
	if m != nil && m.UserAccount != nil {
		return *m.UserAccount
	}
	return ""
}

func (m *WishRecycleOrder) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *WishRecycleOrder) GetUserId() int64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *WishRecycleOrder) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *WishRecycleOrder) GetChannel() int32 {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return 0
}

func (m *WishRecycleOrder) GetBankCardId() string {
	if m != nil && m.BankCardId != nil {
		return *m.BankCardId
	}
	return ""
}

func (m *WishRecycleOrder) GetRecycleItemList() []*WishRecycleItem {
	if m != nil {
		return m.RecycleItemList
	}
	return nil
}

func (m *WishRecycleOrder) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *WishRecycleOrder) GetInitTime() int64 {
	if m != nil && m.InitTime != nil {
		return *m.InitTime
	}
	return 0
}

func (m *WishRecycleOrder) GetRecyclePriceTotal() int64 {
	if m != nil && m.RecyclePriceTotal != nil {
		return *m.RecyclePriceTotal
	}
	return 0
}

func (m *WishRecycleOrder) GetProductPriceTotal() int64 {
	if m != nil && m.ProductPriceTotal != nil {
		return *m.ProductPriceTotal
	}
	return 0
}

func (m *WishRecycleOrder) GetRecycleDiamond() int64 {
	if m != nil && m.RecycleDiamond != nil {
		return *m.RecycleDiamond
	}
	return 0
}

func (m *WishRecycleOrder) GetRecycleNote() int32 {
	if m != nil && m.RecycleNote != nil {
		return *m.RecycleNote
	}
	return 0
}

func (m *WishRecycleOrder) GetRefusalNote() string {
	if m != nil && m.RefusalNote != nil {
		return *m.RefusalNote
	}
	return ""
}

func (m *WishRecycleOrder) GetRemarks() string {
	if m != nil && m.Remarks != nil {
		return *m.Remarks
	}
	return ""
}

func (m *WishRecycleOrder) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *WishRecycleOrder) GetPaymentOrderId() string {
	if m != nil && m.PaymentOrderId != nil {
		return *m.PaymentOrderId
	}
	return ""
}

func (m *WishRecycleOrder) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

// 回收物品
type WishRecycleItem struct {
	BoxDrawPrice   *int64 `protobuf:"varint,3,opt,name=BoxDrawPrice" json:"BoxDrawPrice,omitempty" bson:"BoxDrawPrice,omitempty"`
	RecyclePrice   *int64 `protobuf:"varint,4,opt,name=RecyclePrice" json:"RecyclePrice,omitempty" bson:"RecyclePrice,omitempty"`
	RecycleDiamond *int64 `protobuf:"varint,5,opt,name=RecycleDiamond" json:"RecycleDiamond,omitempty" bson:"RecycleDiamond,omitempty"`
	WinTime        *int64 `protobuf:"varint,6,opt,name=WinTime" json:"WinTime,omitempty" bson:"WinTime,omitempty"`
	WishBoxId      *int64 `protobuf:"varint,13,opt,name=WishBoxId" json:"WishBoxId,omitempty" bson:"WishBoxId,omitempty"`
	ProductId      *int64 `protobuf:"varint,14,opt,name=ProductId" json:"ProductId,omitempty" bson:"ProductId,omitempty"`
	Style          *int32 `protobuf:"varint,15,opt,name=Style" json:"Style,omitempty" bson:"Style,omitempty"`
	//    optional int32 SaleStatus =16; //上下架状态 0-下架 1-上架
	//    optional int64 PreHaveTime = 17; // 预计到货时间
	ProductName          *string  `protobuf:"bytes,18,opt,name=ProductName" json:"ProductName,omitempty" bson:"ProductName,omitempty"`
	ProductIcon          *string  `protobuf:"bytes,19,opt,name=ProductIcon" json:"ProductIcon,omitempty" bson:"ProductIcon,omitempty"`
	PlayerItemId         *int64   `protobuf:"varint,20,opt,name=PlayerItemId" json:"PlayerItemId,omitempty" bson:"PlayerItemId,omitempty"`
	WishBoxItemId        *int64   `protobuf:"varint,30,opt,name=WishBoxItemId" json:"WishBoxItemId,omitempty" bson:"WishBoxItemId,omitempty"`
	ProductPrice         *int64   `protobuf:"varint,31,opt,name=ProductPrice" json:"ProductPrice,omitempty" bson:"ProductPrice,omitempty"`
	ProductDiamond       *int64   `protobuf:"varint,40,opt,name=ProductDiamond" json:"ProductDiamond,omitempty" bson:"ProductDiamond,omitempty"`
	GiveType             *int64   `protobuf:"varint,41,opt,name=GiveType" json:"GiveType,omitempty" bson:"GiveType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishRecycleItem) Reset()         { *m = WishRecycleItem{} }
func (m *WishRecycleItem) String() string { return proto.CompactTextString(m) }
func (*WishRecycleItem) ProtoMessage()    {}
func (*WishRecycleItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{16}
}
func (m *WishRecycleItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishRecycleItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishRecycleItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishRecycleItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishRecycleItem.Merge(m, src)
}
func (m *WishRecycleItem) XXX_Size() int {
	return m.Size()
}
func (m *WishRecycleItem) XXX_DiscardUnknown() {
	xxx_messageInfo_WishRecycleItem.DiscardUnknown(m)
}

var xxx_messageInfo_WishRecycleItem proto.InternalMessageInfo

func (m *WishRecycleItem) GetBoxDrawPrice() int64 {
	if m != nil && m.BoxDrawPrice != nil {
		return *m.BoxDrawPrice
	}
	return 0
}

func (m *WishRecycleItem) GetRecyclePrice() int64 {
	if m != nil && m.RecyclePrice != nil {
		return *m.RecyclePrice
	}
	return 0
}

func (m *WishRecycleItem) GetRecycleDiamond() int64 {
	if m != nil && m.RecycleDiamond != nil {
		return *m.RecycleDiamond
	}
	return 0
}

func (m *WishRecycleItem) GetWinTime() int64 {
	if m != nil && m.WinTime != nil {
		return *m.WinTime
	}
	return 0
}

func (m *WishRecycleItem) GetWishBoxId() int64 {
	if m != nil && m.WishBoxId != nil {
		return *m.WishBoxId
	}
	return 0
}

func (m *WishRecycleItem) GetProductId() int64 {
	if m != nil && m.ProductId != nil {
		return *m.ProductId
	}
	return 0
}

func (m *WishRecycleItem) GetStyle() int32 {
	if m != nil && m.Style != nil {
		return *m.Style
	}
	return 0
}

func (m *WishRecycleItem) GetProductName() string {
	if m != nil && m.ProductName != nil {
		return *m.ProductName
	}
	return ""
}

func (m *WishRecycleItem) GetProductIcon() string {
	if m != nil && m.ProductIcon != nil {
		return *m.ProductIcon
	}
	return ""
}

func (m *WishRecycleItem) GetPlayerItemId() int64 {
	if m != nil && m.PlayerItemId != nil {
		return *m.PlayerItemId
	}
	return 0
}

func (m *WishRecycleItem) GetWishBoxItemId() int64 {
	if m != nil && m.WishBoxItemId != nil {
		return *m.WishBoxItemId
	}
	return 0
}

func (m *WishRecycleItem) GetProductPrice() int64 {
	if m != nil && m.ProductPrice != nil {
		return *m.ProductPrice
	}
	return 0
}

func (m *WishRecycleItem) GetProductDiamond() int64 {
	if m != nil && m.ProductDiamond != nil {
		return *m.ProductDiamond
	}
	return 0
}

func (m *WishRecycleItem) GetGiveType() int64 {
	if m != nil && m.GiveType != nil {
		return *m.GiveType
	}
	return 0
}

//玩家收藏列表
type PlayerWishCollection struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	WishBoxId            *int64   `protobuf:"varint,3,opt,name=WishBoxId" json:"WishBoxId,omitempty" bson:"WishBoxId,omitempty"`
	CreateTime           *int64   `protobuf:"varint,4,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerWishCollection) Reset()         { *m = PlayerWishCollection{} }
func (m *PlayerWishCollection) String() string { return proto.CompactTextString(m) }
func (*PlayerWishCollection) ProtoMessage()    {}
func (*PlayerWishCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{17}
}
func (m *PlayerWishCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerWishCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerWishCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerWishCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerWishCollection.Merge(m, src)
}
func (m *PlayerWishCollection) XXX_Size() int {
	return m.Size()
}
func (m *PlayerWishCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerWishCollection.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerWishCollection proto.InternalMessageInfo

func (m *PlayerWishCollection) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerWishCollection) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerWishCollection) GetWishBoxId() int64 {
	if m != nil && m.WishBoxId != nil {
		return *m.WishBoxId
	}
	return 0
}

func (m *PlayerWishCollection) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

// 榜单,总榜top10     wish_top_log
type WishTopLog struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	HeadIcon             *string  `protobuf:"bytes,3,opt,name=HeadIcon" json:"HeadIcon,omitempty" bson:"HeadIcon,omitempty"`
	NickName             *string  `protobuf:"bytes,4,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	WishNum              *int64   `protobuf:"varint,5,opt,name=WishNum" json:"WishNum,omitempty" bson:"WishNum,omitempty"`
	CoinNum              *int64   `protobuf:"varint,6,opt,name=CoinNum" json:"CoinNum,omitempty" bson:"CoinNum,omitempty"`
	ThatDayTime          *int64   `protobuf:"varint,7,opt,name=ThatDayTime" json:"ThatDayTime,omitempty" bson:"ThatDayTime,omitempty"`
	CreateTime           *int64   `protobuf:"varint,8,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishTopLog) Reset()         { *m = WishTopLog{} }
func (m *WishTopLog) String() string { return proto.CompactTextString(m) }
func (*WishTopLog) ProtoMessage()    {}
func (*WishTopLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{18}
}
func (m *WishTopLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishTopLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishTopLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishTopLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishTopLog.Merge(m, src)
}
func (m *WishTopLog) XXX_Size() int {
	return m.Size()
}
func (m *WishTopLog) XXX_DiscardUnknown() {
	xxx_messageInfo_WishTopLog.DiscardUnknown(m)
}

var xxx_messageInfo_WishTopLog proto.InternalMessageInfo

func (m *WishTopLog) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishTopLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *WishTopLog) GetHeadIcon() string {
	if m != nil && m.HeadIcon != nil {
		return *m.HeadIcon
	}
	return ""
}

func (m *WishTopLog) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *WishTopLog) GetWishNum() int64 {
	if m != nil && m.WishNum != nil {
		return *m.WishNum
	}
	return 0
}

func (m *WishTopLog) GetCoinNum() int64 {
	if m != nil && m.CoinNum != nil {
		return *m.CoinNum
	}
	return 0
}

func (m *WishTopLog) GetThatDayTime() int64 {
	if m != nil && m.ThatDayTime != nil {
		return *m.ThatDayTime
	}
	return 0
}

func (m *WishTopLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

// 守护者获得的钻石流水 wish_guardian_diamond_log
type WishGuardianDiamondLog struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	BoxId                *int64   `protobuf:"varint,10,opt,name=BoxId" json:"BoxId,omitempty" bson:"BoxId,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	HeadIcon             *string  `protobuf:"bytes,3,opt,name=HeadIcon" json:"HeadIcon,omitempty" bson:"HeadIcon,omitempty"`
	NickName             *string  `protobuf:"bytes,4,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	WishNum              *int64   `protobuf:"varint,5,opt,name=WishNum" json:"WishNum,omitempty" bson:"WishNum,omitempty"`
	CoinNum              *int64   `protobuf:"varint,6,opt,name=CoinNum" json:"CoinNum,omitempty" bson:"CoinNum,omitempty"`
	CreateTime           *int64   `protobuf:"varint,8,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	TotalNum             *int64   `protobuf:"varint,11,opt,name=TotalNum" json:"TotalNum,omitempty" bson:"TotalNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishGuardianDiamondLog) Reset()         { *m = WishGuardianDiamondLog{} }
func (m *WishGuardianDiamondLog) String() string { return proto.CompactTextString(m) }
func (*WishGuardianDiamondLog) ProtoMessage()    {}
func (*WishGuardianDiamondLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{19}
}
func (m *WishGuardianDiamondLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishGuardianDiamondLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishGuardianDiamondLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishGuardianDiamondLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishGuardianDiamondLog.Merge(m, src)
}
func (m *WishGuardianDiamondLog) XXX_Size() int {
	return m.Size()
}
func (m *WishGuardianDiamondLog) XXX_DiscardUnknown() {
	xxx_messageInfo_WishGuardianDiamondLog.DiscardUnknown(m)
}

var xxx_messageInfo_WishGuardianDiamondLog proto.InternalMessageInfo

func (m *WishGuardianDiamondLog) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishGuardianDiamondLog) GetBoxId() int64 {
	if m != nil && m.BoxId != nil {
		return *m.BoxId
	}
	return 0
}

func (m *WishGuardianDiamondLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *WishGuardianDiamondLog) GetHeadIcon() string {
	if m != nil && m.HeadIcon != nil {
		return *m.HeadIcon
	}
	return ""
}

func (m *WishGuardianDiamondLog) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *WishGuardianDiamondLog) GetWishNum() int64 {
	if m != nil && m.WishNum != nil {
		return *m.WishNum
	}
	return 0
}

func (m *WishGuardianDiamondLog) GetCoinNum() int64 {
	if m != nil && m.CoinNum != nil {
		return *m.CoinNum
	}
	return 0
}

func (m *WishGuardianDiamondLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishGuardianDiamondLog) GetTotalNum() int64 {
	if m != nil && m.TotalNum != nil {
		return *m.TotalNum
	}
	return 0
}

//榜单,总榜top10  wish_guardian_top_log
type WishGuardianTopLog struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	WishNum              *int64   `protobuf:"varint,5,opt,name=WishNum" json:"WishNum,omitempty" bson:"WishNum,omitempty"`
	CoinNum              *int64   `protobuf:"varint,6,opt,name=CoinNum" json:"CoinNum,omitempty" bson:"CoinNum,omitempty"`
	CreateTime           *int64   `protobuf:"varint,8,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	UpdateCoinTime       *int64   `protobuf:"varint,9,opt,name=UpdateCoinTime" json:"UpdateCoinTime,omitempty" bson:"UpdateCoinTime,omitempty"`
	UpdateWishTime       *int64   `protobuf:"varint,10,opt,name=UpdateWishTime" json:"UpdateWishTime,omitempty" bson:"UpdateWishTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishGuardianTopLog) Reset()         { *m = WishGuardianTopLog{} }
func (m *WishGuardianTopLog) String() string { return proto.CompactTextString(m) }
func (*WishGuardianTopLog) ProtoMessage()    {}
func (*WishGuardianTopLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{20}
}
func (m *WishGuardianTopLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishGuardianTopLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishGuardianTopLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishGuardianTopLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishGuardianTopLog.Merge(m, src)
}
func (m *WishGuardianTopLog) XXX_Size() int {
	return m.Size()
}
func (m *WishGuardianTopLog) XXX_DiscardUnknown() {
	xxx_messageInfo_WishGuardianTopLog.DiscardUnknown(m)
}

var xxx_messageInfo_WishGuardianTopLog proto.InternalMessageInfo

func (m *WishGuardianTopLog) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishGuardianTopLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *WishGuardianTopLog) GetWishNum() int64 {
	if m != nil && m.WishNum != nil {
		return *m.WishNum
	}
	return 0
}

func (m *WishGuardianTopLog) GetCoinNum() int64 {
	if m != nil && m.CoinNum != nil {
		return *m.CoinNum
	}
	return 0
}

func (m *WishGuardianTopLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishGuardianTopLog) GetUpdateCoinTime() int64 {
	if m != nil && m.UpdateCoinTime != nil {
		return *m.UpdateCoinTime
	}
	return 0
}

func (m *WishGuardianTopLog) GetUpdateWishTime() int64 {
	if m != nil && m.UpdateWishTime != nil {
		return *m.UpdateWishTime
	}
	return 0
}

//  table:wish_pool 水池
type WishPool struct {
	Id                   *int64          `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	PoolLimit            *int64          `protobuf:"varint,2,opt,name=PoolLimit" json:"PoolLimit,omitempty" bson:"PoolLimit,omitempty"`
	InitialValue         *int64          `protobuf:"varint,3,opt,name=InitialValue" json:"InitialValue,omitempty" bson:"InitialValue,omitempty"`
	IncomeValue          *int64          `protobuf:"varint,4,opt,name=IncomeValue" json:"IncomeValue,omitempty" bson:"IncomeValue,omitempty"`
	Recycle              *int64          `protobuf:"varint,5,opt,name=Recycle" json:"Recycle,omitempty" bson:"Recycle,omitempty"`
	Commission           *int64          `protobuf:"varint,6,opt,name=Commission" json:"Commission,omitempty" bson:"Commission,omitempty"`
	StartAward           *int64          `protobuf:"varint,7,opt,name=StartAward" json:"StartAward,omitempty" bson:"StartAward,omitempty"`
	CloseAward           *int64          `protobuf:"varint,8,opt,name=CloseAward" json:"CloseAward,omitempty" bson:"CloseAward,omitempty"`
	Name                 *string         `protobuf:"bytes,15,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	CreateTime           *int64          `protobuf:"varint,16,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	UpdateTime           *int64          `protobuf:"varint,17,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	ShowInitialValue     *int64          `protobuf:"varint,33,opt,name=ShowInitialValue" json:"ShowInitialValue,omitempty" bson:"ShowInitialValue,omitempty"`
	ShowRecycle          *int64          `protobuf:"varint,35,opt,name=ShowRecycle" json:"ShowRecycle,omitempty" bson:"ShowRecycle,omitempty"`
	ShowCommission       *int64          `protobuf:"varint,36,opt,name=ShowCommission" json:"ShowCommission,omitempty" bson:"ShowCommission,omitempty"`
	ShowStartAward       *int64          `protobuf:"varint,37,opt,name=ShowStartAward" json:"ShowStartAward,omitempty" bson:"ShowStartAward,omitempty"`
	ShowCloseAward       *int64          `protobuf:"varint,38,opt,name=ShowCloseAward" json:"ShowCloseAward,omitempty" bson:"ShowCloseAward,omitempty"`
	IsOpenAward          *bool           `protobuf:"varint,39,opt,name=IsOpenAward" json:"IsOpenAward,omitempty" bson:"IsOpenAward,omitempty"`
	IsDefault            *bool           `protobuf:"varint,40,opt,name=IsDefault" json:"IsDefault,omitempty" bson:"IsDefault,omitempty"`
	BigLoss              *WishPoolStatus `protobuf:"bytes,46,opt,name=BigLoss" json:"BigLoss,omitempty" bson:"BigLoss,omitempty"`
	SmallLoss            *WishPoolStatus `protobuf:"bytes,47,opt,name=SmallLoss" json:"SmallLoss,omitempty" bson:"SmallLoss,omitempty"`
	Common               *WishPoolStatus `protobuf:"bytes,48,opt,name=Common" json:"Common,omitempty" bson:"Common,omitempty"`
	BigWin               *WishPoolStatus `protobuf:"bytes,49,opt,name=BigWin" json:"BigWin,omitempty" bson:"BigWin,omitempty"`
	SmallWin             *WishPoolStatus `protobuf:"bytes,50,opt,name=SmallWin" json:"SmallWin,omitempty" bson:"SmallWin,omitempty"`
	LocalStatus          *int64          `protobuf:"varint,51,opt,name=LocalStatus" json:"LocalStatus,omitempty" bson:"LocalStatus,omitempty"`
	PoolConfigId         *int64          `protobuf:"varint,52,opt,name=PoolConfigId" json:"PoolConfigId,omitempty" bson:"PoolConfigId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-" bson:"-"`
	XXX_unrecognized     []byte          `json:"-" bson:"-"`
	XXX_sizecache        int32           `json:"-" bson:"-"`
}

func (m *WishPool) Reset()         { *m = WishPool{} }
func (m *WishPool) String() string { return proto.CompactTextString(m) }
func (*WishPool) ProtoMessage()    {}
func (*WishPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{21}
}
func (m *WishPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishPool.Merge(m, src)
}
func (m *WishPool) XXX_Size() int {
	return m.Size()
}
func (m *WishPool) XXX_DiscardUnknown() {
	xxx_messageInfo_WishPool.DiscardUnknown(m)
}

var xxx_messageInfo_WishPool proto.InternalMessageInfo

func (m *WishPool) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishPool) GetPoolLimit() int64 {
	if m != nil && m.PoolLimit != nil {
		return *m.PoolLimit
	}
	return 0
}

func (m *WishPool) GetInitialValue() int64 {
	if m != nil && m.InitialValue != nil {
		return *m.InitialValue
	}
	return 0
}

func (m *WishPool) GetIncomeValue() int64 {
	if m != nil && m.IncomeValue != nil {
		return *m.IncomeValue
	}
	return 0
}

func (m *WishPool) GetRecycle() int64 {
	if m != nil && m.Recycle != nil {
		return *m.Recycle
	}
	return 0
}

func (m *WishPool) GetCommission() int64 {
	if m != nil && m.Commission != nil {
		return *m.Commission
	}
	return 0
}

func (m *WishPool) GetStartAward() int64 {
	if m != nil && m.StartAward != nil {
		return *m.StartAward
	}
	return 0
}

func (m *WishPool) GetCloseAward() int64 {
	if m != nil && m.CloseAward != nil {
		return *m.CloseAward
	}
	return 0
}

func (m *WishPool) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *WishPool) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishPool) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *WishPool) GetShowInitialValue() int64 {
	if m != nil && m.ShowInitialValue != nil {
		return *m.ShowInitialValue
	}
	return 0
}

func (m *WishPool) GetShowRecycle() int64 {
	if m != nil && m.ShowRecycle != nil {
		return *m.ShowRecycle
	}
	return 0
}

func (m *WishPool) GetShowCommission() int64 {
	if m != nil && m.ShowCommission != nil {
		return *m.ShowCommission
	}
	return 0
}

func (m *WishPool) GetShowStartAward() int64 {
	if m != nil && m.ShowStartAward != nil {
		return *m.ShowStartAward
	}
	return 0
}

func (m *WishPool) GetShowCloseAward() int64 {
	if m != nil && m.ShowCloseAward != nil {
		return *m.ShowCloseAward
	}
	return 0
}

func (m *WishPool) GetIsOpenAward() bool {
	if m != nil && m.IsOpenAward != nil {
		return *m.IsOpenAward
	}
	return false
}

func (m *WishPool) GetIsDefault() bool {
	if m != nil && m.IsDefault != nil {
		return *m.IsDefault
	}
	return false
}

func (m *WishPool) GetBigLoss() *WishPoolStatus {
	if m != nil {
		return m.BigLoss
	}
	return nil
}

func (m *WishPool) GetSmallLoss() *WishPoolStatus {
	if m != nil {
		return m.SmallLoss
	}
	return nil
}

func (m *WishPool) GetCommon() *WishPoolStatus {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *WishPool) GetBigWin() *WishPoolStatus {
	if m != nil {
		return m.BigWin
	}
	return nil
}

func (m *WishPool) GetSmallWin() *WishPoolStatus {
	if m != nil {
		return m.SmallWin
	}
	return nil
}

func (m *WishPool) GetLocalStatus() int64 {
	if m != nil && m.LocalStatus != nil {
		return *m.LocalStatus
	}
	return 0
}

func (m *WishPool) GetPoolConfigId() int64 {
	if m != nil && m.PoolConfigId != nil {
		return *m.PoolConfigId
	}
	return 0
}

//  table:wish_pool_cfg 水池
type WishPoolCfg struct {
	Id                   *int64          `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	PoolLimit            *int64          `protobuf:"varint,2,opt,name=PoolLimit" json:"PoolLimit,omitempty" bson:"PoolLimit,omitempty"`
	InitialValue         *int64          `protobuf:"varint,3,opt,name=InitialValue" json:"InitialValue,omitempty" bson:"InitialValue,omitempty"`
	IncomeValue          *int64          `protobuf:"varint,4,opt,name=IncomeValue" json:"IncomeValue,omitempty" bson:"IncomeValue,omitempty"`
	Recycle              *int64          `protobuf:"varint,5,opt,name=Recycle" json:"Recycle,omitempty" bson:"Recycle,omitempty"`
	Commission           *int64          `protobuf:"varint,6,opt,name=Commission" json:"Commission,omitempty" bson:"Commission,omitempty"`
	StartAward           *int64          `protobuf:"varint,7,opt,name=StartAward" json:"StartAward,omitempty" bson:"StartAward,omitempty"`
	CloseAward           *int64          `protobuf:"varint,8,opt,name=CloseAward" json:"CloseAward,omitempty" bson:"CloseAward,omitempty"`
	Name                 *string         `protobuf:"bytes,15,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	CreateTime           *int64          `protobuf:"varint,16,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	UpdateTime           *int64          `protobuf:"varint,17,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	ShowInitialValue     *int64          `protobuf:"varint,33,opt,name=ShowInitialValue" json:"ShowInitialValue,omitempty" bson:"ShowInitialValue,omitempty"`
	ShowRecycle          *int64          `protobuf:"varint,35,opt,name=ShowRecycle" json:"ShowRecycle,omitempty" bson:"ShowRecycle,omitempty"`
	ShowCommission       *int64          `protobuf:"varint,36,opt,name=ShowCommission" json:"ShowCommission,omitempty" bson:"ShowCommission,omitempty"`
	ShowStartAward       *int64          `protobuf:"varint,37,opt,name=ShowStartAward" json:"ShowStartAward,omitempty" bson:"ShowStartAward,omitempty"`
	ShowCloseAward       *int64          `protobuf:"varint,38,opt,name=ShowCloseAward" json:"ShowCloseAward,omitempty" bson:"ShowCloseAward,omitempty"`
	IsOpenAward          *bool           `protobuf:"varint,39,opt,name=IsOpenAward" json:"IsOpenAward,omitempty" bson:"IsOpenAward,omitempty"`
	IsDefault            *bool           `protobuf:"varint,40,opt,name=IsDefault" json:"IsDefault,omitempty" bson:"IsDefault,omitempty"`
	BigLoss              *WishPoolStatus `protobuf:"bytes,46,opt,name=BigLoss" json:"BigLoss,omitempty" bson:"BigLoss,omitempty"`
	SmallLoss            *WishPoolStatus `protobuf:"bytes,47,opt,name=SmallLoss" json:"SmallLoss,omitempty" bson:"SmallLoss,omitempty"`
	Common               *WishPoolStatus `protobuf:"bytes,48,opt,name=Common" json:"Common,omitempty" bson:"Common,omitempty"`
	BigWin               *WishPoolStatus `protobuf:"bytes,49,opt,name=BigWin" json:"BigWin,omitempty" bson:"BigWin,omitempty"`
	SmallWin             *WishPoolStatus `protobuf:"bytes,50,opt,name=SmallWin" json:"SmallWin,omitempty" bson:"SmallWin,omitempty"`
	WishPoolIds          *int64          `protobuf:"varint,52,opt,name=WishPoolIds" json:"WishPoolIds,omitempty" bson:"WishPoolIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-" bson:"-"`
	XXX_unrecognized     []byte          `json:"-" bson:"-"`
	XXX_sizecache        int32           `json:"-" bson:"-"`
}

func (m *WishPoolCfg) Reset()         { *m = WishPoolCfg{} }
func (m *WishPoolCfg) String() string { return proto.CompactTextString(m) }
func (*WishPoolCfg) ProtoMessage()    {}
func (*WishPoolCfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{22}
}
func (m *WishPoolCfg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishPoolCfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishPoolCfg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishPoolCfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishPoolCfg.Merge(m, src)
}
func (m *WishPoolCfg) XXX_Size() int {
	return m.Size()
}
func (m *WishPoolCfg) XXX_DiscardUnknown() {
	xxx_messageInfo_WishPoolCfg.DiscardUnknown(m)
}

var xxx_messageInfo_WishPoolCfg proto.InternalMessageInfo

func (m *WishPoolCfg) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishPoolCfg) GetPoolLimit() int64 {
	if m != nil && m.PoolLimit != nil {
		return *m.PoolLimit
	}
	return 0
}

func (m *WishPoolCfg) GetInitialValue() int64 {
	if m != nil && m.InitialValue != nil {
		return *m.InitialValue
	}
	return 0
}

func (m *WishPoolCfg) GetIncomeValue() int64 {
	if m != nil && m.IncomeValue != nil {
		return *m.IncomeValue
	}
	return 0
}

func (m *WishPoolCfg) GetRecycle() int64 {
	if m != nil && m.Recycle != nil {
		return *m.Recycle
	}
	return 0
}

func (m *WishPoolCfg) GetCommission() int64 {
	if m != nil && m.Commission != nil {
		return *m.Commission
	}
	return 0
}

func (m *WishPoolCfg) GetStartAward() int64 {
	if m != nil && m.StartAward != nil {
		return *m.StartAward
	}
	return 0
}

func (m *WishPoolCfg) GetCloseAward() int64 {
	if m != nil && m.CloseAward != nil {
		return *m.CloseAward
	}
	return 0
}

func (m *WishPoolCfg) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *WishPoolCfg) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishPoolCfg) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *WishPoolCfg) GetShowInitialValue() int64 {
	if m != nil && m.ShowInitialValue != nil {
		return *m.ShowInitialValue
	}
	return 0
}

func (m *WishPoolCfg) GetShowRecycle() int64 {
	if m != nil && m.ShowRecycle != nil {
		return *m.ShowRecycle
	}
	return 0
}

func (m *WishPoolCfg) GetShowCommission() int64 {
	if m != nil && m.ShowCommission != nil {
		return *m.ShowCommission
	}
	return 0
}

func (m *WishPoolCfg) GetShowStartAward() int64 {
	if m != nil && m.ShowStartAward != nil {
		return *m.ShowStartAward
	}
	return 0
}

func (m *WishPoolCfg) GetShowCloseAward() int64 {
	if m != nil && m.ShowCloseAward != nil {
		return *m.ShowCloseAward
	}
	return 0
}

func (m *WishPoolCfg) GetIsOpenAward() bool {
	if m != nil && m.IsOpenAward != nil {
		return *m.IsOpenAward
	}
	return false
}

func (m *WishPoolCfg) GetIsDefault() bool {
	if m != nil && m.IsDefault != nil {
		return *m.IsDefault
	}
	return false
}

func (m *WishPoolCfg) GetBigLoss() *WishPoolStatus {
	if m != nil {
		return m.BigLoss
	}
	return nil
}

func (m *WishPoolCfg) GetSmallLoss() *WishPoolStatus {
	if m != nil {
		return m.SmallLoss
	}
	return nil
}

func (m *WishPoolCfg) GetCommon() *WishPoolStatus {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *WishPoolCfg) GetBigWin() *WishPoolStatus {
	if m != nil {
		return m.BigWin
	}
	return nil
}

func (m *WishPoolCfg) GetSmallWin() *WishPoolStatus {
	if m != nil {
		return m.SmallWin
	}
	return nil
}

func (m *WishPoolCfg) GetWishPoolIds() int64 {
	if m != nil && m.WishPoolIds != nil {
		return *m.WishPoolIds
	}
	return 0
}

//  水池状态
type WishPoolStatus struct {
	MaxValue             *int64   `protobuf:"varint,2,opt,name=MaxValue" json:"MaxValue,omitempty" bson:"MaxValue,omitempty"`
	MinValue             *int64   `protobuf:"varint,3,opt,name=MinValue" json:"MinValue,omitempty" bson:"MinValue,omitempty"`
	ShowMaxValue         *int64   `protobuf:"varint,12,opt,name=ShowMaxValue" json:"ShowMaxValue,omitempty" bson:"ShowMaxValue,omitempty"`
	ShowMinValue         *int64   `protobuf:"varint,13,opt,name=ShowMinValue" json:"ShowMinValue,omitempty" bson:"ShowMinValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishPoolStatus) Reset()         { *m = WishPoolStatus{} }
func (m *WishPoolStatus) String() string { return proto.CompactTextString(m) }
func (*WishPoolStatus) ProtoMessage()    {}
func (*WishPoolStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{23}
}
func (m *WishPoolStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishPoolStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishPoolStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishPoolStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishPoolStatus.Merge(m, src)
}
func (m *WishPoolStatus) XXX_Size() int {
	return m.Size()
}
func (m *WishPoolStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_WishPoolStatus.DiscardUnknown(m)
}

var xxx_messageInfo_WishPoolStatus proto.InternalMessageInfo

func (m *WishPoolStatus) GetMaxValue() int64 {
	if m != nil && m.MaxValue != nil {
		return *m.MaxValue
	}
	return 0
}

func (m *WishPoolStatus) GetMinValue() int64 {
	if m != nil && m.MinValue != nil {
		return *m.MinValue
	}
	return 0
}

func (m *WishPoolStatus) GetShowMaxValue() int64 {
	if m != nil && m.ShowMaxValue != nil {
		return *m.ShowMaxValue
	}
	return 0
}

func (m *WishPoolStatus) GetShowMinValue() int64 {
	if m != nil && m.ShowMinValue != nil {
		return *m.ShowMinValue
	}
	return 0
}

// 盲盒中奖配置      wish_box_item_win_cfg
type WishBoItemWinCfg struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	WishBoxId            *int64   `protobuf:"varint,2,opt,name=WishBoxId" json:"WishBoxId,omitempty" bson:"WishBoxId,omitempty"`
	WishItemId           *int64   `protobuf:"varint,3,opt,name=WishItemId" json:"WishItemId,omitempty" bson:"WishItemId,omitempty"`
	BigLoss              *int32   `protobuf:"varint,6,opt,name=BigLoss" json:"BigLoss,omitempty" bson:"BigLoss,omitempty"`
	SmallLoss            *int32   `protobuf:"varint,7,opt,name=SmallLoss" json:"SmallLoss,omitempty" bson:"SmallLoss,omitempty"`
	Common               *int32   `protobuf:"varint,8,opt,name=Common" json:"Common,omitempty" bson:"Common,omitempty"`
	BigWin               *int32   `protobuf:"varint,9,opt,name=BigWin" json:"BigWin,omitempty" bson:"BigWin,omitempty"`
	SmallWin             *int32   `protobuf:"varint,10,opt,name=SmallWin" json:"SmallWin,omitempty" bson:"SmallWin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishBoItemWinCfg) Reset()         { *m = WishBoItemWinCfg{} }
func (m *WishBoItemWinCfg) String() string { return proto.CompactTextString(m) }
func (*WishBoItemWinCfg) ProtoMessage()    {}
func (*WishBoItemWinCfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{24}
}
func (m *WishBoItemWinCfg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishBoItemWinCfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishBoItemWinCfg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishBoItemWinCfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishBoItemWinCfg.Merge(m, src)
}
func (m *WishBoItemWinCfg) XXX_Size() int {
	return m.Size()
}
func (m *WishBoItemWinCfg) XXX_DiscardUnknown() {
	xxx_messageInfo_WishBoItemWinCfg.DiscardUnknown(m)
}

var xxx_messageInfo_WishBoItemWinCfg proto.InternalMessageInfo

func (m *WishBoItemWinCfg) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishBoItemWinCfg) GetWishBoxId() int64 {
	if m != nil && m.WishBoxId != nil {
		return *m.WishBoxId
	}
	return 0
}

func (m *WishBoItemWinCfg) GetWishItemId() int64 {
	if m != nil && m.WishItemId != nil {
		return *m.WishItemId
	}
	return 0
}

func (m *WishBoItemWinCfg) GetBigLoss() int32 {
	if m != nil && m.BigLoss != nil {
		return *m.BigLoss
	}
	return 0
}

func (m *WishBoItemWinCfg) GetSmallLoss() int32 {
	if m != nil && m.SmallLoss != nil {
		return *m.SmallLoss
	}
	return 0
}

func (m *WishBoItemWinCfg) GetCommon() int32 {
	if m != nil && m.Common != nil {
		return *m.Common
	}
	return 0
}

func (m *WishBoItemWinCfg) GetBigWin() int32 {
	if m != nil && m.BigWin != nil {
		return *m.BigWin
	}
	return 0
}

func (m *WishBoItemWinCfg) GetSmallWin() int32 {
	if m != nil && m.SmallWin != nil {
		return *m.SmallWin
	}
	return 0
}

// 价格参数设置
type PriceSection struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	OneMin               *int32   `protobuf:"varint,2,opt,name=OneMin" json:"OneMin,omitempty" bson:"OneMin,omitempty"`
	OneMax               *int32   `protobuf:"varint,4,opt,name=OneMax" json:"OneMax,omitempty" bson:"OneMax,omitempty"`
	TwoMin               *int32   `protobuf:"varint,5,opt,name=TwoMin" json:"TwoMin,omitempty" bson:"TwoMin,omitempty"`
	TwoMax               *int32   `protobuf:"varint,6,opt,name=TwoMax" json:"TwoMax,omitempty" bson:"TwoMax,omitempty"`
	ThreeMin             *int32   `protobuf:"varint,7,opt,name=ThreeMin" json:"ThreeMin,omitempty" bson:"ThreeMin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PriceSection) Reset()         { *m = PriceSection{} }
func (m *PriceSection) String() string { return proto.CompactTextString(m) }
func (*PriceSection) ProtoMessage()    {}
func (*PriceSection) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{25}
}
func (m *PriceSection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceSection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceSection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriceSection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceSection.Merge(m, src)
}
func (m *PriceSection) XXX_Size() int {
	return m.Size()
}
func (m *PriceSection) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceSection.DiscardUnknown(m)
}

var xxx_messageInfo_PriceSection proto.InternalMessageInfo

func (m *PriceSection) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *PriceSection) GetOneMin() int32 {
	if m != nil && m.OneMin != nil {
		return *m.OneMin
	}
	return 0
}

func (m *PriceSection) GetOneMax() int32 {
	if m != nil && m.OneMax != nil {
		return *m.OneMax
	}
	return 0
}

func (m *PriceSection) GetTwoMin() int32 {
	if m != nil && m.TwoMin != nil {
		return *m.TwoMin
	}
	return 0
}

func (m *PriceSection) GetTwoMax() int32 {
	if m != nil && m.TwoMax != nil {
		return *m.TwoMax
	}
	return 0
}

func (m *PriceSection) GetThreeMin() int32 {
	if m != nil && m.ThreeMin != nil {
		return *m.ThreeMin
	}
	return 0
}

// 邮寄参数设置
type WishMailSection struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Postage1             *int32   `protobuf:"varint,2,opt,name=Postage1" json:"Postage1,omitempty" bson:"Postage1,omitempty"`
	Postage2             *int32   `protobuf:"varint,4,opt,name=Postage2" json:"Postage2,omitempty" bson:"Postage2,omitempty"`
	Postage3             *int32   `protobuf:"varint,5,opt,name=Postage3" json:"Postage3,omitempty" bson:"Postage3,omitempty"`
	RemoteAreaList       []string `protobuf:"bytes,10,rep,name=RemoteAreaList" json:"RemoteAreaList,omitempty" bson:"RemoteAreaList,omitempty"`
	FreeNumber           *int32   `protobuf:"varint,12,opt,name=FreeNumber" json:"FreeNumber,omitempty" bson:"FreeNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishMailSection) Reset()         { *m = WishMailSection{} }
func (m *WishMailSection) String() string { return proto.CompactTextString(m) }
func (*WishMailSection) ProtoMessage()    {}
func (*WishMailSection) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{26}
}
func (m *WishMailSection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishMailSection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishMailSection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishMailSection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishMailSection.Merge(m, src)
}
func (m *WishMailSection) XXX_Size() int {
	return m.Size()
}
func (m *WishMailSection) XXX_DiscardUnknown() {
	xxx_messageInfo_WishMailSection.DiscardUnknown(m)
}

var xxx_messageInfo_WishMailSection proto.InternalMessageInfo

func (m *WishMailSection) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *WishMailSection) GetPostage1() int32 {
	if m != nil && m.Postage1 != nil {
		return *m.Postage1
	}
	return 0
}

func (m *WishMailSection) GetPostage2() int32 {
	if m != nil && m.Postage2 != nil {
		return *m.Postage2
	}
	return 0
}

func (m *WishMailSection) GetPostage3() int32 {
	if m != nil && m.Postage3 != nil {
		return *m.Postage3
	}
	return 0
}

func (m *WishMailSection) GetRemoteAreaList() []string {
	if m != nil {
		return m.RemoteAreaList
	}
	return nil
}

func (m *WishMailSection) GetFreeNumber() int32 {
	if m != nil && m.FreeNumber != nil {
		return *m.FreeNumber
	}
	return 0
}

// 物品回收参数设置
type WishRecycleSection struct {
	Id          *string `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Platform    *int32  `protobuf:"varint,4,opt,name=Platform" json:"Platform,omitempty" bson:"Platform,omitempty"`
	DayTopCount *int32  `protobuf:"varint,6,opt,name=DayTopCount" json:"DayTopCount,omitempty" bson:"DayTopCount,omitempty"`
	// 新版
	// 回收公功能
	Player              *int32 `protobuf:"varint,9,opt,name=Player" json:"Player,omitempty" bson:"Player,omitempty"`
	Status              *bool  `protobuf:"varint,10,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	DayMoneyTopCount    *int32 `protobuf:"varint,11,opt,name=DayMoneyTopCount" json:"DayMoneyTopCount,omitempty" bson:"DayMoneyTopCount,omitempty"`
	DayMoneyTop         *int64 `protobuf:"varint,12,opt,name=DayMoneyTop" json:"DayMoneyTop,omitempty" bson:"DayMoneyTop,omitempty"`
	OrderThresholdMoney *int64 `protobuf:"varint,13,opt,name=OrderThresholdMoney" json:"OrderThresholdMoney,omitempty" bson:"OrderThresholdMoney,omitempty"`
	DayDiamondTopCount  *int32 `protobuf:"varint,15,opt,name=DayDiamondTopCount" json:"DayDiamondTopCount,omitempty" bson:"DayDiamondTopCount,omitempty"`
	DayDiamondTop       *int64 `protobuf:"varint,16,opt,name=DayDiamondTop" json:"DayDiamondTop,omitempty" bson:"DayDiamondTop,omitempty"`
	OrderThreshold      *int64 `protobuf:"varint,17,opt,name=OrderThreshold" json:"OrderThreshold,omitempty" bson:"OrderThreshold,omitempty"`
	// 回收支付设置
	FeeRate              *int32   `protobuf:"varint,22,opt,name=FeeRate" json:"FeeRate,omitempty" bson:"FeeRate,omitempty"`
	PlatformTax          *int64   `protobuf:"varint,25,opt,name=PlatformTax" json:"PlatformTax,omitempty" bson:"PlatformTax,omitempty"`
	RealTax              *int64   `protobuf:"varint,26,opt,name=RealTax" json:"RealTax,omitempty" bson:"RealTax,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishRecycleSection) Reset()         { *m = WishRecycleSection{} }
func (m *WishRecycleSection) String() string { return proto.CompactTextString(m) }
func (*WishRecycleSection) ProtoMessage()    {}
func (*WishRecycleSection) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{27}
}
func (m *WishRecycleSection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishRecycleSection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishRecycleSection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishRecycleSection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishRecycleSection.Merge(m, src)
}
func (m *WishRecycleSection) XXX_Size() int {
	return m.Size()
}
func (m *WishRecycleSection) XXX_DiscardUnknown() {
	xxx_messageInfo_WishRecycleSection.DiscardUnknown(m)
}

var xxx_messageInfo_WishRecycleSection proto.InternalMessageInfo

func (m *WishRecycleSection) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *WishRecycleSection) GetPlatform() int32 {
	if m != nil && m.Platform != nil {
		return *m.Platform
	}
	return 0
}

func (m *WishRecycleSection) GetDayTopCount() int32 {
	if m != nil && m.DayTopCount != nil {
		return *m.DayTopCount
	}
	return 0
}

func (m *WishRecycleSection) GetPlayer() int32 {
	if m != nil && m.Player != nil {
		return *m.Player
	}
	return 0
}

func (m *WishRecycleSection) GetStatus() bool {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return false
}

func (m *WishRecycleSection) GetDayMoneyTopCount() int32 {
	if m != nil && m.DayMoneyTopCount != nil {
		return *m.DayMoneyTopCount
	}
	return 0
}

func (m *WishRecycleSection) GetDayMoneyTop() int64 {
	if m != nil && m.DayMoneyTop != nil {
		return *m.DayMoneyTop
	}
	return 0
}

func (m *WishRecycleSection) GetOrderThresholdMoney() int64 {
	if m != nil && m.OrderThresholdMoney != nil {
		return *m.OrderThresholdMoney
	}
	return 0
}

func (m *WishRecycleSection) GetDayDiamondTopCount() int32 {
	if m != nil && m.DayDiamondTopCount != nil {
		return *m.DayDiamondTopCount
	}
	return 0
}

func (m *WishRecycleSection) GetDayDiamondTop() int64 {
	if m != nil && m.DayDiamondTop != nil {
		return *m.DayDiamondTop
	}
	return 0
}

func (m *WishRecycleSection) GetOrderThreshold() int64 {
	if m != nil && m.OrderThreshold != nil {
		return *m.OrderThreshold
	}
	return 0
}

func (m *WishRecycleSection) GetFeeRate() int32 {
	if m != nil && m.FeeRate != nil {
		return *m.FeeRate
	}
	return 0
}

func (m *WishRecycleSection) GetPlatformTax() int64 {
	if m != nil && m.PlatformTax != nil {
		return *m.PlatformTax
	}
	return 0
}

func (m *WishRecycleSection) GetRealTax() int64 {
	if m != nil && m.RealTax != nil {
		return *m.RealTax
	}
	return 0
}

// 支付预警
type WishPayWarnCfg struct {
	//支付预警配置
	WithdrawalTime        *int64   `protobuf:"varint,59,opt,name=WithdrawalTime" json:"WithdrawalTime,omitempty" bson:"WithdrawalTime,omitempty"`
	WithdrawalTimes       *int64   `protobuf:"varint,60,opt,name=WithdrawalTimes" json:"WithdrawalTimes,omitempty" bson:"WithdrawalTimes,omitempty"`
	WithdrawalGoldRate    *int64   `protobuf:"varint,61,opt,name=WithdrawalGoldRate" json:"WithdrawalGoldRate,omitempty" bson:"WithdrawalGoldRate,omitempty"`
	WithdrawalGold        *int64   `protobuf:"varint,62,opt,name=WithdrawalGold" json:"WithdrawalGold,omitempty" bson:"WithdrawalGold,omitempty"`
	WithdrawalDiamondRate *int64   `protobuf:"varint,63,opt,name=WithdrawalDiamondRate" json:"WithdrawalDiamondRate,omitempty" bson:"WithdrawalDiamondRate,omitempty"`
	WithdrawalDiamond     *int64   `protobuf:"varint,64,opt,name=WithdrawalDiamond" json:"WithdrawalDiamond,omitempty" bson:"WithdrawalDiamond,omitempty"`
	PhoneList             []string `protobuf:"bytes,65,rep,name=PhoneList" json:"PhoneList,omitempty" bson:"PhoneList,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-" bson:"-"`
	XXX_unrecognized      []byte   `json:"-" bson:"-"`
	XXX_sizecache         int32    `json:"-" bson:"-"`
}

func (m *WishPayWarnCfg) Reset()         { *m = WishPayWarnCfg{} }
func (m *WishPayWarnCfg) String() string { return proto.CompactTextString(m) }
func (*WishPayWarnCfg) ProtoMessage()    {}
func (*WishPayWarnCfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{28}
}
func (m *WishPayWarnCfg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishPayWarnCfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishPayWarnCfg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishPayWarnCfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishPayWarnCfg.Merge(m, src)
}
func (m *WishPayWarnCfg) XXX_Size() int {
	return m.Size()
}
func (m *WishPayWarnCfg) XXX_DiscardUnknown() {
	xxx_messageInfo_WishPayWarnCfg.DiscardUnknown(m)
}

var xxx_messageInfo_WishPayWarnCfg proto.InternalMessageInfo

func (m *WishPayWarnCfg) GetWithdrawalTime() int64 {
	if m != nil && m.WithdrawalTime != nil {
		return *m.WithdrawalTime
	}
	return 0
}

func (m *WishPayWarnCfg) GetWithdrawalTimes() int64 {
	if m != nil && m.WithdrawalTimes != nil {
		return *m.WithdrawalTimes
	}
	return 0
}

func (m *WishPayWarnCfg) GetWithdrawalGoldRate() int64 {
	if m != nil && m.WithdrawalGoldRate != nil {
		return *m.WithdrawalGoldRate
	}
	return 0
}

func (m *WishPayWarnCfg) GetWithdrawalGold() int64 {
	if m != nil && m.WithdrawalGold != nil {
		return *m.WithdrawalGold
	}
	return 0
}

func (m *WishPayWarnCfg) GetWithdrawalDiamondRate() int64 {
	if m != nil && m.WithdrawalDiamondRate != nil {
		return *m.WithdrawalDiamondRate
	}
	return 0
}

func (m *WishPayWarnCfg) GetWithdrawalDiamond() int64 {
	if m != nil && m.WithdrawalDiamond != nil {
		return *m.WithdrawalDiamond
	}
	return 0
}

func (m *WishPayWarnCfg) GetPhoneList() []string {
	if m != nil {
		return m.PhoneList
	}
	return nil
}

// 货币换算参数设置
type WishCurrencyConversionCfg struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Money                *int32   `protobuf:"varint,2,opt,name=Money" json:"Money,omitempty" bson:"Money,omitempty"`
	Coin                 *int32   `protobuf:"varint,4,opt,name=Coin" json:"Coin,omitempty" bson:"Coin,omitempty"`
	Diamond              *int32   `protobuf:"varint,5,opt,name=Diamond" json:"Diamond,omitempty" bson:"Diamond,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishCurrencyConversionCfg) Reset()         { *m = WishCurrencyConversionCfg{} }
func (m *WishCurrencyConversionCfg) String() string { return proto.CompactTextString(m) }
func (*WishCurrencyConversionCfg) ProtoMessage()    {}
func (*WishCurrencyConversionCfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{29}
}
func (m *WishCurrencyConversionCfg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishCurrencyConversionCfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishCurrencyConversionCfg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishCurrencyConversionCfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishCurrencyConversionCfg.Merge(m, src)
}
func (m *WishCurrencyConversionCfg) XXX_Size() int {
	return m.Size()
}
func (m *WishCurrencyConversionCfg) XXX_DiscardUnknown() {
	xxx_messageInfo_WishCurrencyConversionCfg.DiscardUnknown(m)
}

var xxx_messageInfo_WishCurrencyConversionCfg proto.InternalMessageInfo

func (m *WishCurrencyConversionCfg) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *WishCurrencyConversionCfg) GetMoney() int32 {
	if m != nil && m.Money != nil {
		return *m.Money
	}
	return 0
}

func (m *WishCurrencyConversionCfg) GetCoin() int32 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *WishCurrencyConversionCfg) GetDiamond() int32 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

// 守护者收益设置
type WishGuardianCfg struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	DayDiamondTop        *int64   `protobuf:"varint,2,opt,name=DayDiamondTop" json:"DayDiamondTop,omitempty" bson:"DayDiamondTop,omitempty"`
	OnceDiamondRebate    *int64   `protobuf:"varint,3,opt,name=OnceDiamondRebate" json:"OnceDiamondRebate,omitempty" bson:"OnceDiamondRebate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishGuardianCfg) Reset()         { *m = WishGuardianCfg{} }
func (m *WishGuardianCfg) String() string { return proto.CompactTextString(m) }
func (*WishGuardianCfg) ProtoMessage()    {}
func (*WishGuardianCfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{30}
}
func (m *WishGuardianCfg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishGuardianCfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishGuardianCfg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishGuardianCfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishGuardianCfg.Merge(m, src)
}
func (m *WishGuardianCfg) XXX_Size() int {
	return m.Size()
}
func (m *WishGuardianCfg) XXX_DiscardUnknown() {
	xxx_messageInfo_WishGuardianCfg.DiscardUnknown(m)
}

var xxx_messageInfo_WishGuardianCfg proto.InternalMessageInfo

func (m *WishGuardianCfg) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *WishGuardianCfg) GetDayDiamondTop() int64 {
	if m != nil && m.DayDiamondTop != nil {
		return *m.DayDiamondTop
	}
	return 0
}

func (m *WishGuardianCfg) GetOnceDiamondRebate() int64 {
	if m != nil && m.OnceDiamondRebate != nil {
		return *m.OnceDiamondRebate
	}
	return 0
}

// 后台一次性执行配置表
type SingleInitCfg struct {
	Table                *string  `protobuf:"bytes,1,opt,name=Table" json:"Table,omitempty" bson:"Table,omitempty"`
	Status               *int32   `protobuf:"varint,2,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *SingleInitCfg) Reset()         { *m = SingleInitCfg{} }
func (m *SingleInitCfg) String() string { return proto.CompactTextString(m) }
func (*SingleInitCfg) ProtoMessage()    {}
func (*SingleInitCfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{31}
}
func (m *SingleInitCfg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SingleInitCfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SingleInitCfg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SingleInitCfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleInitCfg.Merge(m, src)
}
func (m *SingleInitCfg) XXX_Size() int {
	return m.Size()
}
func (m *SingleInitCfg) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleInitCfg.DiscardUnknown(m)
}

var xxx_messageInfo_SingleInitCfg proto.InternalMessageInfo

func (m *SingleInitCfg) GetTable() string {
	if m != nil && m.Table != nil {
		return *m.Table
	}
	return ""
}

func (m *SingleInitCfg) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

//回收说明
type RecycleNoteCfg struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	Text                 []string `protobuf:"bytes,2,rep,name=Text" json:"Text,omitempty" bson:"Text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RecycleNoteCfg) Reset()         { *m = RecycleNoteCfg{} }
func (m *RecycleNoteCfg) String() string { return proto.CompactTextString(m) }
func (*RecycleNoteCfg) ProtoMessage()    {}
func (*RecycleNoteCfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{32}
}
func (m *RecycleNoteCfg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecycleNoteCfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecycleNoteCfg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecycleNoteCfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecycleNoteCfg.Merge(m, src)
}
func (m *RecycleNoteCfg) XXX_Size() int {
	return m.Size()
}
func (m *RecycleNoteCfg) XXX_DiscardUnknown() {
	xxx_messageInfo_RecycleNoteCfg.DiscardUnknown(m)
}

var xxx_messageInfo_RecycleNoteCfg proto.InternalMessageInfo

func (m *RecycleNoteCfg) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *RecycleNoteCfg) GetText() []string {
	if m != nil {
		return m.Text
	}
	return nil
}

// 钻石商城.
//钻石购买 diamond_recharge
type DiamondRecharge struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Diamond              *int64   `protobuf:"varint,2,opt,name=Diamond" json:"Diamond,omitempty" bson:"Diamond,omitempty"`
	CoinPrice            *int64   `protobuf:"varint,3,opt,name=CoinPrice" json:"CoinPrice,omitempty" bson:"CoinPrice,omitempty"`
	MonthFirst           *int64   `protobuf:"varint,4,opt,name=MonthFirst" json:"MonthFirst,omitempty" bson:"MonthFirst,omitempty"`
	Rebate               *int32   `protobuf:"varint,5,opt,name=Rebate" json:"Rebate,omitempty" bson:"Rebate,omitempty"`
	StartTime            *int64   `protobuf:"varint,7,opt,name=StartTime" json:"StartTime,omitempty" bson:"StartTime,omitempty"`
	EndTime              *int64   `protobuf:"varint,8,opt,name=EndTime" json:"EndTime,omitempty" bson:"EndTime,omitempty"`
	Status               *int32   `protobuf:"varint,9,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	Sort                 *int32   `protobuf:"varint,10,opt,name=Sort" json:"Sort,omitempty" bson:"Sort,omitempty"`
	DisPrice             *int64   `protobuf:"varint,11,opt,name=DisPrice" json:"DisPrice,omitempty" bson:"DisPrice,omitempty"`
	GiveDiamond          *int64   `protobuf:"varint,12,opt,name=GiveDiamond" json:"GiveDiamond,omitempty" bson:"GiveDiamond,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DiamondRecharge) Reset()         { *m = DiamondRecharge{} }
func (m *DiamondRecharge) String() string { return proto.CompactTextString(m) }
func (*DiamondRecharge) ProtoMessage()    {}
func (*DiamondRecharge) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{33}
}
func (m *DiamondRecharge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiamondRecharge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiamondRecharge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiamondRecharge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiamondRecharge.Merge(m, src)
}
func (m *DiamondRecharge) XXX_Size() int {
	return m.Size()
}
func (m *DiamondRecharge) XXX_DiscardUnknown() {
	xxx_messageInfo_DiamondRecharge.DiscardUnknown(m)
}

var xxx_messageInfo_DiamondRecharge proto.InternalMessageInfo

func (m *DiamondRecharge) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DiamondRecharge) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *DiamondRecharge) GetCoinPrice() int64 {
	if m != nil && m.CoinPrice != nil {
		return *m.CoinPrice
	}
	return 0
}

func (m *DiamondRecharge) GetMonthFirst() int64 {
	if m != nil && m.MonthFirst != nil {
		return *m.MonthFirst
	}
	return 0
}

func (m *DiamondRecharge) GetRebate() int32 {
	if m != nil && m.Rebate != nil {
		return *m.Rebate
	}
	return 0
}

func (m *DiamondRecharge) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *DiamondRecharge) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *DiamondRecharge) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *DiamondRecharge) GetSort() int32 {
	if m != nil && m.Sort != nil {
		return *m.Sort
	}
	return 0
}

func (m *DiamondRecharge) GetDisPrice() int64 {
	if m != nil && m.DisPrice != nil {
		return *m.DisPrice
	}
	return 0
}

func (m *DiamondRecharge) GetGiveDiamond() int64 {
	if m != nil && m.GiveDiamond != nil {
		return *m.GiveDiamond
	}
	return 0
}

// 许愿池报表
type WishPoolReport struct {
	CreateTime                 *int64   `protobuf:"varint,1,opt,name=CreateTime" json:"_id,omitempty" bson:"_id,omitempty"`
	WishPlayerCount            *int32   `protobuf:"varint,2,opt,name=WishPlayerCount" json:"WishPlayerCount,omitempty" bson:"WishPlayerCount,omitempty"`
	AddPlayerCount             *int32   `protobuf:"varint,3,opt,name=AddPlayerCount" json:"AddPlayerCount,omitempty" bson:"AddPlayerCount,omitempty"`
	LuckyPlayerCount           *int32   `protobuf:"varint,4,opt,name=LuckyPlayerCount" json:"LuckyPlayerCount,omitempty" bson:"LuckyPlayerCount,omitempty"`
	LuckyCount                 *int32   `protobuf:"varint,5,opt,name=LuckyCount" json:"LuckyCount,omitempty" bson:"LuckyCount,omitempty"`
	LuckyWishCount             *int32   `protobuf:"varint,6,opt,name=LuckyWishCount" json:"LuckyWishCount,omitempty" bson:"LuckyWishCount,omitempty"`
	ConvertCount               *int32   `protobuf:"varint,7,opt,name=ConvertCount" json:"ConvertCount,omitempty" bson:"ConvertCount,omitempty"`
	RecycleCount               *int32   `protobuf:"varint,8,opt,name=RecycleCount" json:"RecycleCount,omitempty" bson:"RecycleCount,omitempty"`
	PlayerRecycleCount         *int32   `protobuf:"varint,9,opt,name=PlayerRecycleCount" json:"PlayerRecycleCount,omitempty" bson:"PlayerRecycleCount,omitempty"`
	OfficialRecycleCount       *int32   `protobuf:"varint,10,opt,name=OfficialRecycleCount" json:"OfficialRecycleCount,omitempty" bson:"OfficialRecycleCount,omitempty"`
	RecycleGoldTotal           *int64   `protobuf:"varint,11,opt,name=RecycleGoldTotal" json:"RecycleGoldTotal,omitempty" bson:"RecycleGoldTotal,omitempty"`
	LuckyGoldTotal             *int64   `protobuf:"varint,12,opt,name=LuckyGoldTotal" json:"LuckyGoldTotal,omitempty" bson:"LuckyGoldTotal,omitempty"`
	ConvertGoodsPriceTotal     *int64   `protobuf:"varint,13,opt,name=ConvertGoodsPriceTotal" json:"ConvertGoodsPriceTotal,omitempty" bson:"ConvertGoodsPriceTotal,omitempty"`
	CommissionTotal            *int32   `protobuf:"varint,14,opt,name=CommissionTotal" json:"CommissionTotal,omitempty" bson:"CommissionTotal,omitempty"`
	PendConvertGoodsPriceTotal *int64   `protobuf:"varint,15,opt,name=PendConvertGoodsPriceTotal" json:"PendConvertGoodsPriceTotal,omitempty" bson:"PendConvertGoodsPriceTotal,omitempty"`
	PendConvertCount           *int32   `protobuf:"varint,16,opt,name=PendConvertCount" json:"PendConvertCount,omitempty" bson:"PendConvertCount,omitempty"`
	PlayerRecycleGoldTotal     *int64   `protobuf:"varint,17,opt,name=PlayerRecycleGoldTotal" json:"PlayerRecycleGoldTotal,omitempty" bson:"PlayerRecycleGoldTotal,omitempty"`
	OfficialRecycleGoldTotal   *int64   `protobuf:"varint,18,opt,name=OfficialRecycleGoldTotal" json:"OfficialRecycleGoldTotal,omitempty" bson:"OfficialRecycleGoldTotal,omitempty"`
	Profit                     *int64   `protobuf:"varint,20,opt,name=Profit" json:"Profit,omitempty" bson:"Profit,omitempty"`
	ConvertDiamondTotal        *int64   `protobuf:"varint,27,opt,name=ConvertDiamondTotal" json:"ConvertDiamondTotal,omitempty" bson:"ConvertDiamondTotal,omitempty"`
	ConvertDiamondPlayerCount  *int32   `protobuf:"varint,28,opt,name=ConvertDiamondPlayerCount" json:"ConvertDiamondPlayerCount,omitempty" bson:"ConvertDiamondPlayerCount,omitempty"`
	ConvertDiamondCount        *int64   `protobuf:"varint,29,opt,name=ConvertDiamondCount" json:"ConvertDiamondCount,omitempty" bson:"ConvertDiamondCount,omitempty"`
	RecyclePlayerCount         *int32   `protobuf:"varint,30,opt,name=RecyclePlayerCount" json:"RecyclePlayerCount,omitempty" bson:"RecyclePlayerCount,omitempty"`
	DeliverCount               *int64   `protobuf:"varint,31,opt,name=DeliverCount" json:"DeliverCount,omitempty" bson:"DeliverCount,omitempty"`
	DeliverPlayerCount         *int32   `protobuf:"varint,32,opt,name=DeliverPlayerCount" json:"DeliverPlayerCount,omitempty" bson:"DeliverPlayerCount,omitempty"`
	InPoolCount                *int64   `protobuf:"varint,33,opt,name=InPoolCount" json:"InPoolCount,omitempty" bson:"InPoolCount,omitempty"`
	InPoolPlayerCount          *int32   `protobuf:"varint,34,opt,name=InPoolPlayerCount" json:"InPoolPlayerCount,omitempty" bson:"InPoolPlayerCount,omitempty"`
	WinItemPriceTotal          *int64   `protobuf:"varint,45,opt,name=WinItemPriceTotal" json:"WinItemPriceTotal,omitempty" bson:"WinItemPriceTotal,omitempty"`
	StartTime                  *int64   `protobuf:"varint,46,opt,name=StartTime" json:"StartTime,omitempty" bson:"StartTime,omitempty"`
	EndTime                    *int64   `protobuf:"varint,47,opt,name=EndTime" json:"EndTime,omitempty" bson:"EndTime,omitempty"`
	ProductDiamondTotal        *int64   `protobuf:"varint,49,opt,name=ProductDiamondTotal" json:"ProductDiamondTotal,omitempty" bson:"ProductDiamondTotal,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-" bson:"-"`
	XXX_unrecognized           []byte   `json:"-" bson:"-"`
	XXX_sizecache              int32    `json:"-" bson:"-"`
}

func (m *WishPoolReport) Reset()         { *m = WishPoolReport{} }
func (m *WishPoolReport) String() string { return proto.CompactTextString(m) }
func (*WishPoolReport) ProtoMessage()    {}
func (*WishPoolReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{34}
}
func (m *WishPoolReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishPoolReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishPoolReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishPoolReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishPoolReport.Merge(m, src)
}
func (m *WishPoolReport) XXX_Size() int {
	return m.Size()
}
func (m *WishPoolReport) XXX_DiscardUnknown() {
	xxx_messageInfo_WishPoolReport.DiscardUnknown(m)
}

var xxx_messageInfo_WishPoolReport proto.InternalMessageInfo

func (m *WishPoolReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishPoolReport) GetWishPlayerCount() int32 {
	if m != nil && m.WishPlayerCount != nil {
		return *m.WishPlayerCount
	}
	return 0
}

func (m *WishPoolReport) GetAddPlayerCount() int32 {
	if m != nil && m.AddPlayerCount != nil {
		return *m.AddPlayerCount
	}
	return 0
}

func (m *WishPoolReport) GetLuckyPlayerCount() int32 {
	if m != nil && m.LuckyPlayerCount != nil {
		return *m.LuckyPlayerCount
	}
	return 0
}

func (m *WishPoolReport) GetLuckyCount() int32 {
	if m != nil && m.LuckyCount != nil {
		return *m.LuckyCount
	}
	return 0
}

func (m *WishPoolReport) GetLuckyWishCount() int32 {
	if m != nil && m.LuckyWishCount != nil {
		return *m.LuckyWishCount
	}
	return 0
}

func (m *WishPoolReport) GetConvertCount() int32 {
	if m != nil && m.ConvertCount != nil {
		return *m.ConvertCount
	}
	return 0
}

func (m *WishPoolReport) GetRecycleCount() int32 {
	if m != nil && m.RecycleCount != nil {
		return *m.RecycleCount
	}
	return 0
}

func (m *WishPoolReport) GetPlayerRecycleCount() int32 {
	if m != nil && m.PlayerRecycleCount != nil {
		return *m.PlayerRecycleCount
	}
	return 0
}

func (m *WishPoolReport) GetOfficialRecycleCount() int32 {
	if m != nil && m.OfficialRecycleCount != nil {
		return *m.OfficialRecycleCount
	}
	return 0
}

func (m *WishPoolReport) GetRecycleGoldTotal() int64 {
	if m != nil && m.RecycleGoldTotal != nil {
		return *m.RecycleGoldTotal
	}
	return 0
}

func (m *WishPoolReport) GetLuckyGoldTotal() int64 {
	if m != nil && m.LuckyGoldTotal != nil {
		return *m.LuckyGoldTotal
	}
	return 0
}

func (m *WishPoolReport) GetConvertGoodsPriceTotal() int64 {
	if m != nil && m.ConvertGoodsPriceTotal != nil {
		return *m.ConvertGoodsPriceTotal
	}
	return 0
}

func (m *WishPoolReport) GetCommissionTotal() int32 {
	if m != nil && m.CommissionTotal != nil {
		return *m.CommissionTotal
	}
	return 0
}

func (m *WishPoolReport) GetPendConvertGoodsPriceTotal() int64 {
	if m != nil && m.PendConvertGoodsPriceTotal != nil {
		return *m.PendConvertGoodsPriceTotal
	}
	return 0
}

func (m *WishPoolReport) GetPendConvertCount() int32 {
	if m != nil && m.PendConvertCount != nil {
		return *m.PendConvertCount
	}
	return 0
}

func (m *WishPoolReport) GetPlayerRecycleGoldTotal() int64 {
	if m != nil && m.PlayerRecycleGoldTotal != nil {
		return *m.PlayerRecycleGoldTotal
	}
	return 0
}

func (m *WishPoolReport) GetOfficialRecycleGoldTotal() int64 {
	if m != nil && m.OfficialRecycleGoldTotal != nil {
		return *m.OfficialRecycleGoldTotal
	}
	return 0
}

func (m *WishPoolReport) GetProfit() int64 {
	if m != nil && m.Profit != nil {
		return *m.Profit
	}
	return 0
}

func (m *WishPoolReport) GetConvertDiamondTotal() int64 {
	if m != nil && m.ConvertDiamondTotal != nil {
		return *m.ConvertDiamondTotal
	}
	return 0
}

func (m *WishPoolReport) GetConvertDiamondPlayerCount() int32 {
	if m != nil && m.ConvertDiamondPlayerCount != nil {
		return *m.ConvertDiamondPlayerCount
	}
	return 0
}

func (m *WishPoolReport) GetConvertDiamondCount() int64 {
	if m != nil && m.ConvertDiamondCount != nil {
		return *m.ConvertDiamondCount
	}
	return 0
}

func (m *WishPoolReport) GetRecyclePlayerCount() int32 {
	if m != nil && m.RecyclePlayerCount != nil {
		return *m.RecyclePlayerCount
	}
	return 0
}

func (m *WishPoolReport) GetDeliverCount() int64 {
	if m != nil && m.DeliverCount != nil {
		return *m.DeliverCount
	}
	return 0
}

func (m *WishPoolReport) GetDeliverPlayerCount() int32 {
	if m != nil && m.DeliverPlayerCount != nil {
		return *m.DeliverPlayerCount
	}
	return 0
}

func (m *WishPoolReport) GetInPoolCount() int64 {
	if m != nil && m.InPoolCount != nil {
		return *m.InPoolCount
	}
	return 0
}

func (m *WishPoolReport) GetInPoolPlayerCount() int32 {
	if m != nil && m.InPoolPlayerCount != nil {
		return *m.InPoolPlayerCount
	}
	return 0
}

func (m *WishPoolReport) GetWinItemPriceTotal() int64 {
	if m != nil && m.WinItemPriceTotal != nil {
		return *m.WinItemPriceTotal
	}
	return 0
}

func (m *WishPoolReport) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *WishPoolReport) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *WishPoolReport) GetProductDiamondTotal() int64 {
	if m != nil && m.ProductDiamondTotal != nil {
		return *m.ProductDiamondTotal
	}
	return 0
}

// 许愿池报表-周表
type WishPoolReportWeek struct {
	CreateTime                 *int64   `protobuf:"varint,1,opt,name=CreateTime" json:"_id,omitempty" bson:"_id,omitempty"`
	WishPlayerCount            *int32   `protobuf:"varint,2,opt,name=WishPlayerCount" json:"WishPlayerCount,omitempty" bson:"WishPlayerCount,omitempty"`
	AddPlayerCount             *int32   `protobuf:"varint,3,opt,name=AddPlayerCount" json:"AddPlayerCount,omitempty" bson:"AddPlayerCount,omitempty"`
	LuckyPlayerCount           *int32   `protobuf:"varint,4,opt,name=LuckyPlayerCount" json:"LuckyPlayerCount,omitempty" bson:"LuckyPlayerCount,omitempty"`
	LuckyCount                 *int32   `protobuf:"varint,5,opt,name=LuckyCount" json:"LuckyCount,omitempty" bson:"LuckyCount,omitempty"`
	LuckyWishCount             *int32   `protobuf:"varint,6,opt,name=LuckyWishCount" json:"LuckyWishCount,omitempty" bson:"LuckyWishCount,omitempty"`
	ConvertCount               *int32   `protobuf:"varint,7,opt,name=ConvertCount" json:"ConvertCount,omitempty" bson:"ConvertCount,omitempty"`
	RecycleCount               *int32   `protobuf:"varint,8,opt,name=RecycleCount" json:"RecycleCount,omitempty" bson:"RecycleCount,omitempty"`
	PlayerRecycleCount         *int32   `protobuf:"varint,9,opt,name=PlayerRecycleCount" json:"PlayerRecycleCount,omitempty" bson:"PlayerRecycleCount,omitempty"`
	OfficialRecycleCount       *int32   `protobuf:"varint,10,opt,name=OfficialRecycleCount" json:"OfficialRecycleCount,omitempty" bson:"OfficialRecycleCount,omitempty"`
	RecycleGoldTotal           *int64   `protobuf:"varint,11,opt,name=RecycleGoldTotal" json:"RecycleGoldTotal,omitempty" bson:"RecycleGoldTotal,omitempty"`
	LuckyGoldTotal             *int64   `protobuf:"varint,12,opt,name=LuckyGoldTotal" json:"LuckyGoldTotal,omitempty" bson:"LuckyGoldTotal,omitempty"`
	ConvertGoodsPriceTotal     *int64   `protobuf:"varint,13,opt,name=ConvertGoodsPriceTotal" json:"ConvertGoodsPriceTotal,omitempty" bson:"ConvertGoodsPriceTotal,omitempty"`
	CommissionTotal            *int32   `protobuf:"varint,14,opt,name=CommissionTotal" json:"CommissionTotal,omitempty" bson:"CommissionTotal,omitempty"`
	PendConvertGoodsPriceTotal *int64   `protobuf:"varint,15,opt,name=PendConvertGoodsPriceTotal" json:"PendConvertGoodsPriceTotal,omitempty" bson:"PendConvertGoodsPriceTotal,omitempty"`
	PendConvertCount           *int32   `protobuf:"varint,16,opt,name=PendConvertCount" json:"PendConvertCount,omitempty" bson:"PendConvertCount,omitempty"`
	PlayerRecycleGoldTotal     *int64   `protobuf:"varint,17,opt,name=PlayerRecycleGoldTotal" json:"PlayerRecycleGoldTotal,omitempty" bson:"PlayerRecycleGoldTotal,omitempty"`
	OfficialRecycleGoldTotal   *int64   `protobuf:"varint,18,opt,name=OfficialRecycleGoldTotal" json:"OfficialRecycleGoldTotal,omitempty" bson:"OfficialRecycleGoldTotal,omitempty"`
	Profit                     *int64   `protobuf:"varint,20,opt,name=Profit" json:"Profit,omitempty" bson:"Profit,omitempty"`
	ConvertDiamondTotal        *int64   `protobuf:"varint,27,opt,name=ConvertDiamondTotal" json:"ConvertDiamondTotal,omitempty" bson:"ConvertDiamondTotal,omitempty"`
	ConvertDiamondPlayerCount  *int32   `protobuf:"varint,28,opt,name=ConvertDiamondPlayerCount" json:"ConvertDiamondPlayerCount,omitempty" bson:"ConvertDiamondPlayerCount,omitempty"`
	ConvertDiamondCount        *int64   `protobuf:"varint,29,opt,name=ConvertDiamondCount" json:"ConvertDiamondCount,omitempty" bson:"ConvertDiamondCount,omitempty"`
	RecyclePlayerCount         *int32   `protobuf:"varint,30,opt,name=RecyclePlayerCount" json:"RecyclePlayerCount,omitempty" bson:"RecyclePlayerCount,omitempty"`
	DeliverCount               *int64   `protobuf:"varint,31,opt,name=DeliverCount" json:"DeliverCount,omitempty" bson:"DeliverCount,omitempty"`
	DeliverPlayerCount         *int32   `protobuf:"varint,32,opt,name=DeliverPlayerCount" json:"DeliverPlayerCount,omitempty" bson:"DeliverPlayerCount,omitempty"`
	InPoolCount                *int64   `protobuf:"varint,33,opt,name=InPoolCount" json:"InPoolCount,omitempty" bson:"InPoolCount,omitempty"`
	InPoolPlayerCount          *int32   `protobuf:"varint,34,opt,name=InPoolPlayerCount" json:"InPoolPlayerCount,omitempty" bson:"InPoolPlayerCount,omitempty"`
	WinItemPriceTotal          *int64   `protobuf:"varint,45,opt,name=WinItemPriceTotal" json:"WinItemPriceTotal,omitempty" bson:"WinItemPriceTotal,omitempty"`
	StartTime                  *int64   `protobuf:"varint,46,opt,name=StartTime" json:"StartTime,omitempty" bson:"StartTime,omitempty"`
	EndTime                    *int64   `protobuf:"varint,47,opt,name=EndTime" json:"EndTime,omitempty" bson:"EndTime,omitempty"`
	ProductDiamondTotal        *int64   `protobuf:"varint,49,opt,name=ProductDiamondTotal" json:"ProductDiamondTotal,omitempty" bson:"ProductDiamondTotal,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-" bson:"-"`
	XXX_unrecognized           []byte   `json:"-" bson:"-"`
	XXX_sizecache              int32    `json:"-" bson:"-"`
}

func (m *WishPoolReportWeek) Reset()         { *m = WishPoolReportWeek{} }
func (m *WishPoolReportWeek) String() string { return proto.CompactTextString(m) }
func (*WishPoolReportWeek) ProtoMessage()    {}
func (*WishPoolReportWeek) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{35}
}
func (m *WishPoolReportWeek) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishPoolReportWeek) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishPoolReportWeek.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishPoolReportWeek) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishPoolReportWeek.Merge(m, src)
}
func (m *WishPoolReportWeek) XXX_Size() int {
	return m.Size()
}
func (m *WishPoolReportWeek) XXX_DiscardUnknown() {
	xxx_messageInfo_WishPoolReportWeek.DiscardUnknown(m)
}

var xxx_messageInfo_WishPoolReportWeek proto.InternalMessageInfo

func (m *WishPoolReportWeek) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishPoolReportWeek) GetWishPlayerCount() int32 {
	if m != nil && m.WishPlayerCount != nil {
		return *m.WishPlayerCount
	}
	return 0
}

func (m *WishPoolReportWeek) GetAddPlayerCount() int32 {
	if m != nil && m.AddPlayerCount != nil {
		return *m.AddPlayerCount
	}
	return 0
}

func (m *WishPoolReportWeek) GetLuckyPlayerCount() int32 {
	if m != nil && m.LuckyPlayerCount != nil {
		return *m.LuckyPlayerCount
	}
	return 0
}

func (m *WishPoolReportWeek) GetLuckyCount() int32 {
	if m != nil && m.LuckyCount != nil {
		return *m.LuckyCount
	}
	return 0
}

func (m *WishPoolReportWeek) GetLuckyWishCount() int32 {
	if m != nil && m.LuckyWishCount != nil {
		return *m.LuckyWishCount
	}
	return 0
}

func (m *WishPoolReportWeek) GetConvertCount() int32 {
	if m != nil && m.ConvertCount != nil {
		return *m.ConvertCount
	}
	return 0
}

func (m *WishPoolReportWeek) GetRecycleCount() int32 {
	if m != nil && m.RecycleCount != nil {
		return *m.RecycleCount
	}
	return 0
}

func (m *WishPoolReportWeek) GetPlayerRecycleCount() int32 {
	if m != nil && m.PlayerRecycleCount != nil {
		return *m.PlayerRecycleCount
	}
	return 0
}

func (m *WishPoolReportWeek) GetOfficialRecycleCount() int32 {
	if m != nil && m.OfficialRecycleCount != nil {
		return *m.OfficialRecycleCount
	}
	return 0
}

func (m *WishPoolReportWeek) GetRecycleGoldTotal() int64 {
	if m != nil && m.RecycleGoldTotal != nil {
		return *m.RecycleGoldTotal
	}
	return 0
}

func (m *WishPoolReportWeek) GetLuckyGoldTotal() int64 {
	if m != nil && m.LuckyGoldTotal != nil {
		return *m.LuckyGoldTotal
	}
	return 0
}

func (m *WishPoolReportWeek) GetConvertGoodsPriceTotal() int64 {
	if m != nil && m.ConvertGoodsPriceTotal != nil {
		return *m.ConvertGoodsPriceTotal
	}
	return 0
}

func (m *WishPoolReportWeek) GetCommissionTotal() int32 {
	if m != nil && m.CommissionTotal != nil {
		return *m.CommissionTotal
	}
	return 0
}

func (m *WishPoolReportWeek) GetPendConvertGoodsPriceTotal() int64 {
	if m != nil && m.PendConvertGoodsPriceTotal != nil {
		return *m.PendConvertGoodsPriceTotal
	}
	return 0
}

func (m *WishPoolReportWeek) GetPendConvertCount() int32 {
	if m != nil && m.PendConvertCount != nil {
		return *m.PendConvertCount
	}
	return 0
}

func (m *WishPoolReportWeek) GetPlayerRecycleGoldTotal() int64 {
	if m != nil && m.PlayerRecycleGoldTotal != nil {
		return *m.PlayerRecycleGoldTotal
	}
	return 0
}

func (m *WishPoolReportWeek) GetOfficialRecycleGoldTotal() int64 {
	if m != nil && m.OfficialRecycleGoldTotal != nil {
		return *m.OfficialRecycleGoldTotal
	}
	return 0
}

func (m *WishPoolReportWeek) GetProfit() int64 {
	if m != nil && m.Profit != nil {
		return *m.Profit
	}
	return 0
}

func (m *WishPoolReportWeek) GetConvertDiamondTotal() int64 {
	if m != nil && m.ConvertDiamondTotal != nil {
		return *m.ConvertDiamondTotal
	}
	return 0
}

func (m *WishPoolReportWeek) GetConvertDiamondPlayerCount() int32 {
	if m != nil && m.ConvertDiamondPlayerCount != nil {
		return *m.ConvertDiamondPlayerCount
	}
	return 0
}

func (m *WishPoolReportWeek) GetConvertDiamondCount() int64 {
	if m != nil && m.ConvertDiamondCount != nil {
		return *m.ConvertDiamondCount
	}
	return 0
}

func (m *WishPoolReportWeek) GetRecyclePlayerCount() int32 {
	if m != nil && m.RecyclePlayerCount != nil {
		return *m.RecyclePlayerCount
	}
	return 0
}

func (m *WishPoolReportWeek) GetDeliverCount() int64 {
	if m != nil && m.DeliverCount != nil {
		return *m.DeliverCount
	}
	return 0
}

func (m *WishPoolReportWeek) GetDeliverPlayerCount() int32 {
	if m != nil && m.DeliverPlayerCount != nil {
		return *m.DeliverPlayerCount
	}
	return 0
}

func (m *WishPoolReportWeek) GetInPoolCount() int64 {
	if m != nil && m.InPoolCount != nil {
		return *m.InPoolCount
	}
	return 0
}

func (m *WishPoolReportWeek) GetInPoolPlayerCount() int32 {
	if m != nil && m.InPoolPlayerCount != nil {
		return *m.InPoolPlayerCount
	}
	return 0
}

func (m *WishPoolReportWeek) GetWinItemPriceTotal() int64 {
	if m != nil && m.WinItemPriceTotal != nil {
		return *m.WinItemPriceTotal
	}
	return 0
}

func (m *WishPoolReportWeek) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *WishPoolReportWeek) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *WishPoolReportWeek) GetProductDiamondTotal() int64 {
	if m != nil && m.ProductDiamondTotal != nil {
		return *m.ProductDiamondTotal
	}
	return 0
}

// 许愿池报表-月表
type WishPoolReportMonth struct {
	CreateTime                 *int64   `protobuf:"varint,1,opt,name=CreateTime" json:"_id,omitempty" bson:"_id,omitempty"`
	WishPlayerCount            *int32   `protobuf:"varint,2,opt,name=WishPlayerCount" json:"WishPlayerCount,omitempty" bson:"WishPlayerCount,omitempty"`
	AddPlayerCount             *int32   `protobuf:"varint,3,opt,name=AddPlayerCount" json:"AddPlayerCount,omitempty" bson:"AddPlayerCount,omitempty"`
	LuckyPlayerCount           *int32   `protobuf:"varint,4,opt,name=LuckyPlayerCount" json:"LuckyPlayerCount,omitempty" bson:"LuckyPlayerCount,omitempty"`
	LuckyCount                 *int32   `protobuf:"varint,5,opt,name=LuckyCount" json:"LuckyCount,omitempty" bson:"LuckyCount,omitempty"`
	LuckyWishCount             *int32   `protobuf:"varint,6,opt,name=LuckyWishCount" json:"LuckyWishCount,omitempty" bson:"LuckyWishCount,omitempty"`
	ConvertCount               *int32   `protobuf:"varint,7,opt,name=ConvertCount" json:"ConvertCount,omitempty" bson:"ConvertCount,omitempty"`
	RecycleCount               *int32   `protobuf:"varint,8,opt,name=RecycleCount" json:"RecycleCount,omitempty" bson:"RecycleCount,omitempty"`
	PlayerRecycleCount         *int32   `protobuf:"varint,9,opt,name=PlayerRecycleCount" json:"PlayerRecycleCount,omitempty" bson:"PlayerRecycleCount,omitempty"`
	OfficialRecycleCount       *int32   `protobuf:"varint,10,opt,name=OfficialRecycleCount" json:"OfficialRecycleCount,omitempty" bson:"OfficialRecycleCount,omitempty"`
	RecycleGoldTotal           *int64   `protobuf:"varint,11,opt,name=RecycleGoldTotal" json:"RecycleGoldTotal,omitempty" bson:"RecycleGoldTotal,omitempty"`
	LuckyGoldTotal             *int64   `protobuf:"varint,12,opt,name=LuckyGoldTotal" json:"LuckyGoldTotal,omitempty" bson:"LuckyGoldTotal,omitempty"`
	ConvertGoodsPriceTotal     *int64   `protobuf:"varint,13,opt,name=ConvertGoodsPriceTotal" json:"ConvertGoodsPriceTotal,omitempty" bson:"ConvertGoodsPriceTotal,omitempty"`
	CommissionTotal            *int32   `protobuf:"varint,14,opt,name=CommissionTotal" json:"CommissionTotal,omitempty" bson:"CommissionTotal,omitempty"`
	PendConvertGoodsPriceTotal *int64   `protobuf:"varint,15,opt,name=PendConvertGoodsPriceTotal" json:"PendConvertGoodsPriceTotal,omitempty" bson:"PendConvertGoodsPriceTotal,omitempty"`
	PendConvertCount           *int32   `protobuf:"varint,16,opt,name=PendConvertCount" json:"PendConvertCount,omitempty" bson:"PendConvertCount,omitempty"`
	PlayerRecycleGoldTotal     *int64   `protobuf:"varint,17,opt,name=PlayerRecycleGoldTotal" json:"PlayerRecycleGoldTotal,omitempty" bson:"PlayerRecycleGoldTotal,omitempty"`
	OfficialRecycleGoldTotal   *int64   `protobuf:"varint,18,opt,name=OfficialRecycleGoldTotal" json:"OfficialRecycleGoldTotal,omitempty" bson:"OfficialRecycleGoldTotal,omitempty"`
	Profit                     *int64   `protobuf:"varint,20,opt,name=Profit" json:"Profit,omitempty" bson:"Profit,omitempty"`
	ConvertDiamondTotal        *int64   `protobuf:"varint,27,opt,name=ConvertDiamondTotal" json:"ConvertDiamondTotal,omitempty" bson:"ConvertDiamondTotal,omitempty"`
	ConvertDiamondPlayerCount  *int32   `protobuf:"varint,28,opt,name=ConvertDiamondPlayerCount" json:"ConvertDiamondPlayerCount,omitempty" bson:"ConvertDiamondPlayerCount,omitempty"`
	ConvertDiamondCount        *int64   `protobuf:"varint,29,opt,name=ConvertDiamondCount" json:"ConvertDiamondCount,omitempty" bson:"ConvertDiamondCount,omitempty"`
	RecyclePlayerCount         *int32   `protobuf:"varint,30,opt,name=RecyclePlayerCount" json:"RecyclePlayerCount,omitempty" bson:"RecyclePlayerCount,omitempty"`
	DeliverCount               *int64   `protobuf:"varint,31,opt,name=DeliverCount" json:"DeliverCount,omitempty" bson:"DeliverCount,omitempty"`
	DeliverPlayerCount         *int32   `protobuf:"varint,32,opt,name=DeliverPlayerCount" json:"DeliverPlayerCount,omitempty" bson:"DeliverPlayerCount,omitempty"`
	InPoolCount                *int64   `protobuf:"varint,33,opt,name=InPoolCount" json:"InPoolCount,omitempty" bson:"InPoolCount,omitempty"`
	InPoolPlayerCount          *int32   `protobuf:"varint,34,opt,name=InPoolPlayerCount" json:"InPoolPlayerCount,omitempty" bson:"InPoolPlayerCount,omitempty"`
	WinItemPriceTotal          *int64   `protobuf:"varint,45,opt,name=WinItemPriceTotal" json:"WinItemPriceTotal,omitempty" bson:"WinItemPriceTotal,omitempty"`
	StartTime                  *int64   `protobuf:"varint,46,opt,name=StartTime" json:"StartTime,omitempty" bson:"StartTime,omitempty"`
	EndTime                    *int64   `protobuf:"varint,47,opt,name=EndTime" json:"EndTime,omitempty" bson:"EndTime,omitempty"`
	ProductDiamondTotal        *int64   `protobuf:"varint,49,opt,name=ProductDiamondTotal" json:"ProductDiamondTotal,omitempty" bson:"ProductDiamondTotal,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-" bson:"-"`
	XXX_unrecognized           []byte   `json:"-" bson:"-"`
	XXX_sizecache              int32    `json:"-" bson:"-"`
}

func (m *WishPoolReportMonth) Reset()         { *m = WishPoolReportMonth{} }
func (m *WishPoolReportMonth) String() string { return proto.CompactTextString(m) }
func (*WishPoolReportMonth) ProtoMessage()    {}
func (*WishPoolReportMonth) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{36}
}
func (m *WishPoolReportMonth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishPoolReportMonth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishPoolReportMonth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishPoolReportMonth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishPoolReportMonth.Merge(m, src)
}
func (m *WishPoolReportMonth) XXX_Size() int {
	return m.Size()
}
func (m *WishPoolReportMonth) XXX_DiscardUnknown() {
	xxx_messageInfo_WishPoolReportMonth.DiscardUnknown(m)
}

var xxx_messageInfo_WishPoolReportMonth proto.InternalMessageInfo

func (m *WishPoolReportMonth) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishPoolReportMonth) GetWishPlayerCount() int32 {
	if m != nil && m.WishPlayerCount != nil {
		return *m.WishPlayerCount
	}
	return 0
}

func (m *WishPoolReportMonth) GetAddPlayerCount() int32 {
	if m != nil && m.AddPlayerCount != nil {
		return *m.AddPlayerCount
	}
	return 0
}

func (m *WishPoolReportMonth) GetLuckyPlayerCount() int32 {
	if m != nil && m.LuckyPlayerCount != nil {
		return *m.LuckyPlayerCount
	}
	return 0
}

func (m *WishPoolReportMonth) GetLuckyCount() int32 {
	if m != nil && m.LuckyCount != nil {
		return *m.LuckyCount
	}
	return 0
}

func (m *WishPoolReportMonth) GetLuckyWishCount() int32 {
	if m != nil && m.LuckyWishCount != nil {
		return *m.LuckyWishCount
	}
	return 0
}

func (m *WishPoolReportMonth) GetConvertCount() int32 {
	if m != nil && m.ConvertCount != nil {
		return *m.ConvertCount
	}
	return 0
}

func (m *WishPoolReportMonth) GetRecycleCount() int32 {
	if m != nil && m.RecycleCount != nil {
		return *m.RecycleCount
	}
	return 0
}

func (m *WishPoolReportMonth) GetPlayerRecycleCount() int32 {
	if m != nil && m.PlayerRecycleCount != nil {
		return *m.PlayerRecycleCount
	}
	return 0
}

func (m *WishPoolReportMonth) GetOfficialRecycleCount() int32 {
	if m != nil && m.OfficialRecycleCount != nil {
		return *m.OfficialRecycleCount
	}
	return 0
}

func (m *WishPoolReportMonth) GetRecycleGoldTotal() int64 {
	if m != nil && m.RecycleGoldTotal != nil {
		return *m.RecycleGoldTotal
	}
	return 0
}

func (m *WishPoolReportMonth) GetLuckyGoldTotal() int64 {
	if m != nil && m.LuckyGoldTotal != nil {
		return *m.LuckyGoldTotal
	}
	return 0
}

func (m *WishPoolReportMonth) GetConvertGoodsPriceTotal() int64 {
	if m != nil && m.ConvertGoodsPriceTotal != nil {
		return *m.ConvertGoodsPriceTotal
	}
	return 0
}

func (m *WishPoolReportMonth) GetCommissionTotal() int32 {
	if m != nil && m.CommissionTotal != nil {
		return *m.CommissionTotal
	}
	return 0
}

func (m *WishPoolReportMonth) GetPendConvertGoodsPriceTotal() int64 {
	if m != nil && m.PendConvertGoodsPriceTotal != nil {
		return *m.PendConvertGoodsPriceTotal
	}
	return 0
}

func (m *WishPoolReportMonth) GetPendConvertCount() int32 {
	if m != nil && m.PendConvertCount != nil {
		return *m.PendConvertCount
	}
	return 0
}

func (m *WishPoolReportMonth) GetPlayerRecycleGoldTotal() int64 {
	if m != nil && m.PlayerRecycleGoldTotal != nil {
		return *m.PlayerRecycleGoldTotal
	}
	return 0
}

func (m *WishPoolReportMonth) GetOfficialRecycleGoldTotal() int64 {
	if m != nil && m.OfficialRecycleGoldTotal != nil {
		return *m.OfficialRecycleGoldTotal
	}
	return 0
}

func (m *WishPoolReportMonth) GetProfit() int64 {
	if m != nil && m.Profit != nil {
		return *m.Profit
	}
	return 0
}

func (m *WishPoolReportMonth) GetConvertDiamondTotal() int64 {
	if m != nil && m.ConvertDiamondTotal != nil {
		return *m.ConvertDiamondTotal
	}
	return 0
}

func (m *WishPoolReportMonth) GetConvertDiamondPlayerCount() int32 {
	if m != nil && m.ConvertDiamondPlayerCount != nil {
		return *m.ConvertDiamondPlayerCount
	}
	return 0
}

func (m *WishPoolReportMonth) GetConvertDiamondCount() int64 {
	if m != nil && m.ConvertDiamondCount != nil {
		return *m.ConvertDiamondCount
	}
	return 0
}

func (m *WishPoolReportMonth) GetRecyclePlayerCount() int32 {
	if m != nil && m.RecyclePlayerCount != nil {
		return *m.RecyclePlayerCount
	}
	return 0
}

func (m *WishPoolReportMonth) GetDeliverCount() int64 {
	if m != nil && m.DeliverCount != nil {
		return *m.DeliverCount
	}
	return 0
}

func (m *WishPoolReportMonth) GetDeliverPlayerCount() int32 {
	if m != nil && m.DeliverPlayerCount != nil {
		return *m.DeliverPlayerCount
	}
	return 0
}

func (m *WishPoolReportMonth) GetInPoolCount() int64 {
	if m != nil && m.InPoolCount != nil {
		return *m.InPoolCount
	}
	return 0
}

func (m *WishPoolReportMonth) GetInPoolPlayerCount() int32 {
	if m != nil && m.InPoolPlayerCount != nil {
		return *m.InPoolPlayerCount
	}
	return 0
}

func (m *WishPoolReportMonth) GetWinItemPriceTotal() int64 {
	if m != nil && m.WinItemPriceTotal != nil {
		return *m.WinItemPriceTotal
	}
	return 0
}

func (m *WishPoolReportMonth) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *WishPoolReportMonth) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *WishPoolReportMonth) GetProductDiamondTotal() int64 {
	if m != nil && m.ProductDiamondTotal != nil {
		return *m.ProductDiamondTotal
	}
	return 0
}

// 盲盒报表
type WishBoxReport struct {
	Id                   *string `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	WishPlayerCount      *int32  `protobuf:"varint,2,opt,name=WishPlayerCount" json:"WishPlayerCount,omitempty" bson:"WishPlayerCount,omitempty"`
	AddPlayerCount       *int32  `protobuf:"varint,3,opt,name=AddPlayerCount" json:"AddPlayerCount,omitempty" bson:"AddPlayerCount,omitempty"`
	DrawPlayerCount      *int32  `protobuf:"varint,4,opt,name=DrawPlayerCount" json:"DrawPlayerCount,omitempty" bson:"DrawPlayerCount,omitempty"`
	DrawCount            *int32  `protobuf:"varint,5,opt,name=DrawCount" json:"DrawCount,omitempty" bson:"DrawCount,omitempty"`
	LuckyWishCount       *int32  `protobuf:"varint,6,opt,name=LuckyWishCount" json:"LuckyWishCount,omitempty" bson:"LuckyWishCount,omitempty"`
	ConvertCount         *int32  `protobuf:"varint,7,opt,name=ConvertCount" json:"ConvertCount,omitempty" bson:"ConvertCount,omitempty"`
	RecycleCount         *int32  `protobuf:"varint,8,opt,name=RecycleCount" json:"RecycleCount,omitempty" bson:"RecycleCount,omitempty"`
	PlayerRecycleCount   *int32  `protobuf:"varint,9,opt,name=PlayerRecycleCount" json:"PlayerRecycleCount,omitempty" bson:"PlayerRecycleCount,omitempty"`
	OfficialRecycleCount *int32  `protobuf:"varint,10,opt,name=OfficialRecycleCount" json:"OfficialRecycleCount,omitempty" bson:"OfficialRecycleCount,omitempty"`
	RecycleGoldTotal     *int64  `protobuf:"varint,11,opt,name=RecycleGoldTotal" json:"RecycleGoldTotal,omitempty" bson:"RecycleGoldTotal,omitempty"`
	//optional int64 DrawGoldTotal = 12; // 抽奖合计（钻石）
	LuckyGoldTotal             *int64   `protobuf:"varint,12,opt,name=LuckyGoldTotal" json:"LuckyGoldTotal,omitempty" bson:"LuckyGoldTotal,omitempty"`
	ConvertGoodsPriceTotal     *int64   `protobuf:"varint,13,opt,name=ConvertGoodsPriceTotal" json:"ConvertGoodsPriceTotal,omitempty" bson:"ConvertGoodsPriceTotal,omitempty"`
	CommissionTotal            *int32   `protobuf:"varint,14,opt,name=CommissionTotal" json:"CommissionTotal,omitempty" bson:"CommissionTotal,omitempty"`
	PendConvertGoodsPriceTotal *int64   `protobuf:"varint,15,opt,name=PendConvertGoodsPriceTotal" json:"PendConvertGoodsPriceTotal,omitempty" bson:"PendConvertGoodsPriceTotal,omitempty"`
	PendConvertCount           *int32   `protobuf:"varint,16,opt,name=PendConvertCount" json:"PendConvertCount,omitempty" bson:"PendConvertCount,omitempty"`
	PlayerRecycleGoldTotal     *int64   `protobuf:"varint,17,opt,name=PlayerRecycleGoldTotal" json:"PlayerRecycleGoldTotal,omitempty" bson:"PlayerRecycleGoldTotal,omitempty"`
	OfficialRecycleGoldTotal   *int64   `protobuf:"varint,18,opt,name=OfficialRecycleGoldTotal" json:"OfficialRecycleGoldTotal,omitempty" bson:"OfficialRecycleGoldTotal,omitempty"`
	Profit                     *int64   `protobuf:"varint,20,opt,name=Profit" json:"Profit,omitempty" bson:"Profit,omitempty"`
	ConvertDiamondPlayerCount  *int32   `protobuf:"varint,28,opt,name=ConvertDiamondPlayerCount" json:"ConvertDiamondPlayerCount,omitempty" bson:"ConvertDiamondPlayerCount,omitempty"`
	RecyclePlayerCount         *int32   `protobuf:"varint,30,opt,name=RecyclePlayerCount" json:"RecyclePlayerCount,omitempty" bson:"RecyclePlayerCount,omitempty"`
	DeliverCount               *int64   `protobuf:"varint,31,opt,name=DeliverCount" json:"DeliverCount,omitempty" bson:"DeliverCount,omitempty"`
	DeliverPlayerCount         *int32   `protobuf:"varint,32,opt,name=DeliverPlayerCount" json:"DeliverPlayerCount,omitempty" bson:"DeliverPlayerCount,omitempty"`
	WishPoolReportId           *int64   `protobuf:"varint,33,opt,name=WishPoolReportId" json:"WishPoolReportId,omitempty" bson:"WishPoolReportId,omitempty"`
	CreateTime                 *int64   `protobuf:"varint,34,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	BoxId                      *int64   `protobuf:"varint,35,opt,name=BoxId" json:"BoxId,omitempty" bson:"BoxId,omitempty"`
	BoxName                    *string  `protobuf:"bytes,36,opt,name=BoxName" json:"BoxName,omitempty" bson:"BoxName,omitempty"`
	WinItemPriceTotal          *int64   `protobuf:"varint,45,opt,name=WinItemPriceTotal" json:"WinItemPriceTotal,omitempty" bson:"WinItemPriceTotal,omitempty"`
	ProductDiamondTotal        *int64   `protobuf:"varint,46,opt,name=ProductDiamondTotal" json:"ProductDiamondTotal,omitempty" bson:"ProductDiamondTotal,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-" bson:"-"`
	XXX_unrecognized           []byte   `json:"-" bson:"-"`
	XXX_sizecache              int32    `json:"-" bson:"-"`
}

func (m *WishBoxReport) Reset()         { *m = WishBoxReport{} }
func (m *WishBoxReport) String() string { return proto.CompactTextString(m) }
func (*WishBoxReport) ProtoMessage()    {}
func (*WishBoxReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{37}
}
func (m *WishBoxReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishBoxReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishBoxReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishBoxReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishBoxReport.Merge(m, src)
}
func (m *WishBoxReport) XXX_Size() int {
	return m.Size()
}
func (m *WishBoxReport) XXX_DiscardUnknown() {
	xxx_messageInfo_WishBoxReport.DiscardUnknown(m)
}

var xxx_messageInfo_WishBoxReport proto.InternalMessageInfo

func (m *WishBoxReport) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *WishBoxReport) GetWishPlayerCount() int32 {
	if m != nil && m.WishPlayerCount != nil {
		return *m.WishPlayerCount
	}
	return 0
}

func (m *WishBoxReport) GetAddPlayerCount() int32 {
	if m != nil && m.AddPlayerCount != nil {
		return *m.AddPlayerCount
	}
	return 0
}

func (m *WishBoxReport) GetDrawPlayerCount() int32 {
	if m != nil && m.DrawPlayerCount != nil {
		return *m.DrawPlayerCount
	}
	return 0
}

func (m *WishBoxReport) GetDrawCount() int32 {
	if m != nil && m.DrawCount != nil {
		return *m.DrawCount
	}
	return 0
}

func (m *WishBoxReport) GetLuckyWishCount() int32 {
	if m != nil && m.LuckyWishCount != nil {
		return *m.LuckyWishCount
	}
	return 0
}

func (m *WishBoxReport) GetConvertCount() int32 {
	if m != nil && m.ConvertCount != nil {
		return *m.ConvertCount
	}
	return 0
}

func (m *WishBoxReport) GetRecycleCount() int32 {
	if m != nil && m.RecycleCount != nil {
		return *m.RecycleCount
	}
	return 0
}

func (m *WishBoxReport) GetPlayerRecycleCount() int32 {
	if m != nil && m.PlayerRecycleCount != nil {
		return *m.PlayerRecycleCount
	}
	return 0
}

func (m *WishBoxReport) GetOfficialRecycleCount() int32 {
	if m != nil && m.OfficialRecycleCount != nil {
		return *m.OfficialRecycleCount
	}
	return 0
}

func (m *WishBoxReport) GetRecycleGoldTotal() int64 {
	if m != nil && m.RecycleGoldTotal != nil {
		return *m.RecycleGoldTotal
	}
	return 0
}

func (m *WishBoxReport) GetLuckyGoldTotal() int64 {
	if m != nil && m.LuckyGoldTotal != nil {
		return *m.LuckyGoldTotal
	}
	return 0
}

func (m *WishBoxReport) GetConvertGoodsPriceTotal() int64 {
	if m != nil && m.ConvertGoodsPriceTotal != nil {
		return *m.ConvertGoodsPriceTotal
	}
	return 0
}

func (m *WishBoxReport) GetCommissionTotal() int32 {
	if m != nil && m.CommissionTotal != nil {
		return *m.CommissionTotal
	}
	return 0
}

func (m *WishBoxReport) GetPendConvertGoodsPriceTotal() int64 {
	if m != nil && m.PendConvertGoodsPriceTotal != nil {
		return *m.PendConvertGoodsPriceTotal
	}
	return 0
}

func (m *WishBoxReport) GetPendConvertCount() int32 {
	if m != nil && m.PendConvertCount != nil {
		return *m.PendConvertCount
	}
	return 0
}

func (m *WishBoxReport) GetPlayerRecycleGoldTotal() int64 {
	if m != nil && m.PlayerRecycleGoldTotal != nil {
		return *m.PlayerRecycleGoldTotal
	}
	return 0
}

func (m *WishBoxReport) GetOfficialRecycleGoldTotal() int64 {
	if m != nil && m.OfficialRecycleGoldTotal != nil {
		return *m.OfficialRecycleGoldTotal
	}
	return 0
}

func (m *WishBoxReport) GetProfit() int64 {
	if m != nil && m.Profit != nil {
		return *m.Profit
	}
	return 0
}

func (m *WishBoxReport) GetConvertDiamondPlayerCount() int32 {
	if m != nil && m.ConvertDiamondPlayerCount != nil {
		return *m.ConvertDiamondPlayerCount
	}
	return 0
}

func (m *WishBoxReport) GetRecyclePlayerCount() int32 {
	if m != nil && m.RecyclePlayerCount != nil {
		return *m.RecyclePlayerCount
	}
	return 0
}

func (m *WishBoxReport) GetDeliverCount() int64 {
	if m != nil && m.DeliverCount != nil {
		return *m.DeliverCount
	}
	return 0
}

func (m *WishBoxReport) GetDeliverPlayerCount() int32 {
	if m != nil && m.DeliverPlayerCount != nil {
		return *m.DeliverPlayerCount
	}
	return 0
}

func (m *WishBoxReport) GetWishPoolReportId() int64 {
	if m != nil && m.WishPoolReportId != nil {
		return *m.WishPoolReportId
	}
	return 0
}

func (m *WishBoxReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishBoxReport) GetBoxId() int64 {
	if m != nil && m.BoxId != nil {
		return *m.BoxId
	}
	return 0
}

func (m *WishBoxReport) GetBoxName() string {
	if m != nil && m.BoxName != nil {
		return *m.BoxName
	}
	return ""
}

func (m *WishBoxReport) GetWinItemPriceTotal() int64 {
	if m != nil && m.WinItemPriceTotal != nil {
		return *m.WinItemPriceTotal
	}
	return 0
}

func (m *WishBoxReport) GetProductDiamondTotal() int64 {
	if m != nil && m.ProductDiamondTotal != nil {
		return *m.ProductDiamondTotal
	}
	return 0
}

// 盲盒报表-周表
type WishBoxReportWeek struct {
	Id                   *string `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	WishPlayerCount      *int32  `protobuf:"varint,2,opt,name=WishPlayerCount" json:"WishPlayerCount,omitempty" bson:"WishPlayerCount,omitempty"`
	AddPlayerCount       *int32  `protobuf:"varint,3,opt,name=AddPlayerCount" json:"AddPlayerCount,omitempty" bson:"AddPlayerCount,omitempty"`
	DrawPlayerCount      *int32  `protobuf:"varint,4,opt,name=DrawPlayerCount" json:"DrawPlayerCount,omitempty" bson:"DrawPlayerCount,omitempty"`
	DrawCount            *int32  `protobuf:"varint,5,opt,name=DrawCount" json:"DrawCount,omitempty" bson:"DrawCount,omitempty"`
	LuckyWishCount       *int32  `protobuf:"varint,6,opt,name=LuckyWishCount" json:"LuckyWishCount,omitempty" bson:"LuckyWishCount,omitempty"`
	ConvertCount         *int32  `protobuf:"varint,7,opt,name=ConvertCount" json:"ConvertCount,omitempty" bson:"ConvertCount,omitempty"`
	RecycleCount         *int32  `protobuf:"varint,8,opt,name=RecycleCount" json:"RecycleCount,omitempty" bson:"RecycleCount,omitempty"`
	PlayerRecycleCount   *int32  `protobuf:"varint,9,opt,name=PlayerRecycleCount" json:"PlayerRecycleCount,omitempty" bson:"PlayerRecycleCount,omitempty"`
	OfficialRecycleCount *int32  `protobuf:"varint,10,opt,name=OfficialRecycleCount" json:"OfficialRecycleCount,omitempty" bson:"OfficialRecycleCount,omitempty"`
	RecycleGoldTotal     *int64  `protobuf:"varint,11,opt,name=RecycleGoldTotal" json:"RecycleGoldTotal,omitempty" bson:"RecycleGoldTotal,omitempty"`
	//optional int64 DrawGoldTotal = 12; // 抽奖合计（钻石）
	LuckyGoldTotal             *int64   `protobuf:"varint,12,opt,name=LuckyGoldTotal" json:"LuckyGoldTotal,omitempty" bson:"LuckyGoldTotal,omitempty"`
	ConvertGoodsPriceTotal     *int64   `protobuf:"varint,13,opt,name=ConvertGoodsPriceTotal" json:"ConvertGoodsPriceTotal,omitempty" bson:"ConvertGoodsPriceTotal,omitempty"`
	CommissionTotal            *int32   `protobuf:"varint,14,opt,name=CommissionTotal" json:"CommissionTotal,omitempty" bson:"CommissionTotal,omitempty"`
	PendConvertGoodsPriceTotal *int64   `protobuf:"varint,15,opt,name=PendConvertGoodsPriceTotal" json:"PendConvertGoodsPriceTotal,omitempty" bson:"PendConvertGoodsPriceTotal,omitempty"`
	PendConvertCount           *int32   `protobuf:"varint,16,opt,name=PendConvertCount" json:"PendConvertCount,omitempty" bson:"PendConvertCount,omitempty"`
	PlayerRecycleGoldTotal     *int64   `protobuf:"varint,17,opt,name=PlayerRecycleGoldTotal" json:"PlayerRecycleGoldTotal,omitempty" bson:"PlayerRecycleGoldTotal,omitempty"`
	OfficialRecycleGoldTotal   *int64   `protobuf:"varint,18,opt,name=OfficialRecycleGoldTotal" json:"OfficialRecycleGoldTotal,omitempty" bson:"OfficialRecycleGoldTotal,omitempty"`
	Profit                     *int64   `protobuf:"varint,20,opt,name=Profit" json:"Profit,omitempty" bson:"Profit,omitempty"`
	ConvertDiamondPlayerCount  *int32   `protobuf:"varint,28,opt,name=ConvertDiamondPlayerCount" json:"ConvertDiamondPlayerCount,omitempty" bson:"ConvertDiamondPlayerCount,omitempty"`
	RecyclePlayerCount         *int32   `protobuf:"varint,30,opt,name=RecyclePlayerCount" json:"RecyclePlayerCount,omitempty" bson:"RecyclePlayerCount,omitempty"`
	DeliverCount               *int64   `protobuf:"varint,31,opt,name=DeliverCount" json:"DeliverCount,omitempty" bson:"DeliverCount,omitempty"`
	DeliverPlayerCount         *int32   `protobuf:"varint,32,opt,name=DeliverPlayerCount" json:"DeliverPlayerCount,omitempty" bson:"DeliverPlayerCount,omitempty"`
	WishPoolReportId           *int64   `protobuf:"varint,33,opt,name=WishPoolReportId" json:"WishPoolReportId,omitempty" bson:"WishPoolReportId,omitempty"`
	CreateTime                 *int64   `protobuf:"varint,34,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	BoxId                      *int64   `protobuf:"varint,35,opt,name=BoxId" json:"BoxId,omitempty" bson:"BoxId,omitempty"`
	BoxName                    *string  `protobuf:"bytes,36,opt,name=BoxName" json:"BoxName,omitempty" bson:"BoxName,omitempty"`
	WinItemPriceTotal          *int64   `protobuf:"varint,45,opt,name=WinItemPriceTotal" json:"WinItemPriceTotal,omitempty" bson:"WinItemPriceTotal,omitempty"`
	StartTime                  *int64   `protobuf:"varint,46,opt,name=StartTime" json:"StartTime,omitempty" bson:"StartTime,omitempty"`
	EndTime                    *int64   `protobuf:"varint,47,opt,name=EndTime" json:"EndTime,omitempty" bson:"EndTime,omitempty"`
	ProductDiamondTotal        *int64   `protobuf:"varint,48,opt,name=ProductDiamondTotal" json:"ProductDiamondTotal,omitempty" bson:"ProductDiamondTotal,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-" bson:"-"`
	XXX_unrecognized           []byte   `json:"-" bson:"-"`
	XXX_sizecache              int32    `json:"-" bson:"-"`
}

func (m *WishBoxReportWeek) Reset()         { *m = WishBoxReportWeek{} }
func (m *WishBoxReportWeek) String() string { return proto.CompactTextString(m) }
func (*WishBoxReportWeek) ProtoMessage()    {}
func (*WishBoxReportWeek) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{38}
}
func (m *WishBoxReportWeek) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishBoxReportWeek) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishBoxReportWeek.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishBoxReportWeek) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishBoxReportWeek.Merge(m, src)
}
func (m *WishBoxReportWeek) XXX_Size() int {
	return m.Size()
}
func (m *WishBoxReportWeek) XXX_DiscardUnknown() {
	xxx_messageInfo_WishBoxReportWeek.DiscardUnknown(m)
}

var xxx_messageInfo_WishBoxReportWeek proto.InternalMessageInfo

func (m *WishBoxReportWeek) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *WishBoxReportWeek) GetWishPlayerCount() int32 {
	if m != nil && m.WishPlayerCount != nil {
		return *m.WishPlayerCount
	}
	return 0
}

func (m *WishBoxReportWeek) GetAddPlayerCount() int32 {
	if m != nil && m.AddPlayerCount != nil {
		return *m.AddPlayerCount
	}
	return 0
}

func (m *WishBoxReportWeek) GetDrawPlayerCount() int32 {
	if m != nil && m.DrawPlayerCount != nil {
		return *m.DrawPlayerCount
	}
	return 0
}

func (m *WishBoxReportWeek) GetDrawCount() int32 {
	if m != nil && m.DrawCount != nil {
		return *m.DrawCount
	}
	return 0
}

func (m *WishBoxReportWeek) GetLuckyWishCount() int32 {
	if m != nil && m.LuckyWishCount != nil {
		return *m.LuckyWishCount
	}
	return 0
}

func (m *WishBoxReportWeek) GetConvertCount() int32 {
	if m != nil && m.ConvertCount != nil {
		return *m.ConvertCount
	}
	return 0
}

func (m *WishBoxReportWeek) GetRecycleCount() int32 {
	if m != nil && m.RecycleCount != nil {
		return *m.RecycleCount
	}
	return 0
}

func (m *WishBoxReportWeek) GetPlayerRecycleCount() int32 {
	if m != nil && m.PlayerRecycleCount != nil {
		return *m.PlayerRecycleCount
	}
	return 0
}

func (m *WishBoxReportWeek) GetOfficialRecycleCount() int32 {
	if m != nil && m.OfficialRecycleCount != nil {
		return *m.OfficialRecycleCount
	}
	return 0
}

func (m *WishBoxReportWeek) GetRecycleGoldTotal() int64 {
	if m != nil && m.RecycleGoldTotal != nil {
		return *m.RecycleGoldTotal
	}
	return 0
}

func (m *WishBoxReportWeek) GetLuckyGoldTotal() int64 {
	if m != nil && m.LuckyGoldTotal != nil {
		return *m.LuckyGoldTotal
	}
	return 0
}

func (m *WishBoxReportWeek) GetConvertGoodsPriceTotal() int64 {
	if m != nil && m.ConvertGoodsPriceTotal != nil {
		return *m.ConvertGoodsPriceTotal
	}
	return 0
}

func (m *WishBoxReportWeek) GetCommissionTotal() int32 {
	if m != nil && m.CommissionTotal != nil {
		return *m.CommissionTotal
	}
	return 0
}

func (m *WishBoxReportWeek) GetPendConvertGoodsPriceTotal() int64 {
	if m != nil && m.PendConvertGoodsPriceTotal != nil {
		return *m.PendConvertGoodsPriceTotal
	}
	return 0
}

func (m *WishBoxReportWeek) GetPendConvertCount() int32 {
	if m != nil && m.PendConvertCount != nil {
		return *m.PendConvertCount
	}
	return 0
}

func (m *WishBoxReportWeek) GetPlayerRecycleGoldTotal() int64 {
	if m != nil && m.PlayerRecycleGoldTotal != nil {
		return *m.PlayerRecycleGoldTotal
	}
	return 0
}

func (m *WishBoxReportWeek) GetOfficialRecycleGoldTotal() int64 {
	if m != nil && m.OfficialRecycleGoldTotal != nil {
		return *m.OfficialRecycleGoldTotal
	}
	return 0
}

func (m *WishBoxReportWeek) GetProfit() int64 {
	if m != nil && m.Profit != nil {
		return *m.Profit
	}
	return 0
}

func (m *WishBoxReportWeek) GetConvertDiamondPlayerCount() int32 {
	if m != nil && m.ConvertDiamondPlayerCount != nil {
		return *m.ConvertDiamondPlayerCount
	}
	return 0
}

func (m *WishBoxReportWeek) GetRecyclePlayerCount() int32 {
	if m != nil && m.RecyclePlayerCount != nil {
		return *m.RecyclePlayerCount
	}
	return 0
}

func (m *WishBoxReportWeek) GetDeliverCount() int64 {
	if m != nil && m.DeliverCount != nil {
		return *m.DeliverCount
	}
	return 0
}

func (m *WishBoxReportWeek) GetDeliverPlayerCount() int32 {
	if m != nil && m.DeliverPlayerCount != nil {
		return *m.DeliverPlayerCount
	}
	return 0
}

func (m *WishBoxReportWeek) GetWishPoolReportId() int64 {
	if m != nil && m.WishPoolReportId != nil {
		return *m.WishPoolReportId
	}
	return 0
}

func (m *WishBoxReportWeek) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishBoxReportWeek) GetBoxId() int64 {
	if m != nil && m.BoxId != nil {
		return *m.BoxId
	}
	return 0
}

func (m *WishBoxReportWeek) GetBoxName() string {
	if m != nil && m.BoxName != nil {
		return *m.BoxName
	}
	return ""
}

func (m *WishBoxReportWeek) GetWinItemPriceTotal() int64 {
	if m != nil && m.WinItemPriceTotal != nil {
		return *m.WinItemPriceTotal
	}
	return 0
}

func (m *WishBoxReportWeek) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *WishBoxReportWeek) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *WishBoxReportWeek) GetProductDiamondTotal() int64 {
	if m != nil && m.ProductDiamondTotal != nil {
		return *m.ProductDiamondTotal
	}
	return 0
}

// 盲盒报表-月表
type WishBoxReportMonth struct {
	Id                   *string `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	WishPlayerCount      *int32  `protobuf:"varint,2,opt,name=WishPlayerCount" json:"WishPlayerCount,omitempty" bson:"WishPlayerCount,omitempty"`
	AddPlayerCount       *int32  `protobuf:"varint,3,opt,name=AddPlayerCount" json:"AddPlayerCount,omitempty" bson:"AddPlayerCount,omitempty"`
	DrawPlayerCount      *int32  `protobuf:"varint,4,opt,name=DrawPlayerCount" json:"DrawPlayerCount,omitempty" bson:"DrawPlayerCount,omitempty"`
	DrawCount            *int32  `protobuf:"varint,5,opt,name=DrawCount" json:"DrawCount,omitempty" bson:"DrawCount,omitempty"`
	LuckyWishCount       *int32  `protobuf:"varint,6,opt,name=LuckyWishCount" json:"LuckyWishCount,omitempty" bson:"LuckyWishCount,omitempty"`
	ConvertCount         *int32  `protobuf:"varint,7,opt,name=ConvertCount" json:"ConvertCount,omitempty" bson:"ConvertCount,omitempty"`
	RecycleCount         *int32  `protobuf:"varint,8,opt,name=RecycleCount" json:"RecycleCount,omitempty" bson:"RecycleCount,omitempty"`
	PlayerRecycleCount   *int32  `protobuf:"varint,9,opt,name=PlayerRecycleCount" json:"PlayerRecycleCount,omitempty" bson:"PlayerRecycleCount,omitempty"`
	OfficialRecycleCount *int32  `protobuf:"varint,10,opt,name=OfficialRecycleCount" json:"OfficialRecycleCount,omitempty" bson:"OfficialRecycleCount,omitempty"`
	RecycleGoldTotal     *int64  `protobuf:"varint,11,opt,name=RecycleGoldTotal" json:"RecycleGoldTotal,omitempty" bson:"RecycleGoldTotal,omitempty"`
	//optional int64 DrawGoldTotal = 12; // 抽奖合计（钻石）
	LuckyGoldTotal             *int64   `protobuf:"varint,12,opt,name=LuckyGoldTotal" json:"LuckyGoldTotal,omitempty" bson:"LuckyGoldTotal,omitempty"`
	ConvertGoodsPriceTotal     *int64   `protobuf:"varint,13,opt,name=ConvertGoodsPriceTotal" json:"ConvertGoodsPriceTotal,omitempty" bson:"ConvertGoodsPriceTotal,omitempty"`
	CommissionTotal            *int32   `protobuf:"varint,14,opt,name=CommissionTotal" json:"CommissionTotal,omitempty" bson:"CommissionTotal,omitempty"`
	PendConvertGoodsPriceTotal *int64   `protobuf:"varint,15,opt,name=PendConvertGoodsPriceTotal" json:"PendConvertGoodsPriceTotal,omitempty" bson:"PendConvertGoodsPriceTotal,omitempty"`
	PendConvertCount           *int32   `protobuf:"varint,16,opt,name=PendConvertCount" json:"PendConvertCount,omitempty" bson:"PendConvertCount,omitempty"`
	PlayerRecycleGoldTotal     *int64   `protobuf:"varint,17,opt,name=PlayerRecycleGoldTotal" json:"PlayerRecycleGoldTotal,omitempty" bson:"PlayerRecycleGoldTotal,omitempty"`
	OfficialRecycleGoldTotal   *int64   `protobuf:"varint,18,opt,name=OfficialRecycleGoldTotal" json:"OfficialRecycleGoldTotal,omitempty" bson:"OfficialRecycleGoldTotal,omitempty"`
	Profit                     *int64   `protobuf:"varint,20,opt,name=Profit" json:"Profit,omitempty" bson:"Profit,omitempty"`
	ConvertDiamondPlayerCount  *int32   `protobuf:"varint,28,opt,name=ConvertDiamondPlayerCount" json:"ConvertDiamondPlayerCount,omitempty" bson:"ConvertDiamondPlayerCount,omitempty"`
	RecyclePlayerCount         *int32   `protobuf:"varint,30,opt,name=RecyclePlayerCount" json:"RecyclePlayerCount,omitempty" bson:"RecyclePlayerCount,omitempty"`
	DeliverCount               *int64   `protobuf:"varint,31,opt,name=DeliverCount" json:"DeliverCount,omitempty" bson:"DeliverCount,omitempty"`
	DeliverPlayerCount         *int32   `protobuf:"varint,32,opt,name=DeliverPlayerCount" json:"DeliverPlayerCount,omitempty" bson:"DeliverPlayerCount,omitempty"`
	WishPoolReportId           *int64   `protobuf:"varint,33,opt,name=WishPoolReportId" json:"WishPoolReportId,omitempty" bson:"WishPoolReportId,omitempty"`
	CreateTime                 *int64   `protobuf:"varint,34,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	BoxId                      *int64   `protobuf:"varint,35,opt,name=BoxId" json:"BoxId,omitempty" bson:"BoxId,omitempty"`
	BoxName                    *string  `protobuf:"bytes,36,opt,name=BoxName" json:"BoxName,omitempty" bson:"BoxName,omitempty"`
	WinItemPriceTotal          *int64   `protobuf:"varint,45,opt,name=WinItemPriceTotal" json:"WinItemPriceTotal,omitempty" bson:"WinItemPriceTotal,omitempty"`
	StartTime                  *int64   `protobuf:"varint,46,opt,name=StartTime" json:"StartTime,omitempty" bson:"StartTime,omitempty"`
	EndTime                    *int64   `protobuf:"varint,47,opt,name=EndTime" json:"EndTime,omitempty" bson:"EndTime,omitempty"`
	ProductDiamondTotal        *int64   `protobuf:"varint,48,opt,name=ProductDiamondTotal" json:"ProductDiamondTotal,omitempty" bson:"ProductDiamondTotal,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-" bson:"-"`
	XXX_unrecognized           []byte   `json:"-" bson:"-"`
	XXX_sizecache              int32    `json:"-" bson:"-"`
}

func (m *WishBoxReportMonth) Reset()         { *m = WishBoxReportMonth{} }
func (m *WishBoxReportMonth) String() string { return proto.CompactTextString(m) }
func (*WishBoxReportMonth) ProtoMessage()    {}
func (*WishBoxReportMonth) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{39}
}
func (m *WishBoxReportMonth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishBoxReportMonth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishBoxReportMonth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishBoxReportMonth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishBoxReportMonth.Merge(m, src)
}
func (m *WishBoxReportMonth) XXX_Size() int {
	return m.Size()
}
func (m *WishBoxReportMonth) XXX_DiscardUnknown() {
	xxx_messageInfo_WishBoxReportMonth.DiscardUnknown(m)
}

var xxx_messageInfo_WishBoxReportMonth proto.InternalMessageInfo

func (m *WishBoxReportMonth) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *WishBoxReportMonth) GetWishPlayerCount() int32 {
	if m != nil && m.WishPlayerCount != nil {
		return *m.WishPlayerCount
	}
	return 0
}

func (m *WishBoxReportMonth) GetAddPlayerCount() int32 {
	if m != nil && m.AddPlayerCount != nil {
		return *m.AddPlayerCount
	}
	return 0
}

func (m *WishBoxReportMonth) GetDrawPlayerCount() int32 {
	if m != nil && m.DrawPlayerCount != nil {
		return *m.DrawPlayerCount
	}
	return 0
}

func (m *WishBoxReportMonth) GetDrawCount() int32 {
	if m != nil && m.DrawCount != nil {
		return *m.DrawCount
	}
	return 0
}

func (m *WishBoxReportMonth) GetLuckyWishCount() int32 {
	if m != nil && m.LuckyWishCount != nil {
		return *m.LuckyWishCount
	}
	return 0
}

func (m *WishBoxReportMonth) GetConvertCount() int32 {
	if m != nil && m.ConvertCount != nil {
		return *m.ConvertCount
	}
	return 0
}

func (m *WishBoxReportMonth) GetRecycleCount() int32 {
	if m != nil && m.RecycleCount != nil {
		return *m.RecycleCount
	}
	return 0
}

func (m *WishBoxReportMonth) GetPlayerRecycleCount() int32 {
	if m != nil && m.PlayerRecycleCount != nil {
		return *m.PlayerRecycleCount
	}
	return 0
}

func (m *WishBoxReportMonth) GetOfficialRecycleCount() int32 {
	if m != nil && m.OfficialRecycleCount != nil {
		return *m.OfficialRecycleCount
	}
	return 0
}

func (m *WishBoxReportMonth) GetRecycleGoldTotal() int64 {
	if m != nil && m.RecycleGoldTotal != nil {
		return *m.RecycleGoldTotal
	}
	return 0
}

func (m *WishBoxReportMonth) GetLuckyGoldTotal() int64 {
	if m != nil && m.LuckyGoldTotal != nil {
		return *m.LuckyGoldTotal
	}
	return 0
}

func (m *WishBoxReportMonth) GetConvertGoodsPriceTotal() int64 {
	if m != nil && m.ConvertGoodsPriceTotal != nil {
		return *m.ConvertGoodsPriceTotal
	}
	return 0
}

func (m *WishBoxReportMonth) GetCommissionTotal() int32 {
	if m != nil && m.CommissionTotal != nil {
		return *m.CommissionTotal
	}
	return 0
}

func (m *WishBoxReportMonth) GetPendConvertGoodsPriceTotal() int64 {
	if m != nil && m.PendConvertGoodsPriceTotal != nil {
		return *m.PendConvertGoodsPriceTotal
	}
	return 0
}

func (m *WishBoxReportMonth) GetPendConvertCount() int32 {
	if m != nil && m.PendConvertCount != nil {
		return *m.PendConvertCount
	}
	return 0
}

func (m *WishBoxReportMonth) GetPlayerRecycleGoldTotal() int64 {
	if m != nil && m.PlayerRecycleGoldTotal != nil {
		return *m.PlayerRecycleGoldTotal
	}
	return 0
}

func (m *WishBoxReportMonth) GetOfficialRecycleGoldTotal() int64 {
	if m != nil && m.OfficialRecycleGoldTotal != nil {
		return *m.OfficialRecycleGoldTotal
	}
	return 0
}

func (m *WishBoxReportMonth) GetProfit() int64 {
	if m != nil && m.Profit != nil {
		return *m.Profit
	}
	return 0
}

func (m *WishBoxReportMonth) GetConvertDiamondPlayerCount() int32 {
	if m != nil && m.ConvertDiamondPlayerCount != nil {
		return *m.ConvertDiamondPlayerCount
	}
	return 0
}

func (m *WishBoxReportMonth) GetRecyclePlayerCount() int32 {
	if m != nil && m.RecyclePlayerCount != nil {
		return *m.RecyclePlayerCount
	}
	return 0
}

func (m *WishBoxReportMonth) GetDeliverCount() int64 {
	if m != nil && m.DeliverCount != nil {
		return *m.DeliverCount
	}
	return 0
}

func (m *WishBoxReportMonth) GetDeliverPlayerCount() int32 {
	if m != nil && m.DeliverPlayerCount != nil {
		return *m.DeliverPlayerCount
	}
	return 0
}

func (m *WishBoxReportMonth) GetWishPoolReportId() int64 {
	if m != nil && m.WishPoolReportId != nil {
		return *m.WishPoolReportId
	}
	return 0
}

func (m *WishBoxReportMonth) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishBoxReportMonth) GetBoxId() int64 {
	if m != nil && m.BoxId != nil {
		return *m.BoxId
	}
	return 0
}

func (m *WishBoxReportMonth) GetBoxName() string {
	if m != nil && m.BoxName != nil {
		return *m.BoxName
	}
	return ""
}

func (m *WishBoxReportMonth) GetWinItemPriceTotal() int64 {
	if m != nil && m.WinItemPriceTotal != nil {
		return *m.WinItemPriceTotal
	}
	return 0
}

func (m *WishBoxReportMonth) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *WishBoxReportMonth) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *WishBoxReportMonth) GetProductDiamondTotal() int64 {
	if m != nil && m.ProductDiamondTotal != nil {
		return *m.ProductDiamondTotal
	}
	return 0
}

// 盲盒详情报表
type WishBoxDetailReport struct {
	Id                       *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	WishPlayerCount          *int32   `protobuf:"varint,2,opt,name=WishPlayerCount" json:"WishPlayerCount,omitempty" bson:"WishPlayerCount,omitempty"`
	WishAndDrawPlayerCount   *int32   `protobuf:"varint,3,opt,name=WishAndDrawPlayerCount" json:"WishAndDrawPlayerCount,omitempty" bson:"WishAndDrawPlayerCount,omitempty"`
	WinCount                 *int32   `protobuf:"varint,4,opt,name=WinCount" json:"WinCount,omitempty" bson:"WinCount,omitempty"`
	LuckyWishCount           *int32   `protobuf:"varint,6,opt,name=LuckyWishCount" json:"LuckyWishCount,omitempty" bson:"LuckyWishCount,omitempty"`
	ConvertCount             *int32   `protobuf:"varint,7,opt,name=ConvertCount" json:"ConvertCount,omitempty" bson:"ConvertCount,omitempty"`
	RecycleCount             *int32   `protobuf:"varint,8,opt,name=RecycleCount" json:"RecycleCount,omitempty" bson:"RecycleCount,omitempty"`
	PlayerRecycleCount       *int32   `protobuf:"varint,9,opt,name=PlayerRecycleCount" json:"PlayerRecycleCount,omitempty" bson:"PlayerRecycleCount,omitempty"`
	OfficialRecycleCount     *int32   `protobuf:"varint,10,opt,name=OfficialRecycleCount" json:"OfficialRecycleCount,omitempty" bson:"OfficialRecycleCount,omitempty"`
	RecycleGoldTotal         *int64   `protobuf:"varint,11,opt,name=RecycleGoldTotal" json:"RecycleGoldTotal,omitempty" bson:"RecycleGoldTotal,omitempty"`
	LuckyGoldTotal           *int64   `protobuf:"varint,12,opt,name=LuckyGoldTotal" json:"LuckyGoldTotal,omitempty" bson:"LuckyGoldTotal,omitempty"`
	ConvertGoodsPriceTotal   *int64   `protobuf:"varint,13,opt,name=ConvertGoodsPriceTotal" json:"ConvertGoodsPriceTotal,omitempty" bson:"ConvertGoodsPriceTotal,omitempty"`
	PendConvertCount         *int32   `protobuf:"varint,16,opt,name=PendConvertCount" json:"PendConvertCount,omitempty" bson:"PendConvertCount,omitempty"`
	PlayerRecycleGoldTotal   *int64   `protobuf:"varint,17,opt,name=PlayerRecycleGoldTotal" json:"PlayerRecycleGoldTotal,omitempty" bson:"PlayerRecycleGoldTotal,omitempty"`
	OfficialRecycleGoldTotal *int64   `protobuf:"varint,18,opt,name=OfficialRecycleGoldTotal" json:"OfficialRecycleGoldTotal,omitempty" bson:"OfficialRecycleGoldTotal,omitempty"`
	PendConvertPriceTotal    *int64   `protobuf:"varint,19,opt,name=PendConvertPriceTotal" json:"PendConvertPriceTotal,omitempty" bson:"PendConvertPriceTotal,omitempty"`
	Profit                   *int64   `protobuf:"varint,20,opt,name=Profit" json:"Profit,omitempty" bson:"Profit,omitempty"`
	RecyclePlayerCount       *int32   `protobuf:"varint,29,opt,name=RecyclePlayerCount" json:"RecyclePlayerCount,omitempty" bson:"RecyclePlayerCount,omitempty"`
	DeliverCount             *int64   `protobuf:"varint,30,opt,name=DeliverCount" json:"DeliverCount,omitempty" bson:"DeliverCount,omitempty"`
	DeliverPlayerCount       *int32   `protobuf:"varint,31,opt,name=DeliverPlayerCount" json:"DeliverPlayerCount,omitempty" bson:"DeliverPlayerCount,omitempty"`
	WishBoxId                *int64   `protobuf:"varint,32,opt,name=WishBoxId" json:"WishBoxId,omitempty" bson:"WishBoxId,omitempty"`
	WishBoxReportId          *string  `protobuf:"bytes,33,opt,name=WishBoxReportId" json:"WishBoxReportId,omitempty" bson:"WishBoxReportId,omitempty"`
	CreateTime               *int64   `protobuf:"varint,34,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	ItemId                   *int64   `protobuf:"varint,35,opt,name=ItemId" json:"ItemId,omitempty" bson:"ItemId,omitempty"`
	ItemName                 *string  `protobuf:"bytes,36,opt,name=ItemName" json:"ItemName,omitempty" bson:"ItemName,omitempty"`
	Style                    *int32   `protobuf:"varint,37,opt,name=Style" json:"Style,omitempty" bson:"Style,omitempty"`
	AuditConvertCount        *int32   `protobuf:"varint,40,opt,name=AuditConvertCount" json:"AuditConvertCount,omitempty" bson:"AuditConvertCount,omitempty"`
	AuditConvertPriceTotal   *int64   `protobuf:"varint,41,opt,name=AuditConvertPriceTotal" json:"AuditConvertPriceTotal,omitempty" bson:"AuditConvertPriceTotal,omitempty"`
	WinItemPriceTotal        *int64   `protobuf:"varint,45,opt,name=WinItemPriceTotal" json:"WinItemPriceTotal,omitempty" bson:"WinItemPriceTotal,omitempty"`
	ProductDiamondTotal      *int64   `protobuf:"varint,46,opt,name=ProductDiamondTotal" json:"ProductDiamondTotal,omitempty" bson:"ProductDiamondTotal,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-" bson:"-"`
	XXX_unrecognized         []byte   `json:"-" bson:"-"`
	XXX_sizecache            int32    `json:"-" bson:"-"`
}

func (m *WishBoxDetailReport) Reset()         { *m = WishBoxDetailReport{} }
func (m *WishBoxDetailReport) String() string { return proto.CompactTextString(m) }
func (*WishBoxDetailReport) ProtoMessage()    {}
func (*WishBoxDetailReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{40}
}
func (m *WishBoxDetailReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishBoxDetailReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishBoxDetailReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishBoxDetailReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishBoxDetailReport.Merge(m, src)
}
func (m *WishBoxDetailReport) XXX_Size() int {
	return m.Size()
}
func (m *WishBoxDetailReport) XXX_DiscardUnknown() {
	xxx_messageInfo_WishBoxDetailReport.DiscardUnknown(m)
}

var xxx_messageInfo_WishBoxDetailReport proto.InternalMessageInfo

func (m *WishBoxDetailReport) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *WishBoxDetailReport) GetWishPlayerCount() int32 {
	if m != nil && m.WishPlayerCount != nil {
		return *m.WishPlayerCount
	}
	return 0
}

func (m *WishBoxDetailReport) GetWishAndDrawPlayerCount() int32 {
	if m != nil && m.WishAndDrawPlayerCount != nil {
		return *m.WishAndDrawPlayerCount
	}
	return 0
}

func (m *WishBoxDetailReport) GetWinCount() int32 {
	if m != nil && m.WinCount != nil {
		return *m.WinCount
	}
	return 0
}

func (m *WishBoxDetailReport) GetLuckyWishCount() int32 {
	if m != nil && m.LuckyWishCount != nil {
		return *m.LuckyWishCount
	}
	return 0
}

func (m *WishBoxDetailReport) GetConvertCount() int32 {
	if m != nil && m.ConvertCount != nil {
		return *m.ConvertCount
	}
	return 0
}

func (m *WishBoxDetailReport) GetRecycleCount() int32 {
	if m != nil && m.RecycleCount != nil {
		return *m.RecycleCount
	}
	return 0
}

func (m *WishBoxDetailReport) GetPlayerRecycleCount() int32 {
	if m != nil && m.PlayerRecycleCount != nil {
		return *m.PlayerRecycleCount
	}
	return 0
}

func (m *WishBoxDetailReport) GetOfficialRecycleCount() int32 {
	if m != nil && m.OfficialRecycleCount != nil {
		return *m.OfficialRecycleCount
	}
	return 0
}

func (m *WishBoxDetailReport) GetRecycleGoldTotal() int64 {
	if m != nil && m.RecycleGoldTotal != nil {
		return *m.RecycleGoldTotal
	}
	return 0
}

func (m *WishBoxDetailReport) GetLuckyGoldTotal() int64 {
	if m != nil && m.LuckyGoldTotal != nil {
		return *m.LuckyGoldTotal
	}
	return 0
}

func (m *WishBoxDetailReport) GetConvertGoodsPriceTotal() int64 {
	if m != nil && m.ConvertGoodsPriceTotal != nil {
		return *m.ConvertGoodsPriceTotal
	}
	return 0
}

func (m *WishBoxDetailReport) GetPendConvertCount() int32 {
	if m != nil && m.PendConvertCount != nil {
		return *m.PendConvertCount
	}
	return 0
}

func (m *WishBoxDetailReport) GetPlayerRecycleGoldTotal() int64 {
	if m != nil && m.PlayerRecycleGoldTotal != nil {
		return *m.PlayerRecycleGoldTotal
	}
	return 0
}

func (m *WishBoxDetailReport) GetOfficialRecycleGoldTotal() int64 {
	if m != nil && m.OfficialRecycleGoldTotal != nil {
		return *m.OfficialRecycleGoldTotal
	}
	return 0
}

func (m *WishBoxDetailReport) GetPendConvertPriceTotal() int64 {
	if m != nil && m.PendConvertPriceTotal != nil {
		return *m.PendConvertPriceTotal
	}
	return 0
}

func (m *WishBoxDetailReport) GetProfit() int64 {
	if m != nil && m.Profit != nil {
		return *m.Profit
	}
	return 0
}

func (m *WishBoxDetailReport) GetRecyclePlayerCount() int32 {
	if m != nil && m.RecyclePlayerCount != nil {
		return *m.RecyclePlayerCount
	}
	return 0
}

func (m *WishBoxDetailReport) GetDeliverCount() int64 {
	if m != nil && m.DeliverCount != nil {
		return *m.DeliverCount
	}
	return 0
}

func (m *WishBoxDetailReport) GetDeliverPlayerCount() int32 {
	if m != nil && m.DeliverPlayerCount != nil {
		return *m.DeliverPlayerCount
	}
	return 0
}

func (m *WishBoxDetailReport) GetWishBoxId() int64 {
	if m != nil && m.WishBoxId != nil {
		return *m.WishBoxId
	}
	return 0
}

func (m *WishBoxDetailReport) GetWishBoxReportId() string {
	if m != nil && m.WishBoxReportId != nil {
		return *m.WishBoxReportId
	}
	return ""
}

func (m *WishBoxDetailReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishBoxDetailReport) GetItemId() int64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *WishBoxDetailReport) GetItemName() string {
	if m != nil && m.ItemName != nil {
		return *m.ItemName
	}
	return ""
}

func (m *WishBoxDetailReport) GetStyle() int32 {
	if m != nil && m.Style != nil {
		return *m.Style
	}
	return 0
}

func (m *WishBoxDetailReport) GetAuditConvertCount() int32 {
	if m != nil && m.AuditConvertCount != nil {
		return *m.AuditConvertCount
	}
	return 0
}

func (m *WishBoxDetailReport) GetAuditConvertPriceTotal() int64 {
	if m != nil && m.AuditConvertPriceTotal != nil {
		return *m.AuditConvertPriceTotal
	}
	return 0
}

func (m *WishBoxDetailReport) GetWinItemPriceTotal() int64 {
	if m != nil && m.WinItemPriceTotal != nil {
		return *m.WinItemPriceTotal
	}
	return 0
}

func (m *WishBoxDetailReport) GetProductDiamondTotal() int64 {
	if m != nil && m.ProductDiamondTotal != nil {
		return *m.ProductDiamondTotal
	}
	return 0
}

// 盲盒详情报表-周表
type WishBoxDetailReportWeek struct {
	Id                       *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	WishPlayerCount          *int32   `protobuf:"varint,2,opt,name=WishPlayerCount" json:"WishPlayerCount,omitempty" bson:"WishPlayerCount,omitempty"`
	WishAndDrawPlayerCount   *int32   `protobuf:"varint,3,opt,name=WishAndDrawPlayerCount" json:"WishAndDrawPlayerCount,omitempty" bson:"WishAndDrawPlayerCount,omitempty"`
	WinCount                 *int32   `protobuf:"varint,4,opt,name=WinCount" json:"WinCount,omitempty" bson:"WinCount,omitempty"`
	LuckyWishCount           *int32   `protobuf:"varint,6,opt,name=LuckyWishCount" json:"LuckyWishCount,omitempty" bson:"LuckyWishCount,omitempty"`
	ConvertCount             *int32   `protobuf:"varint,7,opt,name=ConvertCount" json:"ConvertCount,omitempty" bson:"ConvertCount,omitempty"`
	RecycleCount             *int32   `protobuf:"varint,8,opt,name=RecycleCount" json:"RecycleCount,omitempty" bson:"RecycleCount,omitempty"`
	PlayerRecycleCount       *int32   `protobuf:"varint,9,opt,name=PlayerRecycleCount" json:"PlayerRecycleCount,omitempty" bson:"PlayerRecycleCount,omitempty"`
	OfficialRecycleCount     *int32   `protobuf:"varint,10,opt,name=OfficialRecycleCount" json:"OfficialRecycleCount,omitempty" bson:"OfficialRecycleCount,omitempty"`
	RecycleGoldTotal         *int64   `protobuf:"varint,11,opt,name=RecycleGoldTotal" json:"RecycleGoldTotal,omitempty" bson:"RecycleGoldTotal,omitempty"`
	LuckyGoldTotal           *int64   `protobuf:"varint,12,opt,name=LuckyGoldTotal" json:"LuckyGoldTotal,omitempty" bson:"LuckyGoldTotal,omitempty"`
	ConvertGoodsPriceTotal   *int64   `protobuf:"varint,13,opt,name=ConvertGoodsPriceTotal" json:"ConvertGoodsPriceTotal,omitempty" bson:"ConvertGoodsPriceTotal,omitempty"`
	PendConvertCount         *int32   `protobuf:"varint,16,opt,name=PendConvertCount" json:"PendConvertCount,omitempty" bson:"PendConvertCount,omitempty"`
	PlayerRecycleGoldTotal   *int64   `protobuf:"varint,17,opt,name=PlayerRecycleGoldTotal" json:"PlayerRecycleGoldTotal,omitempty" bson:"PlayerRecycleGoldTotal,omitempty"`
	OfficialRecycleGoldTotal *int64   `protobuf:"varint,18,opt,name=OfficialRecycleGoldTotal" json:"OfficialRecycleGoldTotal,omitempty" bson:"OfficialRecycleGoldTotal,omitempty"`
	PendConvertPriceTotal    *int64   `protobuf:"varint,19,opt,name=PendConvertPriceTotal" json:"PendConvertPriceTotal,omitempty" bson:"PendConvertPriceTotal,omitempty"`
	Profit                   *int64   `protobuf:"varint,20,opt,name=Profit" json:"Profit,omitempty" bson:"Profit,omitempty"`
	RecyclePlayerCount       *int32   `protobuf:"varint,29,opt,name=RecyclePlayerCount" json:"RecyclePlayerCount,omitempty" bson:"RecyclePlayerCount,omitempty"`
	DeliverCount             *int64   `protobuf:"varint,30,opt,name=DeliverCount" json:"DeliverCount,omitempty" bson:"DeliverCount,omitempty"`
	DeliverPlayerCount       *int32   `protobuf:"varint,31,opt,name=DeliverPlayerCount" json:"DeliverPlayerCount,omitempty" bson:"DeliverPlayerCount,omitempty"`
	WishBoxId                *int64   `protobuf:"varint,32,opt,name=WishBoxId" json:"WishBoxId,omitempty" bson:"WishBoxId,omitempty"`
	WishBoxReportId          *string  `protobuf:"bytes,33,opt,name=WishBoxReportId" json:"WishBoxReportId,omitempty" bson:"WishBoxReportId,omitempty"`
	CreateTime               *int64   `protobuf:"varint,34,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	ItemId                   *int64   `protobuf:"varint,35,opt,name=ItemId" json:"ItemId,omitempty" bson:"ItemId,omitempty"`
	ItemName                 *string  `protobuf:"bytes,36,opt,name=ItemName" json:"ItemName,omitempty" bson:"ItemName,omitempty"`
	Style                    *int32   `protobuf:"varint,37,opt,name=Style" json:"Style,omitempty" bson:"Style,omitempty"`
	AuditConvertCount        *int32   `protobuf:"varint,40,opt,name=AuditConvertCount" json:"AuditConvertCount,omitempty" bson:"AuditConvertCount,omitempty"`
	AuditConvertPriceTotal   *int64   `protobuf:"varint,41,opt,name=AuditConvertPriceTotal" json:"AuditConvertPriceTotal,omitempty" bson:"AuditConvertPriceTotal,omitempty"`
	WinItemPriceTotal        *int64   `protobuf:"varint,45,opt,name=WinItemPriceTotal" json:"WinItemPriceTotal,omitempty" bson:"WinItemPriceTotal,omitempty"`
	StartTime                *int64   `protobuf:"varint,46,opt,name=StartTime" json:"StartTime,omitempty" bson:"StartTime,omitempty"`
	EndTime                  *int64   `protobuf:"varint,47,opt,name=EndTime" json:"EndTime,omitempty" bson:"EndTime,omitempty"`
	ProductDiamondTotal      *int64   `protobuf:"varint,48,opt,name=ProductDiamondTotal" json:"ProductDiamondTotal,omitempty" bson:"ProductDiamondTotal,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-" bson:"-"`
	XXX_unrecognized         []byte   `json:"-" bson:"-"`
	XXX_sizecache            int32    `json:"-" bson:"-"`
}

func (m *WishBoxDetailReportWeek) Reset()         { *m = WishBoxDetailReportWeek{} }
func (m *WishBoxDetailReportWeek) String() string { return proto.CompactTextString(m) }
func (*WishBoxDetailReportWeek) ProtoMessage()    {}
func (*WishBoxDetailReportWeek) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{41}
}
func (m *WishBoxDetailReportWeek) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishBoxDetailReportWeek) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishBoxDetailReportWeek.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishBoxDetailReportWeek) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishBoxDetailReportWeek.Merge(m, src)
}
func (m *WishBoxDetailReportWeek) XXX_Size() int {
	return m.Size()
}
func (m *WishBoxDetailReportWeek) XXX_DiscardUnknown() {
	xxx_messageInfo_WishBoxDetailReportWeek.DiscardUnknown(m)
}

var xxx_messageInfo_WishBoxDetailReportWeek proto.InternalMessageInfo

func (m *WishBoxDetailReportWeek) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *WishBoxDetailReportWeek) GetWishPlayerCount() int32 {
	if m != nil && m.WishPlayerCount != nil {
		return *m.WishPlayerCount
	}
	return 0
}

func (m *WishBoxDetailReportWeek) GetWishAndDrawPlayerCount() int32 {
	if m != nil && m.WishAndDrawPlayerCount != nil {
		return *m.WishAndDrawPlayerCount
	}
	return 0
}

func (m *WishBoxDetailReportWeek) GetWinCount() int32 {
	if m != nil && m.WinCount != nil {
		return *m.WinCount
	}
	return 0
}

func (m *WishBoxDetailReportWeek) GetLuckyWishCount() int32 {
	if m != nil && m.LuckyWishCount != nil {
		return *m.LuckyWishCount
	}
	return 0
}

func (m *WishBoxDetailReportWeek) GetConvertCount() int32 {
	if m != nil && m.ConvertCount != nil {
		return *m.ConvertCount
	}
	return 0
}

func (m *WishBoxDetailReportWeek) GetRecycleCount() int32 {
	if m != nil && m.RecycleCount != nil {
		return *m.RecycleCount
	}
	return 0
}

func (m *WishBoxDetailReportWeek) GetPlayerRecycleCount() int32 {
	if m != nil && m.PlayerRecycleCount != nil {
		return *m.PlayerRecycleCount
	}
	return 0
}

func (m *WishBoxDetailReportWeek) GetOfficialRecycleCount() int32 {
	if m != nil && m.OfficialRecycleCount != nil {
		return *m.OfficialRecycleCount
	}
	return 0
}

func (m *WishBoxDetailReportWeek) GetRecycleGoldTotal() int64 {
	if m != nil && m.RecycleGoldTotal != nil {
		return *m.RecycleGoldTotal
	}
	return 0
}

func (m *WishBoxDetailReportWeek) GetLuckyGoldTotal() int64 {
	if m != nil && m.LuckyGoldTotal != nil {
		return *m.LuckyGoldTotal
	}
	return 0
}

func (m *WishBoxDetailReportWeek) GetConvertGoodsPriceTotal() int64 {
	if m != nil && m.ConvertGoodsPriceTotal != nil {
		return *m.ConvertGoodsPriceTotal
	}
	return 0
}

func (m *WishBoxDetailReportWeek) GetPendConvertCount() int32 {
	if m != nil && m.PendConvertCount != nil {
		return *m.PendConvertCount
	}
	return 0
}

func (m *WishBoxDetailReportWeek) GetPlayerRecycleGoldTotal() int64 {
	if m != nil && m.PlayerRecycleGoldTotal != nil {
		return *m.PlayerRecycleGoldTotal
	}
	return 0
}

func (m *WishBoxDetailReportWeek) GetOfficialRecycleGoldTotal() int64 {
	if m != nil && m.OfficialRecycleGoldTotal != nil {
		return *m.OfficialRecycleGoldTotal
	}
	return 0
}

func (m *WishBoxDetailReportWeek) GetPendConvertPriceTotal() int64 {
	if m != nil && m.PendConvertPriceTotal != nil {
		return *m.PendConvertPriceTotal
	}
	return 0
}

func (m *WishBoxDetailReportWeek) GetProfit() int64 {
	if m != nil && m.Profit != nil {
		return *m.Profit
	}
	return 0
}

func (m *WishBoxDetailReportWeek) GetRecyclePlayerCount() int32 {
	if m != nil && m.RecyclePlayerCount != nil {
		return *m.RecyclePlayerCount
	}
	return 0
}

func (m *WishBoxDetailReportWeek) GetDeliverCount() int64 {
	if m != nil && m.DeliverCount != nil {
		return *m.DeliverCount
	}
	return 0
}

func (m *WishBoxDetailReportWeek) GetDeliverPlayerCount() int32 {
	if m != nil && m.DeliverPlayerCount != nil {
		return *m.DeliverPlayerCount
	}
	return 0
}

func (m *WishBoxDetailReportWeek) GetWishBoxId() int64 {
	if m != nil && m.WishBoxId != nil {
		return *m.WishBoxId
	}
	return 0
}

func (m *WishBoxDetailReportWeek) GetWishBoxReportId() string {
	if m != nil && m.WishBoxReportId != nil {
		return *m.WishBoxReportId
	}
	return ""
}

func (m *WishBoxDetailReportWeek) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishBoxDetailReportWeek) GetItemId() int64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *WishBoxDetailReportWeek) GetItemName() string {
	if m != nil && m.ItemName != nil {
		return *m.ItemName
	}
	return ""
}

func (m *WishBoxDetailReportWeek) GetStyle() int32 {
	if m != nil && m.Style != nil {
		return *m.Style
	}
	return 0
}

func (m *WishBoxDetailReportWeek) GetAuditConvertCount() int32 {
	if m != nil && m.AuditConvertCount != nil {
		return *m.AuditConvertCount
	}
	return 0
}

func (m *WishBoxDetailReportWeek) GetAuditConvertPriceTotal() int64 {
	if m != nil && m.AuditConvertPriceTotal != nil {
		return *m.AuditConvertPriceTotal
	}
	return 0
}

func (m *WishBoxDetailReportWeek) GetWinItemPriceTotal() int64 {
	if m != nil && m.WinItemPriceTotal != nil {
		return *m.WinItemPriceTotal
	}
	return 0
}

func (m *WishBoxDetailReportWeek) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *WishBoxDetailReportWeek) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *WishBoxDetailReportWeek) GetProductDiamondTotal() int64 {
	if m != nil && m.ProductDiamondTotal != nil {
		return *m.ProductDiamondTotal
	}
	return 0
}

type WishBoxDetailReportMonth struct {
	Id                       *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	WishPlayerCount          *int32   `protobuf:"varint,2,opt,name=WishPlayerCount" json:"WishPlayerCount,omitempty" bson:"WishPlayerCount,omitempty"`
	WishAndDrawPlayerCount   *int32   `protobuf:"varint,3,opt,name=WishAndDrawPlayerCount" json:"WishAndDrawPlayerCount,omitempty" bson:"WishAndDrawPlayerCount,omitempty"`
	WinCount                 *int32   `protobuf:"varint,4,opt,name=WinCount" json:"WinCount,omitempty" bson:"WinCount,omitempty"`
	LuckyWishCount           *int32   `protobuf:"varint,6,opt,name=LuckyWishCount" json:"LuckyWishCount,omitempty" bson:"LuckyWishCount,omitempty"`
	ConvertCount             *int32   `protobuf:"varint,7,opt,name=ConvertCount" json:"ConvertCount,omitempty" bson:"ConvertCount,omitempty"`
	RecycleCount             *int32   `protobuf:"varint,8,opt,name=RecycleCount" json:"RecycleCount,omitempty" bson:"RecycleCount,omitempty"`
	PlayerRecycleCount       *int32   `protobuf:"varint,9,opt,name=PlayerRecycleCount" json:"PlayerRecycleCount,omitempty" bson:"PlayerRecycleCount,omitempty"`
	OfficialRecycleCount     *int32   `protobuf:"varint,10,opt,name=OfficialRecycleCount" json:"OfficialRecycleCount,omitempty" bson:"OfficialRecycleCount,omitempty"`
	RecycleGoldTotal         *int64   `protobuf:"varint,11,opt,name=RecycleGoldTotal" json:"RecycleGoldTotal,omitempty" bson:"RecycleGoldTotal,omitempty"`
	LuckyGoldTotal           *int64   `protobuf:"varint,12,opt,name=LuckyGoldTotal" json:"LuckyGoldTotal,omitempty" bson:"LuckyGoldTotal,omitempty"`
	ConvertGoodsPriceTotal   *int64   `protobuf:"varint,13,opt,name=ConvertGoodsPriceTotal" json:"ConvertGoodsPriceTotal,omitempty" bson:"ConvertGoodsPriceTotal,omitempty"`
	PendConvertCount         *int32   `protobuf:"varint,16,opt,name=PendConvertCount" json:"PendConvertCount,omitempty" bson:"PendConvertCount,omitempty"`
	PlayerRecycleGoldTotal   *int64   `protobuf:"varint,17,opt,name=PlayerRecycleGoldTotal" json:"PlayerRecycleGoldTotal,omitempty" bson:"PlayerRecycleGoldTotal,omitempty"`
	OfficialRecycleGoldTotal *int64   `protobuf:"varint,18,opt,name=OfficialRecycleGoldTotal" json:"OfficialRecycleGoldTotal,omitempty" bson:"OfficialRecycleGoldTotal,omitempty"`
	PendConvertPriceTotal    *int64   `protobuf:"varint,19,opt,name=PendConvertPriceTotal" json:"PendConvertPriceTotal,omitempty" bson:"PendConvertPriceTotal,omitempty"`
	Profit                   *int64   `protobuf:"varint,20,opt,name=Profit" json:"Profit,omitempty" bson:"Profit,omitempty"`
	RecyclePlayerCount       *int32   `protobuf:"varint,29,opt,name=RecyclePlayerCount" json:"RecyclePlayerCount,omitempty" bson:"RecyclePlayerCount,omitempty"`
	DeliverCount             *int64   `protobuf:"varint,30,opt,name=DeliverCount" json:"DeliverCount,omitempty" bson:"DeliverCount,omitempty"`
	DeliverPlayerCount       *int32   `protobuf:"varint,31,opt,name=DeliverPlayerCount" json:"DeliverPlayerCount,omitempty" bson:"DeliverPlayerCount,omitempty"`
	WishBoxId                *int64   `protobuf:"varint,32,opt,name=WishBoxId" json:"WishBoxId,omitempty" bson:"WishBoxId,omitempty"`
	WishBoxReportId          *string  `protobuf:"bytes,33,opt,name=WishBoxReportId" json:"WishBoxReportId,omitempty" bson:"WishBoxReportId,omitempty"`
	CreateTime               *int64   `protobuf:"varint,34,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	ItemId                   *int64   `protobuf:"varint,35,opt,name=ItemId" json:"ItemId,omitempty" bson:"ItemId,omitempty"`
	ItemName                 *string  `protobuf:"bytes,36,opt,name=ItemName" json:"ItemName,omitempty" bson:"ItemName,omitempty"`
	Style                    *int32   `protobuf:"varint,37,opt,name=Style" json:"Style,omitempty" bson:"Style,omitempty"`
	AuditConvertCount        *int32   `protobuf:"varint,40,opt,name=AuditConvertCount" json:"AuditConvertCount,omitempty" bson:"AuditConvertCount,omitempty"`
	AuditConvertPriceTotal   *int64   `protobuf:"varint,41,opt,name=AuditConvertPriceTotal" json:"AuditConvertPriceTotal,omitempty" bson:"AuditConvertPriceTotal,omitempty"`
	WinItemPriceTotal        *int64   `protobuf:"varint,45,opt,name=WinItemPriceTotal" json:"WinItemPriceTotal,omitempty" bson:"WinItemPriceTotal,omitempty"`
	StartTime                *int64   `protobuf:"varint,46,opt,name=StartTime" json:"StartTime,omitempty" bson:"StartTime,omitempty"`
	EndTime                  *int64   `protobuf:"varint,47,opt,name=EndTime" json:"EndTime,omitempty" bson:"EndTime,omitempty"`
	ProductDiamondTotal      *int64   `protobuf:"varint,48,opt,name=ProductDiamondTotal" json:"ProductDiamondTotal,omitempty" bson:"ProductDiamondTotal,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-" bson:"-"`
	XXX_unrecognized         []byte   `json:"-" bson:"-"`
	XXX_sizecache            int32    `json:"-" bson:"-"`
}

func (m *WishBoxDetailReportMonth) Reset()         { *m = WishBoxDetailReportMonth{} }
func (m *WishBoxDetailReportMonth) String() string { return proto.CompactTextString(m) }
func (*WishBoxDetailReportMonth) ProtoMessage()    {}
func (*WishBoxDetailReportMonth) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{42}
}
func (m *WishBoxDetailReportMonth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishBoxDetailReportMonth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishBoxDetailReportMonth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishBoxDetailReportMonth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishBoxDetailReportMonth.Merge(m, src)
}
func (m *WishBoxDetailReportMonth) XXX_Size() int {
	return m.Size()
}
func (m *WishBoxDetailReportMonth) XXX_DiscardUnknown() {
	xxx_messageInfo_WishBoxDetailReportMonth.DiscardUnknown(m)
}

var xxx_messageInfo_WishBoxDetailReportMonth proto.InternalMessageInfo

func (m *WishBoxDetailReportMonth) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *WishBoxDetailReportMonth) GetWishPlayerCount() int32 {
	if m != nil && m.WishPlayerCount != nil {
		return *m.WishPlayerCount
	}
	return 0
}

func (m *WishBoxDetailReportMonth) GetWishAndDrawPlayerCount() int32 {
	if m != nil && m.WishAndDrawPlayerCount != nil {
		return *m.WishAndDrawPlayerCount
	}
	return 0
}

func (m *WishBoxDetailReportMonth) GetWinCount() int32 {
	if m != nil && m.WinCount != nil {
		return *m.WinCount
	}
	return 0
}

func (m *WishBoxDetailReportMonth) GetLuckyWishCount() int32 {
	if m != nil && m.LuckyWishCount != nil {
		return *m.LuckyWishCount
	}
	return 0
}

func (m *WishBoxDetailReportMonth) GetConvertCount() int32 {
	if m != nil && m.ConvertCount != nil {
		return *m.ConvertCount
	}
	return 0
}

func (m *WishBoxDetailReportMonth) GetRecycleCount() int32 {
	if m != nil && m.RecycleCount != nil {
		return *m.RecycleCount
	}
	return 0
}

func (m *WishBoxDetailReportMonth) GetPlayerRecycleCount() int32 {
	if m != nil && m.PlayerRecycleCount != nil {
		return *m.PlayerRecycleCount
	}
	return 0
}

func (m *WishBoxDetailReportMonth) GetOfficialRecycleCount() int32 {
	if m != nil && m.OfficialRecycleCount != nil {
		return *m.OfficialRecycleCount
	}
	return 0
}

func (m *WishBoxDetailReportMonth) GetRecycleGoldTotal() int64 {
	if m != nil && m.RecycleGoldTotal != nil {
		return *m.RecycleGoldTotal
	}
	return 0
}

func (m *WishBoxDetailReportMonth) GetLuckyGoldTotal() int64 {
	if m != nil && m.LuckyGoldTotal != nil {
		return *m.LuckyGoldTotal
	}
	return 0
}

func (m *WishBoxDetailReportMonth) GetConvertGoodsPriceTotal() int64 {
	if m != nil && m.ConvertGoodsPriceTotal != nil {
		return *m.ConvertGoodsPriceTotal
	}
	return 0
}

func (m *WishBoxDetailReportMonth) GetPendConvertCount() int32 {
	if m != nil && m.PendConvertCount != nil {
		return *m.PendConvertCount
	}
	return 0
}

func (m *WishBoxDetailReportMonth) GetPlayerRecycleGoldTotal() int64 {
	if m != nil && m.PlayerRecycleGoldTotal != nil {
		return *m.PlayerRecycleGoldTotal
	}
	return 0
}

func (m *WishBoxDetailReportMonth) GetOfficialRecycleGoldTotal() int64 {
	if m != nil && m.OfficialRecycleGoldTotal != nil {
		return *m.OfficialRecycleGoldTotal
	}
	return 0
}

func (m *WishBoxDetailReportMonth) GetPendConvertPriceTotal() int64 {
	if m != nil && m.PendConvertPriceTotal != nil {
		return *m.PendConvertPriceTotal
	}
	return 0
}

func (m *WishBoxDetailReportMonth) GetProfit() int64 {
	if m != nil && m.Profit != nil {
		return *m.Profit
	}
	return 0
}

func (m *WishBoxDetailReportMonth) GetRecyclePlayerCount() int32 {
	if m != nil && m.RecyclePlayerCount != nil {
		return *m.RecyclePlayerCount
	}
	return 0
}

func (m *WishBoxDetailReportMonth) GetDeliverCount() int64 {
	if m != nil && m.DeliverCount != nil {
		return *m.DeliverCount
	}
	return 0
}

func (m *WishBoxDetailReportMonth) GetDeliverPlayerCount() int32 {
	if m != nil && m.DeliverPlayerCount != nil {
		return *m.DeliverPlayerCount
	}
	return 0
}

func (m *WishBoxDetailReportMonth) GetWishBoxId() int64 {
	if m != nil && m.WishBoxId != nil {
		return *m.WishBoxId
	}
	return 0
}

func (m *WishBoxDetailReportMonth) GetWishBoxReportId() string {
	if m != nil && m.WishBoxReportId != nil {
		return *m.WishBoxReportId
	}
	return ""
}

func (m *WishBoxDetailReportMonth) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishBoxDetailReportMonth) GetItemId() int64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *WishBoxDetailReportMonth) GetItemName() string {
	if m != nil && m.ItemName != nil {
		return *m.ItemName
	}
	return ""
}

func (m *WishBoxDetailReportMonth) GetStyle() int32 {
	if m != nil && m.Style != nil {
		return *m.Style
	}
	return 0
}

func (m *WishBoxDetailReportMonth) GetAuditConvertCount() int32 {
	if m != nil && m.AuditConvertCount != nil {
		return *m.AuditConvertCount
	}
	return 0
}

func (m *WishBoxDetailReportMonth) GetAuditConvertPriceTotal() int64 {
	if m != nil && m.AuditConvertPriceTotal != nil {
		return *m.AuditConvertPriceTotal
	}
	return 0
}

func (m *WishBoxDetailReportMonth) GetWinItemPriceTotal() int64 {
	if m != nil && m.WinItemPriceTotal != nil {
		return *m.WinItemPriceTotal
	}
	return 0
}

func (m *WishBoxDetailReportMonth) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *WishBoxDetailReportMonth) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *WishBoxDetailReportMonth) GetProductDiamondTotal() int64 {
	if m != nil && m.ProductDiamondTotal != nil {
		return *m.ProductDiamondTotal
	}
	return 0
}

// 商品报表
type WishItemReport struct {
	Id                     *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	CreateTime             *int64   `protobuf:"varint,2,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	ItemId                 *int64   `protobuf:"varint,3,opt,name=ItemId" json:"ItemId,omitempty" bson:"ItemId,omitempty"`
	WishPlayerCount        *int32   `protobuf:"varint,4,opt,name=WishPlayerCount" json:"WishPlayerCount,omitempty" bson:"WishPlayerCount,omitempty"`
	WishAndDrawPlayerCount *int32   `protobuf:"varint,5,opt,name=WishAndDrawPlayerCount" json:"WishAndDrawPlayerCount,omitempty" bson:"WishAndDrawPlayerCount,omitempty"`
	WinCount               *int32   `protobuf:"varint,6,opt,name=WinCount" json:"WinCount,omitempty" bson:"WinCount,omitempty"`
	LuckyWishCount         *int32   `protobuf:"varint,7,opt,name=LuckyWishCount" json:"LuckyWishCount,omitempty" bson:"LuckyWishCount,omitempty"`
	PendConvertCount       *int32   `protobuf:"varint,16,opt,name=PendConvertCount" json:"PendConvertCount,omitempty" bson:"PendConvertCount,omitempty"`
	ConvertCount           *int32   `protobuf:"varint,17,opt,name=ConvertCount" json:"ConvertCount,omitempty" bson:"ConvertCount,omitempty"`
	RecycleCount           *int32   `protobuf:"varint,18,opt,name=RecycleCount" json:"RecycleCount,omitempty" bson:"RecycleCount,omitempty"`
	PlayerRecycleCount     *int32   `protobuf:"varint,19,opt,name=PlayerRecycleCount" json:"PlayerRecycleCount,omitempty" bson:"PlayerRecycleCount,omitempty"`
	OfficialRecycleCount   *int32   `protobuf:"varint,20,opt,name=OfficialRecycleCount" json:"OfficialRecycleCount,omitempty" bson:"OfficialRecycleCount,omitempty"`
	RecycleGoldTotal       *int64   `protobuf:"varint,21,opt,name=RecycleGoldTotal" json:"RecycleGoldTotal,omitempty" bson:"RecycleGoldTotal,omitempty"`
	LuckyGoldTotal         *int64   `protobuf:"varint,22,opt,name=LuckyGoldTotal" json:"LuckyGoldTotal,omitempty" bson:"LuckyGoldTotal,omitempty"`
	ItemName               *string  `protobuf:"bytes,36,opt,name=ItemName" json:"ItemName,omitempty" bson:"ItemName,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-" bson:"-"`
	XXX_unrecognized       []byte   `json:"-" bson:"-"`
	XXX_sizecache          int32    `json:"-" bson:"-"`
}

func (m *WishItemReport) Reset()         { *m = WishItemReport{} }
func (m *WishItemReport) String() string { return proto.CompactTextString(m) }
func (*WishItemReport) ProtoMessage()    {}
func (*WishItemReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{43}
}
func (m *WishItemReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishItemReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishItemReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishItemReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishItemReport.Merge(m, src)
}
func (m *WishItemReport) XXX_Size() int {
	return m.Size()
}
func (m *WishItemReport) XXX_DiscardUnknown() {
	xxx_messageInfo_WishItemReport.DiscardUnknown(m)
}

var xxx_messageInfo_WishItemReport proto.InternalMessageInfo

func (m *WishItemReport) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *WishItemReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishItemReport) GetItemId() int64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *WishItemReport) GetWishPlayerCount() int32 {
	if m != nil && m.WishPlayerCount != nil {
		return *m.WishPlayerCount
	}
	return 0
}

func (m *WishItemReport) GetWishAndDrawPlayerCount() int32 {
	if m != nil && m.WishAndDrawPlayerCount != nil {
		return *m.WishAndDrawPlayerCount
	}
	return 0
}

func (m *WishItemReport) GetWinCount() int32 {
	if m != nil && m.WinCount != nil {
		return *m.WinCount
	}
	return 0
}

func (m *WishItemReport) GetLuckyWishCount() int32 {
	if m != nil && m.LuckyWishCount != nil {
		return *m.LuckyWishCount
	}
	return 0
}

func (m *WishItemReport) GetPendConvertCount() int32 {
	if m != nil && m.PendConvertCount != nil {
		return *m.PendConvertCount
	}
	return 0
}

func (m *WishItemReport) GetConvertCount() int32 {
	if m != nil && m.ConvertCount != nil {
		return *m.ConvertCount
	}
	return 0
}

func (m *WishItemReport) GetRecycleCount() int32 {
	if m != nil && m.RecycleCount != nil {
		return *m.RecycleCount
	}
	return 0
}

func (m *WishItemReport) GetPlayerRecycleCount() int32 {
	if m != nil && m.PlayerRecycleCount != nil {
		return *m.PlayerRecycleCount
	}
	return 0
}

func (m *WishItemReport) GetOfficialRecycleCount() int32 {
	if m != nil && m.OfficialRecycleCount != nil {
		return *m.OfficialRecycleCount
	}
	return 0
}

func (m *WishItemReport) GetRecycleGoldTotal() int64 {
	if m != nil && m.RecycleGoldTotal != nil {
		return *m.RecycleGoldTotal
	}
	return 0
}

func (m *WishItemReport) GetLuckyGoldTotal() int64 {
	if m != nil && m.LuckyGoldTotal != nil {
		return *m.LuckyGoldTotal
	}
	return 0
}

func (m *WishItemReport) GetItemName() string {
	if m != nil && m.ItemName != nil {
		return *m.ItemName
	}
	return ""
}

// 水池抽水日志 wish_pool_pump_log/tool_wish_pool_pump_log
type WishPoolPumpLog struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	BoxId                *int64   `protobuf:"varint,2,opt,name=BoxId" json:"BoxId,omitempty" bson:"BoxId,omitempty"`
	PoolId               *int64   `protobuf:"varint,3,opt,name=PoolId" json:"PoolId,omitempty" bson:"PoolId,omitempty"`
	Price                *int64   `protobuf:"varint,4,opt,name=Price" json:"Price,omitempty" bson:"Price,omitempty"`
	CreateTime           *int64   `protobuf:"varint,5,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	IncomeValue          *int64   `protobuf:"varint,6,opt,name=IncomeValue" json:"IncomeValue,omitempty" bson:"IncomeValue,omitempty"`
	BoxName              *string  `protobuf:"bytes,10,opt,name=BoxName" json:"-" bson:"-"`
	PoolName             *string  `protobuf:"bytes,11,opt,name=PoolName" json:"-" bson:"-"`
	GoroutineID          *int64   `protobuf:"varint,64,opt,name=GoroutineID" json:"GoroutineID,omitempty" bson:"GoroutineID,omitempty"`
	CreateTimeMill       *int64   `protobuf:"varint,63,opt,name=CreateTimeMill" json:"CreateTimeMill,omitempty" bson:"CreateTimeMill,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishPoolPumpLog) Reset()         { *m = WishPoolPumpLog{} }
func (m *WishPoolPumpLog) String() string { return proto.CompactTextString(m) }
func (*WishPoolPumpLog) ProtoMessage()    {}
func (*WishPoolPumpLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{44}
}
func (m *WishPoolPumpLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishPoolPumpLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishPoolPumpLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishPoolPumpLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishPoolPumpLog.Merge(m, src)
}
func (m *WishPoolPumpLog) XXX_Size() int {
	return m.Size()
}
func (m *WishPoolPumpLog) XXX_DiscardUnknown() {
	xxx_messageInfo_WishPoolPumpLog.DiscardUnknown(m)
}

var xxx_messageInfo_WishPoolPumpLog proto.InternalMessageInfo

func (m *WishPoolPumpLog) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishPoolPumpLog) GetBoxId() int64 {
	if m != nil && m.BoxId != nil {
		return *m.BoxId
	}
	return 0
}

func (m *WishPoolPumpLog) GetPoolId() int64 {
	if m != nil && m.PoolId != nil {
		return *m.PoolId
	}
	return 0
}

func (m *WishPoolPumpLog) GetPrice() int64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *WishPoolPumpLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishPoolPumpLog) GetIncomeValue() int64 {
	if m != nil && m.IncomeValue != nil {
		return *m.IncomeValue
	}
	return 0
}

func (m *WishPoolPumpLog) GetBoxName() string {
	if m != nil && m.BoxName != nil {
		return *m.BoxName
	}
	return ""
}

func (m *WishPoolPumpLog) GetPoolName() string {
	if m != nil && m.PoolName != nil {
		return *m.PoolName
	}
	return ""
}

func (m *WishPoolPumpLog) GetGoroutineID() int64 {
	if m != nil && m.GoroutineID != nil {
		return *m.GoroutineID
	}
	return 0
}

func (m *WishPoolPumpLog) GetCreateTimeMill() int64 {
	if m != nil && m.CreateTimeMill != nil {
		return *m.CreateTimeMill
	}
	return 0
}

// 水池流水日志 wish_pool_log
type WishPoolLog struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	BoxId                *int64   `protobuf:"varint,2,opt,name=BoxId" json:"BoxId,omitempty" bson:"BoxId,omitempty"`
	PoolId               *int64   `protobuf:"varint,3,opt,name=PoolId" json:"PoolId,omitempty" bson:"PoolId,omitempty"`
	PlayerId             *int64   `protobuf:"varint,4,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	BeforeValue          *int64   `protobuf:"varint,5,opt,name=BeforeValue" json:"BeforeValue,omitempty" bson:"BeforeValue,omitempty"`
	AfterValue           *int64   `protobuf:"varint,6,opt,name=AfterValue" json:"AfterValue,omitempty" bson:"AfterValue,omitempty"`
	Value                *int64   `protobuf:"varint,7,opt,name=Value" json:"Value,omitempty" bson:"Value,omitempty"`
	Type                 *int64   `protobuf:"varint,8,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	CreateTime           *int64   `protobuf:"varint,9,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	AfterIsOpenAward     *bool    `protobuf:"varint,39,opt,name=AfterIsOpenAward" json:"AfterIsOpenAward,omitempty" bson:"AfterIsOpenAward,omitempty"`
	AfterLocalStatus     *int64   `protobuf:"varint,51,opt,name=AfterLocalStatus" json:"AfterLocalStatus,omitempty" bson:"AfterLocalStatus,omitempty"`
	IsOpenAward          *bool    `protobuf:"varint,40,opt,name=IsOpenAward" json:"IsOpenAward,omitempty" bson:"IsOpenAward,omitempty"`
	LocalStatus          *int64   `protobuf:"varint,52,opt,name=LocalStatus" json:"LocalStatus,omitempty" bson:"LocalStatus,omitempty"`
	CreateTimeMill       *int64   `protobuf:"varint,63,opt,name=CreateTimeMill" json:"CreateTimeMill,omitempty" bson:"CreateTimeMill,omitempty"`
	GoroutineID          *int64   `protobuf:"varint,64,opt,name=GoroutineID" json:"GoroutineID,omitempty" bson:"GoroutineID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishPoolLog) Reset()         { *m = WishPoolLog{} }
func (m *WishPoolLog) String() string { return proto.CompactTextString(m) }
func (*WishPoolLog) ProtoMessage()    {}
func (*WishPoolLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{45}
}
func (m *WishPoolLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishPoolLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishPoolLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishPoolLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishPoolLog.Merge(m, src)
}
func (m *WishPoolLog) XXX_Size() int {
	return m.Size()
}
func (m *WishPoolLog) XXX_DiscardUnknown() {
	xxx_messageInfo_WishPoolLog.DiscardUnknown(m)
}

var xxx_messageInfo_WishPoolLog proto.InternalMessageInfo

func (m *WishPoolLog) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishPoolLog) GetBoxId() int64 {
	if m != nil && m.BoxId != nil {
		return *m.BoxId
	}
	return 0
}

func (m *WishPoolLog) GetPoolId() int64 {
	if m != nil && m.PoolId != nil {
		return *m.PoolId
	}
	return 0
}

func (m *WishPoolLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *WishPoolLog) GetBeforeValue() int64 {
	if m != nil && m.BeforeValue != nil {
		return *m.BeforeValue
	}
	return 0
}

func (m *WishPoolLog) GetAfterValue() int64 {
	if m != nil && m.AfterValue != nil {
		return *m.AfterValue
	}
	return 0
}

func (m *WishPoolLog) GetValue() int64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *WishPoolLog) GetType() int64 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *WishPoolLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishPoolLog) GetAfterIsOpenAward() bool {
	if m != nil && m.AfterIsOpenAward != nil {
		return *m.AfterIsOpenAward
	}
	return false
}

func (m *WishPoolLog) GetAfterLocalStatus() int64 {
	if m != nil && m.AfterLocalStatus != nil {
		return *m.AfterLocalStatus
	}
	return 0
}

func (m *WishPoolLog) GetIsOpenAward() bool {
	if m != nil && m.IsOpenAward != nil {
		return *m.IsOpenAward
	}
	return false
}

func (m *WishPoolLog) GetLocalStatus() int64 {
	if m != nil && m.LocalStatus != nil {
		return *m.LocalStatus
	}
	return 0
}

func (m *WishPoolLog) GetCreateTimeMill() int64 {
	if m != nil && m.CreateTimeMill != nil {
		return *m.CreateTimeMill
	}
	return 0
}

func (m *WishPoolLog) GetGoroutineID() int64 {
	if m != nil && m.GoroutineID != nil {
		return *m.GoroutineID
	}
	return 0
}

// 冷却期设置表 wish_cool_down_config
type WishCoolDownConfig struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	IsOpen               *bool    `protobuf:"varint,2,opt,name=IsOpen" json:"IsOpen,omitempty" bson:"IsOpen,omitempty"`
	ContinuousTime       *int64   `protobuf:"varint,3,opt,name=ContinuousTime" json:"ContinuousTime,omitempty" bson:"ContinuousTime,omitempty"`
	ContinuousTimes      *int64   `protobuf:"varint,4,opt,name=ContinuousTimes" json:"ContinuousTimes,omitempty" bson:"ContinuousTimes,omitempty"`
	CoolDownTime         *int64   `protobuf:"varint,5,opt,name=CoolDownTime" json:"CoolDownTime,omitempty" bson:"CoolDownTime,omitempty"`
	DayLimit             *int64   `protobuf:"varint,6,opt,name=DayLimit" json:"DayLimit,omitempty" bson:"DayLimit,omitempty"`
	CreateTime           *int64   `protobuf:"varint,7,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishCoolDownConfig) Reset()         { *m = WishCoolDownConfig{} }
func (m *WishCoolDownConfig) String() string { return proto.CompactTextString(m) }
func (*WishCoolDownConfig) ProtoMessage()    {}
func (*WishCoolDownConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{46}
}
func (m *WishCoolDownConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishCoolDownConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishCoolDownConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishCoolDownConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishCoolDownConfig.Merge(m, src)
}
func (m *WishCoolDownConfig) XXX_Size() int {
	return m.Size()
}
func (m *WishCoolDownConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_WishCoolDownConfig.DiscardUnknown(m)
}

var xxx_messageInfo_WishCoolDownConfig proto.InternalMessageInfo

func (m *WishCoolDownConfig) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *WishCoolDownConfig) GetIsOpen() bool {
	if m != nil && m.IsOpen != nil {
		return *m.IsOpen
	}
	return false
}

func (m *WishCoolDownConfig) GetContinuousTime() int64 {
	if m != nil && m.ContinuousTime != nil {
		return *m.ContinuousTime
	}
	return 0
}

func (m *WishCoolDownConfig) GetContinuousTimes() int64 {
	if m != nil && m.ContinuousTimes != nil {
		return *m.ContinuousTimes
	}
	return 0
}

func (m *WishCoolDownConfig) GetCoolDownTime() int64 {
	if m != nil && m.CoolDownTime != nil {
		return *m.CoolDownTime
	}
	return 0
}

func (m *WishCoolDownConfig) GetDayLimit() int64 {
	if m != nil && m.DayLimit != nil {
		return *m.DayLimit
	}
	return 0
}

func (m *WishCoolDownConfig) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

//钻石变化日志
type DiamondChangeLog struct {
	LogId                *int64   `protobuf:"varint,1,req,name=LogId" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Account              *string  `protobuf:"bytes,3,opt,name=Account" json:"-" bson:"-"`
	ChangeDiamond        *int64   `protobuf:"varint,4,opt,name=ChangeDiamond" json:"ChangeDiamond,omitempty" bson:"ChangeDiamond,omitempty"`
	SourceType           *int32   `protobuf:"varint,5,opt,name=SourceType" json:"SourceType,omitempty" bson:"SourceType,omitempty"`
	SourceTypeName       *string  `protobuf:"bytes,6,opt,name=SourceTypeName" json:"-" bson:"-"`
	PayType              *int32   `protobuf:"varint,7,opt,name=PayType" json:"PayType,omitempty" bson:"PayType,omitempty"`
	CurDiamond           *int64   `protobuf:"varint,10,opt,name=CurDiamond" json:"CurDiamond,omitempty" bson:"CurDiamond,omitempty"`
	Diamond              *int64   `protobuf:"varint,11,opt,name=Diamond" json:"Diamond,omitempty" bson:"Diamond,omitempty"`
	Note                 *string  `protobuf:"bytes,12,opt,name=Note" json:"Note,omitempty" bson:"Note,omitempty"`
	CreateTime           *int64   `protobuf:"varint,13,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DiamondChangeLog) Reset()         { *m = DiamondChangeLog{} }
func (m *DiamondChangeLog) String() string { return proto.CompactTextString(m) }
func (*DiamondChangeLog) ProtoMessage()    {}
func (*DiamondChangeLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{47}
}
func (m *DiamondChangeLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiamondChangeLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiamondChangeLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiamondChangeLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiamondChangeLog.Merge(m, src)
}
func (m *DiamondChangeLog) XXX_Size() int {
	return m.Size()
}
func (m *DiamondChangeLog) XXX_DiscardUnknown() {
	xxx_messageInfo_DiamondChangeLog.DiscardUnknown(m)
}

var xxx_messageInfo_DiamondChangeLog proto.InternalMessageInfo

func (m *DiamondChangeLog) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *DiamondChangeLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *DiamondChangeLog) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *DiamondChangeLog) GetChangeDiamond() int64 {
	if m != nil && m.ChangeDiamond != nil {
		return *m.ChangeDiamond
	}
	return 0
}

func (m *DiamondChangeLog) GetSourceType() int32 {
	if m != nil && m.SourceType != nil {
		return *m.SourceType
	}
	return 0
}

func (m *DiamondChangeLog) GetSourceTypeName() string {
	if m != nil && m.SourceTypeName != nil {
		return *m.SourceTypeName
	}
	return ""
}

func (m *DiamondChangeLog) GetPayType() int32 {
	if m != nil && m.PayType != nil {
		return *m.PayType
	}
	return 0
}

func (m *DiamondChangeLog) GetCurDiamond() int64 {
	if m != nil && m.CurDiamond != nil {
		return *m.CurDiamond
	}
	return 0
}

func (m *DiamondChangeLog) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *DiamondChangeLog) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

func (m *DiamondChangeLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

//回收理由
type RecycleReason struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Reason               *string  `protobuf:"bytes,2,opt,name=Reason" json:"Reason,omitempty" bson:"Reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RecycleReason) Reset()         { *m = RecycleReason{} }
func (m *RecycleReason) String() string { return proto.CompactTextString(m) }
func (*RecycleReason) ProtoMessage()    {}
func (*RecycleReason) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{48}
}
func (m *RecycleReason) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecycleReason) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecycleReason.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecycleReason) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecycleReason.Merge(m, src)
}
func (m *RecycleReason) XXX_Size() int {
	return m.Size()
}
func (m *RecycleReason) XXX_DiscardUnknown() {
	xxx_messageInfo_RecycleReason.DiscardUnknown(m)
}

var xxx_messageInfo_RecycleReason proto.InternalMessageInfo

func (m *RecycleReason) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RecycleReason) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

// 汇总占领时长排行榜总表 wish_sum_occupied
type WishSumOccupied struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	WishBoxId            *int64   `protobuf:"varint,2,opt,name=WishBoxId" json:"WishBoxId,omitempty" bson:"WishBoxId,omitempty"`
	NickName             *string  `protobuf:"bytes,4,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	HeadUrl              *string  `protobuf:"bytes,5,opt,name=HeadUrl" json:"HeadUrl,omitempty" bson:"HeadUrl,omitempty"`
	PlayerId             *int64   `protobuf:"varint,6,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	OccupiedTime         *int64   `protobuf:"varint,9,opt,name=OccupiedTime" json:"OccupiedTime,omitempty" bson:"OccupiedTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishSumOccupied) Reset()         { *m = WishSumOccupied{} }
func (m *WishSumOccupied) String() string { return proto.CompactTextString(m) }
func (*WishSumOccupied) ProtoMessage()    {}
func (*WishSumOccupied) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{49}
}
func (m *WishSumOccupied) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishSumOccupied) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishSumOccupied.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishSumOccupied) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishSumOccupied.Merge(m, src)
}
func (m *WishSumOccupied) XXX_Size() int {
	return m.Size()
}
func (m *WishSumOccupied) XXX_DiscardUnknown() {
	xxx_messageInfo_WishSumOccupied.DiscardUnknown(m)
}

var xxx_messageInfo_WishSumOccupied proto.InternalMessageInfo

func (m *WishSumOccupied) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishSumOccupied) GetWishBoxId() int64 {
	if m != nil && m.WishBoxId != nil {
		return *m.WishBoxId
	}
	return 0
}

func (m *WishSumOccupied) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *WishSumOccupied) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *WishSumOccupied) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *WishSumOccupied) GetOccupiedTime() int64 {
	if m != nil && m.OccupiedTime != nil {
		return *m.OccupiedTime
	}
	return 0
}

// 白名单 wish_white
type WishWhite struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	NickName             *string  `protobuf:"bytes,2,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	Account              *string  `protobuf:"bytes,3,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	PlayerId             *int64   `protobuf:"varint,4,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Note                 *string  `protobuf:"bytes,5,opt,name=Note" json:"Note,omitempty" bson:"Note,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishWhite) Reset()         { *m = WishWhite{} }
func (m *WishWhite) String() string { return proto.CompactTextString(m) }
func (*WishWhite) ProtoMessage()    {}
func (*WishWhite) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{50}
}
func (m *WishWhite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishWhite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishWhite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishWhite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishWhite.Merge(m, src)
}
func (m *WishWhite) XXX_Size() int {
	return m.Size()
}
func (m *WishWhite) XXX_DiscardUnknown() {
	xxx_messageInfo_WishWhite.DiscardUnknown(m)
}

var xxx_messageInfo_WishWhite proto.InternalMessageInfo

func (m *WishWhite) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishWhite) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *WishWhite) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *WishWhite) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *WishWhite) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

//许愿池埋点日志记录:wish_burying_point_log
type WishBuryingPointLog struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	EventType            *int32   `protobuf:"varint,3,opt,name=EventType" json:"EventType,omitempty" bson:"EventType,omitempty"`
	Time                 *int64   `protobuf:"varint,4,opt,name=Time" json:"Time,omitempty" bson:"Time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishBuryingPointLog) Reset()         { *m = WishBuryingPointLog{} }
func (m *WishBuryingPointLog) String() string { return proto.CompactTextString(m) }
func (*WishBuryingPointLog) ProtoMessage()    {}
func (*WishBuryingPointLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_93329ecadeba0bb2, []int{51}
}
func (m *WishBuryingPointLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishBuryingPointLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishBuryingPointLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishBuryingPointLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishBuryingPointLog.Merge(m, src)
}
func (m *WishBuryingPointLog) XXX_Size() int {
	return m.Size()
}
func (m *WishBuryingPointLog) XXX_DiscardUnknown() {
	xxx_messageInfo_WishBuryingPointLog.DiscardUnknown(m)
}

var xxx_messageInfo_WishBuryingPointLog proto.InternalMessageInfo

func (m *WishBuryingPointLog) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishBuryingPointLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *WishBuryingPointLog) GetEventType() int32 {
	if m != nil && m.EventType != nil {
		return *m.EventType
	}
	return 0
}

func (m *WishBuryingPointLog) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func init() {
	proto.RegisterType((*WishPlayer)(nil), "share_message.WishPlayer")
	proto.RegisterType((*WishAddress)(nil), "share_message.WishAddress")
	proto.RegisterType((*WishMenu)(nil), "share_message.WishMenu")
	proto.RegisterType((*WishBrand)(nil), "share_message.WishBrand")
	proto.RegisterType((*WishItemType)(nil), "share_message.WishItemType")
	proto.RegisterType((*WishStyle)(nil), "share_message.WishStyle")
	proto.RegisterType((*WishItem)(nil), "share_message.WishItem")
	proto.RegisterType((*WishBoxItem)(nil), "share_message.WishBoxItem")
	proto.RegisterType((*WishBox)(nil), "share_message.WishBox")
	proto.RegisterType((*WishLog)(nil), "share_message.WishLog")
	proto.RegisterType((*WishOccupied)(nil), "share_message.WishOccupied")
	proto.RegisterType((*PlayerWishData)(nil), "share_message.PlayerWishData")
	proto.RegisterType((*PlayerWishItem)(nil), "share_message.PlayerWishItem")
	proto.RegisterType((*PlayerExchangeLog)(nil), "share_message.PlayerExchangeLog")
	proto.RegisterType((*PlayerExchangeItem)(nil), "share_message.PlayerExchangeItem")
	proto.RegisterType((*WishRecycleOrder)(nil), "share_message.WishRecycleOrder")
	proto.RegisterType((*WishRecycleItem)(nil), "share_message.WishRecycleItem")
	proto.RegisterType((*PlayerWishCollection)(nil), "share_message.PlayerWishCollection")
	proto.RegisterType((*WishTopLog)(nil), "share_message.WishTopLog")
	proto.RegisterType((*WishGuardianDiamondLog)(nil), "share_message.WishGuardianDiamondLog")
	proto.RegisterType((*WishGuardianTopLog)(nil), "share_message.WishGuardianTopLog")
	proto.RegisterType((*WishPool)(nil), "share_message.WishPool")
	proto.RegisterType((*WishPoolCfg)(nil), "share_message.WishPoolCfg")
	proto.RegisterType((*WishPoolStatus)(nil), "share_message.WishPoolStatus")
	proto.RegisterType((*WishBoItemWinCfg)(nil), "share_message.WishBoItemWinCfg")
	proto.RegisterType((*PriceSection)(nil), "share_message.PriceSection")
	proto.RegisterType((*WishMailSection)(nil), "share_message.WishMailSection")
	proto.RegisterType((*WishRecycleSection)(nil), "share_message.WishRecycleSection")
	proto.RegisterType((*WishPayWarnCfg)(nil), "share_message.WishPayWarnCfg")
	proto.RegisterType((*WishCurrencyConversionCfg)(nil), "share_message.WishCurrencyConversionCfg")
	proto.RegisterType((*WishGuardianCfg)(nil), "share_message.WishGuardianCfg")
	proto.RegisterType((*SingleInitCfg)(nil), "share_message.SingleInitCfg")
	proto.RegisterType((*RecycleNoteCfg)(nil), "share_message.RecycleNoteCfg")
	proto.RegisterType((*DiamondRecharge)(nil), "share_message.DiamondRecharge")
	proto.RegisterType((*WishPoolReport)(nil), "share_message.WishPoolReport")
	proto.RegisterType((*WishPoolReportWeek)(nil), "share_message.WishPoolReportWeek")
	proto.RegisterType((*WishPoolReportMonth)(nil), "share_message.WishPoolReportMonth")
	proto.RegisterType((*WishBoxReport)(nil), "share_message.WishBoxReport")
	proto.RegisterType((*WishBoxReportWeek)(nil), "share_message.WishBoxReportWeek")
	proto.RegisterType((*WishBoxReportMonth)(nil), "share_message.WishBoxReportMonth")
	proto.RegisterType((*WishBoxDetailReport)(nil), "share_message.WishBoxDetailReport")
	proto.RegisterType((*WishBoxDetailReportWeek)(nil), "share_message.WishBoxDetailReportWeek")
	proto.RegisterType((*WishBoxDetailReportMonth)(nil), "share_message.WishBoxDetailReportMonth")
	proto.RegisterType((*WishItemReport)(nil), "share_message.WishItemReport")
	proto.RegisterType((*WishPoolPumpLog)(nil), "share_message.WishPoolPumpLog")
	proto.RegisterType((*WishPoolLog)(nil), "share_message.WishPoolLog")
	proto.RegisterType((*WishCoolDownConfig)(nil), "share_message.WishCoolDownConfig")
	proto.RegisterType((*DiamondChangeLog)(nil), "share_message.DiamondChangeLog")
	proto.RegisterType((*RecycleReason)(nil), "share_message.RecycleReason")
	proto.RegisterType((*WishSumOccupied)(nil), "share_message.WishSumOccupied")
	proto.RegisterType((*WishWhite)(nil), "share_message.WishWhite")
	proto.RegisterType((*WishBuryingPointLog)(nil), "share_message.WishBuryingPointLog")
}

func init() { proto.RegisterFile("table_struct_wish.proto", fileDescriptor_93329ecadeba0bb2) }

var fileDescriptor_93329ecadeba0bb2 = []byte{
	// 3995 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5c, 0x4b, 0x6f, 0x23, 0xc7,
	0x73, 0x07, 0xc5, 0x77, 0xf3, 0x25, 0x51, 0xaf, 0xd9, 0xb5, 0xf5, 0xd8, 0xd9, 0x5d, 0x5b, 0x6b,
	0x7b, 0xb5, 0x2f, 0x03, 0x0e, 0x90, 0xc4, 0x8e, 0x44, 0xed, 0x83, 0x80, 0xb4, 0x22, 0x24, 0x6d,
	0x74, 0xdc, 0xf4, 0x72, 0x5a, 0xe4, 0x40, 0xc3, 0x69, 0x61, 0x66, 0x28, 0x89, 0xbe, 0x24, 0x1f,
	0x20, 0x30, 0x10, 0x7f, 0x82, 0x00, 0x49, 0x80, 0x00, 0x09, 0x02, 0xe7, 0xe1, 0x2f, 0x60, 0x04,
	0x81, 0x91, 0x20, 0x40, 0x92, 0x0f, 0x60, 0x24, 0x06, 0x72, 0xf1, 0x21, 0x87, 0x1c, 0x93, 0xcb,
	0x1f, 0x5d, 0xdd, 0x35, 0xd3, 0x43, 0x8e, 0x76, 0xa9, 0x95, 0x6d, 0x18, 0x06, 0x8f, 0xac, 0x7e,
	0x55, 0x57, 0xd5, 0xaf, 0xaa, 0xba, 0xba, 0x87, 0x64, 0x31, 0xa0, 0xaf, 0x1c, 0xf6, 0xd2, 0x0f,
	0xbc, 0x7e, 0x3b, 0x78, 0x79, 0x66, 0xfb, 0xdd, 0xf5, 0x13, 0x8f, 0x07, 0xbc, 0x5e, 0xf1, 0xbb,
	0xd4, 0x63, 0x2f, 0x7b, 0xcc, 0xf7, 0x69, 0x87, 0x5d, 0x2f, 0x77, 0x3a, 0x3c, 0xa0, 0x1d, 0xd9,
	0x68, 0xfe, 0x69, 0x9a, 0x90, 0x43, 0xdb, 0xef, 0xb6, 0x1c, 0x3a, 0x60, 0x5e, 0x7d, 0x89, 0x4c,
	0x35, 0x2d, 0x23, 0xb5, 0x9a, 0x5a, 0x4b, 0x6f, 0xce, 0xfc, 0xf0, 0xdd, 0x4a, 0xe5, 0xa5, 0x6d,
	0x7d, 0xc4, 0x7b, 0x76, 0xc0, 0x7a, 0x27, 0xc1, 0xa0, 0x5e, 0x23, 0xf9, 0x8d, 0x76, 0x9b, 0xf7,
	0xdd, 0xc0, 0x98, 0x5a, 0x4d, 0xad, 0x15, 0x05, 0xa1, 0xd1, 0xa5, 0xae, 0xcb, 0x1c, 0x23, 0xbd,
	0x9a, 0x5a, 0xcb, 0xd6, 0xa7, 0x49, 0xe1, 0xb9, 0xdd, 0x3e, 0x7e, 0x4e, 0x7b, 0xcc, 0xc8, 0x60,
	0x97, 0x67, 0x8c, 0x5a, 0x2f, 0x3c, 0xc7, 0xc8, 0x02, 0x61, 0x9a, 0x14, 0xe4, 0x6a, 0x4d, 0xcb,
	0xc8, 0x89, 0x95, 0xea, 0x15, 0x92, 0x3d, 0xe0, 0xc7, 0xcc, 0x35, 0xf2, 0xd8, 0xa1, 0xe9, 0x1f,
	0x78, 0x83, 0x5d, 0x97, 0x19, 0x85, 0xd5, 0xd4, 0x5a, 0xa1, 0x5e, 0x27, 0xa4, 0xe1, 0x31, 0x1a,
	0xb0, 0x03, 0xbb, 0xc7, 0x8c, 0x22, 0x0c, 0xfa, 0x90, 0xe4, 0x37, 0x2c, 0xcb, 0x63, 0xbe, 0x6f,
	0x90, 0xd5, 0xf4, 0x5a, 0xe9, 0xe1, 0xf5, 0xf5, 0xd8, 0x46, 0xd7, 0xc5, 0xb6, 0x54, 0x0f, 0x60,
	0x82, 0x3a, 0xce, 0xbe, 0x6d, 0x19, 0x25, 0xe0, 0xb3, 0x4a, 0x72, 0xcf, 0x79, 0x20, 0x56, 0x28,
	0xe3, 0x0a, 0xf2, 0xb7, 0x18, 0x65, 0x54, 0x80, 0x56, 0x23, 0xf9, 0x2d, 0x9b, 0xf6, 0xb8, 0x6b,
	0x19, 0xd5, 0x90, 0xcf, 0xc1, 0x09, 0xf3, 0x8d, 0x1a, 0xcc, 0xb1, 0x42, 0x16, 0xb7, 0xa9, 0x1f,
	0x3c, 0x3e, 0x6f, 0x77, 0xa9, 0xdb, 0x61, 0xaa, 0x2f, 0xb0, 0x38, 0x0d, 0xfd, 0x61, 0x23, 0x4f,
	0x3c, 0xc6, 0x3e, 0x67, 0xc6, 0x0c, 0x2e, 0x23, 0x7f, 0x43, 0xaf, 0x3a, 0xf4, 0x2a, 0x93, 0xcc,
	0x73, 0x1e, 0x30, 0x63, 0x16, 0x37, 0xbf, 0x7b, 0xc2, 0x3c, 0x1a, 0x70, 0xcf, 0x98, 0x13, 0x14,
	0xf3, 0x8b, 0x14, 0x29, 0xe9, 0x7b, 0x11, 0xfd, 0x85, 0x78, 0x53, 0xd0, 0xbf, 0x42, 0xb2, 0xad,
	0x2e, 0x77, 0x99, 0x52, 0x48, 0x95, 0xe4, 0xb6, 0x58, 0x40, 0x6d, 0xa9, 0x8f, 0x62, 0x7d, 0x86,
	0x14, 0x9b, 0x47, 0x5b, 0xec, 0x88, 0xf6, 0x9d, 0x00, 0x14, 0x52, 0x10, 0x24, 0x35, 0x55, 0xd3,
	0x02, 0x95, 0x00, 0xa3, 0x2d, 0x8f, 0x9f, 0xda, 0x6e, 0x9b, 0x81, 0x4a, 0x8a, 0x62, 0x91, 0x86,
	0x1d, 0x0c, 0x94, 0x46, 0xca, 0x24, 0xb3, 0xe1, 0x31, 0x0a, 0xda, 0x28, 0x9a, 0x9f, 0x90, 0x82,
	0xe0, 0x67, 0x87, 0xb9, 0xfd, 0x37, 0x19, 0x0c, 0xf2, 0x0a, 0xcc, 0x99, 0x5f, 0xa7, 0x48, 0x51,
	0x8c, 0xdc, 0xf4, 0xa8, 0x6b, 0x5d, 0x6a, 0xa8, 0xf8, 0x25, 0x44, 0xaf, 0x76, 0x55, 0x21, 0xd9,
	0xa6, 0xff, 0x8c, 0xe3, 0x8e, 0x84, 0x79, 0x38, 0x76, 0xfb, 0xb8, 0x01, 0x96, 0x49, 0x40, 0x39,
	0x71, 0x93, 0x29, 0xc1, 0x36, 0xeb, 0x84, 0xbc, 0x38, 0xb1, 0x90, 0x56, 0x06, 0x5a, 0x95, 0xe4,
	0xf6, 0x03, 0x1a, 0xf4, 0x7d, 0x50, 0x3a, 0x8c, 0x7b, 0xc6, 0xfd, 0xe0, 0x90, 0xd9, 0x9d, 0x6e,
	0x20, 0x15, 0x6d, 0xfe, 0x6b, 0x8a, 0x94, 0x05, 0xdf, 0xcd, 0x80, 0xf5, 0x04, 0x17, 0x57, 0x61,
	0x7d, 0x96, 0x94, 0x9a, 0xfe, 0x1e, 0x6b, 0xf3, 0x5e, 0x8f, 0xb9, 0x56, 0xb4, 0x01, 0x6d, 0xd1,
	0x6c, 0xb8, 0x81, 0x1f, 0x6b, 0x53, 0xa1, 0xbc, 0x84, 0x72, 0x0b, 0xe6, 0x6f, 0x49, 0x35, 0xec,
	0x07, 0x03, 0xe7, 0x72, 0x7b, 0x31, 0xff, 0x24, 0x2d, 0x75, 0x2f, 0x24, 0x71, 0x69, 0x29, 0x34,
	0xdb, 0xdc, 0x55, 0x52, 0x28, 0x93, 0xcc, 0x16, 0xf3, 0xdb, 0xca, 0x45, 0x54, 0x48, 0x16, 0x4c,
	0x42, 0xed, 0x1c, 0x05, 0x96, 0x43, 0xde, 0x5b, 0x9e, 0xdd, 0x66, 0x60, 0x8a, 0xe9, 0xfa, 0x3c,
	0xa9, 0x08, 0xe9, 0x9d, 0x32, 0x6f, 0x20, 0xc9, 0x05, 0xdc, 0xf1, 0x36, 0x73, 0x3b, 0x41, 0x17,
	0xbc, 0x03, 0xcc, 0x71, 0x68, 0x5b, 0x4c, 0xc9, 0xad, 0x4c, 0x32, 0xcf, 0xec, 0x4e, 0x57, 0x61,
	0xbf, 0x46, 0xf2, 0x9b, 0x76, 0x67, 0xdf, 0xfe, 0x5c, 0x8a, 0x0b, 0x30, 0xb7, 0x43, 0x03, 0xe6,
	0xd9, 0xd4, 0x31, 0x2a, 0xab, 0x69, 0xe9, 0xb4, 0x10, 0xfa, 0x35, 0x98, 0x7f, 0x96, 0x94, 0xf6,
	0x03, 0xde, 0x3e, 0xde, 0xe8, 0x81, 0x3a, 0x16, 0xd0, 0x89, 0x28, 0x31, 0x2f, 0xc2, 0xef, 0x59,
	0x52, 0x6a, 0x79, 0xec, 0x19, 0x3d, 0x95, 0xba, 0x30, 0x60, 0xa4, 0x40, 0xa0, 0xdf, 0xf2, 0xd8,
	0x3e, 0x75, 0x98, 0x71, 0x0d, 0xd5, 0xfd, 0xe2, 0xc4, 0xe1, 0x54, 0xfa, 0x8a, 0xeb, 0xe1, 0x02,
	0xdc, 0xb1, 0x76, 0xfb, 0x01, 0x10, 0xdf, 0x49, 0xd0, 0xed, 0xbb, 0x40, 0xab, 0x91, 0xfc, 0x0b,
	0x9f, 0x81, 0x80, 0x96, 0xc1, 0x3a, 0xbf, 0xca, 0x48, 0xff, 0xb0, 0xc9, 0xcf, 0xc7, 0x51, 0x4b,
	0x5d, 0x3a, 0x7c, 0xd1, 0xb5, 0x69, 0x81, 0x72, 0x74, 0x7b, 0x91, 0x5e, 0x7c, 0x8e, 0x94, 0x05,
	0xc7, 0x01, 0xf5, 0x24, 0x37, 0x19, 0xe4, 0xa6, 0xe5, 0xb1, 0xc7, 0xca, 0xc5, 0x65, 0x71, 0x77,
	0xb8, 0xb6, 0xe6, 0xcd, 0xc1, 0xb2, 0x40, 0x61, 0xca, 0xf6, 0x0e, 0x6d, 0x57, 0xb9, 0xf2, 0x2a,
	0xc9, 0xb5, 0x98, 0xf7, 0xbc, 0xdf, 0x53, 0x8a, 0xaa, 0x91, 0x7c, 0x8b, 0x79, 0x30, 0x23, 0xd1,
	0x08, 0x7b, 0x34, 0x60, 0x4a, 0x5d, 0x71, 0xa3, 0x2f, 0xe3, 0x1a, 0x52, 0xfb, 0x15, 0xf8, 0x79,
	0x9d, 0xd4, 0x5b, 0x1e, 0xb3, 0xec, 0x76, 0xb0, 0xe1, 0x79, 0xf6, 0x29, 0x75, 0xa0, 0x6b, 0x15,
	0xe5, 0x15, 0x57, 0xa5, 0x54, 0xff, 0x36, 0xf7, 0x7d, 0x70, 0xd3, 0x59, 0xb1, 0x87, 0xfd, 0x1e,
	0x75, 0x1c, 0x20, 0xcd, 0xa0, 0x66, 0x1b, 0xbc, 0xd7, 0xe3, 0x2e, 0xf8, 0x68, 0xf8, 0xbd, 0x69,
	0x77, 0xc4, 0x2e, 0x66, 0x31, 0xcc, 0xc1, 0x10, 0x41, 0x99, 0x03, 0xca, 0x22, 0xa9, 0xc9, 0x11,
	0x1b, 0x96, 0xa5, 0x70, 0x3c, 0x8f, 0x0d, 0x72, 0x68, 0xd4, 0x20, 0xad, 0xe7, 0x1a, 0x99, 0xc1,
	0x39, 0xa2, 0xa6, 0x45, 0x9c, 0x7e, 0x8f, 0x9d, 0x51, 0xcf, 0xda, 0x3e, 0x95, 0x4a, 0x16, 0x42,
	0x68, 0xfa, 0x3b, 0xf4, 0x58, 0xc6, 0xa7, 0x15, 0x10, 0xe5, 0x34, 0x29, 0x6c, 0xf3, 0x36, 0x75,
	0x84, 0x30, 0x6f, 0xe2, 0xb8, 0x03, 0xea, 0x1f, 0xc3, 0xee, 0x6f, 0xc1, 0x66, 0xe7, 0x22, 0xcf,
	0x05, 0x60, 0xbc, 0x0d, 0x30, 0xfe, 0xcb, 0x0c, 0xc9, 0x2b, 0xb5, 0x5d, 0x11, 0xc5, 0x22, 0x08,
	0x18, 0x99, 0xd5, 0xb4, 0x54, 0xb4, 0x18, 0xe4, 0x1b, 0xd9, 0xd5, 0xb4, 0x0c, 0x6b, 0x00, 0xf1,
	0x5c, 0xe8, 0xb1, 0x5d, 0x8b, 0x9d, 0xab, 0x80, 0x52, 0x21, 0xd9, 0x1d, 0x1a, 0xb4, 0xbb, 0x60,
	0x14, 0x92, 0x6f, 0x1e, 0xc8, 0x9d, 0x84, 0x66, 0xb1, 0x47, 0x3d, 0x26, 0x08, 0x24, 0xee, 0x06,
	0x4a, 0x43, 0x16, 0x5b, 0x4e, 0x30, 0x92, 0x0a, 0xf6, 0x01, 0xb7, 0xe2, 0x1b, 0x55, 0xe0, 0x48,
	0x0b, 0xdf, 0x69, 0x9c, 0x62, 0xe0, 0x30, 0x61, 0x06, 0x69, 0xa9, 0xe3, 0x43, 0xdb, 0x15, 0x2b,
	0xce, 0xa0, 0xb9, 0x3f, 0xed, 0x53, 0xcf, 0xb2, 0xa9, 0xdb, 0xb4, 0x54, 0xac, 0x8e, 0x03, 0x72,
	0x05, 0x21, 0xd0, 0xea, 0x07, 0xbb, 0x2e, 0x90, 0x56, 0xb1, 0xdb, 0x3e, 0xf7, 0xd0, 0x9f, 0xdf,
	0xc0, 0x6e, 0xc2, 0x33, 0x48, 0x2c, 0x98, 0xe8, 0x07, 0x20, 0xf7, 0xe2, 0xdc, 0x69, 0x5a, 0xc6,
	0x1a, 0x76, 0x3b, 0x53, 0x0a, 0xf3, 0x8d, 0x3b, 0xc8, 0x68, 0xd3, 0x17, 0x7a, 0x35, 0xee, 0xc2,
	0xb0, 0x79, 0x52, 0x69, 0x79, 0xdc, 0xea, 0xb7, 0x03, 0x25, 0x82, 0x75, 0x10, 0x81, 0x41, 0xa6,
	0x91, 0xdf, 0xdd, 0x53, 0x05, 0xa9, 0x7b, 0xc8, 0x4e, 0xd3, 0xc7, 0x36, 0xe3, 0x3e, 0x4c, 0x32,
	0x14, 0x87, 0x1e, 0x60, 0x6a, 0x00, 0xdd, 0xc0, 0xbb, 0x3c, 0x04, 0xef, 0xf2, 0xf7, 0xca, 0x54,
	0xb6, 0x79, 0xe7, 0x4d, 0xa6, 0x12, 0xf3, 0x05, 0xa1, 0x63, 0xd9, 0xa2, 0x1e, 0x6b, 0x5a, 0x60,
	0x31, 0x90, 0x68, 0x88, 0xdf, 0x5a, 0x7a, 0x38, 0x4d, 0x0a, 0x9b, 0x4c, 0xf5, 0xc9, 0x22, 0xb7,
	0x92, 0x02, 0xbd, 0xa4, 0xf9, 0xc4, 0xd5, 0x9b, 0xc7, 0xb9, 0xf7, 0x98, 0x2f, 0xf2, 0x1a, 0xe9,
	0x59, 0x04, 0x02, 0xbb, 0xd4, 0x71, 0x98, 0xdb, 0x61, 0xca, 0xbb, 0x15, 0x11, 0x03, 0x62, 0x3a,
	0x91, 0x85, 0x82, 0xf1, 0x12, 0x9c, 0x72, 0x8b, 0x1d, 0x31, 0xe5, 0xcd, 0x4a, 0x28, 0x7c, 0xd1,
	0x53, 0x1a, 0x5a, 0x59, 0xe7, 0x18, 0x24, 0x12, 0x66, 0x08, 0x9a, 0x03, 0x9d, 0x83, 0x5e, 0xd7,
	0xc8, 0x4c, 0x6c, 0x6d, 0x60, 0xfd, 0x1a, 0xac, 0xb3, 0x48, 0x6a, 0x42, 0xc1, 0x80, 0x54, 0xa5,
	0xaf, 0x79, 0x18, 0xa3, 0x1a, 0x9a, 0xfe, 0xee, 0x09, 0x73, 0x37, 0x04, 0xda, 0xc1, 0x31, 0x48,
	0x17, 0x29, 0x4d, 0x62, 0x31, 0xd6, 0xd1, 0x6d, 0xf3, 0x1e, 0xfb, 0x7d, 0xea, 0xf4, 0x31, 0xb4,
	0xbc, 0x4b, 0xe6, 0x36, 0x8e, 0x02, 0xe6, 0x0d, 0xb7, 0x5e, 0xc7, 0xcd, 0x0c, 0x29, 0x33, 0x3e,
	0x40, 0x5b, 0xf7, 0x7d, 0x58, 0x57, 0x6f, 0xd5, 0xd9, 0x7d, 0x04, 0xd3, 0x2d, 0x90, 0x6a, 0xa4,
	0x82, 0x1d, 0xdb, 0x71, 0x8c, 0xcf, 0x30, 0x70, 0x3d, 0xe5, 0x1e, 0xef, 0x07, 0xb6, 0xcb, 0x9a,
	0x5b, 0xc6, 0xef, 0x09, 0xa2, 0xf9, 0xef, 0x2a, 0x63, 0xda, 0x6d, 0xb7, 0xfb, 0x27, 0x36, 0xb3,
	0xde, 0xc2, 0x74, 0xde, 0xea, 0x24, 0x91, 0x64, 0x27, 0x35, 0x92, 0xc7, 0x98, 0x55, 0x40, 0x7b,
	0x40, 0xbe, 0xb4, 0xf3, 0x44, 0xe4, 0x51, 0xc2, 0x38, 0xd4, 0xe0, 0xd2, 0x1f, 0x40, 0x1c, 0x32,
	0xff, 0x27, 0x45, 0xaa, 0x72, 0x39, 0xc1, 0xea, 0x16, 0x0d, 0xe8, 0x9b, 0x76, 0xa5, 0xf3, 0x37,
	0x35, 0x1a, 0x2e, 0xd3, 0x09, 0x2c, 0x67, 0x30, 0xc9, 0xd1, 0x22, 0x7a, 0x88, 0x8c, 0x88, 0xc5,
	0x1c, 0x5a, 0xe2, 0x13, 0xdb, 0xb5, 0xfd, 0xae, 0xb6, 0x5b, 0x08, 0xd2, 0xe0, 0x1c, 0x84, 0x9c,
	0x0a, 0x71, 0x6f, 0x5b, 0x4c, 0x88, 0x25, 0x44, 0x77, 0x45, 0xba, 0x51, 0x9b, 0xff, 0x9b, 0xd1,
	0x37, 0x3c, 0x4e, 0x6e, 0x31, 0xba, 0xe1, 0x04, 0x50, 0x5e, 0xbc, 0xed, 0x68, 0x7f, 0x59, 0x0c,
	0xcc, 0xc3, 0xc9, 0x05, 0xf8, 0xc2, 0x3d, 0x46, 0x2d, 0xd8, 0x6e, 0x61, 0xc8, 0x21, 0x17, 0x70,
	0xea, 0xc7, 0xe7, 0x27, 0xb6, 0xa7, 0x9f, 0x16, 0xe7, 0x48, 0x79, 0x8f, 0xb5, 0x07, 0x6d, 0x47,
	0x81, 0x9b, 0xa0, 0xed, 0x2a, 0x2a, 0x80, 0xa4, 0x8c, 0xc1, 0x28, 0x3c, 0x81, 0x55, 0xd0, 0x55,
	0x8c, 0x20, 0x5e, 0xa9, 0x48, 0xd0, 0xe4, 0x8c, 0xf3, 0x38, 0xa3, 0x70, 0x17, 0x98, 0x71, 0x2c,
	0x20, 0x51, 0xe9, 0x04, 0xac, 0x79, 0x11, 0xfd, 0x02, 0x4e, 0x80, 0xbd, 0x8d, 0xe1, 0x90, 0x0d,
	0xee, 0x4a, 0xba, 0x11, 0x6d, 0x3d, 0x99, 0x5d, 0x2d, 0x85, 0xb9, 0x2c, 0x3f, 0x87, 0x69, 0x97,
	0x11, 0x24, 0x42, 0x5e, 0x62, 0xe0, 0x4a, 0xe8, 0x60, 0xf9, 0xb9, 0xd4, 0xff, 0x2a, 0x06, 0x0a,
	0xc0, 0xf9, 0xa8, 0x07, 0xc0, 0x96, 0x51, 0xf4, 0x43, 0xb8, 0x88, 0xba, 0xaf, 0x61, 0x0c, 0xd1,
	0x7b, 0x7e, 0x7c, 0x69, 0x3f, 0x21, 0x98, 0x7b, 0x6a, 0x9f, 0x4a, 0xe9, 0x6f, 0x80, 0xd1, 0xfd,
	0x6d, 0x86, 0xcc, 0x48, 0x1b, 0xc2, 0x73, 0xf5, 0x18, 0x91, 0x67, 0xd4, 0xee, 0x44, 0x8c, 0x04,
	0x0a, 0xd6, 0x2b, 0xd2, 0x78, 0x3c, 0x56, 0xcc, 0x66, 0xa2, 0x44, 0xab, 0xcd, 0xec, 0x53, 0xe6,
	0x29, 0x9f, 0x12, 0x9e, 0xa7, 0x73, 0x28, 0x4e, 0xac, 0x32, 0xe4, 0x13, 0x22, 0x51, 0xe8, 0x50,
	0xb6, 0x98, 0x23, 0x26, 0x19, 0x68, 0x26, 0x57, 0x23, 0xf9, 0x5d, 0xcf, 0x02, 0x9e, 0x64, 0xc4,
	0x99, 0x23, 0xe5, 0x4d, 0x7e, 0xbe, 0xe5, 0xd1, 0x33, 0x69, 0x31, 0x55, 0x94, 0x8b, 0x86, 0x75,
	0x95, 0xa3, 0x62, 0x4d, 0x60, 0x31, 0xac, 0xb2, 0xf0, 0xde, 0x09, 0x75, 0x07, 0x60, 0x22, 0x70,
	0x88, 0x54, 0x84, 0x06, 0xb7, 0x30, 0xd0, 0x94, 0x48, 0x7a, 0xd7, 0xb2, 0xc0, 0xf9, 0x17, 0xe3,
	0xd0, 0x59, 0x0e, 0xf3, 0x14, 0x69, 0x85, 0x4d, 0x4b, 0xe5, 0x29, 0x43, 0x86, 0x79, 0x1b, 0x27,
	0xc7, 0x7e, 0xc2, 0x8a, 0xde, 0x43, 0xde, 0x15, 0x51, 0xf2, 0xfe, 0x3e, 0xea, 0x5a, 0x51, 0xd1,
	0x84, 0xd7, 0x50, 0x20, 0x4a, 0x1f, 0x12, 0x32, 0x77, 0x10, 0xbb, 0x2f, 0x7c, 0x90, 0xc7, 0x07,
	0x28, 0xa0, 0x16, 0xf7, 0x03, 0xda, 0x61, 0xc6, 0x87, 0x09, 0xd9, 0xd5, 0x5d, 0xb4, 0x90, 0x10,
	0x8d, 0xeb, 0x68, 0xd0, 0xa1, 0xcd, 0x40, 0x7e, 0x23, 0x3c, 0x73, 0x3d, 0x6e, 0x33, 0xe0, 0xac,
	0x2e, 0x21, 0xef, 0xf1, 0xc4, 0x15, 0x9e, 0x6c, 0x6e, 0xa0, 0x1f, 0x15, 0x87, 0x3a, 0x65, 0x50,
	0x37, 0x93, 0x8e, 0x80, 0xb7, 0x7e, 0x14, 0x31, 0xd7, 0x44, 0x0a, 0x26, 0xf3, 0x4b, 0x90, 0xaf,
	0xf9, 0x1f, 0x69, 0x32, 0x2d, 0xf8, 0x55, 0xce, 0x0b, 0xcc, 0xec, 0x4d, 0x18, 0xd1, 0x7c, 0x5d,
	0x74, 0x7c, 0x9b, 0x25, 0x25, 0xa1, 0x12, 0x04, 0x49, 0x6e, 0x24, 0xac, 0xe6, 0x87, 0x34, 0x57,
	0x42, 0xf3, 0xd4, 0x1c, 0xa6, 0x56, 0x04, 0x0c, 0x33, 0xa4, 0x4d, 0xea, 0x1e, 0x37, 0xa8, 0x67,
	0x35, 0x2d, 0x70, 0x8c, 0xc5, 0xfa, 0x27, 0xa4, 0xa6, 0x96, 0x17, 0x62, 0xdf, 0xb6, 0xfd, 0xc0,
	0xb8, 0x09, 0x65, 0xbb, 0xe5, 0x84, 0xb2, 0x9d, 0xd6, 0x53, 0x83, 0xec, 0x1a, 0x42, 0xb6, 0xe9,
	0xda, 0xf2, 0x5c, 0x7a, 0x07, 0x93, 0x2f, 0xdd, 0xb7, 0xc3, 0x49, 0xc2, 0xf8, 0x08, 0x9b, 0x74,
	0x79, 0xca, 0xa6, 0xbb, 0x68, 0xbb, 0x6a, 0x14, 0xda, 0xee, 0xfa, 0x50, 0x4c, 0x00, 0x04, 0xde,
	0x43, 0xb5, 0xee, 0xb1, 0xa3, 0xbe, 0x4f, 0x1d, 0x20, 0xde, 0x47, 0x58, 0xee, 0xb1, 0x1e, 0xf5,
	0x8e, 0x7d, 0x48, 0x9f, 0x8b, 0x43, 0xf6, 0xfb, 0x30, 0x84, 0x08, 0x1d, 0xf4, 0x98, 0x1b, 0xa0,
	0x33, 0x78, 0x34, 0x52, 0xe7, 0xfb, 0x18, 0x0e, 0x65, 0x7f, 0x37, 0x25, 0x23, 0x82, 0xbe, 0xf9,
	0x61, 0x13, 0x4e, 0x27, 0x06, 0xb3, 0xcc, 0x05, 0x1b, 0xca, 0x0e, 0x5b, 0x4f, 0x6e, 0xd4, 0xd8,
	0x2b, 0xa3, 0xc6, 0x5e, 0x8d, 0x1b, 0x7b, 0x2d, 0x32, 0xec, 0xc8, 0x86, 0xeb, 0x49, 0x36, 0x3c,
	0x1b, 0xda, 0xb0, 0x0e, 0xfe, 0xb9, 0xe4, 0x94, 0x66, 0x39, 0xf4, 0x14, 0xba, 0xc1, 0xaf, 0xbc,
	0xd6, 0xaf, 0xe8, 0xd0, 0x07, 0xdd, 0x9b, 0x2e, 0x99, 0x8b, 0x52, 0x94, 0x06, 0x77, 0x1c, 0xd6,
	0x0e, 0x6c, 0xee, 0xfe, 0x54, 0x99, 0x99, 0xf9, 0xd7, 0x29, 0x99, 0x0b, 0x1c, 0xf0, 0x93, 0xb7,
	0x8a, 0x4b, 0xd3, 0xa4, 0x10, 0x9e, 0x43, 0xd2, 0x68, 0x08, 0xa3, 0x79, 0xae, 0x58, 0x42, 0x64,
	0x9e, 0xa1, 0x06, 0x31, 0x15, 0xcd, 0xa1, 0x8d, 0x1e, 0x74, 0x69, 0xb0, 0x45, 0x07, 0xf1, 0xcc,
	0x6f, 0x38, 0x32, 0x99, 0xff, 0x98, 0x22, 0x0b, 0x62, 0x2e, 0x3c, 0xfc, 0x29, 0x71, 0x8e, 0xc1,
	0x7a, 0x85, 0x64, 0xa5, 0x2c, 0x48, 0x58, 0x21, 0xfe, 0x29, 0x76, 0x92, 0x14, 0x4e, 0xf5, 0x6a,
	0x00, 0xf8, 0x1b, 0xf3, 0xaf, 0x52, 0xa4, 0xae, 0x6f, 0xe3, 0x6d, 0xa5, 0xff, 0x76, 0xfc, 0x2c,
	0x90, 0xaa, 0x84, 0xb5, 0xe8, 0xaa, 0x05, 0xf8, 0x90, 0x7e, 0x88, 0x29, 0x38, 0xc8, 0xca, 0xfc,
	0x8b, 0xac, 0x2c, 0x92, 0x8a, 0x73, 0xd4, 0x18, 0x07, 0x1f, 0x38, 0x6e, 0xd9, 0x3d, 0x3b, 0x50,
	0x4c, 0xce, 0x91, 0xb2, 0x70, 0x70, 0x36, 0x75, 0xe4, 0x69, 0x2e, 0x1d, 0x26, 0x60, 0xda, 0x11,
	0x2f, 0x83, 0xec, 0x2b, 0xc8, 0x47, 0x67, 0xe7, 0x06, 0xef, 0xf5, 0x6c, 0xdf, 0xb7, 0xb9, 0x1b,
	0x6d, 0x09, 0x2a, 0x79, 0x32, 0x73, 0x8b, 0x6c, 0xc5, 0xe1, 0x3e, 0x93, 0xb4, 0x42, 0x98, 0x73,
	0x08, 0xd5, 0xd5, 0x12, 0xf2, 0x9c, 0xe9, 0x84, 0xf8, 0x2c, 0xab, 0x24, 0x06, 0x99, 0xde, 0xef,
	0xf2, 0xb3, 0x18, 0xc7, 0x37, 0xc2, 0x8a, 0x66, 0x97, 0x9f, 0x21, 0x83, 0x37, 0x51, 0x66, 0x82,
	0xa8, 0x31, 0x79, 0x4b, 0xa7, 0x6b, 0x8c, 0xde, 0x8e, 0xf5, 0x8f, 0x98, 0x7d, 0x2f, 0x29, 0x1f,
	0x7d, 0x1f, 0xcb, 0x17, 0x4d, 0x1f, 0x2f, 0x3b, 0x64, 0x8a, 0xba, 0x1e, 0x15, 0xfb, 0x84, 0x7b,
	0x2f, 0x3d, 0x5c, 0x4a, 0x08, 0x37, 0x42, 0x03, 0x32, 0xc6, 0xd4, 0xef, 0xeb, 0xb5, 0xc0, 0x7b,
	0xe3, 0x8c, 0xb8, 0x1b, 0x96, 0x0a, 0xef, 0x8f, 0xd9, 0x5d, 0x55, 0x12, 0x1f, 0x8c, 0xd3, 0xfd,
	0x9e, 0x56, 0x68, 0x7c, 0x38, 0xce, 0x80, 0xa1, 0x9c, 0xfc, 0x51, 0xe8, 0x65, 0x39, 0x77, 0x1a,
	0xdc, 0x3d, 0xb2, 0x3b, 0x4d, 0x4b, 0x66, 0xea, 0xe6, 0x97, 0x59, 0x99, 0x0a, 0x41, 0xd3, 0x51,
	0x67, 0x62, 0xaa, 0x13, 0x53, 0xfd, 0xb9, 0x4d, 0x35, 0x2a, 0x7f, 0xaa, 0xe3, 0xa3, 0xf9, 0x07,
	0xa4, 0x3a, 0xd4, 0x0d, 0x6e, 0x67, 0xce, 0xa5, 0xba, 0xc2, 0xd0, 0xb3, 0x63, 0xbb, 0xba, 0xc9,
	0xcd, 0x91, 0xb2, 0x90, 0x7d, 0xd8, 0xaf, 0x1c, 0xa3, 0x62, 0x5f, 0xc8, 0x75, 0xcc, 0xbf, 0x49,
	0xc9, 0xe4, 0x79, 0x93, 0x8b, 0x4c, 0xe4, 0xd0, 0x76, 0xc7, 0xb3, 0xfd, 0xe1, 0xfa, 0x54, 0xbc,
	0x28, 0x90, 0x1e, 0xbe, 0x5a, 0xc8, 0x8d, 0x5e, 0x2d, 0xe4, 0x87, 0xae, 0x16, 0x0a, 0x43, 0x57,
	0x0b, 0xc5, 0x91, 0xab, 0x05, 0xa8, 0x44, 0x99, 0x7f, 0x28, 0x72, 0x24, 0xbb, 0xcd, 0xf6, 0x47,
	0x72, 0x9b, 0x62, 0x12, 0xaf, 0x55, 0x92, 0xdb, 0x75, 0xd9, 0x8e, 0xed, 0x02, 0xa3, 0x59, 0xfc,
	0x4d, 0xcf, 0xd5, 0x99, 0xb7, 0x4a, 0x72, 0x07, 0x67, 0x5c, 0xb4, 0x67, 0xf5, 0xdf, 0xf4, 0x5c,
	0xf1, 0x2c, 0xc2, 0x6f, 0xd7, 0x63, 0x30, 0x03, 0xb0, 0x6c, 0x7e, 0x99, 0x92, 0x99, 0xe9, 0x0e,
	0xb5, 0x9d, 0x31, 0x99, 0x10, 0xb1, 0x57, 0x9e, 0xed, 0x1e, 0x28, 0x36, 0x22, 0xca, 0xc3, 0xe8,
	0xf0, 0xad, 0x28, 0x8f, 0x14, 0x2b, 0x90, 0xc2, 0xf6, 0x78, 0xc0, 0x36, 0x3c, 0x46, 0xe1, 0x8c,
	0x40, 0xe0, 0x3a, 0x4e, 0x5d, 0x9b, 0x3f, 0xef, 0xf7, 0x5e, 0x31, 0x4f, 0x9e, 0x3a, 0xcc, 0x6f,
	0xa7, 0x64, 0x4e, 0xa0, 0x40, 0x7b, 0x09, 0xbe, 0x1c, 0x1a, 0x1c, 0x71, 0xaf, 0xa7, 0xb8, 0x80,
	0x8a, 0xcd, 0xe0, 0x80, 0x9f, 0x34, 0xc2, 0x23, 0x10, 0xc8, 0x44, 0xa6, 0x0e, 0x4a, 0x29, 0xf1,
	0xe2, 0x20, 0x14, 0x4a, 0xb6, 0xe8, 0x60, 0x87, 0xbb, 0x2c, 0x1a, 0x59, 0xd2, 0xa6, 0xc3, 0x16,
	0x65, 0x88, 0xef, 0x90, 0x59, 0xc8, 0xfe, 0x85, 0x5c, 0xfd, 0x2e, 0x77, 0x2c, 0x68, 0x8f, 0x2e,
	0xaf, 0xb6, 0xe8, 0x00, 0x5f, 0x0f, 0xe0, 0x6c, 0x32, 0xeb, 0x9e, 0x27, 0x95, 0x58, 0x9b, 0xf2,
	0x6e, 0x0b, 0xa4, 0x1a, 0x9f, 0x4f, 0x79, 0xb8, 0x1a, 0xc9, 0x3f, 0x61, 0x0c, 0xee, 0xce, 0x16,
	0xc2, 0xac, 0x5d, 0x6d, 0xf7, 0x80, 0x9e, 0x43, 0xa1, 0x40, 0xb9, 0x62, 0xea, 0x08, 0x02, 0x54,
	0x8a, 0xcd, 0x6f, 0x52, 0x0a, 0x74, 0x74, 0x70, 0x48, 0x3d, 0xc0, 0xc3, 0x82, 0xa0, 0x04, 0x5d,
	0xcb, 0xa3, 0x67, 0xea, 0x36, 0xed, 0xb7, 0xb1, 0x9e, 0x17, 0xa7, 0xfb, 0xc6, 0xef, 0xe0, 0x2e,
	0xa2, 0x86, 0xa7, 0xdc, 0xb1, 0x80, 0x8b, 0xdf, 0x45, 0x76, 0xe3, 0x6d, 0xc6, 0xa7, 0x40, 0x5f,
	0x22, 0xf3, 0x11, 0x5d, 0x6d, 0x12, 0x86, 0x7d, 0x86, 0x87, 0xb7, 0x91, 0x66, 0x55, 0x37, 0x12,
	0xb1, 0xa8, 0xcb, 0x5d, 0x06, 0x36, 0xb2, 0x21, 0x6c, 0xc4, 0xec, 0x92, 0x6b, 0x70, 0x06, 0xe8,
	0x7b, 0x1e, 0x73, 0xdb, 0x83, 0x06, 0x77, 0x4f, 0x99, 0x27, 0xdc, 0x76, 0x1c, 0xde, 0xc5, 0x0b,
	0x92, 0x5d, 0xa9, 0x91, 0x29, 0xbc, 0x2e, 0x16, 0xa9, 0x9e, 0x32, 0x10, 0xed, 0x02, 0x11, 0xac,
	0xd4, 0x7c, 0x25, 0xd1, 0x80, 0xc9, 0xe8, 0x18, 0xf3, 0x8f, 0xa8, 0x71, 0x0a, 0x37, 0xb8, 0xeb,
	0xb6, 0xf1, 0xb8, 0xb6, 0xc7, 0x5e, 0x89, 0xbd, 0x83, 0x27, 0x31, 0xd7, 0x49, 0x65, 0xdf, 0x76,
	0x3b, 0x0e, 0x13, 0xd1, 0x4a, 0xac, 0x50, 0x21, 0xd9, 0x03, 0xfa, 0xca, 0xc1, 0x67, 0x1f, 0x91,
	0x41, 0x02, 0xcb, 0xe6, 0x07, 0xe1, 0xe1, 0x4f, 0x1c, 0x50, 0xc5, 0x00, 0x12, 0xb1, 0x04, 0xe7,
	0x75, 0x76, 0x2e, 0xa2, 0xb6, 0x90, 0xd4, 0x7f, 0xa5, 0x48, 0x2d, 0x5c, 0xb3, 0xdd, 0xa5, 0x5e,
	0x87, 0x8d, 0xf1, 0xf0, 0x07, 0x65, 0x10, 0x1e, 0x97, 0x84, 0x88, 0xf4, 0x53, 0x69, 0x9d, 0x90,
	0x1d, 0xee, 0x06, 0xdd, 0x27, 0xb6, 0xe7, 0x07, 0x51, 0x45, 0x57, 0x6d, 0x2b, 0xac, 0xe8, 0x46,
	0xb7, 0xca, 0x17, 0x94, 0xe7, 0xa3, 0xad, 0x85, 0x57, 0xf9, 0xfb, 0xdc, 0xc3, 0x27, 0x10, 0xd3,
	0xa4, 0xb0, 0x65, 0xfb, 0xfa, 0x55, 0xe0, 0x2c, 0x29, 0x89, 0x43, 0x21, 0xf2, 0x07, 0x88, 0x33,
	0xff, 0x29, 0x17, 0xc5, 0x91, 0x3d, 0x76, 0xc2, 0xbd, 0xa0, 0x7e, 0x3b, 0x96, 0x26, 0x5c, 0xb8,
	0x55, 0x55, 0x97, 0x95, 0xf0, 0x6f, 0x84, 0x6f, 0x9d, 0xc0, 0x39, 0x6d, 0x58, 0x96, 0x4e, 0x4f,
	0x63, 0x39, 0x75, 0xbb, 0xdf, 0x3e, 0x1e, 0xe8, 0x2d, 0x19, 0xac, 0x83, 0x40, 0x8b, 0xa4, 0x85,
	0x2e, 0x0e, 0x68, 0xf2, 0xbc, 0x1a, 0x79, 0x9c, 0x39, 0x52, 0x96, 0x26, 0x1b, 0x48, 0x6a, 0x1e,
	0xa9, 0x4a, 0xad, 0x92, 0x2a, 0x43, 0xc6, 0x75, 0x2c, 0x77, 0xc5, 0xda, 0x8a, 0x78, 0xc5, 0xb3,
	0x7b, 0x74, 0x64, 0xb7, 0x6d, 0xea, 0xc4, 0x5a, 0x09, 0xf2, 0xaa, 0xa8, 0x02, 0x86, 0xb2, 0x1c,
	0x52, 0x42, 0x8c, 0x02, 0x5f, 0x11, 0x5d, 0xba, 0xae, 0x65, 0xb2, 0xa0, 0xf8, 0x7a, 0xca, 0xb9,
	0xe5, 0x6b, 0x65, 0x94, 0x4a, 0x58, 0xe0, 0x0f, 0x33, 0x24, 0xd9, 0x50, 0x85, 0xa5, 0x4c, 0x72,
	0xbd, 0xc5, 0x5c, 0xeb, 0x82, 0xc1, 0x35, 0xcc, 0xc8, 0xb4, 0x3e, 0x92, 0x51, 0x79, 0x27, 0xbf,
	0x4c, 0x16, 0x62, 0x5b, 0x8c, 0xd8, 0x92, 0x9e, 0x6e, 0x95, 0x18, 0x43, 0xdb, 0x8c, 0x7a, 0xd4,
	0xd1, 0x8c, 0x5a, 0x1e, 0x3f, 0xb2, 0x03, 0x55, 0x80, 0x78, 0x87, 0xcc, 0xaa, 0x75, 0x42, 0x1c,
	0x8a, 0xce, 0xf2, 0xa1, 0xc5, 0x0d, 0x72, 0x2d, 0xde, 0xa8, 0x2b, 0xf3, 0x5d, 0xe0, 0x68, 0x64,
	0xbc, 0x6c, 0x5c, 0x42, 0xef, 0x87, 0x15, 0x19, 0x6d, 0xe0, 0x32, 0xea, 0x50, 0x55, 0x87, 0x25,
	0x75, 0x25, 0xf4, 0xfa, 0x92, 0xaa, 0x8f, 0x58, 0x45, 0xaf, 0xdd, 0x74, 0x65, 0xc2, 0x2e, 0x88,
	0x37, 0xd0, 0x59, 0x48, 0xa2, 0xde, 0xdf, 0xc4, 0x97, 0x04, 0x87, 0xb6, 0x1b, 0x5e, 0x45, 0xe8,
	0x55, 0xae, 0x18, 0xe0, 0xd6, 0x87, 0x01, 0x77, 0x0f, 0x25, 0x13, 0xaf, 0xb6, 0xc8, 0x09, 0x1e,
	0x00, 0x90, 0xfe, 0x39, 0x27, 0xc3, 0x6c, 0x04, 0xa4, 0x43, 0xc6, 0x8e, 0x27, 0x60, 0x9a, 0x80,
	0x69, 0x02, 0xa6, 0x4b, 0x83, 0xe9, 0x5f, 0x72, 0x64, 0x36, 0x0e, 0x26, 0x88, 0x98, 0x13, 0x34,
	0x4d, 0xd0, 0x34, 0x41, 0xd3, 0xa5, 0xd1, 0xf4, 0xff, 0xd9, 0xf0, 0x4e, 0x41, 0xa5, 0x78, 0x6f,
	0x48, 0xc3, 0x2f, 0x8d, 0x9f, 0x45, 0x52, 0x83, 0xbb, 0x97, 0x11, 0xf8, 0xcc, 0x90, 0xa2, 0x68,
	0x98, 0xa0, 0xe7, 0x17, 0x80, 0x9e, 0x31, 0x00, 0xf2, 0xe3, 0x62, 0xc0, 0x90, 0xf5, 0xa3, 0xc8,
	0x89, 0x37, 0x2d, 0x05, 0x84, 0x78, 0x25, 0xd2, 0xc4, 0x7b, 0x34, 0x59, 0x36, 0xba, 0x19, 0x96,
	0x88, 0xd4, 0x83, 0x8d, 0x5b, 0x70, 0x36, 0x7b, 0x0d, 0x42, 0x2e, 0xb0, 0x7e, 0xc0, 0x8a, 0xf9,
	0x67, 0x39, 0x31, 0x50, 0xb3, 0x7e, 0xc8, 0xcb, 0x26, 0x08, 0x98, 0x20, 0xe0, 0x57, 0x84, 0x80,
	0x2b, 0xc4, 0x88, 0xfb, 0x80, 0x92, 0x3f, 0x57, 0xc7, 0x97, 0x10, 0x25, 0x32, 0xe1, 0x9a, 0xc0,
	0x64, 0x02, 0x93, 0x09, 0x4c, 0x22, 0x98, 0xfc, 0xb1, 0x3a, 0x98, 0x6c, 0xf2, 0x73, 0xf9, 0xf9,
	0xd8, 0x15, 0x13, 0xaa, 0x65, 0xf9, 0xec, 0x60, 0xc3, 0xb5, 0x86, 0x61, 0x11, 0x7e, 0x26, 0x78,
	0x68, 0xbb, 0x3a, 0x50, 0x7e, 0x6d, 0xa8, 0xf8, 0x29, 0x0d, 0x7b, 0x89, 0xcc, 0x6b, 0x73, 0x6b,
	0x4b, 0xcf, 0x26, 0xda, 0x7d, 0xb2, 0x51, 0x2f, 0x25, 0x1a, 0xf5, 0xf2, 0x6b, 0x8c, 0x7a, 0x65,
	0xf4, 0x51, 0xee, 0x6a, 0x74, 0x29, 0xa0, 0xf9, 0x58, 0x65, 0xe6, 0xc5, 0x44, 0x33, 0xaf, 0x92,
	0x9c, 0xba, 0x33, 0xbb, 0x19, 0x7e, 0x24, 0x89, 0x2f, 0xe6, 0x6f, 0xe1, 0x13, 0x4c, 0xf9, 0xf2,
	0xe8, 0x36, 0x1e, 0x21, 0x36, 0xfa, 0x96, 0x1d, 0xc4, 0x44, 0xb9, 0x86, 0xa2, 0xd4, 0x9b, 0x34,
	0x49, 0xdc, 0x89, 0x6e, 0x10, 0xde, 0x22, 0xb7, 0xfa, 0x87, 0x1c, 0x59, 0x4c, 0x80, 0xc3, 0x95,
	0x32, 0xac, 0x09, 0x24, 0x26, 0x90, 0xf8, 0x65, 0x43, 0xe2, 0xca, 0x51, 0xe4, 0xeb, 0x1c, 0x31,
	0x12, 0x60, 0x73, 0xb5, 0x94, 0x6b, 0x82, 0x9b, 0x09, 0x6e, 0x7e, 0xe5, 0xb8, 0xf9, 0xbf, 0x29,
	0x79, 0x59, 0x29, 0x66, 0x1f, 0x2f, 0xf1, 0x8a, 0x4b, 0x63, 0x6a, 0x48, 0x1a, 0x69, 0x5d, 0x94,
	0xa3, 0x67, 0x92, 0x8b, 0x11, 0x95, 0x1d, 0x41, 0x54, 0xee, 0x02, 0x44, 0xe5, 0xd1, 0xd6, 0x2f,
	0xb0, 0xcc, 0x61, 0xac, 0xcd, 0x24, 0x62, 0xad, 0xfe, 0x1a, 0xac, 0xcd, 0xbe, 0x16, 0x6b, 0x73,
	0x17, 0x62, 0x6d, 0xfe, 0x02, 0xac, 0x2d, 0x24, 0x9b, 0x88, 0xf9, 0xdf, 0xea, 0x71, 0x0b, 0xd4,
	0x2f, 0xfb, 0xbd, 0x93, 0xcb, 0xbc, 0x8d, 0x0d, 0x05, 0xaf, 0xbe, 0xd7, 0x4b, 0xc7, 0x3f, 0x4e,
	0xce, 0x24, 0xe4, 0xfa, 0xd9, 0xa4, 0x27, 0x72, 0x39, 0xc5, 0x73, 0x98, 0xf1, 0xc3, 0x07, 0x23,
	0x9b, 0xd9, 0x1f, 0xbe, 0x5b, 0x49, 0xdd, 0xad, 0x2f, 0x92, 0x82, 0x98, 0x1f, 0x1a, 0x4a, 0x7a,
	0x43, 0xe2, 0x27, 0x35, 0x17, 0x7c, 0x7f, 0x63, 0x7e, 0x33, 0x15, 0x3d, 0xb7, 0xba, 0xfa, 0x1e,
	0xf5, 0xb7, 0xb5, 0x19, 0xdc, 0xd2, 0x26, 0x3b, 0xe2, 0x9e, 0xda, 0x52, 0xf8, 0xc8, 0x0f, 0x3e,
	0x28, 0xd2, 0xb7, 0x59, 0x21, 0x59, 0xf9, 0x33, 0x1f, 0xfb, 0x96, 0xa0, 0x90, 0x20, 0xac, 0x22,
	0xfa, 0xbf, 0x5f, 0xc8, 0xf7, 0x4a, 0xe6, 0x57, 0xea, 0x21, 0x72, 0x83, 0x73, 0x67, 0x8b, 0x9f,
	0xb9, 0xf2, 0x45, 0xe5, 0x18, 0x2f, 0xb2, 0x24, 0x33, 0x20, 0xcc, 0x02, 0x2c, 0xc9, 0xdd, 0xc0,
	0x76, 0xfb, 0xbc, 0xef, 0xc3, 0x46, 0xd3, 0xd1, 0x49, 0x5a, 0xa7, 0xfb, 0x4a, 0xb6, 0x80, 0x26,
	0xb9, 0xa2, 0x66, 0x44, 0xf0, 0x69, 0xea, 0x40, 0xbe, 0xc7, 0xbc, 0xf0, 0xf3, 0x47, 0xf3, 0x8f,
	0xa6, 0xc8, 0x34, 0x5e, 0x0b, 0x84, 0xdf, 0x53, 0xad, 0x92, 0xec, 0x36, 0xef, 0x00, 0xcf, 0x53,
	0xe3, 0x3e, 0x9e, 0x5e, 0x88, 0xfe, 0xfc, 0x25, 0xad, 0x5b, 0xe1, 0x3c, 0xa9, 0x34, 0xf4, 0x3f,
	0x40, 0x89, 0xcc, 0x7e, 0x9f, 0xf7, 0xbd, 0xb6, 0x7c, 0xad, 0x2f, 0x3d, 0xcb, 0x12, 0xa9, 0x46,
	0xb4, 0xe8, 0xf3, 0x5e, 0x9c, 0xa9, 0x46, 0xf2, 0x2d, 0x3a, 0x80, 0xfe, 0xf9, 0xf0, 0xab, 0xee,
	0xbe, 0x87, 0xf3, 0x92, 0xe1, 0xef, 0xf9, 0x4b, 0xb1, 0x6f, 0xa5, 0xca, 0x09, 0x71, 0x42, 0xbe,
	0xf8, 0xfb, 0x14, 0xfe, 0x33, 0x42, 0xb8, 0x89, 0x3d, 0x46, 0xfd, 0x37, 0x7f, 0x1d, 0x00, 0xaf,
	0x56, 0x44, 0x47, 0xf5, 0xaf, 0x17, 0x5f, 0x28, 0x17, 0xb1, 0xdf, 0xef, 0xfd, 0xdc, 0x1f, 0xb4,
	0x26, 0x7e, 0xab, 0x6a, 0xf6, 0xe4, 0xec, 0x87, 0x5d, 0x3b, 0x60, 0x63, 0xbc, 0x82, 0x0f, 0x97,
	0x0d, 0xff, 0xb4, 0x27, 0xfe, 0x55, 0xdc, 0x28, 0x98, 0x51, 0xa6, 0xc0, 0x96, 0xd9, 0x51, 0xc5,
	0x81, 0xbe, 0x37, 0xb0, 0xdd, 0x4e, 0x8b, 0xdb, 0x6e, 0xf0, 0x56, 0xcf, 0xef, 0x67, 0x48, 0xf1,
	0xf1, 0x29, 0x73, 0x83, 0xf0, 0xef, 0x50, 0xe4, 0x7f, 0x7d, 0x84, 0x5f, 0x57, 0x6c, 0x96, 0xbf,
	0xfd, 0x7e, 0x39, 0xf5, 0x6f, 0xdf, 0x2f, 0xa7, 0xfe, 0xf3, 0xfb, 0xe5, 0xd4, 0x6f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x7f, 0xa3, 0x92, 0x9e, 0xd2, 0x48, 0x00, 0x00,
}

func (m *WishPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishPlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Id))
	}
	if m.Account != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.Channel != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Channel))
	}
	if m.NickName != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.HeadUrl != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.HeadUrl)))
		i += copy(dAtA[i:], *m.HeadUrl)
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Token != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Token)))
		i += copy(dAtA[i:], *m.Token)
	}
	if m.IsTryOne != nil {
		dAtA[i] = 0x40
		i++
		if *m.IsTryOne {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if len(m.Address) > 0 {
		for _, msg := range m.Address {
			dAtA[i] = 0x52
			i++
			i = encodeVarintTableStructWish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.HallSid != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.HallSid))
	}
	if m.NotOne != nil {
		dAtA[i] = 0x60
		i++
		if *m.NotOne {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NotOneWish != nil {
		dAtA[i] = 0x68
		i++
		if *m.NotOneWish {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Diamond != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Diamond))
	}
	if m.Types != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Types))
	}
	if m.LastExchangeDiamondTime != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LastExchangeDiamondTime))
	}
	if m.IsFreeze != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsFreeze {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FreezeTime != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.FreezeTime))
	}
	if m.Note != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Note)))
		i += copy(dAtA[i:], *m.Note)
	}
	if m.Operator != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Operator)))
		i += copy(dAtA[i:], *m.Operator)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishAddress) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Phone != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Phone)))
		i += copy(dAtA[i:], *m.Phone)
	}
	if m.Detail != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Detail)))
		i += copy(dAtA[i:], *m.Detail)
	}
	if m.IfDefault != nil {
		dAtA[i] = 0x20
		i++
		if *m.IfDefault {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AddressId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.AddressId))
	}
	if m.Province != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Province)))
		i += copy(dAtA[i:], *m.Province)
	}
	if m.City != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.City)))
		i += copy(dAtA[i:], *m.City)
	}
	if m.Area != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Area)))
		i += copy(dAtA[i:], *m.Area)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishMenu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishMenu) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishBrand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishBrand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Type != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Type)))
		i += copy(dAtA[i:], *m.Type)
	}
	if m.IsHot != nil {
		dAtA[i] = 0x20
		i++
		if *m.IsHot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ClickCount != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ClickCount))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.Status != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Status))
	}
	if m.HostWeight != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.HostWeight))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishItemType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishItemType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Type != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Type)))
		i += copy(dAtA[i:], *m.Type)
	}
	if m.IsRecommend != nil {
		dAtA[i] = 0x20
		i++
		if *m.IsRecommend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HostWeight != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.HostWeight))
	}
	if m.IsHot != nil {
		dAtA[i] = 0x30
		i++
		if *m.IsHot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ClickCount != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ClickCount))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.Status != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Status))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishStyle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishStyle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Icon != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Icon)))
		i += copy(dAtA[i:], *m.Icon)
	}
	if m.Desc != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Desc)))
		i += copy(dAtA[i:], *m.Desc)
	}
	if m.Brand != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Brand))
	}
	if m.Type != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Type))
	}
	if m.Price != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Price))
	}
	if m.RecoveryPrice != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecoveryPrice))
	}
	if m.Length != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Length))
	}
	if m.Wide != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Wide))
	}
	if m.High != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.High))
	}
	if m.BigSize != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.BigSize)))
		i += copy(dAtA[i:], *m.BigSize)
	}
	if len(m.Material) > 0 {
		for _, s := range m.Material {
			dAtA[i] = 0x6a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Diamond != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Diamond))
	}
	if m.StockAmount != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.StockAmount))
	}
	if m.Status != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Status))
	}
	if m.PreHaveTime != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PreHaveTime))
	}
	if m.IsPreSale != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsPreSale {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UploadTime != nil {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.UploadTime))
	}
	if m.SoldOutTime != nil {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.SoldOutTime))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.UseType != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.UseType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishBoxItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishBoxItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Id))
	}
	if m.WishItemId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishItemId))
	}
	if m.Status != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Status))
	}
	if m.PreStartTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PreStartTime))
	}
	if m.PreEndTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PreEndTime))
	}
	if m.WishBoxId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishBoxId))
	}
	if m.Style != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Style))
	}
	if m.IsWin != nil {
		dAtA[i] = 0x40
		i++
		if *m.IsWin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PerNum != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PerNum))
	}
	if m.PerTime != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PerTime))
	}
	if m.PerRate != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PerRate))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Price != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Price))
	}
	if m.PredictArrivalTime != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PredictArrivalTime))
	}
	if m.Diamond != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Diamond))
	}
	if m.BigLoss != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.BigLoss))
	}
	if m.SmallLoss != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.SmallLoss))
	}
	if m.Common != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Common))
	}
	if m.BigWin != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.BigWin))
	}
	if m.SmallWin != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.SmallWin))
	}
	if m.CommonAddWeight != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CommonAddWeight))
	}
	if m.BigWinAddWeight != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.BigWinAddWeight))
	}
	if m.SmallWinAddWeight != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.SmallWinAddWeight))
	}
	if m.RewardLv != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RewardLv))
	}
	if m.IsMakeWish != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsMakeWish {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LocalNum != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LocalNum))
	}
	if m.TaskTime != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.TaskTime))
	}
	if m.WishItemName != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.WishItemName)))
		i += copy(dAtA[i:], *m.WishItemName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishBox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishBox) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Icon != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Icon)))
		i += copy(dAtA[i:], *m.Icon)
	}
	if len(m.Menu) > 0 {
		for _, num := range m.Menu {
			dAtA[i] = 0x20
			i++
			i = encodeVarintTableStructWish(dAtA, i, uint64(num))
		}
	}
	if len(m.Items) > 0 {
		for _, num := range m.Items {
			dAtA[i] = 0x28
			i++
			i = encodeVarintTableStructWish(dAtA, i, uint64(num))
		}
	}
	if m.Desc != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Desc)))
		i += copy(dAtA[i:], *m.Desc)
	}
	if m.Index != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Index)))
		i += copy(dAtA[i:], *m.Index)
	}
	if m.Match != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Match))
	}
	if m.TotalNum != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.TotalNum))
	}
	if m.RareNum != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RareNum))
	}
	if m.Price != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Price))
	}
	if m.Status != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Status))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if len(m.Brands) > 0 {
		for _, num := range m.Brands {
			dAtA[i] = 0x70
			i++
			i = encodeVarintTableStructWish(dAtA, i, uint64(num))
		}
	}
	if len(m.Types) > 0 {
		for _, num := range m.Types {
			dAtA[i] = 0x78
			i++
			i = encodeVarintTableStructWish(dAtA, i, uint64(num))
		}
	}
	if len(m.Styles) > 0 {
		for _, num := range m.Styles {
			dAtA[i] = 0x80
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTableStructWish(dAtA, i, uint64(num))
		}
	}
	if m.WinNum != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WinNum))
	}
	if m.GuardianId != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.GuardianId))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.PutOnTime != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PutOnTime))
	}
	if m.SortWeight != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.SortWeight))
	}
	if m.HaveIsWin != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		if *m.HaveIsWin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WishPoolId != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishPoolId))
	}
	if len(m.WishItems) > 0 {
		for _, num := range m.WishItems {
			dAtA[i] = 0xc8
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintTableStructWish(dAtA, i, uint64(num))
		}
	}
	if m.IsTask != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x2
		i++
		if *m.IsTask {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ProductStatus != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ProductStatus))
	}
	if m.GuardianOverTime != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.GuardianOverTime))
	}
	if m.IsGuardian != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x3
		i++
		if *m.IsGuardian {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsRecommend != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x3
		i++
		if *m.IsRecommend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.GuardType != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.GuardType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Id))
	}
	if m.WishBoxId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishBoxId))
	}
	if m.DareId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DareId))
	}
	if m.DareName != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.DareName)))
		i += copy(dAtA[i:], *m.DareName)
	}
	if m.BeDareId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.BeDareId))
	}
	if m.BeDareName != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.BeDareName)))
		i += copy(dAtA[i:], *m.BeDareName)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Result != nil {
		dAtA[i] = 0x40
		i++
		if *m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ChallengeItemId != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ChallengeItemId))
	}
	if m.DareHeadIcon != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.DareHeadIcon)))
		i += copy(dAtA[i:], *m.DareHeadIcon)
	}
	if m.DefendTime != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DefendTime))
	}
	if m.DarePrice != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DarePrice))
	}
	if m.DareType != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DareType))
	}
	if m.WishItemId != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishItemId))
	}
	if m.PoolLocalStatus != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PoolLocalStatus))
	}
	if m.PoolIsOpenAward != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		if *m.PoolIsOpenAward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PoolId != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PoolId))
	}
	if m.PoolIncomeValue != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PoolIncomeValue))
	}
	if m.ChallengeItemName != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.ChallengeItemName)))
		i += copy(dAtA[i:], *m.ChallengeItemName)
	}
	if m.AfterPoolIncomeValue != nil {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.AfterPoolIncomeValue))
	}
	if m.AfterPoolIsOpenAward != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		if *m.AfterPoolIsOpenAward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.GuardType != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.GuardType))
	}
	if m.AfterPoolLocalStatus != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.AfterPoolLocalStatus))
	}
	if m.CreateTimeMill != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTimeMill))
	}
	if m.GoroutineID != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.GoroutineID))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishOccupied) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishOccupied) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Id))
	}
	if m.WishBoxId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishBoxId))
	}
	if m.NickName != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.HeadUrl != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.HeadUrl)))
		i += copy(dAtA[i:], *m.HeadUrl)
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.EndTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.EndTime))
	}
	if m.OccupiedTime != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.OccupiedTime))
	}
	if m.Status != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Status))
	}
	if m.CoinNum != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CoinNum))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerWishData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerWishData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Id))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.WishBoxId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishBoxId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.WishBoxItemId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishBoxItemId))
	}
	if m.Status != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Status))
	}
	if m.FinishTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.FinishTime))
	}
	if m.ProductUrl != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.ProductUrl)))
		i += copy(dAtA[i:], *m.ProductUrl)
	}
	if m.Match != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Match))
	}
	if m.IsMakeWish != nil {
		dAtA[i] = 0x50
		i++
		if *m.IsMakeWish {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WishItemId != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishItemId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerWishItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerWishItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Id))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.ChallengeItemId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ChallengeItemId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Status != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Status))
	}
	if m.WishBoxId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishBoxId))
	}
	if m.IsRead != nil {
		dAtA[i] = 0x38
		i++
		if *m.IsRead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.ExpireTime != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ExpireTime))
	}
	if m.RecyclePrice != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecyclePrice))
	}
	if m.RecycleType != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecycleType))
	}
	if m.Operator != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Operator)))
		i += copy(dAtA[i:], *m.Operator)
	}
	if m.WishItemId != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishItemId))
	}
	if m.WishItemPrice != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishItemPrice))
	}
	if m.DareDiamond != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DareDiamond))
	}
	if m.ProductName != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.ProductName)))
		i += copy(dAtA[i:], *m.ProductName)
	}
	if m.WishItemDiamond != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishItemDiamond))
	}
	if m.WishItemIcon != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.WishItemIcon)))
		i += copy(dAtA[i:], *m.WishItemIcon)
	}
	if m.WishItemStyle != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishItemStyle))
	}
	if m.BoxName != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.BoxName)))
		i += copy(dAtA[i:], *m.BoxName)
	}
	if m.BoxIcon != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.BoxIcon)))
		i += copy(dAtA[i:], *m.BoxIcon)
	}
	if m.BoxMatch != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.BoxMatch))
	}
	if m.AfterIsOpenAward != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		if *m.AfterIsOpenAward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsOpenAward != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		if *m.IsOpenAward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AfterLocalStatus != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.AfterLocalStatus))
	}
	if m.LocalStatus != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LocalStatus))
	}
	if m.CreateTimeMill != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTimeMill))
	}
	if m.GoroutineID != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.GoroutineID))
	}
	if m.GiveType != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.GiveType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerExchangeLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerExchangeLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Id))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.PlayerAccount != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.PlayerAccount)))
		i += copy(dAtA[i:], *m.PlayerAccount)
	}
	if m.Status != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Status))
	}
	if m.Receiver != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Receiver)))
		i += copy(dAtA[i:], *m.Receiver)
	}
	if m.Phone != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Phone)))
		i += copy(dAtA[i:], *m.Phone)
	}
	if m.Address != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Address)))
		i += copy(dAtA[i:], *m.Address)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.DeliveryTime != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DeliveryTime))
	}
	if m.OrderId != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.OrderId)))
		i += copy(dAtA[i:], *m.OrderId)
	}
	if m.BoxDrawPrice != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.BoxDrawPrice))
	}
	if m.WishBoxItem != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishBoxItem))
	}
	if m.Note != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Note)))
		i += copy(dAtA[i:], *m.Note)
	}
	if m.Company != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Company)))
		i += copy(dAtA[i:], *m.Company)
	}
	if m.CompanyCode != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.CompanyCode)))
		i += copy(dAtA[i:], *m.CompanyCode)
	}
	if m.Odd != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Odd)))
		i += copy(dAtA[i:], *m.Odd)
	}
	if m.WishBoxId != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishBoxId))
	}
	if m.ProductId != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ProductId))
	}
	if m.ProductName != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.ProductName)))
		i += copy(dAtA[i:], *m.ProductName)
	}
	if m.ProductIcon != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.ProductIcon)))
		i += copy(dAtA[i:], *m.ProductIcon)
	}
	if m.ProductPrice != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ProductPrice))
	}
	if m.ProductDiamond != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ProductDiamond))
	}
	if m.PlayerItemId != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerItemId))
	}
	if m.UserId != nil {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.UserId))
	}
	if m.Postage != nil {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Postage))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.Operator != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Operator)))
		i += copy(dAtA[i:], *m.Operator)
	}
	if m.GiveType != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.GiveType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerExchangeItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerExchangeItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BoxDrawPrice != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.BoxDrawPrice))
	}
	if m.WishBoxItem != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishBoxItem))
	}
	if m.WishBoxId != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishBoxId))
	}
	if m.ProductId != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ProductId))
	}
	if m.Style != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Style))
	}
	if m.SaleStatus != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.SaleStatus))
	}
	if m.PreHaveTime != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PreHaveTime))
	}
	if m.ProductName != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.ProductName)))
		i += copy(dAtA[i:], *m.ProductName)
	}
	if m.ProductIcon != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.ProductIcon)))
		i += copy(dAtA[i:], *m.ProductIcon)
	}
	if m.ProductPrice != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ProductPrice))
	}
	if m.WinTime != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WinTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishRecycleOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishRecycleOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Id))
	}
	if m.RecycleTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecycleTime))
	}
	if m.UserAccount != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.UserAccount)))
		i += copy(dAtA[i:], *m.UserAccount)
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.UserId != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.UserId))
	}
	if m.Type != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Type))
	}
	if m.Channel != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Channel))
	}
	if m.BankCardId != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.BankCardId)))
		i += copy(dAtA[i:], *m.BankCardId)
	}
	if len(m.RecycleItemList) > 0 {
		for _, msg := range m.RecycleItemList {
			dAtA[i] = 0x9a
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintTableStructWish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Status != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Status))
	}
	if m.InitTime != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.InitTime))
	}
	if m.RecyclePriceTotal != nil {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecyclePriceTotal))
	}
	if m.ProductPriceTotal != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ProductPriceTotal))
	}
	if m.RecycleDiamond != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecycleDiamond))
	}
	if m.RecycleNote != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecycleNote))
	}
	if m.RefusalNote != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.RefusalNote)))
		i += copy(dAtA[i:], *m.RefusalNote)
	}
	if m.Remarks != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Remarks)))
		i += copy(dAtA[i:], *m.Remarks)
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.PaymentOrderId != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.PaymentOrderId)))
		i += copy(dAtA[i:], *m.PaymentOrderId)
	}
	if m.Operator != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Operator)))
		i += copy(dAtA[i:], *m.Operator)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishRecycleItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishRecycleItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BoxDrawPrice != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.BoxDrawPrice))
	}
	if m.RecyclePrice != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecyclePrice))
	}
	if m.RecycleDiamond != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecycleDiamond))
	}
	if m.WinTime != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WinTime))
	}
	if m.WishBoxId != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishBoxId))
	}
	if m.ProductId != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ProductId))
	}
	if m.Style != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Style))
	}
	if m.ProductName != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.ProductName)))
		i += copy(dAtA[i:], *m.ProductName)
	}
	if m.ProductIcon != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.ProductIcon)))
		i += copy(dAtA[i:], *m.ProductIcon)
	}
	if m.PlayerItemId != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerItemId))
	}
	if m.WishBoxItemId != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishBoxItemId))
	}
	if m.ProductPrice != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ProductPrice))
	}
	if m.ProductDiamond != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ProductDiamond))
	}
	if m.GiveType != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.GiveType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerWishCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerWishCollection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Id))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.WishBoxId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishBoxId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishTopLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishTopLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Id))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.HeadIcon != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.HeadIcon)))
		i += copy(dAtA[i:], *m.HeadIcon)
	}
	if m.NickName != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.WishNum != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishNum))
	}
	if m.CoinNum != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CoinNum))
	}
	if m.ThatDayTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ThatDayTime))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishGuardianDiamondLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishGuardianDiamondLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Id))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.HeadIcon != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.HeadIcon)))
		i += copy(dAtA[i:], *m.HeadIcon)
	}
	if m.NickName != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.WishNum != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishNum))
	}
	if m.CoinNum != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CoinNum))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.BoxId != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.BoxId))
	}
	if m.TotalNum != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.TotalNum))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishGuardianTopLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishGuardianTopLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Id))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.WishNum != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishNum))
	}
	if m.CoinNum != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CoinNum))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.UpdateCoinTime != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.UpdateCoinTime))
	}
	if m.UpdateWishTime != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.UpdateWishTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishPool) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Id))
	}
	if m.PoolLimit != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PoolLimit))
	}
	if m.InitialValue != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.InitialValue))
	}
	if m.IncomeValue != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.IncomeValue))
	}
	if m.Recycle != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Recycle))
	}
	if m.Commission != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Commission))
	}
	if m.StartAward != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.StartAward))
	}
	if m.CloseAward != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CloseAward))
	}
	if m.Name != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.ShowInitialValue != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ShowInitialValue))
	}
	if m.ShowRecycle != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ShowRecycle))
	}
	if m.ShowCommission != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ShowCommission))
	}
	if m.ShowStartAward != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ShowStartAward))
	}
	if m.ShowCloseAward != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ShowCloseAward))
	}
	if m.IsOpenAward != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		if *m.IsOpenAward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsDefault != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		if *m.IsDefault {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BigLoss != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(m.BigLoss.Size()))
		n1, err := m.BigLoss.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.SmallLoss != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(m.SmallLoss.Size()))
		n2, err := m.SmallLoss.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Common != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(m.Common.Size()))
		n3, err := m.Common.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.BigWin != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(m.BigWin.Size()))
		n4, err := m.BigWin.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.SmallWin != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(m.SmallWin.Size()))
		n5, err := m.SmallWin.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.LocalStatus != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LocalStatus))
	}
	if m.PoolConfigId != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PoolConfigId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishPoolCfg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishPoolCfg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Id))
	}
	if m.PoolLimit != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PoolLimit))
	}
	if m.InitialValue != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.InitialValue))
	}
	if m.IncomeValue != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.IncomeValue))
	}
	if m.Recycle != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Recycle))
	}
	if m.Commission != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Commission))
	}
	if m.StartAward != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.StartAward))
	}
	if m.CloseAward != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CloseAward))
	}
	if m.Name != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.ShowInitialValue != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ShowInitialValue))
	}
	if m.ShowRecycle != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ShowRecycle))
	}
	if m.ShowCommission != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ShowCommission))
	}
	if m.ShowStartAward != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ShowStartAward))
	}
	if m.ShowCloseAward != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ShowCloseAward))
	}
	if m.IsOpenAward != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		if *m.IsOpenAward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsDefault != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		if *m.IsDefault {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BigLoss != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(m.BigLoss.Size()))
		n6, err := m.BigLoss.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.SmallLoss != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(m.SmallLoss.Size()))
		n7, err := m.SmallLoss.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Common != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(m.Common.Size()))
		n8, err := m.Common.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.BigWin != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(m.BigWin.Size()))
		n9, err := m.BigWin.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.SmallWin != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(m.SmallWin.Size()))
		n10, err := m.SmallWin.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.WishPoolIds != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishPoolIds))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishPoolStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishPoolStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxValue != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.MaxValue))
	}
	if m.MinValue != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.MinValue))
	}
	if m.ShowMaxValue != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ShowMaxValue))
	}
	if m.ShowMinValue != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ShowMinValue))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishBoItemWinCfg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishBoItemWinCfg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Id))
	}
	if m.WishBoxId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishBoxId))
	}
	if m.WishItemId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishItemId))
	}
	if m.BigLoss != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.BigLoss))
	}
	if m.SmallLoss != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.SmallLoss))
	}
	if m.Common != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Common))
	}
	if m.BigWin != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.BigWin))
	}
	if m.SmallWin != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.SmallWin))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PriceSection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceSection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.OneMin != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.OneMin))
	}
	if m.OneMax != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.OneMax))
	}
	if m.TwoMin != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.TwoMin))
	}
	if m.TwoMax != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.TwoMax))
	}
	if m.ThreeMin != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ThreeMin))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishMailSection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishMailSection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.Postage1 != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Postage1))
	}
	if m.Postage2 != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Postage2))
	}
	if m.Postage3 != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Postage3))
	}
	if len(m.RemoteAreaList) > 0 {
		for _, s := range m.RemoteAreaList {
			dAtA[i] = 0x52
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.FreeNumber != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.FreeNumber))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishRecycleSection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishRecycleSection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.Platform != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Platform))
	}
	if m.DayTopCount != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DayTopCount))
	}
	if m.Player != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Player))
	}
	if m.Status != nil {
		dAtA[i] = 0x50
		i++
		if *m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DayMoneyTopCount != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DayMoneyTopCount))
	}
	if m.DayMoneyTop != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DayMoneyTop))
	}
	if m.OrderThresholdMoney != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.OrderThresholdMoney))
	}
	if m.DayDiamondTopCount != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DayDiamondTopCount))
	}
	if m.DayDiamondTop != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DayDiamondTop))
	}
	if m.OrderThreshold != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.OrderThreshold))
	}
	if m.FeeRate != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.FeeRate))
	}
	if m.PlatformTax != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlatformTax))
	}
	if m.RealTax != nil {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RealTax))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishPayWarnCfg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishPayWarnCfg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WithdrawalTime != nil {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WithdrawalTime))
	}
	if m.WithdrawalTimes != nil {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WithdrawalTimes))
	}
	if m.WithdrawalGoldRate != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WithdrawalGoldRate))
	}
	if m.WithdrawalGold != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WithdrawalGold))
	}
	if m.WithdrawalDiamondRate != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WithdrawalDiamondRate))
	}
	if m.WithdrawalDiamond != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WithdrawalDiamond))
	}
	if len(m.PhoneList) > 0 {
		for _, s := range m.PhoneList {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x4
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishCurrencyConversionCfg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishCurrencyConversionCfg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.Money != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Money))
	}
	if m.Coin != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Coin))
	}
	if m.Diamond != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Diamond))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishGuardianCfg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishGuardianCfg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.DayDiamondTop != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DayDiamondTop))
	}
	if m.OnceDiamondRebate != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.OnceDiamondRebate))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SingleInitCfg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleInitCfg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Table != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Table)))
		i += copy(dAtA[i:], *m.Table)
	}
	if m.Status != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Status))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RecycleNoteCfg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecycleNoteCfg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if len(m.Text) > 0 {
		for _, s := range m.Text {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DiamondRecharge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiamondRecharge) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Id))
	}
	if m.Diamond != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Diamond))
	}
	if m.CoinPrice != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CoinPrice))
	}
	if m.MonthFirst != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.MonthFirst))
	}
	if m.Rebate != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Rebate))
	}
	if m.StartTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.EndTime))
	}
	if m.Status != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Status))
	}
	if m.Sort != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Sort))
	}
	if m.DisPrice != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DisPrice))
	}
	if m.GiveDiamond != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.GiveDiamond))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishPoolReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishPoolReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreateTime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.WishPlayerCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishPlayerCount))
	}
	if m.AddPlayerCount != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.AddPlayerCount))
	}
	if m.LuckyPlayerCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LuckyPlayerCount))
	}
	if m.LuckyCount != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LuckyCount))
	}
	if m.LuckyWishCount != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LuckyWishCount))
	}
	if m.ConvertCount != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertCount))
	}
	if m.RecycleCount != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecycleCount))
	}
	if m.PlayerRecycleCount != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerRecycleCount))
	}
	if m.OfficialRecycleCount != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.OfficialRecycleCount))
	}
	if m.RecycleGoldTotal != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecycleGoldTotal))
	}
	if m.LuckyGoldTotal != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LuckyGoldTotal))
	}
	if m.ConvertGoodsPriceTotal != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertGoodsPriceTotal))
	}
	if m.CommissionTotal != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CommissionTotal))
	}
	if m.PendConvertGoodsPriceTotal != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PendConvertGoodsPriceTotal))
	}
	if m.PendConvertCount != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PendConvertCount))
	}
	if m.PlayerRecycleGoldTotal != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerRecycleGoldTotal))
	}
	if m.OfficialRecycleGoldTotal != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.OfficialRecycleGoldTotal))
	}
	if m.Profit != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Profit))
	}
	if m.ConvertDiamondTotal != nil {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertDiamondTotal))
	}
	if m.ConvertDiamondPlayerCount != nil {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertDiamondPlayerCount))
	}
	if m.ConvertDiamondCount != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertDiamondCount))
	}
	if m.RecyclePlayerCount != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecyclePlayerCount))
	}
	if m.DeliverCount != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DeliverCount))
	}
	if m.DeliverPlayerCount != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DeliverPlayerCount))
	}
	if m.InPoolCount != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.InPoolCount))
	}
	if m.InPoolPlayerCount != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.InPoolPlayerCount))
	}
	if m.WinItemPriceTotal != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WinItemPriceTotal))
	}
	if m.StartTime != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.EndTime))
	}
	if m.ProductDiamondTotal != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ProductDiamondTotal))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishPoolReportWeek) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishPoolReportWeek) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreateTime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.WishPlayerCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishPlayerCount))
	}
	if m.AddPlayerCount != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.AddPlayerCount))
	}
	if m.LuckyPlayerCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LuckyPlayerCount))
	}
	if m.LuckyCount != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LuckyCount))
	}
	if m.LuckyWishCount != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LuckyWishCount))
	}
	if m.ConvertCount != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertCount))
	}
	if m.RecycleCount != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecycleCount))
	}
	if m.PlayerRecycleCount != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerRecycleCount))
	}
	if m.OfficialRecycleCount != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.OfficialRecycleCount))
	}
	if m.RecycleGoldTotal != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecycleGoldTotal))
	}
	if m.LuckyGoldTotal != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LuckyGoldTotal))
	}
	if m.ConvertGoodsPriceTotal != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertGoodsPriceTotal))
	}
	if m.CommissionTotal != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CommissionTotal))
	}
	if m.PendConvertGoodsPriceTotal != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PendConvertGoodsPriceTotal))
	}
	if m.PendConvertCount != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PendConvertCount))
	}
	if m.PlayerRecycleGoldTotal != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerRecycleGoldTotal))
	}
	if m.OfficialRecycleGoldTotal != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.OfficialRecycleGoldTotal))
	}
	if m.Profit != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Profit))
	}
	if m.ConvertDiamondTotal != nil {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertDiamondTotal))
	}
	if m.ConvertDiamondPlayerCount != nil {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertDiamondPlayerCount))
	}
	if m.ConvertDiamondCount != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertDiamondCount))
	}
	if m.RecyclePlayerCount != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecyclePlayerCount))
	}
	if m.DeliverCount != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DeliverCount))
	}
	if m.DeliverPlayerCount != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DeliverPlayerCount))
	}
	if m.InPoolCount != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.InPoolCount))
	}
	if m.InPoolPlayerCount != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.InPoolPlayerCount))
	}
	if m.WinItemPriceTotal != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WinItemPriceTotal))
	}
	if m.StartTime != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.EndTime))
	}
	if m.ProductDiamondTotal != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ProductDiamondTotal))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishPoolReportMonth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishPoolReportMonth) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreateTime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.WishPlayerCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishPlayerCount))
	}
	if m.AddPlayerCount != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.AddPlayerCount))
	}
	if m.LuckyPlayerCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LuckyPlayerCount))
	}
	if m.LuckyCount != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LuckyCount))
	}
	if m.LuckyWishCount != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LuckyWishCount))
	}
	if m.ConvertCount != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertCount))
	}
	if m.RecycleCount != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecycleCount))
	}
	if m.PlayerRecycleCount != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerRecycleCount))
	}
	if m.OfficialRecycleCount != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.OfficialRecycleCount))
	}
	if m.RecycleGoldTotal != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecycleGoldTotal))
	}
	if m.LuckyGoldTotal != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LuckyGoldTotal))
	}
	if m.ConvertGoodsPriceTotal != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertGoodsPriceTotal))
	}
	if m.CommissionTotal != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CommissionTotal))
	}
	if m.PendConvertGoodsPriceTotal != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PendConvertGoodsPriceTotal))
	}
	if m.PendConvertCount != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PendConvertCount))
	}
	if m.PlayerRecycleGoldTotal != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerRecycleGoldTotal))
	}
	if m.OfficialRecycleGoldTotal != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.OfficialRecycleGoldTotal))
	}
	if m.Profit != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Profit))
	}
	if m.ConvertDiamondTotal != nil {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertDiamondTotal))
	}
	if m.ConvertDiamondPlayerCount != nil {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertDiamondPlayerCount))
	}
	if m.ConvertDiamondCount != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertDiamondCount))
	}
	if m.RecyclePlayerCount != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecyclePlayerCount))
	}
	if m.DeliverCount != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DeliverCount))
	}
	if m.DeliverPlayerCount != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DeliverPlayerCount))
	}
	if m.InPoolCount != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.InPoolCount))
	}
	if m.InPoolPlayerCount != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.InPoolPlayerCount))
	}
	if m.WinItemPriceTotal != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WinItemPriceTotal))
	}
	if m.StartTime != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.EndTime))
	}
	if m.ProductDiamondTotal != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ProductDiamondTotal))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishBoxReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishBoxReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.WishPlayerCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishPlayerCount))
	}
	if m.AddPlayerCount != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.AddPlayerCount))
	}
	if m.DrawPlayerCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DrawPlayerCount))
	}
	if m.DrawCount != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DrawCount))
	}
	if m.LuckyWishCount != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LuckyWishCount))
	}
	if m.ConvertCount != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertCount))
	}
	if m.RecycleCount != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecycleCount))
	}
	if m.PlayerRecycleCount != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerRecycleCount))
	}
	if m.OfficialRecycleCount != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.OfficialRecycleCount))
	}
	if m.RecycleGoldTotal != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecycleGoldTotal))
	}
	if m.LuckyGoldTotal != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LuckyGoldTotal))
	}
	if m.ConvertGoodsPriceTotal != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertGoodsPriceTotal))
	}
	if m.CommissionTotal != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CommissionTotal))
	}
	if m.PendConvertGoodsPriceTotal != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PendConvertGoodsPriceTotal))
	}
	if m.PendConvertCount != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PendConvertCount))
	}
	if m.PlayerRecycleGoldTotal != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerRecycleGoldTotal))
	}
	if m.OfficialRecycleGoldTotal != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.OfficialRecycleGoldTotal))
	}
	if m.Profit != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Profit))
	}
	if m.ConvertDiamondPlayerCount != nil {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertDiamondPlayerCount))
	}
	if m.RecyclePlayerCount != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecyclePlayerCount))
	}
	if m.DeliverCount != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DeliverCount))
	}
	if m.DeliverPlayerCount != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DeliverPlayerCount))
	}
	if m.WishPoolReportId != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishPoolReportId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.BoxId != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.BoxId))
	}
	if m.BoxName != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.BoxName)))
		i += copy(dAtA[i:], *m.BoxName)
	}
	if m.WinItemPriceTotal != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WinItemPriceTotal))
	}
	if m.ProductDiamondTotal != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ProductDiamondTotal))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishBoxReportWeek) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishBoxReportWeek) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.WishPlayerCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishPlayerCount))
	}
	if m.AddPlayerCount != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.AddPlayerCount))
	}
	if m.DrawPlayerCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DrawPlayerCount))
	}
	if m.DrawCount != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DrawCount))
	}
	if m.LuckyWishCount != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LuckyWishCount))
	}
	if m.ConvertCount != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertCount))
	}
	if m.RecycleCount != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecycleCount))
	}
	if m.PlayerRecycleCount != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerRecycleCount))
	}
	if m.OfficialRecycleCount != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.OfficialRecycleCount))
	}
	if m.RecycleGoldTotal != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecycleGoldTotal))
	}
	if m.LuckyGoldTotal != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LuckyGoldTotal))
	}
	if m.ConvertGoodsPriceTotal != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertGoodsPriceTotal))
	}
	if m.CommissionTotal != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CommissionTotal))
	}
	if m.PendConvertGoodsPriceTotal != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PendConvertGoodsPriceTotal))
	}
	if m.PendConvertCount != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PendConvertCount))
	}
	if m.PlayerRecycleGoldTotal != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerRecycleGoldTotal))
	}
	if m.OfficialRecycleGoldTotal != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.OfficialRecycleGoldTotal))
	}
	if m.Profit != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Profit))
	}
	if m.ConvertDiamondPlayerCount != nil {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertDiamondPlayerCount))
	}
	if m.RecyclePlayerCount != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecyclePlayerCount))
	}
	if m.DeliverCount != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DeliverCount))
	}
	if m.DeliverPlayerCount != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DeliverPlayerCount))
	}
	if m.WishPoolReportId != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishPoolReportId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.BoxId != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.BoxId))
	}
	if m.BoxName != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.BoxName)))
		i += copy(dAtA[i:], *m.BoxName)
	}
	if m.WinItemPriceTotal != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WinItemPriceTotal))
	}
	if m.StartTime != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.EndTime))
	}
	if m.ProductDiamondTotal != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ProductDiamondTotal))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishBoxReportMonth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishBoxReportMonth) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.WishPlayerCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishPlayerCount))
	}
	if m.AddPlayerCount != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.AddPlayerCount))
	}
	if m.DrawPlayerCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DrawPlayerCount))
	}
	if m.DrawCount != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DrawCount))
	}
	if m.LuckyWishCount != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LuckyWishCount))
	}
	if m.ConvertCount != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertCount))
	}
	if m.RecycleCount != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecycleCount))
	}
	if m.PlayerRecycleCount != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerRecycleCount))
	}
	if m.OfficialRecycleCount != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.OfficialRecycleCount))
	}
	if m.RecycleGoldTotal != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecycleGoldTotal))
	}
	if m.LuckyGoldTotal != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LuckyGoldTotal))
	}
	if m.ConvertGoodsPriceTotal != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertGoodsPriceTotal))
	}
	if m.CommissionTotal != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CommissionTotal))
	}
	if m.PendConvertGoodsPriceTotal != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PendConvertGoodsPriceTotal))
	}
	if m.PendConvertCount != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PendConvertCount))
	}
	if m.PlayerRecycleGoldTotal != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerRecycleGoldTotal))
	}
	if m.OfficialRecycleGoldTotal != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.OfficialRecycleGoldTotal))
	}
	if m.Profit != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Profit))
	}
	if m.ConvertDiamondPlayerCount != nil {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertDiamondPlayerCount))
	}
	if m.RecyclePlayerCount != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecyclePlayerCount))
	}
	if m.DeliverCount != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DeliverCount))
	}
	if m.DeliverPlayerCount != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DeliverPlayerCount))
	}
	if m.WishPoolReportId != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishPoolReportId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.BoxId != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.BoxId))
	}
	if m.BoxName != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.BoxName)))
		i += copy(dAtA[i:], *m.BoxName)
	}
	if m.WinItemPriceTotal != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WinItemPriceTotal))
	}
	if m.StartTime != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.EndTime))
	}
	if m.ProductDiamondTotal != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ProductDiamondTotal))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishBoxDetailReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishBoxDetailReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.WishPlayerCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishPlayerCount))
	}
	if m.WishAndDrawPlayerCount != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishAndDrawPlayerCount))
	}
	if m.WinCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WinCount))
	}
	if m.LuckyWishCount != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LuckyWishCount))
	}
	if m.ConvertCount != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertCount))
	}
	if m.RecycleCount != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecycleCount))
	}
	if m.PlayerRecycleCount != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerRecycleCount))
	}
	if m.OfficialRecycleCount != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.OfficialRecycleCount))
	}
	if m.RecycleGoldTotal != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecycleGoldTotal))
	}
	if m.LuckyGoldTotal != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LuckyGoldTotal))
	}
	if m.ConvertGoodsPriceTotal != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertGoodsPriceTotal))
	}
	if m.PendConvertCount != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PendConvertCount))
	}
	if m.PlayerRecycleGoldTotal != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerRecycleGoldTotal))
	}
	if m.OfficialRecycleGoldTotal != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.OfficialRecycleGoldTotal))
	}
	if m.PendConvertPriceTotal != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PendConvertPriceTotal))
	}
	if m.Profit != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Profit))
	}
	if m.RecyclePlayerCount != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecyclePlayerCount))
	}
	if m.DeliverCount != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DeliverCount))
	}
	if m.DeliverPlayerCount != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DeliverPlayerCount))
	}
	if m.WishBoxId != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishBoxId))
	}
	if m.WishBoxReportId != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.WishBoxReportId)))
		i += copy(dAtA[i:], *m.WishBoxReportId)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.ItemId != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ItemId))
	}
	if m.ItemName != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.ItemName)))
		i += copy(dAtA[i:], *m.ItemName)
	}
	if m.Style != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Style))
	}
	if m.AuditConvertCount != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.AuditConvertCount))
	}
	if m.AuditConvertPriceTotal != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.AuditConvertPriceTotal))
	}
	if m.WinItemPriceTotal != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WinItemPriceTotal))
	}
	if m.ProductDiamondTotal != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ProductDiamondTotal))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishBoxDetailReportWeek) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishBoxDetailReportWeek) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.WishPlayerCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishPlayerCount))
	}
	if m.WishAndDrawPlayerCount != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishAndDrawPlayerCount))
	}
	if m.WinCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WinCount))
	}
	if m.LuckyWishCount != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LuckyWishCount))
	}
	if m.ConvertCount != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertCount))
	}
	if m.RecycleCount != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecycleCount))
	}
	if m.PlayerRecycleCount != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerRecycleCount))
	}
	if m.OfficialRecycleCount != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.OfficialRecycleCount))
	}
	if m.RecycleGoldTotal != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecycleGoldTotal))
	}
	if m.LuckyGoldTotal != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LuckyGoldTotal))
	}
	if m.ConvertGoodsPriceTotal != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertGoodsPriceTotal))
	}
	if m.PendConvertCount != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PendConvertCount))
	}
	if m.PlayerRecycleGoldTotal != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerRecycleGoldTotal))
	}
	if m.OfficialRecycleGoldTotal != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.OfficialRecycleGoldTotal))
	}
	if m.PendConvertPriceTotal != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PendConvertPriceTotal))
	}
	if m.Profit != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Profit))
	}
	if m.RecyclePlayerCount != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecyclePlayerCount))
	}
	if m.DeliverCount != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DeliverCount))
	}
	if m.DeliverPlayerCount != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DeliverPlayerCount))
	}
	if m.WishBoxId != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishBoxId))
	}
	if m.WishBoxReportId != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.WishBoxReportId)))
		i += copy(dAtA[i:], *m.WishBoxReportId)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.ItemId != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ItemId))
	}
	if m.ItemName != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.ItemName)))
		i += copy(dAtA[i:], *m.ItemName)
	}
	if m.Style != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Style))
	}
	if m.AuditConvertCount != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.AuditConvertCount))
	}
	if m.AuditConvertPriceTotal != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.AuditConvertPriceTotal))
	}
	if m.WinItemPriceTotal != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WinItemPriceTotal))
	}
	if m.StartTime != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.EndTime))
	}
	if m.ProductDiamondTotal != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ProductDiamondTotal))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishBoxDetailReportMonth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishBoxDetailReportMonth) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.WishPlayerCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishPlayerCount))
	}
	if m.WishAndDrawPlayerCount != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishAndDrawPlayerCount))
	}
	if m.WinCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WinCount))
	}
	if m.LuckyWishCount != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LuckyWishCount))
	}
	if m.ConvertCount != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertCount))
	}
	if m.RecycleCount != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecycleCount))
	}
	if m.PlayerRecycleCount != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerRecycleCount))
	}
	if m.OfficialRecycleCount != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.OfficialRecycleCount))
	}
	if m.RecycleGoldTotal != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecycleGoldTotal))
	}
	if m.LuckyGoldTotal != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LuckyGoldTotal))
	}
	if m.ConvertGoodsPriceTotal != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertGoodsPriceTotal))
	}
	if m.PendConvertCount != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PendConvertCount))
	}
	if m.PlayerRecycleGoldTotal != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerRecycleGoldTotal))
	}
	if m.OfficialRecycleGoldTotal != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.OfficialRecycleGoldTotal))
	}
	if m.PendConvertPriceTotal != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PendConvertPriceTotal))
	}
	if m.Profit != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Profit))
	}
	if m.RecyclePlayerCount != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecyclePlayerCount))
	}
	if m.DeliverCount != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DeliverCount))
	}
	if m.DeliverPlayerCount != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DeliverPlayerCount))
	}
	if m.WishBoxId != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishBoxId))
	}
	if m.WishBoxReportId != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.WishBoxReportId)))
		i += copy(dAtA[i:], *m.WishBoxReportId)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.ItemId != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ItemId))
	}
	if m.ItemName != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.ItemName)))
		i += copy(dAtA[i:], *m.ItemName)
	}
	if m.Style != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Style))
	}
	if m.AuditConvertCount != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.AuditConvertCount))
	}
	if m.AuditConvertPriceTotal != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.AuditConvertPriceTotal))
	}
	if m.WinItemPriceTotal != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WinItemPriceTotal))
	}
	if m.StartTime != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.EndTime))
	}
	if m.ProductDiamondTotal != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ProductDiamondTotal))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishItemReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishItemReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.ItemId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ItemId))
	}
	if m.WishPlayerCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishPlayerCount))
	}
	if m.WishAndDrawPlayerCount != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishAndDrawPlayerCount))
	}
	if m.WinCount != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WinCount))
	}
	if m.LuckyWishCount != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LuckyWishCount))
	}
	if m.PendConvertCount != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PendConvertCount))
	}
	if m.ConvertCount != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ConvertCount))
	}
	if m.RecycleCount != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecycleCount))
	}
	if m.PlayerRecycleCount != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerRecycleCount))
	}
	if m.OfficialRecycleCount != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.OfficialRecycleCount))
	}
	if m.RecycleGoldTotal != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.RecycleGoldTotal))
	}
	if m.LuckyGoldTotal != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LuckyGoldTotal))
	}
	if m.ItemName != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.ItemName)))
		i += copy(dAtA[i:], *m.ItemName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishPoolPumpLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishPoolPumpLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Id))
	}
	if m.BoxId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.BoxId))
	}
	if m.PoolId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PoolId))
	}
	if m.Price != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Price))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.IncomeValue != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.IncomeValue))
	}
	if m.BoxName != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.BoxName)))
		i += copy(dAtA[i:], *m.BoxName)
	}
	if m.PoolName != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.PoolName)))
		i += copy(dAtA[i:], *m.PoolName)
	}
	if m.CreateTimeMill != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTimeMill))
	}
	if m.GoroutineID != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.GoroutineID))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishPoolLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishPoolLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Id))
	}
	if m.BoxId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.BoxId))
	}
	if m.PoolId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PoolId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.BeforeValue != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.BeforeValue))
	}
	if m.AfterValue != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.AfterValue))
	}
	if m.Value != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Value))
	}
	if m.Type != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Type))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.AfterIsOpenAward != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		if *m.AfterIsOpenAward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsOpenAward != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		if *m.IsOpenAward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AfterLocalStatus != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.AfterLocalStatus))
	}
	if m.LocalStatus != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LocalStatus))
	}
	if m.CreateTimeMill != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTimeMill))
	}
	if m.GoroutineID != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.GoroutineID))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishCoolDownConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishCoolDownConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.IsOpen != nil {
		dAtA[i] = 0x10
		i++
		if *m.IsOpen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ContinuousTime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ContinuousTime))
	}
	if m.ContinuousTimes != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ContinuousTimes))
	}
	if m.CoolDownTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CoolDownTime))
	}
	if m.DayLimit != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.DayLimit))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DiamondChangeLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiamondChangeLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LogId == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("LogId")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Account != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.ChangeDiamond != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.ChangeDiamond))
	}
	if m.SourceType != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.SourceType))
	}
	if m.SourceTypeName != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.SourceTypeName)))
		i += copy(dAtA[i:], *m.SourceTypeName)
	}
	if m.PayType != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PayType))
	}
	if m.CurDiamond != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CurDiamond))
	}
	if m.Diamond != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Diamond))
	}
	if m.Note != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Note)))
		i += copy(dAtA[i:], *m.Note)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RecycleReason) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecycleReason) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Id))
	}
	if m.Reason != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Reason)))
		i += copy(dAtA[i:], *m.Reason)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishSumOccupied) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishSumOccupied) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Id))
	}
	if m.WishBoxId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.WishBoxId))
	}
	if m.NickName != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.HeadUrl != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.HeadUrl)))
		i += copy(dAtA[i:], *m.HeadUrl)
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.OccupiedTime != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.OccupiedTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishWhite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishWhite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Id))
	}
	if m.NickName != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.Account != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Note != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(len(*m.Note)))
		i += copy(dAtA[i:], *m.Note)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishBuryingPointLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishBuryingPointLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Id))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.EventType != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.EventType))
	}
	if m.Time != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWish(dAtA, i, uint64(*m.Time))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTableStructWish(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *WishPlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWish(uint64(*m.Id))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.Channel != nil {
		n += 1 + sovTableStructWish(uint64(*m.Channel))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.HeadUrl != nil {
		l = len(*m.HeadUrl)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructWish(uint64(*m.PlayerId))
	}
	if m.Token != nil {
		l = len(*m.Token)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.IsTryOne != nil {
		n += 2
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if len(m.Address) > 0 {
		for _, e := range m.Address {
			l = e.Size()
			n += 1 + l + sovTableStructWish(uint64(l))
		}
	}
	if m.HallSid != nil {
		n += 1 + sovTableStructWish(uint64(*m.HallSid))
	}
	if m.NotOne != nil {
		n += 2
	}
	if m.NotOneWish != nil {
		n += 2
	}
	if m.Diamond != nil {
		n += 1 + sovTableStructWish(uint64(*m.Diamond))
	}
	if m.Types != nil {
		n += 1 + sovTableStructWish(uint64(*m.Types))
	}
	if m.LastExchangeDiamondTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.LastExchangeDiamondTime))
	}
	if m.IsFreeze != nil {
		n += 3
	}
	if m.FreezeTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.FreezeTime))
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.Phone != nil {
		l = len(*m.Phone)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.Detail != nil {
		l = len(*m.Detail)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.IfDefault != nil {
		n += 2
	}
	if m.AddressId != nil {
		n += 1 + sovTableStructWish(uint64(*m.AddressId))
	}
	if m.Province != nil {
		l = len(*m.Province)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.City != nil {
		l = len(*m.City)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.Area != nil {
		l = len(*m.Area)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishMenu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWish(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishBrand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWish(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.IsHot != nil {
		n += 2
	}
	if m.ClickCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.ClickCount))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.UpdateTime))
	}
	if m.Status != nil {
		n += 1 + sovTableStructWish(uint64(*m.Status))
	}
	if m.HostWeight != nil {
		n += 1 + sovTableStructWish(uint64(*m.HostWeight))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishItemType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWish(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.IsRecommend != nil {
		n += 2
	}
	if m.HostWeight != nil {
		n += 1 + sovTableStructWish(uint64(*m.HostWeight))
	}
	if m.IsHot != nil {
		n += 2
	}
	if m.ClickCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.ClickCount))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.UpdateTime))
	}
	if m.Status != nil {
		n += 1 + sovTableStructWish(uint64(*m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishStyle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWish(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWish(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.Icon != nil {
		l = len(*m.Icon)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.Desc != nil {
		l = len(*m.Desc)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.Brand != nil {
		n += 1 + sovTableStructWish(uint64(*m.Brand))
	}
	if m.Type != nil {
		n += 1 + sovTableStructWish(uint64(*m.Type))
	}
	if m.Price != nil {
		n += 1 + sovTableStructWish(uint64(*m.Price))
	}
	if m.RecoveryPrice != nil {
		n += 1 + sovTableStructWish(uint64(*m.RecoveryPrice))
	}
	if m.Length != nil {
		n += 1 + sovTableStructWish(uint64(*m.Length))
	}
	if m.Wide != nil {
		n += 1 + sovTableStructWish(uint64(*m.Wide))
	}
	if m.High != nil {
		n += 1 + sovTableStructWish(uint64(*m.High))
	}
	if m.BigSize != nil {
		l = len(*m.BigSize)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if len(m.Material) > 0 {
		for _, s := range m.Material {
			l = len(s)
			n += 1 + l + sovTableStructWish(uint64(l))
		}
	}
	if m.Diamond != nil {
		n += 1 + sovTableStructWish(uint64(*m.Diamond))
	}
	if m.StockAmount != nil {
		n += 2 + sovTableStructWish(uint64(*m.StockAmount))
	}
	if m.Status != nil {
		n += 2 + sovTableStructWish(uint64(*m.Status))
	}
	if m.PreHaveTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.PreHaveTime))
	}
	if m.IsPreSale != nil {
		n += 3
	}
	if m.UploadTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.UploadTime))
	}
	if m.SoldOutTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.SoldOutTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.UpdateTime))
	}
	if m.UseType != nil {
		n += 2 + sovTableStructWish(uint64(*m.UseType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishBoxItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWish(uint64(*m.Id))
	}
	if m.WishItemId != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishItemId))
	}
	if m.Status != nil {
		n += 1 + sovTableStructWish(uint64(*m.Status))
	}
	if m.PreStartTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.PreStartTime))
	}
	if m.PreEndTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.PreEndTime))
	}
	if m.WishBoxId != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishBoxId))
	}
	if m.Style != nil {
		n += 1 + sovTableStructWish(uint64(*m.Style))
	}
	if m.IsWin != nil {
		n += 2
	}
	if m.PerNum != nil {
		n += 1 + sovTableStructWish(uint64(*m.PerNum))
	}
	if m.PerTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.PerTime))
	}
	if m.PerRate != nil {
		n += 1 + sovTableStructWish(uint64(*m.PerRate))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if m.Price != nil {
		n += 1 + sovTableStructWish(uint64(*m.Price))
	}
	if m.PredictArrivalTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.PredictArrivalTime))
	}
	if m.Diamond != nil {
		n += 1 + sovTableStructWish(uint64(*m.Diamond))
	}
	if m.BigLoss != nil {
		n += 2 + sovTableStructWish(uint64(*m.BigLoss))
	}
	if m.SmallLoss != nil {
		n += 2 + sovTableStructWish(uint64(*m.SmallLoss))
	}
	if m.Common != nil {
		n += 2 + sovTableStructWish(uint64(*m.Common))
	}
	if m.BigWin != nil {
		n += 2 + sovTableStructWish(uint64(*m.BigWin))
	}
	if m.SmallWin != nil {
		n += 2 + sovTableStructWish(uint64(*m.SmallWin))
	}
	if m.CommonAddWeight != nil {
		n += 2 + sovTableStructWish(uint64(*m.CommonAddWeight))
	}
	if m.BigWinAddWeight != nil {
		n += 2 + sovTableStructWish(uint64(*m.BigWinAddWeight))
	}
	if m.SmallWinAddWeight != nil {
		n += 2 + sovTableStructWish(uint64(*m.SmallWinAddWeight))
	}
	if m.RewardLv != nil {
		n += 2 + sovTableStructWish(uint64(*m.RewardLv))
	}
	if m.IsMakeWish != nil {
		n += 3
	}
	if m.LocalNum != nil {
		n += 2 + sovTableStructWish(uint64(*m.LocalNum))
	}
	if m.TaskTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.TaskTime))
	}
	if m.WishItemName != nil {
		l = len(*m.WishItemName)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishBox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWish(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.Icon != nil {
		l = len(*m.Icon)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if len(m.Menu) > 0 {
		for _, e := range m.Menu {
			n += 1 + sovTableStructWish(uint64(e))
		}
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			n += 1 + sovTableStructWish(uint64(e))
		}
	}
	if m.Desc != nil {
		l = len(*m.Desc)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.Index != nil {
		l = len(*m.Index)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.Match != nil {
		n += 1 + sovTableStructWish(uint64(*m.Match))
	}
	if m.TotalNum != nil {
		n += 1 + sovTableStructWish(uint64(*m.TotalNum))
	}
	if m.RareNum != nil {
		n += 1 + sovTableStructWish(uint64(*m.RareNum))
	}
	if m.Price != nil {
		n += 1 + sovTableStructWish(uint64(*m.Price))
	}
	if m.Status != nil {
		n += 1 + sovTableStructWish(uint64(*m.Status))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if len(m.Brands) > 0 {
		for _, e := range m.Brands {
			n += 1 + sovTableStructWish(uint64(e))
		}
	}
	if len(m.Types) > 0 {
		for _, e := range m.Types {
			n += 1 + sovTableStructWish(uint64(e))
		}
	}
	if len(m.Styles) > 0 {
		for _, e := range m.Styles {
			n += 2 + sovTableStructWish(uint64(e))
		}
	}
	if m.WinNum != nil {
		n += 2 + sovTableStructWish(uint64(*m.WinNum))
	}
	if m.GuardianId != nil {
		n += 2 + sovTableStructWish(uint64(*m.GuardianId))
	}
	if m.UpdateTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.UpdateTime))
	}
	if m.PutOnTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.PutOnTime))
	}
	if m.SortWeight != nil {
		n += 2 + sovTableStructWish(uint64(*m.SortWeight))
	}
	if m.HaveIsWin != nil {
		n += 3
	}
	if m.WishPoolId != nil {
		n += 2 + sovTableStructWish(uint64(*m.WishPoolId))
	}
	if len(m.WishItems) > 0 {
		for _, e := range m.WishItems {
			n += 2 + sovTableStructWish(uint64(e))
		}
	}
	if m.IsTask != nil {
		n += 3
	}
	if m.ProductStatus != nil {
		n += 2 + sovTableStructWish(uint64(*m.ProductStatus))
	}
	if m.GuardianOverTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.GuardianOverTime))
	}
	if m.IsGuardian != nil {
		n += 3
	}
	if m.IsRecommend != nil {
		n += 3
	}
	if m.GuardType != nil {
		n += 2 + sovTableStructWish(uint64(*m.GuardType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWish(uint64(*m.Id))
	}
	if m.WishBoxId != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishBoxId))
	}
	if m.DareId != nil {
		n += 1 + sovTableStructWish(uint64(*m.DareId))
	}
	if m.DareName != nil {
		l = len(*m.DareName)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.BeDareId != nil {
		n += 1 + sovTableStructWish(uint64(*m.BeDareId))
	}
	if m.BeDareName != nil {
		l = len(*m.BeDareName)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if m.Result != nil {
		n += 2
	}
	if m.ChallengeItemId != nil {
		n += 1 + sovTableStructWish(uint64(*m.ChallengeItemId))
	}
	if m.DareHeadIcon != nil {
		l = len(*m.DareHeadIcon)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.DefendTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.DefendTime))
	}
	if m.DarePrice != nil {
		n += 1 + sovTableStructWish(uint64(*m.DarePrice))
	}
	if m.DareType != nil {
		n += 1 + sovTableStructWish(uint64(*m.DareType))
	}
	if m.WishItemId != nil {
		n += 2 + sovTableStructWish(uint64(*m.WishItemId))
	}
	if m.PoolLocalStatus != nil {
		n += 2 + sovTableStructWish(uint64(*m.PoolLocalStatus))
	}
	if m.PoolIsOpenAward != nil {
		n += 3
	}
	if m.PoolId != nil {
		n += 2 + sovTableStructWish(uint64(*m.PoolId))
	}
	if m.PoolIncomeValue != nil {
		n += 2 + sovTableStructWish(uint64(*m.PoolIncomeValue))
	}
	if m.ChallengeItemName != nil {
		l = len(*m.ChallengeItemName)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.AfterPoolIncomeValue != nil {
		n += 2 + sovTableStructWish(uint64(*m.AfterPoolIncomeValue))
	}
	if m.AfterPoolIsOpenAward != nil {
		n += 3
	}
	if m.GuardType != nil {
		n += 2 + sovTableStructWish(uint64(*m.GuardType))
	}
	if m.AfterPoolLocalStatus != nil {
		n += 2 + sovTableStructWish(uint64(*m.AfterPoolLocalStatus))
	}
	if m.CreateTimeMill != nil {
		n += 2 + sovTableStructWish(uint64(*m.CreateTimeMill))
	}
	if m.GoroutineID != nil {
		n += 2 + sovTableStructWish(uint64(*m.GoroutineID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishOccupied) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWish(uint64(*m.Id))
	}
	if m.WishBoxId != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishBoxId))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.HeadUrl != nil {
		l = len(*m.HeadUrl)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructWish(uint64(*m.PlayerId))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if m.EndTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.EndTime))
	}
	if m.OccupiedTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.OccupiedTime))
	}
	if m.Status != nil {
		n += 1 + sovTableStructWish(uint64(*m.Status))
	}
	if m.CoinNum != nil {
		n += 1 + sovTableStructWish(uint64(*m.CoinNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerWishData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWish(uint64(*m.Id))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructWish(uint64(*m.PlayerId))
	}
	if m.WishBoxId != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishBoxId))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if m.WishBoxItemId != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishBoxItemId))
	}
	if m.Status != nil {
		n += 1 + sovTableStructWish(uint64(*m.Status))
	}
	if m.FinishTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.FinishTime))
	}
	if m.ProductUrl != nil {
		l = len(*m.ProductUrl)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.Match != nil {
		n += 1 + sovTableStructWish(uint64(*m.Match))
	}
	if m.IsMakeWish != nil {
		n += 2
	}
	if m.WishItemId != nil {
		n += 2 + sovTableStructWish(uint64(*m.WishItemId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerWishItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWish(uint64(*m.Id))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructWish(uint64(*m.PlayerId))
	}
	if m.ChallengeItemId != nil {
		n += 1 + sovTableStructWish(uint64(*m.ChallengeItemId))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if m.Status != nil {
		n += 1 + sovTableStructWish(uint64(*m.Status))
	}
	if m.WishBoxId != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishBoxId))
	}
	if m.IsRead != nil {
		n += 2
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.UpdateTime))
	}
	if m.ExpireTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.ExpireTime))
	}
	if m.RecyclePrice != nil {
		n += 1 + sovTableStructWish(uint64(*m.RecyclePrice))
	}
	if m.RecycleType != nil {
		n += 1 + sovTableStructWish(uint64(*m.RecycleType))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.WishItemId != nil {
		n += 2 + sovTableStructWish(uint64(*m.WishItemId))
	}
	if m.WishItemPrice != nil {
		n += 2 + sovTableStructWish(uint64(*m.WishItemPrice))
	}
	if m.DareDiamond != nil {
		n += 2 + sovTableStructWish(uint64(*m.DareDiamond))
	}
	if m.ProductName != nil {
		l = len(*m.ProductName)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.WishItemDiamond != nil {
		n += 2 + sovTableStructWish(uint64(*m.WishItemDiamond))
	}
	if m.WishItemIcon != nil {
		l = len(*m.WishItemIcon)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.WishItemStyle != nil {
		n += 2 + sovTableStructWish(uint64(*m.WishItemStyle))
	}
	if m.BoxName != nil {
		l = len(*m.BoxName)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.BoxIcon != nil {
		l = len(*m.BoxIcon)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.BoxMatch != nil {
		n += 2 + sovTableStructWish(uint64(*m.BoxMatch))
	}
	if m.AfterIsOpenAward != nil {
		n += 3
	}
	if m.IsOpenAward != nil {
		n += 3
	}
	if m.AfterLocalStatus != nil {
		n += 2 + sovTableStructWish(uint64(*m.AfterLocalStatus))
	}
	if m.LocalStatus != nil {
		n += 2 + sovTableStructWish(uint64(*m.LocalStatus))
	}
	if m.CreateTimeMill != nil {
		n += 2 + sovTableStructWish(uint64(*m.CreateTimeMill))
	}
	if m.GoroutineID != nil {
		n += 2 + sovTableStructWish(uint64(*m.GoroutineID))
	}
	if m.GiveType != nil {
		n += 2 + sovTableStructWish(uint64(*m.GiveType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerExchangeLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWish(uint64(*m.Id))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructWish(uint64(*m.PlayerId))
	}
	if m.PlayerAccount != nil {
		l = len(*m.PlayerAccount)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovTableStructWish(uint64(*m.Status))
	}
	if m.Receiver != nil {
		l = len(*m.Receiver)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.Phone != nil {
		l = len(*m.Phone)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.Address != nil {
		l = len(*m.Address)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if m.DeliveryTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.DeliveryTime))
	}
	if m.OrderId != nil {
		l = len(*m.OrderId)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.BoxDrawPrice != nil {
		n += 1 + sovTableStructWish(uint64(*m.BoxDrawPrice))
	}
	if m.WishBoxItem != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishBoxItem))
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.Company != nil {
		l = len(*m.Company)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.CompanyCode != nil {
		l = len(*m.CompanyCode)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.Odd != nil {
		l = len(*m.Odd)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.WishBoxId != nil {
		n += 2 + sovTableStructWish(uint64(*m.WishBoxId))
	}
	if m.ProductId != nil {
		n += 2 + sovTableStructWish(uint64(*m.ProductId))
	}
	if m.ProductName != nil {
		l = len(*m.ProductName)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.ProductIcon != nil {
		l = len(*m.ProductIcon)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.ProductPrice != nil {
		n += 2 + sovTableStructWish(uint64(*m.ProductPrice))
	}
	if m.ProductDiamond != nil {
		n += 2 + sovTableStructWish(uint64(*m.ProductDiamond))
	}
	if m.PlayerItemId != nil {
		n += 2 + sovTableStructWish(uint64(*m.PlayerItemId))
	}
	if m.UserId != nil {
		n += 2 + sovTableStructWish(uint64(*m.UserId))
	}
	if m.Postage != nil {
		n += 2 + sovTableStructWish(uint64(*m.Postage))
	}
	if m.UpdateTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.UpdateTime))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.GiveType != nil {
		n += 2 + sovTableStructWish(uint64(*m.GiveType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerExchangeItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BoxDrawPrice != nil {
		n += 1 + sovTableStructWish(uint64(*m.BoxDrawPrice))
	}
	if m.WishBoxItem != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishBoxItem))
	}
	if m.WishBoxId != nil {
		n += 2 + sovTableStructWish(uint64(*m.WishBoxId))
	}
	if m.ProductId != nil {
		n += 2 + sovTableStructWish(uint64(*m.ProductId))
	}
	if m.Style != nil {
		n += 2 + sovTableStructWish(uint64(*m.Style))
	}
	if m.SaleStatus != nil {
		n += 2 + sovTableStructWish(uint64(*m.SaleStatus))
	}
	if m.PreHaveTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.PreHaveTime))
	}
	if m.ProductName != nil {
		l = len(*m.ProductName)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.ProductIcon != nil {
		l = len(*m.ProductIcon)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.ProductPrice != nil {
		n += 2 + sovTableStructWish(uint64(*m.ProductPrice))
	}
	if m.WinTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.WinTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishRecycleOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWish(uint64(*m.Id))
	}
	if m.RecycleTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.RecycleTime))
	}
	if m.UserAccount != nil {
		l = len(*m.UserAccount)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructWish(uint64(*m.PlayerId))
	}
	if m.UserId != nil {
		n += 1 + sovTableStructWish(uint64(*m.UserId))
	}
	if m.Type != nil {
		n += 1 + sovTableStructWish(uint64(*m.Type))
	}
	if m.Channel != nil {
		n += 1 + sovTableStructWish(uint64(*m.Channel))
	}
	if m.BankCardId != nil {
		l = len(*m.BankCardId)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if len(m.RecycleItemList) > 0 {
		for _, e := range m.RecycleItemList {
			l = e.Size()
			n += 2 + l + sovTableStructWish(uint64(l))
		}
	}
	if m.Status != nil {
		n += 2 + sovTableStructWish(uint64(*m.Status))
	}
	if m.InitTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.InitTime))
	}
	if m.RecyclePriceTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.RecyclePriceTotal))
	}
	if m.ProductPriceTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.ProductPriceTotal))
	}
	if m.RecycleDiamond != nil {
		n += 2 + sovTableStructWish(uint64(*m.RecycleDiamond))
	}
	if m.RecycleNote != nil {
		n += 2 + sovTableStructWish(uint64(*m.RecycleNote))
	}
	if m.RefusalNote != nil {
		l = len(*m.RefusalNote)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.Remarks != nil {
		l = len(*m.Remarks)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.UpdateTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.UpdateTime))
	}
	if m.PaymentOrderId != nil {
		l = len(*m.PaymentOrderId)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishRecycleItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BoxDrawPrice != nil {
		n += 1 + sovTableStructWish(uint64(*m.BoxDrawPrice))
	}
	if m.RecyclePrice != nil {
		n += 1 + sovTableStructWish(uint64(*m.RecyclePrice))
	}
	if m.RecycleDiamond != nil {
		n += 1 + sovTableStructWish(uint64(*m.RecycleDiamond))
	}
	if m.WinTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.WinTime))
	}
	if m.WishBoxId != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishBoxId))
	}
	if m.ProductId != nil {
		n += 1 + sovTableStructWish(uint64(*m.ProductId))
	}
	if m.Style != nil {
		n += 1 + sovTableStructWish(uint64(*m.Style))
	}
	if m.ProductName != nil {
		l = len(*m.ProductName)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.ProductIcon != nil {
		l = len(*m.ProductIcon)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.PlayerItemId != nil {
		n += 2 + sovTableStructWish(uint64(*m.PlayerItemId))
	}
	if m.WishBoxItemId != nil {
		n += 2 + sovTableStructWish(uint64(*m.WishBoxItemId))
	}
	if m.ProductPrice != nil {
		n += 2 + sovTableStructWish(uint64(*m.ProductPrice))
	}
	if m.ProductDiamond != nil {
		n += 2 + sovTableStructWish(uint64(*m.ProductDiamond))
	}
	if m.GiveType != nil {
		n += 2 + sovTableStructWish(uint64(*m.GiveType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerWishCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWish(uint64(*m.Id))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructWish(uint64(*m.PlayerId))
	}
	if m.WishBoxId != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishBoxId))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishTopLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWish(uint64(*m.Id))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructWish(uint64(*m.PlayerId))
	}
	if m.HeadIcon != nil {
		l = len(*m.HeadIcon)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.WishNum != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishNum))
	}
	if m.CoinNum != nil {
		n += 1 + sovTableStructWish(uint64(*m.CoinNum))
	}
	if m.ThatDayTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.ThatDayTime))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishGuardianDiamondLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWish(uint64(*m.Id))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructWish(uint64(*m.PlayerId))
	}
	if m.HeadIcon != nil {
		l = len(*m.HeadIcon)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.WishNum != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishNum))
	}
	if m.CoinNum != nil {
		n += 1 + sovTableStructWish(uint64(*m.CoinNum))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if m.BoxId != nil {
		n += 1 + sovTableStructWish(uint64(*m.BoxId))
	}
	if m.TotalNum != nil {
		n += 1 + sovTableStructWish(uint64(*m.TotalNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishGuardianTopLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWish(uint64(*m.Id))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructWish(uint64(*m.PlayerId))
	}
	if m.WishNum != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishNum))
	}
	if m.CoinNum != nil {
		n += 1 + sovTableStructWish(uint64(*m.CoinNum))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if m.UpdateCoinTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.UpdateCoinTime))
	}
	if m.UpdateWishTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.UpdateWishTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWish(uint64(*m.Id))
	}
	if m.PoolLimit != nil {
		n += 1 + sovTableStructWish(uint64(*m.PoolLimit))
	}
	if m.InitialValue != nil {
		n += 1 + sovTableStructWish(uint64(*m.InitialValue))
	}
	if m.IncomeValue != nil {
		n += 1 + sovTableStructWish(uint64(*m.IncomeValue))
	}
	if m.Recycle != nil {
		n += 1 + sovTableStructWish(uint64(*m.Recycle))
	}
	if m.Commission != nil {
		n += 1 + sovTableStructWish(uint64(*m.Commission))
	}
	if m.StartAward != nil {
		n += 1 + sovTableStructWish(uint64(*m.StartAward))
	}
	if m.CloseAward != nil {
		n += 1 + sovTableStructWish(uint64(*m.CloseAward))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.CreateTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.UpdateTime))
	}
	if m.ShowInitialValue != nil {
		n += 2 + sovTableStructWish(uint64(*m.ShowInitialValue))
	}
	if m.ShowRecycle != nil {
		n += 2 + sovTableStructWish(uint64(*m.ShowRecycle))
	}
	if m.ShowCommission != nil {
		n += 2 + sovTableStructWish(uint64(*m.ShowCommission))
	}
	if m.ShowStartAward != nil {
		n += 2 + sovTableStructWish(uint64(*m.ShowStartAward))
	}
	if m.ShowCloseAward != nil {
		n += 2 + sovTableStructWish(uint64(*m.ShowCloseAward))
	}
	if m.IsOpenAward != nil {
		n += 3
	}
	if m.IsDefault != nil {
		n += 3
	}
	if m.BigLoss != nil {
		l = m.BigLoss.Size()
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.SmallLoss != nil {
		l = m.SmallLoss.Size()
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.Common != nil {
		l = m.Common.Size()
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.BigWin != nil {
		l = m.BigWin.Size()
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.SmallWin != nil {
		l = m.SmallWin.Size()
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.LocalStatus != nil {
		n += 2 + sovTableStructWish(uint64(*m.LocalStatus))
	}
	if m.PoolConfigId != nil {
		n += 2 + sovTableStructWish(uint64(*m.PoolConfigId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishPoolCfg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWish(uint64(*m.Id))
	}
	if m.PoolLimit != nil {
		n += 1 + sovTableStructWish(uint64(*m.PoolLimit))
	}
	if m.InitialValue != nil {
		n += 1 + sovTableStructWish(uint64(*m.InitialValue))
	}
	if m.IncomeValue != nil {
		n += 1 + sovTableStructWish(uint64(*m.IncomeValue))
	}
	if m.Recycle != nil {
		n += 1 + sovTableStructWish(uint64(*m.Recycle))
	}
	if m.Commission != nil {
		n += 1 + sovTableStructWish(uint64(*m.Commission))
	}
	if m.StartAward != nil {
		n += 1 + sovTableStructWish(uint64(*m.StartAward))
	}
	if m.CloseAward != nil {
		n += 1 + sovTableStructWish(uint64(*m.CloseAward))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.CreateTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.UpdateTime))
	}
	if m.ShowInitialValue != nil {
		n += 2 + sovTableStructWish(uint64(*m.ShowInitialValue))
	}
	if m.ShowRecycle != nil {
		n += 2 + sovTableStructWish(uint64(*m.ShowRecycle))
	}
	if m.ShowCommission != nil {
		n += 2 + sovTableStructWish(uint64(*m.ShowCommission))
	}
	if m.ShowStartAward != nil {
		n += 2 + sovTableStructWish(uint64(*m.ShowStartAward))
	}
	if m.ShowCloseAward != nil {
		n += 2 + sovTableStructWish(uint64(*m.ShowCloseAward))
	}
	if m.IsOpenAward != nil {
		n += 3
	}
	if m.IsDefault != nil {
		n += 3
	}
	if m.BigLoss != nil {
		l = m.BigLoss.Size()
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.SmallLoss != nil {
		l = m.SmallLoss.Size()
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.Common != nil {
		l = m.Common.Size()
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.BigWin != nil {
		l = m.BigWin.Size()
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.SmallWin != nil {
		l = m.SmallWin.Size()
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.WishPoolIds != nil {
		n += 2 + sovTableStructWish(uint64(*m.WishPoolIds))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishPoolStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxValue != nil {
		n += 1 + sovTableStructWish(uint64(*m.MaxValue))
	}
	if m.MinValue != nil {
		n += 1 + sovTableStructWish(uint64(*m.MinValue))
	}
	if m.ShowMaxValue != nil {
		n += 1 + sovTableStructWish(uint64(*m.ShowMaxValue))
	}
	if m.ShowMinValue != nil {
		n += 1 + sovTableStructWish(uint64(*m.ShowMinValue))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishBoItemWinCfg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWish(uint64(*m.Id))
	}
	if m.WishBoxId != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishBoxId))
	}
	if m.WishItemId != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishItemId))
	}
	if m.BigLoss != nil {
		n += 1 + sovTableStructWish(uint64(*m.BigLoss))
	}
	if m.SmallLoss != nil {
		n += 1 + sovTableStructWish(uint64(*m.SmallLoss))
	}
	if m.Common != nil {
		n += 1 + sovTableStructWish(uint64(*m.Common))
	}
	if m.BigWin != nil {
		n += 1 + sovTableStructWish(uint64(*m.BigWin))
	}
	if m.SmallWin != nil {
		n += 1 + sovTableStructWish(uint64(*m.SmallWin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PriceSection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.OneMin != nil {
		n += 1 + sovTableStructWish(uint64(*m.OneMin))
	}
	if m.OneMax != nil {
		n += 1 + sovTableStructWish(uint64(*m.OneMax))
	}
	if m.TwoMin != nil {
		n += 1 + sovTableStructWish(uint64(*m.TwoMin))
	}
	if m.TwoMax != nil {
		n += 1 + sovTableStructWish(uint64(*m.TwoMax))
	}
	if m.ThreeMin != nil {
		n += 1 + sovTableStructWish(uint64(*m.ThreeMin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishMailSection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.Postage1 != nil {
		n += 1 + sovTableStructWish(uint64(*m.Postage1))
	}
	if m.Postage2 != nil {
		n += 1 + sovTableStructWish(uint64(*m.Postage2))
	}
	if m.Postage3 != nil {
		n += 1 + sovTableStructWish(uint64(*m.Postage3))
	}
	if len(m.RemoteAreaList) > 0 {
		for _, s := range m.RemoteAreaList {
			l = len(s)
			n += 1 + l + sovTableStructWish(uint64(l))
		}
	}
	if m.FreeNumber != nil {
		n += 1 + sovTableStructWish(uint64(*m.FreeNumber))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishRecycleSection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.Platform != nil {
		n += 1 + sovTableStructWish(uint64(*m.Platform))
	}
	if m.DayTopCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.DayTopCount))
	}
	if m.Player != nil {
		n += 1 + sovTableStructWish(uint64(*m.Player))
	}
	if m.Status != nil {
		n += 2
	}
	if m.DayMoneyTopCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.DayMoneyTopCount))
	}
	if m.DayMoneyTop != nil {
		n += 1 + sovTableStructWish(uint64(*m.DayMoneyTop))
	}
	if m.OrderThresholdMoney != nil {
		n += 1 + sovTableStructWish(uint64(*m.OrderThresholdMoney))
	}
	if m.DayDiamondTopCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.DayDiamondTopCount))
	}
	if m.DayDiamondTop != nil {
		n += 2 + sovTableStructWish(uint64(*m.DayDiamondTop))
	}
	if m.OrderThreshold != nil {
		n += 2 + sovTableStructWish(uint64(*m.OrderThreshold))
	}
	if m.FeeRate != nil {
		n += 2 + sovTableStructWish(uint64(*m.FeeRate))
	}
	if m.PlatformTax != nil {
		n += 2 + sovTableStructWish(uint64(*m.PlatformTax))
	}
	if m.RealTax != nil {
		n += 2 + sovTableStructWish(uint64(*m.RealTax))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishPayWarnCfg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WithdrawalTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.WithdrawalTime))
	}
	if m.WithdrawalTimes != nil {
		n += 2 + sovTableStructWish(uint64(*m.WithdrawalTimes))
	}
	if m.WithdrawalGoldRate != nil {
		n += 2 + sovTableStructWish(uint64(*m.WithdrawalGoldRate))
	}
	if m.WithdrawalGold != nil {
		n += 2 + sovTableStructWish(uint64(*m.WithdrawalGold))
	}
	if m.WithdrawalDiamondRate != nil {
		n += 2 + sovTableStructWish(uint64(*m.WithdrawalDiamondRate))
	}
	if m.WithdrawalDiamond != nil {
		n += 2 + sovTableStructWish(uint64(*m.WithdrawalDiamond))
	}
	if len(m.PhoneList) > 0 {
		for _, s := range m.PhoneList {
			l = len(s)
			n += 2 + l + sovTableStructWish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishCurrencyConversionCfg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.Money != nil {
		n += 1 + sovTableStructWish(uint64(*m.Money))
	}
	if m.Coin != nil {
		n += 1 + sovTableStructWish(uint64(*m.Coin))
	}
	if m.Diamond != nil {
		n += 1 + sovTableStructWish(uint64(*m.Diamond))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishGuardianCfg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.DayDiamondTop != nil {
		n += 1 + sovTableStructWish(uint64(*m.DayDiamondTop))
	}
	if m.OnceDiamondRebate != nil {
		n += 1 + sovTableStructWish(uint64(*m.OnceDiamondRebate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SingleInitCfg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Table != nil {
		l = len(*m.Table)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovTableStructWish(uint64(*m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecycleNoteCfg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if len(m.Text) > 0 {
		for _, s := range m.Text {
			l = len(s)
			n += 1 + l + sovTableStructWish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DiamondRecharge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWish(uint64(*m.Id))
	}
	if m.Diamond != nil {
		n += 1 + sovTableStructWish(uint64(*m.Diamond))
	}
	if m.CoinPrice != nil {
		n += 1 + sovTableStructWish(uint64(*m.CoinPrice))
	}
	if m.MonthFirst != nil {
		n += 1 + sovTableStructWish(uint64(*m.MonthFirst))
	}
	if m.Rebate != nil {
		n += 1 + sovTableStructWish(uint64(*m.Rebate))
	}
	if m.StartTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.EndTime))
	}
	if m.Status != nil {
		n += 1 + sovTableStructWish(uint64(*m.Status))
	}
	if m.Sort != nil {
		n += 1 + sovTableStructWish(uint64(*m.Sort))
	}
	if m.DisPrice != nil {
		n += 1 + sovTableStructWish(uint64(*m.DisPrice))
	}
	if m.GiveDiamond != nil {
		n += 1 + sovTableStructWish(uint64(*m.GiveDiamond))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishPoolReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if m.WishPlayerCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishPlayerCount))
	}
	if m.AddPlayerCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.AddPlayerCount))
	}
	if m.LuckyPlayerCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.LuckyPlayerCount))
	}
	if m.LuckyCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.LuckyCount))
	}
	if m.LuckyWishCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.LuckyWishCount))
	}
	if m.ConvertCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.ConvertCount))
	}
	if m.RecycleCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.RecycleCount))
	}
	if m.PlayerRecycleCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.PlayerRecycleCount))
	}
	if m.OfficialRecycleCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.OfficialRecycleCount))
	}
	if m.RecycleGoldTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.RecycleGoldTotal))
	}
	if m.LuckyGoldTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.LuckyGoldTotal))
	}
	if m.ConvertGoodsPriceTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.ConvertGoodsPriceTotal))
	}
	if m.CommissionTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.CommissionTotal))
	}
	if m.PendConvertGoodsPriceTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.PendConvertGoodsPriceTotal))
	}
	if m.PendConvertCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.PendConvertCount))
	}
	if m.PlayerRecycleGoldTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.PlayerRecycleGoldTotal))
	}
	if m.OfficialRecycleGoldTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.OfficialRecycleGoldTotal))
	}
	if m.Profit != nil {
		n += 2 + sovTableStructWish(uint64(*m.Profit))
	}
	if m.ConvertDiamondTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.ConvertDiamondTotal))
	}
	if m.ConvertDiamondPlayerCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.ConvertDiamondPlayerCount))
	}
	if m.ConvertDiamondCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.ConvertDiamondCount))
	}
	if m.RecyclePlayerCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.RecyclePlayerCount))
	}
	if m.DeliverCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.DeliverCount))
	}
	if m.DeliverPlayerCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.DeliverPlayerCount))
	}
	if m.InPoolCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.InPoolCount))
	}
	if m.InPoolPlayerCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.InPoolPlayerCount))
	}
	if m.WinItemPriceTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.WinItemPriceTotal))
	}
	if m.StartTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.EndTime))
	}
	if m.ProductDiamondTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.ProductDiamondTotal))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishPoolReportWeek) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if m.WishPlayerCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishPlayerCount))
	}
	if m.AddPlayerCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.AddPlayerCount))
	}
	if m.LuckyPlayerCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.LuckyPlayerCount))
	}
	if m.LuckyCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.LuckyCount))
	}
	if m.LuckyWishCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.LuckyWishCount))
	}
	if m.ConvertCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.ConvertCount))
	}
	if m.RecycleCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.RecycleCount))
	}
	if m.PlayerRecycleCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.PlayerRecycleCount))
	}
	if m.OfficialRecycleCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.OfficialRecycleCount))
	}
	if m.RecycleGoldTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.RecycleGoldTotal))
	}
	if m.LuckyGoldTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.LuckyGoldTotal))
	}
	if m.ConvertGoodsPriceTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.ConvertGoodsPriceTotal))
	}
	if m.CommissionTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.CommissionTotal))
	}
	if m.PendConvertGoodsPriceTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.PendConvertGoodsPriceTotal))
	}
	if m.PendConvertCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.PendConvertCount))
	}
	if m.PlayerRecycleGoldTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.PlayerRecycleGoldTotal))
	}
	if m.OfficialRecycleGoldTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.OfficialRecycleGoldTotal))
	}
	if m.Profit != nil {
		n += 2 + sovTableStructWish(uint64(*m.Profit))
	}
	if m.ConvertDiamondTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.ConvertDiamondTotal))
	}
	if m.ConvertDiamondPlayerCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.ConvertDiamondPlayerCount))
	}
	if m.ConvertDiamondCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.ConvertDiamondCount))
	}
	if m.RecyclePlayerCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.RecyclePlayerCount))
	}
	if m.DeliverCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.DeliverCount))
	}
	if m.DeliverPlayerCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.DeliverPlayerCount))
	}
	if m.InPoolCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.InPoolCount))
	}
	if m.InPoolPlayerCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.InPoolPlayerCount))
	}
	if m.WinItemPriceTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.WinItemPriceTotal))
	}
	if m.StartTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.EndTime))
	}
	if m.ProductDiamondTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.ProductDiamondTotal))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishPoolReportMonth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if m.WishPlayerCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishPlayerCount))
	}
	if m.AddPlayerCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.AddPlayerCount))
	}
	if m.LuckyPlayerCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.LuckyPlayerCount))
	}
	if m.LuckyCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.LuckyCount))
	}
	if m.LuckyWishCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.LuckyWishCount))
	}
	if m.ConvertCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.ConvertCount))
	}
	if m.RecycleCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.RecycleCount))
	}
	if m.PlayerRecycleCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.PlayerRecycleCount))
	}
	if m.OfficialRecycleCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.OfficialRecycleCount))
	}
	if m.RecycleGoldTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.RecycleGoldTotal))
	}
	if m.LuckyGoldTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.LuckyGoldTotal))
	}
	if m.ConvertGoodsPriceTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.ConvertGoodsPriceTotal))
	}
	if m.CommissionTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.CommissionTotal))
	}
	if m.PendConvertGoodsPriceTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.PendConvertGoodsPriceTotal))
	}
	if m.PendConvertCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.PendConvertCount))
	}
	if m.PlayerRecycleGoldTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.PlayerRecycleGoldTotal))
	}
	if m.OfficialRecycleGoldTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.OfficialRecycleGoldTotal))
	}
	if m.Profit != nil {
		n += 2 + sovTableStructWish(uint64(*m.Profit))
	}
	if m.ConvertDiamondTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.ConvertDiamondTotal))
	}
	if m.ConvertDiamondPlayerCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.ConvertDiamondPlayerCount))
	}
	if m.ConvertDiamondCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.ConvertDiamondCount))
	}
	if m.RecyclePlayerCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.RecyclePlayerCount))
	}
	if m.DeliverCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.DeliverCount))
	}
	if m.DeliverPlayerCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.DeliverPlayerCount))
	}
	if m.InPoolCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.InPoolCount))
	}
	if m.InPoolPlayerCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.InPoolPlayerCount))
	}
	if m.WinItemPriceTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.WinItemPriceTotal))
	}
	if m.StartTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.EndTime))
	}
	if m.ProductDiamondTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.ProductDiamondTotal))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishBoxReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.WishPlayerCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishPlayerCount))
	}
	if m.AddPlayerCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.AddPlayerCount))
	}
	if m.DrawPlayerCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.DrawPlayerCount))
	}
	if m.DrawCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.DrawCount))
	}
	if m.LuckyWishCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.LuckyWishCount))
	}
	if m.ConvertCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.ConvertCount))
	}
	if m.RecycleCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.RecycleCount))
	}
	if m.PlayerRecycleCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.PlayerRecycleCount))
	}
	if m.OfficialRecycleCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.OfficialRecycleCount))
	}
	if m.RecycleGoldTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.RecycleGoldTotal))
	}
	if m.LuckyGoldTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.LuckyGoldTotal))
	}
	if m.ConvertGoodsPriceTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.ConvertGoodsPriceTotal))
	}
	if m.CommissionTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.CommissionTotal))
	}
	if m.PendConvertGoodsPriceTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.PendConvertGoodsPriceTotal))
	}
	if m.PendConvertCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.PendConvertCount))
	}
	if m.PlayerRecycleGoldTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.PlayerRecycleGoldTotal))
	}
	if m.OfficialRecycleGoldTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.OfficialRecycleGoldTotal))
	}
	if m.Profit != nil {
		n += 2 + sovTableStructWish(uint64(*m.Profit))
	}
	if m.ConvertDiamondPlayerCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.ConvertDiamondPlayerCount))
	}
	if m.RecyclePlayerCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.RecyclePlayerCount))
	}
	if m.DeliverCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.DeliverCount))
	}
	if m.DeliverPlayerCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.DeliverPlayerCount))
	}
	if m.WishPoolReportId != nil {
		n += 2 + sovTableStructWish(uint64(*m.WishPoolReportId))
	}
	if m.CreateTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if m.BoxId != nil {
		n += 2 + sovTableStructWish(uint64(*m.BoxId))
	}
	if m.BoxName != nil {
		l = len(*m.BoxName)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.WinItemPriceTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.WinItemPriceTotal))
	}
	if m.ProductDiamondTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.ProductDiamondTotal))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishBoxReportWeek) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.WishPlayerCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishPlayerCount))
	}
	if m.AddPlayerCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.AddPlayerCount))
	}
	if m.DrawPlayerCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.DrawPlayerCount))
	}
	if m.DrawCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.DrawCount))
	}
	if m.LuckyWishCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.LuckyWishCount))
	}
	if m.ConvertCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.ConvertCount))
	}
	if m.RecycleCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.RecycleCount))
	}
	if m.PlayerRecycleCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.PlayerRecycleCount))
	}
	if m.OfficialRecycleCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.OfficialRecycleCount))
	}
	if m.RecycleGoldTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.RecycleGoldTotal))
	}
	if m.LuckyGoldTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.LuckyGoldTotal))
	}
	if m.ConvertGoodsPriceTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.ConvertGoodsPriceTotal))
	}
	if m.CommissionTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.CommissionTotal))
	}
	if m.PendConvertGoodsPriceTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.PendConvertGoodsPriceTotal))
	}
	if m.PendConvertCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.PendConvertCount))
	}
	if m.PlayerRecycleGoldTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.PlayerRecycleGoldTotal))
	}
	if m.OfficialRecycleGoldTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.OfficialRecycleGoldTotal))
	}
	if m.Profit != nil {
		n += 2 + sovTableStructWish(uint64(*m.Profit))
	}
	if m.ConvertDiamondPlayerCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.ConvertDiamondPlayerCount))
	}
	if m.RecyclePlayerCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.RecyclePlayerCount))
	}
	if m.DeliverCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.DeliverCount))
	}
	if m.DeliverPlayerCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.DeliverPlayerCount))
	}
	if m.WishPoolReportId != nil {
		n += 2 + sovTableStructWish(uint64(*m.WishPoolReportId))
	}
	if m.CreateTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if m.BoxId != nil {
		n += 2 + sovTableStructWish(uint64(*m.BoxId))
	}
	if m.BoxName != nil {
		l = len(*m.BoxName)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.WinItemPriceTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.WinItemPriceTotal))
	}
	if m.StartTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.EndTime))
	}
	if m.ProductDiamondTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.ProductDiamondTotal))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishBoxReportMonth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.WishPlayerCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishPlayerCount))
	}
	if m.AddPlayerCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.AddPlayerCount))
	}
	if m.DrawPlayerCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.DrawPlayerCount))
	}
	if m.DrawCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.DrawCount))
	}
	if m.LuckyWishCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.LuckyWishCount))
	}
	if m.ConvertCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.ConvertCount))
	}
	if m.RecycleCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.RecycleCount))
	}
	if m.PlayerRecycleCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.PlayerRecycleCount))
	}
	if m.OfficialRecycleCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.OfficialRecycleCount))
	}
	if m.RecycleGoldTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.RecycleGoldTotal))
	}
	if m.LuckyGoldTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.LuckyGoldTotal))
	}
	if m.ConvertGoodsPriceTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.ConvertGoodsPriceTotal))
	}
	if m.CommissionTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.CommissionTotal))
	}
	if m.PendConvertGoodsPriceTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.PendConvertGoodsPriceTotal))
	}
	if m.PendConvertCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.PendConvertCount))
	}
	if m.PlayerRecycleGoldTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.PlayerRecycleGoldTotal))
	}
	if m.OfficialRecycleGoldTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.OfficialRecycleGoldTotal))
	}
	if m.Profit != nil {
		n += 2 + sovTableStructWish(uint64(*m.Profit))
	}
	if m.ConvertDiamondPlayerCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.ConvertDiamondPlayerCount))
	}
	if m.RecyclePlayerCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.RecyclePlayerCount))
	}
	if m.DeliverCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.DeliverCount))
	}
	if m.DeliverPlayerCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.DeliverPlayerCount))
	}
	if m.WishPoolReportId != nil {
		n += 2 + sovTableStructWish(uint64(*m.WishPoolReportId))
	}
	if m.CreateTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if m.BoxId != nil {
		n += 2 + sovTableStructWish(uint64(*m.BoxId))
	}
	if m.BoxName != nil {
		l = len(*m.BoxName)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.WinItemPriceTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.WinItemPriceTotal))
	}
	if m.StartTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.EndTime))
	}
	if m.ProductDiamondTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.ProductDiamondTotal))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishBoxDetailReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.WishPlayerCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishPlayerCount))
	}
	if m.WishAndDrawPlayerCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishAndDrawPlayerCount))
	}
	if m.WinCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.WinCount))
	}
	if m.LuckyWishCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.LuckyWishCount))
	}
	if m.ConvertCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.ConvertCount))
	}
	if m.RecycleCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.RecycleCount))
	}
	if m.PlayerRecycleCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.PlayerRecycleCount))
	}
	if m.OfficialRecycleCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.OfficialRecycleCount))
	}
	if m.RecycleGoldTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.RecycleGoldTotal))
	}
	if m.LuckyGoldTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.LuckyGoldTotal))
	}
	if m.ConvertGoodsPriceTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.ConvertGoodsPriceTotal))
	}
	if m.PendConvertCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.PendConvertCount))
	}
	if m.PlayerRecycleGoldTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.PlayerRecycleGoldTotal))
	}
	if m.OfficialRecycleGoldTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.OfficialRecycleGoldTotal))
	}
	if m.PendConvertPriceTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.PendConvertPriceTotal))
	}
	if m.Profit != nil {
		n += 2 + sovTableStructWish(uint64(*m.Profit))
	}
	if m.RecyclePlayerCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.RecyclePlayerCount))
	}
	if m.DeliverCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.DeliverCount))
	}
	if m.DeliverPlayerCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.DeliverPlayerCount))
	}
	if m.WishBoxId != nil {
		n += 2 + sovTableStructWish(uint64(*m.WishBoxId))
	}
	if m.WishBoxReportId != nil {
		l = len(*m.WishBoxReportId)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.CreateTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if m.ItemId != nil {
		n += 2 + sovTableStructWish(uint64(*m.ItemId))
	}
	if m.ItemName != nil {
		l = len(*m.ItemName)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.Style != nil {
		n += 2 + sovTableStructWish(uint64(*m.Style))
	}
	if m.AuditConvertCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.AuditConvertCount))
	}
	if m.AuditConvertPriceTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.AuditConvertPriceTotal))
	}
	if m.WinItemPriceTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.WinItemPriceTotal))
	}
	if m.ProductDiamondTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.ProductDiamondTotal))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishBoxDetailReportWeek) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.WishPlayerCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishPlayerCount))
	}
	if m.WishAndDrawPlayerCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishAndDrawPlayerCount))
	}
	if m.WinCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.WinCount))
	}
	if m.LuckyWishCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.LuckyWishCount))
	}
	if m.ConvertCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.ConvertCount))
	}
	if m.RecycleCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.RecycleCount))
	}
	if m.PlayerRecycleCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.PlayerRecycleCount))
	}
	if m.OfficialRecycleCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.OfficialRecycleCount))
	}
	if m.RecycleGoldTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.RecycleGoldTotal))
	}
	if m.LuckyGoldTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.LuckyGoldTotal))
	}
	if m.ConvertGoodsPriceTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.ConvertGoodsPriceTotal))
	}
	if m.PendConvertCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.PendConvertCount))
	}
	if m.PlayerRecycleGoldTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.PlayerRecycleGoldTotal))
	}
	if m.OfficialRecycleGoldTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.OfficialRecycleGoldTotal))
	}
	if m.PendConvertPriceTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.PendConvertPriceTotal))
	}
	if m.Profit != nil {
		n += 2 + sovTableStructWish(uint64(*m.Profit))
	}
	if m.RecyclePlayerCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.RecyclePlayerCount))
	}
	if m.DeliverCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.DeliverCount))
	}
	if m.DeliverPlayerCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.DeliverPlayerCount))
	}
	if m.WishBoxId != nil {
		n += 2 + sovTableStructWish(uint64(*m.WishBoxId))
	}
	if m.WishBoxReportId != nil {
		l = len(*m.WishBoxReportId)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.CreateTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if m.ItemId != nil {
		n += 2 + sovTableStructWish(uint64(*m.ItemId))
	}
	if m.ItemName != nil {
		l = len(*m.ItemName)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.Style != nil {
		n += 2 + sovTableStructWish(uint64(*m.Style))
	}
	if m.AuditConvertCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.AuditConvertCount))
	}
	if m.AuditConvertPriceTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.AuditConvertPriceTotal))
	}
	if m.WinItemPriceTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.WinItemPriceTotal))
	}
	if m.StartTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.EndTime))
	}
	if m.ProductDiamondTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.ProductDiamondTotal))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishBoxDetailReportMonth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.WishPlayerCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishPlayerCount))
	}
	if m.WishAndDrawPlayerCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishAndDrawPlayerCount))
	}
	if m.WinCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.WinCount))
	}
	if m.LuckyWishCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.LuckyWishCount))
	}
	if m.ConvertCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.ConvertCount))
	}
	if m.RecycleCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.RecycleCount))
	}
	if m.PlayerRecycleCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.PlayerRecycleCount))
	}
	if m.OfficialRecycleCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.OfficialRecycleCount))
	}
	if m.RecycleGoldTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.RecycleGoldTotal))
	}
	if m.LuckyGoldTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.LuckyGoldTotal))
	}
	if m.ConvertGoodsPriceTotal != nil {
		n += 1 + sovTableStructWish(uint64(*m.ConvertGoodsPriceTotal))
	}
	if m.PendConvertCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.PendConvertCount))
	}
	if m.PlayerRecycleGoldTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.PlayerRecycleGoldTotal))
	}
	if m.OfficialRecycleGoldTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.OfficialRecycleGoldTotal))
	}
	if m.PendConvertPriceTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.PendConvertPriceTotal))
	}
	if m.Profit != nil {
		n += 2 + sovTableStructWish(uint64(*m.Profit))
	}
	if m.RecyclePlayerCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.RecyclePlayerCount))
	}
	if m.DeliverCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.DeliverCount))
	}
	if m.DeliverPlayerCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.DeliverPlayerCount))
	}
	if m.WishBoxId != nil {
		n += 2 + sovTableStructWish(uint64(*m.WishBoxId))
	}
	if m.WishBoxReportId != nil {
		l = len(*m.WishBoxReportId)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.CreateTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if m.ItemId != nil {
		n += 2 + sovTableStructWish(uint64(*m.ItemId))
	}
	if m.ItemName != nil {
		l = len(*m.ItemName)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.Style != nil {
		n += 2 + sovTableStructWish(uint64(*m.Style))
	}
	if m.AuditConvertCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.AuditConvertCount))
	}
	if m.AuditConvertPriceTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.AuditConvertPriceTotal))
	}
	if m.WinItemPriceTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.WinItemPriceTotal))
	}
	if m.StartTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 2 + sovTableStructWish(uint64(*m.EndTime))
	}
	if m.ProductDiamondTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.ProductDiamondTotal))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishItemReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if m.ItemId != nil {
		n += 1 + sovTableStructWish(uint64(*m.ItemId))
	}
	if m.WishPlayerCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishPlayerCount))
	}
	if m.WishAndDrawPlayerCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishAndDrawPlayerCount))
	}
	if m.WinCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.WinCount))
	}
	if m.LuckyWishCount != nil {
		n += 1 + sovTableStructWish(uint64(*m.LuckyWishCount))
	}
	if m.PendConvertCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.PendConvertCount))
	}
	if m.ConvertCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.ConvertCount))
	}
	if m.RecycleCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.RecycleCount))
	}
	if m.PlayerRecycleCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.PlayerRecycleCount))
	}
	if m.OfficialRecycleCount != nil {
		n += 2 + sovTableStructWish(uint64(*m.OfficialRecycleCount))
	}
	if m.RecycleGoldTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.RecycleGoldTotal))
	}
	if m.LuckyGoldTotal != nil {
		n += 2 + sovTableStructWish(uint64(*m.LuckyGoldTotal))
	}
	if m.ItemName != nil {
		l = len(*m.ItemName)
		n += 2 + l + sovTableStructWish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishPoolPumpLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWish(uint64(*m.Id))
	}
	if m.BoxId != nil {
		n += 1 + sovTableStructWish(uint64(*m.BoxId))
	}
	if m.PoolId != nil {
		n += 1 + sovTableStructWish(uint64(*m.PoolId))
	}
	if m.Price != nil {
		n += 1 + sovTableStructWish(uint64(*m.Price))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if m.IncomeValue != nil {
		n += 1 + sovTableStructWish(uint64(*m.IncomeValue))
	}
	if m.BoxName != nil {
		l = len(*m.BoxName)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.PoolName != nil {
		l = len(*m.PoolName)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.CreateTimeMill != nil {
		n += 2 + sovTableStructWish(uint64(*m.CreateTimeMill))
	}
	if m.GoroutineID != nil {
		n += 2 + sovTableStructWish(uint64(*m.GoroutineID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishPoolLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWish(uint64(*m.Id))
	}
	if m.BoxId != nil {
		n += 1 + sovTableStructWish(uint64(*m.BoxId))
	}
	if m.PoolId != nil {
		n += 1 + sovTableStructWish(uint64(*m.PoolId))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructWish(uint64(*m.PlayerId))
	}
	if m.BeforeValue != nil {
		n += 1 + sovTableStructWish(uint64(*m.BeforeValue))
	}
	if m.AfterValue != nil {
		n += 1 + sovTableStructWish(uint64(*m.AfterValue))
	}
	if m.Value != nil {
		n += 1 + sovTableStructWish(uint64(*m.Value))
	}
	if m.Type != nil {
		n += 1 + sovTableStructWish(uint64(*m.Type))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if m.AfterIsOpenAward != nil {
		n += 3
	}
	if m.IsOpenAward != nil {
		n += 3
	}
	if m.AfterLocalStatus != nil {
		n += 2 + sovTableStructWish(uint64(*m.AfterLocalStatus))
	}
	if m.LocalStatus != nil {
		n += 2 + sovTableStructWish(uint64(*m.LocalStatus))
	}
	if m.CreateTimeMill != nil {
		n += 2 + sovTableStructWish(uint64(*m.CreateTimeMill))
	}
	if m.GoroutineID != nil {
		n += 2 + sovTableStructWish(uint64(*m.GoroutineID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishCoolDownConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.IsOpen != nil {
		n += 2
	}
	if m.ContinuousTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.ContinuousTime))
	}
	if m.ContinuousTimes != nil {
		n += 1 + sovTableStructWish(uint64(*m.ContinuousTimes))
	}
	if m.CoolDownTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.CoolDownTime))
	}
	if m.DayLimit != nil {
		n += 1 + sovTableStructWish(uint64(*m.DayLimit))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DiamondChangeLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogId != nil {
		n += 1 + sovTableStructWish(uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructWish(uint64(*m.PlayerId))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.ChangeDiamond != nil {
		n += 1 + sovTableStructWish(uint64(*m.ChangeDiamond))
	}
	if m.SourceType != nil {
		n += 1 + sovTableStructWish(uint64(*m.SourceType))
	}
	if m.SourceTypeName != nil {
		l = len(*m.SourceTypeName)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.PayType != nil {
		n += 1 + sovTableStructWish(uint64(*m.PayType))
	}
	if m.CurDiamond != nil {
		n += 1 + sovTableStructWish(uint64(*m.CurDiamond))
	}
	if m.Diamond != nil {
		n += 1 + sovTableStructWish(uint64(*m.Diamond))
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecycleReason) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWish(uint64(*m.Id))
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishSumOccupied) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWish(uint64(*m.Id))
	}
	if m.WishBoxId != nil {
		n += 1 + sovTableStructWish(uint64(*m.WishBoxId))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.HeadUrl != nil {
		l = len(*m.HeadUrl)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructWish(uint64(*m.PlayerId))
	}
	if m.OccupiedTime != nil {
		n += 1 + sovTableStructWish(uint64(*m.OccupiedTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishWhite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWish(uint64(*m.Id))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructWish(uint64(*m.PlayerId))
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 1 + l + sovTableStructWish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishBuryingPointLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWish(uint64(*m.Id))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructWish(uint64(*m.PlayerId))
	}
	if m.EventType != nil {
		n += 1 + sovTableStructWish(uint64(*m.EventType))
	}
	if m.Time != nil {
		n += 1 + sovTableStructWish(uint64(*m.Time))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTableStructWish(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTableStructWish(x uint64) (n int) {
	return sovTableStructWish(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WishPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Channel = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadUrl = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Token = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTryOne", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsTryOne = &b
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address, &WishAddress{})
			if err := m.Address[len(m.Address)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HallSid", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HallSid = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotOne", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.NotOne = &b
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotOneWish", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.NotOneWish = &b
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastExchangeDiamondTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastExchangeDiamondTime = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFreeze", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsFreeze = &b
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreezeTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FreezeTime = &v
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Phone = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Detail = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfDefault", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IfDefault = &b
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddressId = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Province", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Province = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.City = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Area = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishMenu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishMenu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishMenu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishBrand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishBrand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishBrand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsHot = &b
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClickCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClickCount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostWeight", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HostWeight = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishItemType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishItemType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishItemType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRecommend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsRecommend = &b
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostWeight", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HostWeight = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsHot = &b
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClickCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClickCount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishStyle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishStyle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishStyle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Icon = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Desc = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brand", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Brand = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoveryPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecoveryPrice = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Length = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wide", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Wide = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field High", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.High = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BigSize = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Material", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Material = append(m.Material, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockAmount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StockAmount = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreHaveTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PreHaveTime = &v
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPreSale", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsPreSale = &b
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UploadTime = &v
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoldOutTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SoldOutTime = &v
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishBoxItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishBoxItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishBoxItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishItemId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreStartTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PreStartTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreEndTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PreEndTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Style = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsWin = &b
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PerNum = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PerTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerRate", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PerRate = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredictArrivalTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PredictArrivalTime = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigLoss", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BigLoss = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallLoss", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SmallLoss = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Common", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Common = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigWin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BigWin = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallWin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SmallWin = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonAddWeight", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommonAddWeight = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigWinAddWeight", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BigWinAddWeight = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallWinAddWeight", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SmallWinAddWeight = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardLv", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RewardLv = &v
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMakeWish", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsMakeWish = &b
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LocalNum = &v
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TaskTime = &v
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishItemName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WishItemName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishBox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishBox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishBox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Icon = &s
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Menu = append(m.Menu, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructWish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructWish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Menu) == 0 {
					m.Menu = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructWish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Menu = append(m.Menu, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Menu", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Items = append(m.Items, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructWish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructWish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Items) == 0 {
					m.Items = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructWish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Items = append(m.Items, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Desc = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Index = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Match = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalNum = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RareNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RareNum = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 14:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Brands = append(m.Brands, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructWish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructWish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Brands) == 0 {
					m.Brands = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructWish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Brands = append(m.Brands, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Brands", wireType)
			}
		case 15:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Types = append(m.Types, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructWish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructWish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Types) == 0 {
					m.Types = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructWish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Types = append(m.Types, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
		case 16:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Styles = append(m.Styles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructWish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructWish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Styles) == 0 {
					m.Styles = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructWish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Styles = append(m.Styles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Styles", wireType)
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WinNum = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuardianId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GuardianId = &v
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PutOnTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PutOnTime = &v
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortWeight", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SortWeight = &v
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveIsWin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.HaveIsWin = &b
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishPoolId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishPoolId = &v
		case 41:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WishItems = append(m.WishItems, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructWish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructWish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructWish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WishItems) == 0 {
					m.WishItems = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructWish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WishItems = append(m.WishItems, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WishItems", wireType)
			}
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTask", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsTask = &b
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductStatus", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductStatus = &v
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuardianOverTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GuardianOverTime = &v
		case 48:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGuardian", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsGuardian = &b
		case 49:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRecommend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsRecommend = &b
		case 50:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuardType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GuardType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DareId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DareId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DareName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DareName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeDareId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeDareId = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeDareName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BeDareName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Result = &b
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChallengeItemId = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DareHeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DareHeadIcon = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefendTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefendTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DarePrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DarePrice = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DareType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DareType = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishItemId = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolLocalStatus", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PoolLocalStatus = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolIsOpenAward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.PoolIsOpenAward = &b
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PoolId = &v
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolIncomeValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PoolIncomeValue = &v
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeItemName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ChallengeItemName = &s
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterPoolIncomeValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AfterPoolIncomeValue = &v
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterPoolIsOpenAward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.AfterPoolIsOpenAward = &b
		case 50:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuardType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GuardType = &v
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterPoolLocalStatus", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AfterPoolLocalStatus = &v
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTimeMill", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTimeMill = &v
		case 64:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoroutineID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GoroutineID = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishOccupied) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishOccupied: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishOccupied: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadUrl = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OccupiedTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OccupiedTime = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CoinNum = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerWishData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerWishData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerWishData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxItemId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FinishTime = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProductUrl = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Match = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMakeWish", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsMakeWish = &b
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishItemId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerWishItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerWishItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerWishItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChallengeItemId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsRead = &b
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpireTime = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecyclePrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecyclePrice = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleType = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishItemId = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishItemPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishItemPrice = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DareDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DareDiamond = &v
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProductName = &s
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishItemDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishItemDiamond = &v
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishItemIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WishItemIcon = &s
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishItemStyle", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishItemStyle = &v
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BoxName = &s
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BoxIcon = &s
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxMatch", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxMatch = &v
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterIsOpenAward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.AfterIsOpenAward = &b
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpenAward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOpenAward = &b
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterLocalStatus", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AfterLocalStatus = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalStatus", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LocalStatus = &v
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTimeMill", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTimeMill = &v
		case 64:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoroutineID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GoroutineID = &v
		case 65:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveType", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GiveType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerExchangeLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerExchangeLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerExchangeLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PlayerAccount = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Receiver = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Phone = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Address = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryTime = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OrderId = &s
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxDrawPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxDrawPrice = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxItem", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxItem = &v
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Company", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Company = &s
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CompanyCode = &s
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Odd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Odd = &s
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxId = &v
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductId = &v
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProductName = &s
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProductIcon = &s
			iNdEx = postIndex
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductPrice = &v
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductDiamond = &v
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerItemId = &v
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Postage", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Postage = &v
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveType", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GiveType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerExchangeItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerExchangeItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerExchangeItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxDrawPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxDrawPrice = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxItem", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxItem = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxId = &v
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductId = &v
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Style = &v
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleStatus", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SaleStatus = &v
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreHaveTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PreHaveTime = &v
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProductName = &s
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProductIcon = &s
			iNdEx = postIndex
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductPrice = &v
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WinTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishRecycleOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishRecycleOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishRecycleOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleTime = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UserAccount = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Channel = &v
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankCardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankCardId = &s
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleItemList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecycleItemList = append(m.RecycleItemList, &WishRecycleItem{})
			if err := m.RecycleItemList[len(m.RecycleItemList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InitTime = &v
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecyclePriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecyclePriceTotal = &v
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductPriceTotal = &v
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleDiamond = &v
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleNote", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleNote = &v
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefusalNote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RefusalNote = &s
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remarks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Remarks = &s
			iNdEx = postIndex
		case 50:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentOrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PaymentOrderId = &s
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishRecycleItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishRecycleItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishRecycleItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxDrawPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxDrawPrice = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecyclePrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecyclePrice = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleDiamond = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WinTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxId = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductId = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Style = &v
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProductName = &s
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProductIcon = &s
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerItemId = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxItemId = &v
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductPrice = &v
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductDiamond = &v
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveType", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GiveType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerWishCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerWishCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerWishCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishTopLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishTopLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishTopLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadIcon = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishNum = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CoinNum = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThatDayTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThatDayTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishGuardianDiamondLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishGuardianDiamondLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishGuardianDiamondLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadIcon = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishNum = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CoinNum = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxId = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalNum = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishGuardianTopLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishGuardianTopLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishGuardianTopLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishNum = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CoinNum = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateCoinTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateCoinTime = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateWishTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateWishTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolLimit", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PoolLimit = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InitialValue = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncomeValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncomeValue = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recycle", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Recycle = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Commission = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAward", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartAward = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseAward", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CloseAward = &v
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowInitialValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowInitialValue = &v
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowRecycle", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowRecycle = &v
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowCommission", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowCommission = &v
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowStartAward", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowStartAward = &v
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowCloseAward", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowCloseAward = &v
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpenAward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOpenAward = &b
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDefault", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsDefault = &b
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigLoss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BigLoss == nil {
				m.BigLoss = &WishPoolStatus{}
			}
			if err := m.BigLoss.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallLoss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SmallLoss == nil {
				m.SmallLoss = &WishPoolStatus{}
			}
			if err := m.SmallLoss.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Common", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Common == nil {
				m.Common = &WishPoolStatus{}
			}
			if err := m.Common.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigWin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BigWin == nil {
				m.BigWin = &WishPoolStatus{}
			}
			if err := m.BigWin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallWin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SmallWin == nil {
				m.SmallWin = &WishPoolStatus{}
			}
			if err := m.SmallWin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalStatus", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LocalStatus = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolConfigId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PoolConfigId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishPoolCfg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishPoolCfg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishPoolCfg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolLimit", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PoolLimit = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InitialValue = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncomeValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncomeValue = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recycle", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Recycle = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Commission = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAward", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartAward = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseAward", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CloseAward = &v
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowInitialValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowInitialValue = &v
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowRecycle", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowRecycle = &v
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowCommission", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowCommission = &v
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowStartAward", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowStartAward = &v
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowCloseAward", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowCloseAward = &v
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpenAward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOpenAward = &b
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDefault", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsDefault = &b
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigLoss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BigLoss == nil {
				m.BigLoss = &WishPoolStatus{}
			}
			if err := m.BigLoss.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallLoss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SmallLoss == nil {
				m.SmallLoss = &WishPoolStatus{}
			}
			if err := m.SmallLoss.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Common", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Common == nil {
				m.Common = &WishPoolStatus{}
			}
			if err := m.Common.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigWin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BigWin == nil {
				m.BigWin = &WishPoolStatus{}
			}
			if err := m.BigWin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallWin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SmallWin == nil {
				m.SmallWin = &WishPoolStatus{}
			}
			if err := m.SmallWin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishPoolIds", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishPoolIds = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishPoolStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishPoolStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishPoolStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxValue = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinValue = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowMaxValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowMaxValue = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowMinValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowMinValue = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishBoItemWinCfg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishBoItemWinCfg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishBoItemWinCfg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishItemId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigLoss", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BigLoss = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallLoss", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SmallLoss = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Common", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Common = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigWin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BigWin = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallWin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SmallWin = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriceSection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceSection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceSection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneMin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OneMin = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneMax", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OneMax = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwoMin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TwoMin = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwoMax", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TwoMax = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreeMin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThreeMin = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishMailSection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishMailSection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishMailSection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Postage1", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Postage1 = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Postage2", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Postage2 = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Postage3", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Postage3 = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteAreaList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteAreaList = append(m.RemoteAreaList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeNumber", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FreeNumber = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishRecycleSection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishRecycleSection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishRecycleSection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Platform = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayTopCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayTopCount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Player = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Status = &b
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayMoneyTopCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayMoneyTopCount = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayMoneyTop", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayMoneyTop = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderThresholdMoney", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderThresholdMoney = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayDiamondTopCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayDiamondTopCount = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayDiamondTop", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayDiamondTop = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderThreshold", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderThreshold = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRate", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FeeRate = &v
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformTax", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlatformTax = &v
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealTax", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RealTax = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishPayWarnCfg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishPayWarnCfg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishPayWarnCfg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithdrawalTime = &v
		case 60:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalTimes", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithdrawalTimes = &v
		case 61:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalGoldRate", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithdrawalGoldRate = &v
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalGold", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithdrawalGold = &v
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalDiamondRate", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithdrawalDiamondRate = &v
		case 64:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithdrawalDiamond = &v
		case 65:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneList = append(m.PhoneList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishCurrencyConversionCfg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishCurrencyConversionCfg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishCurrencyConversionCfg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Money = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Coin = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishGuardianCfg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishGuardianCfg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishGuardianCfg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayDiamondTop", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayDiamondTop = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnceDiamondRebate", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnceDiamondRebate = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleInitCfg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleInitCfg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleInitCfg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Table = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecycleNoteCfg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecycleNoteCfg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecycleNoteCfg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = append(m.Text, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiamondRecharge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiamondRecharge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiamondRecharge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CoinPrice = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthFirst", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MonthFirst = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rebate", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rebate = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sort = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisPrice = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GiveDiamond = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishPoolReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishPoolReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishPoolReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishPlayerCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddPlayerCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyPlayerCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyCount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyWishCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyWishCount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertCount = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleCount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerRecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerRecycleCount = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialRecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OfficialRecycleCount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleGoldTotal = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyGoldTotal = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertGoodsPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertGoodsPriceTotal = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionTotal", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommissionTotal = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendConvertGoodsPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PendConvertGoodsPriceTotal = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendConvertCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PendConvertCount = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerRecycleGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerRecycleGoldTotal = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialRecycleGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OfficialRecycleGoldTotal = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Profit = &v
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertDiamondTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertDiamondTotal = &v
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertDiamondPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertDiamondPlayerCount = &v
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertDiamondCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertDiamondCount = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecyclePlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecyclePlayerCount = &v
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliverCount = &v
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliverPlayerCount = &v
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InPoolCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InPoolCount = &v
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InPoolPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InPoolPlayerCount = &v
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinItemPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WinItemPriceTotal = &v
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		case 49:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductDiamondTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductDiamondTotal = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishPoolReportWeek) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishPoolReportWeek: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishPoolReportWeek: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishPlayerCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddPlayerCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyPlayerCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyCount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyWishCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyWishCount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertCount = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleCount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerRecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerRecycleCount = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialRecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OfficialRecycleCount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleGoldTotal = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyGoldTotal = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertGoodsPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertGoodsPriceTotal = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionTotal", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommissionTotal = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendConvertGoodsPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PendConvertGoodsPriceTotal = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendConvertCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PendConvertCount = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerRecycleGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerRecycleGoldTotal = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialRecycleGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OfficialRecycleGoldTotal = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Profit = &v
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertDiamondTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertDiamondTotal = &v
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertDiamondPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertDiamondPlayerCount = &v
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertDiamondCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertDiamondCount = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecyclePlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecyclePlayerCount = &v
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliverCount = &v
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliverPlayerCount = &v
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InPoolCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InPoolCount = &v
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InPoolPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InPoolPlayerCount = &v
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinItemPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WinItemPriceTotal = &v
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		case 49:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductDiamondTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductDiamondTotal = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishPoolReportMonth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishPoolReportMonth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishPoolReportMonth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishPlayerCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddPlayerCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyPlayerCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyCount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyWishCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyWishCount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertCount = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleCount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerRecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerRecycleCount = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialRecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OfficialRecycleCount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleGoldTotal = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyGoldTotal = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertGoodsPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertGoodsPriceTotal = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionTotal", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommissionTotal = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendConvertGoodsPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PendConvertGoodsPriceTotal = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendConvertCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PendConvertCount = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerRecycleGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerRecycleGoldTotal = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialRecycleGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OfficialRecycleGoldTotal = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Profit = &v
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertDiamondTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertDiamondTotal = &v
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertDiamondPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertDiamondPlayerCount = &v
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertDiamondCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertDiamondCount = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecyclePlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecyclePlayerCount = &v
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliverCount = &v
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliverPlayerCount = &v
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InPoolCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InPoolCount = &v
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InPoolPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InPoolPlayerCount = &v
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinItemPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WinItemPriceTotal = &v
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		case 49:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductDiamondTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductDiamondTotal = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishBoxReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishBoxReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishBoxReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishPlayerCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddPlayerCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DrawPlayerCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DrawCount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyWishCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyWishCount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertCount = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleCount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerRecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerRecycleCount = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialRecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OfficialRecycleCount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleGoldTotal = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyGoldTotal = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertGoodsPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertGoodsPriceTotal = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionTotal", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommissionTotal = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendConvertGoodsPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PendConvertGoodsPriceTotal = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendConvertCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PendConvertCount = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerRecycleGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerRecycleGoldTotal = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialRecycleGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OfficialRecycleGoldTotal = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Profit = &v
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertDiamondPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertDiamondPlayerCount = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecyclePlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecyclePlayerCount = &v
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliverCount = &v
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliverPlayerCount = &v
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishPoolReportId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishPoolReportId = &v
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxId = &v
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BoxName = &s
			iNdEx = postIndex
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinItemPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WinItemPriceTotal = &v
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductDiamondTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductDiamondTotal = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishBoxReportWeek) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishBoxReportWeek: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishBoxReportWeek: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishPlayerCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddPlayerCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DrawPlayerCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DrawCount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyWishCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyWishCount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertCount = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleCount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerRecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerRecycleCount = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialRecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OfficialRecycleCount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleGoldTotal = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyGoldTotal = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertGoodsPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertGoodsPriceTotal = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionTotal", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommissionTotal = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendConvertGoodsPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PendConvertGoodsPriceTotal = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendConvertCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PendConvertCount = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerRecycleGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerRecycleGoldTotal = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialRecycleGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OfficialRecycleGoldTotal = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Profit = &v
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertDiamondPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertDiamondPlayerCount = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecyclePlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecyclePlayerCount = &v
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliverCount = &v
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliverPlayerCount = &v
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishPoolReportId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishPoolReportId = &v
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxId = &v
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BoxName = &s
			iNdEx = postIndex
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinItemPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WinItemPriceTotal = &v
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		case 48:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductDiamondTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductDiamondTotal = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishBoxReportMonth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishBoxReportMonth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishBoxReportMonth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishPlayerCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddPlayerCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DrawPlayerCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DrawCount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyWishCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyWishCount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertCount = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleCount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerRecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerRecycleCount = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialRecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OfficialRecycleCount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleGoldTotal = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyGoldTotal = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertGoodsPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertGoodsPriceTotal = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionTotal", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommissionTotal = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendConvertGoodsPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PendConvertGoodsPriceTotal = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendConvertCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PendConvertCount = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerRecycleGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerRecycleGoldTotal = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialRecycleGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OfficialRecycleGoldTotal = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Profit = &v
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertDiamondPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertDiamondPlayerCount = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecyclePlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecyclePlayerCount = &v
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliverCount = &v
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliverPlayerCount = &v
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishPoolReportId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishPoolReportId = &v
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxId = &v
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BoxName = &s
			iNdEx = postIndex
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinItemPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WinItemPriceTotal = &v
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		case 48:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductDiamondTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductDiamondTotal = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishBoxDetailReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishBoxDetailReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishBoxDetailReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishPlayerCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishAndDrawPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishAndDrawPlayerCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WinCount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyWishCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyWishCount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertCount = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleCount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerRecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerRecycleCount = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialRecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OfficialRecycleCount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleGoldTotal = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyGoldTotal = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertGoodsPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertGoodsPriceTotal = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendConvertCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PendConvertCount = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerRecycleGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerRecycleGoldTotal = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialRecycleGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OfficialRecycleGoldTotal = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendConvertPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PendConvertPriceTotal = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Profit = &v
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecyclePlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecyclePlayerCount = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliverCount = &v
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliverPlayerCount = &v
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxId = &v
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxReportId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WishBoxReportId = &s
			iNdEx = postIndex
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ItemId = &v
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ItemName = &s
			iNdEx = postIndex
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Style = &v
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditConvertCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AuditConvertCount = &v
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditConvertPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AuditConvertPriceTotal = &v
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinItemPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WinItemPriceTotal = &v
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductDiamondTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductDiamondTotal = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishBoxDetailReportWeek) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishBoxDetailReportWeek: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishBoxDetailReportWeek: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishPlayerCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishAndDrawPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishAndDrawPlayerCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WinCount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyWishCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyWishCount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertCount = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleCount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerRecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerRecycleCount = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialRecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OfficialRecycleCount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleGoldTotal = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyGoldTotal = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertGoodsPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertGoodsPriceTotal = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendConvertCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PendConvertCount = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerRecycleGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerRecycleGoldTotal = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialRecycleGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OfficialRecycleGoldTotal = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendConvertPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PendConvertPriceTotal = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Profit = &v
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecyclePlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecyclePlayerCount = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliverCount = &v
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliverPlayerCount = &v
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxId = &v
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxReportId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WishBoxReportId = &s
			iNdEx = postIndex
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ItemId = &v
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ItemName = &s
			iNdEx = postIndex
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Style = &v
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditConvertCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AuditConvertCount = &v
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditConvertPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AuditConvertPriceTotal = &v
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinItemPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WinItemPriceTotal = &v
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		case 48:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductDiamondTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductDiamondTotal = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishBoxDetailReportMonth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishBoxDetailReportMonth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishBoxDetailReportMonth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishPlayerCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishAndDrawPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishAndDrawPlayerCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WinCount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyWishCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyWishCount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertCount = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleCount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerRecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerRecycleCount = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialRecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OfficialRecycleCount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleGoldTotal = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyGoldTotal = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertGoodsPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertGoodsPriceTotal = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendConvertCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PendConvertCount = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerRecycleGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerRecycleGoldTotal = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialRecycleGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OfficialRecycleGoldTotal = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendConvertPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PendConvertPriceTotal = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Profit = &v
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecyclePlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecyclePlayerCount = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliverCount = &v
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliverPlayerCount = &v
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxId = &v
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxReportId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WishBoxReportId = &s
			iNdEx = postIndex
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ItemId = &v
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ItemName = &s
			iNdEx = postIndex
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Style = &v
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditConvertCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AuditConvertCount = &v
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditConvertPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AuditConvertPriceTotal = &v
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinItemPriceTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WinItemPriceTotal = &v
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		case 48:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductDiamondTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductDiamondTotal = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishItemReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishItemReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishItemReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ItemId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishPlayerCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishAndDrawPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishAndDrawPlayerCount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WinCount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyWishCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyWishCount = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendConvertCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PendConvertCount = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConvertCount = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleCount = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerRecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerRecycleCount = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialRecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OfficialRecycleCount = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleGoldTotal = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyGoldTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyGoldTotal = &v
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ItemName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishPoolPumpLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishPoolPumpLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishPoolPumpLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PoolId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncomeValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncomeValue = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BoxName = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PoolName = &s
			iNdEx = postIndex
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTimeMill", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTimeMill = &v
		case 64:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoroutineID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GoroutineID = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishPoolLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishPoolLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishPoolLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PoolId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeforeValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeforeValue = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AfterValue = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterIsOpenAward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.AfterIsOpenAward = &b
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpenAward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOpenAward = &b
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterLocalStatus", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AfterLocalStatus = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalStatus", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LocalStatus = &v
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTimeMill", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTimeMill = &v
		case 64:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoroutineID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GoroutineID = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishCoolDownConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishCoolDownConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishCoolDownConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOpen = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinuousTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ContinuousTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinuousTimes", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ContinuousTimes = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoolDownTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CoolDownTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayLimit", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayLimit = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiamondChangeLog) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiamondChangeLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiamondChangeLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangeDiamond = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SourceType = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SourceTypeName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayType = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurDiamond = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("LogId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecycleReason) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecycleReason: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecycleReason: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishSumOccupied) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishSumOccupied: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishSumOccupied: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadUrl = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OccupiedTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OccupiedTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishWhite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishWhite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishWhite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishBuryingPointLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishBuryingPointLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishBuryingPointLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EventType = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Time = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTableStructWish(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTableStructWish
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTableStructWish
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTableStructWish
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTableStructWish
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTableStructWish
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTableStructWish(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTableStructWish
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTableStructWish = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTableStructWish   = fmt.Errorf("proto: integer overflow")
)
