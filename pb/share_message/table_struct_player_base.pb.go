// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: table_struct_player_base.proto

// 如果仅用于通讯的 message,别放在这里

package share_message

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_akqp2019_protobuf_proto "github.com/akqp2019/protobuf/proto"
	proto "github.com/akqp2019/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AddFriend_Type int32

const (
	AddFriend_Type_ACCOUNT    AddFriend_Type = 1
	AddFriend_Type_PHONE      AddFriend_Type = 2
	AddFriend_Type_CODE       AddFriend_Type = 3
	AddFriend_Type_WECHAT     AddFriend_Type = 4
	AddFriend_Type_TEAM       AddFriend_Type = 5
	AddFriend_Type_NEARBY     AddFriend_Type = 6
	AddFriend_Type_PLAYERID   AddFriend_Type = 7
	AddFriend_Type_CARD       AddFriend_Type = 8
	AddFriend_Type_STRANGER   AddFriend_Type = 9
	AddFriend_Type_REGISTER   AddFriend_Type = 10
	AddFriend_Type_SQUARE     AddFriend_Type = 11
	AddFriend_Type_VOICE_CARD AddFriend_Type = 12
)

var AddFriend_Type_name = map[int32]string{
	1:  "ACCOUNT",
	2:  "PHONE",
	3:  "CODE",
	4:  "WECHAT",
	5:  "TEAM",
	6:  "NEARBY",
	7:  "PLAYERID",
	8:  "CARD",
	9:  "STRANGER",
	10: "REGISTER",
	11: "SQUARE",
	12: "VOICE_CARD",
}

var AddFriend_Type_value = map[string]int32{
	"ACCOUNT":    1,
	"PHONE":      2,
	"CODE":       3,
	"WECHAT":     4,
	"TEAM":       5,
	"NEARBY":     6,
	"PLAYERID":   7,
	"CARD":       8,
	"STRANGER":   9,
	"REGISTER":   10,
	"SQUARE":     11,
	"VOICE_CARD": 12,
}

func (x AddFriend_Type) Enum() *AddFriend_Type {
	p := new(AddFriend_Type)
	*p = x
	return p
}

func (x AddFriend_Type) String() string {
	return proto.EnumName(AddFriend_Type_name, int32(x))
}

func (x *AddFriend_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AddFriend_Type_value, data, "AddFriend_Type")
	if err != nil {
		return err
	}
	*x = AddFriend_Type(value)
	return nil
}

func (AddFriend_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e5ba9588a1ccdcea, []int{0}
}

//玩家登录表  player_account
type PlayerAccount struct {
	PlayerId *int64  `protobuf:"varint,1,req,name=PlayerId" json:"_id,omitempty" bson:"_id,omitempty"`
	Account  *string `protobuf:"bytes,2,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	Email    *string `protobuf:"bytes,3,opt,name=Email" json:"Email,omitempty" bson:"Email,omitempty"`
	Password *string `protobuf:"bytes,4,opt,name=Password" json:"Password,omitempty" bson:"Password,omitempty"`
	//optional string Token = 5;//随机生成码
	PayPassword          *string  `protobuf:"bytes,6,opt,name=PayPassword" json:"PayPassword,omitempty" bson:"PayPassword,omitempty"`
	OpenId               *string  `protobuf:"bytes,7,opt,name=OpenId" json:"OpenId,omitempty" bson:"OpenId,omitempty"`
	CreateTime           *int64   `protobuf:"varint,8,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	IsBind               *bool    `protobuf:"varint,9,opt,name=IsBind" json:"IsBind,omitempty" bson:"IsBind,omitempty"`
	AreaCode             *string  `protobuf:"bytes,10,opt,name=AreaCode" json:"AreaCode,omitempty" bson:"AreaCode,omitempty"`
	UnionId              *string  `protobuf:"bytes,11,opt,name=UnionId" json:"UnionId,omitempty" bson:"UnionId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerAccount) Reset()         { *m = PlayerAccount{} }
func (m *PlayerAccount) String() string { return proto.CompactTextString(m) }
func (*PlayerAccount) ProtoMessage()    {}
func (*PlayerAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ba9588a1ccdcea, []int{0}
}
func (m *PlayerAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerAccount.Merge(m, src)
}
func (m *PlayerAccount) XXX_Size() int {
	return m.Size()
}
func (m *PlayerAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerAccount.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerAccount proto.InternalMessageInfo

func (m *PlayerAccount) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerAccount) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *PlayerAccount) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

func (m *PlayerAccount) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *PlayerAccount) GetPayPassword() string {
	if m != nil && m.PayPassword != nil {
		return *m.PayPassword
	}
	return ""
}

func (m *PlayerAccount) GetOpenId() string {
	if m != nil && m.OpenId != nil {
		return *m.OpenId
	}
	return ""
}

func (m *PlayerAccount) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PlayerAccount) GetIsBind() bool {
	if m != nil && m.IsBind != nil {
		return *m.IsBind
	}
	return false
}

func (m *PlayerAccount) GetAreaCode() string {
	if m != nil && m.AreaCode != nil {
		return *m.AreaCode
	}
	return ""
}

func (m *PlayerAccount) GetUnionId() string {
	if m != nil && m.UnionId != nil {
		return *m.UnionId
	}
	return ""
}

type BankInfo struct {
	BankId               *string  `protobuf:"bytes,1,opt,name=BankId" json:"BankId,omitempty" bson:"BankId,omitempty"`
	BankCode             *string  `protobuf:"bytes,2,opt,name=BankCode" json:"BankCode,omitempty" bson:"BankCode,omitempty"`
	Time                 *int64   `protobuf:"varint,3,opt,name=Time" json:"Time,omitempty" bson:"Time,omitempty"`
	SignNo               *string  `protobuf:"bytes,4,opt,name=SignNo" json:"SignNo,omitempty" bson:"SignNo,omitempty"`
	BankName             *string  `protobuf:"bytes,5,opt,name=BankName" json:"BankName,omitempty" bson:"BankName,omitempty"`
	BankPhone            *string  `protobuf:"bytes,6,opt,name=BankPhone" json:"BankPhone,omitempty" bson:"BankPhone,omitempty"`
	Provice              *string  `protobuf:"bytes,7,opt,name=Provice" json:"Provice,omitempty" bson:"Provice,omitempty"`
	City                 *string  `protobuf:"bytes,8,opt,name=City" json:"City,omitempty" bson:"City,omitempty"`
	Area                 *string  `protobuf:"bytes,9,opt,name=Area" json:"Area,omitempty" bson:"Area,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *BankInfo) Reset()         { *m = BankInfo{} }
func (m *BankInfo) String() string { return proto.CompactTextString(m) }
func (*BankInfo) ProtoMessage()    {}
func (*BankInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ba9588a1ccdcea, []int{1}
}
func (m *BankInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BankInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BankInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BankInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BankInfo.Merge(m, src)
}
func (m *BankInfo) XXX_Size() int {
	return m.Size()
}
func (m *BankInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BankInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BankInfo proto.InternalMessageInfo

func (m *BankInfo) GetBankId() string {
	if m != nil && m.BankId != nil {
		return *m.BankId
	}
	return ""
}

func (m *BankInfo) GetBankCode() string {
	if m != nil && m.BankCode != nil {
		return *m.BankCode
	}
	return ""
}

func (m *BankInfo) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *BankInfo) GetSignNo() string {
	if m != nil && m.SignNo != nil {
		return *m.SignNo
	}
	return ""
}

func (m *BankInfo) GetBankName() string {
	if m != nil && m.BankName != nil {
		return *m.BankName
	}
	return ""
}

func (m *BankInfo) GetBankPhone() string {
	if m != nil && m.BankPhone != nil {
		return *m.BankPhone
	}
	return ""
}

func (m *BankInfo) GetProvice() string {
	if m != nil && m.Provice != nil {
		return *m.Provice
	}
	return ""
}

func (m *BankInfo) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

func (m *BankInfo) GetArea() string {
	if m != nil && m.Area != nil {
		return *m.Area
	}
	return ""
}

type PlayerSetting struct {
	IsSafePassword       *bool    `protobuf:"varint,1,opt,name=IsSafePassword" json:"IsSafePassword,omitempty" bson:"IsSafePassword,omitempty"`
	IsNewMessage         *bool    `protobuf:"varint,2,opt,name=IsNewMessage" json:"IsNewMessage,omitempty" bson:"IsNewMessage,omitempty"`
	IsMusic              *bool    `protobuf:"varint,3,opt,name=IsMusic" json:"IsMusic,omitempty" bson:"IsMusic,omitempty"`
	IsShake              *bool    `protobuf:"varint,4,opt,name=IsShake" json:"IsShake,omitempty" bson:"IsShake,omitempty"`
	IsAddFriend          *bool    `protobuf:"varint,5,opt,name=IsAddFriend" json:"IsAddFriend,omitempty" bson:"IsAddFriend,omitempty"`
	IsPhone              *bool    `protobuf:"varint,6,opt,name=IsPhone" json:"IsPhone,omitempty" bson:"IsPhone,omitempty"`
	IsAccount            *bool    `protobuf:"varint,7,opt,name=IsAccount" json:"IsAccount,omitempty" bson:"IsAccount,omitempty"`
	IsTeamChat           *bool    `protobuf:"varint,8,opt,name=IsTeamChat" json:"IsTeamChat,omitempty" bson:"IsTeamChat,omitempty"`
	IsCode               *bool    `protobuf:"varint,9,opt,name=IsCode" json:"IsCode,omitempty" bson:"IsCode,omitempty"`
	IsCard               *bool    `protobuf:"varint,10,opt,name=IsCard" json:"IsCard,omitempty" bson:"IsCard,omitempty"`
	SafePassword         *string  `protobuf:"bytes,11,opt,name=SafePassword" json:"SafePassword,omitempty" bson:"SafePassword,omitempty"`
	IsSafeProtect        *bool    `protobuf:"varint,12,opt,name=IsSafeProtect" json:"IsSafeProtect,omitempty" bson:"IsSafeProtect,omitempty"`
	IsTouch              *bool    `protobuf:"varint,13,opt,name=IsTouch" json:"IsTouch,omitempty" bson:"IsTouch,omitempty"`
	IsMessageShow        *bool    `protobuf:"varint,14,opt,name=IsMessageShow" json:"IsMessageShow,omitempty" bson:"IsMessageShow,omitempty"`
	IsOpenSquare         *bool    `protobuf:"varint,15,opt,name=IsOpenSquare" json:"IsOpenSquare,omitempty" bson:"IsOpenSquare,omitempty"`
	IsOpenZanOrComment   *bool    `protobuf:"varint,16,opt,name=IsOpenZanOrComment" json:"IsOpenZanOrComment,omitempty" bson:"IsOpenZanOrComment,omitempty"`
	IsOpenRecoverComment *bool    `protobuf:"varint,17,opt,name=IsOpenRecoverComment" json:"IsOpenRecoverComment,omitempty" bson:"IsOpenRecoverComment,omitempty"`
	IsOpenMyAttention    *bool    `protobuf:"varint,18,opt,name=IsOpenMyAttention" json:"IsOpenMyAttention,omitempty" bson:"IsOpenMyAttention,omitempty"`
	IsOpenRecommend      *bool    `protobuf:"varint,19,opt,name=IsOpenRecommend" json:"IsOpenRecommend,omitempty" bson:"IsOpenRecommend,omitempty"`
	IsOpenCoinShop       *bool    `protobuf:"varint,20,opt,name=IsOpenCoinShop" json:"IsOpenCoinShop,omitempty" bson:"IsOpenCoinShop,omitempty"`
	IsBanSayHi           *bool    `protobuf:"varint,21,opt,name=IsBanSayHi" json:"IsBanSayHi,omitempty" bson:"IsBanSayHi,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerSetting) Reset()         { *m = PlayerSetting{} }
func (m *PlayerSetting) String() string { return proto.CompactTextString(m) }
func (*PlayerSetting) ProtoMessage()    {}
func (*PlayerSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ba9588a1ccdcea, []int{2}
}
func (m *PlayerSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerSetting.Merge(m, src)
}
func (m *PlayerSetting) XXX_Size() int {
	return m.Size()
}
func (m *PlayerSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerSetting.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerSetting proto.InternalMessageInfo

func (m *PlayerSetting) GetIsSafePassword() bool {
	if m != nil && m.IsSafePassword != nil {
		return *m.IsSafePassword
	}
	return false
}

func (m *PlayerSetting) GetIsNewMessage() bool {
	if m != nil && m.IsNewMessage != nil {
		return *m.IsNewMessage
	}
	return false
}

func (m *PlayerSetting) GetIsMusic() bool {
	if m != nil && m.IsMusic != nil {
		return *m.IsMusic
	}
	return false
}

func (m *PlayerSetting) GetIsShake() bool {
	if m != nil && m.IsShake != nil {
		return *m.IsShake
	}
	return false
}

func (m *PlayerSetting) GetIsAddFriend() bool {
	if m != nil && m.IsAddFriend != nil {
		return *m.IsAddFriend
	}
	return false
}

func (m *PlayerSetting) GetIsPhone() bool {
	if m != nil && m.IsPhone != nil {
		return *m.IsPhone
	}
	return false
}

func (m *PlayerSetting) GetIsAccount() bool {
	if m != nil && m.IsAccount != nil {
		return *m.IsAccount
	}
	return false
}

func (m *PlayerSetting) GetIsTeamChat() bool {
	if m != nil && m.IsTeamChat != nil {
		return *m.IsTeamChat
	}
	return false
}

func (m *PlayerSetting) GetIsCode() bool {
	if m != nil && m.IsCode != nil {
		return *m.IsCode
	}
	return false
}

func (m *PlayerSetting) GetIsCard() bool {
	if m != nil && m.IsCard != nil {
		return *m.IsCard
	}
	return false
}

func (m *PlayerSetting) GetSafePassword() string {
	if m != nil && m.SafePassword != nil {
		return *m.SafePassword
	}
	return ""
}

func (m *PlayerSetting) GetIsSafeProtect() bool {
	if m != nil && m.IsSafeProtect != nil {
		return *m.IsSafeProtect
	}
	return false
}

func (m *PlayerSetting) GetIsTouch() bool {
	if m != nil && m.IsTouch != nil {
		return *m.IsTouch
	}
	return false
}

func (m *PlayerSetting) GetIsMessageShow() bool {
	if m != nil && m.IsMessageShow != nil {
		return *m.IsMessageShow
	}
	return false
}

func (m *PlayerSetting) GetIsOpenSquare() bool {
	if m != nil && m.IsOpenSquare != nil {
		return *m.IsOpenSquare
	}
	return false
}

func (m *PlayerSetting) GetIsOpenZanOrComment() bool {
	if m != nil && m.IsOpenZanOrComment != nil {
		return *m.IsOpenZanOrComment
	}
	return false
}

func (m *PlayerSetting) GetIsOpenRecoverComment() bool {
	if m != nil && m.IsOpenRecoverComment != nil {
		return *m.IsOpenRecoverComment
	}
	return false
}

func (m *PlayerSetting) GetIsOpenMyAttention() bool {
	if m != nil && m.IsOpenMyAttention != nil {
		return *m.IsOpenMyAttention
	}
	return false
}

func (m *PlayerSetting) GetIsOpenRecommend() bool {
	if m != nil && m.IsOpenRecommend != nil {
		return *m.IsOpenRecommend
	}
	return false
}

func (m *PlayerSetting) GetIsOpenCoinShop() bool {
	if m != nil && m.IsOpenCoinShop != nil {
		return *m.IsOpenCoinShop
	}
	return false
}

func (m *PlayerSetting) GetIsBanSayHi() bool {
	if m != nil && m.IsBanSayHi != nil {
		return *m.IsBanSayHi
	}
	return false
}

//收藏的信息
type CollectInfo struct {
	Collect              []*Collect `protobuf:"bytes,1,rep,name=Collect" json:"Collect,omitempty" bson:"Collect,omitempty"`
	Index                *int32     `protobuf:"varint,2,opt,name=Index" json:"Index,omitempty" bson:"Index,omitempty"`
	Name                 *string    `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Time                 *int64     `protobuf:"varint,5,opt,name=Time" json:"Time,omitempty" bson:"Time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-" bson:"-"`
	XXX_unrecognized     []byte     `json:"-" bson:"-"`
	XXX_sizecache        int32      `json:"-" bson:"-"`
}

func (m *CollectInfo) Reset()         { *m = CollectInfo{} }
func (m *CollectInfo) String() string { return proto.CompactTextString(m) }
func (*CollectInfo) ProtoMessage()    {}
func (*CollectInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ba9588a1ccdcea, []int{3}
}
func (m *CollectInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectInfo.Merge(m, src)
}
func (m *CollectInfo) XXX_Size() int {
	return m.Size()
}
func (m *CollectInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CollectInfo proto.InternalMessageInfo

func (m *CollectInfo) GetCollect() []*Collect {
	if m != nil {
		return m.Collect
	}
	return nil
}

func (m *CollectInfo) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *CollectInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CollectInfo) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

type Collect struct {
	Type                 *int32   `protobuf:"varint,1,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	Content              *string  `protobuf:"bytes,2,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	Time                 *int64   `protobuf:"varint,3,opt,name=Time" json:"Time,omitempty" bson:"Time,omitempty"`
	Name                 *string  `protobuf:"bytes,4,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Data                 *string  `protobuf:"bytes,5,opt,name=Data" json:"Data,omitempty" bson:"Data,omitempty"`
	HeadIcon             *string  `protobuf:"bytes,6,opt,name=HeadIcon" json:"HeadIcon,omitempty" bson:"HeadIcon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *Collect) Reset()         { *m = Collect{} }
func (m *Collect) String() string { return proto.CompactTextString(m) }
func (*Collect) ProtoMessage()    {}
func (*Collect) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ba9588a1ccdcea, []int{4}
}
func (m *Collect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Collect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Collect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Collect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Collect.Merge(m, src)
}
func (m *Collect) XXX_Size() int {
	return m.Size()
}
func (m *Collect) XXX_DiscardUnknown() {
	xxx_messageInfo_Collect.DiscardUnknown(m)
}

var xxx_messageInfo_Collect proto.InternalMessageInfo

func (m *Collect) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *Collect) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *Collect) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *Collect) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Collect) GetData() string {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return ""
}

func (m *Collect) GetHeadIcon() string {
	if m != nil && m.HeadIcon != nil {
		return *m.HeadIcon
	}
	return ""
}

//玩家基础表  player_base
type PlayerBase struct {
	PlayerId              *int64         `protobuf:"varint,1,req,name=PlayerId" json:"_id,omitempty" bson:"_id,omitempty"`
	Password              *string        `protobuf:"bytes,24,opt,name=Password" json:"-" bson:"-"`
	NickName              *string        `protobuf:"bytes,2,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	HeadIcon              *string        `protobuf:"bytes,3,opt,name=HeadIcon" json:"HeadIcon,omitempty" bson:"HeadIcon,omitempty"`
	Sex                   *int32         `protobuf:"varint,4,opt,name=Sex" json:"Sex,omitempty" bson:"Sex,omitempty"`
	Gold                  *int64         `protobuf:"varint,5,opt,name=Gold" json:"Gold,omitempty" bson:"Gold,omitempty"`
	IsRobot               *bool          `protobuf:"varint,6,opt,name=IsRobot" json:"IsRobot,omitempty" bson:"IsRobot,omitempty"`
	LastOnLineTime        *int64         `protobuf:"varint,7,opt,name=LastOnLineTime" json:"LastOnLineTime,omitempty" bson:"LastOnLineTime,omitempty"`
	Photo                 []string       `protobuf:"bytes,8,rep,name=Photo" json:"Photo,omitempty" bson:"Photo,omitempty"`
	Email                 *string        `protobuf:"bytes,9,opt,name=Email" json:"Email,omitempty" bson:"Email,omitempty"`
	PeopleId              *string        `protobuf:"bytes,10,opt,name=PeopleId" json:"PeopleId,omitempty" bson:"PeopleId,omitempty"`
	Account               *string        `protobuf:"bytes,11,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	Phone                 *string        `protobuf:"bytes,12,opt,name=Phone" json:"Phone,omitempty" bson:"Phone,omitempty"`
	CreateTime            *int64         `protobuf:"varint,13,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	TeamIds               []int64        `protobuf:"varint,15,rep,name=TeamIds" json:"TeamIds,omitempty" bson:"TeamIds,omitempty"`
	IsOnline              *bool          `protobuf:"varint,16,opt,name=IsOnline" json:"IsOnline,omitempty" bson:"IsOnline,omitempty"`
	BankInfo              []*BankInfo    `protobuf:"bytes,17,rep,name=BankInfo" json:"BankInfo,omitempty" bson:"BankInfo,omitempty"`
	RealName              *string        `protobuf:"bytes,18,opt,name=RealName" json:"RealName,omitempty" bson:"RealName,omitempty"`
	Signature             *string        `protobuf:"bytes,19,opt,name=Signature" json:"Signature,omitempty" bson:"Signature,omitempty"`
	Provice               *string        `protobuf:"bytes,20,opt,name=Provice" json:"Provice,omitempty" bson:"Provice,omitempty"`
	City                  *string        `protobuf:"bytes,21,opt,name=City" json:"City,omitempty" bson:"City,omitempty"`
	Area                  *string        `protobuf:"bytes,22,opt,name=Area" json:"Area,omitempty" bson:"Area,omitempty"`
	IsRecommend           *bool          `protobuf:"varint,23,opt,name=IsRecommend" json:"IsRecommend,omitempty" bson:"IsRecommend,omitempty"`
	PlayerSetting         *PlayerSetting `protobuf:"bytes,25,opt,name=PlayerSetting" json:"PlayerSetting,omitempty" bson:"PlayerSetting,omitempty"`
	BlackList             []int64        `protobuf:"varint,26,rep,name=BlackList" json:"BlackList,omitempty" bson:"BlackList,omitempty"`
	LastLogOutTime        *int64         `protobuf:"varint,27,opt,name=LastLogOutTime" json:"LastLogOutTime,omitempty" bson:"LastLogOutTime,omitempty"`
	LoginTimes            *int32         `protobuf:"varint,28,opt,name=LoginTimes" json:"LoginTimes,omitempty" bson:"LoginTimes,omitempty"`
	OnlineTime            *int64         `protobuf:"varint,30,opt,name=OnlineTime" json:"OnlineTime,omitempty" bson:"OnlineTime,omitempty"`
	X                     *float64       `protobuf:"fixed64,31,opt,name=X" json:"X,omitempty" bson:"X,omitempty"`
	Y                     *float64       `protobuf:"fixed64,32,opt,name=Y" json:"Y,omitempty" bson:"Y,omitempty"`
	DeviceType            *int32         `protobuf:"varint,33,opt,name=DeviceType" json:"DeviceType,omitempty" bson:"DeviceType,omitempty"`
	IsNearBy              *bool          `protobuf:"varint,34,opt,name=IsNearBy" json:"IsNearBy,omitempty" bson:"IsNearBy,omitempty"`
	Channel               *string        `protobuf:"bytes,35,opt,name=Channel" json:"Channel,omitempty" bson:"Channel,omitempty"`
	Types                 *int32         `protobuf:"varint,36,opt,name=Types" json:"Types,omitempty" bson:"Types,omitempty"`
	LastAssistantTime     *int64         `protobuf:"varint,37,opt,name=LastAssistantTime" json:"LastAssistantTime,omitempty" bson:"LastAssistantTime,omitempty"`
	WXOpenId              *string        `protobuf:"bytes,38,opt,name=WXOpenId" json:"WXOpenId,omitempty" bson:"WXOpenId,omitempty"`
	WXSessionKey          *string        `protobuf:"bytes,39,opt,name=WXSessionKey" json:"WXSessionKey,omitempty" bson:"WXSessionKey,omitempty"`
	WXUnionid             *string        `protobuf:"bytes,40,opt,name=WXUnionid" json:"WXUnionid,omitempty" bson:"WXUnionid,omitempty"`
	ClearLocalLogTime     *int64         `protobuf:"varint,41,opt,name=ClearLocalLogTime" json:"ClearLocalLogTime,omitempty" bson:"ClearLocalLogTime,omitempty"`
	ComplaintTime         *int64         `protobuf:"varint,42,opt,name=ComplaintTime" json:"ComplaintTime,omitempty" bson:"ComplaintTime,omitempty"`
	IsVisitor             *bool          `protobuf:"varint,43,opt,name=IsVisitor" json:"IsVisitor,omitempty" bson:"IsVisitor,omitempty"`
	CollectInfo           []*CollectInfo `protobuf:"bytes,45,rep,name=CollectInfo" json:"CollectInfo,omitempty" bson:"CollectInfo,omitempty"`
	Sid                   *int32         `protobuf:"varint,46,opt,name=Sid" json:"Sid,omitempty" bson:"Sid,omitempty"`
	TodayOnlineTime       *int64         `protobuf:"varint,47,opt,name=TodayOnlineTime" json:"TodayOnlineTime,omitempty" bson:"TodayOnlineTime,omitempty"`
	CreateIP              *string        `protobuf:"bytes,48,opt,name=CreateIP" json:"CreateIP,omitempty" bson:"CreateIP,omitempty"`
	LastLoginIP           *string        `protobuf:"bytes,49,opt,name=LastLoginIP" json:"LastLoginIP,omitempty" bson:"LastLoginIP,omitempty"`
	ApiUrl                *string        `protobuf:"bytes,50,opt,name=ApiUrl" json:"ApiUrl,omitempty" bson:"ApiUrl,omitempty"`
	SecretKey             *string        `protobuf:"bytes,51,opt,name=SecretKey" json:"SecretKey,omitempty" bson:"SecretKey,omitempty"`
	FreeTimes             *int32         `protobuf:"varint,52,opt,name=FreeTimes" json:"FreeTimes,omitempty" bson:"FreeTimes,omitempty"`
	AutoLoginTime         *int64         `protobuf:"varint,53,opt,name=AutoLoginTime" json:"AutoLoginTime,omitempty" bson:"AutoLoginTime,omitempty"`
	AutoLoginToken        *string        `protobuf:"bytes,54,opt,name=AutoLoginToken" json:"AutoLoginToken,omitempty" bson:"AutoLoginToken,omitempty"`
	Status                *int32         `protobuf:"varint,55,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	IsFriend              *int32         `protobuf:"varint,56,opt,name=is_friend" json:"-" bson:"-"`
	DeviceCode            *string        `protobuf:"bytes,57,opt,name=DeviceCode" json:"DeviceCode,omitempty" bson:"DeviceCode,omitempty"`
	CallInfo              *CallInfo      `protobuf:"bytes,58,opt,name=CallInfo" json:"CallInfo,omitempty" bson:"CallInfo,omitempty"`
	Label                 []int32        `protobuf:"varint,59,rep,name=Label" json:"Label,omitempty" bson:"Label,omitempty"`
	IsRecommendOver       *bool          `protobuf:"varint,60,opt,name=IsRecommendOver" json:"IsRecommendOver,omitempty" bson:"IsRecommendOver,omitempty"`
	Note                  *string        `protobuf:"bytes,61,opt,name=Note" json:"Note,omitempty" bson:"Note,omitempty"`
	CustomTag             []int32        `protobuf:"varint,62,rep,name=CustomTag" json:"CustomTag,omitempty" bson:"CustomTag,omitempty"`
	GrabTag               *int32         `protobuf:"varint,63,opt,name=GrabTag" json:"GrabTag,omitempty" bson:"GrabTag,omitempty"`
	Token                 *string        `protobuf:"bytes,64,opt,name=Token" json:"Token,omitempty" bson:"Token,omitempty"`
	PayPassword           *string        `protobuf:"bytes,65,opt,name=PayPassword" json:"PayPassword,omitempty" bson:"PayPassword,omitempty"`
	Version               *string        `protobuf:"bytes,66,opt,name=Version" json:"Version,omitempty" bson:"Version,omitempty"`
	Brand                 *string        `protobuf:"bytes,67,opt,name=Brand" json:"Brand,omitempty" bson:"Brand,omitempty"`
	AttenList             []int64        `protobuf:"varint,68,rep,name=AttenList" json:"AttenList,omitempty" bson:"AttenList,omitempty"`
	DynamicList           []int64        `protobuf:"varint,69,rep,name=DynamicList" json:"DynamicList,omitempty" bson:"DynamicList,omitempty"`
	Zan                   *int64         `protobuf:"varint,70,opt,name=Zan" json:"Zan,omitempty" bson:"Zan,omitempty"`
	FansList              []int64        `protobuf:"varint,71,rep,name=FansList" json:"FansList,omitempty" bson:"FansList,omitempty"`
	RegType               *int32         `protobuf:"varint,72,opt,name=RegType" json:"-" bson:"-"`
	VerifiedTime          *int64         `protobuf:"varint,73,opt,name=VerifiedTime" json:"VerifiedTime,omitempty" bson:"VerifiedTime,omitempty"`
	Coin                  *int64         `protobuf:"varint,74,opt,name=Coin" json:"Coin,omitempty" bson:"Coin,omitempty"`
	CheckNum              *int64         `protobuf:"varint,75,opt,name=CheckNum" json:"CheckNum,omitempty" bson:"CheckNum,omitempty"`
	AreaCode              *string        `protobuf:"bytes,76,opt,name=AreaCode" json:"AreaCode,omitempty" bson:"AreaCode,omitempty"`
	BackgroundImageURL    *string        `protobuf:"bytes,77,opt,name=BackgroundImageURL" json:"BackgroundImageURL,omitempty" bson:"BackgroundImageURL,omitempty"`
	IsBrowse2Square       *bool          `protobuf:"varint,78,opt,name=IsBrowse2Square" json:"IsBrowse2Square,omitempty" bson:"IsBrowse2Square,omitempty"`
	ApkCode               *int32         `protobuf:"varint,79,opt,name=ApkCode" json:"ApkCode,omitempty" bson:"ApkCode,omitempty"`
	FirstAddSquareDynamic *bool          `protobuf:"varint,80,opt,name=FirstAddSquareDynamic" json:"FirstAddSquareDynamic,omitempty" bson:"FirstAddSquareDynamic,omitempty"`
	Points1               *GeoJson       `protobuf:"bytes,81,opt,name=Points1" json:"Points1,omitempty" bson:"Points1,omitempty"`
	//	repeated double Points = 81; // 当前玩家坐标的经纬度点.
	IsCheckChatLog       *bool    `protobuf:"varint,82,opt,name=IsCheckChatLog" json:"IsCheckChatLog,omitempty" bson:"IsCheckChatLog,omitempty"`
	Distance             *float64 `protobuf:"fixed64,83,opt,name=Distance" json:"Distance,omitempty" bson:"Distance,omitempty"`
	BCoin                *int64   `protobuf:"varint,84,opt,name=BCoin" json:"BCoin,omitempty" bson:"BCoin,omitempty"`
	NearSort             *float64 `protobuf:"fixed64,85,opt,name=NearSort" json:"-" bson:"-"`
	OnlineStatus         *int32   `protobuf:"varint,86,opt,name=OnlineStatus" json:"OnlineStatus,omitempty" bson:"OnlineStatus,omitempty"`
	YoungPassWord        *string  `protobuf:"bytes,87,opt,name=YoungPassWord" json:"YoungPassWord,omitempty" bson:"YoungPassWord,omitempty"`
	IsLoadedAllSessions  *bool    `protobuf:"varint,88,opt,name=IsLoadedAllSessions" json:"IsLoadedAllSessions,omitempty" bson:"IsLoadedAllSessions,omitempty"`
	IsCanRoam            *bool    `protobuf:"varint,89,opt,name=IsCanRoam" json:"IsCanRoam,omitempty" bson:"IsCanRoam,omitempty"`
	VCZanNum             *int64   `protobuf:"varint,90,opt,name=VCZanNum" json:"VCZanNum,omitempty" bson:"VCZanNum,omitempty"`
	BgImageUrl           *string  `protobuf:"bytes,91,opt,name=BgImageUrl" json:"BgImageUrl,omitempty" bson:"BgImageUrl,omitempty"`
	MixId                *int64   `protobuf:"varint,92,opt,name=MixId" json:"MixId,omitempty" bson:"MixId,omitempty"`
	PersonalityTags      []int32  `protobuf:"varint,93,rep,name=PersonalityTags" json:"PersonalityTags,omitempty" bson:"PersonalityTags,omitempty"`
	Constellation        *int32   `protobuf:"varint,94,opt,name=Constellation" json:"Constellation,omitempty" bson:"Constellation,omitempty"`
	BsVCZanNum           *int64   `protobuf:"varint,95,opt,name=BsVCZanNum" json:"BsVCZanNum,omitempty" bson:"BsVCZanNum,omitempty"`
	ReadLoveMeLogTime    *int64   `protobuf:"varint,96,opt,name=ReadLoveMeLogTime" json:"ReadLoveMeLogTime,omitempty" bson:"ReadLoveMeLogTime,omitempty"`
	ConstellationTime    *int64   `protobuf:"varint,97,opt,name=ConstellationTime" json:"ConstellationTime,omitempty" bson:"ConstellationTime,omitempty"`
	ESportCoin           *int64   `protobuf:"varint,98,opt,name=ESportCoin" json:"ESportCoin,omitempty" bson:"ESportCoin,omitempty"`
	Operator             *string  `protobuf:"bytes,99,opt,name=Operator" json:"Operator,omitempty" bson:"Operator,omitempty"`
	BanOverTime          *int64   `protobuf:"varint,100,opt,name=BanOverTime" json:"BanOverTime,omitempty" bson:"BanOverTime,omitempty"`
	Diamond              *int64   `protobuf:"varint,500,opt,name=Diamond" json:"Diamond,omitempty" bson:"Diamond,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerBase) Reset()         { *m = PlayerBase{} }
func (m *PlayerBase) String() string { return proto.CompactTextString(m) }
func (*PlayerBase) ProtoMessage()    {}
func (*PlayerBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ba9588a1ccdcea, []int{5}
}
func (m *PlayerBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerBase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerBase.Merge(m, src)
}
func (m *PlayerBase) XXX_Size() int {
	return m.Size()
}
func (m *PlayerBase) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerBase.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerBase proto.InternalMessageInfo

func (m *PlayerBase) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerBase) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *PlayerBase) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *PlayerBase) GetHeadIcon() string {
	if m != nil && m.HeadIcon != nil {
		return *m.HeadIcon
	}
	return ""
}

func (m *PlayerBase) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *PlayerBase) GetGold() int64 {
	if m != nil && m.Gold != nil {
		return *m.Gold
	}
	return 0
}

func (m *PlayerBase) GetIsRobot() bool {
	if m != nil && m.IsRobot != nil {
		return *m.IsRobot
	}
	return false
}

func (m *PlayerBase) GetLastOnLineTime() int64 {
	if m != nil && m.LastOnLineTime != nil {
		return *m.LastOnLineTime
	}
	return 0
}

func (m *PlayerBase) GetPhoto() []string {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *PlayerBase) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

func (m *PlayerBase) GetPeopleId() string {
	if m != nil && m.PeopleId != nil {
		return *m.PeopleId
	}
	return ""
}

func (m *PlayerBase) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *PlayerBase) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *PlayerBase) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PlayerBase) GetTeamIds() []int64 {
	if m != nil {
		return m.TeamIds
	}
	return nil
}

func (m *PlayerBase) GetIsOnline() bool {
	if m != nil && m.IsOnline != nil {
		return *m.IsOnline
	}
	return false
}

func (m *PlayerBase) GetBankInfo() []*BankInfo {
	if m != nil {
		return m.BankInfo
	}
	return nil
}

func (m *PlayerBase) GetRealName() string {
	if m != nil && m.RealName != nil {
		return *m.RealName
	}
	return ""
}

func (m *PlayerBase) GetSignature() string {
	if m != nil && m.Signature != nil {
		return *m.Signature
	}
	return ""
}

func (m *PlayerBase) GetProvice() string {
	if m != nil && m.Provice != nil {
		return *m.Provice
	}
	return ""
}

func (m *PlayerBase) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

func (m *PlayerBase) GetArea() string {
	if m != nil && m.Area != nil {
		return *m.Area
	}
	return ""
}

func (m *PlayerBase) GetIsRecommend() bool {
	if m != nil && m.IsRecommend != nil {
		return *m.IsRecommend
	}
	return false
}

func (m *PlayerBase) GetPlayerSetting() *PlayerSetting {
	if m != nil {
		return m.PlayerSetting
	}
	return nil
}

func (m *PlayerBase) GetBlackList() []int64 {
	if m != nil {
		return m.BlackList
	}
	return nil
}

func (m *PlayerBase) GetLastLogOutTime() int64 {
	if m != nil && m.LastLogOutTime != nil {
		return *m.LastLogOutTime
	}
	return 0
}

func (m *PlayerBase) GetLoginTimes() int32 {
	if m != nil && m.LoginTimes != nil {
		return *m.LoginTimes
	}
	return 0
}

func (m *PlayerBase) GetOnlineTime() int64 {
	if m != nil && m.OnlineTime != nil {
		return *m.OnlineTime
	}
	return 0
}

func (m *PlayerBase) GetX() float64 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *PlayerBase) GetY() float64 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *PlayerBase) GetDeviceType() int32 {
	if m != nil && m.DeviceType != nil {
		return *m.DeviceType
	}
	return 0
}

func (m *PlayerBase) GetIsNearBy() bool {
	if m != nil && m.IsNearBy != nil {
		return *m.IsNearBy
	}
	return false
}

func (m *PlayerBase) GetChannel() string {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return ""
}

func (m *PlayerBase) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *PlayerBase) GetLastAssistantTime() int64 {
	if m != nil && m.LastAssistantTime != nil {
		return *m.LastAssistantTime
	}
	return 0
}

func (m *PlayerBase) GetWXOpenId() string {
	if m != nil && m.WXOpenId != nil {
		return *m.WXOpenId
	}
	return ""
}

func (m *PlayerBase) GetWXSessionKey() string {
	if m != nil && m.WXSessionKey != nil {
		return *m.WXSessionKey
	}
	return ""
}

func (m *PlayerBase) GetWXUnionid() string {
	if m != nil && m.WXUnionid != nil {
		return *m.WXUnionid
	}
	return ""
}

func (m *PlayerBase) GetClearLocalLogTime() int64 {
	if m != nil && m.ClearLocalLogTime != nil {
		return *m.ClearLocalLogTime
	}
	return 0
}

func (m *PlayerBase) GetComplaintTime() int64 {
	if m != nil && m.ComplaintTime != nil {
		return *m.ComplaintTime
	}
	return 0
}

func (m *PlayerBase) GetIsVisitor() bool {
	if m != nil && m.IsVisitor != nil {
		return *m.IsVisitor
	}
	return false
}

func (m *PlayerBase) GetCollectInfo() []*CollectInfo {
	if m != nil {
		return m.CollectInfo
	}
	return nil
}

func (m *PlayerBase) GetSid() int32 {
	if m != nil && m.Sid != nil {
		return *m.Sid
	}
	return 0
}

func (m *PlayerBase) GetTodayOnlineTime() int64 {
	if m != nil && m.TodayOnlineTime != nil {
		return *m.TodayOnlineTime
	}
	return 0
}

func (m *PlayerBase) GetCreateIP() string {
	if m != nil && m.CreateIP != nil {
		return *m.CreateIP
	}
	return ""
}

func (m *PlayerBase) GetLastLoginIP() string {
	if m != nil && m.LastLoginIP != nil {
		return *m.LastLoginIP
	}
	return ""
}

func (m *PlayerBase) GetApiUrl() string {
	if m != nil && m.ApiUrl != nil {
		return *m.ApiUrl
	}
	return ""
}

func (m *PlayerBase) GetSecretKey() string {
	if m != nil && m.SecretKey != nil {
		return *m.SecretKey
	}
	return ""
}

func (m *PlayerBase) GetFreeTimes() int32 {
	if m != nil && m.FreeTimes != nil {
		return *m.FreeTimes
	}
	return 0
}

func (m *PlayerBase) GetAutoLoginTime() int64 {
	if m != nil && m.AutoLoginTime != nil {
		return *m.AutoLoginTime
	}
	return 0
}

func (m *PlayerBase) GetAutoLoginToken() string {
	if m != nil && m.AutoLoginToken != nil {
		return *m.AutoLoginToken
	}
	return ""
}

func (m *PlayerBase) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *PlayerBase) GetIsFriend() int32 {
	if m != nil && m.IsFriend != nil {
		return *m.IsFriend
	}
	return 0
}

func (m *PlayerBase) GetDeviceCode() string {
	if m != nil && m.DeviceCode != nil {
		return *m.DeviceCode
	}
	return ""
}

func (m *PlayerBase) GetCallInfo() *CallInfo {
	if m != nil {
		return m.CallInfo
	}
	return nil
}

func (m *PlayerBase) GetLabel() []int32 {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *PlayerBase) GetIsRecommendOver() bool {
	if m != nil && m.IsRecommendOver != nil {
		return *m.IsRecommendOver
	}
	return false
}

func (m *PlayerBase) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

func (m *PlayerBase) GetCustomTag() []int32 {
	if m != nil {
		return m.CustomTag
	}
	return nil
}

func (m *PlayerBase) GetGrabTag() int32 {
	if m != nil && m.GrabTag != nil {
		return *m.GrabTag
	}
	return 0
}

func (m *PlayerBase) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *PlayerBase) GetPayPassword() string {
	if m != nil && m.PayPassword != nil {
		return *m.PayPassword
	}
	return ""
}

func (m *PlayerBase) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *PlayerBase) GetBrand() string {
	if m != nil && m.Brand != nil {
		return *m.Brand
	}
	return ""
}

func (m *PlayerBase) GetAttenList() []int64 {
	if m != nil {
		return m.AttenList
	}
	return nil
}

func (m *PlayerBase) GetDynamicList() []int64 {
	if m != nil {
		return m.DynamicList
	}
	return nil
}

func (m *PlayerBase) GetZan() int64 {
	if m != nil && m.Zan != nil {
		return *m.Zan
	}
	return 0
}

func (m *PlayerBase) GetFansList() []int64 {
	if m != nil {
		return m.FansList
	}
	return nil
}

func (m *PlayerBase) GetRegType() int32 {
	if m != nil && m.RegType != nil {
		return *m.RegType
	}
	return 0
}

func (m *PlayerBase) GetVerifiedTime() int64 {
	if m != nil && m.VerifiedTime != nil {
		return *m.VerifiedTime
	}
	return 0
}

func (m *PlayerBase) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *PlayerBase) GetCheckNum() int64 {
	if m != nil && m.CheckNum != nil {
		return *m.CheckNum
	}
	return 0
}

func (m *PlayerBase) GetAreaCode() string {
	if m != nil && m.AreaCode != nil {
		return *m.AreaCode
	}
	return ""
}

func (m *PlayerBase) GetBackgroundImageURL() string {
	if m != nil && m.BackgroundImageURL != nil {
		return *m.BackgroundImageURL
	}
	return ""
}

func (m *PlayerBase) GetIsBrowse2Square() bool {
	if m != nil && m.IsBrowse2Square != nil {
		return *m.IsBrowse2Square
	}
	return false
}

func (m *PlayerBase) GetApkCode() int32 {
	if m != nil && m.ApkCode != nil {
		return *m.ApkCode
	}
	return 0
}

func (m *PlayerBase) GetFirstAddSquareDynamic() bool {
	if m != nil && m.FirstAddSquareDynamic != nil {
		return *m.FirstAddSquareDynamic
	}
	return false
}

func (m *PlayerBase) GetPoints1() *GeoJson {
	if m != nil {
		return m.Points1
	}
	return nil
}

func (m *PlayerBase) GetIsCheckChatLog() bool {
	if m != nil && m.IsCheckChatLog != nil {
		return *m.IsCheckChatLog
	}
	return false
}

func (m *PlayerBase) GetDistance() float64 {
	if m != nil && m.Distance != nil {
		return *m.Distance
	}
	return 0
}

func (m *PlayerBase) GetBCoin() int64 {
	if m != nil && m.BCoin != nil {
		return *m.BCoin
	}
	return 0
}

func (m *PlayerBase) GetNearSort() float64 {
	if m != nil && m.NearSort != nil {
		return *m.NearSort
	}
	return 0
}

func (m *PlayerBase) GetOnlineStatus() int32 {
	if m != nil && m.OnlineStatus != nil {
		return *m.OnlineStatus
	}
	return 0
}

func (m *PlayerBase) GetYoungPassWord() string {
	if m != nil && m.YoungPassWord != nil {
		return *m.YoungPassWord
	}
	return ""
}

func (m *PlayerBase) GetIsLoadedAllSessions() bool {
	if m != nil && m.IsLoadedAllSessions != nil {
		return *m.IsLoadedAllSessions
	}
	return false
}

func (m *PlayerBase) GetIsCanRoam() bool {
	if m != nil && m.IsCanRoam != nil {
		return *m.IsCanRoam
	}
	return false
}

func (m *PlayerBase) GetVCZanNum() int64 {
	if m != nil && m.VCZanNum != nil {
		return *m.VCZanNum
	}
	return 0
}

func (m *PlayerBase) GetBgImageUrl() string {
	if m != nil && m.BgImageUrl != nil {
		return *m.BgImageUrl
	}
	return ""
}

func (m *PlayerBase) GetMixId() int64 {
	if m != nil && m.MixId != nil {
		return *m.MixId
	}
	return 0
}

func (m *PlayerBase) GetPersonalityTags() []int32 {
	if m != nil {
		return m.PersonalityTags
	}
	return nil
}

func (m *PlayerBase) GetConstellation() int32 {
	if m != nil && m.Constellation != nil {
		return *m.Constellation
	}
	return 0
}

func (m *PlayerBase) GetBsVCZanNum() int64 {
	if m != nil && m.BsVCZanNum != nil {
		return *m.BsVCZanNum
	}
	return 0
}

func (m *PlayerBase) GetReadLoveMeLogTime() int64 {
	if m != nil && m.ReadLoveMeLogTime != nil {
		return *m.ReadLoveMeLogTime
	}
	return 0
}

func (m *PlayerBase) GetConstellationTime() int64 {
	if m != nil && m.ConstellationTime != nil {
		return *m.ConstellationTime
	}
	return 0
}

func (m *PlayerBase) GetESportCoin() int64 {
	if m != nil && m.ESportCoin != nil {
		return *m.ESportCoin
	}
	return 0
}

func (m *PlayerBase) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *PlayerBase) GetBanOverTime() int64 {
	if m != nil && m.BanOverTime != nil {
		return *m.BanOverTime
	}
	return 0
}

func (m *PlayerBase) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

type GeoJson struct {
	Type                 *string   `protobuf:"bytes,1,opt,name=type" json:"type,omitempty" bson:"type,omitempty"`
	Coordinates          []float64 `protobuf:"fixed64,2,rep,name=coordinates" json:"coordinates,omitempty" bson:"coordinates,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" bson:"-"`
	XXX_unrecognized     []byte    `json:"-" bson:"-"`
	XXX_sizecache        int32     `json:"-" bson:"-"`
}

func (m *GeoJson) Reset()         { *m = GeoJson{} }
func (m *GeoJson) String() string { return proto.CompactTextString(m) }
func (*GeoJson) ProtoMessage()    {}
func (*GeoJson) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ba9588a1ccdcea, []int{6}
}
func (m *GeoJson) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeoJson) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GeoJson.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GeoJson) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoJson.Merge(m, src)
}
func (m *GeoJson) XXX_Size() int {
	return m.Size()
}
func (m *GeoJson) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoJson.DiscardUnknown(m)
}

var xxx_messageInfo_GeoJson proto.InternalMessageInfo

func (m *GeoJson) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *GeoJson) GetCoordinates() []float64 {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

type CallInfo struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	SMsg                 *string  `protobuf:"bytes,2,opt,name=sMsg" json:"sMsg,omitempty" bson:"sMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *CallInfo) Reset()         { *m = CallInfo{} }
func (m *CallInfo) String() string { return proto.CompactTextString(m) }
func (*CallInfo) ProtoMessage()    {}
func (*CallInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ba9588a1ccdcea, []int{7}
}
func (m *CallInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallInfo.Merge(m, src)
}
func (m *CallInfo) XXX_Size() int {
	return m.Size()
}
func (m *CallInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CallInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CallInfo proto.InternalMessageInfo

func (m *CallInfo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *CallInfo) GetSMsg() string {
	if m != nil && m.SMsg != nil {
		return *m.SMsg
	}
	return ""
}

type FriendBase struct {
	Friends              []*FriendInfo `protobuf:"bytes,2,rep,name=Friends" json:"Friends,omitempty" bson:"Friends,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-" bson:"-"`
	XXX_unrecognized     []byte        `json:"-" bson:"-"`
	XXX_sizecache        int32         `json:"-" bson:"-"`
}

func (m *FriendBase) Reset()         { *m = FriendBase{} }
func (m *FriendBase) String() string { return proto.CompactTextString(m) }
func (*FriendBase) ProtoMessage()    {}
func (*FriendBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ba9588a1ccdcea, []int{8}
}
func (m *FriendBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendBase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendBase.Merge(m, src)
}
func (m *FriendBase) XXX_Size() int {
	return m.Size()
}
func (m *FriendBase) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendBase.DiscardUnknown(m)
}

var xxx_messageInfo_FriendBase proto.InternalMessageInfo

func (m *FriendBase) GetFriends() []*FriendInfo {
	if m != nil {
		return m.Friends
	}
	return nil
}

type FriendInfo struct {
	PlayerId             *int64         `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	ReName               *string        `protobuf:"bytes,2,opt,name=ReName" json:"ReName,omitempty" bson:"ReName,omitempty"`
	Setting              *FriendSetting `protobuf:"bytes,3,opt,name=Setting" json:"Setting,omitempty" bson:"Setting,omitempty"`
	Type                 *int32         `protobuf:"varint,4,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	CreateTime           *int64         `protobuf:"varint,5,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-" bson:"-"`
	XXX_unrecognized     []byte         `json:"-" bson:"-"`
	XXX_sizecache        int32          `json:"-" bson:"-"`
}

func (m *FriendInfo) Reset()         { *m = FriendInfo{} }
func (m *FriendInfo) String() string { return proto.CompactTextString(m) }
func (*FriendInfo) ProtoMessage()    {}
func (*FriendInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ba9588a1ccdcea, []int{9}
}
func (m *FriendInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendInfo.Merge(m, src)
}
func (m *FriendInfo) XXX_Size() int {
	return m.Size()
}
func (m *FriendInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FriendInfo proto.InternalMessageInfo

func (m *FriendInfo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *FriendInfo) GetReName() string {
	if m != nil && m.ReName != nil {
		return *m.ReName
	}
	return ""
}

func (m *FriendInfo) GetSetting() *FriendSetting {
	if m != nil {
		return m.Setting
	}
	return nil
}

func (m *FriendInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *FriendInfo) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

type FriendSetting struct {
	IsTopChat            *bool    `protobuf:"varint,1,opt,name=IsTopChat" json:"IsTopChat,omitempty" bson:"IsTopChat,omitempty"`
	IsNoDisturb          *bool    `protobuf:"varint,2,opt,name=IsNoDisturb" json:"IsNoDisturb,omitempty" bson:"IsNoDisturb,omitempty"`
	IsAfterReadClear     *bool    `protobuf:"varint,3,opt,name=IsAfterReadClear" json:"IsAfterReadClear,omitempty" bson:"IsAfterReadClear,omitempty"`
	IsScreenShotNotify   *bool    `protobuf:"varint,4,opt,name=IsScreenShotNotify" json:"IsScreenShotNotify,omitempty" bson:"IsScreenShotNotify,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *FriendSetting) Reset()         { *m = FriendSetting{} }
func (m *FriendSetting) String() string { return proto.CompactTextString(m) }
func (*FriendSetting) ProtoMessage()    {}
func (*FriendSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ba9588a1ccdcea, []int{10}
}
func (m *FriendSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendSetting.Merge(m, src)
}
func (m *FriendSetting) XXX_Size() int {
	return m.Size()
}
func (m *FriendSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendSetting.DiscardUnknown(m)
}

var xxx_messageInfo_FriendSetting proto.InternalMessageInfo

func (m *FriendSetting) GetIsTopChat() bool {
	if m != nil && m.IsTopChat != nil {
		return *m.IsTopChat
	}
	return false
}

func (m *FriendSetting) GetIsNoDisturb() bool {
	if m != nil && m.IsNoDisturb != nil {
		return *m.IsNoDisturb
	}
	return false
}

func (m *FriendSetting) GetIsAfterReadClear() bool {
	if m != nil && m.IsAfterReadClear != nil {
		return *m.IsAfterReadClear
	}
	return false
}

func (m *FriendSetting) GetIsScreenShotNotify() bool {
	if m != nil && m.IsScreenShotNotify != nil {
		return *m.IsScreenShotNotify
	}
	return false
}

type AllAddPlayerMsg struct {
	AddPlayerRequest     []*AddPlayerRequest `protobuf:"bytes,1,rep,name=AddPlayerRequest" json:"AddPlayerRequest,omitempty" bson:"AddPlayerRequest,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-" bson:"-"`
	XXX_unrecognized     []byte              `json:"-" bson:"-"`
	XXX_sizecache        int32               `json:"-" bson:"-"`
}

func (m *AllAddPlayerMsg) Reset()         { *m = AllAddPlayerMsg{} }
func (m *AllAddPlayerMsg) String() string { return proto.CompactTextString(m) }
func (*AllAddPlayerMsg) ProtoMessage()    {}
func (*AllAddPlayerMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ba9588a1ccdcea, []int{11}
}
func (m *AllAddPlayerMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllAddPlayerMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllAddPlayerMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllAddPlayerMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllAddPlayerMsg.Merge(m, src)
}
func (m *AllAddPlayerMsg) XXX_Size() int {
	return m.Size()
}
func (m *AllAddPlayerMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_AllAddPlayerMsg.DiscardUnknown(m)
}

var xxx_messageInfo_AllAddPlayerMsg proto.InternalMessageInfo

func (m *AllAddPlayerMsg) GetAddPlayerRequest() []*AddPlayerRequest {
	if m != nil {
		return m.AddPlayerRequest
	}
	return nil
}

type AddPlayerRequest struct {
	PlayerId             *int64          `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Time                 *int64          `protobuf:"varint,2,opt,name=Time" json:"Time,omitempty" bson:"Time,omitempty"`
	Phone                *string         `protobuf:"bytes,3,opt,name=Phone" json:"Phone,omitempty" bson:"Phone,omitempty"`
	Text                 *string         `protobuf:"bytes,4,opt,name=Text" json:"Text,omitempty" bson:"Text,omitempty"`
	Type                 *AddFriend_Type `protobuf:"varint,5,opt,name=Type,enum=share_message.AddFriend_Type" json:"Type,omitempty" bson:"Type,omitempty"`
	Result               *int32          `protobuf:"varint,6,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	Id                   *int64          `protobuf:"varint,7,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	IsRead               *bool           `protobuf:"varint,8,opt,name=IsRead" json:"IsRead,omitempty" bson:"IsRead,omitempty"`
	NickName             *string         `protobuf:"bytes,9,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	HeadIcon             *string         `protobuf:"bytes,10,opt,name=HeadIcon" json:"HeadIcon,omitempty" bson:"HeadIcon,omitempty"`
	Account              *string         `protobuf:"bytes,11,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	Signature            *string         `protobuf:"bytes,12,opt,name=Signature" json:"Signature,omitempty" bson:"Signature,omitempty"`
	Photo                *string         `protobuf:"bytes,13,opt,name=Photo" json:"Photo,omitempty" bson:"Photo,omitempty"`
	Sex                  *int32          `protobuf:"varint,14,opt,name=Sex" json:"Sex,omitempty" bson:"Sex,omitempty"`
	Types                *int32          `protobuf:"varint,15,opt,name=Types" json:"Types,omitempty" bson:"Types,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-" bson:"-"`
	XXX_unrecognized     []byte          `json:"-" bson:"-"`
	XXX_sizecache        int32           `json:"-" bson:"-"`
}

func (m *AddPlayerRequest) Reset()         { *m = AddPlayerRequest{} }
func (m *AddPlayerRequest) String() string { return proto.CompactTextString(m) }
func (*AddPlayerRequest) ProtoMessage()    {}
func (*AddPlayerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ba9588a1ccdcea, []int{12}
}
func (m *AddPlayerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPlayerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPlayerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPlayerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPlayerRequest.Merge(m, src)
}
func (m *AddPlayerRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddPlayerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPlayerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddPlayerRequest proto.InternalMessageInfo

func (m *AddPlayerRequest) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *AddPlayerRequest) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *AddPlayerRequest) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *AddPlayerRequest) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

func (m *AddPlayerRequest) GetType() AddFriend_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return AddFriend_Type_ACCOUNT
}

func (m *AddPlayerRequest) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *AddPlayerRequest) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *AddPlayerRequest) GetIsRead() bool {
	if m != nil && m.IsRead != nil {
		return *m.IsRead
	}
	return false
}

func (m *AddPlayerRequest) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *AddPlayerRequest) GetHeadIcon() string {
	if m != nil && m.HeadIcon != nil {
		return *m.HeadIcon
	}
	return ""
}

func (m *AddPlayerRequest) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *AddPlayerRequest) GetSignature() string {
	if m != nil && m.Signature != nil {
		return *m.Signature
	}
	return ""
}

func (m *AddPlayerRequest) GetPhoto() string {
	if m != nil && m.Photo != nil {
		return *m.Photo
	}
	return ""
}

func (m *AddPlayerRequest) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *AddPlayerRequest) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

//玩家推文表  player_tweets
type PlayerTweets struct {
	PlayerId             *int64   `protobuf:"varint,1,req,name=PlayerId" json:"_id,omitempty" bson:"_id,omitempty"`
	TweetsIdList         []int64  `protobuf:"varint,2,rep,name=TweetsIdList" json:"TweetsIdList,omitempty" bson:"TweetsIdList,omitempty"`
	CreateTime           *int64   `protobuf:"varint,3,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,4,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerTweets) Reset()         { *m = PlayerTweets{} }
func (m *PlayerTweets) String() string { return proto.CompactTextString(m) }
func (*PlayerTweets) ProtoMessage()    {}
func (*PlayerTweets) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ba9588a1ccdcea, []int{13}
}
func (m *PlayerTweets) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerTweets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerTweets.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerTweets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerTweets.Merge(m, src)
}
func (m *PlayerTweets) XXX_Size() int {
	return m.Size()
}
func (m *PlayerTweets) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerTweets.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerTweets proto.InternalMessageInfo

func (m *PlayerTweets) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerTweets) GetTweetsIdList() []int64 {
	if m != nil {
		return m.TweetsIdList
	}
	return nil
}

func (m *PlayerTweets) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PlayerTweets) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

//玩家自定义表情 player_emoticon
type PlayerEmoticon struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	TypeId               *int32   `protobuf:"varint,3,opt,name=TypeId" json:"TypeId,omitempty" bson:"TypeId,omitempty"`
	Data                 *string  `protobuf:"bytes,4,opt,name=Data" json:"Data,omitempty" bson:"Data,omitempty"`
	IsSave               *bool    `protobuf:"varint,5,opt,name=IsSave" json:"IsSave,omitempty" bson:"IsSave,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerEmoticon) Reset()         { *m = PlayerEmoticon{} }
func (m *PlayerEmoticon) String() string { return proto.CompactTextString(m) }
func (*PlayerEmoticon) ProtoMessage()    {}
func (*PlayerEmoticon) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ba9588a1ccdcea, []int{14}
}
func (m *PlayerEmoticon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerEmoticon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerEmoticon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerEmoticon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerEmoticon.Merge(m, src)
}
func (m *PlayerEmoticon) XXX_Size() int {
	return m.Size()
}
func (m *PlayerEmoticon) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerEmoticon.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerEmoticon proto.InternalMessageInfo

func (m *PlayerEmoticon) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerEmoticon) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerEmoticon) GetTypeId() int32 {
	if m != nil && m.TypeId != nil {
		return *m.TypeId
	}
	return 0
}

func (m *PlayerEmoticon) GetData() string {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return ""
}

func (m *PlayerEmoticon) GetIsSave() bool {
	if m != nil && m.IsSave != nil {
		return *m.IsSave
	}
	return false
}

//玩家装备表 player_equipment
type PlayerEquipment struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"_id,omitempty" bson:"_id,omitempty"`
	GJ                   *int64   `protobuf:"varint,2,opt,name=GJ" json:"GJ,omitempty" bson:"GJ,omitempty"`
	QP                   *int64   `protobuf:"varint,3,opt,name=QP" json:"QP,omitempty" bson:"QP,omitempty"`
	MP                   *int64   `protobuf:"varint,4,opt,name=MP" json:"MP,omitempty" bson:"MP,omitempty"`
	QTX                  *int64   `protobuf:"varint,5,opt,name=QTX" json:"QTX,omitempty" bson:"QTX,omitempty"`
	MZBS                 *int64   `protobuf:"varint,6,opt,name=MZBS" json:"MZBS,omitempty" bson:"MZBS,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerEquipment) Reset()         { *m = PlayerEquipment{} }
func (m *PlayerEquipment) String() string { return proto.CompactTextString(m) }
func (*PlayerEquipment) ProtoMessage()    {}
func (*PlayerEquipment) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ba9588a1ccdcea, []int{15}
}
func (m *PlayerEquipment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerEquipment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerEquipment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerEquipment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerEquipment.Merge(m, src)
}
func (m *PlayerEquipment) XXX_Size() int {
	return m.Size()
}
func (m *PlayerEquipment) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerEquipment.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerEquipment proto.InternalMessageInfo

func (m *PlayerEquipment) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerEquipment) GetGJ() int64 {
	if m != nil && m.GJ != nil {
		return *m.GJ
	}
	return 0
}

func (m *PlayerEquipment) GetQP() int64 {
	if m != nil && m.QP != nil {
		return *m.QP
	}
	return 0
}

func (m *PlayerEquipment) GetMP() int64 {
	if m != nil && m.MP != nil {
		return *m.MP
	}
	return 0
}

func (m *PlayerEquipment) GetQTX() int64 {
	if m != nil && m.QTX != nil {
		return *m.QTX
	}
	return 0
}

func (m *PlayerEquipment) GetMZBS() int64 {
	if m != nil && m.MZBS != nil {
		return *m.MZBS
	}
	return 0
}

//玩家绑定硬币获得记录表 player_bcoin_log
type PlayerBCoinLog struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Way                  *int32   `protobuf:"varint,3,opt,name=Way" json:"Way,omitempty" bson:"Way,omitempty"`
	OverTime             *int64   `protobuf:"varint,4,opt,name=OverTime" json:"OverTime,omitempty" bson:"OverTime,omitempty"`
	Status               *int32   `protobuf:"varint,5,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	CreateTime           *int64   `protobuf:"varint,6,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	BCoin                *int64   `protobuf:"varint,7,opt,name=BCoin" json:"BCoin,omitempty" bson:"BCoin,omitempty"`
	CurBCoin             *int64   `protobuf:"varint,8,opt,name=CurBCoin" json:"CurBCoin,omitempty" bson:"CurBCoin,omitempty"`
	IsSend               *bool    `protobuf:"varint,9,opt,name=IsSend" json:"IsSend,omitempty" bson:"IsSend,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerBCoinLog) Reset()         { *m = PlayerBCoinLog{} }
func (m *PlayerBCoinLog) String() string { return proto.CompactTextString(m) }
func (*PlayerBCoinLog) ProtoMessage()    {}
func (*PlayerBCoinLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ba9588a1ccdcea, []int{16}
}
func (m *PlayerBCoinLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerBCoinLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerBCoinLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerBCoinLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerBCoinLog.Merge(m, src)
}
func (m *PlayerBCoinLog) XXX_Size() int {
	return m.Size()
}
func (m *PlayerBCoinLog) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerBCoinLog.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerBCoinLog proto.InternalMessageInfo

func (m *PlayerBCoinLog) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerBCoinLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerBCoinLog) GetWay() int32 {
	if m != nil && m.Way != nil {
		return *m.Way
	}
	return 0
}

func (m *PlayerBCoinLog) GetOverTime() int64 {
	if m != nil && m.OverTime != nil {
		return *m.OverTime
	}
	return 0
}

func (m *PlayerBCoinLog) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *PlayerBCoinLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PlayerBCoinLog) GetBCoin() int64 {
	if m != nil && m.BCoin != nil {
		return *m.BCoin
	}
	return 0
}

func (m *PlayerBCoinLog) GetCurBCoin() int64 {
	if m != nil && m.CurBCoin != nil {
		return *m.CurBCoin
	}
	return 0
}

func (m *PlayerBCoinLog) GetIsSend() bool {
	if m != nil && m.IsSend != nil {
		return *m.IsSend
	}
	return false
}

//玩家拥有的会话列表 player_chat_session
type PlayerChatSession struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"_id,omitempty" bson:"_id,omitempty"`
	SessionIds           []string `protobuf:"bytes,2,rep,name=SessionIds" json:"SessionIds,omitempty" bson:"SessionIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerChatSession) Reset()         { *m = PlayerChatSession{} }
func (m *PlayerChatSession) String() string { return proto.CompactTextString(m) }
func (*PlayerChatSession) ProtoMessage()    {}
func (*PlayerChatSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ba9588a1ccdcea, []int{17}
}
func (m *PlayerChatSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerChatSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerChatSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerChatSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerChatSession.Merge(m, src)
}
func (m *PlayerChatSession) XXX_Size() int {
	return m.Size()
}
func (m *PlayerChatSession) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerChatSession.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerChatSession proto.InternalMessageInfo

func (m *PlayerChatSession) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerChatSession) GetSessionIds() []string {
	if m != nil {
		return m.SessionIds
	}
	return nil
}

func init() {
	proto.RegisterEnum("share_message.AddFriend_Type", AddFriend_Type_name, AddFriend_Type_value)
	proto.RegisterType((*PlayerAccount)(nil), "share_message.PlayerAccount")
	proto.RegisterType((*BankInfo)(nil), "share_message.BankInfo")
	proto.RegisterType((*PlayerSetting)(nil), "share_message.PlayerSetting")
	proto.RegisterType((*CollectInfo)(nil), "share_message.CollectInfo")
	proto.RegisterType((*Collect)(nil), "share_message.Collect")
	proto.RegisterType((*PlayerBase)(nil), "share_message.PlayerBase")
	proto.RegisterType((*GeoJson)(nil), "share_message.GeoJson")
	proto.RegisterType((*CallInfo)(nil), "share_message.CallInfo")
	proto.RegisterType((*FriendBase)(nil), "share_message.FriendBase")
	proto.RegisterType((*FriendInfo)(nil), "share_message.FriendInfo")
	proto.RegisterType((*FriendSetting)(nil), "share_message.FriendSetting")
	proto.RegisterType((*AllAddPlayerMsg)(nil), "share_message.AllAddPlayerMsg")
	proto.RegisterType((*AddPlayerRequest)(nil), "share_message.AddPlayerRequest")
	proto.RegisterType((*PlayerTweets)(nil), "share_message.PlayerTweets")
	proto.RegisterType((*PlayerEmoticon)(nil), "share_message.PlayerEmoticon")
	proto.RegisterType((*PlayerEquipment)(nil), "share_message.PlayerEquipment")
	proto.RegisterType((*PlayerBCoinLog)(nil), "share_message.PlayerBCoinLog")
	proto.RegisterType((*PlayerChatSession)(nil), "share_message.PlayerChatSession")
}

func init() { proto.RegisterFile("table_struct_player_base.proto", fileDescriptor_e5ba9588a1ccdcea) }

var fileDescriptor_e5ba9588a1ccdcea = []byte{
	// 2236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x58, 0xcb, 0x76, 0x1b, 0xb9,
	0xd1, 0x3e, 0xbc, 0x48, 0xa4, 0x8a, 0x94, 0x44, 0xb5, 0x25, 0x0b, 0xf2, 0x8c, 0x6d, 0xfe, 0x9c,
	0x3f, 0xb1, 0xec, 0x19, 0x7b, 0x32, 0x9a, 0x5c, 0x66, 0x72, 0x6f, 0x52, 0xb4, 0xdc, 0x1e, 0x8a,
	0xa4, 0x49, 0xea, 0x62, 0xe7, 0xa2, 0x40, 0xdd, 0x10, 0xd5, 0x47, 0x4d, 0x80, 0x6e, 0x80, 0xb6,
	0xb9, 0xca, 0x4b, 0x64, 0x97, 0x2c, 0xf3, 0x0a, 0x79, 0x87, 0x2c, 0x93, 0x3c, 0xc0, 0x9c, 0x1c,
	0x2f, 0x67, 0x9d, 0x07, 0xc8, 0x41, 0xa1, 0xc1, 0x9b, 0xe5, 0x73, 0x9c, 0x1d, 0x51, 0x40, 0x01,
	0x75, 0xf9, 0xaa, 0xea, 0x6b, 0xc2, 0x1d, 0x45, 0xcf, 0x23, 0x76, 0x26, 0x55, 0x3c, 0xf2, 0xd5,
	0xd9, 0x30, 0xa2, 0x63, 0x16, 0x9f, 0x9d, 0x53, 0xc9, 0x1e, 0x0d, 0x63, 0xa1, 0x84, 0xb3, 0x2a,
	0x2f, 0x69, 0xcc, 0xce, 0x06, 0x4c, 0x4a, 0xda, 0x67, 0xb7, 0x8a, 0xfd, 0xbe, 0x50, 0xb4, 0x6f,
	0x36, 0x2b, 0xff, 0x4a, 0xc1, 0x6a, 0x1b, 0x55, 0x5c, 0xdf, 0x17, 0x23, 0xae, 0x9c, 0x4f, 0x20,
	0x6f, 0x04, 0x5e, 0x40, 0x52, 0xe5, 0xf4, 0x6e, 0xa6, 0xba, 0xf1, 0xdd, 0xb7, 0x77, 0x57, 0xcf,
	0xc2, 0xe0, 0x33, 0x31, 0x08, 0x15, 0x1b, 0x0c, 0xd5, 0xd8, 0x59, 0x87, 0x5c, 0x72, 0x9e, 0xa4,
	0xcb, 0xa9, 0xdd, 0x15, 0x67, 0x15, 0x96, 0xea, 0x03, 0x1a, 0x46, 0x24, 0x83, 0xcb, 0x12, 0xe4,
	0xdb, 0x54, 0xca, 0xd7, 0x22, 0x0e, 0x48, 0x16, 0x25, 0x37, 0xa0, 0xd0, 0xa6, 0xe3, 0x89, 0x70,
	0x19, 0x85, 0x6b, 0xb0, 0xdc, 0x1a, 0x32, 0xee, 0x05, 0x24, 0x87, 0x6b, 0x07, 0xa0, 0x16, 0x33,
	0xaa, 0x58, 0x2f, 0x1c, 0x30, 0x92, 0x2f, 0xa7, 0x76, 0x33, 0xfa, 0x8c, 0x27, 0xab, 0x21, 0x0f,
	0xc8, 0x4a, 0x39, 0xb5, 0x9b, 0xd7, 0x57, 0xbb, 0x31, 0xa3, 0x35, 0x11, 0x30, 0x02, 0xa8, 0xb5,
	0x0e, 0xb9, 0x23, 0x1e, 0x0a, 0x7d, 0x4d, 0x41, 0x0b, 0x2a, 0x7f, 0x49, 0x41, 0xbe, 0x4a, 0xf9,
	0x95, 0xc7, 0x2f, 0x84, 0xd6, 0xc7, 0xdf, 0xda, 0x9b, 0xc4, 0x34, 0xbd, 0x46, 0x7d, 0x63, 0x7b,
	0x11, 0xb2, 0xf8, 0x5e, 0xc6, 0xbe, 0xd7, 0x0d, 0xfb, 0xbc, 0x29, 0x12, 0xc3, 0x93, 0xf3, 0x4d,
	0x3a, 0x60, 0x64, 0x09, 0x25, 0x1b, 0xb0, 0xa2, 0x25, 0xed, 0x4b, 0xc1, 0x59, 0xe2, 0xc8, 0x3a,
	0xe4, 0xda, 0xb1, 0x78, 0x15, 0xfa, 0x2c, 0xf1, 0xa4, 0x08, 0xd9, 0x5a, 0xa8, 0xc6, 0xe8, 0x03,
	0xae, 0xb4, 0xcd, 0xe8, 0xc1, 0x4a, 0xe5, 0x9f, 0x19, 0x1b, 0xf3, 0x2e, 0x53, 0x2a, 0xe4, 0x7d,
	0xe7, 0x26, 0xac, 0x79, 0xb2, 0x4b, 0x2f, 0xd8, 0x24, 0x3e, 0x29, 0xf4, 0x75, 0x13, 0x8a, 0x9e,
	0x6c, 0xb2, 0xd7, 0x87, 0x26, 0x77, 0x68, 0x6f, 0x5e, 0x3f, 0xe6, 0xc9, 0xc3, 0x91, 0x0c, 0x7d,
	0x34, 0x39, 0x11, 0x74, 0x2f, 0xe9, 0x15, 0x43, 0x9b, 0xf3, 0x3a, 0xd8, 0x9e, 0x74, 0x83, 0xe0,
	0x71, 0x1c, 0x32, 0x1e, 0xa0, 0xd9, 0xc9, 0xa9, 0xa9, 0xd1, 0x79, 0xed, 0x87, 0x27, 0x6d, 0x1a,
	0x73, 0x28, 0x72, 0x00, 0x3c, 0xd9, 0x63, 0x74, 0x50, 0xbb, 0xa4, 0x0a, 0x8d, 0xcf, 0x9b, 0x04,
	0x60, 0xb8, 0x56, 0x66, 0xd6, 0x34, 0x0e, 0x30, 0xfc, 0x68, 0xe4, 0x9c, 0xe9, 0x98, 0x03, 0x67,
	0x0b, 0x56, 0x13, 0x97, 0x62, 0xa1, 0x98, 0xaf, 0x48, 0x71, 0x6a, 0x44, 0x4f, 0x8c, 0xfc, 0x4b,
	0xb2, 0x8a, 0x02, 0x3c, 0x97, 0xf8, 0xd7, 0xbd, 0x14, 0xaf, 0xc9, 0xda, 0xd4, 0x73, 0x8d, 0x8d,
	0xee, 0xcb, 0x11, 0x8d, 0x19, 0x59, 0x47, 0xe9, 0x2d, 0x70, 0x8c, 0xf4, 0x05, 0xe5, 0xad, 0xb8,
	0x26, 0x06, 0x03, 0xc6, 0x15, 0x29, 0xe1, 0xde, 0xc7, 0xb0, 0x69, 0xf6, 0x3a, 0xcc, 0x17, 0xaf,
	0xd8, 0x64, 0x77, 0x03, 0x77, 0x77, 0x60, 0xc3, 0xec, 0x1e, 0x8e, 0x5d, 0xa5, 0x18, 0x57, 0xa1,
	0xe0, 0xc4, 0xc1, 0xad, 0x6d, 0x58, 0x9f, 0x2a, 0x6a, 0x9d, 0x80, 0xdc, 0xc0, 0x0d, 0xcc, 0x8a,
	0xde, 0xa8, 0x89, 0x90, 0x77, 0x2f, 0xc5, 0x90, 0x6c, 0x4e, 0x83, 0x54, 0xa5, 0xbc, 0x4b, 0xc7,
	0x4f, 0x42, 0xb2, 0xa5, 0x65, 0x15, 0x0a, 0x85, 0x9a, 0x88, 0x22, 0xe6, 0x2b, 0x04, 0xdd, 0x3d,
	0xc8, 0x25, 0x4b, 0x92, 0x2a, 0x67, 0x76, 0x0b, 0x7b, 0x37, 0x1f, 0xcd, 0x55, 0xe1, 0xa3, 0x64,
	0x57, 0xd7, 0x8d, 0xc7, 0x03, 0xf6, 0x06, 0x53, 0xbb, 0xa4, 0x81, 0x82, 0x40, 0xcb, 0xcc, 0x01,
	0x53, 0xe7, 0x2f, 0x53, 0x09, 0x26, 0x77, 0xe2, 0xc6, 0x78, 0xc8, 0x10, 0x25, 0x4b, 0x3a, 0xa6,
	0x35, 0xc1, 0xb5, 0x53, 0xd7, 0x02, 0xda, 0xde, 0x99, 0xb5, 0x7b, 0xfb, 0x54, 0xd1, 0x04, 0xca,
	0x25, 0xc8, 0x3f, 0x61, 0x34, 0xf0, 0x7c, 0xc1, 0x0d, 0x92, 0x2b, 0x7f, 0x2a, 0x01, 0x18, 0x70,
	0x56, 0xa9, 0x64, 0x1f, 0xd6, 0x0d, 0xb6, 0x67, 0xaa, 0x9d, 0xe8, 0x5b, 0xaa, 0x4b, 0xdf, 0x7d,
	0x7b, 0x37, 0xf5, 0x50, 0x5f, 0xdf, 0x0c, 0x7d, 0x53, 0x3b, 0xe9, 0x77, 0x1e, 0x34, 0x4e, 0x16,
	0x20, 0xd3, 0x65, 0x6f, 0xd0, 0x3a, 0xf4, 0xff, 0x40, 0x44, 0x06, 0xb1, 0x19, 0x03, 0x96, 0x8e,
	0x38, 0x17, 0x2a, 0x41, 0xec, 0x4d, 0x58, 0x6b, 0x50, 0xa9, 0x5a, 0xbc, 0x11, 0x72, 0xd3, 0x23,
	0x72, 0x78, 0x70, 0x15, 0x96, 0xda, 0x97, 0x42, 0x09, 0x92, 0x2f, 0x67, 0x66, 0x9b, 0xd1, 0xca,
	0xa4, 0x19, 0x31, 0x31, 0x8c, 0x98, 0x17, 0x4c, 0x3b, 0x86, 0xc5, 0x7d, 0xc1, 0xb6, 0x2f, 0x53,
	0x19, 0xc5, 0x6b, 0xfa, 0xd0, 0xaa, 0x35, 0x46, 0x17, 0x86, 0x17, 0x48, 0xb2, 0x5e, 0xce, 0xec,
	0x66, 0xf4, 0xb5, 0x9e, 0x6c, 0xf1, 0x28, 0xe4, 0x2c, 0x81, 0xe0, 0xfd, 0x69, 0xdb, 0x21, 0x1b,
	0x98, 0xf6, 0xed, 0x85, 0xb4, 0x4f, 0xba, 0x52, 0x09, 0xf2, 0x1d, 0x46, 0x23, 0x8c, 0x8c, 0x63,
	0xbb, 0x8a, 0xee, 0x3b, 0x54, 0x8d, 0x62, 0x86, 0x00, 0x9c, 0xeb, 0x2a, 0x9b, 0x73, 0x5d, 0x65,
	0x6b, 0xae, 0xab, 0xdc, 0xb4, 0x0d, 0xd6, 0x93, 0x53, 0x08, 0x6f, 0xa3, 0x45, 0x5f, 0x2e, 0x74,
	0x1a, 0xb2, 0x53, 0x4e, 0xed, 0x16, 0xf6, 0x3e, 0x5e, 0x30, 0x6b, 0xbe, 0x1b, 0xe9, 0xfe, 0x16,
	0x51, 0xff, 0xaa, 0x11, 0x4a, 0x45, 0x6e, 0xa1, 0xaf, 0x49, 0xe0, 0x1b, 0xa2, 0xdf, 0x1a, 0x29,
	0x0c, 0xca, 0x47, 0x18, 0x14, 0x07, 0xa0, 0x21, 0xfa, 0x21, 0xd7, 0x22, 0x49, 0x3e, 0xc6, 0x1c,
	0x3a, 0x00, 0x26, 0x2a, 0x78, 0xee, 0x0e, 0x9e, 0x5b, 0x81, 0xd4, 0x29, 0xb9, 0x5b, 0x4e, 0xed,
	0xa6, 0xf4, 0xcf, 0xe7, 0xa4, 0x8c, 0x3f, 0x1d, 0x80, 0x7d, 0xa6, 0xdd, 0x43, 0x30, 0xff, 0x1f,
	0x6a, 0x63, 0x54, 0x9b, 0x8c, 0xc6, 0xd5, 0x31, 0xa9, 0xd8, 0x96, 0x51, 0xbb, 0xa4, 0x9c, 0xb3,
	0x88, 0x7c, 0x62, 0x93, 0xa5, 0x15, 0x24, 0xf9, 0x7f, 0xd4, 0xd8, 0x81, 0x0d, 0x6d, 0x9b, 0x2b,
	0x65, 0x28, 0x15, 0xe5, 0xc6, 0xbc, 0xef, 0xe1, 0xb3, 0x25, 0xc8, 0x9f, 0x9c, 0x26, 0x13, 0xe6,
	0xfb, 0xa8, 0xbb, 0x09, 0xc5, 0x93, 0xd3, 0x2e, 0x93, 0x32, 0x14, 0xfc, 0x1b, 0x36, 0x26, 0xf7,
	0x6c, 0xec, 0x4f, 0x4e, 0x71, 0x86, 0x84, 0x01, 0xd9, 0x45, 0xd1, 0x0e, 0x6c, 0xd4, 0x22, 0x46,
	0xe3, 0x86, 0xf0, 0x69, 0xd4, 0x10, 0x7d, 0xbc, 0xf5, 0x3e, 0xde, 0xba, 0x05, 0xab, 0x35, 0x31,
	0x18, 0x46, 0x34, 0x4c, 0x1e, 0x7b, 0x80, 0x62, 0x6c, 0xa7, 0xc7, 0xa1, 0x0c, 0x95, 0x88, 0xc9,
	0xa7, 0x68, 0xfa, 0xe7, 0x73, 0x5d, 0x81, 0x3c, 0x44, 0x4c, 0xdc, 0xba, 0xbe, 0x15, 0x20, 0x2c,
	0x74, 0x31, 0x84, 0x01, 0x79, 0x84, 0x8e, 0x6d, 0xc3, 0x7a, 0x4f, 0x04, 0x74, 0x3c, 0x13, 0xcd,
	0xcf, 0xad, 0x5b, 0x06, 0x9e, 0x5e, 0x9b, 0xfc, 0xc0, 0x26, 0x3f, 0xc9, 0x4f, 0xc8, 0xbd, 0x36,
	0xf9, 0xc2, 0x4e, 0x57, 0x77, 0x18, 0x1e, 0xc5, 0x11, 0xd9, 0x9b, 0x20, 0x8c, 0xf9, 0x31, 0x53,
	0xda, 0xf1, 0x2f, 0xad, 0xe8, 0x71, 0xcc, 0x98, 0x49, 0xdf, 0x0f, 0xf1, 0xd5, 0x2d, 0x58, 0x75,
	0x47, 0x4a, 0x4c, 0xd2, 0x4a, 0x7e, 0x84, 0x6f, 0xde, 0x84, 0xb5, 0xa9, 0x58, 0x5c, 0x31, 0x4e,
	0x7e, 0x6c, 0x1f, 0xe9, 0x2a, 0xaa, 0x46, 0x92, 0xfc, 0x04, 0xd5, 0x09, 0xac, 0x84, 0xf2, 0xec,
	0xc2, 0x0c, 0x9e, 0xaf, 0xb4, 0xc8, 0x36, 0x83, 0x49, 0xb6, 0x71, 0x96, 0x7c, 0x8d, 0xda, 0xf7,
	0x21, 0x5f, 0xa3, 0x51, 0x84, 0xd1, 0xf9, 0x29, 0x42, 0x73, 0xb1, 0x62, 0xec, 0xb6, 0xce, 0x7a,
	0x83, 0x9e, 0xb3, 0x88, 0xfc, 0xac, 0x9c, 0x31, 0xc1, 0x99, 0x81, 0x7b, 0xeb, 0x15, 0x8b, 0xc9,
	0xcf, 0x31, 0xe6, 0xba, 0xdd, 0x09, 0xc5, 0xc8, 0x2f, 0xac, 0x83, 0xb5, 0x91, 0x54, 0x62, 0xd0,
	0xa3, 0x7d, 0xf2, 0x4b, 0xd4, 0x5c, 0x87, 0xdc, 0x41, 0x4c, 0xcf, 0xb5, 0xe0, 0x57, 0x68, 0xb2,
	0xc6, 0x13, 0x7a, 0xf4, 0xeb, 0xeb, 0x98, 0x8a, 0x6b, 0x4b, 0xf1, 0x98, 0xc5, 0x1a, 0x35, 0xa4,
	0x6a, 0x41, 0x58, 0x8d, 0x29, 0x0f, 0x48, 0xcd, 0xbe, 0x83, 0x73, 0x05, 0x6b, 0x66, 0x1f, 0x6b,
	0xe6, 0x06, 0x14, 0xf6, 0xc7, 0x9c, 0x0e, 0x42, 0x1f, 0x85, 0x75, 0x14, 0x16, 0x20, 0xf3, 0x82,
	0x72, 0xf2, 0xd8, 0xe6, 0xf1, 0x31, 0xe5, 0x12, 0xb7, 0x0f, 0x92, 0x3a, 0xcb, 0x75, 0x58, 0x1f,
	0xcb, 0xe1, 0xc9, 0x6c, 0xec, 0x36, 0xa1, 0x78, 0xcc, 0xe2, 0xf0, 0x22, 0x64, 0x01, 0xe6, 0xc4,
	0xb3, 0x9d, 0x5d, 0x8f, 0x26, 0xf2, 0x74, 0x82, 0x8a, 0x4b, 0xe6, 0x5f, 0x35, 0x47, 0x03, 0xf2,
	0x8d, 0x95, 0x4c, 0xa8, 0x52, 0x03, 0xcd, 0xbc, 0x05, 0x4e, 0x95, 0xfa, 0x57, 0xfd, 0x58, 0x8c,
	0x78, 0xe0, 0x0d, 0x68, 0x9f, 0x1d, 0x75, 0x1a, 0xe4, 0x10, 0xf7, 0x30, 0xa2, 0xd5, 0x58, 0xbc,
	0x96, 0x6c, 0x2f, 0x99, 0xba, 0x4d, 0x5b, 0x80, 0xee, 0xd0, 0x10, 0xa6, 0x16, 0x06, 0xec, 0x36,
	0x6c, 0x3d, 0x0e, 0x63, 0xa9, 0xdc, 0x20, 0x30, 0x07, 0x13, 0x3f, 0x49, 0x1b, 0xcf, 0xdf, 0x83,
	0x5c, 0x5b, 0x84, 0x5c, 0xc9, 0x2f, 0xc8, 0x33, 0xcc, 0xe9, 0xe2, 0xf0, 0x3b, 0x60, 0xe2, 0xa9,
	0x14, 0xdc, 0x0c, 0x58, 0xb4, 0x59, 0xd3, 0x8d, 0x86, 0xe8, 0x93, 0x8e, 0xa5, 0x78, 0xfb, 0x58,
	0xcb, 0x3e, 0x23, 0x5d, 0xec, 0x14, 0x3a, 0xda, 0xe8, 0x6a, 0x0f, 0x1d, 0xdb, 0x86, 0xbc, 0x6e,
	0x11, 0x5d, 0x11, 0x2b, 0x72, 0xa4, 0x0f, 0xcc, 0xc4, 0xc9, 0x54, 0x4b, 0x82, 0xc9, 0x63, 0x0b,
	0xe9, 0xe7, 0x62, 0xc4, 0xfb, 0x3a, 0xa7, 0x27, 0x3a, 0xa7, 0x27, 0xe8, 0xf0, 0x47, 0x70, 0xc3,
	0x93, 0x0d, 0x41, 0x03, 0x16, 0xb8, 0x51, 0x94, 0x34, 0x05, 0x49, 0x4e, 0xa7, 0xe4, 0xa8, 0x46,
	0x79, 0x47, 0xd0, 0x01, 0x79, 0x6e, 0xcd, 0x3a, 0xae, 0xbd, 0xa0, 0x5c, 0x07, 0xf8, 0x85, 0x6d,
	0x7f, 0xd5, 0xbe, 0x09, 0x63, 0x1c, 0x91, 0xdf, 0x58, 0x60, 0x1c, 0x86, 0x6f, 0xbc, 0x80, 0xfc,
	0x36, 0x31, 0x75, 0xbd, 0xcd, 0x62, 0x29, 0x38, 0x8d, 0x42, 0x35, 0xee, 0xd1, 0xbe, 0x24, 0xbf,
	0x43, 0x18, 0x62, 0x17, 0xe1, 0x52, 0xb1, 0x28, 0xa2, 0xc8, 0x46, 0x7e, 0x6f, 0xbb, 0x67, 0x55,
	0x4e, 0x9e, 0x39, 0xc3, 0x3b, 0x76, 0x60, 0xa3, 0xc3, 0x68, 0xd0, 0x10, 0xaf, 0xd8, 0x21, 0xb3,
	0xbd, 0xe8, 0x0f, 0x76, 0x6b, 0xee, 0x16, 0xdc, 0xa2, 0xd6, 0xb8, 0x7a, 0x77, 0x28, 0x62, 0x85,
	0x81, 0x3b, 0xb7, 0x88, 0x68, 0x0d, 0x59, 0x4c, 0x75, 0x8b, 0xf2, 0x2d, 0xda, 0xab, 0x94, 0xeb,
	0xfa, 0x41, 0xd5, 0x20, 0x39, 0x96, 0xdb, 0x0f, 0xe9, 0x40, 0xf0, 0x80, 0xfc, 0x07, 0x49, 0x44,
	0xe5, 0x33, 0xc8, 0xd9, 0xac, 0x15, 0x21, 0xab, 0x2c, 0xf9, 0x40, 0x7d, 0x5f, 0x88, 0x38, 0x08,
	0x39, 0x55, 0x4c, 0x92, 0x74, 0x39, 0xb3, 0x9b, 0xaa, 0x3c, 0x98, 0x96, 0x35, 0x4e, 0xdf, 0x29,
	0x83, 0x48, 0x60, 0x2b, 0x0f, 0x65, 0xdf, 0x30, 0x82, 0xca, 0x57, 0x00, 0x86, 0xa6, 0x22, 0xdf,
	0x78, 0x00, 0x39, 0xb3, 0x32, 0x57, 0x15, 0xf6, 0x76, 0x16, 0xb0, 0x63, 0x76, 0xf5, 0xcd, 0x95,
	0x3f, 0x5a, 0xcd, 0xf7, 0xbc, 0xb3, 0x06, 0xcb, 0x1d, 0x36, 0xc3, 0x3d, 0x1e, 0x42, 0xce, 0x8e,
	0xc1, 0xcc, 0xb5, 0x63, 0xd0, 0xdc, 0x66, 0xc7, 0xa0, 0x25, 0x59, 0x59, 0x9b, 0x97, 0x19, 0x4a,
	0x60, 0x18, 0xd9, 0x00, 0x56, 0xe7, 0x55, 0x10, 0x34, 0x3d, 0x31, 0x44, 0xf6, 0x9c, 0x9a, 0x52,
	0xf1, 0xa6, 0xd0, 0x78, 0x1e, 0xc5, 0xe7, 0x09, 0x83, 0x27, 0x50, 0xf2, 0xa4, 0x7b, 0xa1, 0x58,
	0xac, 0xf3, 0x8a, 0x73, 0x26, 0xa1, 0xf2, 0xc8, 0x70, 0xbb, 0x7e, 0xcc, 0x98, 0x66, 0x9c, 0xaa,
	0x29, 0x54, 0x78, 0x31, 0x36, 0xac, 0xbe, 0xd2, 0x80, 0x75, 0x37, 0x8a, 0xdc, 0x20, 0x30, 0x7e,
	0x1e, 0xca, 0xbe, 0xf3, 0x35, 0x94, 0x26, 0xeb, 0x0e, 0x7b, 0x39, 0x62, 0xd2, 0x12, 0xce, 0xbb,
	0x0b, 0xbe, 0x2d, 0x1e, 0xab, 0xfc, 0x39, 0xfd, 0xae, 0xee, 0x42, 0x10, 0xd3, 0x26, 0x59, 0xe8,
	0x71, 0x7a, 0x86, 0x68, 0xf1, 0x59, 0x82, 0xca, 0xde, 0xa8, 0x84, 0x5a, 0x7e, 0x9a, 0x04, 0x4c,
	0x07, 0x67, 0x6d, 0xef, 0xf6, 0xbb, 0x06, 0x98, 0x60, 0x9d, 0xe9, 0x43, 0x26, 0x39, 0x72, 0x14,
	0x19, 0x6a, 0xb7, 0xe4, 0x00, 0xa4, 0x93, 0xcf, 0xc0, 0xe4, 0x93, 0x4f, 0x47, 0x26, 0xf9, 0x02,
	0x99, 0xa5, 0x91, 0x2b, 0xef, 0xd0, 0xc8, 0xf7, 0x50, 0xba, 0x39, 0x3e, 0x55, 0x9c, 0x61, 0x79,
	0x4a, 0x20, 0xa3, 0x9b, 0x30, 0xcf, 0xb5, 0xc9, 0x10, 0x40, 0x52, 0xa1, 0xbf, 0x34, 0x96, 0x2a,
	0x2f, 0xa1, 0x68, 0x02, 0xd1, 0x7b, 0xcd, 0x98, 0x92, 0x1f, 0xc6, 0x83, 0x37, 0xa1, 0x68, 0x8e,
	0x7b, 0x01, 0xf6, 0xf4, 0x34, 0xf6, 0xf4, 0x79, 0xe4, 0x64, 0x6c, 0x6d, 0x1e, 0x0d, 0x03, 0x2b,
	0xcb, 0x22, 0x9a, 0x04, 0xac, 0x99, 0x27, 0xea, 0x03, 0xa1, 0x42, 0x5f, 0x70, 0xe7, 0x36, 0xc6,
	0x04, 0xc1, 0x7c, 0xdd, 0x73, 0xb3, 0xc9, 0x4a, 0xdb, 0xc0, 0x69, 0x27, 0xbc, 0x00, 0x9f, 0x59,
	0x9a, 0x90, 0xfd, 0xac, 0x1d, 0xd5, 0xfa, 0x93, 0xec, 0x95, 0xc9, 0x50, 0xbe, 0x32, 0x82, 0xf5,
	0xe4, 0xc1, 0x97, 0xa3, 0x70, 0xa8, 0x3f, 0x96, 0x16, 0xdc, 0x7c, 0xcf, 0xbb, 0x00, 0xe9, 0x83,
	0xa7, 0xc9, 0x8b, 0x00, 0xe9, 0x67, 0xed, 0xc4, 0x29, 0x80, 0xf4, 0x61, 0xdb, 0x38, 0xa3, 0x63,
	0xfb, 0xac, 0x77, 0x9a, 0xf0, 0xf8, 0x22, 0x64, 0x0f, 0x5f, 0x54, 0xbb, 0x98, 0xe9, 0x4c, 0xe5,
	0x6f, 0x29, 0xeb, 0x28, 0xb6, 0xf4, 0x86, 0xe8, 0xff, 0xef, 0x8e, 0x16, 0x20, 0x73, 0x42, 0xc7,
	0x89, 0x97, 0xba, 0xa9, 0xd9, 0xfe, 0x95, 0x9d, 0x7c, 0xc3, 0x9b, 0x01, 0xb0, 0x74, 0x4d, 0xf1,
	0x2e, 0x5b, 0x28, 0x9b, 0x91, 0x92, 0x9b, 0x4c, 0xcf, 0x91, 0xb1, 0x68, 0xf6, 0x8f, 0x87, 0x2e,
	0xb3, 0x7f, 0x3c, 0x54, 0x1a, 0xb0, 0x61, 0xac, 0xd0, 0xd5, 0x9d, 0x4c, 0x8b, 0x0f, 0x0b, 0x98,
	0x03, 0x90, 0x9c, 0xf7, 0x92, 0xbe, 0xb6, 0xf2, 0xe0, 0xaf, 0x29, 0x58, 0x5b, 0x28, 0x89, 0x02,
	0xe4, 0xdc, 0x5a, 0xad, 0x75, 0xd4, 0xec, 0x95, 0x34, 0x4d, 0x5e, 0x6a, 0x3f, 0x69, 0x35, 0xeb,
	0xa5, 0xb4, 0x93, 0x87, 0x6c, 0xad, 0xb5, 0x5f, 0x2f, 0xe9, 0x08, 0x2f, 0x9f, 0xd4, 0x6b, 0x4f,
	0xdc, 0x5e, 0x29, 0xab, 0xa5, 0xbd, 0xba, 0x7b, 0x58, 0xd2, 0xa5, 0xb3, 0xdc, 0xac, 0xbb, 0x9d,
	0xea, 0xf3, 0xd2, 0xb2, 0x53, 0x84, 0x7c, 0xbb, 0xe1, 0x3e, 0xaf, 0x77, 0xbc, 0xfd, 0x52, 0x0e,
	0x35, 0xdd, 0xce, 0x7e, 0x49, 0xb3, 0xa2, 0x7c, 0xb7, 0xd7, 0x71, 0x9b, 0x07, 0xf5, 0x4e, 0x49,
	0xd7, 0x6d, 0xbe, 0x53, 0x3f, 0xf0, 0xba, 0xbd, 0x7a, 0xa7, 0x04, 0x5a, 0xbf, 0xfb, 0xec, 0xc8,
	0xed, 0xd4, 0x4b, 0x05, 0x67, 0x0d, 0xe0, 0xb8, 0xe5, 0xd5, 0xea, 0x67, 0xa8, 0x57, 0xac, 0x16,
	0xff, 0xfe, 0xf6, 0x4e, 0xea, 0x1f, 0x6f, 0xef, 0xa4, 0xfe, 0xfd, 0xf6, 0x4e, 0xea, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x22, 0xe5, 0x9f, 0x15, 0x6b, 0x12, 0x00, 0x00,
}

func (m *PlayerAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerAccount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("PlayerId")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Account != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.Email != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Email)))
		i += copy(dAtA[i:], *m.Email)
	}
	if m.Password != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Password)))
		i += copy(dAtA[i:], *m.Password)
	}
	if m.PayPassword != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.PayPassword)))
		i += copy(dAtA[i:], *m.PayPassword)
	}
	if m.OpenId != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.OpenId)))
		i += copy(dAtA[i:], *m.OpenId)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.CreateTime))
	}
	if m.IsBind != nil {
		dAtA[i] = 0x48
		i++
		if *m.IsBind {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AreaCode != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.AreaCode)))
		i += copy(dAtA[i:], *m.AreaCode)
	}
	if m.UnionId != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.UnionId)))
		i += copy(dAtA[i:], *m.UnionId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BankInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BankInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BankId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.BankId)))
		i += copy(dAtA[i:], *m.BankId)
	}
	if m.BankCode != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.BankCode)))
		i += copy(dAtA[i:], *m.BankCode)
	}
	if m.Time != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.Time))
	}
	if m.SignNo != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.SignNo)))
		i += copy(dAtA[i:], *m.SignNo)
	}
	if m.BankName != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.BankName)))
		i += copy(dAtA[i:], *m.BankName)
	}
	if m.BankPhone != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.BankPhone)))
		i += copy(dAtA[i:], *m.BankPhone)
	}
	if m.Provice != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Provice)))
		i += copy(dAtA[i:], *m.Provice)
	}
	if m.City != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.City)))
		i += copy(dAtA[i:], *m.City)
	}
	if m.Area != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Area)))
		i += copy(dAtA[i:], *m.Area)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerSetting) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsSafePassword != nil {
		dAtA[i] = 0x8
		i++
		if *m.IsSafePassword {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsNewMessage != nil {
		dAtA[i] = 0x10
		i++
		if *m.IsNewMessage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsMusic != nil {
		dAtA[i] = 0x18
		i++
		if *m.IsMusic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsShake != nil {
		dAtA[i] = 0x20
		i++
		if *m.IsShake {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsAddFriend != nil {
		dAtA[i] = 0x28
		i++
		if *m.IsAddFriend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsPhone != nil {
		dAtA[i] = 0x30
		i++
		if *m.IsPhone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsAccount != nil {
		dAtA[i] = 0x38
		i++
		if *m.IsAccount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsTeamChat != nil {
		dAtA[i] = 0x40
		i++
		if *m.IsTeamChat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsCode != nil {
		dAtA[i] = 0x48
		i++
		if *m.IsCode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsCard != nil {
		dAtA[i] = 0x50
		i++
		if *m.IsCard {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SafePassword != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.SafePassword)))
		i += copy(dAtA[i:], *m.SafePassword)
	}
	if m.IsSafeProtect != nil {
		dAtA[i] = 0x60
		i++
		if *m.IsSafeProtect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsTouch != nil {
		dAtA[i] = 0x68
		i++
		if *m.IsTouch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsMessageShow != nil {
		dAtA[i] = 0x70
		i++
		if *m.IsMessageShow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsOpenSquare != nil {
		dAtA[i] = 0x78
		i++
		if *m.IsOpenSquare {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsOpenZanOrComment != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsOpenZanOrComment {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsOpenRecoverComment != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsOpenRecoverComment {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsOpenMyAttention != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsOpenMyAttention {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsOpenRecommend != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsOpenRecommend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsOpenCoinShop != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsOpenCoinShop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsBanSayHi != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsBanSayHi {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CollectInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Collect) > 0 {
		for _, msg := range m.Collect {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Index != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.Index))
	}
	if m.Name != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Time != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.Time))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Collect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Collect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.Type))
	}
	if m.Content != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.Time != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.Time))
	}
	if m.Name != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Data != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Data)))
		i += copy(dAtA[i:], *m.Data)
	}
	if m.HeadIcon != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.HeadIcon)))
		i += copy(dAtA[i:], *m.HeadIcon)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerBase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("PlayerId")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.PlayerId))
	}
	if m.NickName != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.HeadIcon != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.HeadIcon)))
		i += copy(dAtA[i:], *m.HeadIcon)
	}
	if m.Sex != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.Sex))
	}
	if m.Gold != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.Gold))
	}
	if m.IsRobot != nil {
		dAtA[i] = 0x30
		i++
		if *m.IsRobot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LastOnLineTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.LastOnLineTime))
	}
	if len(m.Photo) > 0 {
		for _, s := range m.Photo {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Email != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Email)))
		i += copy(dAtA[i:], *m.Email)
	}
	if m.PeopleId != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.PeopleId)))
		i += copy(dAtA[i:], *m.PeopleId)
	}
	if m.Account != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.Phone != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Phone)))
		i += copy(dAtA[i:], *m.Phone)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.CreateTime))
	}
	if len(m.TeamIds) > 0 {
		for _, num := range m.TeamIds {
			dAtA[i] = 0x78
			i++
			i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(num))
		}
	}
	if m.IsOnline != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsOnline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.BankInfo) > 0 {
		for _, msg := range m.BankInfo {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.RealName != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.RealName)))
		i += copy(dAtA[i:], *m.RealName)
	}
	if m.Signature != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Signature)))
		i += copy(dAtA[i:], *m.Signature)
	}
	if m.Provice != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Provice)))
		i += copy(dAtA[i:], *m.Provice)
	}
	if m.City != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.City)))
		i += copy(dAtA[i:], *m.City)
	}
	if m.Area != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Area)))
		i += copy(dAtA[i:], *m.Area)
	}
	if m.IsRecommend != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsRecommend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Password != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Password)))
		i += copy(dAtA[i:], *m.Password)
	}
	if m.PlayerSetting != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(m.PlayerSetting.Size()))
		n1, err := m.PlayerSetting.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.BlackList) > 0 {
		for _, num := range m.BlackList {
			dAtA[i] = 0xd0
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(num))
		}
	}
	if m.LastLogOutTime != nil {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.LastLogOutTime))
	}
	if m.LoginTimes != nil {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.LoginTimes))
	}
	if m.OnlineTime != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.OnlineTime))
	}
	if m.X != nil {
		dAtA[i] = 0xf9
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.X))))
		i += 8
	}
	if m.Y != nil {
		dAtA[i] = 0x81
		i++
		dAtA[i] = 0x2
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Y))))
		i += 8
	}
	if m.DeviceType != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.DeviceType))
	}
	if m.IsNearBy != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		if *m.IsNearBy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Channel != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Channel)))
		i += copy(dAtA[i:], *m.Channel)
	}
	if m.Types != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.Types))
	}
	if m.LastAssistantTime != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.LastAssistantTime))
	}
	if m.WXOpenId != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.WXOpenId)))
		i += copy(dAtA[i:], *m.WXOpenId)
	}
	if m.WXSessionKey != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.WXSessionKey)))
		i += copy(dAtA[i:], *m.WXSessionKey)
	}
	if m.WXUnionid != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.WXUnionid)))
		i += copy(dAtA[i:], *m.WXUnionid)
	}
	if m.ClearLocalLogTime != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.ClearLocalLogTime))
	}
	if m.ComplaintTime != nil {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.ComplaintTime))
	}
	if m.IsVisitor != nil {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x2
		i++
		if *m.IsVisitor {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.CollectInfo) > 0 {
		for _, msg := range m.CollectInfo {
			dAtA[i] = 0xea
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Sid != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.Sid))
	}
	if m.TodayOnlineTime != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.TodayOnlineTime))
	}
	if m.CreateIP != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.CreateIP)))
		i += copy(dAtA[i:], *m.CreateIP)
	}
	if m.LastLoginIP != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.LastLoginIP)))
		i += copy(dAtA[i:], *m.LastLoginIP)
	}
	if m.ApiUrl != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.ApiUrl)))
		i += copy(dAtA[i:], *m.ApiUrl)
	}
	if m.SecretKey != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.SecretKey)))
		i += copy(dAtA[i:], *m.SecretKey)
	}
	if m.FreeTimes != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.FreeTimes))
	}
	if m.AutoLoginTime != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.AutoLoginTime))
	}
	if m.AutoLoginToken != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.AutoLoginToken)))
		i += copy(dAtA[i:], *m.AutoLoginToken)
	}
	if m.Status != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.Status))
	}
	if m.IsFriend != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.IsFriend))
	}
	if m.DeviceCode != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.DeviceCode)))
		i += copy(dAtA[i:], *m.DeviceCode)
	}
	if m.CallInfo != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(m.CallInfo.Size()))
		n2, err := m.CallInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Label) > 0 {
		for _, num := range m.Label {
			dAtA[i] = 0xd8
			i++
			dAtA[i] = 0x3
			i++
			i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(num))
		}
	}
	if m.IsRecommendOver != nil {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x3
		i++
		if *m.IsRecommendOver {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Note != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Note)))
		i += copy(dAtA[i:], *m.Note)
	}
	if len(m.CustomTag) > 0 {
		for _, num := range m.CustomTag {
			dAtA[i] = 0xf0
			i++
			dAtA[i] = 0x3
			i++
			i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(num))
		}
	}
	if m.GrabTag != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.GrabTag))
	}
	if m.Token != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Token)))
		i += copy(dAtA[i:], *m.Token)
	}
	if m.PayPassword != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.PayPassword)))
		i += copy(dAtA[i:], *m.PayPassword)
	}
	if m.Version != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Version)))
		i += copy(dAtA[i:], *m.Version)
	}
	if m.Brand != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Brand)))
		i += copy(dAtA[i:], *m.Brand)
	}
	if len(m.AttenList) > 0 {
		for _, num := range m.AttenList {
			dAtA[i] = 0xa0
			i++
			dAtA[i] = 0x4
			i++
			i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(num))
		}
	}
	if len(m.DynamicList) > 0 {
		for _, num := range m.DynamicList {
			dAtA[i] = 0xa8
			i++
			dAtA[i] = 0x4
			i++
			i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(num))
		}
	}
	if m.Zan != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.Zan))
	}
	if len(m.FansList) > 0 {
		for _, num := range m.FansList {
			dAtA[i] = 0xb8
			i++
			dAtA[i] = 0x4
			i++
			i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(num))
		}
	}
	if m.RegType != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.RegType))
	}
	if m.VerifiedTime != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.VerifiedTime))
	}
	if m.Coin != nil {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.Coin))
	}
	if m.CheckNum != nil {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.CheckNum))
	}
	if m.AreaCode != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.AreaCode)))
		i += copy(dAtA[i:], *m.AreaCode)
	}
	if m.BackgroundImageURL != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.BackgroundImageURL)))
		i += copy(dAtA[i:], *m.BackgroundImageURL)
	}
	if m.IsBrowse2Square != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x4
		i++
		if *m.IsBrowse2Square {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ApkCode != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.ApkCode))
	}
	if m.FirstAddSquareDynamic != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x5
		i++
		if *m.FirstAddSquareDynamic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Points1 != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(m.Points1.Size()))
		n3, err := m.Points1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.IsCheckChatLog != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x5
		i++
		if *m.IsCheckChatLog {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Distance != nil {
		dAtA[i] = 0x99
		i++
		dAtA[i] = 0x5
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Distance))))
		i += 8
	}
	if m.BCoin != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.BCoin))
	}
	if m.NearSort != nil {
		dAtA[i] = 0xa9
		i++
		dAtA[i] = 0x5
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.NearSort))))
		i += 8
	}
	if m.OnlineStatus != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.OnlineStatus))
	}
	if m.YoungPassWord != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.YoungPassWord)))
		i += copy(dAtA[i:], *m.YoungPassWord)
	}
	if m.IsLoadedAllSessions != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x5
		i++
		if *m.IsLoadedAllSessions {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsCanRoam != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x5
		i++
		if *m.IsCanRoam {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.VCZanNum != nil {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.VCZanNum))
	}
	if m.BgImageUrl != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.BgImageUrl)))
		i += copy(dAtA[i:], *m.BgImageUrl)
	}
	if m.MixId != nil {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.MixId))
	}
	if len(m.PersonalityTags) > 0 {
		for _, num := range m.PersonalityTags {
			dAtA[i] = 0xe8
			i++
			dAtA[i] = 0x5
			i++
			i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(num))
		}
	}
	if m.Constellation != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.Constellation))
	}
	if m.BsVCZanNum != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.BsVCZanNum))
	}
	if m.ReadLoveMeLogTime != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.ReadLoveMeLogTime))
	}
	if m.ConstellationTime != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.ConstellationTime))
	}
	if m.ESportCoin != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.ESportCoin))
	}
	if m.Operator != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Operator)))
		i += copy(dAtA[i:], *m.Operator)
	}
	if m.BanOverTime != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.BanOverTime))
	}
	if m.Diamond != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1f
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.Diamond))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GeoJson) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeoJson) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Type)))
		i += copy(dAtA[i:], *m.Type)
	}
	if len(m.Coordinates) > 0 {
		for _, num := range m.Coordinates {
			dAtA[i] = 0x11
			i++
			f4 := math.Float64bits(float64(num))
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f4))
			i += 8
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CallInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.PlayerId))
	}
	if m.SMsg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.SMsg)))
		i += copy(dAtA[i:], *m.SMsg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FriendBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendBase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Friends) > 0 {
		for _, msg := range m.Friends {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FriendInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.PlayerId))
	}
	if m.ReName != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.ReName)))
		i += copy(dAtA[i:], *m.ReName)
	}
	if m.Setting != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(m.Setting.Size()))
		n5, err := m.Setting.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Type != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.Type))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FriendSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendSetting) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsTopChat != nil {
		dAtA[i] = 0x8
		i++
		if *m.IsTopChat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsNoDisturb != nil {
		dAtA[i] = 0x10
		i++
		if *m.IsNoDisturb {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsAfterReadClear != nil {
		dAtA[i] = 0x18
		i++
		if *m.IsAfterReadClear {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsScreenShotNotify != nil {
		dAtA[i] = 0x20
		i++
		if *m.IsScreenShotNotify {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AllAddPlayerMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllAddPlayerMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AddPlayerRequest) > 0 {
		for _, msg := range m.AddPlayerRequest {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddPlayerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPlayerRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("PlayerId")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Time != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.Time))
	}
	if m.Phone != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Phone)))
		i += copy(dAtA[i:], *m.Phone)
	}
	if m.Text != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Text)))
		i += copy(dAtA[i:], *m.Text)
	}
	if m.Type != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.Type))
	}
	if m.Result != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.Result))
	}
	if m.Id != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.Id))
	}
	if m.IsRead != nil {
		dAtA[i] = 0x40
		i++
		if *m.IsRead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NickName != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.HeadIcon != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.HeadIcon)))
		i += copy(dAtA[i:], *m.HeadIcon)
	}
	if m.Account != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.Signature != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Signature)))
		i += copy(dAtA[i:], *m.Signature)
	}
	if m.Photo != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Photo)))
		i += copy(dAtA[i:], *m.Photo)
	}
	if m.Sex != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.Sex))
	}
	if m.Types != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.Types))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerTweets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerTweets) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("PlayerId")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.PlayerId))
	}
	if len(m.TweetsIdList) > 0 {
		for _, num := range m.TweetsIdList {
			dAtA[i] = 0x10
			i++
			i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(num))
		}
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerEmoticon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerEmoticon) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.Id))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.PlayerId))
	}
	if m.TypeId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.TypeId))
	}
	if m.Data != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(len(*m.Data)))
		i += copy(dAtA[i:], *m.Data)
	}
	if m.IsSave != nil {
		dAtA[i] = 0x28
		i++
		if *m.IsSave {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerEquipment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerEquipment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.PlayerId))
	}
	if m.GJ != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.GJ))
	}
	if m.QP != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.QP))
	}
	if m.MP != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.MP))
	}
	if m.QTX != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.QTX))
	}
	if m.MZBS != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.MZBS))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerBCoinLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerBCoinLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.Id))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Way != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.Way))
	}
	if m.OverTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.OverTime))
	}
	if m.Status != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.Status))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.CreateTime))
	}
	if m.BCoin != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.BCoin))
	}
	if m.CurBCoin != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.CurBCoin))
	}
	if m.IsSend != nil {
		dAtA[i] = 0x48
		i++
		if *m.IsSend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerChatSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerChatSession) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructPlayerBase(dAtA, i, uint64(*m.PlayerId))
	}
	if len(m.SessionIds) > 0 {
		for _, s := range m.SessionIds {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTableStructPlayerBase(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PlayerAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.PlayerId))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.Email != nil {
		l = len(*m.Email)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.Password != nil {
		l = len(*m.Password)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.PayPassword != nil {
		l = len(*m.PayPassword)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.OpenId != nil {
		l = len(*m.OpenId)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.CreateTime))
	}
	if m.IsBind != nil {
		n += 2
	}
	if m.AreaCode != nil {
		l = len(*m.AreaCode)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.UnionId != nil {
		l = len(*m.UnionId)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BankInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BankId != nil {
		l = len(*m.BankId)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.BankCode != nil {
		l = len(*m.BankCode)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.Time != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.Time))
	}
	if m.SignNo != nil {
		l = len(*m.SignNo)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.BankName != nil {
		l = len(*m.BankName)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.BankPhone != nil {
		l = len(*m.BankPhone)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.Provice != nil {
		l = len(*m.Provice)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.City != nil {
		l = len(*m.City)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.Area != nil {
		l = len(*m.Area)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsSafePassword != nil {
		n += 2
	}
	if m.IsNewMessage != nil {
		n += 2
	}
	if m.IsMusic != nil {
		n += 2
	}
	if m.IsShake != nil {
		n += 2
	}
	if m.IsAddFriend != nil {
		n += 2
	}
	if m.IsPhone != nil {
		n += 2
	}
	if m.IsAccount != nil {
		n += 2
	}
	if m.IsTeamChat != nil {
		n += 2
	}
	if m.IsCode != nil {
		n += 2
	}
	if m.IsCard != nil {
		n += 2
	}
	if m.SafePassword != nil {
		l = len(*m.SafePassword)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.IsSafeProtect != nil {
		n += 2
	}
	if m.IsTouch != nil {
		n += 2
	}
	if m.IsMessageShow != nil {
		n += 2
	}
	if m.IsOpenSquare != nil {
		n += 2
	}
	if m.IsOpenZanOrComment != nil {
		n += 3
	}
	if m.IsOpenRecoverComment != nil {
		n += 3
	}
	if m.IsOpenMyAttention != nil {
		n += 3
	}
	if m.IsOpenRecommend != nil {
		n += 3
	}
	if m.IsOpenCoinShop != nil {
		n += 3
	}
	if m.IsBanSayHi != nil {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CollectInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Collect) > 0 {
		for _, e := range m.Collect {
			l = e.Size()
			n += 1 + l + sovTableStructPlayerBase(uint64(l))
		}
	}
	if m.Index != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.Index))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.Time != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.Time))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Collect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.Type))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.Time != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.Time))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.Data != nil {
		l = len(*m.Data)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.HeadIcon != nil {
		l = len(*m.HeadIcon)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.PlayerId))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.HeadIcon != nil {
		l = len(*m.HeadIcon)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.Sex != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.Sex))
	}
	if m.Gold != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.Gold))
	}
	if m.IsRobot != nil {
		n += 2
	}
	if m.LastOnLineTime != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.LastOnLineTime))
	}
	if len(m.Photo) > 0 {
		for _, s := range m.Photo {
			l = len(s)
			n += 1 + l + sovTableStructPlayerBase(uint64(l))
		}
	}
	if m.Email != nil {
		l = len(*m.Email)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.PeopleId != nil {
		l = len(*m.PeopleId)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.Phone != nil {
		l = len(*m.Phone)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.CreateTime))
	}
	if len(m.TeamIds) > 0 {
		for _, e := range m.TeamIds {
			n += 1 + sovTableStructPlayerBase(uint64(e))
		}
	}
	if m.IsOnline != nil {
		n += 3
	}
	if len(m.BankInfo) > 0 {
		for _, e := range m.BankInfo {
			l = e.Size()
			n += 2 + l + sovTableStructPlayerBase(uint64(l))
		}
	}
	if m.RealName != nil {
		l = len(*m.RealName)
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.Signature != nil {
		l = len(*m.Signature)
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.Provice != nil {
		l = len(*m.Provice)
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.City != nil {
		l = len(*m.City)
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.Area != nil {
		l = len(*m.Area)
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.IsRecommend != nil {
		n += 3
	}
	if m.Password != nil {
		l = len(*m.Password)
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.PlayerSetting != nil {
		l = m.PlayerSetting.Size()
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if len(m.BlackList) > 0 {
		for _, e := range m.BlackList {
			n += 2 + sovTableStructPlayerBase(uint64(e))
		}
	}
	if m.LastLogOutTime != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.LastLogOutTime))
	}
	if m.LoginTimes != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.LoginTimes))
	}
	if m.OnlineTime != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.OnlineTime))
	}
	if m.X != nil {
		n += 10
	}
	if m.Y != nil {
		n += 10
	}
	if m.DeviceType != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.DeviceType))
	}
	if m.IsNearBy != nil {
		n += 3
	}
	if m.Channel != nil {
		l = len(*m.Channel)
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.Types != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.Types))
	}
	if m.LastAssistantTime != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.LastAssistantTime))
	}
	if m.WXOpenId != nil {
		l = len(*m.WXOpenId)
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.WXSessionKey != nil {
		l = len(*m.WXSessionKey)
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.WXUnionid != nil {
		l = len(*m.WXUnionid)
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.ClearLocalLogTime != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.ClearLocalLogTime))
	}
	if m.ComplaintTime != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.ComplaintTime))
	}
	if m.IsVisitor != nil {
		n += 3
	}
	if len(m.CollectInfo) > 0 {
		for _, e := range m.CollectInfo {
			l = e.Size()
			n += 2 + l + sovTableStructPlayerBase(uint64(l))
		}
	}
	if m.Sid != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.Sid))
	}
	if m.TodayOnlineTime != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.TodayOnlineTime))
	}
	if m.CreateIP != nil {
		l = len(*m.CreateIP)
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.LastLoginIP != nil {
		l = len(*m.LastLoginIP)
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.ApiUrl != nil {
		l = len(*m.ApiUrl)
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.SecretKey != nil {
		l = len(*m.SecretKey)
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.FreeTimes != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.FreeTimes))
	}
	if m.AutoLoginTime != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.AutoLoginTime))
	}
	if m.AutoLoginToken != nil {
		l = len(*m.AutoLoginToken)
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.Status != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.Status))
	}
	if m.IsFriend != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.IsFriend))
	}
	if m.DeviceCode != nil {
		l = len(*m.DeviceCode)
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.CallInfo != nil {
		l = m.CallInfo.Size()
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if len(m.Label) > 0 {
		for _, e := range m.Label {
			n += 2 + sovTableStructPlayerBase(uint64(e))
		}
	}
	if m.IsRecommendOver != nil {
		n += 3
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if len(m.CustomTag) > 0 {
		for _, e := range m.CustomTag {
			n += 2 + sovTableStructPlayerBase(uint64(e))
		}
	}
	if m.GrabTag != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.GrabTag))
	}
	if m.Token != nil {
		l = len(*m.Token)
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.PayPassword != nil {
		l = len(*m.PayPassword)
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.Version != nil {
		l = len(*m.Version)
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.Brand != nil {
		l = len(*m.Brand)
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if len(m.AttenList) > 0 {
		for _, e := range m.AttenList {
			n += 2 + sovTableStructPlayerBase(uint64(e))
		}
	}
	if len(m.DynamicList) > 0 {
		for _, e := range m.DynamicList {
			n += 2 + sovTableStructPlayerBase(uint64(e))
		}
	}
	if m.Zan != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.Zan))
	}
	if len(m.FansList) > 0 {
		for _, e := range m.FansList {
			n += 2 + sovTableStructPlayerBase(uint64(e))
		}
	}
	if m.RegType != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.RegType))
	}
	if m.VerifiedTime != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.VerifiedTime))
	}
	if m.Coin != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.Coin))
	}
	if m.CheckNum != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.CheckNum))
	}
	if m.AreaCode != nil {
		l = len(*m.AreaCode)
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.BackgroundImageURL != nil {
		l = len(*m.BackgroundImageURL)
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.IsBrowse2Square != nil {
		n += 3
	}
	if m.ApkCode != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.ApkCode))
	}
	if m.FirstAddSquareDynamic != nil {
		n += 3
	}
	if m.Points1 != nil {
		l = m.Points1.Size()
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.IsCheckChatLog != nil {
		n += 3
	}
	if m.Distance != nil {
		n += 10
	}
	if m.BCoin != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.BCoin))
	}
	if m.NearSort != nil {
		n += 10
	}
	if m.OnlineStatus != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.OnlineStatus))
	}
	if m.YoungPassWord != nil {
		l = len(*m.YoungPassWord)
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.IsLoadedAllSessions != nil {
		n += 3
	}
	if m.IsCanRoam != nil {
		n += 3
	}
	if m.VCZanNum != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.VCZanNum))
	}
	if m.BgImageUrl != nil {
		l = len(*m.BgImageUrl)
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.MixId != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.MixId))
	}
	if len(m.PersonalityTags) > 0 {
		for _, e := range m.PersonalityTags {
			n += 2 + sovTableStructPlayerBase(uint64(e))
		}
	}
	if m.Constellation != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.Constellation))
	}
	if m.BsVCZanNum != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.BsVCZanNum))
	}
	if m.ReadLoveMeLogTime != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.ReadLoveMeLogTime))
	}
	if m.ConstellationTime != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.ConstellationTime))
	}
	if m.ESportCoin != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.ESportCoin))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 2 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.BanOverTime != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.BanOverTime))
	}
	if m.Diamond != nil {
		n += 2 + sovTableStructPlayerBase(uint64(*m.Diamond))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GeoJson) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if len(m.Coordinates) > 0 {
		n += 9 * len(m.Coordinates)
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CallInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.PlayerId))
	}
	if m.SMsg != nil {
		l = len(*m.SMsg)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FriendBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Friends) > 0 {
		for _, e := range m.Friends {
			l = e.Size()
			n += 1 + l + sovTableStructPlayerBase(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FriendInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.PlayerId))
	}
	if m.ReName != nil {
		l = len(*m.ReName)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.Setting != nil {
		l = m.Setting.Size()
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.Type))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FriendSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsTopChat != nil {
		n += 2
	}
	if m.IsNoDisturb != nil {
		n += 2
	}
	if m.IsAfterReadClear != nil {
		n += 2
	}
	if m.IsScreenShotNotify != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllAddPlayerMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AddPlayerRequest) > 0 {
		for _, e := range m.AddPlayerRequest {
			l = e.Size()
			n += 1 + l + sovTableStructPlayerBase(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddPlayerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.PlayerId))
	}
	if m.Time != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.Time))
	}
	if m.Phone != nil {
		l = len(*m.Phone)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.Text != nil {
		l = len(*m.Text)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.Type))
	}
	if m.Result != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.Result))
	}
	if m.Id != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.Id))
	}
	if m.IsRead != nil {
		n += 2
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.HeadIcon != nil {
		l = len(*m.HeadIcon)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.Signature != nil {
		l = len(*m.Signature)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.Photo != nil {
		l = len(*m.Photo)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.Sex != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.Sex))
	}
	if m.Types != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.Types))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerTweets) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.PlayerId))
	}
	if len(m.TweetsIdList) > 0 {
		for _, e := range m.TweetsIdList {
			n += 1 + sovTableStructPlayerBase(uint64(e))
		}
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerEmoticon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.Id))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.PlayerId))
	}
	if m.TypeId != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.TypeId))
	}
	if m.Data != nil {
		l = len(*m.Data)
		n += 1 + l + sovTableStructPlayerBase(uint64(l))
	}
	if m.IsSave != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerEquipment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.PlayerId))
	}
	if m.GJ != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.GJ))
	}
	if m.QP != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.QP))
	}
	if m.MP != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.MP))
	}
	if m.QTX != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.QTX))
	}
	if m.MZBS != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.MZBS))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerBCoinLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.Id))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.PlayerId))
	}
	if m.Way != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.Way))
	}
	if m.OverTime != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.OverTime))
	}
	if m.Status != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.Status))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.CreateTime))
	}
	if m.BCoin != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.BCoin))
	}
	if m.CurBCoin != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.CurBCoin))
	}
	if m.IsSend != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerChatSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovTableStructPlayerBase(uint64(*m.PlayerId))
	}
	if len(m.SessionIds) > 0 {
		for _, s := range m.SessionIds {
			l = len(s)
			n += 1 + l + sovTableStructPlayerBase(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTableStructPlayerBase(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTableStructPlayerBase(x uint64) (n int) {
	return sovTableStructPlayerBase(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlayerAccount) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructPlayerBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Email = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Password = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PayPassword = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OpenId = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBind", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsBind = &b
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AreaCode = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UnionId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructPlayerBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("PlayerId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BankInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructPlayerBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BankInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BankInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankCode = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Time = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SignNo = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankPhone = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Provice = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.City = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Area = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructPlayerBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructPlayerBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSafePassword", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsSafePassword = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNewMessage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsNewMessage = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMusic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsMusic = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShake", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsShake = &b
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAddFriend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsAddFriend = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPhone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsPhone = &b
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAccount", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsAccount = &b
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTeamChat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsTeamChat = &b
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsCode = &b
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCard", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsCard = &b
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SafePassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SafePassword = &s
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSafeProtect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsSafeProtect = &b
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTouch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsTouch = &b
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMessageShow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsMessageShow = &b
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpenSquare", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOpenSquare = &b
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpenZanOrComment", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOpenZanOrComment = &b
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpenRecoverComment", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOpenRecoverComment = &b
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpenMyAttention", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOpenMyAttention = &b
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpenRecommend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOpenRecommend = &b
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpenCoinShop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOpenCoinShop = &b
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBanSayHi", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsBanSayHi = &b
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructPlayerBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructPlayerBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collect = append(m.Collect, &Collect{})
			if err := m.Collect[len(m.Collect)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Index = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Time = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructPlayerBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Collect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructPlayerBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Collect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Collect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Time = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Data = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadIcon = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructPlayerBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerBase) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructPlayerBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadIcon = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sex = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Gold = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRobot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsRobot = &b
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastOnLineTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastOnLineTime = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = append(m.Photo, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Email = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeopleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PeopleId = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Phone = &s
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 15:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructPlayerBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TeamIds = append(m.TeamIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructPlayerBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructPlayerBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructPlayerBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TeamIds) == 0 {
					m.TeamIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructPlayerBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TeamIds = append(m.TeamIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamIds", wireType)
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOnline = &b
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankInfo = append(m.BankInfo, &BankInfo{})
			if err := m.BankInfo[len(m.BankInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RealName = &s
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Signature = &s
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Provice = &s
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.City = &s
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Area = &s
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRecommend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsRecommend = &b
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Password = &s
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerSetting == nil {
				m.PlayerSetting = &PlayerSetting{}
			}
			if err := m.PlayerSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructPlayerBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BlackList = append(m.BlackList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructPlayerBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructPlayerBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructPlayerBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BlackList) == 0 {
					m.BlackList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructPlayerBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BlackList = append(m.BlackList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BlackList", wireType)
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLogOutTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastLogOutTime = &v
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginTimes", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LoginTimes = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnlineTime = &v
		case 31:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.X = &v2
		case 32:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Y = &v2
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeviceType = &v
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNearBy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsNearBy = &b
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Channel = &s
			iNdEx = postIndex
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAssistantTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastAssistantTime = &v
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WXOpenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WXOpenId = &s
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WXSessionKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WXSessionKey = &s
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WXUnionid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WXUnionid = &s
			iNdEx = postIndex
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearLocalLogTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearLocalLogTime = &v
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComplaintTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ComplaintTime = &v
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVisitor", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsVisitor = &b
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectInfo = append(m.CollectInfo, &CollectInfo{})
			if err := m.CollectInfo[len(m.CollectInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sid = &v
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TodayOnlineTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TodayOnlineTime = &v
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CreateIP = &s
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLoginIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LastLoginIP = &s
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ApiUrl = &s
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SecretKey = &s
			iNdEx = postIndex
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeTimes", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FreeTimes = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoLoginTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoLoginTime = &v
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoLoginToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AutoLoginToken = &s
			iNdEx = postIndex
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFriend", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFriend = &v
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DeviceCode = &s
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CallInfo == nil {
				m.CallInfo = &CallInfo{}
			}
			if err := m.CallInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 59:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructPlayerBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Label = append(m.Label, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructPlayerBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructPlayerBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructPlayerBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Label) == 0 {
					m.Label = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructPlayerBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Label = append(m.Label, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
		case 60:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRecommendOver", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsRecommendOver = &b
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		case 62:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructPlayerBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CustomTag = append(m.CustomTag, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructPlayerBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructPlayerBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructPlayerBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CustomTag) == 0 {
					m.CustomTag = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructPlayerBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CustomTag = append(m.CustomTag, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomTag", wireType)
			}
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrabTag", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GrabTag = &v
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Token = &s
			iNdEx = postIndex
		case 65:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PayPassword = &s
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Version = &s
			iNdEx = postIndex
		case 67:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Brand = &s
			iNdEx = postIndex
		case 68:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructPlayerBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AttenList = append(m.AttenList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructPlayerBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructPlayerBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructPlayerBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AttenList) == 0 {
					m.AttenList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructPlayerBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AttenList = append(m.AttenList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AttenList", wireType)
			}
		case 69:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructPlayerBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DynamicList = append(m.DynamicList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructPlayerBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructPlayerBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructPlayerBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DynamicList) == 0 {
					m.DynamicList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructPlayerBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DynamicList = append(m.DynamicList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicList", wireType)
			}
		case 70:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zan", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Zan = &v
		case 71:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructPlayerBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FansList = append(m.FansList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructPlayerBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructPlayerBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructPlayerBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.FansList) == 0 {
					m.FansList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructPlayerBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FansList = append(m.FansList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FansList", wireType)
			}
		case 72:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegType = &v
		case 73:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifiedTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VerifiedTime = &v
		case 74:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Coin = &v
		case 75:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CheckNum = &v
		case 76:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AreaCode = &s
			iNdEx = postIndex
		case 77:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackgroundImageURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BackgroundImageURL = &s
			iNdEx = postIndex
		case 78:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBrowse2Square", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsBrowse2Square = &b
		case 79:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApkCode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ApkCode = &v
		case 80:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstAddSquareDynamic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.FirstAddSquareDynamic = &b
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Points1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Points1 == nil {
				m.Points1 = &GeoJson{}
			}
			if err := m.Points1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 82:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCheckChatLog", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsCheckChatLog = &b
		case 83:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distance", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Distance = &v2
		case 84:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BCoin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BCoin = &v
		case 85:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field NearSort", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.NearSort = &v2
		case 86:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineStatus", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnlineStatus = &v
		case 87:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YoungPassWord", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.YoungPassWord = &s
			iNdEx = postIndex
		case 88:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLoadedAllSessions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsLoadedAllSessions = &b
		case 89:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCanRoam", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsCanRoam = &b
		case 90:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VCZanNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VCZanNum = &v
		case 91:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BgImageUrl = &s
			iNdEx = postIndex
		case 92:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MixId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MixId = &v
		case 93:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructPlayerBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PersonalityTags = append(m.PersonalityTags, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructPlayerBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructPlayerBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructPlayerBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PersonalityTags) == 0 {
					m.PersonalityTags = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructPlayerBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PersonalityTags = append(m.PersonalityTags, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PersonalityTags", wireType)
			}
		case 94:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constellation", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Constellation = &v
		case 95:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BsVCZanNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BsVCZanNum = &v
		case 96:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadLoveMeLogTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReadLoveMeLogTime = &v
		case 97:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstellationTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConstellationTime = &v
		case 98:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ESportCoin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ESportCoin = &v
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanOverTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BanOverTime = &v
		case 500:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructPlayerBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("PlayerId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeoJson) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructPlayerBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeoJson: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeoJson: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		case 2:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Coordinates = append(m.Coordinates, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructPlayerBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructPlayerBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructPlayerBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Coordinates) == 0 {
					m.Coordinates = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Coordinates = append(m.Coordinates, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructPlayerBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructPlayerBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SMsg = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructPlayerBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructPlayerBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Friends", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Friends = append(m.Friends, &FriendInfo{})
			if err := m.Friends[len(m.Friends)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructPlayerBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructPlayerBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ReName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Setting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Setting == nil {
				m.Setting = &FriendSetting{}
			}
			if err := m.Setting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructPlayerBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructPlayerBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTopChat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsTopChat = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNoDisturb", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsNoDisturb = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAfterReadClear", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsAfterReadClear = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsScreenShotNotify", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsScreenShotNotify = &b
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructPlayerBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllAddPlayerMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructPlayerBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllAddPlayerMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllAddPlayerMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddPlayerRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddPlayerRequest = append(m.AddPlayerRequest, &AddPlayerRequest{})
			if err := m.AddPlayerRequest[len(m.AddPlayerRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructPlayerBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPlayerRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructPlayerBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPlayerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPlayerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Time = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Phone = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Text = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v AddFriend_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= AddFriend_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsRead = &b
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadIcon = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Signature = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Photo = &s
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sex = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructPlayerBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("PlayerId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerTweets) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructPlayerBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerTweets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerTweets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructPlayerBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TweetsIdList = append(m.TweetsIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructPlayerBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructPlayerBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructPlayerBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TweetsIdList) == 0 {
					m.TweetsIdList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructPlayerBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TweetsIdList = append(m.TweetsIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TweetsIdList", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructPlayerBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("PlayerId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerEmoticon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructPlayerBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerEmoticon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerEmoticon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TypeId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Data = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSave", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsSave = &b
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructPlayerBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerEquipment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructPlayerBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerEquipment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerEquipment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GJ", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GJ = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QP", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QP = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MP", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MP = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QTX", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QTX = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MZBS", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MZBS = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructPlayerBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerBCoinLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructPlayerBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerBCoinLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerBCoinLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Way", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Way = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OverTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BCoin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BCoin = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurBCoin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurBCoin = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsSend = &b
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructPlayerBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerChatSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructPlayerBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerChatSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerChatSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionIds = append(m.SessionIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructPlayerBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructPlayerBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTableStructPlayerBase(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTableStructPlayerBase
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTableStructPlayerBase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTableStructPlayerBase
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTableStructPlayerBase
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTableStructPlayerBase
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTableStructPlayerBase(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTableStructPlayerBase
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTableStructPlayerBase = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTableStructPlayerBase   = fmt.Errorf("proto: integer overflow")
)
