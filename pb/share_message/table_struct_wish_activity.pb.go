// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: table_struct_wish_activity.proto

// 许愿池活动相关proto

package share_message

import (
	fmt "fmt"
	proto "github.com/akqp2019/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//付费用户地理位置分布日志
type PayPlayerLocationLog struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	DayTime              *int64   `protobuf:"varint,2,opt,name=DayTime" json:"DayTime,omitempty" bson:"DayTime,omitempty"`
	Position             *string  `protobuf:"bytes,3,opt,name=Position" json:"Position,omitempty" bson:"Position,omitempty"`
	Piece                *string  `protobuf:"bytes,4,opt,name=Piece" json:"Piece,omitempty" bson:"Piece,omitempty"`
	DeviceType           *int32   `protobuf:"varint,5,opt,name=DeviceType" json:"DeviceType,omitempty" bson:"DeviceType,omitempty"`
	PlayerId             *int64   `protobuf:"varint,6,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PayPlayerLocationLog) Reset()         { *m = PayPlayerLocationLog{} }
func (m *PayPlayerLocationLog) String() string { return proto.CompactTextString(m) }
func (*PayPlayerLocationLog) ProtoMessage()    {}
func (*PayPlayerLocationLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_2354ed9ec4d9d9f1, []int{0}
}
func (m *PayPlayerLocationLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayPlayerLocationLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayPlayerLocationLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayPlayerLocationLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayPlayerLocationLog.Merge(m, src)
}
func (m *PayPlayerLocationLog) XXX_Size() int {
	return m.Size()
}
func (m *PayPlayerLocationLog) XXX_DiscardUnknown() {
	xxx_messageInfo_PayPlayerLocationLog.DiscardUnknown(m)
}

var xxx_messageInfo_PayPlayerLocationLog proto.InternalMessageInfo

func (m *PayPlayerLocationLog) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *PayPlayerLocationLog) GetDayTime() int64 {
	if m != nil && m.DayTime != nil {
		return *m.DayTime
	}
	return 0
}

func (m *PayPlayerLocationLog) GetPosition() string {
	if m != nil && m.Position != nil {
		return *m.Position
	}
	return ""
}

func (m *PayPlayerLocationLog) GetPiece() string {
	if m != nil && m.Piece != nil {
		return *m.Piece
	}
	return ""
}

func (m *PayPlayerLocationLog) GetDeviceType() int32 {
	if m != nil && m.DeviceType != nil {
		return *m.DeviceType
	}
	return 0
}

func (m *PayPlayerLocationLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

//wish_player_activity 玩家扩展表
type WishPlayerActivity struct {
	PlayerId             *int64          `protobuf:"varint,1,opt,name=PlayerId" json:"_id,omitempty" bson:"_id,omitempty"`
	Data                 []*ActivityData `protobuf:"bytes,2,rep,name=Data" json:"Data,omitempty" bson:"Data,omitempty"`
	Diamond              *int64          `protobuf:"varint,4,opt,name=Diamond" json:"Diamond,omitempty" bson:"Diamond,omitempty"`
	WeekPrize            *int64          `protobuf:"varint,5,opt,name=WeekPrize" json:"WeekPrize,omitempty" bson:"WeekPrize,omitempty"`
	MonthPrize           *int64          `protobuf:"varint,6,opt,name=MonthPrize" json:"MonthPrize,omitempty" bson:"MonthPrize,omitempty"`
	UpdateTime           *int64          `protobuf:"varint,8,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	WeekUpdateTime       *int64          `protobuf:"varint,9,opt,name=WeekUpdateTime" json:"WeekUpdateTime,omitempty" bson:"WeekUpdateTime,omitempty"`
	MonthUpdateTime      *int64          `protobuf:"varint,10,opt,name=MonthUpdateTime" json:"MonthUpdateTime,omitempty" bson:"MonthUpdateTime,omitempty"`
	UpdateDiamondTime    *int64          `protobuf:"varint,15,opt,name=UpdateDiamondTime" json:"UpdateDiamondTime,omitempty" bson:"UpdateDiamondTime,omitempty"`
	LastWeekDiamond      *int64          `protobuf:"varint,16,opt,name=LastWeekDiamond" json:"LastWeekDiamond,omitempty" bson:"LastWeekDiamond,omitempty"`
	LastMonthDiamond     *int64          `protobuf:"varint,17,opt,name=LastMonthDiamond" json:"LastMonthDiamond,omitempty" bson:"LastMonthDiamond,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-" bson:"-"`
	XXX_unrecognized     []byte          `json:"-" bson:"-"`
	XXX_sizecache        int32           `json:"-" bson:"-"`
}

func (m *WishPlayerActivity) Reset()         { *m = WishPlayerActivity{} }
func (m *WishPlayerActivity) String() string { return proto.CompactTextString(m) }
func (*WishPlayerActivity) ProtoMessage()    {}
func (*WishPlayerActivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_2354ed9ec4d9d9f1, []int{1}
}
func (m *WishPlayerActivity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishPlayerActivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishPlayerActivity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishPlayerActivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishPlayerActivity.Merge(m, src)
}
func (m *WishPlayerActivity) XXX_Size() int {
	return m.Size()
}
func (m *WishPlayerActivity) XXX_DiscardUnknown() {
	xxx_messageInfo_WishPlayerActivity.DiscardUnknown(m)
}

var xxx_messageInfo_WishPlayerActivity proto.InternalMessageInfo

func (m *WishPlayerActivity) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *WishPlayerActivity) GetData() []*ActivityData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *WishPlayerActivity) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *WishPlayerActivity) GetWeekPrize() int64 {
	if m != nil && m.WeekPrize != nil {
		return *m.WeekPrize
	}
	return 0
}

func (m *WishPlayerActivity) GetMonthPrize() int64 {
	if m != nil && m.MonthPrize != nil {
		return *m.MonthPrize
	}
	return 0
}

func (m *WishPlayerActivity) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *WishPlayerActivity) GetWeekUpdateTime() int64 {
	if m != nil && m.WeekUpdateTime != nil {
		return *m.WeekUpdateTime
	}
	return 0
}

func (m *WishPlayerActivity) GetMonthUpdateTime() int64 {
	if m != nil && m.MonthUpdateTime != nil {
		return *m.MonthUpdateTime
	}
	return 0
}

func (m *WishPlayerActivity) GetUpdateDiamondTime() int64 {
	if m != nil && m.UpdateDiamondTime != nil {
		return *m.UpdateDiamondTime
	}
	return 0
}

func (m *WishPlayerActivity) GetLastWeekDiamond() int64 {
	if m != nil && m.LastWeekDiamond != nil {
		return *m.LastWeekDiamond
	}
	return 0
}

func (m *WishPlayerActivity) GetLastMonthDiamond() int64 {
	if m != nil && m.LastMonthDiamond != nil {
		return *m.LastMonthDiamond
	}
	return 0
}

//活动数据
type ActivityData struct {
	PoolRuleId           *int64   `protobuf:"varint,1,opt,name=PoolRuleId" json:"PoolRuleId,omitempty" bson:"PoolRuleId,omitempty"`
	Value                *int64   `protobuf:"varint,2,opt,name=Value" json:"Value,omitempty" bson:"Value,omitempty"`
	Type                 *int32   `protobuf:"varint,4,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,8,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	DayLun               *int32   `protobuf:"varint,14,opt,name=DayLun" json:"DayLun,omitempty" bson:"DayLun,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ActivityData) Reset()         { *m = ActivityData{} }
func (m *ActivityData) String() string { return proto.CompactTextString(m) }
func (*ActivityData) ProtoMessage()    {}
func (*ActivityData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2354ed9ec4d9d9f1, []int{2}
}
func (m *ActivityData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityData.Merge(m, src)
}
func (m *ActivityData) XXX_Size() int {
	return m.Size()
}
func (m *ActivityData) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityData.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityData proto.InternalMessageInfo

func (m *ActivityData) GetPoolRuleId() int64 {
	if m != nil && m.PoolRuleId != nil {
		return *m.PoolRuleId
	}
	return 0
}

func (m *ActivityData) GetValue() int64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *ActivityData) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *ActivityData) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *ActivityData) GetDayLun() int32 {
	if m != nil && m.DayLun != nil {
		return *m.DayLun
	}
	return 0
}

//活动奖项日志记录:wish_acitvity_prize_log
type WishActivityPrizeLog struct {
	Id            *int64  `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId      *int64  `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Type          *int32  `protobuf:"varint,3,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	PlayerAccount *string `protobuf:"bytes,4,opt,name=PlayerAccount" json:"PlayerAccount,omitempty" bson:"PlayerAccount,omitempty"`
	ActType       *int64  `protobuf:"varint,5,opt,name=ActType" json:"ActType,omitempty" bson:"ActType,omitempty"`
	PrizeType     *int64  `protobuf:"varint,6,opt,name=PrizeType" json:"PrizeType,omitempty" bson:"PrizeType,omitempty"`
	PrizeValue    *int64  `protobuf:"varint,7,opt,name=PrizeValue" json:"PrizeValue,omitempty" bson:"PrizeValue,omitempty"`
	//    optional int64 WishActPoolId = 8;   // 奖池id
	WishActPoolRuleId    *int64   `protobuf:"varint,15,opt,name=WishActPoolRuleId" json:"WishActPoolRuleId,omitempty" bson:"WishActPoolRuleId,omitempty"`
	Status               *int32   `protobuf:"varint,9,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	CreateTime           *int64   `protobuf:"varint,10,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	FinishTime           *int64   `protobuf:"varint,11,opt,name=FinishTime" json:"FinishTime,omitempty" bson:"FinishTime,omitempty"`
	Note                 *string  `protobuf:"bytes,12,opt,name=Note" json:"Note,omitempty" bson:"Note,omitempty"`
	ActTypeTitle         *string  `protobuf:"bytes,13,opt,name=ActTypeTitle" json:"-" bson:"-"`
	DayLun               *int32   `protobuf:"varint,14,opt,name=DayLun" json:"DayLun,omitempty" bson:"DayLun,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishActivityPrizeLog) Reset()         { *m = WishActivityPrizeLog{} }
func (m *WishActivityPrizeLog) String() string { return proto.CompactTextString(m) }
func (*WishActivityPrizeLog) ProtoMessage()    {}
func (*WishActivityPrizeLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_2354ed9ec4d9d9f1, []int{3}
}
func (m *WishActivityPrizeLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishActivityPrizeLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishActivityPrizeLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishActivityPrizeLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishActivityPrizeLog.Merge(m, src)
}
func (m *WishActivityPrizeLog) XXX_Size() int {
	return m.Size()
}
func (m *WishActivityPrizeLog) XXX_DiscardUnknown() {
	xxx_messageInfo_WishActivityPrizeLog.DiscardUnknown(m)
}

var xxx_messageInfo_WishActivityPrizeLog proto.InternalMessageInfo

func (m *WishActivityPrizeLog) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishActivityPrizeLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *WishActivityPrizeLog) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *WishActivityPrizeLog) GetPlayerAccount() string {
	if m != nil && m.PlayerAccount != nil {
		return *m.PlayerAccount
	}
	return ""
}

func (m *WishActivityPrizeLog) GetActType() int64 {
	if m != nil && m.ActType != nil {
		return *m.ActType
	}
	return 0
}

func (m *WishActivityPrizeLog) GetPrizeType() int64 {
	if m != nil && m.PrizeType != nil {
		return *m.PrizeType
	}
	return 0
}

func (m *WishActivityPrizeLog) GetPrizeValue() int64 {
	if m != nil && m.PrizeValue != nil {
		return *m.PrizeValue
	}
	return 0
}

func (m *WishActivityPrizeLog) GetWishActPoolRuleId() int64 {
	if m != nil && m.WishActPoolRuleId != nil {
		return *m.WishActPoolRuleId
	}
	return 0
}

func (m *WishActivityPrizeLog) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *WishActivityPrizeLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishActivityPrizeLog) GetFinishTime() int64 {
	if m != nil && m.FinishTime != nil {
		return *m.FinishTime
	}
	return 0
}

func (m *WishActivityPrizeLog) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

func (m *WishActivityPrizeLog) GetActTypeTitle() string {
	if m != nil && m.ActTypeTitle != nil {
		return *m.ActTypeTitle
	}
	return ""
}

func (m *WishActivityPrizeLog) GetDayLun() int32 {
	if m != nil && m.DayLun != nil {
		return *m.DayLun
	}
	return 0
}

// 活动奖池管理  wish_act_pool
type WishActPool struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string  `protobuf:"bytes,5,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	BoxNum               *int32   `protobuf:"varint,6,opt,name=BoxNum" json:"BoxNum,omitempty" bson:"BoxNum,omitempty"`
	CreateTime           *int64   `protobuf:"varint,7,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	BoxIds               []int64  `protobuf:"varint,8,rep,name=BoxIds" json:"BoxIds,omitempty" bson:"BoxIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishActPool) Reset()         { *m = WishActPool{} }
func (m *WishActPool) String() string { return proto.CompactTextString(m) }
func (*WishActPool) ProtoMessage()    {}
func (*WishActPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_2354ed9ec4d9d9f1, []int{4}
}
func (m *WishActPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishActPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishActPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishActPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishActPool.Merge(m, src)
}
func (m *WishActPool) XXX_Size() int {
	return m.Size()
}
func (m *WishActPool) XXX_DiscardUnknown() {
	xxx_messageInfo_WishActPool.DiscardUnknown(m)
}

var xxx_messageInfo_WishActPool proto.InternalMessageInfo

func (m *WishActPool) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishActPool) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *WishActPool) GetBoxNum() int32 {
	if m != nil && m.BoxNum != nil {
		return *m.BoxNum
	}
	return 0
}

func (m *WishActPool) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishActPool) GetBoxIds() []int64 {
	if m != nil {
		return m.BoxIds
	}
	return nil
}

// 累计规则  wish_act_pool_rule
type WishActPoolRule struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	WishActPoolId        *int64   `protobuf:"varint,2,opt,name=WishActPoolId" json:"WishActPoolId,omitempty" bson:"WishActPoolId,omitempty"`
	Key                  *int32   `protobuf:"varint,11,opt,name=Key" json:"Key,omitempty" bson:"Key,omitempty"`
	Diamond              *int64   `protobuf:"varint,12,opt,name=Diamond" json:"Diamond,omitempty" bson:"Diamond,omitempty"`
	WishItemId           *int64   `protobuf:"varint,13,opt,name=WishItemId" json:"WishItemId,omitempty" bson:"WishItemId,omitempty"`
	AwardType            *int32   `protobuf:"varint,14,opt,name=AwardType" json:"AwardType,omitempty" bson:"AwardType,omitempty"`
	Type                 *int32   `protobuf:"varint,15,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishActPoolRule) Reset()         { *m = WishActPoolRule{} }
func (m *WishActPoolRule) String() string { return proto.CompactTextString(m) }
func (*WishActPoolRule) ProtoMessage()    {}
func (*WishActPoolRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_2354ed9ec4d9d9f1, []int{5}
}
func (m *WishActPoolRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishActPoolRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishActPoolRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishActPoolRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishActPoolRule.Merge(m, src)
}
func (m *WishActPoolRule) XXX_Size() int {
	return m.Size()
}
func (m *WishActPoolRule) XXX_DiscardUnknown() {
	xxx_messageInfo_WishActPoolRule.DiscardUnknown(m)
}

var xxx_messageInfo_WishActPoolRule proto.InternalMessageInfo

func (m *WishActPoolRule) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishActPoolRule) GetWishActPoolId() int64 {
	if m != nil && m.WishActPoolId != nil {
		return *m.WishActPoolId
	}
	return 0
}

func (m *WishActPoolRule) GetKey() int32 {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return 0
}

func (m *WishActPoolRule) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *WishActPoolRule) GetWishItemId() int64 {
	if m != nil && m.WishItemId != nil {
		return *m.WishItemId
	}
	return 0
}

func (m *WishActPoolRule) GetAwardType() int32 {
	if m != nil && m.AwardType != nil {
		return *m.AwardType
	}
	return 0
}

func (m *WishActPoolRule) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

//充值活动配置表wish_coin_recharge_act_cfg
type WishCoinRechargeActivityCfg struct {
	//硬币额度
	Id *int64 `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	//人民币额度 单位分
	Amount *int64 `protobuf:"varint,2,opt,name=Amount" json:"Amount,omitempty" bson:"Amount,omitempty"`
	//首充赠送钻石数
	FirstDiamond *int64 `protobuf:"varint,3,opt,name=FirstDiamond" json:"FirstDiamond,omitempty" bson:"FirstDiamond,omitempty"`
	//是否首充送展示
	IsFirstDiamond *bool `protobuf:"varint,4,opt,name=IsFirstDiamond" json:"IsFirstDiamond,omitempty" bson:"IsFirstDiamond,omitempty"`
	//首充赠送电竞币数
	FirstEsCoin *int64 `protobuf:"varint,5,opt,name=FirstEsCoin" json:"FirstEsCoin,omitempty" bson:"FirstEsCoin,omitempty"`
	//是否首充赠送电竞币数
	IsFirstEsCoin *bool `protobuf:"varint,6,opt,name=IsFirstEsCoin" json:"IsFirstEsCoin,omitempty" bson:"IsFirstEsCoin,omitempty"`
	//首充赠送比例
	FirstRatio *int64 `protobuf:"varint,7,opt,name=FirstRatio" json:"FirstRatio,omitempty" bson:"FirstRatio,omitempty"`
	//日常赠送钻石数
	DailyDiamond *int64 `protobuf:"varint,8,opt,name=DailyDiamond" json:"DailyDiamond,omitempty" bson:"DailyDiamond,omitempty"`
	//是否日常赠送钻石数
	IsDailyDiamond *bool `protobuf:"varint,9,opt,name=IsDailyDiamond" json:"IsDailyDiamond,omitempty" bson:"IsDailyDiamond,omitempty"`
	//日常赠送电竞币数
	DailyEsCoin *int64 `protobuf:"varint,10,opt,name=DailyEsCoin" json:"DailyEsCoin,omitempty" bson:"DailyEsCoin,omitempty"`
	//是否日常赠送电竞币数
	IsDailyEsCoin *bool `protobuf:"varint,11,opt,name=IsDailyEsCoin" json:"IsDailyEsCoin,omitempty" bson:"IsDailyEsCoin,omitempty"`
	//日常赠送比例
	DailyRatio           *int64   `protobuf:"varint,12,opt,name=DailyRatio" json:"DailyRatio,omitempty" bson:"DailyRatio,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishCoinRechargeActivityCfg) Reset()         { *m = WishCoinRechargeActivityCfg{} }
func (m *WishCoinRechargeActivityCfg) String() string { return proto.CompactTextString(m) }
func (*WishCoinRechargeActivityCfg) ProtoMessage()    {}
func (*WishCoinRechargeActivityCfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_2354ed9ec4d9d9f1, []int{6}
}
func (m *WishCoinRechargeActivityCfg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishCoinRechargeActivityCfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishCoinRechargeActivityCfg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishCoinRechargeActivityCfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishCoinRechargeActivityCfg.Merge(m, src)
}
func (m *WishCoinRechargeActivityCfg) XXX_Size() int {
	return m.Size()
}
func (m *WishCoinRechargeActivityCfg) XXX_DiscardUnknown() {
	xxx_messageInfo_WishCoinRechargeActivityCfg.DiscardUnknown(m)
}

var xxx_messageInfo_WishCoinRechargeActivityCfg proto.InternalMessageInfo

func (m *WishCoinRechargeActivityCfg) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishCoinRechargeActivityCfg) GetAmount() int64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *WishCoinRechargeActivityCfg) GetFirstDiamond() int64 {
	if m != nil && m.FirstDiamond != nil {
		return *m.FirstDiamond
	}
	return 0
}

func (m *WishCoinRechargeActivityCfg) GetIsFirstDiamond() bool {
	if m != nil && m.IsFirstDiamond != nil {
		return *m.IsFirstDiamond
	}
	return false
}

func (m *WishCoinRechargeActivityCfg) GetFirstEsCoin() int64 {
	if m != nil && m.FirstEsCoin != nil {
		return *m.FirstEsCoin
	}
	return 0
}

func (m *WishCoinRechargeActivityCfg) GetIsFirstEsCoin() bool {
	if m != nil && m.IsFirstEsCoin != nil {
		return *m.IsFirstEsCoin
	}
	return false
}

func (m *WishCoinRechargeActivityCfg) GetFirstRatio() int64 {
	if m != nil && m.FirstRatio != nil {
		return *m.FirstRatio
	}
	return 0
}

func (m *WishCoinRechargeActivityCfg) GetDailyDiamond() int64 {
	if m != nil && m.DailyDiamond != nil {
		return *m.DailyDiamond
	}
	return 0
}

func (m *WishCoinRechargeActivityCfg) GetIsDailyDiamond() bool {
	if m != nil && m.IsDailyDiamond != nil {
		return *m.IsDailyDiamond
	}
	return false
}

func (m *WishCoinRechargeActivityCfg) GetDailyEsCoin() int64 {
	if m != nil && m.DailyEsCoin != nil {
		return *m.DailyEsCoin
	}
	return 0
}

func (m *WishCoinRechargeActivityCfg) GetIsDailyEsCoin() bool {
	if m != nil && m.IsDailyEsCoin != nil {
		return *m.IsDailyEsCoin
	}
	return false
}

func (m *WishCoinRechargeActivityCfg) GetDailyRatio() int64 {
	if m != nil && m.DailyRatio != nil {
		return *m.DailyRatio
	}
	return 0
}

//用户访问记录表 wish_player_access_log
type WishPlayerAccessLog struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"_id,omitempty" bson:"_id,omitempty"`
	WishTime             *int64   `protobuf:"varint,2,opt,name=WishTime" json:"WishTime,omitempty" bson:"WishTime,omitempty"`
	ExchangeTime         *int64   `protobuf:"varint,3,opt,name=ExchangeTime" json:"ExchangeTime,omitempty" bson:"ExchangeTime,omitempty"`
	DareTime             *int64   `protobuf:"varint,4,opt,name=DareTime" json:"DareTime,omitempty" bson:"DareTime,omitempty"`
	ChallengeTime        *int64   `protobuf:"varint,5,opt,name=ChallengeTime" json:"ChallengeTime,omitempty" bson:"ChallengeTime,omitempty"`
	VExchangeTime        *int64   `protobuf:"varint,6,opt,name=VExchangeTime" json:"VExchangeTime,omitempty" bson:"VExchangeTime,omitempty"`
	RetainedDay          *int32   `protobuf:"varint,7,opt,name=RetainedDay" json:"RetainedDay,omitempty" bson:"RetainedDay,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishPlayerAccessLog) Reset()         { *m = WishPlayerAccessLog{} }
func (m *WishPlayerAccessLog) String() string { return proto.CompactTextString(m) }
func (*WishPlayerAccessLog) ProtoMessage()    {}
func (*WishPlayerAccessLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_2354ed9ec4d9d9f1, []int{7}
}
func (m *WishPlayerAccessLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishPlayerAccessLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishPlayerAccessLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishPlayerAccessLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishPlayerAccessLog.Merge(m, src)
}
func (m *WishPlayerAccessLog) XXX_Size() int {
	return m.Size()
}
func (m *WishPlayerAccessLog) XXX_DiscardUnknown() {
	xxx_messageInfo_WishPlayerAccessLog.DiscardUnknown(m)
}

var xxx_messageInfo_WishPlayerAccessLog proto.InternalMessageInfo

func (m *WishPlayerAccessLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *WishPlayerAccessLog) GetWishTime() int64 {
	if m != nil && m.WishTime != nil {
		return *m.WishTime
	}
	return 0
}

func (m *WishPlayerAccessLog) GetExchangeTime() int64 {
	if m != nil && m.ExchangeTime != nil {
		return *m.ExchangeTime
	}
	return 0
}

func (m *WishPlayerAccessLog) GetDareTime() int64 {
	if m != nil && m.DareTime != nil {
		return *m.DareTime
	}
	return 0
}

func (m *WishPlayerAccessLog) GetChallengeTime() int64 {
	if m != nil && m.ChallengeTime != nil {
		return *m.ChallengeTime
	}
	return 0
}

func (m *WishPlayerAccessLog) GetVExchangeTime() int64 {
	if m != nil && m.VExchangeTime != nil {
		return *m.VExchangeTime
	}
	return 0
}

func (m *WishPlayerAccessLog) GetRetainedDay() int32 {
	if m != nil && m.RetainedDay != nil {
		return *m.RetainedDay
	}
	return 0
}

//埋点统计许愿池访问报表 report_wish_log
type WishLogReport struct {
	CreateTime           *int64   `protobuf:"varint,1,opt,name=CreateTime" json:"_id,omitempty" bson:"_id,omitempty"`
	WishTime             *int64   `protobuf:"varint,2,opt,name=WishTime" json:"WishTime,omitempty" bson:"WishTime,omitempty"`
	NewPlayer            *int32   `protobuf:"varint,3,opt,name=NewPlayer" json:"NewPlayer,omitempty" bson:"NewPlayer,omitempty"`
	OldPlayer            *int32   `protobuf:"varint,4,opt,name=OldPlayer" json:"OldPlayer,omitempty" bson:"OldPlayer,omitempty"`
	ExchangeMen          *int64   `protobuf:"varint,5,opt,name=ExchangeMen" json:"ExchangeMen,omitempty" bson:"ExchangeMen,omitempty"`
	VExchangeTime        *int64   `protobuf:"varint,6,opt,name=VExchangeTime" json:"VExchangeTime,omitempty" bson:"VExchangeTime,omitempty"`
	VExchangeMen         *int32   `protobuf:"varint,7,opt,name=VExchangeMen" json:"VExchangeMen,omitempty" bson:"VExchangeMen,omitempty"`
	DareMen              *int32   `protobuf:"varint,8,opt,name=DareMen" json:"DareMen,omitempty" bson:"DareMen,omitempty"`
	ChallengeMen         *int32   `protobuf:"varint,9,opt,name=ChallengeMen" json:"ChallengeMen,omitempty" bson:"ChallengeMen,omitempty"`
	TwoDayKeep           *int32   `protobuf:"varint,10,opt,name=TwoDayKeep" json:"TwoDayKeep,omitempty" bson:"TwoDayKeep,omitempty"`
	ThreeDayKeep         *int32   `protobuf:"varint,11,opt,name=ThreeDayKeep" json:"ThreeDayKeep,omitempty" bson:"ThreeDayKeep,omitempty"`
	SevenDayKeep         *int32   `protobuf:"varint,12,opt,name=SevenDayKeep" json:"SevenDayKeep,omitempty" bson:"SevenDayKeep,omitempty"`
	FifteenDayKeep       *int32   `protobuf:"varint,13,opt,name=FifteenDayKeep" json:"FifteenDayKeep,omitempty" bson:"FifteenDayKeep,omitempty"`
	ThirtyDayKeep        *int32   `protobuf:"varint,14,opt,name=ThirtyDayKeep" json:"ThirtyDayKeep,omitempty" bson:"ThirtyDayKeep,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishLogReport) Reset()         { *m = WishLogReport{} }
func (m *WishLogReport) String() string { return proto.CompactTextString(m) }
func (*WishLogReport) ProtoMessage()    {}
func (*WishLogReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_2354ed9ec4d9d9f1, []int{8}
}
func (m *WishLogReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishLogReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishLogReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishLogReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishLogReport.Merge(m, src)
}
func (m *WishLogReport) XXX_Size() int {
	return m.Size()
}
func (m *WishLogReport) XXX_DiscardUnknown() {
	xxx_messageInfo_WishLogReport.DiscardUnknown(m)
}

var xxx_messageInfo_WishLogReport proto.InternalMessageInfo

func (m *WishLogReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishLogReport) GetWishTime() int64 {
	if m != nil && m.WishTime != nil {
		return *m.WishTime
	}
	return 0
}

func (m *WishLogReport) GetNewPlayer() int32 {
	if m != nil && m.NewPlayer != nil {
		return *m.NewPlayer
	}
	return 0
}

func (m *WishLogReport) GetOldPlayer() int32 {
	if m != nil && m.OldPlayer != nil {
		return *m.OldPlayer
	}
	return 0
}

func (m *WishLogReport) GetExchangeMen() int64 {
	if m != nil && m.ExchangeMen != nil {
		return *m.ExchangeMen
	}
	return 0
}

func (m *WishLogReport) GetVExchangeTime() int64 {
	if m != nil && m.VExchangeTime != nil {
		return *m.VExchangeTime
	}
	return 0
}

func (m *WishLogReport) GetVExchangeMen() int32 {
	if m != nil && m.VExchangeMen != nil {
		return *m.VExchangeMen
	}
	return 0
}

func (m *WishLogReport) GetDareMen() int32 {
	if m != nil && m.DareMen != nil {
		return *m.DareMen
	}
	return 0
}

func (m *WishLogReport) GetChallengeMen() int32 {
	if m != nil && m.ChallengeMen != nil {
		return *m.ChallengeMen
	}
	return 0
}

func (m *WishLogReport) GetTwoDayKeep() int32 {
	if m != nil && m.TwoDayKeep != nil {
		return *m.TwoDayKeep
	}
	return 0
}

func (m *WishLogReport) GetThreeDayKeep() int32 {
	if m != nil && m.ThreeDayKeep != nil {
		return *m.ThreeDayKeep
	}
	return 0
}

func (m *WishLogReport) GetSevenDayKeep() int32 {
	if m != nil && m.SevenDayKeep != nil {
		return *m.SevenDayKeep
	}
	return 0
}

func (m *WishLogReport) GetFifteenDayKeep() int32 {
	if m != nil && m.FifteenDayKeep != nil {
		return *m.FifteenDayKeep
	}
	return 0
}

func (m *WishLogReport) GetThirtyDayKeep() int32 {
	if m != nil && m.ThirtyDayKeep != nil {
		return *m.ThirtyDayKeep
	}
	return 0
}

//用户首充记录 player_recharge_first
type PlayerRechargeActFirst struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"_id,omitempty" bson:"_id,omitempty"`
	Levels               []int64  `protobuf:"varint,2,rep,name=Levels" json:"Levels,omitempty" bson:"Levels,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerRechargeActFirst) Reset()         { *m = PlayerRechargeActFirst{} }
func (m *PlayerRechargeActFirst) String() string { return proto.CompactTextString(m) }
func (*PlayerRechargeActFirst) ProtoMessage()    {}
func (*PlayerRechargeActFirst) Descriptor() ([]byte, []int) {
	return fileDescriptor_2354ed9ec4d9d9f1, []int{9}
}
func (m *PlayerRechargeActFirst) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerRechargeActFirst) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerRechargeActFirst.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerRechargeActFirst) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerRechargeActFirst.Merge(m, src)
}
func (m *PlayerRechargeActFirst) XXX_Size() int {
	return m.Size()
}
func (m *PlayerRechargeActFirst) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerRechargeActFirst.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerRechargeActFirst proto.InternalMessageInfo

func (m *PlayerRechargeActFirst) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerRechargeActFirst) GetLevels() []int64 {
	if m != nil {
		return m.Levels
	}
	return nil
}

//用户充值活动日志表 player_recharge_act_log
type PlayerRechargeActLog struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=id" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	CreateTime           *int64   `protobuf:"varint,3,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	Money                *int64   `protobuf:"varint,4,opt,name=Money" json:"Money,omitempty" bson:"Money,omitempty"`
	Coin                 *int64   `protobuf:"varint,5,opt,name=Coin" json:"Coin,omitempty" bson:"Coin,omitempty"`
	GiveCoin             *int64   `protobuf:"varint,6,opt,name=GiveCoin" json:"GiveCoin,omitempty" bson:"GiveCoin,omitempty"`
	GiveType             *int32   `protobuf:"varint,7,opt,name=GiveType" json:"GiveType,omitempty" bson:"GiveType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerRechargeActLog) Reset()         { *m = PlayerRechargeActLog{} }
func (m *PlayerRechargeActLog) String() string { return proto.CompactTextString(m) }
func (*PlayerRechargeActLog) ProtoMessage()    {}
func (*PlayerRechargeActLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_2354ed9ec4d9d9f1, []int{10}
}
func (m *PlayerRechargeActLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerRechargeActLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerRechargeActLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerRechargeActLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerRechargeActLog.Merge(m, src)
}
func (m *PlayerRechargeActLog) XXX_Size() int {
	return m.Size()
}
func (m *PlayerRechargeActLog) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerRechargeActLog.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerRechargeActLog proto.InternalMessageInfo

func (m *PlayerRechargeActLog) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerRechargeActLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerRechargeActLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PlayerRechargeActLog) GetMoney() int64 {
	if m != nil && m.Money != nil {
		return *m.Money
	}
	return 0
}

func (m *PlayerRechargeActLog) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *PlayerRechargeActLog) GetGiveCoin() int64 {
	if m != nil && m.GiveCoin != nil {
		return *m.GiveCoin
	}
	return 0
}

func (m *PlayerRechargeActLog) GetGiveType() int32 {
	if m != nil && m.GiveType != nil {
		return *m.GiveType
	}
	return 0
}

// 许愿池活动后台报表 report_wish_activity
type WishActivityReport struct {
	CreateTime           *int64              `protobuf:"varint,1,opt,name=CreateTime" json:"_id,omitempty" bson:"_id,omitempty"`
	InPoolCount          *int64              `protobuf:"varint,2,opt,name=InPoolCount" json:"InPoolCount,omitempty" bson:"InPoolCount,omitempty"`
	InPoolPlayerCount    *int32              `protobuf:"varint,3,opt,name=InPoolPlayerCount" json:"InPoolPlayerCount,omitempty" bson:"InPoolPlayerCount,omitempty"`
	DayCountData         []*WishActivityUnit `protobuf:"bytes,4,rep,name=DayCountData" json:"DayCountData,omitempty" bson:"DayCountData,omitempty"`
	CounterData          []*WishActivityUnit `protobuf:"bytes,5,rep,name=CounterData" json:"CounterData,omitempty" bson:"CounterData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-" bson:"-"`
	XXX_unrecognized     []byte              `json:"-" bson:"-"`
	XXX_sizecache        int32               `json:"-" bson:"-"`
}

func (m *WishActivityReport) Reset()         { *m = WishActivityReport{} }
func (m *WishActivityReport) String() string { return proto.CompactTextString(m) }
func (*WishActivityReport) ProtoMessage()    {}
func (*WishActivityReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_2354ed9ec4d9d9f1, []int{11}
}
func (m *WishActivityReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishActivityReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishActivityReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishActivityReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishActivityReport.Merge(m, src)
}
func (m *WishActivityReport) XXX_Size() int {
	return m.Size()
}
func (m *WishActivityReport) XXX_DiscardUnknown() {
	xxx_messageInfo_WishActivityReport.DiscardUnknown(m)
}

var xxx_messageInfo_WishActivityReport proto.InternalMessageInfo

func (m *WishActivityReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishActivityReport) GetInPoolCount() int64 {
	if m != nil && m.InPoolCount != nil {
		return *m.InPoolCount
	}
	return 0
}

func (m *WishActivityReport) GetInPoolPlayerCount() int32 {
	if m != nil && m.InPoolPlayerCount != nil {
		return *m.InPoolPlayerCount
	}
	return 0
}

func (m *WishActivityReport) GetDayCountData() []*WishActivityUnit {
	if m != nil {
		return m.DayCountData
	}
	return nil
}

func (m *WishActivityReport) GetCounterData() []*WishActivityUnit {
	if m != nil {
		return m.CounterData
	}
	return nil
}

// 许愿池活动累计完成天/次数数的用户数
type WishActivityUnit struct {
	WishActPoolRuleId    *int64   `protobuf:"varint,1,opt,name=WishActPoolRuleId" json:"WishActPoolRuleId,omitempty" bson:"WishActPoolRuleId,omitempty"`
	ActPoolId            *int64   `protobuf:"varint,2,opt,name=ActPoolId" json:"ActPoolId,omitempty" bson:"ActPoolId,omitempty"`
	Count                *int32   `protobuf:"varint,3,opt,name=Count" json:"Count,omitempty" bson:"Count,omitempty"`
	Key                  *string  `protobuf:"bytes,4,opt,name=Key" json:"Key,omitempty" bson:"Key,omitempty"`
	Value                *int64   `protobuf:"varint,5,opt,name=Value" json:"Value,omitempty" bson:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishActivityUnit) Reset()         { *m = WishActivityUnit{} }
func (m *WishActivityUnit) String() string { return proto.CompactTextString(m) }
func (*WishActivityUnit) ProtoMessage()    {}
func (*WishActivityUnit) Descriptor() ([]byte, []int) {
	return fileDescriptor_2354ed9ec4d9d9f1, []int{12}
}
func (m *WishActivityUnit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishActivityUnit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishActivityUnit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishActivityUnit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishActivityUnit.Merge(m, src)
}
func (m *WishActivityUnit) XXX_Size() int {
	return m.Size()
}
func (m *WishActivityUnit) XXX_DiscardUnknown() {
	xxx_messageInfo_WishActivityUnit.DiscardUnknown(m)
}

var xxx_messageInfo_WishActivityUnit proto.InternalMessageInfo

func (m *WishActivityUnit) GetWishActPoolRuleId() int64 {
	if m != nil && m.WishActPoolRuleId != nil {
		return *m.WishActPoolRuleId
	}
	return 0
}

func (m *WishActivityUnit) GetActPoolId() int64 {
	if m != nil && m.ActPoolId != nil {
		return *m.ActPoolId
	}
	return 0
}

func (m *WishActivityUnit) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *WishActivityUnit) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *WishActivityUnit) GetValue() int64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

// 周排名 wish_week_top
type WishWeekTop struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"_id,omitempty" bson:"_id,omitempty"`
	WeekPrize            *int64   `protobuf:"varint,4,opt,name=WeekPrize" json:"WeekPrize,omitempty" bson:"WeekPrize,omitempty"`
	WeekPrizeId          *int64   `protobuf:"varint,16,opt,name=WeekPrizeId" json:"WeekPrizeId,omitempty" bson:"WeekPrizeId,omitempty"`
	CreateTime           *int64   `protobuf:"varint,8,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	Status               *int64   `protobuf:"varint,9,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishWeekTop) Reset()         { *m = WishWeekTop{} }
func (m *WishWeekTop) String() string { return proto.CompactTextString(m) }
func (*WishWeekTop) ProtoMessage()    {}
func (*WishWeekTop) Descriptor() ([]byte, []int) {
	return fileDescriptor_2354ed9ec4d9d9f1, []int{13}
}
func (m *WishWeekTop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishWeekTop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishWeekTop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishWeekTop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishWeekTop.Merge(m, src)
}
func (m *WishWeekTop) XXX_Size() int {
	return m.Size()
}
func (m *WishWeekTop) XXX_DiscardUnknown() {
	xxx_messageInfo_WishWeekTop.DiscardUnknown(m)
}

var xxx_messageInfo_WishWeekTop proto.InternalMessageInfo

func (m *WishWeekTop) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *WishWeekTop) GetWeekPrize() int64 {
	if m != nil && m.WeekPrize != nil {
		return *m.WeekPrize
	}
	return 0
}

func (m *WishWeekTop) GetWeekPrizeId() int64 {
	if m != nil && m.WeekPrizeId != nil {
		return *m.WeekPrizeId
	}
	return 0
}

func (m *WishWeekTop) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishWeekTop) GetStatus() int64 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

// 月排名 wish_month_top
type WishMonthTop struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"_id,omitempty" bson:"_id,omitempty"`
	MonthPrize           *int64   `protobuf:"varint,4,opt,name=MonthPrize" json:"MonthPrize,omitempty" bson:"MonthPrize,omitempty"`
	MonthPrizeId         *int64   `protobuf:"varint,16,opt,name=MonthPrizeId" json:"MonthPrizeId,omitempty" bson:"MonthPrizeId,omitempty"`
	CreateTime           *int64   `protobuf:"varint,8,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	Status               *int64   `protobuf:"varint,9,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishMonthTop) Reset()         { *m = WishMonthTop{} }
func (m *WishMonthTop) String() string { return proto.CompactTextString(m) }
func (*WishMonthTop) ProtoMessage()    {}
func (*WishMonthTop) Descriptor() ([]byte, []int) {
	return fileDescriptor_2354ed9ec4d9d9f1, []int{14}
}
func (m *WishMonthTop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishMonthTop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishMonthTop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishMonthTop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishMonthTop.Merge(m, src)
}
func (m *WishMonthTop) XXX_Size() int {
	return m.Size()
}
func (m *WishMonthTop) XXX_DiscardUnknown() {
	xxx_messageInfo_WishMonthTop.DiscardUnknown(m)
}

var xxx_messageInfo_WishMonthTop proto.InternalMessageInfo

func (m *WishMonthTop) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *WishMonthTop) GetMonthPrize() int64 {
	if m != nil && m.MonthPrize != nil {
		return *m.MonthPrize
	}
	return 0
}

func (m *WishMonthTop) GetMonthPrizeId() int64 {
	if m != nil && m.MonthPrizeId != nil {
		return *m.MonthPrizeId
	}
	return 0
}

func (m *WishMonthTop) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishMonthTop) GetStatus() int64 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

// 玩家抽奖记录,去重天数的.  wish_day_activity_log
type WishDayActivityLog struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=id" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,3,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	WishActPoolId        *int64   `protobuf:"varint,2,opt,name=WishActPoolId" json:"WishActPoolId,omitempty" bson:"WishActPoolId,omitempty"`
	CreateTime           *int64   `protobuf:"varint,8,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishDayActivityLog) Reset()         { *m = WishDayActivityLog{} }
func (m *WishDayActivityLog) String() string { return proto.CompactTextString(m) }
func (*WishDayActivityLog) ProtoMessage()    {}
func (*WishDayActivityLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_2354ed9ec4d9d9f1, []int{15}
}
func (m *WishDayActivityLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishDayActivityLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishDayActivityLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishDayActivityLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishDayActivityLog.Merge(m, src)
}
func (m *WishDayActivityLog) XXX_Size() int {
	return m.Size()
}
func (m *WishDayActivityLog) XXX_DiscardUnknown() {
	xxx_messageInfo_WishDayActivityLog.DiscardUnknown(m)
}

var xxx_messageInfo_WishDayActivityLog proto.InternalMessageInfo

func (m *WishDayActivityLog) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishDayActivityLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *WishDayActivityLog) GetWishActPoolId() int64 {
	if m != nil && m.WishActPoolId != nil {
		return *m.WishActPoolId
	}
	return 0
}

func (m *WishDayActivityLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func init() {
	proto.RegisterType((*PayPlayerLocationLog)(nil), "share_message.PayPlayerLocationLog")
	proto.RegisterType((*WishPlayerActivity)(nil), "share_message.WishPlayerActivity")
	proto.RegisterType((*ActivityData)(nil), "share_message.ActivityData")
	proto.RegisterType((*WishActivityPrizeLog)(nil), "share_message.WishActivityPrizeLog")
	proto.RegisterType((*WishActPool)(nil), "share_message.WishActPool")
	proto.RegisterType((*WishActPoolRule)(nil), "share_message.WishActPoolRule")
	proto.RegisterType((*WishCoinRechargeActivityCfg)(nil), "share_message.WishCoinRechargeActivityCfg")
	proto.RegisterType((*WishPlayerAccessLog)(nil), "share_message.WishPlayerAccessLog")
	proto.RegisterType((*WishLogReport)(nil), "share_message.WishLogReport")
	proto.RegisterType((*PlayerRechargeActFirst)(nil), "share_message.PlayerRechargeActFirst")
	proto.RegisterType((*PlayerRechargeActLog)(nil), "share_message.PlayerRechargeActLog")
	proto.RegisterType((*WishActivityReport)(nil), "share_message.WishActivityReport")
	proto.RegisterType((*WishActivityUnit)(nil), "share_message.WishActivityUnit")
	proto.RegisterType((*WishWeekTop)(nil), "share_message.WishWeekTop")
	proto.RegisterType((*WishMonthTop)(nil), "share_message.WishMonthTop")
	proto.RegisterType((*WishDayActivityLog)(nil), "share_message.WishDayActivityLog")
}

func init() { proto.RegisterFile("table_struct_wish_activity.proto", fileDescriptor_2354ed9ec4d9d9f1) }

var fileDescriptor_2354ed9ec4d9d9f1 = []byte{
	// 1134 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x96, 0xe3, 0x24, 0x4d, 0x8e, 0x9d, 0x3f, 0x37, 0x2d, 0x5e, 0x2a, 0xda, 0x28, 0x08, 0xa9,
	0x48, 0xd0, 0x0b, 0x04, 0x0f, 0xd0, 0x36, 0x5b, 0x14, 0x6d, 0x5a, 0xa2, 0x6e, 0xb6, 0xbd, 0xac,
	0x06, 0x67, 0x36, 0x1e, 0xad, 0xe3, 0x89, 0xec, 0x49, 0x5b, 0x73, 0x81, 0xc4, 0x03, 0xf0, 0x02,
	0x88, 0x07, 0xe0, 0x0e, 0x89, 0x1b, 0xde, 0x00, 0x71, 0xc9, 0x25, 0x57, 0x2b, 0xd4, 0xcb, 0x7d,
	0x0a, 0x34, 0x67, 0x3c, 0xae, 0xdd, 0x8d, 0xb6, 0xcd, 0xa5, 0x3f, 0xcf, 0x99, 0xf3, 0x9d, 0x73,
	0xbe, 0xf9, 0x66, 0xa0, 0x27, 0xc8, 0xf7, 0x01, 0xbd, 0x8a, 0x45, 0xb4, 0xf4, 0xc4, 0xd5, 0x0d,
	0x8b, 0xfd, 0x2b, 0xe2, 0x09, 0x76, 0xcd, 0x44, 0x72, 0xb0, 0x88, 0xb8, 0xe0, 0x4e, 0x23, 0xf6,
	0x49, 0x44, 0xaf, 0xe6, 0x34, 0x8e, 0xc9, 0x8c, 0x7e, 0x6c, 0xcf, 0x66, 0x5c, 0x90, 0x99, 0xfa,
	0xd9, 0xff, 0xd9, 0x80, 0xee, 0x98, 0x24, 0xe3, 0x80, 0x24, 0x34, 0x1a, 0x71, 0x8f, 0x08, 0xc6,
	0xc3, 0x11, 0x9f, 0x39, 0x9f, 0x40, 0x69, 0x38, 0x75, 0x8d, 0x9e, 0xb1, 0x5f, 0x3f, 0xea, 0xbc,
	0x7b, 0xbb, 0xd7, 0xb8, 0x62, 0xd3, 0x2f, 0xf8, 0x9c, 0x09, 0x3a, 0x5f, 0x88, 0xc4, 0x69, 0xc1,
	0xc6, 0x80, 0x24, 0x13, 0x36, 0xa7, 0x6e, 0xa9, 0x67, 0xec, 0x9b, 0x4e, 0x1b, 0x6a, 0x63, 0x1e,
	0x33, 0x19, 0xee, 0x9a, 0x32, 0xca, 0x69, 0x40, 0x65, 0xcc, 0xa8, 0x47, 0xdd, 0x32, 0x7e, 0x3a,
	0x00, 0x03, 0x7a, 0xcd, 0x3c, 0x3a, 0x49, 0x16, 0xd4, 0xad, 0xf4, 0x8c, 0xfd, 0x0a, 0x06, 0x61,
	0xe6, 0xe1, 0xd4, 0xad, 0xca, 0x6d, 0xfa, 0xbf, 0x97, 0xc0, 0xb9, 0x64, 0xb1, 0xaf, 0xe0, 0xc3,
	0xb4, 0x12, 0xe7, 0xd3, 0xdc, 0x42, 0xc9, 0xc9, 0x5c, 0xc5, 0xe9, 0x73, 0x28, 0x0f, 0x88, 0x20,
	0x6e, 0xa9, 0x67, 0xee, 0x5b, 0x5f, 0xed, 0x1c, 0x14, 0xea, 0x3e, 0xd0, 0x7b, 0xc9, 0x25, 0x48,
	0x9f, 0x91, 0x39, 0x0f, 0xa7, 0xc8, 0xce, 0x74, 0x3a, 0x50, 0xbf, 0xa4, 0xf4, 0xcd, 0x38, 0x62,
	0x3f, 0x28, 0x72, 0xa6, 0x24, 0x7c, 0xca, 0x43, 0xe1, 0x2b, 0xac, 0xaa, 0xb1, 0x57, 0x8b, 0x29,
	0x11, 0x14, 0x2b, 0xaf, 0x21, 0xb6, 0x0d, 0x4d, 0x19, 0x9a, 0xc3, 0xeb, 0x88, 0x7f, 0x04, 0x2d,
	0x8c, 0xcf, 0xfd, 0x00, 0xfc, 0xf1, 0x0c, 0x3a, 0x0a, 0x4b, 0x29, 0xe0, 0xaf, 0x96, 0x8e, 0x19,
	0x91, 0x58, 0xc8, 0xfd, 0x34, 0xbf, 0x36, 0xfe, 0x70, 0xa1, 0x2d, 0x7f, 0xe0, 0x86, 0xfa, 0x4f,
	0x07, 0x3b, 0xe6, 0x81, 0x5d, 0x28, 0xcd, 0x01, 0x18, 0x73, 0x1e, 0x9c, 0x2f, 0x03, 0xaa, 0x9b,
	0x25, 0x47, 0x71, 0x41, 0x82, 0xa5, 0x9e, 0x95, 0x0d, 0x65, 0x1c, 0x42, 0x19, 0x87, 0xb0, 0xaa,
	0xa6, 0x26, 0x54, 0x07, 0x24, 0x19, 0x2d, 0x43, 0xb7, 0x29, 0xd7, 0xf4, 0xff, 0x28, 0x41, 0x57,
	0x8e, 0x45, 0x67, 0xc2, 0x9e, 0x14, 0x65, 0xb2, 0x72, 0x24, 0xf9, 0x01, 0x17, 0x73, 0x9b, 0x98,
	0x7b, 0x0b, 0x1a, 0x7a, 0xd2, 0x1e, 0x5f, 0x86, 0x22, 0xd5, 0x4a, 0x0b, 0x36, 0x0e, 0x3d, 0x91,
	0x09, 0x05, 0xc7, 0x83, 0x29, 0x11, 0xca, 0x46, 0x81, 0x90, 0x2a, 0x6c, 0x43, 0x77, 0x36, 0x65,
	0x99, 0x6b, 0x41, 0x4b, 0x57, 0xf4, 0x52, 0x10, 0xb1, 0x8c, 0x71, 0x3a, 0x58, 0xf5, 0x71, 0x44,
	0x8b, 0x83, 0x71, 0x00, 0x4e, 0x58, 0xc8, 0x62, 0x1f, 0x31, 0x4b, 0xf3, 0x3d, 0xe3, 0x82, 0xba,
	0x36, 0x12, 0xdb, 0xc1, 0x66, 0x4b, 0x16, 0x13, 0x26, 0x02, 0xea, 0x36, 0xf0, 0x7c, 0x54, 0xde,
	0xbd, 0xdd, 0x33, 0xbe, 0x7c, 0xaf, 0x69, 0x21, 0x58, 0x39, 0x36, 0x8f, 0xb5, 0x4a, 0x26, 0x22,
	0x73, 0x55, 0x70, 0x5d, 0xee, 0x75, 0xc4, 0x6f, 0xcf, 0x96, 0x73, 0xac, 0xf6, 0x21, 0xdd, 0x0d,
	0x5d, 0xd2, 0x11, 0xbf, 0x1d, 0x4e, 0x63, 0xb7, 0xd6, 0x33, 0xf7, 0xcd, 0xfe, 0x2f, 0x06, 0xb4,
	0x1e, 0x94, 0xff, 0x58, 0xd2, 0x2d, 0x68, 0xe4, 0x22, 0xb2, 0x21, 0x59, 0x60, 0xbe, 0xa0, 0x09,
	0x76, 0xa0, 0x92, 0x3f, 0x2b, 0xb6, 0x6e, 0x93, 0x0c, 0x1a, 0x0a, 0x3a, 0x1f, 0x4e, 0xb1, 0x05,
	0x38, 0xa0, 0xc3, 0x1b, 0x12, 0x4d, 0x71, 0x40, 0x58, 0x7e, 0x36, 0xe9, 0x16, 0x36, 0xe3, 0xb7,
	0x12, 0xec, 0xc8, 0xa8, 0x63, 0xce, 0xc2, 0x73, 0xea, 0xf9, 0x24, 0x9a, 0x51, 0xad, 0xa6, 0xe3,
	0xd7, 0x8f, 0x0a, 0xa9, 0x09, 0xd5, 0xc3, 0x39, 0x2a, 0x44, 0x31, 0xec, 0x82, 0x7d, 0xc2, 0xa2,
	0x58, 0x68, 0x66, 0xa6, 0x3e, 0x8a, 0xc3, 0xb8, 0x80, 0x4b, 0x3d, 0xd5, 0x9c, 0x4d, 0xb0, 0x10,
	0x7d, 0x1e, 0xcb, 0xf4, 0xa9, 0xa6, 0xb6, 0xa0, 0x91, 0x2e, 0x4e, 0xe1, 0x2a, 0xae, 0x45, 0x11,
	0x44, 0xb1, 0x38, 0x97, 0x56, 0x98, 0x76, 0xba, 0x0b, 0xf6, 0x80, 0xb0, 0x20, 0xd1, 0xbb, 0xd6,
	0xee, 0xb3, 0x15, 0xf0, 0xba, 0xce, 0x86, 0x68, 0xba, 0x2d, 0xdc, 0x67, 0xcb, 0xc3, 0x96, 0xce,
	0x86, 0xa0, 0xca, 0x86, 0xfd, 0xed, 0xff, 0x69, 0xc0, 0x66, 0xde, 0x03, 0x3d, 0x1a, 0xc7, 0xf2,
	0xac, 0x3d, 0xc9, 0x04, 0xdb, 0x50, 0xbb, 0xd4, 0x0a, 0xce, 0x5a, 0xf5, 0xfc, 0xd6, 0xf3, 0x49,
	0x38, 0x53, 0xe2, 0x31, 0xb5, 0x5f, 0x0f, 0x48, 0xa4, 0x90, 0xb2, 0x66, 0x78, 0xec, 0x93, 0x20,
	0xa0, 0x7a, 0x61, 0xd6, 0xa6, 0x8b, 0x42, 0xbc, 0x3a, 0x7e, 0x9b, 0x60, 0x9d, 0x53, 0x41, 0x58,
	0x48, 0xa7, 0x03, 0x92, 0x60, 0x9f, 0x2a, 0xfd, 0xbf, 0x4a, 0x4a, 0x4f, 0x23, 0x3e, 0x3b, 0xa7,
	0x0b, 0x1e, 0x09, 0xe7, 0xb3, 0x82, 0x6e, 0xd7, 0x60, 0xdd, 0x81, 0xfa, 0x19, 0xbd, 0x51, 0xf5,
	0xa6, 0x66, 0xd1, 0x81, 0xfa, 0x77, 0xc1, 0x34, 0x85, 0x94, 0x77, 0x6d, 0x82, 0xa5, 0xb9, 0x9d,
	0xd2, 0xf0, 0xc3, 0x8c, 0xbb, 0x60, 0x5f, 0xe4, 0x17, 0x6f, 0x64, 0xea, 0x26, 0x11, 0x02, 0x35,
	0x04, 0xba, 0x60, 0x67, 0x6d, 0x90, 0x68, 0x66, 0x17, 0x93, 0x1b, 0x3e, 0x20, 0xc9, 0x0b, 0x4a,
	0x17, 0x38, 0x52, 0x5c, 0x39, 0xf1, 0x23, 0x4a, 0x35, 0x6a, 0x69, 0xf4, 0x25, 0xbd, 0xa6, 0xa1,
	0x46, 0x6d, 0x44, 0xb7, 0xa1, 0x79, 0xc2, 0x5e, 0x0b, 0x7a, 0x8f, 0x37, 0xb4, 0x01, 0x4e, 0x7c,
	0x16, 0x49, 0xef, 0x56, 0xb0, 0xb2, 0x8e, 0x53, 0xd8, 0x56, 0x75, 0xe6, 0x8e, 0x0a, 0xaa, 0xf2,
	0x69, 0x22, 0x68, 0x42, 0x75, 0x44, 0xaf, 0x69, 0x10, 0xe3, 0x5d, 0x68, 0xf6, 0x7f, 0x95, 0xb7,
	0xfc, 0xc3, 0xfd, 0x52, 0xfb, 0x66, 0x6b, 0xd9, 0x77, 0xd1, 0x87, 0x4c, 0x7d, 0xbb, 0x9c, 0xf2,
	0x90, 0x26, 0xa9, 0x8e, 0x6c, 0x28, 0xe7, 0x4e, 0x59, 0x1b, 0x6a, 0xdf, 0xb2, 0x6b, 0x9a, 0x1d,
	0xb0, 0x0c, 0x41, 0x6f, 0x50, 0xb2, 0xf9, 0xd7, 0x50, 0x97, 0xbe, 0xf6, 0x83, 0xf5, 0xb4, 0xb3,
	0x09, 0xd6, 0x30, 0x94, 0xf6, 0x75, 0x9c, 0xf3, 0x87, 0x67, 0xd0, 0x51, 0xa0, 0xe2, 0xaf, 0x7e,
	0x29, 0x19, 0x7d, 0x23, 0x0f, 0x73, 0x82, 0x08, 0x3e, 0x17, 0xca, 0xf8, 0x5c, 0xd8, 0x7b, 0xf0,
	0x5c, 0xc8, 0xf3, 0x79, 0x15, 0x32, 0xe1, 0x7c, 0x0d, 0x16, 0xc6, 0xd0, 0x08, 0xa3, 0x2a, 0x4f,
	0x8a, 0xea, 0xbf, 0x81, 0xf6, 0x7b, 0x3b, 0xad, 0xbc, 0xa5, 0x8c, 0xcc, 0x46, 0x1f, 0x78, 0x71,
	0x03, 0x2a, 0x79, 0xf6, 0xa9, 0x35, 0x97, 0xf5, 0x13, 0x4b, 0x5d, 0x7f, 0xd8, 0xeb, 0xfe, 0x8f,
	0xea, 0xc2, 0x91, 0xaf, 0x87, 0x09, 0x5f, 0x3c, 0x4d, 0x2a, 0x85, 0x87, 0x4f, 0x59, 0x1f, 0xed,
	0x0c, 0x1a, 0xea, 0x07, 0x48, 0x71, 0xf0, 0xb5, 0x15, 0x77, 0xaa, 0xd9, 0xff, 0xc9, 0x00, 0x5b,
	0x12, 0xc0, 0x57, 0xca, 0x93, 0x19, 0x14, 0xdf, 0x59, 0x65, 0x7d, 0x56, 0xef, 0xb1, 0xb5, 0x38,
	0x2c, 0x94, 0x94, 0x06, 0x24, 0xd1, 0x3d, 0x5f, 0x53, 0xe7, 0xa6, 0xf6, 0x90, 0x55, 0x17, 0xe3,
	0x0a, 0x06, 0x47, 0xf6, 0xdf, 0x77, 0xbb, 0xc6, 0x3f, 0x77, 0xbb, 0xc6, 0x7f, 0x77, 0xbb, 0xc6,
	0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x50, 0xfc, 0xfe, 0x90, 0x0b, 0x00, 0x00,
}

func (m *PayPlayerLocationLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayPlayerLocationLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.DayTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.DayTime))
	}
	if m.Position != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(len(*m.Position)))
		i += copy(dAtA[i:], *m.Position)
	}
	if m.Piece != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(len(*m.Piece)))
		i += copy(dAtA[i:], *m.Piece)
	}
	if m.DeviceType != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.DeviceType))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishPlayerActivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishPlayerActivity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.PlayerId))
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTableStructWishActivity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Diamond != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.Diamond))
	}
	if m.WeekPrize != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.WeekPrize))
	}
	if m.MonthPrize != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.MonthPrize))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.WeekUpdateTime != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.WeekUpdateTime))
	}
	if m.MonthUpdateTime != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.MonthUpdateTime))
	}
	if m.UpdateDiamondTime != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.UpdateDiamondTime))
	}
	if m.LastWeekDiamond != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.LastWeekDiamond))
	}
	if m.LastMonthDiamond != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.LastMonthDiamond))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ActivityData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PoolRuleId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.PoolRuleId))
	}
	if m.Value != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.Value))
	}
	if m.Type != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.Type))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.DayLun != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.DayLun))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishActivityPrizeLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishActivityPrizeLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.Id))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Type != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.Type))
	}
	if m.PlayerAccount != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(len(*m.PlayerAccount)))
		i += copy(dAtA[i:], *m.PlayerAccount)
	}
	if m.ActType != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.ActType))
	}
	if m.PrizeType != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.PrizeType))
	}
	if m.PrizeValue != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.PrizeValue))
	}
	if m.Status != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.Status))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.CreateTime))
	}
	if m.FinishTime != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.FinishTime))
	}
	if m.Note != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(len(*m.Note)))
		i += copy(dAtA[i:], *m.Note)
	}
	if m.ActTypeTitle != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(len(*m.ActTypeTitle)))
		i += copy(dAtA[i:], *m.ActTypeTitle)
	}
	if m.DayLun != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.DayLun))
	}
	if m.WishActPoolRuleId != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.WishActPoolRuleId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishActPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishActPool) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.BoxNum != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.BoxNum))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.CreateTime))
	}
	if len(m.BoxIds) > 0 {
		for _, num := range m.BoxIds {
			dAtA[i] = 0x40
			i++
			i = encodeVarintTableStructWishActivity(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishActPoolRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishActPoolRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.Id))
	}
	if m.WishActPoolId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.WishActPoolId))
	}
	if m.Key != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.Key))
	}
	if m.Diamond != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.Diamond))
	}
	if m.WishItemId != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.WishItemId))
	}
	if m.AwardType != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.AwardType))
	}
	if m.Type != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishCoinRechargeActivityCfg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishCoinRechargeActivityCfg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.Id))
	}
	if m.Amount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.Amount))
	}
	if m.FirstDiamond != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.FirstDiamond))
	}
	if m.IsFirstDiamond != nil {
		dAtA[i] = 0x20
		i++
		if *m.IsFirstDiamond {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FirstEsCoin != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.FirstEsCoin))
	}
	if m.IsFirstEsCoin != nil {
		dAtA[i] = 0x30
		i++
		if *m.IsFirstEsCoin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FirstRatio != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.FirstRatio))
	}
	if m.DailyDiamond != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.DailyDiamond))
	}
	if m.IsDailyDiamond != nil {
		dAtA[i] = 0x48
		i++
		if *m.IsDailyDiamond {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DailyEsCoin != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.DailyEsCoin))
	}
	if m.IsDailyEsCoin != nil {
		dAtA[i] = 0x58
		i++
		if *m.IsDailyEsCoin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DailyRatio != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.DailyRatio))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishPlayerAccessLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishPlayerAccessLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.PlayerId))
	}
	if m.WishTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.WishTime))
	}
	if m.ExchangeTime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.ExchangeTime))
	}
	if m.DareTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.DareTime))
	}
	if m.ChallengeTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.ChallengeTime))
	}
	if m.VExchangeTime != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.VExchangeTime))
	}
	if m.RetainedDay != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.RetainedDay))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishLogReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishLogReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreateTime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.CreateTime))
	}
	if m.WishTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.WishTime))
	}
	if m.NewPlayer != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.NewPlayer))
	}
	if m.OldPlayer != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.OldPlayer))
	}
	if m.ExchangeMen != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.ExchangeMen))
	}
	if m.VExchangeTime != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.VExchangeTime))
	}
	if m.VExchangeMen != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.VExchangeMen))
	}
	if m.DareMen != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.DareMen))
	}
	if m.ChallengeMen != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.ChallengeMen))
	}
	if m.TwoDayKeep != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.TwoDayKeep))
	}
	if m.ThreeDayKeep != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.ThreeDayKeep))
	}
	if m.SevenDayKeep != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.SevenDayKeep))
	}
	if m.FifteenDayKeep != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.FifteenDayKeep))
	}
	if m.ThirtyDayKeep != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.ThirtyDayKeep))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerRechargeActFirst) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerRechargeActFirst) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.PlayerId))
	}
	if len(m.Levels) > 0 {
		for _, num := range m.Levels {
			dAtA[i] = 0x10
			i++
			i = encodeVarintTableStructWishActivity(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerRechargeActLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerRechargeActLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.Id))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.PlayerId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Money != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.Money))
	}
	if m.Coin != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.Coin))
	}
	if m.GiveCoin != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.GiveCoin))
	}
	if m.GiveType != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.GiveType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishActivityReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishActivityReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreateTime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.CreateTime))
	}
	if m.InPoolCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.InPoolCount))
	}
	if m.InPoolPlayerCount != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.InPoolPlayerCount))
	}
	if len(m.DayCountData) > 0 {
		for _, msg := range m.DayCountData {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTableStructWishActivity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.CounterData) > 0 {
		for _, msg := range m.CounterData {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintTableStructWishActivity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishActivityUnit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishActivityUnit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WishActPoolRuleId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.WishActPoolRuleId))
	}
	if m.ActPoolId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.ActPoolId))
	}
	if m.Count != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.Count))
	}
	if m.Key != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(len(*m.Key)))
		i += copy(dAtA[i:], *m.Key)
	}
	if m.Value != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.Value))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishWeekTop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishWeekTop) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.PlayerId))
	}
	if m.WeekPrize != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.WeekPrize))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Status != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.Status))
	}
	if m.WeekPrizeId != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.WeekPrizeId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishMonthTop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishMonthTop) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.PlayerId))
	}
	if m.MonthPrize != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.MonthPrize))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Status != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.Status))
	}
	if m.MonthPrizeId != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.MonthPrizeId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishDayActivityLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishDayActivityLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.Id))
	}
	if m.WishActPoolId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.WishActPoolId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.PlayerId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructWishActivity(dAtA, i, uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTableStructWishActivity(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PayPlayerLocationLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStructWishActivity(uint64(l))
	}
	if m.DayTime != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.DayTime))
	}
	if m.Position != nil {
		l = len(*m.Position)
		n += 1 + l + sovTableStructWishActivity(uint64(l))
	}
	if m.Piece != nil {
		l = len(*m.Piece)
		n += 1 + l + sovTableStructWishActivity(uint64(l))
	}
	if m.DeviceType != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.DeviceType))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishPlayerActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.PlayerId))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovTableStructWishActivity(uint64(l))
		}
	}
	if m.Diamond != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.Diamond))
	}
	if m.WeekPrize != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.WeekPrize))
	}
	if m.MonthPrize != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.MonthPrize))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.UpdateTime))
	}
	if m.WeekUpdateTime != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.WeekUpdateTime))
	}
	if m.MonthUpdateTime != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.MonthUpdateTime))
	}
	if m.UpdateDiamondTime != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.UpdateDiamondTime))
	}
	if m.LastWeekDiamond != nil {
		n += 2 + sovTableStructWishActivity(uint64(*m.LastWeekDiamond))
	}
	if m.LastMonthDiamond != nil {
		n += 2 + sovTableStructWishActivity(uint64(*m.LastMonthDiamond))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActivityData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolRuleId != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.PoolRuleId))
	}
	if m.Value != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.Value))
	}
	if m.Type != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.Type))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.UpdateTime))
	}
	if m.DayLun != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.DayLun))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishActivityPrizeLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.Id))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.PlayerId))
	}
	if m.Type != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.Type))
	}
	if m.PlayerAccount != nil {
		l = len(*m.PlayerAccount)
		n += 1 + l + sovTableStructWishActivity(uint64(l))
	}
	if m.ActType != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.ActType))
	}
	if m.PrizeType != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.PrizeType))
	}
	if m.PrizeValue != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.PrizeValue))
	}
	if m.Status != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.Status))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.CreateTime))
	}
	if m.FinishTime != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.FinishTime))
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 1 + l + sovTableStructWishActivity(uint64(l))
	}
	if m.ActTypeTitle != nil {
		l = len(*m.ActTypeTitle)
		n += 1 + l + sovTableStructWishActivity(uint64(l))
	}
	if m.DayLun != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.DayLun))
	}
	if m.WishActPoolRuleId != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.WishActPoolRuleId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishActPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructWishActivity(uint64(l))
	}
	if m.BoxNum != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.BoxNum))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.CreateTime))
	}
	if len(m.BoxIds) > 0 {
		for _, e := range m.BoxIds {
			n += 1 + sovTableStructWishActivity(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishActPoolRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.Id))
	}
	if m.WishActPoolId != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.WishActPoolId))
	}
	if m.Key != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.Key))
	}
	if m.Diamond != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.Diamond))
	}
	if m.WishItemId != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.WishItemId))
	}
	if m.AwardType != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.AwardType))
	}
	if m.Type != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishCoinRechargeActivityCfg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.Id))
	}
	if m.Amount != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.Amount))
	}
	if m.FirstDiamond != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.FirstDiamond))
	}
	if m.IsFirstDiamond != nil {
		n += 2
	}
	if m.FirstEsCoin != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.FirstEsCoin))
	}
	if m.IsFirstEsCoin != nil {
		n += 2
	}
	if m.FirstRatio != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.FirstRatio))
	}
	if m.DailyDiamond != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.DailyDiamond))
	}
	if m.IsDailyDiamond != nil {
		n += 2
	}
	if m.DailyEsCoin != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.DailyEsCoin))
	}
	if m.IsDailyEsCoin != nil {
		n += 2
	}
	if m.DailyRatio != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.DailyRatio))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishPlayerAccessLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.PlayerId))
	}
	if m.WishTime != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.WishTime))
	}
	if m.ExchangeTime != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.ExchangeTime))
	}
	if m.DareTime != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.DareTime))
	}
	if m.ChallengeTime != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.ChallengeTime))
	}
	if m.VExchangeTime != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.VExchangeTime))
	}
	if m.RetainedDay != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.RetainedDay))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishLogReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateTime != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.CreateTime))
	}
	if m.WishTime != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.WishTime))
	}
	if m.NewPlayer != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.NewPlayer))
	}
	if m.OldPlayer != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.OldPlayer))
	}
	if m.ExchangeMen != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.ExchangeMen))
	}
	if m.VExchangeTime != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.VExchangeTime))
	}
	if m.VExchangeMen != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.VExchangeMen))
	}
	if m.DareMen != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.DareMen))
	}
	if m.ChallengeMen != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.ChallengeMen))
	}
	if m.TwoDayKeep != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.TwoDayKeep))
	}
	if m.ThreeDayKeep != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.ThreeDayKeep))
	}
	if m.SevenDayKeep != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.SevenDayKeep))
	}
	if m.FifteenDayKeep != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.FifteenDayKeep))
	}
	if m.ThirtyDayKeep != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.ThirtyDayKeep))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerRechargeActFirst) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.PlayerId))
	}
	if len(m.Levels) > 0 {
		for _, e := range m.Levels {
			n += 1 + sovTableStructWishActivity(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerRechargeActLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.Id))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.PlayerId))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.CreateTime))
	}
	if m.Money != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.Money))
	}
	if m.Coin != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.Coin))
	}
	if m.GiveCoin != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.GiveCoin))
	}
	if m.GiveType != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.GiveType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishActivityReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateTime != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.CreateTime))
	}
	if m.InPoolCount != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.InPoolCount))
	}
	if m.InPoolPlayerCount != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.InPoolPlayerCount))
	}
	if len(m.DayCountData) > 0 {
		for _, e := range m.DayCountData {
			l = e.Size()
			n += 1 + l + sovTableStructWishActivity(uint64(l))
		}
	}
	if len(m.CounterData) > 0 {
		for _, e := range m.CounterData {
			l = e.Size()
			n += 1 + l + sovTableStructWishActivity(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishActivityUnit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WishActPoolRuleId != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.WishActPoolRuleId))
	}
	if m.ActPoolId != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.ActPoolId))
	}
	if m.Count != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.Count))
	}
	if m.Key != nil {
		l = len(*m.Key)
		n += 1 + l + sovTableStructWishActivity(uint64(l))
	}
	if m.Value != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishWeekTop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.PlayerId))
	}
	if m.WeekPrize != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.WeekPrize))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.CreateTime))
	}
	if m.Status != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.Status))
	}
	if m.WeekPrizeId != nil {
		n += 2 + sovTableStructWishActivity(uint64(*m.WeekPrizeId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishMonthTop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.PlayerId))
	}
	if m.MonthPrize != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.MonthPrize))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.CreateTime))
	}
	if m.Status != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.Status))
	}
	if m.MonthPrizeId != nil {
		n += 2 + sovTableStructWishActivity(uint64(*m.MonthPrizeId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishDayActivityLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.Id))
	}
	if m.WishActPoolId != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.WishActPoolId))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.PlayerId))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructWishActivity(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTableStructWishActivity(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTableStructWishActivity(x uint64) (n int) {
	return sovTableStructWishActivity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PayPlayerLocationLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWishActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayPlayerLocationLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayPlayerLocationLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayTime = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Position = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Piece", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Piece = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeviceType = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWishActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishPlayerActivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWishActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishPlayerActivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishPlayerActivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &ActivityData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekPrize", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WeekPrize = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthPrize", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MonthPrize = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekUpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WeekUpdateTime = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthUpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MonthUpdateTime = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDiamondTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateDiamondTime = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastWeekDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastWeekDiamond = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMonthDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastMonthDiamond = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWishActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWishActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolRuleId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PoolRuleId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayLun", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayLun = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWishActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishActivityPrizeLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWishActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishActivityPrizeLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishActivityPrizeLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PlayerAccount = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActType", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActType = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeType", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PrizeType = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PrizeValue = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FinishTime = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActTypeTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ActTypeTitle = &s
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayLun", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayLun = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishActPoolRuleId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishActPoolRuleId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWishActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishActPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWishActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishActPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishActPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxNum = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 8:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructWishActivity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BoxIds = append(m.BoxIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructWishActivity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructWishActivity
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructWishActivity
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BoxIds) == 0 {
					m.BoxIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructWishActivity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BoxIds = append(m.BoxIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWishActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishActPoolRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWishActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishActPoolRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishActPoolRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishActPoolId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishActPoolId = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Key = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishItemId = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AwardType = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWishActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishCoinRechargeActivityCfg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWishActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishCoinRechargeActivityCfg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishCoinRechargeActivityCfg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Amount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstDiamond = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFirstDiamond", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsFirstDiamond = &b
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstEsCoin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstEsCoin = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFirstEsCoin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsFirstEsCoin = &b
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstRatio", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstRatio = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DailyDiamond = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDailyDiamond", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsDailyDiamond = &b
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyEsCoin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DailyEsCoin = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDailyEsCoin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsDailyEsCoin = &b
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyRatio", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DailyRatio = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWishActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishPlayerAccessLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWishActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishPlayerAccessLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishPlayerAccessLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishTime = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExchangeTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DareTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DareTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChallengeTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VExchangeTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VExchangeTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetainedDay", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetainedDay = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWishActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishLogReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWishActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishLogReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishLogReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishTime = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPlayer", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NewPlayer = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldPlayer", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OldPlayer = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeMen", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExchangeMen = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VExchangeTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VExchangeTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VExchangeMen", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VExchangeMen = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DareMen", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DareMen = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeMen", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChallengeMen = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwoDayKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TwoDayKeep = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreeDayKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThreeDayKeep = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SevenDayKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SevenDayKeep = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FifteenDayKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FifteenDayKeep = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThirtyDayKeep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThirtyDayKeep = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWishActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerRechargeActFirst) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWishActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerRechargeActFirst: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerRechargeActFirst: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructWishActivity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Levels = append(m.Levels, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructWishActivity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructWishActivity
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructWishActivity
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Levels) == 0 {
					m.Levels = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructWishActivity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Levels = append(m.Levels, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Levels", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWishActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerRechargeActLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWishActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerRechargeActLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerRechargeActLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Money = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Coin = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveCoin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GiveCoin = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GiveType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWishActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishActivityReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWishActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishActivityReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishActivityReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InPoolCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InPoolCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InPoolPlayerCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InPoolPlayerCount = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayCountData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DayCountData = append(m.DayCountData, &WishActivityUnit{})
			if err := m.DayCountData[len(m.DayCountData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterData = append(m.CounterData, &WishActivityUnit{})
			if err := m.CounterData[len(m.CounterData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWishActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishActivityUnit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWishActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishActivityUnit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishActivityUnit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishActPoolRuleId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishActPoolRuleId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActPoolId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActPoolId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWishActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishWeekTop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWishActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishWeekTop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishWeekTop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekPrize", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WeekPrize = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekPrizeId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WeekPrizeId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWishActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishMonthTop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWishActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishMonthTop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishMonthTop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthPrize", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MonthPrize = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthPrizeId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MonthPrizeId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWishActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishDayActivityLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructWishActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishDayActivityLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishDayActivityLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishActPoolId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishActPoolId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructWishActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructWishActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTableStructWishActivity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTableStructWishActivity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTableStructWishActivity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTableStructWishActivity
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTableStructWishActivity
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTableStructWishActivity
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTableStructWishActivity(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTableStructWishActivity
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTableStructWishActivity = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTableStructWishActivity   = fmt.Errorf("proto: integer overflow")
)
