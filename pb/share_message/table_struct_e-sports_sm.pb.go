// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: table_struct_e-sports_sm.proto

// 如果仅用于通讯的 message,别放在这里

package share_message

import (
	fmt "fmt"
	github_com_akqp2019_protobuf_proto "github.com/akqp2019/protobuf/proto"
	proto "github.com/akqp2019/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//import "table_struct_e-sports.proto";
//api字段不要改动,不然接api的时候接不到数据
//比赛列表视图表
type ESPortsGameItemView struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=id" json:"_id,omitempty" bson:"_id,omitempty"`
	MatchVsName          *string  `protobuf:"bytes,2,opt,name=match_vs_name" json:"match_vs_name,omitempty" bson:"match_vs_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESPortsGameItemView) Reset()         { *m = ESPortsGameItemView{} }
func (m *ESPortsGameItemView) String() string { return proto.CompactTextString(m) }
func (*ESPortsGameItemView) ProtoMessage()    {}
func (*ESPortsGameItemView) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e764ebb51cf5e09, []int{0}
}
func (m *ESPortsGameItemView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESPortsGameItemView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESPortsGameItemView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESPortsGameItemView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESPortsGameItemView.Merge(m, src)
}
func (m *ESPortsGameItemView) XXX_Size() int {
	return m.Size()
}
func (m *ESPortsGameItemView) XXX_DiscardUnknown() {
	xxx_messageInfo_ESPortsGameItemView.DiscardUnknown(m)
}

var xxx_messageInfo_ESPortsGameItemView proto.InternalMessageInfo

func (m *ESPortsGameItemView) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ESPortsGameItemView) GetMatchVsName() string {
	if m != nil && m.MatchVsName != nil {
		return *m.MatchVsName
	}
	return ""
}

//系统消息
type ESPortsSysMsgView struct {
	//唯一ID
	Id *int64 `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	//数据ID
	Title *string `protobuf:"bytes,3,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	//数据ID
	Content *string `protobuf:"bytes,4,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	//创建时间
	CreateTime *int64 `protobuf:"varint,7,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	//跳转信息
	//optional ESPortsJumpInfo JumpInfo = 8;
	//发布时间 前端显示时间
	EffectiveTime *int64 `protobuf:"varint,9,opt,name=EffectiveTime" json:"EffectiveTime,omitempty" bson:"EffectiveTime,omitempty"`
	//推送消息(极光推送)
	IsPush *bool `protobuf:"varint,11,opt,name=IsPush" json:"IsPush,omitempty" bson:"IsPush,omitempty"`
	//消息中心
	IsMessageCenter *bool `protobuf:"varint,12,opt,name=IsMessageCenter" json:"IsMessageCenter,omitempty" bson:"IsMessageCenter,omitempty"`
	//icon 推送的图标
	Icon                 *string  `protobuf:"bytes,13,opt,name=Icon" json:"Icon,omitempty" bson:"Icon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESPortsSysMsgView) Reset()         { *m = ESPortsSysMsgView{} }
func (m *ESPortsSysMsgView) String() string { return proto.CompactTextString(m) }
func (*ESPortsSysMsgView) ProtoMessage()    {}
func (*ESPortsSysMsgView) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e764ebb51cf5e09, []int{1}
}
func (m *ESPortsSysMsgView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESPortsSysMsgView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESPortsSysMsgView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESPortsSysMsgView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESPortsSysMsgView.Merge(m, src)
}
func (m *ESPortsSysMsgView) XXX_Size() int {
	return m.Size()
}
func (m *ESPortsSysMsgView) XXX_DiscardUnknown() {
	xxx_messageInfo_ESPortsSysMsgView.DiscardUnknown(m)
}

var xxx_messageInfo_ESPortsSysMsgView proto.InternalMessageInfo

func (m *ESPortsSysMsgView) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ESPortsSysMsgView) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *ESPortsSysMsgView) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *ESPortsSysMsgView) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ESPortsSysMsgView) GetEffectiveTime() int64 {
	if m != nil && m.EffectiveTime != nil {
		return *m.EffectiveTime
	}
	return 0
}

func (m *ESPortsSysMsgView) GetIsPush() bool {
	if m != nil && m.IsPush != nil {
		return *m.IsPush
	}
	return false
}

func (m *ESPortsSysMsgView) GetIsMessageCenter() bool {
	if m != nil && m.IsMessageCenter != nil {
		return *m.IsMessageCenter
	}
	return false
}

func (m *ESPortsSysMsgView) GetIcon() string {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return ""
}

//消息中心的竞猜数据
type ESPortsGameOrderSysMsgView struct {
	//投注表订单号
	OrderId *int64 `protobuf:"varint,1,req,name=OrderId" json:"_id,omitempty" bson:"_id,omitempty"`
	//比赛ID
	UniqueGameId *int64 `protobuf:"varint,2,opt,name=UniqueGameId" json:"UniqueGameId,omitempty" bson:"UniqueGameId,omitempty"`
	//竞猜赔率
	Odds *string `protobuf:"bytes,4,opt,name=Odds" json:"Odds,omitempty" bson:"Odds,omitempty"`
	//竞猜结果 1待结算、2成功、3失败、4返回、5扣除
	BetResult *string `protobuf:"bytes,6,opt,name=BetResult" json:"BetResult,omitempty" bson:"BetResult,omitempty"`
	//竞猜目标
	BetTitle *string `protobuf:"bytes,7,opt,name=BetTitle" json:"BetTitle,omitempty" bson:"BetTitle,omitempty"`
	//竞猜项Id
	BetNum *string `protobuf:"bytes,8,opt,name=BetNum" json:"BetNum,omitempty" bson:"BetNum,omitempty"`
	//竞猜项
	BetName *string `protobuf:"bytes,9,opt,name=BetName" json:"BetName,omitempty" bson:"BetName,omitempty"`
	//游戏名称
	GameName *string `protobuf:"bytes,10,opt,name=GameName" json:"GameName,omitempty" bson:"GameName,omitempty"`
	//投注时间
	CreateTime *int64 `protobuf:"varint,11,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	//返还金额
	ResultAmount *int64 `protobuf:"varint,13,opt,name=ResultAmount" json:"ResultAmount,omitempty" bson:"ResultAmount,omitempty"`
	//玩家ID
	PlayerId *int64 `protobuf:"varint,14,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	//竞猜金额
	BetAmount            *int64   `protobuf:"varint,15,opt,name=BetAmount" json:"BetAmount,omitempty" bson:"BetAmount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESPortsGameOrderSysMsgView) Reset()         { *m = ESPortsGameOrderSysMsgView{} }
func (m *ESPortsGameOrderSysMsgView) String() string { return proto.CompactTextString(m) }
func (*ESPortsGameOrderSysMsgView) ProtoMessage()    {}
func (*ESPortsGameOrderSysMsgView) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e764ebb51cf5e09, []int{2}
}
func (m *ESPortsGameOrderSysMsgView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESPortsGameOrderSysMsgView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESPortsGameOrderSysMsgView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESPortsGameOrderSysMsgView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESPortsGameOrderSysMsgView.Merge(m, src)
}
func (m *ESPortsGameOrderSysMsgView) XXX_Size() int {
	return m.Size()
}
func (m *ESPortsGameOrderSysMsgView) XXX_DiscardUnknown() {
	xxx_messageInfo_ESPortsGameOrderSysMsgView.DiscardUnknown(m)
}

var xxx_messageInfo_ESPortsGameOrderSysMsgView proto.InternalMessageInfo

func (m *ESPortsGameOrderSysMsgView) GetOrderId() int64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *ESPortsGameOrderSysMsgView) GetUniqueGameId() int64 {
	if m != nil && m.UniqueGameId != nil {
		return *m.UniqueGameId
	}
	return 0
}

func (m *ESPortsGameOrderSysMsgView) GetOdds() string {
	if m != nil && m.Odds != nil {
		return *m.Odds
	}
	return ""
}

func (m *ESPortsGameOrderSysMsgView) GetBetResult() string {
	if m != nil && m.BetResult != nil {
		return *m.BetResult
	}
	return ""
}

func (m *ESPortsGameOrderSysMsgView) GetBetTitle() string {
	if m != nil && m.BetTitle != nil {
		return *m.BetTitle
	}
	return ""
}

func (m *ESPortsGameOrderSysMsgView) GetBetNum() string {
	if m != nil && m.BetNum != nil {
		return *m.BetNum
	}
	return ""
}

func (m *ESPortsGameOrderSysMsgView) GetBetName() string {
	if m != nil && m.BetName != nil {
		return *m.BetName
	}
	return ""
}

func (m *ESPortsGameOrderSysMsgView) GetGameName() string {
	if m != nil && m.GameName != nil {
		return *m.GameName
	}
	return ""
}

func (m *ESPortsGameOrderSysMsgView) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ESPortsGameOrderSysMsgView) GetResultAmount() int64 {
	if m != nil && m.ResultAmount != nil {
		return *m.ResultAmount
	}
	return 0
}

func (m *ESPortsGameOrderSysMsgView) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *ESPortsGameOrderSysMsgView) GetBetAmount() int64 {
	if m != nil && m.BetAmount != nil {
		return *m.BetAmount
	}
	return 0
}

//房间消息
type ESPortsLiveRoomMsgView struct {
	//唯一ID
	Id *int64 `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	//发送者用户ID
	SenderPlayerId *int64 `protobuf:"varint,2,opt,name=SenderPlayerId" json:"SenderPlayerId,omitempty" bson:"SenderPlayerId,omitempty"`
	//发送者名称
	NickName *string `protobuf:"bytes,3,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	//正文
	Content *string `protobuf:"bytes,4,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	//发送者头像
	HeadIcon *string `protobuf:"bytes,5,opt,name=HeadIcon" json:"HeadIcon,omitempty" bson:"HeadIcon,omitempty"`
	//放映厅直播Id
	LiveId *int64 `protobuf:"varint,6,opt,name=LiveId" json:"LiveId,omitempty" bson:"LiveId,omitempty"`
	//数据类型 1 发言 2进入直播间
	DataType *int32 `protobuf:"varint,7,opt,name=DataType" json:"DataType,omitempty" bson:"DataType,omitempty"`
	//发送时间
	CreateTime           *int64   `protobuf:"varint,8,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESPortsLiveRoomMsgView) Reset()         { *m = ESPortsLiveRoomMsgView{} }
func (m *ESPortsLiveRoomMsgView) String() string { return proto.CompactTextString(m) }
func (*ESPortsLiveRoomMsgView) ProtoMessage()    {}
func (*ESPortsLiveRoomMsgView) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e764ebb51cf5e09, []int{3}
}
func (m *ESPortsLiveRoomMsgView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESPortsLiveRoomMsgView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESPortsLiveRoomMsgView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESPortsLiveRoomMsgView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESPortsLiveRoomMsgView.Merge(m, src)
}
func (m *ESPortsLiveRoomMsgView) XXX_Size() int {
	return m.Size()
}
func (m *ESPortsLiveRoomMsgView) XXX_DiscardUnknown() {
	xxx_messageInfo_ESPortsLiveRoomMsgView.DiscardUnknown(m)
}

var xxx_messageInfo_ESPortsLiveRoomMsgView proto.InternalMessageInfo

func (m *ESPortsLiveRoomMsgView) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ESPortsLiveRoomMsgView) GetSenderPlayerId() int64 {
	if m != nil && m.SenderPlayerId != nil {
		return *m.SenderPlayerId
	}
	return 0
}

func (m *ESPortsLiveRoomMsgView) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *ESPortsLiveRoomMsgView) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *ESPortsLiveRoomMsgView) GetHeadIcon() string {
	if m != nil && m.HeadIcon != nil {
		return *m.HeadIcon
	}
	return ""
}

func (m *ESPortsLiveRoomMsgView) GetLiveId() int64 {
	if m != nil && m.LiveId != nil {
		return *m.LiveId
	}
	return 0
}

func (m *ESPortsLiveRoomMsgView) GetDataType() int32 {
	if m != nil && m.DataType != nil {
		return *m.DataType
	}
	return 0
}

func (m *ESPortsLiveRoomMsgView) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

//关注或者历史使用的结构
type ESPortsFlowInfoView struct {
	//唯一ID
	Id *int64 `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	//玩家ID
	PlayerId *int64 `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	//数据ID
	DataId *int64 `protobuf:"varint,3,opt,name=DataId" json:"DataId,omitempty" bson:"DataId,omitempty"`
	//展示在前端的时间
	CreateTime           *int64   `protobuf:"varint,4,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESPortsFlowInfoView) Reset()         { *m = ESPortsFlowInfoView{} }
func (m *ESPortsFlowInfoView) String() string { return proto.CompactTextString(m) }
func (*ESPortsFlowInfoView) ProtoMessage()    {}
func (*ESPortsFlowInfoView) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e764ebb51cf5e09, []int{4}
}
func (m *ESPortsFlowInfoView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESPortsFlowInfoView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESPortsFlowInfoView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESPortsFlowInfoView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESPortsFlowInfoView.Merge(m, src)
}
func (m *ESPortsFlowInfoView) XXX_Size() int {
	return m.Size()
}
func (m *ESPortsFlowInfoView) XXX_DiscardUnknown() {
	xxx_messageInfo_ESPortsFlowInfoView.DiscardUnknown(m)
}

var xxx_messageInfo_ESPortsFlowInfoView proto.InternalMessageInfo

func (m *ESPortsFlowInfoView) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ESPortsFlowInfoView) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *ESPortsFlowInfoView) GetDataId() int64 {
	if m != nil && m.DataId != nil {
		return *m.DataId
	}
	return 0
}

func (m *ESPortsFlowInfoView) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

//娱乐视频列表信息
type ESPortsVideoItemView struct {
	//唯一ID 普通查询时使用的主键
	Id *int64 `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	//封面图
	CoverImageUrl *string `protobuf:"bytes,2,opt,name=CoverImageUrl" json:"CoverImageUrl,omitempty" bson:"CoverImageUrl,omitempty"`
	//标题
	Title *string `protobuf:"bytes,3,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	//作者playerId
	AuthorPlayerId *int64 `protobuf:"varint,5,opt,name=AuthorPlayerId" json:"AuthorPlayerId,omitempty" bson:"AuthorPlayerId,omitempty"`
	//作者账号或柠檬号
	AuthorAccount *string `protobuf:"bytes,4,opt,name=AuthorAccount" json:"AuthorAccount,omitempty" bson:"AuthorAccount,omitempty"`
	//作者
	Author *string `protobuf:"bytes,11,opt,name=Author" json:"Author,omitempty" bson:"Author,omitempty"`
	//数据来源
	DataSource *string `protobuf:"bytes,12,opt,name=DataSource" json:"DataSource,omitempty" bson:"DataSource,omitempty"`
	//实际浏览数量
	LookCount *int32 `protobuf:"varint,13,opt,name=LookCount" json:"LookCount,omitempty" bson:"LookCount,omitempty"`
	//后台配置浏览数量
	LookCountSys *int32 `protobuf:"varint,14,opt,name=LookCountSys" json:"LookCountSys,omitempty" bson:"LookCountSys,omitempty"`
	//游戏标签名称
	AppLabelName *string `protobuf:"bytes,18,opt,name=AppLabelName" json:"AppLabelName,omitempty" bson:"AppLabelName,omitempty"`
	//其他数据ID
	DataId *int64 `protobuf:"varint,29,opt,name=DataId" json:"DataId,omitempty" bson:"DataId,omitempty"`
	//关联比赛表标题
	UniqueGameName *string `protobuf:"bytes,38,opt,name=UniqueGameName" json:"UniqueGameName,omitempty" bson:"UniqueGameName,omitempty"`
	//关联比赛表ID
	UniqueGameId         *int64   `protobuf:"varint,26,opt,name=UniqueGameId" json:"UniqueGameId,omitempty" bson:"UniqueGameId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESPortsVideoItemView) Reset()         { *m = ESPortsVideoItemView{} }
func (m *ESPortsVideoItemView) String() string { return proto.CompactTextString(m) }
func (*ESPortsVideoItemView) ProtoMessage()    {}
func (*ESPortsVideoItemView) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e764ebb51cf5e09, []int{5}
}
func (m *ESPortsVideoItemView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESPortsVideoItemView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESPortsVideoItemView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESPortsVideoItemView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESPortsVideoItemView.Merge(m, src)
}
func (m *ESPortsVideoItemView) XXX_Size() int {
	return m.Size()
}
func (m *ESPortsVideoItemView) XXX_DiscardUnknown() {
	xxx_messageInfo_ESPortsVideoItemView.DiscardUnknown(m)
}

var xxx_messageInfo_ESPortsVideoItemView proto.InternalMessageInfo

func (m *ESPortsVideoItemView) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ESPortsVideoItemView) GetCoverImageUrl() string {
	if m != nil && m.CoverImageUrl != nil {
		return *m.CoverImageUrl
	}
	return ""
}

func (m *ESPortsVideoItemView) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *ESPortsVideoItemView) GetAuthorPlayerId() int64 {
	if m != nil && m.AuthorPlayerId != nil {
		return *m.AuthorPlayerId
	}
	return 0
}

func (m *ESPortsVideoItemView) GetAuthorAccount() string {
	if m != nil && m.AuthorAccount != nil {
		return *m.AuthorAccount
	}
	return ""
}

func (m *ESPortsVideoItemView) GetAuthor() string {
	if m != nil && m.Author != nil {
		return *m.Author
	}
	return ""
}

func (m *ESPortsVideoItemView) GetDataSource() string {
	if m != nil && m.DataSource != nil {
		return *m.DataSource
	}
	return ""
}

func (m *ESPortsVideoItemView) GetLookCount() int32 {
	if m != nil && m.LookCount != nil {
		return *m.LookCount
	}
	return 0
}

func (m *ESPortsVideoItemView) GetLookCountSys() int32 {
	if m != nil && m.LookCountSys != nil {
		return *m.LookCountSys
	}
	return 0
}

func (m *ESPortsVideoItemView) GetAppLabelName() string {
	if m != nil && m.AppLabelName != nil {
		return *m.AppLabelName
	}
	return ""
}

func (m *ESPortsVideoItemView) GetDataId() int64 {
	if m != nil && m.DataId != nil {
		return *m.DataId
	}
	return 0
}

func (m *ESPortsVideoItemView) GetUniqueGameName() string {
	if m != nil && m.UniqueGameName != nil {
		return *m.UniqueGameName
	}
	return ""
}

func (m *ESPortsVideoItemView) GetUniqueGameId() int64 {
	if m != nil && m.UniqueGameId != nil {
		return *m.UniqueGameId
	}
	return 0
}

//放映厅或娱乐视频详详细信息
type ESPortsVideoInfoView struct {
	//唯一ID 普通查询时使用的主键
	Id *int64 `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	//封面图
	CoverImageUrl *string `protobuf:"bytes,2,opt,name=CoverImageUrl" json:"CoverImageUrl,omitempty" bson:"CoverImageUrl,omitempty"`
	//标题
	Title *string `protobuf:"bytes,3,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	//作者playerId
	AuthorPlayerId *int64 `protobuf:"varint,5,opt,name=AuthorPlayerId" json:"AuthorPlayerId,omitempty" bson:"AuthorPlayerId,omitempty"`
	//作者账号或柠檬号
	AuthorAccount *string `protobuf:"bytes,4,opt,name=AuthorAccount" json:"AuthorAccount,omitempty" bson:"AuthorAccount,omitempty"`
	//作者
	Author *string `protobuf:"bytes,11,opt,name=Author" json:"Author,omitempty" bson:"Author,omitempty"`
	//数据来源
	DataSource *string `protobuf:"bytes,12,opt,name=DataSource" json:"DataSource,omitempty" bson:"DataSource,omitempty"`
	//实际浏览数量
	LookCount *int32 `protobuf:"varint,13,opt,name=LookCount" json:"LookCount,omitempty" bson:"LookCount,omitempty"`
	//后台配置浏览数量
	LookCountSys *int32 `protobuf:"varint,14,opt,name=LookCountSys" json:"LookCountSys,omitempty" bson:"LookCountSys,omitempty"`
	//游戏标签名称
	AppLabelName *string `protobuf:"bytes,18,opt,name=AppLabelName" json:"AppLabelName,omitempty" bson:"AppLabelName,omitempty"`
	//视频连接
	VideoUrl *string `protobuf:"bytes,8,opt,name=VideoUrl" json:"VideoUrl,omitempty" bson:"VideoUrl,omitempty"`
	//关联比赛表ID
	UniqueGameId *int64 `protobuf:"varint,26,opt,name=UniqueGameId" json:"UniqueGameId,omitempty" bson:"UniqueGameId,omitempty"`
	//关联比赛表标题
	UniqueGameName *string `protobuf:"bytes,38,opt,name=UniqueGameName" json:"UniqueGameName,omitempty" bson:"UniqueGameName,omitempty"`
	//是否关注 1已关注 2未关注
	IsFollow *int32 `protobuf:"varint,42,opt,name=IsFollow" json:"-" bson:"-"`
	//是否关注作者 1已关注 2未关注
	IsAuthorFollow *int32 `protobuf:"varint,43,opt,name=IsAuthorFollow" json:"-" bson:"-"`
	//粉丝人数，不做存储
	FanCount *int32 `protobuf:"varint,36,opt,name=FanCount" json:"FanCount,omitempty" bson:"FanCount,omitempty"`
	//用户图标url
	PlayerIconUrl *string `protobuf:"bytes,37,opt,name=PlayerIconUrl" json:"PlayerIconUrl,omitempty" bson:"PlayerIconUrl,omitempty"`
	//关注人数
	FlowCount *int64 `protobuf:"varint,34,opt,name=FlowCount" json:"FlowCount,omitempty" bson:"FlowCount,omitempty"`
	//后台配置关注人数
	FlowCountSys *int64 `protobuf:"varint,39,opt,name=FlowCountSys" json:"FlowCountSys,omitempty" bson:"FlowCountSys,omitempty"`
	//公告
	Content *string `protobuf:"bytes,32,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	//观看者是否点赞 不做存储 1已点赞 0未点赞
	IsThumbsUp           *int32   `protobuf:"varint,33,opt,name=IsThumbsUp" json:"IsThumbsUp,omitempty" bson:"IsThumbsUp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESPortsVideoInfoView) Reset()         { *m = ESPortsVideoInfoView{} }
func (m *ESPortsVideoInfoView) String() string { return proto.CompactTextString(m) }
func (*ESPortsVideoInfoView) ProtoMessage()    {}
func (*ESPortsVideoInfoView) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e764ebb51cf5e09, []int{6}
}
func (m *ESPortsVideoInfoView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESPortsVideoInfoView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESPortsVideoInfoView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESPortsVideoInfoView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESPortsVideoInfoView.Merge(m, src)
}
func (m *ESPortsVideoInfoView) XXX_Size() int {
	return m.Size()
}
func (m *ESPortsVideoInfoView) XXX_DiscardUnknown() {
	xxx_messageInfo_ESPortsVideoInfoView.DiscardUnknown(m)
}

var xxx_messageInfo_ESPortsVideoInfoView proto.InternalMessageInfo

func (m *ESPortsVideoInfoView) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ESPortsVideoInfoView) GetCoverImageUrl() string {
	if m != nil && m.CoverImageUrl != nil {
		return *m.CoverImageUrl
	}
	return ""
}

func (m *ESPortsVideoInfoView) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *ESPortsVideoInfoView) GetAuthorPlayerId() int64 {
	if m != nil && m.AuthorPlayerId != nil {
		return *m.AuthorPlayerId
	}
	return 0
}

func (m *ESPortsVideoInfoView) GetAuthorAccount() string {
	if m != nil && m.AuthorAccount != nil {
		return *m.AuthorAccount
	}
	return ""
}

func (m *ESPortsVideoInfoView) GetAuthor() string {
	if m != nil && m.Author != nil {
		return *m.Author
	}
	return ""
}

func (m *ESPortsVideoInfoView) GetDataSource() string {
	if m != nil && m.DataSource != nil {
		return *m.DataSource
	}
	return ""
}

func (m *ESPortsVideoInfoView) GetLookCount() int32 {
	if m != nil && m.LookCount != nil {
		return *m.LookCount
	}
	return 0
}

func (m *ESPortsVideoInfoView) GetLookCountSys() int32 {
	if m != nil && m.LookCountSys != nil {
		return *m.LookCountSys
	}
	return 0
}

func (m *ESPortsVideoInfoView) GetAppLabelName() string {
	if m != nil && m.AppLabelName != nil {
		return *m.AppLabelName
	}
	return ""
}

func (m *ESPortsVideoInfoView) GetVideoUrl() string {
	if m != nil && m.VideoUrl != nil {
		return *m.VideoUrl
	}
	return ""
}

func (m *ESPortsVideoInfoView) GetUniqueGameId() int64 {
	if m != nil && m.UniqueGameId != nil {
		return *m.UniqueGameId
	}
	return 0
}

func (m *ESPortsVideoInfoView) GetUniqueGameName() string {
	if m != nil && m.UniqueGameName != nil {
		return *m.UniqueGameName
	}
	return ""
}

func (m *ESPortsVideoInfoView) GetIsFollow() int32 {
	if m != nil && m.IsFollow != nil {
		return *m.IsFollow
	}
	return 0
}

func (m *ESPortsVideoInfoView) GetIsAuthorFollow() int32 {
	if m != nil && m.IsAuthorFollow != nil {
		return *m.IsAuthorFollow
	}
	return 0
}

func (m *ESPortsVideoInfoView) GetFanCount() int32 {
	if m != nil && m.FanCount != nil {
		return *m.FanCount
	}
	return 0
}

func (m *ESPortsVideoInfoView) GetPlayerIconUrl() string {
	if m != nil && m.PlayerIconUrl != nil {
		return *m.PlayerIconUrl
	}
	return ""
}

func (m *ESPortsVideoInfoView) GetFlowCount() int64 {
	if m != nil && m.FlowCount != nil {
		return *m.FlowCount
	}
	return 0
}

func (m *ESPortsVideoInfoView) GetFlowCountSys() int64 {
	if m != nil && m.FlowCountSys != nil {
		return *m.FlowCountSys
	}
	return 0
}

func (m *ESPortsVideoInfoView) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *ESPortsVideoInfoView) GetIsThumbsUp() int32 {
	if m != nil && m.IsThumbsUp != nil {
		return *m.IsThumbsUp
	}
	return 0
}

//放映厅详细信息
type ESPortsMyLiveInfoView struct {
	//唯一ID 普通查询时使用的主键
	Id *int64 `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	//封面图
	CoverImageUrl *string `protobuf:"bytes,2,opt,name=CoverImageUrl" json:"CoverImageUrl,omitempty" bson:"CoverImageUrl,omitempty"`
	//标题
	Title *string `protobuf:"bytes,3,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	//游戏标签名称
	AppLabelName *string `protobuf:"bytes,18,opt,name=AppLabelName" json:"AppLabelName,omitempty" bson:"AppLabelName,omitempty"`
	//视频连接
	VideoUrl *string `protobuf:"bytes,8,opt,name=VideoUrl" json:"VideoUrl,omitempty" bson:"VideoUrl,omitempty"`
	//关联比赛表ID
	UniqueGameId *int64 `protobuf:"varint,26,opt,name=UniqueGameId" json:"UniqueGameId,omitempty" bson:"UniqueGameId,omitempty"`
	//关联比赛表标题
	UniqueGameName *string `protobuf:"bytes,38,opt,name=UniqueGameName" json:"UniqueGameName,omitempty" bson:"UniqueGameName,omitempty"`
	//公告
	Content *string `protobuf:"bytes,32,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	//状态
	Status *int32 `protobuf:"varint,5,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	//游戏标签ID
	AppLabelID           *int64   `protobuf:"varint,17,opt,name=AppLabelID" json:"AppLabelID,omitempty" bson:"AppLabelID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESPortsMyLiveInfoView) Reset()         { *m = ESPortsMyLiveInfoView{} }
func (m *ESPortsMyLiveInfoView) String() string { return proto.CompactTextString(m) }
func (*ESPortsMyLiveInfoView) ProtoMessage()    {}
func (*ESPortsMyLiveInfoView) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e764ebb51cf5e09, []int{7}
}
func (m *ESPortsMyLiveInfoView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESPortsMyLiveInfoView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESPortsMyLiveInfoView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESPortsMyLiveInfoView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESPortsMyLiveInfoView.Merge(m, src)
}
func (m *ESPortsMyLiveInfoView) XXX_Size() int {
	return m.Size()
}
func (m *ESPortsMyLiveInfoView) XXX_DiscardUnknown() {
	xxx_messageInfo_ESPortsMyLiveInfoView.DiscardUnknown(m)
}

var xxx_messageInfo_ESPortsMyLiveInfoView proto.InternalMessageInfo

func (m *ESPortsMyLiveInfoView) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ESPortsMyLiveInfoView) GetCoverImageUrl() string {
	if m != nil && m.CoverImageUrl != nil {
		return *m.CoverImageUrl
	}
	return ""
}

func (m *ESPortsMyLiveInfoView) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *ESPortsMyLiveInfoView) GetAppLabelName() string {
	if m != nil && m.AppLabelName != nil {
		return *m.AppLabelName
	}
	return ""
}

func (m *ESPortsMyLiveInfoView) GetVideoUrl() string {
	if m != nil && m.VideoUrl != nil {
		return *m.VideoUrl
	}
	return ""
}

func (m *ESPortsMyLiveInfoView) GetUniqueGameId() int64 {
	if m != nil && m.UniqueGameId != nil {
		return *m.UniqueGameId
	}
	return 0
}

func (m *ESPortsMyLiveInfoView) GetUniqueGameName() string {
	if m != nil && m.UniqueGameName != nil {
		return *m.UniqueGameName
	}
	return ""
}

func (m *ESPortsMyLiveInfoView) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *ESPortsMyLiveInfoView) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *ESPortsMyLiveInfoView) GetAppLabelID() int64 {
	if m != nil && m.AppLabelID != nil {
		return *m.AppLabelID
	}
	return 0
}

//资讯列表
type ESPortsRealTimeItemView struct {
	//唯一ID
	Id *int64 `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	//创建时间
	CreateTime *int64 `protobuf:"varint,3,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	//封面大图
	CoverBigImageUrl *string `protobuf:"bytes,6,opt,name=CoverBigImageUrl" json:"CoverBigImageUrl,omitempty" bson:"CoverBigImageUrl,omitempty"`
	//标题
	Title *string `protobuf:"bytes,8,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	//作者
	Author *string `protobuf:"bytes,12,opt,name=Author" json:"Author,omitempty" bson:"Author,omitempty"`
	//实际浏览数量
	LookCount *int32 `protobuf:"varint,14,opt,name=LookCount" json:"LookCount,omitempty" bson:"LookCount,omitempty"`
	//后台配置浏览数量
	LookCountSys *int32 `protobuf:"varint,15,opt,name=LookCountSys" json:"LookCountSys,omitempty" bson:"LookCountSys,omitempty"`
	//实际点赞
	ThumbsUpCount *int32 `protobuf:"varint,16,opt,name=ThumbsUpCount" json:"ThumbsUpCount,omitempty" bson:"ThumbsUpCount,omitempty"`
	//后台配置点赞
	ThumbsUpCountSys *int32 `protobuf:"varint,17,opt,name=ThumbsUpCountSys" json:"ThumbsUpCountSys,omitempty" bson:"ThumbsUpCountSys,omitempty"`
	//游戏标签ID
	AppLabelID *int64 `protobuf:"varint,18,opt,name=AppLabelID" json:"AppLabelID,omitempty" bson:"AppLabelID,omitempty"`
	//游戏标签名称
	AppLabelName *string `protobuf:"bytes,19,opt,name=AppLabelName" json:"AppLabelName,omitempty" bson:"AppLabelName,omitempty"`
	//评论数量
	CommentCount *int32 `protobuf:"varint,23,opt,name=CommentCount" json:"CommentCount,omitempty" bson:"CommentCount,omitempty"`
	//观看者是否点赞 不做存储 1已点赞 0未点赞
	IsThumbsUp           *int32   `protobuf:"varint,27,opt,name=IsThumbsUp" json:"IsThumbsUp,omitempty" bson:"IsThumbsUp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESPortsRealTimeItemView) Reset()         { *m = ESPortsRealTimeItemView{} }
func (m *ESPortsRealTimeItemView) String() string { return proto.CompactTextString(m) }
func (*ESPortsRealTimeItemView) ProtoMessage()    {}
func (*ESPortsRealTimeItemView) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e764ebb51cf5e09, []int{8}
}
func (m *ESPortsRealTimeItemView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESPortsRealTimeItemView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESPortsRealTimeItemView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESPortsRealTimeItemView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESPortsRealTimeItemView.Merge(m, src)
}
func (m *ESPortsRealTimeItemView) XXX_Size() int {
	return m.Size()
}
func (m *ESPortsRealTimeItemView) XXX_DiscardUnknown() {
	xxx_messageInfo_ESPortsRealTimeItemView.DiscardUnknown(m)
}

var xxx_messageInfo_ESPortsRealTimeItemView proto.InternalMessageInfo

func (m *ESPortsRealTimeItemView) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ESPortsRealTimeItemView) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ESPortsRealTimeItemView) GetCoverBigImageUrl() string {
	if m != nil && m.CoverBigImageUrl != nil {
		return *m.CoverBigImageUrl
	}
	return ""
}

func (m *ESPortsRealTimeItemView) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *ESPortsRealTimeItemView) GetAuthor() string {
	if m != nil && m.Author != nil {
		return *m.Author
	}
	return ""
}

func (m *ESPortsRealTimeItemView) GetLookCount() int32 {
	if m != nil && m.LookCount != nil {
		return *m.LookCount
	}
	return 0
}

func (m *ESPortsRealTimeItemView) GetLookCountSys() int32 {
	if m != nil && m.LookCountSys != nil {
		return *m.LookCountSys
	}
	return 0
}

func (m *ESPortsRealTimeItemView) GetThumbsUpCount() int32 {
	if m != nil && m.ThumbsUpCount != nil {
		return *m.ThumbsUpCount
	}
	return 0
}

func (m *ESPortsRealTimeItemView) GetThumbsUpCountSys() int32 {
	if m != nil && m.ThumbsUpCountSys != nil {
		return *m.ThumbsUpCountSys
	}
	return 0
}

func (m *ESPortsRealTimeItemView) GetAppLabelID() int64 {
	if m != nil && m.AppLabelID != nil {
		return *m.AppLabelID
	}
	return 0
}

func (m *ESPortsRealTimeItemView) GetAppLabelName() string {
	if m != nil && m.AppLabelName != nil {
		return *m.AppLabelName
	}
	return ""
}

func (m *ESPortsRealTimeItemView) GetCommentCount() int32 {
	if m != nil && m.CommentCount != nil {
		return *m.CommentCount
	}
	return 0
}

func (m *ESPortsRealTimeItemView) GetIsThumbsUp() int32 {
	if m != nil && m.IsThumbsUp != nil {
		return *m.IsThumbsUp
	}
	return 0
}

//资讯详细
type ESPortsRealTimeInfoView struct {
	//唯一ID
	Id *int64 `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	//创建时间
	CreateTime *int64 `protobuf:"varint,3,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	//封面大图
	CoverBigImageUrl *string `protobuf:"bytes,6,opt,name=CoverBigImageUrl" json:"CoverBigImageUrl,omitempty" bson:"CoverBigImageUrl,omitempty"`
	//标题
	Title *string `protobuf:"bytes,8,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	//正文html格式
	Content *string `protobuf:"bytes,9,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	//作者playerId
	AuthorPlayerId *int64 `protobuf:"varint,10,opt,name=AuthorPlayerId" json:"AuthorPlayerId,omitempty" bson:"AuthorPlayerId,omitempty"`
	//作者账号或柠檬号
	AuthorAccount *string `protobuf:"bytes,11,opt,name=AuthorAccount" json:"AuthorAccount,omitempty" bson:"AuthorAccount,omitempty"`
	//作者
	Author *string `protobuf:"bytes,12,opt,name=Author" json:"Author,omitempty" bson:"Author,omitempty"`
	//数据来源
	DataSource *string `protobuf:"bytes,13,opt,name=DataSource" json:"DataSource,omitempty" bson:"DataSource,omitempty"`
	//实际浏览数量
	LookCount *int32 `protobuf:"varint,14,opt,name=LookCount" json:"LookCount,omitempty" bson:"LookCount,omitempty"`
	//后台配置浏览数量
	LookCountSys *int32 `protobuf:"varint,15,opt,name=LookCountSys" json:"LookCountSys,omitempty" bson:"LookCountSys,omitempty"`
	//实际点赞
	ThumbsUpCount *int32 `protobuf:"varint,16,opt,name=ThumbsUpCount" json:"ThumbsUpCount,omitempty" bson:"ThumbsUpCount,omitempty"`
	//后台配置点赞
	ThumbsUpCountSys *int32 `protobuf:"varint,17,opt,name=ThumbsUpCountSys" json:"ThumbsUpCountSys,omitempty" bson:"ThumbsUpCountSys,omitempty"`
	//游戏标签ID
	AppLabelID *int64 `protobuf:"varint,18,opt,name=AppLabelID" json:"AppLabelID,omitempty" bson:"AppLabelID,omitempty"`
	//游戏标签名称
	AppLabelName *string `protobuf:"bytes,19,opt,name=AppLabelName" json:"AppLabelName,omitempty" bson:"AppLabelName,omitempty"`
	//评论数量
	CommentCount *int32 `protobuf:"varint,23,opt,name=CommentCount" json:"CommentCount,omitempty" bson:"CommentCount,omitempty"`
	//观看者是否点赞 不做存储 1已点赞 0未点赞
	IsThumbsUp           *int32   `protobuf:"varint,27,opt,name=IsThumbsUp" json:"IsThumbsUp,omitempty" bson:"IsThumbsUp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESPortsRealTimeInfoView) Reset()         { *m = ESPortsRealTimeInfoView{} }
func (m *ESPortsRealTimeInfoView) String() string { return proto.CompactTextString(m) }
func (*ESPortsRealTimeInfoView) ProtoMessage()    {}
func (*ESPortsRealTimeInfoView) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e764ebb51cf5e09, []int{9}
}
func (m *ESPortsRealTimeInfoView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESPortsRealTimeInfoView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESPortsRealTimeInfoView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESPortsRealTimeInfoView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESPortsRealTimeInfoView.Merge(m, src)
}
func (m *ESPortsRealTimeInfoView) XXX_Size() int {
	return m.Size()
}
func (m *ESPortsRealTimeInfoView) XXX_DiscardUnknown() {
	xxx_messageInfo_ESPortsRealTimeInfoView.DiscardUnknown(m)
}

var xxx_messageInfo_ESPortsRealTimeInfoView proto.InternalMessageInfo

func (m *ESPortsRealTimeInfoView) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ESPortsRealTimeInfoView) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ESPortsRealTimeInfoView) GetCoverBigImageUrl() string {
	if m != nil && m.CoverBigImageUrl != nil {
		return *m.CoverBigImageUrl
	}
	return ""
}

func (m *ESPortsRealTimeInfoView) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *ESPortsRealTimeInfoView) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *ESPortsRealTimeInfoView) GetAuthorPlayerId() int64 {
	if m != nil && m.AuthorPlayerId != nil {
		return *m.AuthorPlayerId
	}
	return 0
}

func (m *ESPortsRealTimeInfoView) GetAuthorAccount() string {
	if m != nil && m.AuthorAccount != nil {
		return *m.AuthorAccount
	}
	return ""
}

func (m *ESPortsRealTimeInfoView) GetAuthor() string {
	if m != nil && m.Author != nil {
		return *m.Author
	}
	return ""
}

func (m *ESPortsRealTimeInfoView) GetDataSource() string {
	if m != nil && m.DataSource != nil {
		return *m.DataSource
	}
	return ""
}

func (m *ESPortsRealTimeInfoView) GetLookCount() int32 {
	if m != nil && m.LookCount != nil {
		return *m.LookCount
	}
	return 0
}

func (m *ESPortsRealTimeInfoView) GetLookCountSys() int32 {
	if m != nil && m.LookCountSys != nil {
		return *m.LookCountSys
	}
	return 0
}

func (m *ESPortsRealTimeInfoView) GetThumbsUpCount() int32 {
	if m != nil && m.ThumbsUpCount != nil {
		return *m.ThumbsUpCount
	}
	return 0
}

func (m *ESPortsRealTimeInfoView) GetThumbsUpCountSys() int32 {
	if m != nil && m.ThumbsUpCountSys != nil {
		return *m.ThumbsUpCountSys
	}
	return 0
}

func (m *ESPortsRealTimeInfoView) GetAppLabelID() int64 {
	if m != nil && m.AppLabelID != nil {
		return *m.AppLabelID
	}
	return 0
}

func (m *ESPortsRealTimeInfoView) GetAppLabelName() string {
	if m != nil && m.AppLabelName != nil {
		return *m.AppLabelName
	}
	return ""
}

func (m *ESPortsRealTimeInfoView) GetCommentCount() int32 {
	if m != nil && m.CommentCount != nil {
		return *m.CommentCount
	}
	return 0
}

func (m *ESPortsRealTimeInfoView) GetIsThumbsUp() int32 {
	if m != nil && m.IsThumbsUp != nil {
		return *m.IsThumbsUp
	}
	return 0
}

//评论节点
type ESportCommentView struct {
	//唯一ID
	Id *int64 `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	//内容
	Content *string `protobuf:"bytes,2,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	//点赞
	ThumbsUpCount *int32 `protobuf:"varint,3,opt,name=ThumbsUpCount" json:"ThumbsUpCount,omitempty" bson:"ThumbsUpCount,omitempty"`
	//时间
	CreateTime *int64 `protobuf:"varint,4,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	//用户Id
	PlayerId *int64 `protobuf:"varint,5,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	//用户昵称
	PlayerNickName *string `protobuf:"bytes,6,opt,name=PlayerNickName" json:"PlayerNickName,omitempty" bson:"PlayerNickName,omitempty"`
	//父级ID
	ParentId *int64 `protobuf:"varint,7,opt,name=ParentId" json:"ParentId,omitempty" bson:"ParentId,omitempty"`
	//回复数量
	ReplyCount *int32 `protobuf:"varint,10,opt,name=ReplyCount" json:"ReplyCount,omitempty" bson:"ReplyCount,omitempty"`
	//某个评论的ID
	CommentId *int64 `protobuf:"varint,12,opt,name=CommentId" json:"CommentId,omitempty" bson:"CommentId,omitempty"`
	//用户图标url
	PlayerIconUrl *string `protobuf:"bytes,13,opt,name=PlayerIconUrl" json:"PlayerIconUrl,omitempty" bson:"PlayerIconUrl,omitempty"`
	//观看者是否点赞 不做存储 1已点赞 0未点赞
	IsThumbsUp *int32 `protobuf:"varint,14,opt,name=IsThumbsUp" json:"IsThumbsUp,omitempty" bson:"IsThumbsUp,omitempty"`
	//被回复的用户ID
	ReplyPlayerId *int64 `protobuf:"varint,15,opt,name=ReplyPlayerId" json:"ReplyPlayerId,omitempty" bson:"ReplyPlayerId,omitempty"`
	//被回复的用户昵称(数据不做存储)
	ReplyPlayerNickName  *string  `protobuf:"bytes,16,opt,name=ReplyPlayerNickName" json:"ReplyPlayerNickName,omitempty" bson:"ReplyPlayerNickName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESportCommentView) Reset()         { *m = ESportCommentView{} }
func (m *ESportCommentView) String() string { return proto.CompactTextString(m) }
func (*ESportCommentView) ProtoMessage()    {}
func (*ESportCommentView) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e764ebb51cf5e09, []int{10}
}
func (m *ESportCommentView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESportCommentView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESportCommentView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESportCommentView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESportCommentView.Merge(m, src)
}
func (m *ESportCommentView) XXX_Size() int {
	return m.Size()
}
func (m *ESportCommentView) XXX_DiscardUnknown() {
	xxx_messageInfo_ESportCommentView.DiscardUnknown(m)
}

var xxx_messageInfo_ESportCommentView proto.InternalMessageInfo

func (m *ESportCommentView) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ESportCommentView) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *ESportCommentView) GetThumbsUpCount() int32 {
	if m != nil && m.ThumbsUpCount != nil {
		return *m.ThumbsUpCount
	}
	return 0
}

func (m *ESportCommentView) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ESportCommentView) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *ESportCommentView) GetPlayerNickName() string {
	if m != nil && m.PlayerNickName != nil {
		return *m.PlayerNickName
	}
	return ""
}

func (m *ESportCommentView) GetParentId() int64 {
	if m != nil && m.ParentId != nil {
		return *m.ParentId
	}
	return 0
}

func (m *ESportCommentView) GetReplyCount() int32 {
	if m != nil && m.ReplyCount != nil {
		return *m.ReplyCount
	}
	return 0
}

func (m *ESportCommentView) GetCommentId() int64 {
	if m != nil && m.CommentId != nil {
		return *m.CommentId
	}
	return 0
}

func (m *ESportCommentView) GetPlayerIconUrl() string {
	if m != nil && m.PlayerIconUrl != nil {
		return *m.PlayerIconUrl
	}
	return ""
}

func (m *ESportCommentView) GetIsThumbsUp() int32 {
	if m != nil && m.IsThumbsUp != nil {
		return *m.IsThumbsUp
	}
	return 0
}

func (m *ESportCommentView) GetReplyPlayerId() int64 {
	if m != nil && m.ReplyPlayerId != nil {
		return *m.ReplyPlayerId
	}
	return 0
}

func (m *ESportCommentView) GetReplyPlayerNickName() string {
	if m != nil && m.ReplyPlayerNickName != nil {
		return *m.ReplyPlayerNickName
	}
	return ""
}

//通用标签
type ESPortsLabelView struct {
	//唯一ID
	Id *int64 `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	//标题
	Title *string `protobuf:"bytes,2,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	//游戏标签ID
	LabelId *int64 `protobuf:"varint,7,opt,name=LabelId" json:"LabelId,omitempty" bson:"LabelId,omitempty"`
	//标签类型  当 LabelType = 3游戏标签ID 使用LabelId  其他使用自增Id
	LabelType *int32 `protobuf:"varint,8,opt,name=LabelType" json:"LabelType,omitempty" bson:"LabelType,omitempty"`
	//标签图标url
	IconUrl              *string  `protobuf:"bytes,9,opt,name=IconUrl" json:"IconUrl,omitempty" bson:"IconUrl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESPortsLabelView) Reset()         { *m = ESPortsLabelView{} }
func (m *ESPortsLabelView) String() string { return proto.CompactTextString(m) }
func (*ESPortsLabelView) ProtoMessage()    {}
func (*ESPortsLabelView) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e764ebb51cf5e09, []int{11}
}
func (m *ESPortsLabelView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESPortsLabelView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESPortsLabelView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESPortsLabelView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESPortsLabelView.Merge(m, src)
}
func (m *ESPortsLabelView) XXX_Size() int {
	return m.Size()
}
func (m *ESPortsLabelView) XXX_DiscardUnknown() {
	xxx_messageInfo_ESPortsLabelView.DiscardUnknown(m)
}

var xxx_messageInfo_ESPortsLabelView proto.InternalMessageInfo

func (m *ESPortsLabelView) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ESPortsLabelView) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *ESPortsLabelView) GetLabelId() int64 {
	if m != nil && m.LabelId != nil {
		return *m.LabelId
	}
	return 0
}

func (m *ESPortsLabelView) GetLabelType() int32 {
	if m != nil && m.LabelType != nil {
		return *m.LabelType
	}
	return 0
}

func (m *ESPortsLabelView) GetIconUrl() string {
	if m != nil && m.IconUrl != nil {
		return *m.IconUrl
	}
	return ""
}

// 轮播图
type ESPortsCarouselView struct {
	//唯一ID
	Id *int64 `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	//标题
	Title *string `protobuf:"bytes,2,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	//图片地址
	ImageUrl *string `protobuf:"bytes,6,opt,name=ImageUrl" json:"ImageUrl,omitempty" bson:"ImageUrl,omitempty"`
	//投放位置
	MenuId               *int32   `protobuf:"varint,9,opt,name=MenuId" json:"MenuId,omitempty" bson:"MenuId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESPortsCarouselView) Reset()         { *m = ESPortsCarouselView{} }
func (m *ESPortsCarouselView) String() string { return proto.CompactTextString(m) }
func (*ESPortsCarouselView) ProtoMessage()    {}
func (*ESPortsCarouselView) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e764ebb51cf5e09, []int{12}
}
func (m *ESPortsCarouselView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESPortsCarouselView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESPortsCarouselView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESPortsCarouselView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESPortsCarouselView.Merge(m, src)
}
func (m *ESPortsCarouselView) XXX_Size() int {
	return m.Size()
}
func (m *ESPortsCarouselView) XXX_DiscardUnknown() {
	xxx_messageInfo_ESPortsCarouselView.DiscardUnknown(m)
}

var xxx_messageInfo_ESPortsCarouselView proto.InternalMessageInfo

func (m *ESPortsCarouselView) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ESPortsCarouselView) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *ESPortsCarouselView) GetImageUrl() string {
	if m != nil && m.ImageUrl != nil {
		return *m.ImageUrl
	}
	return ""
}

func (m *ESPortsCarouselView) GetMenuId() int32 {
	if m != nil && m.MenuId != nil {
		return *m.MenuId
	}
	return 0
}

//电竞风控redis存放结构体
type GameGuessBetRiskCtrlObj struct {
	//电竞配置
	EsOneBetGold         *int64   `protobuf:"varint,1,opt,name=EsOneBetGold" json:"EsOneBetGold,omitempty" bson:"EsOneBetGold,omitempty"`
	EsOneDayBetGold      *int64   `protobuf:"varint,2,opt,name=EsOneDayBetGold" json:"EsOneDayBetGold,omitempty" bson:"EsOneDayBetGold,omitempty"`
	EsDaySumGold         *int64   `protobuf:"varint,3,opt,name=EsDaySumGold" json:"EsDaySumGold,omitempty" bson:"EsDaySumGold,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GameGuessBetRiskCtrlObj) Reset()         { *m = GameGuessBetRiskCtrlObj{} }
func (m *GameGuessBetRiskCtrlObj) String() string { return proto.CompactTextString(m) }
func (*GameGuessBetRiskCtrlObj) ProtoMessage()    {}
func (*GameGuessBetRiskCtrlObj) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e764ebb51cf5e09, []int{13}
}
func (m *GameGuessBetRiskCtrlObj) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameGuessBetRiskCtrlObj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameGuessBetRiskCtrlObj.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameGuessBetRiskCtrlObj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameGuessBetRiskCtrlObj.Merge(m, src)
}
func (m *GameGuessBetRiskCtrlObj) XXX_Size() int {
	return m.Size()
}
func (m *GameGuessBetRiskCtrlObj) XXX_DiscardUnknown() {
	xxx_messageInfo_GameGuessBetRiskCtrlObj.DiscardUnknown(m)
}

var xxx_messageInfo_GameGuessBetRiskCtrlObj proto.InternalMessageInfo

func (m *GameGuessBetRiskCtrlObj) GetEsOneBetGold() int64 {
	if m != nil && m.EsOneBetGold != nil {
		return *m.EsOneBetGold
	}
	return 0
}

func (m *GameGuessBetRiskCtrlObj) GetEsOneDayBetGold() int64 {
	if m != nil && m.EsOneDayBetGold != nil {
		return *m.EsOneDayBetGold
	}
	return 0
}

func (m *GameGuessBetRiskCtrlObj) GetEsDaySumGold() int64 {
	if m != nil && m.EsDaySumGold != nil {
		return *m.EsDaySumGold
	}
	return 0
}

//电竞游戏标签redis存储结构
type GameLabelRedisObj struct {
	WZRYIcon             *string  `protobuf:"bytes,1,opt,name=WZRYIcon" json:"WZRYIcon,omitempty" bson:"WZRYIcon,omitempty"`
	CSGOIcon             *string  `protobuf:"bytes,2,opt,name=CSGOIcon" json:"CSGOIcon,omitempty" bson:"CSGOIcon,omitempty"`
	LOLIcon              *string  `protobuf:"bytes,3,opt,name=LOLIcon" json:"LOLIcon,omitempty" bson:"LOLIcon,omitempty"`
	DOTAIcon             *string  `protobuf:"bytes,4,opt,name=DOTAIcon" json:"DOTAIcon,omitempty" bson:"DOTAIcon,omitempty"`
	OTHERIcon            *string  `protobuf:"bytes,5,opt,name=OTHERIcon" json:"OTHERIcon,omitempty" bson:"OTHERIcon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GameLabelRedisObj) Reset()         { *m = GameLabelRedisObj{} }
func (m *GameLabelRedisObj) String() string { return proto.CompactTextString(m) }
func (*GameLabelRedisObj) ProtoMessage()    {}
func (*GameLabelRedisObj) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e764ebb51cf5e09, []int{14}
}
func (m *GameLabelRedisObj) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameLabelRedisObj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameLabelRedisObj.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameLabelRedisObj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameLabelRedisObj.Merge(m, src)
}
func (m *GameLabelRedisObj) XXX_Size() int {
	return m.Size()
}
func (m *GameLabelRedisObj) XXX_DiscardUnknown() {
	xxx_messageInfo_GameLabelRedisObj.DiscardUnknown(m)
}

var xxx_messageInfo_GameLabelRedisObj proto.InternalMessageInfo

func (m *GameLabelRedisObj) GetWZRYIcon() string {
	if m != nil && m.WZRYIcon != nil {
		return *m.WZRYIcon
	}
	return ""
}

func (m *GameLabelRedisObj) GetCSGOIcon() string {
	if m != nil && m.CSGOIcon != nil {
		return *m.CSGOIcon
	}
	return ""
}

func (m *GameLabelRedisObj) GetLOLIcon() string {
	if m != nil && m.LOLIcon != nil {
		return *m.LOLIcon
	}
	return ""
}

func (m *GameLabelRedisObj) GetDOTAIcon() string {
	if m != nil && m.DOTAIcon != nil {
		return *m.DOTAIcon
	}
	return ""
}

func (m *GameLabelRedisObj) GetOTHERIcon() string {
	if m != nil && m.OTHERIcon != nil {
		return *m.OTHERIcon
	}
	return ""
}

func init() {
	proto.RegisterType((*ESPortsGameItemView)(nil), "share_message.ESPortsGameItemView")
	proto.RegisterType((*ESPortsSysMsgView)(nil), "share_message.ESPortsSysMsgView")
	proto.RegisterType((*ESPortsGameOrderSysMsgView)(nil), "share_message.ESPortsGameOrderSysMsgView")
	proto.RegisterType((*ESPortsLiveRoomMsgView)(nil), "share_message.ESPortsLiveRoomMsgView")
	proto.RegisterType((*ESPortsFlowInfoView)(nil), "share_message.ESPortsFlowInfoView")
	proto.RegisterType((*ESPortsVideoItemView)(nil), "share_message.ESPortsVideoItemView")
	proto.RegisterType((*ESPortsVideoInfoView)(nil), "share_message.ESPortsVideoInfoView")
	proto.RegisterType((*ESPortsMyLiveInfoView)(nil), "share_message.ESPortsMyLiveInfoView")
	proto.RegisterType((*ESPortsRealTimeItemView)(nil), "share_message.ESPortsRealTimeItemView")
	proto.RegisterType((*ESPortsRealTimeInfoView)(nil), "share_message.ESPortsRealTimeInfoView")
	proto.RegisterType((*ESportCommentView)(nil), "share_message.ESportCommentView")
	proto.RegisterType((*ESPortsLabelView)(nil), "share_message.ESPortsLabelView")
	proto.RegisterType((*ESPortsCarouselView)(nil), "share_message.ESPortsCarouselView")
	proto.RegisterType((*GameGuessBetRiskCtrlObj)(nil), "share_message.GameGuessBetRiskCtrlObj")
	proto.RegisterType((*GameLabelRedisObj)(nil), "share_message.GameLabelRedisObj")
}

func init() { proto.RegisterFile("table_struct_e-sports_sm.proto", fileDescriptor_3e764ebb51cf5e09) }

var fileDescriptor_3e764ebb51cf5e09 = []byte{
	// 1135 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0x4d, 0x6e, 0xe3, 0x46,
	0x13, 0x05, 0x25, 0x4b, 0xa6, 0x6b, 0x24, 0x99, 0xa2, 0xff, 0x08, 0x0f, 0xec, 0xf1, 0x27, 0x7c,
	0x49, 0x8c, 0x24, 0x93, 0x3b, 0x58, 0xf2, 0xcf, 0x10, 0xb1, 0x47, 0x86, 0x24, 0x4f, 0x90, 0x2c,
	0x22, 0xb4, 0xc5, 0xb2, 0xcc, 0x31, 0xc9, 0x56, 0xd8, 0x4d, 0x1b, 0x3a, 0x41, 0x16, 0x39, 0x4a,
	0x36, 0x01, 0x92, 0x55, 0x4e, 0x90, 0x65, 0x0e, 0x10, 0x0c, 0x02, 0x6f, 0x02, 0xcc, 0x29, 0x82,
	0x2e, 0xb2, 0x69, 0x59, 0x96, 0x07, 0xca, 0xdf, 0x62, 0x96, 0x7a, 0xec, 0xee, 0x57, 0xf5, 0xea,
	0x55, 0xa9, 0x60, 0x5b, 0xb2, 0xf3, 0x00, 0xfb, 0x42, 0xc6, 0xc9, 0x40, 0xf6, 0xf1, 0xb9, 0x18,
	0xf1, 0x58, 0x8a, 0xbe, 0x08, 0x3f, 0x1b, 0xc5, 0x5c, 0x72, 0xbb, 0x2a, 0x2e, 0x59, 0x8c, 0xfd,
	0x10, 0x85, 0x60, 0x43, 0xdc, 0xac, 0x0c, 0x87, 0x5c, 0xb2, 0x61, 0xfa, 0xb1, 0xf1, 0x39, 0xac,
	0x1c, 0x74, 0x4f, 0xd5, 0x85, 0x23, 0x16, 0xa2, 0x2b, 0x31, 0x7c, 0xe5, 0xe3, 0x8d, 0xbd, 0x05,
	0x05, 0xdf, 0x73, 0x8c, 0x1d, 0x63, 0xb7, 0xd8, 0xac, 0xbf, 0x7d, 0xf3, 0xac, 0xda, 0xf7, 0xbd,
	0x4f, 0x79, 0xe8, 0x4b, 0x0c, 0x47, 0x72, 0x6c, 0xaf, 0x41, 0x35, 0x64, 0x72, 0x70, 0xd9, 0xbf,
	0x16, 0xfd, 0x88, 0x85, 0xe8, 0x14, 0x76, 0x8c, 0xdd, 0xa5, 0xc6, 0x4f, 0x06, 0xd4, 0xb3, 0xd7,
	0xba, 0x63, 0x71, 0x22, 0x86, 0xfa, 0x2d, 0xf7, 0x1d, 0x6f, 0x55, 0xa1, 0xd4, 0xf3, 0x65, 0x80,
	0x4e, 0x51, 0xbd, 0x61, 0x2f, 0xc3, 0x62, 0x8b, 0x47, 0x12, 0x23, 0xe9, 0x2c, 0x10, 0x60, 0x03,
	0xb4, 0x62, 0x64, 0x12, 0x7b, 0x7e, 0x88, 0xce, 0xa2, 0x7a, 0x46, 0xf1, 0x1f, 0x5c, 0x5c, 0xe0,
	0x40, 0xfa, 0xd7, 0x29, 0xbc, 0x44, 0x70, 0x0d, 0xca, 0xae, 0x38, 0x4d, 0xc4, 0xa5, 0xf3, 0x64,
	0xc7, 0xd8, 0x35, 0xed, 0x0d, 0x58, 0x76, 0xc5, 0x49, 0x9a, 0x77, 0x0b, 0x23, 0x89, 0xb1, 0x53,
	0xa1, 0x0f, 0x15, 0x58, 0x70, 0x07, 0x3c, 0x72, 0xaa, 0x14, 0xf6, 0x77, 0x05, 0xd8, 0x9c, 0x10,
	0xa1, 0x1d, 0x7b, 0x18, 0x4f, 0xc4, 0xdf, 0x80, 0x45, 0x82, 0x28, 0x89, 0xc2, 0xec, 0x24, 0x56,
	0xa1, 0x72, 0x16, 0xf9, 0xdf, 0x24, 0x48, 0x2a, 0x7a, 0xa4, 0x47, 0x51, 0xd1, 0xb4, 0x3d, 0x4f,
	0x64, 0x89, 0xd4, 0x61, 0xa9, 0x89, 0xb2, 0x83, 0x22, 0x09, 0xa4, 0x53, 0x26, 0xc8, 0x02, 0xb3,
	0x89, 0x32, 0x4d, 0x7f, 0x91, 0x90, 0x1a, 0x94, 0x9b, 0x28, 0x5f, 0x26, 0xa1, 0x63, 0x6a, 0x39,
	0xd4, 0x6f, 0x96, 0xe5, 0x48, 0x57, 0x14, 0x07, 0x21, 0x30, 0x43, 0xa0, 0x27, 0xc4, 0xbc, 0x0a,
	0x95, 0x94, 0x68, 0x2f, 0xe4, 0x49, 0x24, 0x29, 0xd1, 0xa2, 0xba, 0x7b, 0x1a, 0xb0, 0x31, 0xa5,
	0x52, 0x23, 0x24, 0x8d, 0x29, 0x3b, 0xb4, 0xac, 0xa0, 0xc6, 0xcf, 0x06, 0xac, 0x67, 0x6a, 0x1c,
	0xfb, 0xd7, 0xd8, 0xe1, 0x3c, 0x9c, 0xb3, 0x92, 0xeb, 0x50, 0xeb, 0x62, 0xe4, 0x61, 0x9c, 0x93,
	0x14, 0x34, 0xed, 0x4b, 0x7f, 0x70, 0x45, 0x21, 0x3f, 0x52, 0x64, 0x0b, 0xcc, 0x17, 0xc8, 0x3c,
	0x2a, 0x4a, 0x49, 0x0b, 0xa1, 0xe8, 0x5d, 0x8f, 0xa4, 0xa2, 0x47, 0xf6, 0x99, 0x64, 0xbd, 0xf1,
	0x28, 0x95, 0xaa, 0x34, 0x95, 0xb7, 0x49, 0xc1, 0xbf, 0xce, 0xed, 0x7c, 0x18, 0xf0, 0x1b, 0x37,
	0xba, 0xe0, 0xf3, 0x04, 0x3e, 0xa9, 0x4b, 0x41, 0x3b, 0x49, 0xb1, 0xb9, 0x1e, 0x05, 0x5c, 0x9c,
	0xe2, 0x5a, 0x20, 0xae, 0xef, 0x0b, 0xb0, 0x9a, 0x91, 0xbd, 0xf2, 0x3d, 0xe4, 0x93, 0xcd, 0xe3,
	0xbe, 0xbb, 0x79, 0x5a, 0xfc, 0x1a, 0x63, 0x37, 0x64, 0x43, 0x3c, 0x8b, 0x83, 0xb4, 0x79, 0xa6,
	0xfb, 0x60, 0x1d, 0x6a, 0x7b, 0x89, 0xbc, 0xe4, 0x77, 0x62, 0x96, 0xb4, 0xf5, 0x53, 0x7c, 0x6f,
	0x30, 0xa0, 0xaa, 0x2d, 0x68, 0xb9, 0x52, 0x98, 0x0c, 0x40, 0xa6, 0x50, 0x09, 0x74, 0x79, 0x12,
	0x0f, 0x90, 0x5c, 0x4f, 0x06, 0x3c, 0xe6, 0xfc, 0xaa, 0x95, 0x3b, 0xa2, 0xa4, 0x7c, 0x92, 0x43,
	0xdd, 0xb1, 0x20, 0x57, 0x10, 0xba, 0x37, 0x1a, 0x1d, 0xb3, 0x73, 0x0c, 0xa8, 0x68, 0xb6, 0xa6,
	0xc8, 0x34, 0xd9, 0xa2, 0x48, 0xd6, 0xa1, 0x76, 0xe7, 0x79, 0x3a, 0xf7, 0x21, 0x9d, 0x9b, 0xee,
	0x85, 0x4d, 0x52, 0xeb, 0xb7, 0xe2, 0x94, 0x5a, 0x73, 0xd6, 0xe6, 0x7d, 0x55, 0xcb, 0x02, 0x93,
	0xf2, 0x54, 0x21, 0x9b, 0x8f, 0xeb, 0xf2, 0xa8, 0x8a, 0x1b, 0x60, 0xba, 0xe2, 0x90, 0x07, 0x01,
	0xbf, 0x71, 0x3e, 0x56, 0x3c, 0xcd, 0xd2, 0xdb, 0x37, 0xcf, 0x8c, 0xe7, 0xf6, 0x16, 0xd4, 0x5c,
	0x91, 0x46, 0x9f, 0x7d, 0xfe, 0x64, 0xf2, 0xb3, 0x05, 0xe6, 0x21, 0x8b, 0xd2, 0xa8, 0xff, 0x4f,
	0xf1, 0xad, 0x41, 0x35, 0x53, 0x65, 0xc0, 0x23, 0x15, 0xce, 0x07, 0x3a, 0x3f, 0xd5, 0x23, 0xe9,
	0xc9, 0x86, 0x9e, 0x1a, 0x39, 0xa4, 0xf2, 0xfb, 0x88, 0xd0, 0x89, 0x66, 0xdd, 0xd1, 0x6a, 0xb9,
	0xa2, 0x77, 0x99, 0x84, 0xe7, 0xe2, 0x6c, 0xe4, 0xfc, 0x4f, 0x91, 0x34, 0xfe, 0x30, 0x60, 0x2d,
	0x2b, 0xef, 0xc9, 0x98, 0x1a, 0xf7, 0x5f, 0xad, 0xef, 0x7f, 0xa3, 0xf1, 0x83, 0xcc, 0x6a, 0x50,
	0xee, 0x4a, 0x26, 0x13, 0x41, 0xf6, 0xa1, 0x11, 0xa3, 0x69, 0xdd, 0x7d, 0xa7, 0x4e, 0x46, 0xfe,
	0xb1, 0x00, 0x1b, 0x59, 0xa6, 0x1d, 0x64, 0x81, 0x1a, 0x08, 0xf3, 0x76, 0xfe, 0xfd, 0x29, 0x92,
	0x4e, 0x16, 0x07, 0x2c, 0xca, 0xbf, 0xe9, 0x0f, 0x73, 0x09, 0xca, 0xf7, 0x25, 0x30, 0xa7, 0x3c,
	0x3b, 0xc3, 0x9f, 0xb5, 0x99, 0xfe, 0x5c, 0xd6, 0xf5, 0xd7, 0xc5, 0x4a, 0x0f, 0x5b, 0x04, 0x3b,
	0x60, 0xdd, 0x83, 0xd5, 0x85, 0xfa, 0x8c, 0xac, 0x6d, 0x6d, 0x8d, 0x7b, 0x05, 0x58, 0xd1, 0x72,
	0xb7, 0x78, 0x18, 0x62, 0x24, 0xd3, 0x97, 0x37, 0xf4, 0xfd, 0x09, 0x7f, 0x3c, 0x25, 0x7f, 0x7c,
	0x5b, 0x7c, 0xa8, 0xda, 0x9c, 0x0e, 0xf9, 0x47, 0xaa, 0x4d, 0x94, 0x78, 0xe9, 0x91, 0x49, 0x01,
	0xb3, 0x27, 0xc5, 0x93, 0x99, 0xaa, 0xdf, 0x9f, 0x14, 0xd5, 0xf7, 0xb0, 0x12, 0x3f, 0x14, 0xd4,
	0x92, 0xa6, 0x76, 0xc4, 0xec, 0xc2, 0x3c, 0x35, 0x98, 0x90, 0x31, 0xed, 0xcf, 0x07, 0xa9, 0x14,
	0x67, 0xfc, 0x27, 0x2f, 0x3c, 0xd8, 0x3a, 0x4a, 0xba, 0x1f, 0x53, 0x24, 0x5f, 0x0b, 0xf2, 0x75,
	0xe8, 0x94, 0xc5, 0x18, 0x49, 0xd7, 0xcb, 0x16, 0x3d, 0x1b, 0xa0, 0x83, 0xa3, 0x60, 0x9c, 0x72,
	0x00, 0x71, 0xd4, 0x61, 0x29, 0x8b, 0xdc, 0xf5, 0xa8, 0x2a, 0xc5, 0x87, 0x23, 0xae, 0x3a, 0x63,
	0x50, 0xd5, 0x74, 0x0d, 0xe8, 0xc5, 0x3c, 0x24, 0xda, 0x7a, 0xec, 0xa7, 0xb0, 0x32, 0x01, 0xe7,
	0x71, 0x59, 0xb4, 0x20, 0x26, 0x60, 0xe9, 0x8d, 0x48, 0xc9, 0xfe, 0x97, 0xb6, 0xda, 0x82, 0xb6,
	0x61, 0x5a, 0x45, 0x9d, 0x98, 0xf2, 0x8c, 0x02, 0x68, 0x9f, 0x31, 0x29, 0xb2, 0x65, 0x58, 0xd4,
	0xe1, 0x93, 0x55, 0x1b, 0x98, 0x2f, 0x33, 0x2d, 0x16, 0xf3, 0x44, 0xfc, 0x2d, 0x66, 0x0b, 0xcc,
	0xa9, 0x0e, 0xa9, 0x41, 0xf9, 0x04, 0xa3, 0xc4, 0xf5, 0x88, 0xa6, 0xd4, 0xf8, 0x1a, 0x36, 0xd4,
	0x5c, 0x3c, 0x4a, 0x50, 0x08, 0xb5, 0xa0, 0xfa, 0xe2, 0xaa, 0x25, 0xe3, 0xa0, 0x7d, 0xfe, 0x5a,
	0xb9, 0xea, 0x40, 0xb4, 0x23, 0x6c, 0xa2, 0x3c, 0xe2, 0x41, 0x46, 0xaa, 0xd6, 0x6a, 0x42, 0xf7,
	0xd9, 0x58, 0x7f, 0x28, 0x68, 0x6b, 0x1e, 0x88, 0x7d, 0x36, 0xee, 0x26, 0x21, 0xa1, 0xd4, 0xab,
	0x8d, 0x10, 0xea, 0xea, 0x7d, 0x4a, 0xb7, 0x83, 0x9e, 0x2f, 0xd4, 0xcb, 0x16, 0x98, 0x5f, 0x7c,
	0xd5, 0xf9, 0x92, 0x16, 0x3e, 0x43, 0x07, 0xda, 0xea, 0x1e, 0xb5, 0x09, 0xb9, 0x13, 0xad, 0x7d,
	0x4c, 0x40, 0x51, 0x1f, 0xd9, 0x6f, 0xf7, 0xf6, 0x08, 0xc9, 0x77, 0xea, 0x76, 0xef, 0xc5, 0x41,
	0xe7, 0x6e, 0x71, 0x6c, 0x56, 0x7e, 0xb9, 0xdd, 0x36, 0x7e, 0xbd, 0xdd, 0x36, 0x7e, 0xbf, 0xdd,
	0x36, 0xfe, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x22, 0x58, 0x77, 0xf3, 0x1d, 0x0d, 0x00, 0x00,
}

func (m *ESPortsGameItemView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESPortsGameItemView) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.Id))
	}
	if m.MatchVsName != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.MatchVsName)))
		i += copy(dAtA[i:], *m.MatchVsName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESPortsSysMsgView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESPortsSysMsgView) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.Id))
	}
	if m.Title != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.Content != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.CreateTime))
	}
	if m.EffectiveTime != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.EffectiveTime))
	}
	if m.IsPush != nil {
		dAtA[i] = 0x58
		i++
		if *m.IsPush {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsMessageCenter != nil {
		dAtA[i] = 0x60
		i++
		if *m.IsMessageCenter {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Icon != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.Icon)))
		i += copy(dAtA[i:], *m.Icon)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESPortsGameOrderSysMsgView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESPortsGameOrderSysMsgView) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrderId == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("OrderId")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.OrderId))
	}
	if m.UniqueGameId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.UniqueGameId))
	}
	if m.Odds != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.Odds)))
		i += copy(dAtA[i:], *m.Odds)
	}
	if m.BetResult != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.BetResult)))
		i += copy(dAtA[i:], *m.BetResult)
	}
	if m.BetTitle != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.BetTitle)))
		i += copy(dAtA[i:], *m.BetTitle)
	}
	if m.BetNum != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.BetNum)))
		i += copy(dAtA[i:], *m.BetNum)
	}
	if m.BetName != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.BetName)))
		i += copy(dAtA[i:], *m.BetName)
	}
	if m.GameName != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.GameName)))
		i += copy(dAtA[i:], *m.GameName)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.CreateTime))
	}
	if m.ResultAmount != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.ResultAmount))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.PlayerId))
	}
	if m.BetAmount != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.BetAmount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESPortsLiveRoomMsgView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESPortsLiveRoomMsgView) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.Id))
	}
	if m.SenderPlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.SenderPlayerId))
	}
	if m.NickName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.Content != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.HeadIcon != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.HeadIcon)))
		i += copy(dAtA[i:], *m.HeadIcon)
	}
	if m.LiveId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.LiveId))
	}
	if m.DataType != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.DataType))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESPortsFlowInfoView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESPortsFlowInfoView) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.Id))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.PlayerId))
	}
	if m.DataId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.DataId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESPortsVideoItemView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESPortsVideoItemView) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.Id))
	}
	if m.CoverImageUrl != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.CoverImageUrl)))
		i += copy(dAtA[i:], *m.CoverImageUrl)
	}
	if m.Title != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.AuthorAccount != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.AuthorAccount)))
		i += copy(dAtA[i:], *m.AuthorAccount)
	}
	if m.AuthorPlayerId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.AuthorPlayerId))
	}
	if m.Author != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.Author)))
		i += copy(dAtA[i:], *m.Author)
	}
	if m.DataSource != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.DataSource)))
		i += copy(dAtA[i:], *m.DataSource)
	}
	if m.LookCount != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.LookCount))
	}
	if m.LookCountSys != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.LookCountSys))
	}
	if m.AppLabelName != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.AppLabelName)))
		i += copy(dAtA[i:], *m.AppLabelName)
	}
	if m.UniqueGameId != nil {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.UniqueGameId))
	}
	if m.DataId != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.DataId))
	}
	if m.UniqueGameName != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.UniqueGameName)))
		i += copy(dAtA[i:], *m.UniqueGameName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESPortsVideoInfoView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESPortsVideoInfoView) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.Id))
	}
	if m.CoverImageUrl != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.CoverImageUrl)))
		i += copy(dAtA[i:], *m.CoverImageUrl)
	}
	if m.Title != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.AuthorAccount != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.AuthorAccount)))
		i += copy(dAtA[i:], *m.AuthorAccount)
	}
	if m.AuthorPlayerId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.AuthorPlayerId))
	}
	if m.VideoUrl != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.VideoUrl)))
		i += copy(dAtA[i:], *m.VideoUrl)
	}
	if m.Author != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.Author)))
		i += copy(dAtA[i:], *m.Author)
	}
	if m.DataSource != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.DataSource)))
		i += copy(dAtA[i:], *m.DataSource)
	}
	if m.LookCount != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.LookCount))
	}
	if m.LookCountSys != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.LookCountSys))
	}
	if m.AppLabelName != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.AppLabelName)))
		i += copy(dAtA[i:], *m.AppLabelName)
	}
	if m.UniqueGameId != nil {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.UniqueGameId))
	}
	if m.Content != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.IsThumbsUp != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.IsThumbsUp))
	}
	if m.FlowCount != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.FlowCount))
	}
	if m.FanCount != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.FanCount))
	}
	if m.PlayerIconUrl != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.PlayerIconUrl)))
		i += copy(dAtA[i:], *m.PlayerIconUrl)
	}
	if m.UniqueGameName != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.UniqueGameName)))
		i += copy(dAtA[i:], *m.UniqueGameName)
	}
	if m.FlowCountSys != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.FlowCountSys))
	}
	if m.IsFollow != nil {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.IsFollow))
	}
	if m.IsAuthorFollow != nil {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.IsAuthorFollow))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESPortsMyLiveInfoView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESPortsMyLiveInfoView) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.Id))
	}
	if m.CoverImageUrl != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.CoverImageUrl)))
		i += copy(dAtA[i:], *m.CoverImageUrl)
	}
	if m.Title != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.Status != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.Status))
	}
	if m.VideoUrl != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.VideoUrl)))
		i += copy(dAtA[i:], *m.VideoUrl)
	}
	if m.AppLabelID != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.AppLabelID))
	}
	if m.AppLabelName != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.AppLabelName)))
		i += copy(dAtA[i:], *m.AppLabelName)
	}
	if m.UniqueGameId != nil {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.UniqueGameId))
	}
	if m.Content != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.UniqueGameName != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.UniqueGameName)))
		i += copy(dAtA[i:], *m.UniqueGameName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESPortsRealTimeItemView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESPortsRealTimeItemView) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.Id))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.CreateTime))
	}
	if m.CoverBigImageUrl != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.CoverBigImageUrl)))
		i += copy(dAtA[i:], *m.CoverBigImageUrl)
	}
	if m.Title != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.Author != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.Author)))
		i += copy(dAtA[i:], *m.Author)
	}
	if m.LookCount != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.LookCount))
	}
	if m.LookCountSys != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.LookCountSys))
	}
	if m.ThumbsUpCount != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.ThumbsUpCount))
	}
	if m.ThumbsUpCountSys != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.ThumbsUpCountSys))
	}
	if m.AppLabelID != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.AppLabelID))
	}
	if m.AppLabelName != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.AppLabelName)))
		i += copy(dAtA[i:], *m.AppLabelName)
	}
	if m.CommentCount != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.CommentCount))
	}
	if m.IsThumbsUp != nil {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.IsThumbsUp))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESPortsRealTimeInfoView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESPortsRealTimeInfoView) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.Id))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.CreateTime))
	}
	if m.CoverBigImageUrl != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.CoverBigImageUrl)))
		i += copy(dAtA[i:], *m.CoverBigImageUrl)
	}
	if m.Title != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.Content != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.AuthorPlayerId != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.AuthorPlayerId))
	}
	if m.AuthorAccount != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.AuthorAccount)))
		i += copy(dAtA[i:], *m.AuthorAccount)
	}
	if m.Author != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.Author)))
		i += copy(dAtA[i:], *m.Author)
	}
	if m.DataSource != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.DataSource)))
		i += copy(dAtA[i:], *m.DataSource)
	}
	if m.LookCount != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.LookCount))
	}
	if m.LookCountSys != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.LookCountSys))
	}
	if m.ThumbsUpCount != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.ThumbsUpCount))
	}
	if m.ThumbsUpCountSys != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.ThumbsUpCountSys))
	}
	if m.AppLabelID != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.AppLabelID))
	}
	if m.AppLabelName != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.AppLabelName)))
		i += copy(dAtA[i:], *m.AppLabelName)
	}
	if m.CommentCount != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.CommentCount))
	}
	if m.IsThumbsUp != nil {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.IsThumbsUp))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESportCommentView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESportCommentView) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.Id))
	}
	if m.Content != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.ThumbsUpCount != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.ThumbsUpCount))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.CreateTime))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.PlayerId))
	}
	if m.PlayerNickName != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.PlayerNickName)))
		i += copy(dAtA[i:], *m.PlayerNickName)
	}
	if m.ParentId != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.ParentId))
	}
	if m.ReplyCount != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.ReplyCount))
	}
	if m.CommentId != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.CommentId))
	}
	if m.PlayerIconUrl != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.PlayerIconUrl)))
		i += copy(dAtA[i:], *m.PlayerIconUrl)
	}
	if m.IsThumbsUp != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.IsThumbsUp))
	}
	if m.ReplyPlayerId != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.ReplyPlayerId))
	}
	if m.ReplyPlayerNickName != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.ReplyPlayerNickName)))
		i += copy(dAtA[i:], *m.ReplyPlayerNickName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESPortsLabelView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESPortsLabelView) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.Id))
	}
	if m.Title != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.LabelId != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.LabelId))
	}
	if m.LabelType != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.LabelType))
	}
	if m.IconUrl != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.IconUrl)))
		i += copy(dAtA[i:], *m.IconUrl)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESPortsCarouselView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESPortsCarouselView) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.Id))
	}
	if m.Title != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.ImageUrl != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.ImageUrl)))
		i += copy(dAtA[i:], *m.ImageUrl)
	}
	if m.MenuId != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.MenuId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameGuessBetRiskCtrlObj) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameGuessBetRiskCtrlObj) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EsOneBetGold != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.EsOneBetGold))
	}
	if m.EsOneDayBetGold != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.EsOneDayBetGold))
	}
	if m.EsDaySumGold != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(*m.EsDaySumGold))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameLabelRedisObj) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameLabelRedisObj) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WZRYIcon != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.WZRYIcon)))
		i += copy(dAtA[i:], *m.WZRYIcon)
	}
	if m.CSGOIcon != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.CSGOIcon)))
		i += copy(dAtA[i:], *m.CSGOIcon)
	}
	if m.LOLIcon != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.LOLIcon)))
		i += copy(dAtA[i:], *m.LOLIcon)
	}
	if m.DOTAIcon != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.DOTAIcon)))
		i += copy(dAtA[i:], *m.DOTAIcon)
	}
	if m.OTHERIcon != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructESportsSm(dAtA, i, uint64(len(*m.OTHERIcon)))
		i += copy(dAtA[i:], *m.OTHERIcon)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTableStructESportsSm(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ESPortsGameItemView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.Id))
	}
	if m.MatchVsName != nil {
		l = len(*m.MatchVsName)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESPortsSysMsgView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.Id))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.CreateTime))
	}
	if m.EffectiveTime != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.EffectiveTime))
	}
	if m.IsPush != nil {
		n += 2
	}
	if m.IsMessageCenter != nil {
		n += 2
	}
	if m.Icon != nil {
		l = len(*m.Icon)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESPortsGameOrderSysMsgView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.OrderId))
	}
	if m.UniqueGameId != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.UniqueGameId))
	}
	if m.Odds != nil {
		l = len(*m.Odds)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.BetResult != nil {
		l = len(*m.BetResult)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.BetTitle != nil {
		l = len(*m.BetTitle)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.BetNum != nil {
		l = len(*m.BetNum)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.BetName != nil {
		l = len(*m.BetName)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.GameName != nil {
		l = len(*m.GameName)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.CreateTime))
	}
	if m.ResultAmount != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.ResultAmount))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.PlayerId))
	}
	if m.BetAmount != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.BetAmount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESPortsLiveRoomMsgView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.Id))
	}
	if m.SenderPlayerId != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.SenderPlayerId))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.HeadIcon != nil {
		l = len(*m.HeadIcon)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.LiveId != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.LiveId))
	}
	if m.DataType != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.DataType))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESPortsFlowInfoView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.Id))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.PlayerId))
	}
	if m.DataId != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.DataId))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESPortsVideoItemView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.Id))
	}
	if m.CoverImageUrl != nil {
		l = len(*m.CoverImageUrl)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.AuthorAccount != nil {
		l = len(*m.AuthorAccount)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.AuthorPlayerId != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.AuthorPlayerId))
	}
	if m.Author != nil {
		l = len(*m.Author)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.DataSource != nil {
		l = len(*m.DataSource)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.LookCount != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.LookCount))
	}
	if m.LookCountSys != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.LookCountSys))
	}
	if m.AppLabelName != nil {
		l = len(*m.AppLabelName)
		n += 2 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.UniqueGameId != nil {
		n += 2 + sovTableStructESportsSm(uint64(*m.UniqueGameId))
	}
	if m.DataId != nil {
		n += 2 + sovTableStructESportsSm(uint64(*m.DataId))
	}
	if m.UniqueGameName != nil {
		l = len(*m.UniqueGameName)
		n += 2 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESPortsVideoInfoView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.Id))
	}
	if m.CoverImageUrl != nil {
		l = len(*m.CoverImageUrl)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.AuthorAccount != nil {
		l = len(*m.AuthorAccount)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.AuthorPlayerId != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.AuthorPlayerId))
	}
	if m.VideoUrl != nil {
		l = len(*m.VideoUrl)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.Author != nil {
		l = len(*m.Author)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.DataSource != nil {
		l = len(*m.DataSource)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.LookCount != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.LookCount))
	}
	if m.LookCountSys != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.LookCountSys))
	}
	if m.AppLabelName != nil {
		l = len(*m.AppLabelName)
		n += 2 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.UniqueGameId != nil {
		n += 2 + sovTableStructESportsSm(uint64(*m.UniqueGameId))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 2 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.IsThumbsUp != nil {
		n += 2 + sovTableStructESportsSm(uint64(*m.IsThumbsUp))
	}
	if m.FlowCount != nil {
		n += 2 + sovTableStructESportsSm(uint64(*m.FlowCount))
	}
	if m.FanCount != nil {
		n += 2 + sovTableStructESportsSm(uint64(*m.FanCount))
	}
	if m.PlayerIconUrl != nil {
		l = len(*m.PlayerIconUrl)
		n += 2 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.UniqueGameName != nil {
		l = len(*m.UniqueGameName)
		n += 2 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.FlowCountSys != nil {
		n += 2 + sovTableStructESportsSm(uint64(*m.FlowCountSys))
	}
	if m.IsFollow != nil {
		n += 2 + sovTableStructESportsSm(uint64(*m.IsFollow))
	}
	if m.IsAuthorFollow != nil {
		n += 2 + sovTableStructESportsSm(uint64(*m.IsAuthorFollow))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESPortsMyLiveInfoView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.Id))
	}
	if m.CoverImageUrl != nil {
		l = len(*m.CoverImageUrl)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.Status))
	}
	if m.VideoUrl != nil {
		l = len(*m.VideoUrl)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.AppLabelID != nil {
		n += 2 + sovTableStructESportsSm(uint64(*m.AppLabelID))
	}
	if m.AppLabelName != nil {
		l = len(*m.AppLabelName)
		n += 2 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.UniqueGameId != nil {
		n += 2 + sovTableStructESportsSm(uint64(*m.UniqueGameId))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 2 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.UniqueGameName != nil {
		l = len(*m.UniqueGameName)
		n += 2 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESPortsRealTimeItemView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.Id))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.CreateTime))
	}
	if m.CoverBigImageUrl != nil {
		l = len(*m.CoverBigImageUrl)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.Author != nil {
		l = len(*m.Author)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.LookCount != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.LookCount))
	}
	if m.LookCountSys != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.LookCountSys))
	}
	if m.ThumbsUpCount != nil {
		n += 2 + sovTableStructESportsSm(uint64(*m.ThumbsUpCount))
	}
	if m.ThumbsUpCountSys != nil {
		n += 2 + sovTableStructESportsSm(uint64(*m.ThumbsUpCountSys))
	}
	if m.AppLabelID != nil {
		n += 2 + sovTableStructESportsSm(uint64(*m.AppLabelID))
	}
	if m.AppLabelName != nil {
		l = len(*m.AppLabelName)
		n += 2 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.CommentCount != nil {
		n += 2 + sovTableStructESportsSm(uint64(*m.CommentCount))
	}
	if m.IsThumbsUp != nil {
		n += 2 + sovTableStructESportsSm(uint64(*m.IsThumbsUp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESPortsRealTimeInfoView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.Id))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.CreateTime))
	}
	if m.CoverBigImageUrl != nil {
		l = len(*m.CoverBigImageUrl)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.AuthorPlayerId != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.AuthorPlayerId))
	}
	if m.AuthorAccount != nil {
		l = len(*m.AuthorAccount)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.Author != nil {
		l = len(*m.Author)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.DataSource != nil {
		l = len(*m.DataSource)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.LookCount != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.LookCount))
	}
	if m.LookCountSys != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.LookCountSys))
	}
	if m.ThumbsUpCount != nil {
		n += 2 + sovTableStructESportsSm(uint64(*m.ThumbsUpCount))
	}
	if m.ThumbsUpCountSys != nil {
		n += 2 + sovTableStructESportsSm(uint64(*m.ThumbsUpCountSys))
	}
	if m.AppLabelID != nil {
		n += 2 + sovTableStructESportsSm(uint64(*m.AppLabelID))
	}
	if m.AppLabelName != nil {
		l = len(*m.AppLabelName)
		n += 2 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.CommentCount != nil {
		n += 2 + sovTableStructESportsSm(uint64(*m.CommentCount))
	}
	if m.IsThumbsUp != nil {
		n += 2 + sovTableStructESportsSm(uint64(*m.IsThumbsUp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESportCommentView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.Id))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.ThumbsUpCount != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.ThumbsUpCount))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.CreateTime))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.PlayerId))
	}
	if m.PlayerNickName != nil {
		l = len(*m.PlayerNickName)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.ParentId != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.ParentId))
	}
	if m.ReplyCount != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.ReplyCount))
	}
	if m.CommentId != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.CommentId))
	}
	if m.PlayerIconUrl != nil {
		l = len(*m.PlayerIconUrl)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.IsThumbsUp != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.IsThumbsUp))
	}
	if m.ReplyPlayerId != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.ReplyPlayerId))
	}
	if m.ReplyPlayerNickName != nil {
		l = len(*m.ReplyPlayerNickName)
		n += 2 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESPortsLabelView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.Id))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.LabelId != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.LabelId))
	}
	if m.LabelType != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.LabelType))
	}
	if m.IconUrl != nil {
		l = len(*m.IconUrl)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESPortsCarouselView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.Id))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.ImageUrl != nil {
		l = len(*m.ImageUrl)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.MenuId != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.MenuId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameGuessBetRiskCtrlObj) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EsOneBetGold != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.EsOneBetGold))
	}
	if m.EsOneDayBetGold != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.EsOneDayBetGold))
	}
	if m.EsDaySumGold != nil {
		n += 1 + sovTableStructESportsSm(uint64(*m.EsDaySumGold))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameLabelRedisObj) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WZRYIcon != nil {
		l = len(*m.WZRYIcon)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.CSGOIcon != nil {
		l = len(*m.CSGOIcon)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.LOLIcon != nil {
		l = len(*m.LOLIcon)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.DOTAIcon != nil {
		l = len(*m.DOTAIcon)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.OTHERIcon != nil {
		l = len(*m.OTHERIcon)
		n += 1 + l + sovTableStructESportsSm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTableStructESportsSm(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTableStructESportsSm(x uint64) (n int) {
	return sovTableStructESportsSm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ESPortsGameItemView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsSm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESPortsGameItemView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESPortsGameItemView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchVsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MatchVsName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsSm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESPortsSysMsgView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsSm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESPortsSysMsgView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESPortsSysMsgView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EffectiveTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPush", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsPush = &b
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMessageCenter", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsMessageCenter = &b
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Icon = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsSm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESPortsGameOrderSysMsgView) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsSm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESPortsGameOrderSysMsgView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESPortsGameOrderSysMsgView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueGameId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniqueGameId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Odds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Odds = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetResult = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetTitle = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetNum = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetName = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GameName = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultAmount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ResultAmount = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetAmount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BetAmount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsSm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("OrderId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESPortsLiveRoomMsgView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsSm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESPortsLiveRoomMsgView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESPortsLiveRoomMsgView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderPlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SenderPlayerId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadIcon = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LiveId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataType = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsSm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESPortsFlowInfoView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsSm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESPortsFlowInfoView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESPortsFlowInfoView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsSm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESPortsVideoItemView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsSm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESPortsVideoItemView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESPortsVideoItemView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CoverImageUrl = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AuthorAccount = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorPlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AuthorPlayerId = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Author = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DataSource = &s
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LookCount = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookCountSys", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LookCountSys = &v
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AppLabelName = &s
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueGameId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniqueGameId = &v
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataId = &v
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueGameName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UniqueGameName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsSm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESPortsVideoInfoView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsSm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESPortsVideoInfoView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESPortsVideoInfoView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CoverImageUrl = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AuthorAccount = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorPlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AuthorPlayerId = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VideoUrl = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Author = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DataSource = &s
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LookCount = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookCountSys", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LookCountSys = &v
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AppLabelName = &s
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueGameId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniqueGameId = &v
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsThumbsUp", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsThumbsUp = &v
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlowCount = &v
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FanCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FanCount = &v
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerIconUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PlayerIconUrl = &s
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueGameName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UniqueGameName = &s
			iNdEx = postIndex
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowCountSys", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlowCountSys = &v
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollow", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFollow = &v
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAuthorFollow", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAuthorFollow = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsSm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESPortsMyLiveInfoView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsSm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESPortsMyLiveInfoView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESPortsMyLiveInfoView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CoverImageUrl = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VideoUrl = &s
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppLabelID = &v
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AppLabelName = &s
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueGameId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniqueGameId = &v
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueGameName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UniqueGameName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsSm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESPortsRealTimeItemView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsSm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESPortsRealTimeItemView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESPortsRealTimeItemView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverBigImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CoverBigImageUrl = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Author = &s
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LookCount = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookCountSys", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LookCountSys = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbsUpCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThumbsUpCount = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbsUpCountSys", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThumbsUpCountSys = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppLabelID = &v
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AppLabelName = &s
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommentCount = &v
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsThumbsUp", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsThumbsUp = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsSm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESPortsRealTimeInfoView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsSm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESPortsRealTimeInfoView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESPortsRealTimeInfoView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverBigImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CoverBigImageUrl = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorPlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AuthorPlayerId = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AuthorAccount = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Author = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DataSource = &s
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LookCount = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookCountSys", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LookCountSys = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbsUpCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThumbsUpCount = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbsUpCountSys", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThumbsUpCountSys = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppLabelID = &v
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AppLabelName = &s
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommentCount = &v
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsThumbsUp", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsThumbsUp = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsSm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESportCommentView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsSm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESportCommentView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESportCommentView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbsUpCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThumbsUpCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerNickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PlayerNickName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ParentId = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReplyCount = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommentId = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerIconUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PlayerIconUrl = &s
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsThumbsUp", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsThumbsUp = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyPlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReplyPlayerId = &v
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyPlayerNickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ReplyPlayerNickName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsSm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESPortsLabelView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsSm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESPortsLabelView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESPortsLabelView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LabelId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LabelType = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.IconUrl = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsSm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESPortsCarouselView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsSm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESPortsCarouselView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESPortsCarouselView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ImageUrl = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MenuId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MenuId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsSm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameGuessBetRiskCtrlObj) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsSm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameGuessBetRiskCtrlObj: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameGuessBetRiskCtrlObj: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EsOneBetGold", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EsOneBetGold = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EsOneDayBetGold", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EsOneDayBetGold = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EsDaySumGold", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EsDaySumGold = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsSm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameLabelRedisObj) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsSm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameLabelRedisObj: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameLabelRedisObj: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WZRYIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WZRYIcon = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CSGOIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CSGOIcon = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LOLIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LOLIcon = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DOTAIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DOTAIcon = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OTHERIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OTHERIcon = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsSm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsSm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTableStructESportsSm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTableStructESportsSm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTableStructESportsSm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTableStructESportsSm
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTableStructESportsSm
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTableStructESportsSm
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTableStructESportsSm(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTableStructESportsSm
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTableStructESportsSm = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTableStructESportsSm   = fmt.Errorf("proto: integer overflow")
)
