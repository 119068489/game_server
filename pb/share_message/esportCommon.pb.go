// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: esportCommon.proto

package share_message

import (
	fmt "fmt"
	proto "github.com/akqp2019/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//竞猜局数的结构体
type GameGuessOddsNumObject struct {
	//竞猜所属节数:0:全场;1:第一局;2:第一局（依次类推）
	Num *string `protobuf:"bytes,1,opt,name=Num" json:"Num,omitempty" bson:"Num,omitempty"`
	//竞猜节数名
	NumName *string `protobuf:"bytes,2,opt,name=NumName" json:"NumName,omitempty" bson:"NumName,omitempty"`
	//竞猜内容
	Contents             []*GameGuessOddsContentObject `protobuf:"bytes,3,rep,name=Contents" json:"Contents,omitempty" bson:"Contents,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-" bson:"-"`
	XXX_unrecognized     []byte                        `json:"-" bson:"-"`
	XXX_sizecache        int32                         `json:"-" bson:"-"`
}

func (m *GameGuessOddsNumObject) Reset()         { *m = GameGuessOddsNumObject{} }
func (m *GameGuessOddsNumObject) String() string { return proto.CompactTextString(m) }
func (*GameGuessOddsNumObject) ProtoMessage()    {}
func (*GameGuessOddsNumObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_70dcee0eb64d9c2b, []int{0}
}
func (m *GameGuessOddsNumObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameGuessOddsNumObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameGuessOddsNumObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameGuessOddsNumObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameGuessOddsNumObject.Merge(m, src)
}
func (m *GameGuessOddsNumObject) XXX_Size() int {
	return m.Size()
}
func (m *GameGuessOddsNumObject) XXX_DiscardUnknown() {
	xxx_messageInfo_GameGuessOddsNumObject.DiscardUnknown(m)
}

var xxx_messageInfo_GameGuessOddsNumObject proto.InternalMessageInfo

func (m *GameGuessOddsNumObject) GetNum() string {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return ""
}

func (m *GameGuessOddsNumObject) GetNumName() string {
	if m != nil && m.NumName != nil {
		return *m.NumName
	}
	return ""
}

func (m *GameGuessOddsNumObject) GetContents() []*GameGuessOddsContentObject {
	if m != nil {
		return m.Contents
	}
	return nil
}

//竞猜内容的结构体
type GameGuessOddsContentObject struct {
	//竞猜内容id
	BetId *string `protobuf:"bytes,1,opt,name=BetId" json:"BetId,omitempty" bson:"BetId,omitempty"`
	//竞猜内容
	BetTitle *string `protobuf:"bytes,2,opt,name=BetTitle" json:"BetTitle,omitempty" bson:"BetTitle,omitempty"`
	//app后台设置竞猜内容的盘口状态 1:封盘 2:开盘(给后台管理用)
	AppGuessFlag *int32 `protobuf:"varint,3,opt,name=AppGuessFlag" json:"AppGuessFlag,omitempty" bson:"AppGuessFlag,omitempty"`
	//app后台设置竞猜内容的显示状态 1:关闭 2:开启(给后台管理用)
	AppGuessViewFlag *int32 `protobuf:"varint,4,opt,name=AppGuessViewFlag" json:"AppGuessViewFlag,omitempty" bson:"AppGuessViewFlag,omitempty"`
	//竞猜项
	Items                []*GameGuessOddsItemObject `protobuf:"bytes,5,rep,name=Items" json:"Items,omitempty" bson:"Items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-" bson:"-"`
	XXX_unrecognized     []byte                     `json:"-" bson:"-"`
	XXX_sizecache        int32                      `json:"-" bson:"-"`
}

func (m *GameGuessOddsContentObject) Reset()         { *m = GameGuessOddsContentObject{} }
func (m *GameGuessOddsContentObject) String() string { return proto.CompactTextString(m) }
func (*GameGuessOddsContentObject) ProtoMessage()    {}
func (*GameGuessOddsContentObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_70dcee0eb64d9c2b, []int{1}
}
func (m *GameGuessOddsContentObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameGuessOddsContentObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameGuessOddsContentObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameGuessOddsContentObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameGuessOddsContentObject.Merge(m, src)
}
func (m *GameGuessOddsContentObject) XXX_Size() int {
	return m.Size()
}
func (m *GameGuessOddsContentObject) XXX_DiscardUnknown() {
	xxx_messageInfo_GameGuessOddsContentObject.DiscardUnknown(m)
}

var xxx_messageInfo_GameGuessOddsContentObject proto.InternalMessageInfo

func (m *GameGuessOddsContentObject) GetBetId() string {
	if m != nil && m.BetId != nil {
		return *m.BetId
	}
	return ""
}

func (m *GameGuessOddsContentObject) GetBetTitle() string {
	if m != nil && m.BetTitle != nil {
		return *m.BetTitle
	}
	return ""
}

func (m *GameGuessOddsContentObject) GetAppGuessFlag() int32 {
	if m != nil && m.AppGuessFlag != nil {
		return *m.AppGuessFlag
	}
	return 0
}

func (m *GameGuessOddsContentObject) GetAppGuessViewFlag() int32 {
	if m != nil && m.AppGuessViewFlag != nil {
		return *m.AppGuessViewFlag
	}
	return 0
}

func (m *GameGuessOddsContentObject) GetItems() []*GameGuessOddsItemObject {
	if m != nil {
		return m.Items
	}
	return nil
}

//竞猜项的结构体
type GameGuessOddsItemObject struct {
	//竞猜项 id(全局唯一)
	BetNum *string `protobuf:"bytes,1,opt,name=BetNum" json:"BetNum,omitempty" bson:"BetNum,omitempty"`
	//竞猜项是否有结果(0 否 1 是)
	Status *string `protobuf:"bytes,2,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	//该竞猜项是否达成(0未达成，1达成 , -1 无结果)
	Win *string `protobuf:"bytes,3,opt,name=Win" json:"Win,omitempty" bson:"Win,omitempty"`
	//实时赔率
	Odds *string `protobuf:"bytes,4,opt,name=Odds" json:"Odds,omitempty" bson:"Odds,omitempty"`
	//竞猜项名称(某些竞猜项目要通过组合计算得到)
	BetName *string `protobuf:"bytes,5,opt,name=BetName" json:"BetName,omitempty" bson:"BetName,omitempty"`
	//投注状态(1:可投注,2:封盘):这个是通过组合判断过的值给app页面用
	BetStatus *string `protobuf:"bytes,6,opt,name=BetStatus" json:"BetStatus,omitempty" bson:"BetStatus,omitempty"`
	//是否选中(false:没选中,true:选中)(给app页面字段)
	ItemChecked *bool `protobuf:"varint,7,opt,name=ItemChecked" json:"ItemChecked,omitempty" bson:"ItemChecked,omitempty"`
	//赔率是否变化1:上升 2:下降
	OddsChanged *int32 `protobuf:"varint,8,opt,name=OddsChanged" json:"OddsChanged,omitempty" bson:"OddsChanged,omitempty"`
	//竞猜项的结果(0未达成，1达成 , -1 无结果):这个是通过Status、Win组合判断过的值给app页面用
	Result *string `protobuf:"bytes,9,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	//竞猜项的封盘时间(后台管理用)
	StatusTime *string `protobuf:"bytes,10,opt,name=StatusTime" json:"StatusTime,omitempty" bson:"StatusTime,omitempty"`
	//竞猜项的结果的时间(后台管理用)
	ResultTime           *string  `protobuf:"bytes,11,opt,name=ResultTime" json:"ResultTime,omitempty" bson:"ResultTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GameGuessOddsItemObject) Reset()         { *m = GameGuessOddsItemObject{} }
func (m *GameGuessOddsItemObject) String() string { return proto.CompactTextString(m) }
func (*GameGuessOddsItemObject) ProtoMessage()    {}
func (*GameGuessOddsItemObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_70dcee0eb64d9c2b, []int{2}
}
func (m *GameGuessOddsItemObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameGuessOddsItemObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameGuessOddsItemObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameGuessOddsItemObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameGuessOddsItemObject.Merge(m, src)
}
func (m *GameGuessOddsItemObject) XXX_Size() int {
	return m.Size()
}
func (m *GameGuessOddsItemObject) XXX_DiscardUnknown() {
	xxx_messageInfo_GameGuessOddsItemObject.DiscardUnknown(m)
}

var xxx_messageInfo_GameGuessOddsItemObject proto.InternalMessageInfo

func (m *GameGuessOddsItemObject) GetBetNum() string {
	if m != nil && m.BetNum != nil {
		return *m.BetNum
	}
	return ""
}

func (m *GameGuessOddsItemObject) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *GameGuessOddsItemObject) GetWin() string {
	if m != nil && m.Win != nil {
		return *m.Win
	}
	return ""
}

func (m *GameGuessOddsItemObject) GetOdds() string {
	if m != nil && m.Odds != nil {
		return *m.Odds
	}
	return ""
}

func (m *GameGuessOddsItemObject) GetBetName() string {
	if m != nil && m.BetName != nil {
		return *m.BetName
	}
	return ""
}

func (m *GameGuessOddsItemObject) GetBetStatus() string {
	if m != nil && m.BetStatus != nil {
		return *m.BetStatus
	}
	return ""
}

func (m *GameGuessOddsItemObject) GetItemChecked() bool {
	if m != nil && m.ItemChecked != nil {
		return *m.ItemChecked
	}
	return false
}

func (m *GameGuessOddsItemObject) GetOddsChanged() int32 {
	if m != nil && m.OddsChanged != nil {
		return *m.OddsChanged
	}
	return 0
}

func (m *GameGuessOddsItemObject) GetResult() string {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ""
}

func (m *GameGuessOddsItemObject) GetStatusTime() string {
	if m != nil && m.StatusTime != nil {
		return *m.StatusTime
	}
	return ""
}

func (m *GameGuessOddsItemObject) GetResultTime() string {
	if m != nil && m.ResultTime != nil {
		return *m.ResultTime
	}
	return ""
}

//竞猜共通结构
type GameGuessDetailObject struct {
	// 竞猜表中的唯一自增id
	UniqueGameGuessId *int64 `protobuf:"varint,1,opt,name=UniqueGameGuessId" json:"UniqueGameGuessId,omitempty" bson:"UniqueGameGuessId,omitempty"`
	//比赛状态 0 未开始，1 进行中，2 已结束
	GameStatus *string `protobuf:"bytes,2,opt,name=GameStatus" json:"GameStatus,omitempty" bson:"GameStatus,omitempty"`
	//比赛开始时间
	BeginTime *string `protobuf:"bytes,3,opt,name=BeginTime" json:"BeginTime,omitempty" bson:"BeginTime,omitempty"`
	// 竞猜内容、竞猜项信息
	GuessOddsNums        []*GameGuessOddsNumObject `protobuf:"bytes,4,rep,name=guessOddsNums" json:"guessOddsNums,omitempty" bson:"guessOddsNums,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-" bson:"-"`
	XXX_unrecognized     []byte                    `json:"-" bson:"-"`
	XXX_sizecache        int32                     `json:"-" bson:"-"`
}

func (m *GameGuessDetailObject) Reset()         { *m = GameGuessDetailObject{} }
func (m *GameGuessDetailObject) String() string { return proto.CompactTextString(m) }
func (*GameGuessDetailObject) ProtoMessage()    {}
func (*GameGuessDetailObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_70dcee0eb64d9c2b, []int{3}
}
func (m *GameGuessDetailObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameGuessDetailObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameGuessDetailObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameGuessDetailObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameGuessDetailObject.Merge(m, src)
}
func (m *GameGuessDetailObject) XXX_Size() int {
	return m.Size()
}
func (m *GameGuessDetailObject) XXX_DiscardUnknown() {
	xxx_messageInfo_GameGuessDetailObject.DiscardUnknown(m)
}

var xxx_messageInfo_GameGuessDetailObject proto.InternalMessageInfo

func (m *GameGuessDetailObject) GetUniqueGameGuessId() int64 {
	if m != nil && m.UniqueGameGuessId != nil {
		return *m.UniqueGameGuessId
	}
	return 0
}

func (m *GameGuessDetailObject) GetGameStatus() string {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return ""
}

func (m *GameGuessDetailObject) GetBeginTime() string {
	if m != nil && m.BeginTime != nil {
		return *m.BeginTime
	}
	return ""
}

func (m *GameGuessDetailObject) GetGuessOddsNums() []*GameGuessOddsNumObject {
	if m != nil {
		return m.GuessOddsNums
	}
	return nil
}

//实时数据中队伍选取装备的结构
type RealTimeItemObject struct {
	//id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty" bson:"id,omitempty"`
	//英文名
	NameEn *string `protobuf:"bytes,2,opt,name=name_en" json:"name_en,omitempty" bson:"name_en,omitempty"`
	//中文名
	NameZh *string `protobuf:"bytes,3,opt,name=name_zh" json:"name_zh,omitempty" bson:"name_zh,omitempty"`
	//图标
	Icon                 *string  `protobuf:"bytes,4,opt,name=icon" json:"icon,omitempty" bson:"icon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RealTimeItemObject) Reset()         { *m = RealTimeItemObject{} }
func (m *RealTimeItemObject) String() string { return proto.CompactTextString(m) }
func (*RealTimeItemObject) ProtoMessage()    {}
func (*RealTimeItemObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_70dcee0eb64d9c2b, []int{4}
}
func (m *RealTimeItemObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RealTimeItemObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RealTimeItemObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RealTimeItemObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RealTimeItemObject.Merge(m, src)
}
func (m *RealTimeItemObject) XXX_Size() int {
	return m.Size()
}
func (m *RealTimeItemObject) XXX_DiscardUnknown() {
	xxx_messageInfo_RealTimeItemObject.DiscardUnknown(m)
}

var xxx_messageInfo_RealTimeItemObject proto.InternalMessageInfo

func (m *RealTimeItemObject) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RealTimeItemObject) GetNameEn() string {
	if m != nil && m.NameEn != nil {
		return *m.NameEn
	}
	return ""
}

func (m *RealTimeItemObject) GetNameZh() string {
	if m != nil && m.NameZh != nil {
		return *m.NameZh
	}
	return ""
}

func (m *RealTimeItemObject) GetIcon() string {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return ""
}

//实时数据中队伍选取英雄的结构
type RealTimeHeroObject struct {
	//id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty" bson:"id,omitempty"`
	//英文名
	NameEn *string `protobuf:"bytes,2,opt,name=name_en" json:"name_en,omitempty" bson:"name_en,omitempty"`
	//中文名
	NameZh *string `protobuf:"bytes,3,opt,name=name_zh" json:"name_zh,omitempty" bson:"name_zh,omitempty"`
	//图标
	Icon                 *string  `protobuf:"bytes,4,opt,name=icon" json:"icon,omitempty" bson:"icon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RealTimeHeroObject) Reset()         { *m = RealTimeHeroObject{} }
func (m *RealTimeHeroObject) String() string { return proto.CompactTextString(m) }
func (*RealTimeHeroObject) ProtoMessage()    {}
func (*RealTimeHeroObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_70dcee0eb64d9c2b, []int{5}
}
func (m *RealTimeHeroObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RealTimeHeroObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RealTimeHeroObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RealTimeHeroObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RealTimeHeroObject.Merge(m, src)
}
func (m *RealTimeHeroObject) XXX_Size() int {
	return m.Size()
}
func (m *RealTimeHeroObject) XXX_DiscardUnknown() {
	xxx_messageInfo_RealTimeHeroObject.DiscardUnknown(m)
}

var xxx_messageInfo_RealTimeHeroObject proto.InternalMessageInfo

func (m *RealTimeHeroObject) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RealTimeHeroObject) GetNameEn() string {
	if m != nil && m.NameEn != nil {
		return *m.NameEn
	}
	return ""
}

func (m *RealTimeHeroObject) GetNameZh() string {
	if m != nil && m.NameZh != nil {
		return *m.NameZh
	}
	return ""
}

func (m *RealTimeHeroObject) GetIcon() string {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return ""
}

func init() {
	proto.RegisterType((*GameGuessOddsNumObject)(nil), "share_message.GameGuessOddsNumObject")
	proto.RegisterType((*GameGuessOddsContentObject)(nil), "share_message.GameGuessOddsContentObject")
	proto.RegisterType((*GameGuessOddsItemObject)(nil), "share_message.GameGuessOddsItemObject")
	proto.RegisterType((*GameGuessDetailObject)(nil), "share_message.GameGuessDetailObject")
	proto.RegisterType((*RealTimeItemObject)(nil), "share_message.RealTimeItemObject")
	proto.RegisterType((*RealTimeHeroObject)(nil), "share_message.RealTimeHeroObject")
}

func init() { proto.RegisterFile("esportCommon.proto", fileDescriptor_70dcee0eb64d9c2b) }

var fileDescriptor_70dcee0eb64d9c2b = []byte{
	// 460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0x3d, 0x6f, 0x13, 0x41,
	0x10, 0xd5, 0xe6, 0x72, 0x8e, 0x3d, 0x67, 0x9b, 0x64, 0xf9, 0x5a, 0x52, 0x58, 0x96, 0x25, 0x90,
	0x69, 0x5c, 0x20, 0x51, 0x41, 0xc3, 0x19, 0x11, 0xd2, 0x38, 0x28, 0x04, 0x28, 0xa3, 0xc5, 0x37,
	0x3a, 0x2f, 0xdc, 0xee, 0x1a, 0xef, 0x9e, 0x90, 0xf8, 0x23, 0xfc, 0x01, 0x7e, 0x0c, 0x25, 0x35,
	0x15, 0xf2, 0x2f, 0x41, 0x3b, 0x77, 0xe7, 0xd8, 0x45, 0xd2, 0xa4, 0x7d, 0x6f, 0xe6, 0xcd, 0x7b,
	0x6f, 0x17, 0x38, 0xba, 0xa5, 0x5d, 0xf9, 0xa9, 0xd5, 0xda, 0x9a, 0xc9, 0x72, 0x65, 0xbd, 0xe5,
	0x3d, 0xb7, 0x90, 0x2b, 0xbc, 0xd4, 0xe8, 0x9c, 0xcc, 0xf1, 0xb8, 0x9b, 0xe7, 0xd6, 0xcb, 0xbc,
	0x22, 0x47, 0x0e, 0x1e, 0x9c, 0x48, 0x8d, 0x27, 0x25, 0x3a, 0x77, 0x96, 0x65, 0x6e, 0x56, 0xea,
	0xb3, 0xcf, 0x5f, 0x70, 0xee, 0x79, 0x02, 0xd1, 0xac, 0xd4, 0x82, 0x0d, 0xd9, 0xb8, 0xc3, 0xef,
	0xc0, 0xc1, 0xac, 0xd4, 0x33, 0xa9, 0x51, 0xec, 0x11, 0xf0, 0x02, 0xda, 0x53, 0x6b, 0x3c, 0x1a,
	0xef, 0x44, 0x34, 0x8c, 0xc6, 0xc9, 0xb3, 0xa7, 0x93, 0x9d, 0x3b, 0x93, 0x1d, 0xd9, 0x7a, 0xb6,
	0x92, 0x1e, 0xfd, 0x62, 0x70, 0x7c, 0x3d, 0xcd, 0x7b, 0x10, 0xa7, 0xe8, 0x4f, 0xb3, 0xfa, 0xf6,
	0x21, 0xb4, 0x53, 0xf4, 0x17, 0xca, 0x17, 0xcd, 0xf1, 0x7b, 0xd0, 0x7d, 0xb5, 0x5c, 0xd2, 0xf6,
	0x9b, 0x42, 0xe6, 0x22, 0x1a, 0xb2, 0x71, 0xcc, 0x05, 0x1c, 0x36, 0xe8, 0x47, 0x85, 0xdf, 0x89,
	0xd9, 0x27, 0xe6, 0x39, 0xc4, 0xa7, 0x1e, 0xb5, 0x13, 0x31, 0x39, 0x7d, 0x72, 0x93, 0xd3, 0x30,
	0x58, 0xdb, 0xfc, 0xcb, 0xe0, 0xe1, 0x35, 0x1c, 0xef, 0x43, 0x2b, 0x45, 0x7f, 0x55, 0x50, 0x1f,
	0x5a, 0xef, 0xbd, 0xf4, 0xa5, 0xab, 0x2d, 0x26, 0x10, 0x7d, 0x52, 0x86, 0x9c, 0x75, 0x78, 0x17,
	0xf6, 0xc3, 0x3a, 0xb9, 0xa1, 0x2e, 0xc3, 0x6a, 0xe8, 0x32, 0x26, 0xe0, 0x08, 0x3a, 0x29, 0xfa,
	0x7a, 0xbd, 0x45, 0xd0, 0x5d, 0x48, 0xc2, 0xb1, 0xe9, 0x02, 0xe7, 0x5f, 0x31, 0x13, 0x07, 0x43,
	0x36, 0x6e, 0x07, 0x90, 0xca, 0x5a, 0x48, 0x93, 0x63, 0x26, 0xda, 0x94, 0xad, 0x0f, 0xad, 0x73,
	0x74, 0x65, 0xe1, 0x45, 0x87, 0x36, 0x39, 0x40, 0xa5, 0x74, 0xa1, 0x34, 0x0a, 0x68, 0xb0, 0x6a,
	0x86, 0xb0, 0x24, 0x60, 0xa3, 0x9f, 0x0c, 0xee, 0x6f, 0xc2, 0xbd, 0x46, 0x2f, 0x55, 0x51, 0x47,
	0x7b, 0x04, 0x47, 0x1f, 0x8c, 0xfa, 0x56, 0xe2, 0x86, 0xae, 0x9f, 0x22, 0x0a, 0x42, 0x01, 0xdc,
	0x49, 0x4a, 0xee, 0x73, 0x65, 0x48, 0xbb, 0xca, 0xfb, 0x12, 0x7a, 0xf9, 0xd6, 0x87, 0x0a, 0xc1,
	0x43, 0xef, 0x8f, 0x6f, 0xea, 0x7d, 0xf3, 0xf1, 0x46, 0xef, 0x80, 0x9f, 0xa3, 0x2c, 0x82, 0xde,
	0x56, 0xe1, 0x00, 0x7b, 0xaa, 0xb2, 0x11, 0x87, 0x06, 0x8d, 0xd4, 0x78, 0x89, 0xa6, 0xf6, 0xd0,
	0x00, 0x3f, 0x16, 0x57, 0x8d, 0xab, 0xb9, 0x35, 0x55, 0xe3, 0xdb, 0x8a, 0x6f, 0x71, 0x65, 0x6f,
	0xaf, 0x98, 0x76, 0x7f, 0xaf, 0x07, 0xec, 0xcf, 0x7a, 0xc0, 0xfe, 0xad, 0x07, 0xec, 0x7f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x7b, 0xb0, 0xea, 0x3e, 0x76, 0x03, 0x00, 0x00,
}

func (m *GameGuessOddsNumObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameGuessOddsNumObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Num != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEsportCommon(dAtA, i, uint64(len(*m.Num)))
		i += copy(dAtA[i:], *m.Num)
	}
	if m.NumName != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEsportCommon(dAtA, i, uint64(len(*m.NumName)))
		i += copy(dAtA[i:], *m.NumName)
	}
	if len(m.Contents) > 0 {
		for _, msg := range m.Contents {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintEsportCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameGuessOddsContentObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameGuessOddsContentObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BetId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEsportCommon(dAtA, i, uint64(len(*m.BetId)))
		i += copy(dAtA[i:], *m.BetId)
	}
	if m.BetTitle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEsportCommon(dAtA, i, uint64(len(*m.BetTitle)))
		i += copy(dAtA[i:], *m.BetTitle)
	}
	if m.AppGuessFlag != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEsportCommon(dAtA, i, uint64(*m.AppGuessFlag))
	}
	if m.AppGuessViewFlag != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEsportCommon(dAtA, i, uint64(*m.AppGuessViewFlag))
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintEsportCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameGuessOddsItemObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameGuessOddsItemObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BetNum != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEsportCommon(dAtA, i, uint64(len(*m.BetNum)))
		i += copy(dAtA[i:], *m.BetNum)
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEsportCommon(dAtA, i, uint64(len(*m.Status)))
		i += copy(dAtA[i:], *m.Status)
	}
	if m.Win != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEsportCommon(dAtA, i, uint64(len(*m.Win)))
		i += copy(dAtA[i:], *m.Win)
	}
	if m.Odds != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEsportCommon(dAtA, i, uint64(len(*m.Odds)))
		i += copy(dAtA[i:], *m.Odds)
	}
	if m.BetName != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEsportCommon(dAtA, i, uint64(len(*m.BetName)))
		i += copy(dAtA[i:], *m.BetName)
	}
	if m.BetStatus != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEsportCommon(dAtA, i, uint64(len(*m.BetStatus)))
		i += copy(dAtA[i:], *m.BetStatus)
	}
	if m.ItemChecked != nil {
		dAtA[i] = 0x38
		i++
		if *m.ItemChecked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.OddsChanged != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintEsportCommon(dAtA, i, uint64(*m.OddsChanged))
	}
	if m.Result != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintEsportCommon(dAtA, i, uint64(len(*m.Result)))
		i += copy(dAtA[i:], *m.Result)
	}
	if m.StatusTime != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintEsportCommon(dAtA, i, uint64(len(*m.StatusTime)))
		i += copy(dAtA[i:], *m.StatusTime)
	}
	if m.ResultTime != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintEsportCommon(dAtA, i, uint64(len(*m.ResultTime)))
		i += copy(dAtA[i:], *m.ResultTime)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameGuessDetailObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameGuessDetailObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UniqueGameGuessId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEsportCommon(dAtA, i, uint64(*m.UniqueGameGuessId))
	}
	if m.GameStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEsportCommon(dAtA, i, uint64(len(*m.GameStatus)))
		i += copy(dAtA[i:], *m.GameStatus)
	}
	if m.BeginTime != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEsportCommon(dAtA, i, uint64(len(*m.BeginTime)))
		i += copy(dAtA[i:], *m.BeginTime)
	}
	if len(m.GuessOddsNums) > 0 {
		for _, msg := range m.GuessOddsNums {
			dAtA[i] = 0x22
			i++
			i = encodeVarintEsportCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RealTimeItemObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RealTimeItemObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEsportCommon(dAtA, i, uint64(*m.Id))
	}
	if m.NameEn != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEsportCommon(dAtA, i, uint64(len(*m.NameEn)))
		i += copy(dAtA[i:], *m.NameEn)
	}
	if m.NameZh != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEsportCommon(dAtA, i, uint64(len(*m.NameZh)))
		i += copy(dAtA[i:], *m.NameZh)
	}
	if m.Icon != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEsportCommon(dAtA, i, uint64(len(*m.Icon)))
		i += copy(dAtA[i:], *m.Icon)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RealTimeHeroObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RealTimeHeroObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEsportCommon(dAtA, i, uint64(*m.Id))
	}
	if m.NameEn != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEsportCommon(dAtA, i, uint64(len(*m.NameEn)))
		i += copy(dAtA[i:], *m.NameEn)
	}
	if m.NameZh != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEsportCommon(dAtA, i, uint64(len(*m.NameZh)))
		i += copy(dAtA[i:], *m.NameZh)
	}
	if m.Icon != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEsportCommon(dAtA, i, uint64(len(*m.Icon)))
		i += copy(dAtA[i:], *m.Icon)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintEsportCommon(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GameGuessOddsNumObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Num != nil {
		l = len(*m.Num)
		n += 1 + l + sovEsportCommon(uint64(l))
	}
	if m.NumName != nil {
		l = len(*m.NumName)
		n += 1 + l + sovEsportCommon(uint64(l))
	}
	if len(m.Contents) > 0 {
		for _, e := range m.Contents {
			l = e.Size()
			n += 1 + l + sovEsportCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameGuessOddsContentObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BetId != nil {
		l = len(*m.BetId)
		n += 1 + l + sovEsportCommon(uint64(l))
	}
	if m.BetTitle != nil {
		l = len(*m.BetTitle)
		n += 1 + l + sovEsportCommon(uint64(l))
	}
	if m.AppGuessFlag != nil {
		n += 1 + sovEsportCommon(uint64(*m.AppGuessFlag))
	}
	if m.AppGuessViewFlag != nil {
		n += 1 + sovEsportCommon(uint64(*m.AppGuessViewFlag))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovEsportCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameGuessOddsItemObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BetNum != nil {
		l = len(*m.BetNum)
		n += 1 + l + sovEsportCommon(uint64(l))
	}
	if m.Status != nil {
		l = len(*m.Status)
		n += 1 + l + sovEsportCommon(uint64(l))
	}
	if m.Win != nil {
		l = len(*m.Win)
		n += 1 + l + sovEsportCommon(uint64(l))
	}
	if m.Odds != nil {
		l = len(*m.Odds)
		n += 1 + l + sovEsportCommon(uint64(l))
	}
	if m.BetName != nil {
		l = len(*m.BetName)
		n += 1 + l + sovEsportCommon(uint64(l))
	}
	if m.BetStatus != nil {
		l = len(*m.BetStatus)
		n += 1 + l + sovEsportCommon(uint64(l))
	}
	if m.ItemChecked != nil {
		n += 2
	}
	if m.OddsChanged != nil {
		n += 1 + sovEsportCommon(uint64(*m.OddsChanged))
	}
	if m.Result != nil {
		l = len(*m.Result)
		n += 1 + l + sovEsportCommon(uint64(l))
	}
	if m.StatusTime != nil {
		l = len(*m.StatusTime)
		n += 1 + l + sovEsportCommon(uint64(l))
	}
	if m.ResultTime != nil {
		l = len(*m.ResultTime)
		n += 1 + l + sovEsportCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameGuessDetailObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UniqueGameGuessId != nil {
		n += 1 + sovEsportCommon(uint64(*m.UniqueGameGuessId))
	}
	if m.GameStatus != nil {
		l = len(*m.GameStatus)
		n += 1 + l + sovEsportCommon(uint64(l))
	}
	if m.BeginTime != nil {
		l = len(*m.BeginTime)
		n += 1 + l + sovEsportCommon(uint64(l))
	}
	if len(m.GuessOddsNums) > 0 {
		for _, e := range m.GuessOddsNums {
			l = e.Size()
			n += 1 + l + sovEsportCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RealTimeItemObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovEsportCommon(uint64(*m.Id))
	}
	if m.NameEn != nil {
		l = len(*m.NameEn)
		n += 1 + l + sovEsportCommon(uint64(l))
	}
	if m.NameZh != nil {
		l = len(*m.NameZh)
		n += 1 + l + sovEsportCommon(uint64(l))
	}
	if m.Icon != nil {
		l = len(*m.Icon)
		n += 1 + l + sovEsportCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RealTimeHeroObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovEsportCommon(uint64(*m.Id))
	}
	if m.NameEn != nil {
		l = len(*m.NameEn)
		n += 1 + l + sovEsportCommon(uint64(l))
	}
	if m.NameZh != nil {
		l = len(*m.NameZh)
		n += 1 + l + sovEsportCommon(uint64(l))
	}
	if m.Icon != nil {
		l = len(*m.Icon)
		n += 1 + l + sovEsportCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEsportCommon(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEsportCommon(x uint64) (n int) {
	return sovEsportCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GameGuessOddsNumObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEsportCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameGuessOddsNumObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameGuessOddsNumObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEsportCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Num = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEsportCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NumName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEsportCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contents = append(m.Contents, &GameGuessOddsContentObject{})
			if err := m.Contents[len(m.Contents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEsportCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameGuessOddsContentObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEsportCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameGuessOddsContentObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameGuessOddsContentObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEsportCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEsportCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetTitle = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppGuessFlag", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppGuessFlag = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppGuessViewFlag", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppGuessViewFlag = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEsportCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &GameGuessOddsItemObject{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEsportCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameGuessOddsItemObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEsportCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameGuessOddsItemObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameGuessOddsItemObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEsportCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetNum = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEsportCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Status = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEsportCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Win = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Odds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEsportCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Odds = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEsportCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEsportCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetStatus = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemChecked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ItemChecked = &b
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OddsChanged", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OddsChanged = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEsportCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Result = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEsportCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.StatusTime = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEsportCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ResultTime = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEsportCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameGuessDetailObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEsportCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameGuessDetailObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameGuessDetailObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueGameGuessId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniqueGameGuessId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEsportCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GameStatus = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEsportCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BeginTime = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuessOddsNums", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEsportCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuessOddsNums = append(m.GuessOddsNums, &GameGuessOddsNumObject{})
			if err := m.GuessOddsNums[len(m.GuessOddsNums)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEsportCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RealTimeItemObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEsportCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RealTimeItemObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RealTimeItemObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameEn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEsportCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NameEn = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameZh", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEsportCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NameZh = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEsportCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Icon = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEsportCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RealTimeHeroObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEsportCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RealTimeHeroObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RealTimeHeroObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameEn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEsportCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NameEn = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameZh", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEsportCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NameZh = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEsportCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Icon = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEsportCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEsportCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEsportCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEsportCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEsportCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEsportCommon
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthEsportCommon
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEsportCommon
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEsportCommon(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthEsportCommon
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEsportCommon = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEsportCommon   = fmt.Errorf("proto: integer overflow")
)
