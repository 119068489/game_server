// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: table_struct_e-sports_api.proto

// 如果仅用于通讯的 message,别放在这里

package share_message

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_akqp2019_protobuf_proto "github.com/akqp2019/protobuf/proto"
	proto "github.com/akqp2019/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//api字段不要改动,不然接api的时候接不到数据
//API比赛表
type TableESPortsGame struct {
	//唯一自增ID (app_label_id,game_id,api_origin的组合)
	Id *int64 `protobuf:"varint,1,req,name=id" json:"_id,omitempty" bson:"_id,omitempty"`
	//对应本项目的标签id 10001:王者荣耀,10002:dota2,10003:英雄联盟,10004:CSGO
	AppLabelId *int32 `protobuf:"varint,2,opt,name=app_label_id" json:"app_label_id,omitempty" bson:"app_label_id,omitempty"`
	//对应本项目的标签id 10001:王者荣耀,10002:dota2,10003:英雄联盟,10004:CSGO
	AppLabelName *string `protobuf:"bytes,3,opt,name=app_label_name" json:"app_label_name,omitempty" bson:"app_label_name,omitempty"`
	//api接口来源 90001:野子科技
	ApiOrigin *int32 `protobuf:"varint,4,opt,name=api_origin" json:"api_origin,omitempty" bson:"api_origin,omitempty"`
	//api接口来源名称 90001:野子科技
	ApiOriginName *string `protobuf:"bytes,5,opt,name=api_origin_name" json:"api_origin_name,omitempty" bson:"api_origin_name,omitempty"`
	//发布状态 1:未发布 2:已发布
	ReleaseFlag *int32 `protobuf:"varint,6,opt,name=release_flag" json:"release_flag,omitempty" bson:"release_flag,omitempty"`
	//比赛维度 1 两组对决 2 多组混战 3 多个人(api字段)
	Dimension *string `protobuf:"bytes,7,opt,name=dimension" json:"dimension,omitempty" bson:"dimension,omitempty"`
	//对阵名称 如:总决赛(api字段)
	FightName *string `protobuf:"bytes,8,opt,name=fight_name" json:"fight_name,omitempty" bson:"fight_name,omitempty"`
	//项目名称(api字段)
	EventName *string `protobuf:"bytes,9,opt,name=event_name" json:"event_name,omitempty" bson:"event_name,omitempty"`
	//项目名称(英)(api字段)
	EventNameEn *string `protobuf:"bytes,10,opt,name=event_name_en" json:"event_name_en,omitempty" bson:"event_name_en,omitempty"`
	//项目 id(api字段)
	EventId *string `protobuf:"bytes,11,opt,name=event_id" json:"event_id,omitempty" bson:"event_id,omitempty"`
	//赛事阶段(api字段)
	MatchStage *string `protobuf:"bytes,12,opt,name=match_stage" json:"match_stage,omitempty" bson:"match_stage,omitempty"`
	//赛事阶段 id(api字段)
	MatchStageId *string `protobuf:"bytes,13,opt,name=match_stage_id" json:"match_stage_id,omitempty" bson:"match_stage_id,omitempty"`
	//赛事名称(api字段)
	MatchName *string `protobuf:"bytes,14,opt,name=match_name" json:"match_name,omitempty" bson:"match_name,omitempty"`
	//赛事名称(英)(api字段)
	MatchNameEn *string `protobuf:"bytes,15,opt,name=match_name_en" json:"match_name_en,omitempty" bson:"match_name_en,omitempty"`
	//赛事 id(api字段)
	MatchId *string `protobuf:"bytes,16,opt,name=match_id" json:"match_id,omitempty" bson:"match_id,omitempty"`
	//比赛类型 战队赛，个人赛(api字段)
	GameType *string `protobuf:"bytes,17,opt,name=game_type" json:"game_type,omitempty" bson:"game_type,omitempty"`
	//a 队比分(api字段)
	ScoreA *string `protobuf:"bytes,18,opt,name=score_a" json:"score_a,omitempty" bson:"score_a,omitempty"`
	//b 队比分(api字段)
	ScoreB *string `protobuf:"bytes,19,opt,name=score_b" json:"score_b,omitempty" bson:"score_b,omitempty"`
	//是否有直播 0 否，1 是(api字段)
	IsLive *int32 `protobuf:"varint,20,opt,name=is_live" json:"is_live,omitempty" bson:"is_live,omitempty"`
	//赛制 如:5(api字段)
	Bo *string `protobuf:"bytes,21,opt,name=bo" json:"bo,omitempty" bson:"bo,omitempty"`
	//是否热门 0 否，1 是(api字段)
	HotGame *string `protobuf:"bytes,22,opt,name=hot_game" json:"hot_game,omitempty" bson:"hot_game,omitempty"`
	//是否有赔率 0 否，1 是(api字段)
	IsBet *int32 `protobuf:"varint,23,opt,name=is_bet" json:"is_bet,omitempty" bson:"is_bet,omitempty"`
	//比赛开始时间(api字段,yyyy-mm-dd hh-mm-ss)
	BeginTime *string `protobuf:"bytes,24,opt,name=begin_time" json:"begin_time,omitempty" bson:"begin_time,omitempty"`
	//比赛 id(api字段)
	GameId *string `protobuf:"bytes,25,opt,name=game_id" json:"game_id,omitempty" bson:"game_id,omitempty"`
	//比赛状态 0 未开始，2 已结束(api字段)(0和1的时候结合begin_time判断,数据库中不记录1进行中)
	GameStatus *string `protobuf:"bytes,26,opt,name=game_status" json:"game_status,omitempty" bson:"game_status,omitempty"`
	//比赛状态描述 0 默认，1 正常结束，2 延时结束， 3 取消结束(api字段)
	GameStatusType *string `protobuf:"bytes,27,opt,name=game_status_type" json:"game_status_type,omitempty" bson:"game_status_type,omitempty"`
	//是否有推流 0 否 ，1 是(只有比赛开始后才能用)(api字段)
	HaveLive *int32 `protobuf:"varint,28,opt,name=have_live" json:"have_live,omitempty" bson:"have_live,omitempty"`
	//是否有滚盘 0 否 ， 1 是(api字段)
	HaveRoll *int32 `protobuf:"varint,29,opt,name=have_roll" json:"have_roll,omitempty" bson:"have_roll,omitempty"`
	//队员信息A(api字段)
	PlayerA []*ApiPlayer `protobuf:"bytes,30,rep,name=player_a" json:"player_a,omitempty" bson:"player_a,omitempty"`
	//队员信息B(api字段)
	PlayerB []*ApiPlayer `protobuf:"bytes,31,rep,name=player_b" json:"player_b,omitempty" bson:"player_b,omitempty"`
	//战队信息A(api字段)
	TeamA *ApiTeam `protobuf:"bytes,32,opt,name=team_a" json:"team_a,omitempty" bson:"team_a,omitempty"`
	//战队信息B(api字段)
	TeamB *ApiTeam `protobuf:"bytes,33,opt,name=team_b" json:"team_b,omitempty" bson:"team_b,omitempty"`
	// 创建时间
	CreateTime *int64 `protobuf:"varint,34,opt,name=create_time" json:"create_time,omitempty" bson:"create_time,omitempty"`
	// 更新时间
	UpdateTime *int64 `protobuf:"varint,35,opt,name=update_time" json:"update_time,omitempty" bson:"update_time,omitempty"`
	//比赛状态从0到2的变化时间即比赛的结束时间(跟详情一致,各个开奖模块重启的时候需要补开奖可能用)
	//该值为0时候、可以取over_time来显示
	GameStatusTime *int64 `protobuf:"varint,36,opt,name=game_status_time" json:"game_status_time,omitempty" bson:"game_status_time,omitempty"`
	//比赛开始时间int64(方便过滤查询)
	BeginTimeInt *int64 `protobuf:"varint,37,opt,name=begin_time_int" json:"begin_time_int,omitempty" bson:"begin_time_int,omitempty"`
	//是否开奖 0：未开奖 1:已开奖
	IsLottery *int32 `protobuf:"varint,38,opt,name=is_lottery" json:"is_lottery,omitempty" bson:"is_lottery,omitempty"`
	//历史记录id(绑定两队历史数据的id)
	HistoryId *int64 `protobuf:"varint,39,opt,name=history_id" json:"history_id,omitempty" bson:"history_id,omitempty"`
	//比赛结束时间  (废弃、不要用、详情的比赛结束时间)
	OverTime             *string  `protobuf:"bytes,40,opt,name=over_time" json:"over_time,omitempty" bson:"over_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TableESPortsGame) Reset()         { *m = TableESPortsGame{} }
func (m *TableESPortsGame) String() string { return proto.CompactTextString(m) }
func (*TableESPortsGame) ProtoMessage()    {}
func (*TableESPortsGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{0}
}
func (m *TableESPortsGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableESPortsGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableESPortsGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableESPortsGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableESPortsGame.Merge(m, src)
}
func (m *TableESPortsGame) XXX_Size() int {
	return m.Size()
}
func (m *TableESPortsGame) XXX_DiscardUnknown() {
	xxx_messageInfo_TableESPortsGame.DiscardUnknown(m)
}

var xxx_messageInfo_TableESPortsGame proto.InternalMessageInfo

func (m *TableESPortsGame) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TableESPortsGame) GetAppLabelId() int32 {
	if m != nil && m.AppLabelId != nil {
		return *m.AppLabelId
	}
	return 0
}

func (m *TableESPortsGame) GetAppLabelName() string {
	if m != nil && m.AppLabelName != nil {
		return *m.AppLabelName
	}
	return ""
}

func (m *TableESPortsGame) GetApiOrigin() int32 {
	if m != nil && m.ApiOrigin != nil {
		return *m.ApiOrigin
	}
	return 0
}

func (m *TableESPortsGame) GetApiOriginName() string {
	if m != nil && m.ApiOriginName != nil {
		return *m.ApiOriginName
	}
	return ""
}

func (m *TableESPortsGame) GetReleaseFlag() int32 {
	if m != nil && m.ReleaseFlag != nil {
		return *m.ReleaseFlag
	}
	return 0
}

func (m *TableESPortsGame) GetDimension() string {
	if m != nil && m.Dimension != nil {
		return *m.Dimension
	}
	return ""
}

func (m *TableESPortsGame) GetFightName() string {
	if m != nil && m.FightName != nil {
		return *m.FightName
	}
	return ""
}

func (m *TableESPortsGame) GetEventName() string {
	if m != nil && m.EventName != nil {
		return *m.EventName
	}
	return ""
}

func (m *TableESPortsGame) GetEventNameEn() string {
	if m != nil && m.EventNameEn != nil {
		return *m.EventNameEn
	}
	return ""
}

func (m *TableESPortsGame) GetEventId() string {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return ""
}

func (m *TableESPortsGame) GetMatchStage() string {
	if m != nil && m.MatchStage != nil {
		return *m.MatchStage
	}
	return ""
}

func (m *TableESPortsGame) GetMatchStageId() string {
	if m != nil && m.MatchStageId != nil {
		return *m.MatchStageId
	}
	return ""
}

func (m *TableESPortsGame) GetMatchName() string {
	if m != nil && m.MatchName != nil {
		return *m.MatchName
	}
	return ""
}

func (m *TableESPortsGame) GetMatchNameEn() string {
	if m != nil && m.MatchNameEn != nil {
		return *m.MatchNameEn
	}
	return ""
}

func (m *TableESPortsGame) GetMatchId() string {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return ""
}

func (m *TableESPortsGame) GetGameType() string {
	if m != nil && m.GameType != nil {
		return *m.GameType
	}
	return ""
}

func (m *TableESPortsGame) GetScoreA() string {
	if m != nil && m.ScoreA != nil {
		return *m.ScoreA
	}
	return ""
}

func (m *TableESPortsGame) GetScoreB() string {
	if m != nil && m.ScoreB != nil {
		return *m.ScoreB
	}
	return ""
}

func (m *TableESPortsGame) GetIsLive() int32 {
	if m != nil && m.IsLive != nil {
		return *m.IsLive
	}
	return 0
}

func (m *TableESPortsGame) GetBo() string {
	if m != nil && m.Bo != nil {
		return *m.Bo
	}
	return ""
}

func (m *TableESPortsGame) GetHotGame() string {
	if m != nil && m.HotGame != nil {
		return *m.HotGame
	}
	return ""
}

func (m *TableESPortsGame) GetIsBet() int32 {
	if m != nil && m.IsBet != nil {
		return *m.IsBet
	}
	return 0
}

func (m *TableESPortsGame) GetBeginTime() string {
	if m != nil && m.BeginTime != nil {
		return *m.BeginTime
	}
	return ""
}

func (m *TableESPortsGame) GetGameId() string {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return ""
}

func (m *TableESPortsGame) GetGameStatus() string {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return ""
}

func (m *TableESPortsGame) GetGameStatusType() string {
	if m != nil && m.GameStatusType != nil {
		return *m.GameStatusType
	}
	return ""
}

func (m *TableESPortsGame) GetHaveLive() int32 {
	if m != nil && m.HaveLive != nil {
		return *m.HaveLive
	}
	return 0
}

func (m *TableESPortsGame) GetHaveRoll() int32 {
	if m != nil && m.HaveRoll != nil {
		return *m.HaveRoll
	}
	return 0
}

func (m *TableESPortsGame) GetPlayerA() []*ApiPlayer {
	if m != nil {
		return m.PlayerA
	}
	return nil
}

func (m *TableESPortsGame) GetPlayerB() []*ApiPlayer {
	if m != nil {
		return m.PlayerB
	}
	return nil
}

func (m *TableESPortsGame) GetTeamA() *ApiTeam {
	if m != nil {
		return m.TeamA
	}
	return nil
}

func (m *TableESPortsGame) GetTeamB() *ApiTeam {
	if m != nil {
		return m.TeamB
	}
	return nil
}

func (m *TableESPortsGame) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TableESPortsGame) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *TableESPortsGame) GetGameStatusTime() int64 {
	if m != nil && m.GameStatusTime != nil {
		return *m.GameStatusTime
	}
	return 0
}

func (m *TableESPortsGame) GetBeginTimeInt() int64 {
	if m != nil && m.BeginTimeInt != nil {
		return *m.BeginTimeInt
	}
	return 0
}

func (m *TableESPortsGame) GetIsLottery() int32 {
	if m != nil && m.IsLottery != nil {
		return *m.IsLottery
	}
	return 0
}

func (m *TableESPortsGame) GetHistoryId() int64 {
	if m != nil && m.HistoryId != nil {
		return *m.HistoryId
	}
	return 0
}

func (m *TableESPortsGame) GetOverTime() string {
	if m != nil && m.OverTime != nil {
		return *m.OverTime
	}
	return ""
}

//API队员信息结构(比赛表用)
type ApiPlayer struct {
	//玩家在游戏中id或者名称(外号)(api字段)
	Sn *string `protobuf:"bytes,1,opt,name=sn" json:"sn,omitempty" bson:"sn,omitempty"`
	//队员 id(api字段)
	PlayerId *string `protobuf:"bytes,2,opt,name=player_id" json:"player_id,omitempty" bson:"player_id,omitempty"`
	//队员真实名(api字段)
	Name                 *string  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty" bson:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ApiPlayer) Reset()         { *m = ApiPlayer{} }
func (m *ApiPlayer) String() string { return proto.CompactTextString(m) }
func (*ApiPlayer) ProtoMessage()    {}
func (*ApiPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{1}
}
func (m *ApiPlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiPlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiPlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiPlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiPlayer.Merge(m, src)
}
func (m *ApiPlayer) XXX_Size() int {
	return m.Size()
}
func (m *ApiPlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiPlayer.DiscardUnknown(m)
}

var xxx_messageInfo_ApiPlayer proto.InternalMessageInfo

func (m *ApiPlayer) GetSn() string {
	if m != nil && m.Sn != nil {
		return *m.Sn
	}
	return ""
}

func (m *ApiPlayer) GetPlayerId() string {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return ""
}

func (m *ApiPlayer) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

//API战队信息结构(比赛表用)
type ApiTeam struct {
	//战队 id(api字段)
	TeamId *string `protobuf:"bytes,1,opt,name=team_id" json:"team_id,omitempty" bson:"team_id,omitempty"`
	//战队名称(api字段)
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty" bson:"name,omitempty"`
	//战队名称(英)(api字段)
	NameEn *string `protobuf:"bytes,3,opt,name=name_en" json:"name_en,omitempty" bson:"name_en,omitempty"`
	//战队队标(api字段)
	Icon                 *string  `protobuf:"bytes,4,opt,name=icon" json:"icon,omitempty" bson:"icon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ApiTeam) Reset()         { *m = ApiTeam{} }
func (m *ApiTeam) String() string { return proto.CompactTextString(m) }
func (*ApiTeam) ProtoMessage()    {}
func (*ApiTeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{2}
}
func (m *ApiTeam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiTeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiTeam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiTeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiTeam.Merge(m, src)
}
func (m *ApiTeam) XXX_Size() int {
	return m.Size()
}
func (m *ApiTeam) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiTeam.DiscardUnknown(m)
}

var xxx_messageInfo_ApiTeam proto.InternalMessageInfo

func (m *ApiTeam) GetTeamId() string {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return ""
}

func (m *ApiTeam) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ApiTeam) GetNameEn() string {
	if m != nil && m.NameEn != nil {
		return *m.NameEn
	}
	return ""
}

func (m *ApiTeam) GetIcon() string {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return ""
}

//API比赛详情表
type TableESPortsGameDetail struct {
	//唯一自增ID (app_label_id,game_id,api_origin的组合)
	Id *int64 `protobuf:"varint,1,req,name=id" json:"_id,omitempty" bson:"_id,omitempty"`
	//对应本项目的标签id 10001:王者荣耀,10002:dota2,10003:英雄联盟,10004:CSGO
	AppLabelId *int32 `protobuf:"varint,2,opt,name=app_label_id" json:"app_label_id,omitempty" bson:"app_label_id,omitempty"`
	//对应本项目的标签id 10001:王者荣耀,10002:dota2,10003:英雄联盟,10004:CSGO
	AppLabelName *string `protobuf:"bytes,3,opt,name=app_label_name" json:"app_label_name,omitempty" bson:"app_label_name,omitempty"`
	//api接口来源 90001:野子科技
	ApiOrigin *int32 `protobuf:"varint,4,opt,name=api_origin" json:"api_origin,omitempty" bson:"api_origin,omitempty"`
	//api接口来源名称 90001:野子科技
	ApiOriginName *string `protobuf:"bytes,5,opt,name=api_origin_name" json:"api_origin_name,omitempty" bson:"api_origin_name,omitempty"`
	//比赛 id(api字段)
	GameId *string `protobuf:"bytes,6,opt,name=game_id" json:"game_id,omitempty" bson:"game_id,omitempty"`
	//赛事 id(api字段)
	MatchId *string `protobuf:"bytes,7,opt,name=match_id" json:"match_id,omitempty" bson:"match_id,omitempty"`
	//A队伍编号即A队team_id(api字段)
	TeamA *string `protobuf:"bytes,8,opt,name=team_a" json:"team_a,omitempty" bson:"team_a,omitempty"`
	//B队伍编号即B队team_id(api字段)
	TeamB *string `protobuf:"bytes,9,opt,name=team_b" json:"team_b,omitempty" bson:"team_b,omitempty"`
	//比赛结束时间  (废弃、不要用)(api字段)
	OverTime *string `protobuf:"bytes,10,opt,name=over_time" json:"over_time,omitempty" bson:"over_time,omitempty"`
	//即A玩家id数组(api字段)
	PlayerA []string `protobuf:"bytes,11,rep,name=player_a" json:"player_a,omitempty" bson:"player_a,omitempty"`
	//即B玩家id数组(api字段)
	PlayerB []string `protobuf:"bytes,12,rep,name=player_b" json:"player_b,omitempty" bson:"player_b,omitempty"`
	//对阵名称 如:总决赛(api字段)
	FightName *string `protobuf:"bytes,13,opt,name=fight_name" json:"fight_name,omitempty" bson:"fight_name,omitempty"`
	//是否有直播 0 否，1 是(api字段)
	IsLive *int32 `protobuf:"varint,14,opt,name=is_live" json:"is_live,omitempty" bson:"is_live,omitempty"`
	//是否有赔率 0 否，1 是(api字段)
	IsBet *int32 `protobuf:"varint,15,opt,name=is_bet" json:"is_bet,omitempty" bson:"is_bet,omitempty"`
	//项目 id(api字段)
	EventId *string `protobuf:"bytes,16,opt,name=event_id" json:"event_id,omitempty" bson:"event_id,omitempty"`
	//项目名称(api字段)
	EventName *string `protobuf:"bytes,17,opt,name=event_name" json:"event_name,omitempty" bson:"event_name,omitempty"`
	//项目名称（英）(api字段)
	EventNameEn *string `protobuf:"bytes,18,opt,name=event_name_en" json:"event_name_en,omitempty" bson:"event_name_en,omitempty"`
	//赛事名称(api字段)
	MatchName *string `protobuf:"bytes,19,opt,name=match_name" json:"match_name,omitempty" bson:"match_name,omitempty"`
	//赛事名称（英）(api字段)
	MatchNameEn *string `protobuf:"bytes,20,opt,name=match_name_en" json:"match_name_en,omitempty" bson:"match_name_en,omitempty"`
	//赛事阶段(api字段)
	MatchStage *string `protobuf:"bytes,21,opt,name=match_stage" json:"match_stage,omitempty" bson:"match_stage,omitempty"`
	//赛事阶段(英)(api字段)
	MatchStageEn *string `protobuf:"bytes,22,opt,name=match_stage_en" json:"match_stage_en,omitempty" bson:"match_stage_en,omitempty"`
	//赛事阶段 id(api字段)
	MatchStageId *string `protobuf:"bytes,23,opt,name=match_stage_id" json:"match_stage_id,omitempty" bson:"match_stage_id,omitempty"`
	//比赛开始时间(api字段)
	BeginTime *string `protobuf:"bytes,24,opt,name=begin_time" json:"begin_time,omitempty" bson:"begin_time,omitempty"`
	//比赛类型如个人赛、战队赛(api字段)
	GameType *string `protobuf:"bytes,25,opt,name=game_type" json:"game_type,omitempty" bson:"game_type,omitempty"`
	//比赛状态 0 未开始，2 已结束(api字段)(0和1的时候结合begin_time判断,数据库中不记录1进行中)
	GameStatus *string `protobuf:"bytes,26,opt,name=game_status" json:"game_status,omitempty" bson:"game_status,omitempty"`
	//赛制(api字段)
	Bo *string `protobuf:"bytes,27,opt,name=bo" json:"bo,omitempty" bson:"bo,omitempty"`
	//是否是热门 0 否，1 是(api字段)
	HotGame *string `protobuf:"bytes,28,opt,name=hot_game" json:"hot_game,omitempty" bson:"hot_game,omitempty"`
	//A 队详情(api字段)
	TeamAInfo *APITeamInfo `protobuf:"bytes,29,opt,name=team_a_info" json:"team_a_info,omitempty" bson:"team_a_info,omitempty"`
	//B 队详情(api字段)
	TeamBInfo *APITeamInfo `protobuf:"bytes,30,opt,name=team_b_info" json:"team_b_info,omitempty" bson:"team_b_info,omitempty"`
	//A 队局分(api字段)
	ScoreA *string `protobuf:"bytes,31,opt,name=score_a" json:"score_a,omitempty" bson:"score_a,omitempty"`
	//B 队局分(api字段)
	ScoreB *string `protobuf:"bytes,32,opt,name=score_b" json:"score_b,omitempty" bson:"score_b,omitempty"`
	//A 队出场队员详情(api map转结构体)
	ApiTeamAPlayers []*APIPlayerDetail `protobuf:"bytes,33,rep,name=api_team_a_players" json:"api_team_a_players,omitempty" bson:"api_team_a_players,omitempty"`
	//B 队出场队员详情(api map转结构体)
	ApiTeamBPlayers []*APIPlayerDetail `protobuf:"bytes,34,rep,name=api_team_b_players" json:"api_team_b_players,omitempty" bson:"api_team_b_players,omitempty"`
	//直播信号源(api map转结构体)(api map转结构体)
	ApiLiveUrls []*APILiveURL `protobuf:"bytes,35,rep,name=api_live_urls" json:"api_live_urls,omitempty" bson:"api_live_urls,omitempty"`
	//各局得分,胜者(api字段)
	Score *APIScore `protobuf:"bytes,36,opt,name=score" json:"score,omitempty" bson:"score,omitempty"`
	//视频录像地址(api字段)
	VideoUrl *APIVideoURL `protobuf:"bytes,37,opt,name=video_url" json:"video_url,omitempty" bson:"video_url,omitempty"`
	//两队历史交锋和当前赛事的胜率(api map转结构体)
	ApiWinProbability *APIWinPB `protobuf:"bytes,38,opt,name=api_win_probability" json:"api_win_probability,omitempty" bson:"api_win_probability,omitempty"`
	//比赛结束状态0 默认值（未结束时返回），1 正常结束，2 延时结束，3 取消结束(api字段)
	GameStatusType *string `protobuf:"bytes,39,opt,name=game_status_type" json:"game_status_type,omitempty" bson:"game_status_type,omitempty"`
	//是否有滚盘 0 否 ， 1 是(api字段)
	HaveRoll *int32 `protobuf:"varint,40,opt,name=have_roll" json:"have_roll,omitempty" bson:"have_roll,omitempty"`
	//是否有推流  0 否 ，1 是(api字段)
	HaveLive *int32 `protobuf:"varint,41,opt,name=have_live" json:"have_live,omitempty" bson:"have_live,omitempty"`
	// 创建时间
	CreateTime *int64 `protobuf:"varint,42,opt,name=create_time" json:"create_time,omitempty" bson:"create_time,omitempty"`
	// 更新时间
	UpdateTime *int64 `protobuf:"varint,43,opt,name=update_time" json:"update_time,omitempty" bson:"update_time,omitempty"`
	// 专题id(api字段)
	SpecialId *string `protobuf:"bytes,44,opt,name=special_id" json:"special_id,omitempty" bson:"special_id,omitempty"`
	// 项目id-赛事id-阶段id(可忽略)(api字段)
	Match *string `protobuf:"bytes,45,opt,name=match" json:"match,omitempty" bson:"match,omitempty"`
	// 项目名称-赛事名称(可忽略)(api字段)
	MatchInfo *string `protobuf:"bytes,46,opt,name=match_info" json:"match_info,omitempty" bson:"match_info,omitempty"`
	// (可忽略)(api字段)
	MatchInfoEn *string `protobuf:"bytes,47,opt,name=match_info_en" json:"match_info_en,omitempty" bson:"match_info_en,omitempty"`
	//比赛状态从0到2的变化时间(第一记录api推送时间、没有就记录本地的时间、开奖可能用到)
	GameStatusTime *int64 `protobuf:"varint,48,opt,name=game_status_time" json:"game_status_time,omitempty" bson:"game_status_time,omitempty"`
	//15.0接口中的对象推流直播地址(api字段)
	LivePaths            *ESPortsGameLivePathObj `protobuf:"bytes,49,opt,name=live_paths" json:"live_paths,omitempty" bson:"live_paths,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-" bson:"-"`
	XXX_unrecognized     []byte                  `json:"-" bson:"-"`
	XXX_sizecache        int32                   `json:"-" bson:"-"`
}

func (m *TableESPortsGameDetail) Reset()         { *m = TableESPortsGameDetail{} }
func (m *TableESPortsGameDetail) String() string { return proto.CompactTextString(m) }
func (*TableESPortsGameDetail) ProtoMessage()    {}
func (*TableESPortsGameDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{3}
}
func (m *TableESPortsGameDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableESPortsGameDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableESPortsGameDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableESPortsGameDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableESPortsGameDetail.Merge(m, src)
}
func (m *TableESPortsGameDetail) XXX_Size() int {
	return m.Size()
}
func (m *TableESPortsGameDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_TableESPortsGameDetail.DiscardUnknown(m)
}

var xxx_messageInfo_TableESPortsGameDetail proto.InternalMessageInfo

func (m *TableESPortsGameDetail) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TableESPortsGameDetail) GetAppLabelId() int32 {
	if m != nil && m.AppLabelId != nil {
		return *m.AppLabelId
	}
	return 0
}

func (m *TableESPortsGameDetail) GetAppLabelName() string {
	if m != nil && m.AppLabelName != nil {
		return *m.AppLabelName
	}
	return ""
}

func (m *TableESPortsGameDetail) GetApiOrigin() int32 {
	if m != nil && m.ApiOrigin != nil {
		return *m.ApiOrigin
	}
	return 0
}

func (m *TableESPortsGameDetail) GetApiOriginName() string {
	if m != nil && m.ApiOriginName != nil {
		return *m.ApiOriginName
	}
	return ""
}

func (m *TableESPortsGameDetail) GetGameId() string {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return ""
}

func (m *TableESPortsGameDetail) GetMatchId() string {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return ""
}

func (m *TableESPortsGameDetail) GetTeamA() string {
	if m != nil && m.TeamA != nil {
		return *m.TeamA
	}
	return ""
}

func (m *TableESPortsGameDetail) GetTeamB() string {
	if m != nil && m.TeamB != nil {
		return *m.TeamB
	}
	return ""
}

func (m *TableESPortsGameDetail) GetOverTime() string {
	if m != nil && m.OverTime != nil {
		return *m.OverTime
	}
	return ""
}

func (m *TableESPortsGameDetail) GetPlayerA() []string {
	if m != nil {
		return m.PlayerA
	}
	return nil
}

func (m *TableESPortsGameDetail) GetPlayerB() []string {
	if m != nil {
		return m.PlayerB
	}
	return nil
}

func (m *TableESPortsGameDetail) GetFightName() string {
	if m != nil && m.FightName != nil {
		return *m.FightName
	}
	return ""
}

func (m *TableESPortsGameDetail) GetIsLive() int32 {
	if m != nil && m.IsLive != nil {
		return *m.IsLive
	}
	return 0
}

func (m *TableESPortsGameDetail) GetIsBet() int32 {
	if m != nil && m.IsBet != nil {
		return *m.IsBet
	}
	return 0
}

func (m *TableESPortsGameDetail) GetEventId() string {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return ""
}

func (m *TableESPortsGameDetail) GetEventName() string {
	if m != nil && m.EventName != nil {
		return *m.EventName
	}
	return ""
}

func (m *TableESPortsGameDetail) GetEventNameEn() string {
	if m != nil && m.EventNameEn != nil {
		return *m.EventNameEn
	}
	return ""
}

func (m *TableESPortsGameDetail) GetMatchName() string {
	if m != nil && m.MatchName != nil {
		return *m.MatchName
	}
	return ""
}

func (m *TableESPortsGameDetail) GetMatchNameEn() string {
	if m != nil && m.MatchNameEn != nil {
		return *m.MatchNameEn
	}
	return ""
}

func (m *TableESPortsGameDetail) GetMatchStage() string {
	if m != nil && m.MatchStage != nil {
		return *m.MatchStage
	}
	return ""
}

func (m *TableESPortsGameDetail) GetMatchStageEn() string {
	if m != nil && m.MatchStageEn != nil {
		return *m.MatchStageEn
	}
	return ""
}

func (m *TableESPortsGameDetail) GetMatchStageId() string {
	if m != nil && m.MatchStageId != nil {
		return *m.MatchStageId
	}
	return ""
}

func (m *TableESPortsGameDetail) GetBeginTime() string {
	if m != nil && m.BeginTime != nil {
		return *m.BeginTime
	}
	return ""
}

func (m *TableESPortsGameDetail) GetGameType() string {
	if m != nil && m.GameType != nil {
		return *m.GameType
	}
	return ""
}

func (m *TableESPortsGameDetail) GetGameStatus() string {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return ""
}

func (m *TableESPortsGameDetail) GetBo() string {
	if m != nil && m.Bo != nil {
		return *m.Bo
	}
	return ""
}

func (m *TableESPortsGameDetail) GetHotGame() string {
	if m != nil && m.HotGame != nil {
		return *m.HotGame
	}
	return ""
}

func (m *TableESPortsGameDetail) GetTeamAInfo() *APITeamInfo {
	if m != nil {
		return m.TeamAInfo
	}
	return nil
}

func (m *TableESPortsGameDetail) GetTeamBInfo() *APITeamInfo {
	if m != nil {
		return m.TeamBInfo
	}
	return nil
}

func (m *TableESPortsGameDetail) GetScoreA() string {
	if m != nil && m.ScoreA != nil {
		return *m.ScoreA
	}
	return ""
}

func (m *TableESPortsGameDetail) GetScoreB() string {
	if m != nil && m.ScoreB != nil {
		return *m.ScoreB
	}
	return ""
}

func (m *TableESPortsGameDetail) GetApiTeamAPlayers() []*APIPlayerDetail {
	if m != nil {
		return m.ApiTeamAPlayers
	}
	return nil
}

func (m *TableESPortsGameDetail) GetApiTeamBPlayers() []*APIPlayerDetail {
	if m != nil {
		return m.ApiTeamBPlayers
	}
	return nil
}

func (m *TableESPortsGameDetail) GetApiLiveUrls() []*APILiveURL {
	if m != nil {
		return m.ApiLiveUrls
	}
	return nil
}

func (m *TableESPortsGameDetail) GetScore() *APIScore {
	if m != nil {
		return m.Score
	}
	return nil
}

func (m *TableESPortsGameDetail) GetVideoUrl() *APIVideoURL {
	if m != nil {
		return m.VideoUrl
	}
	return nil
}

func (m *TableESPortsGameDetail) GetApiWinProbability() *APIWinPB {
	if m != nil {
		return m.ApiWinProbability
	}
	return nil
}

func (m *TableESPortsGameDetail) GetGameStatusType() string {
	if m != nil && m.GameStatusType != nil {
		return *m.GameStatusType
	}
	return ""
}

func (m *TableESPortsGameDetail) GetHaveRoll() int32 {
	if m != nil && m.HaveRoll != nil {
		return *m.HaveRoll
	}
	return 0
}

func (m *TableESPortsGameDetail) GetHaveLive() int32 {
	if m != nil && m.HaveLive != nil {
		return *m.HaveLive
	}
	return 0
}

func (m *TableESPortsGameDetail) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TableESPortsGameDetail) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *TableESPortsGameDetail) GetSpecialId() string {
	if m != nil && m.SpecialId != nil {
		return *m.SpecialId
	}
	return ""
}

func (m *TableESPortsGameDetail) GetMatch() string {
	if m != nil && m.Match != nil {
		return *m.Match
	}
	return ""
}

func (m *TableESPortsGameDetail) GetMatchInfo() string {
	if m != nil && m.MatchInfo != nil {
		return *m.MatchInfo
	}
	return ""
}

func (m *TableESPortsGameDetail) GetMatchInfoEn() string {
	if m != nil && m.MatchInfoEn != nil {
		return *m.MatchInfoEn
	}
	return ""
}

func (m *TableESPortsGameDetail) GetGameStatusTime() int64 {
	if m != nil && m.GameStatusTime != nil {
		return *m.GameStatusTime
	}
	return 0
}

func (m *TableESPortsGameDetail) GetLivePaths() *ESPortsGameLivePathObj {
	if m != nil {
		return m.LivePaths
	}
	return nil
}

//API战队详细信息结构(比赛详情表用)
type APITeamInfo struct {
	//队伍编号(api字段)
	TeamId *string `protobuf:"bytes,1,opt,name=team_id" json:"team_id,omitempty" bson:"team_id,omitempty"`
	//队名(api字段)
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty" bson:"name,omitempty"`
	//队标(api字段)
	Icon *string `protobuf:"bytes,3,opt,name=icon" json:"icon,omitempty" bson:"icon,omitempty"`
	//全名(api字段)
	FullName *string `protobuf:"bytes,4,opt,name=full_name" json:"full_name,omitempty" bson:"full_name,omitempty"`
	//队名(英)(api字段)
	NameEn *string `protobuf:"bytes,5,opt,name=name_en" json:"name_en,omitempty" bson:"name_en,omitempty"`
	// 国家(api字段)
	CountryName *string `protobuf:"bytes,6,opt,name=country_name" json:"country_name,omitempty" bson:"country_name,omitempty"`
	//参与项目(api字段)
	Matches              []*APIMatch `protobuf:"bytes,7,rep,name=matches" json:"matches,omitempty" bson:"matches,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-" bson:"-"`
	XXX_unrecognized     []byte      `json:"-" bson:"-"`
	XXX_sizecache        int32       `json:"-" bson:"-"`
}

func (m *APITeamInfo) Reset()         { *m = APITeamInfo{} }
func (m *APITeamInfo) String() string { return proto.CompactTextString(m) }
func (*APITeamInfo) ProtoMessage()    {}
func (*APITeamInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{4}
}
func (m *APITeamInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APITeamInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APITeamInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APITeamInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APITeamInfo.Merge(m, src)
}
func (m *APITeamInfo) XXX_Size() int {
	return m.Size()
}
func (m *APITeamInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_APITeamInfo.DiscardUnknown(m)
}

var xxx_messageInfo_APITeamInfo proto.InternalMessageInfo

func (m *APITeamInfo) GetTeamId() string {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return ""
}

func (m *APITeamInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *APITeamInfo) GetIcon() string {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return ""
}

func (m *APITeamInfo) GetFullName() string {
	if m != nil && m.FullName != nil {
		return *m.FullName
	}
	return ""
}

func (m *APITeamInfo) GetNameEn() string {
	if m != nil && m.NameEn != nil {
		return *m.NameEn
	}
	return ""
}

func (m *APITeamInfo) GetCountryName() string {
	if m != nil && m.CountryName != nil {
		return *m.CountryName
	}
	return ""
}

func (m *APITeamInfo) GetMatches() []*APIMatch {
	if m != nil {
		return m.Matches
	}
	return nil
}

//API赛事结构(比赛详情表用)
type APIMatch struct {
	//赛事 id(api字段)
	MatchId *string `protobuf:"bytes,1,opt,name=match_id" json:"match_id,omitempty" bson:"match_id,omitempty"`
	//赛事名称(api字段)
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty" bson:"name,omitempty"`
	//赛事名称（英）(api字段)
	NameEn *string `protobuf:"bytes,3,opt,name=name_en" json:"name_en,omitempty" bson:"name_en,omitempty"`
	//赛事标图(api字段)
	Pic *string `protobuf:"bytes,4,opt,name=pic" json:"pic,omitempty" bson:"pic,omitempty"`
	//赛事标(api字段)
	Icon                 *string  `protobuf:"bytes,5,opt,name=icon" json:"icon,omitempty" bson:"icon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *APIMatch) Reset()         { *m = APIMatch{} }
func (m *APIMatch) String() string { return proto.CompactTextString(m) }
func (*APIMatch) ProtoMessage()    {}
func (*APIMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{5}
}
func (m *APIMatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIMatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIMatch.Merge(m, src)
}
func (m *APIMatch) XXX_Size() int {
	return m.Size()
}
func (m *APIMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_APIMatch.DiscardUnknown(m)
}

var xxx_messageInfo_APIMatch proto.InternalMessageInfo

func (m *APIMatch) GetMatchId() string {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return ""
}

func (m *APIMatch) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *APIMatch) GetNameEn() string {
	if m != nil && m.NameEn != nil {
		return *m.NameEn
	}
	return ""
}

func (m *APIMatch) GetPic() string {
	if m != nil && m.Pic != nil {
		return *m.Pic
	}
	return ""
}

func (m *APIMatch) GetIcon() string {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return ""
}

//API队员信息详细结构(比赛详情表用)
type APIPlayerDetail struct {
	//队员 id(api字段)
	PlayerId *string `protobuf:"bytes,1,opt,name=player_id" json:"player_id,omitempty" bson:"player_id,omitempty"`
	//战队 id(api字段)
	TeamId *string `protobuf:"bytes,2,opt,name=team_id" json:"team_id,omitempty" bson:"team_id,omitempty"`
	//游戏账号id或外号(api字段)
	Id *string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty" bson:"id,omitempty"`
	//队员姓名(api字段)
	Name *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty" bson:"name,omitempty"`
	//赛事id(api字段)
	Match *string `protobuf:"bytes,5,opt,name=match" json:"match,omitempty" bson:"match,omitempty"`
	//国家id(api字段)
	Country *string `protobuf:"bytes,6,opt,name=country" json:"country,omitempty" bson:"country,omitempty"`
	//队员照片(api字段)
	Photo *string `protobuf:"bytes,7,opt,name=photo" json:"photo,omitempty" bson:"photo,omitempty"`
	//(api字段)
	Position *string `protobuf:"bytes,8,opt,name=position" json:"position,omitempty" bson:"position,omitempty"`
	//游戏账号id或外号(同id)(api字段)
	Sn *string `protobuf:"bytes,9,opt,name=sn" json:"sn,omitempty" bson:"sn,omitempty"`
	//国家名称(api字段)
	CountryName          *string  `protobuf:"bytes,10,opt,name=country_name" json:"country_name,omitempty" bson:"country_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *APIPlayerDetail) Reset()         { *m = APIPlayerDetail{} }
func (m *APIPlayerDetail) String() string { return proto.CompactTextString(m) }
func (*APIPlayerDetail) ProtoMessage()    {}
func (*APIPlayerDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{6}
}
func (m *APIPlayerDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIPlayerDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIPlayerDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIPlayerDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIPlayerDetail.Merge(m, src)
}
func (m *APIPlayerDetail) XXX_Size() int {
	return m.Size()
}
func (m *APIPlayerDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_APIPlayerDetail.DiscardUnknown(m)
}

var xxx_messageInfo_APIPlayerDetail proto.InternalMessageInfo

func (m *APIPlayerDetail) GetPlayerId() string {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return ""
}

func (m *APIPlayerDetail) GetTeamId() string {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return ""
}

func (m *APIPlayerDetail) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *APIPlayerDetail) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *APIPlayerDetail) GetMatch() string {
	if m != nil && m.Match != nil {
		return *m.Match
	}
	return ""
}

func (m *APIPlayerDetail) GetCountry() string {
	if m != nil && m.Country != nil {
		return *m.Country
	}
	return ""
}

func (m *APIPlayerDetail) GetPhoto() string {
	if m != nil && m.Photo != nil {
		return *m.Photo
	}
	return ""
}

func (m *APIPlayerDetail) GetPosition() string {
	if m != nil && m.Position != nil {
		return *m.Position
	}
	return ""
}

func (m *APIPlayerDetail) GetSn() string {
	if m != nil && m.Sn != nil {
		return *m.Sn
	}
	return ""
}

func (m *APIPlayerDetail) GetCountryName() string {
	if m != nil && m.CountryName != nil {
		return *m.CountryName
	}
	return ""
}

//API直播信号源结构(比赛详情表用)
type APILiveURL struct {
	//直播url名称(api字段)
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty" bson:"name,omitempty"`
	//直播url(api字段)
	Url *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty" bson:"url,omitempty"`
	//直播url_h5(api字段)
	UrlH5 *string `protobuf:"bytes,3,opt,name=url_h5" json:"url_h5,omitempty" bson:"url_h5,omitempty"`
	//直播url_h5名称(api字段)
	NameH5               *string  `protobuf:"bytes,4,opt,name=name_h5" json:"name_h5,omitempty" bson:"name_h5,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *APILiveURL) Reset()         { *m = APILiveURL{} }
func (m *APILiveURL) String() string { return proto.CompactTextString(m) }
func (*APILiveURL) ProtoMessage()    {}
func (*APILiveURL) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{7}
}
func (m *APILiveURL) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APILiveURL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APILiveURL.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APILiveURL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APILiveURL.Merge(m, src)
}
func (m *APILiveURL) XXX_Size() int {
	return m.Size()
}
func (m *APILiveURL) XXX_DiscardUnknown() {
	xxx_messageInfo_APILiveURL.DiscardUnknown(m)
}

var xxx_messageInfo_APILiveURL proto.InternalMessageInfo

func (m *APILiveURL) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *APILiveURL) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *APILiveURL) GetUrlH5() string {
	if m != nil && m.UrlH5 != nil {
		return *m.UrlH5
	}
	return ""
}

func (m *APILiveURL) GetNameH5() string {
	if m != nil && m.NameH5 != nil {
		return *m.NameH5
	}
	return ""
}

//API各局得分,胜者结构(比赛详情表用)
type APIScore struct {
	//a队各局分数(api字段)
	A []string `protobuf:"bytes,1,rep,name=a" json:"a,omitempty" bson:"a,omitempty"`
	//b队各局分数(api字段)
	B []string `protobuf:"bytes,2,rep,name=b" json:"b,omitempty" bson:"b,omitempty"`
	//a,b队各局胜者(api字段)
	Win                  []string `protobuf:"bytes,3,rep,name=win" json:"win,omitempty" bson:"win,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *APIScore) Reset()         { *m = APIScore{} }
func (m *APIScore) String() string { return proto.CompactTextString(m) }
func (*APIScore) ProtoMessage()    {}
func (*APIScore) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{8}
}
func (m *APIScore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIScore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIScore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIScore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIScore.Merge(m, src)
}
func (m *APIScore) XXX_Size() int {
	return m.Size()
}
func (m *APIScore) XXX_DiscardUnknown() {
	xxx_messageInfo_APIScore.DiscardUnknown(m)
}

var xxx_messageInfo_APIScore proto.InternalMessageInfo

func (m *APIScore) GetA() []string {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *APIScore) GetB() []string {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *APIScore) GetWin() []string {
	if m != nil {
		return m.Win
	}
	return nil
}

//API视频录像地址结构(比赛详情表用)
type APIVideoURL struct {
	//svu地址(api字段)
	Svu []string `protobuf:"bytes,1,rep,name=svu" json:"svu,omitempty" bson:"svu,omitempty"`
	//svu_h5地址(api字段)
	SvuH5                []string `protobuf:"bytes,2,rep,name=svu_h5" json:"svu_h5,omitempty" bson:"svu_h5,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *APIVideoURL) Reset()         { *m = APIVideoURL{} }
func (m *APIVideoURL) String() string { return proto.CompactTextString(m) }
func (*APIVideoURL) ProtoMessage()    {}
func (*APIVideoURL) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{9}
}
func (m *APIVideoURL) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIVideoURL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIVideoURL.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIVideoURL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIVideoURL.Merge(m, src)
}
func (m *APIVideoURL) XXX_Size() int {
	return m.Size()
}
func (m *APIVideoURL) XXX_DiscardUnknown() {
	xxx_messageInfo_APIVideoURL.DiscardUnknown(m)
}

var xxx_messageInfo_APIVideoURL proto.InternalMessageInfo

func (m *APIVideoURL) GetSvu() []string {
	if m != nil {
		return m.Svu
	}
	return nil
}

func (m *APIVideoURL) GetSvuH5() []string {
	if m != nil {
		return m.SvuH5
	}
	return nil
}

//API两队交锋胜率结构(比赛详情表用)
type APIWinPBObject struct {
	//队伍id
	TeamId *string `protobuf:"bytes,1,opt,name=team_id" json:"team_id,omitempty" bson:"team_id,omitempty"`
	//队伍胜率
	WinRate              *string  `protobuf:"bytes,2,opt,name=win_rate" json:"win_rate,omitempty" bson:"win_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *APIWinPBObject) Reset()         { *m = APIWinPBObject{} }
func (m *APIWinPBObject) String() string { return proto.CompactTextString(m) }
func (*APIWinPBObject) ProtoMessage()    {}
func (*APIWinPBObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{10}
}
func (m *APIWinPBObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIWinPBObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIWinPBObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIWinPBObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIWinPBObject.Merge(m, src)
}
func (m *APIWinPBObject) XXX_Size() int {
	return m.Size()
}
func (m *APIWinPBObject) XXX_DiscardUnknown() {
	xxx_messageInfo_APIWinPBObject.DiscardUnknown(m)
}

var xxx_messageInfo_APIWinPBObject proto.InternalMessageInfo

func (m *APIWinPBObject) GetTeamId() string {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return ""
}

func (m *APIWinPBObject) GetWinRate() string {
	if m != nil && m.WinRate != nil {
		return *m.WinRate
	}
	return ""
}

//API两队历史交锋胜率结构(比赛详情表用)
type APIWinPB struct {
	//两队历史交锋胜率(api字段)
	ThisTwoTeam []*APIWinPBObject `protobuf:"bytes,1,rep,name=this_two_team" json:"this_two_team,omitempty" bson:"this_two_team,omitempty"`
	//两个队伍在当前比赛所处的赛事下的胜率(api字段)
	All                  []*APIWinPBObject `protobuf:"bytes,2,rep,name=all" json:"all,omitempty" bson:"all,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-" bson:"-"`
	XXX_unrecognized     []byte            `json:"-" bson:"-"`
	XXX_sizecache        int32             `json:"-" bson:"-"`
}

func (m *APIWinPB) Reset()         { *m = APIWinPB{} }
func (m *APIWinPB) String() string { return proto.CompactTextString(m) }
func (*APIWinPB) ProtoMessage()    {}
func (*APIWinPB) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{11}
}
func (m *APIWinPB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIWinPB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIWinPB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIWinPB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIWinPB.Merge(m, src)
}
func (m *APIWinPB) XXX_Size() int {
	return m.Size()
}
func (m *APIWinPB) XXX_DiscardUnknown() {
	xxx_messageInfo_APIWinPB.DiscardUnknown(m)
}

var xxx_messageInfo_APIWinPB proto.InternalMessageInfo

func (m *APIWinPB) GetThisTwoTeam() []*APIWinPBObject {
	if m != nil {
		return m.ThisTwoTeam
	}
	return nil
}

func (m *APIWinPB) GetAll() []*APIWinPBObject {
	if m != nil {
		return m.All
	}
	return nil
}

//API两队历史交锋、两队胜败统计、两队天敌克制统计
type TableESPortsTeamBout struct {
	//唯一自增ID (app_label_id,game_id,api_origin的组合)
	Id *int64 `protobuf:"varint,1,req,name=id" json:"_id,omitempty" bson:"_id,omitempty"`
	//对应本项目的标签id 10001:王者荣耀,10002:dota2,10003:英雄联盟,10004:CSGO
	AppLabelId *int32 `protobuf:"varint,2,opt,name=app_label_id" json:"app_label_id,omitempty" bson:"app_label_id,omitempty"`
	//对应本项目的标签id 10001:王者荣耀,10002:dota2,10003:英雄联盟,10004:CSGO
	AppLabelName *string `protobuf:"bytes,3,opt,name=app_label_name" json:"app_label_name,omitempty" bson:"app_label_name,omitempty"`
	//api接口来源 90001:野子科技
	ApiOrigin *int32 `protobuf:"varint,4,opt,name=api_origin" json:"api_origin,omitempty" bson:"api_origin,omitempty"`
	//api接口来源名称 90001:野子科技
	ApiOriginName *string `protobuf:"bytes,5,opt,name=api_origin_name" json:"api_origin_name,omitempty" bson:"api_origin_name,omitempty"`
	//比赛 id
	GameId *string `protobuf:"bytes,6,opt,name=game_id" json:"game_id,omitempty" bson:"game_id,omitempty"`
	//两队各自的历史比赛记录(api字段)
	History *APITeamBoutHis `protobuf:"bytes,7,opt,name=history" json:"history,omitempty" bson:"history,omitempty"`
	//a队、b队的历史交锋(api字段)
	Vs []*APITeamBoutObject `protobuf:"bytes,8,rep,name=vs" json:"vs,omitempty" bson:"vs,omitempty"`
	//队伍a连胜败统计信息
	TeamAWinFail *APITeamWinFaiObject `protobuf:"bytes,9,opt,name=team_a_win_fail" json:"team_a_win_fail,omitempty" bson:"team_a_win_fail,omitempty"`
	//队伍b连胜败统计信息
	TeamBWinFail *APITeamWinFaiObject `protobuf:"bytes,10,opt,name=team_b_win_fail" json:"team_b_win_fail,omitempty" bson:"team_b_win_fail,omitempty"`
	//队伍a天敌克制信息
	TeamANatRes *APITeamNatResObject `protobuf:"bytes,11,opt,name=team_a_nat_res" json:"team_a_nat_res,omitempty" bson:"team_a_nat_res,omitempty"`
	//队伍b天敌克制信息
	TeamBNatRes *APITeamNatResObject `protobuf:"bytes,12,opt,name=team_b_nat_res" json:"team_b_nat_res,omitempty" bson:"team_b_nat_res,omitempty"`
	// 创建时间
	CreateTime *int64 `protobuf:"varint,13,opt,name=create_time" json:"create_time,omitempty" bson:"create_time,omitempty"`
	// 更新时间
	UpdateTime           *int64   `protobuf:"varint,14,opt,name=update_time" json:"update_time,omitempty" bson:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TableESPortsTeamBout) Reset()         { *m = TableESPortsTeamBout{} }
func (m *TableESPortsTeamBout) String() string { return proto.CompactTextString(m) }
func (*TableESPortsTeamBout) ProtoMessage()    {}
func (*TableESPortsTeamBout) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{12}
}
func (m *TableESPortsTeamBout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableESPortsTeamBout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableESPortsTeamBout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableESPortsTeamBout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableESPortsTeamBout.Merge(m, src)
}
func (m *TableESPortsTeamBout) XXX_Size() int {
	return m.Size()
}
func (m *TableESPortsTeamBout) XXX_DiscardUnknown() {
	xxx_messageInfo_TableESPortsTeamBout.DiscardUnknown(m)
}

var xxx_messageInfo_TableESPortsTeamBout proto.InternalMessageInfo

func (m *TableESPortsTeamBout) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TableESPortsTeamBout) GetAppLabelId() int32 {
	if m != nil && m.AppLabelId != nil {
		return *m.AppLabelId
	}
	return 0
}

func (m *TableESPortsTeamBout) GetAppLabelName() string {
	if m != nil && m.AppLabelName != nil {
		return *m.AppLabelName
	}
	return ""
}

func (m *TableESPortsTeamBout) GetApiOrigin() int32 {
	if m != nil && m.ApiOrigin != nil {
		return *m.ApiOrigin
	}
	return 0
}

func (m *TableESPortsTeamBout) GetApiOriginName() string {
	if m != nil && m.ApiOriginName != nil {
		return *m.ApiOriginName
	}
	return ""
}

func (m *TableESPortsTeamBout) GetGameId() string {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return ""
}

func (m *TableESPortsTeamBout) GetHistory() *APITeamBoutHis {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *TableESPortsTeamBout) GetVs() []*APITeamBoutObject {
	if m != nil {
		return m.Vs
	}
	return nil
}

func (m *TableESPortsTeamBout) GetTeamAWinFail() *APITeamWinFaiObject {
	if m != nil {
		return m.TeamAWinFail
	}
	return nil
}

func (m *TableESPortsTeamBout) GetTeamBWinFail() *APITeamWinFaiObject {
	if m != nil {
		return m.TeamBWinFail
	}
	return nil
}

func (m *TableESPortsTeamBout) GetTeamANatRes() *APITeamNatResObject {
	if m != nil {
		return m.TeamANatRes
	}
	return nil
}

func (m *TableESPortsTeamBout) GetTeamBNatRes() *APITeamNatResObject {
	if m != nil {
		return m.TeamBNatRes
	}
	return nil
}

func (m *TableESPortsTeamBout) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TableESPortsTeamBout) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

//API两队交锋结构(比赛历史表用)
type APITeamBoutObject struct {
	//a队得分(api字段)
	ScoreA *string `protobuf:"bytes,1,opt,name=score_a" json:"score_a,omitempty" bson:"score_a,omitempty"`
	//b队得分(api字段)
	ScoreB *string `protobuf:"bytes,2,opt,name=score_b" json:"score_b,omitempty" bson:"score_b,omitempty"`
	//比赛开始时间 时间戳精确到秒(api字段)
	BeginTime *string `protobuf:"bytes,3,opt,name=begin_time" json:"begin_time,omitempty" bson:"begin_time,omitempty"`
	//a战队名称(api字段)
	TeamAName *string `protobuf:"bytes,4,opt,name=team_a_name" json:"team_a_name,omitempty" bson:"team_a_name,omitempty"`
	//b战队名称(api字段)
	TeamBName            *string  `protobuf:"bytes,5,opt,name=team_b_name" json:"team_b_name,omitempty" bson:"team_b_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *APITeamBoutObject) Reset()         { *m = APITeamBoutObject{} }
func (m *APITeamBoutObject) String() string { return proto.CompactTextString(m) }
func (*APITeamBoutObject) ProtoMessage()    {}
func (*APITeamBoutObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{13}
}
func (m *APITeamBoutObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APITeamBoutObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APITeamBoutObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APITeamBoutObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APITeamBoutObject.Merge(m, src)
}
func (m *APITeamBoutObject) XXX_Size() int {
	return m.Size()
}
func (m *APITeamBoutObject) XXX_DiscardUnknown() {
	xxx_messageInfo_APITeamBoutObject.DiscardUnknown(m)
}

var xxx_messageInfo_APITeamBoutObject proto.InternalMessageInfo

func (m *APITeamBoutObject) GetScoreA() string {
	if m != nil && m.ScoreA != nil {
		return *m.ScoreA
	}
	return ""
}

func (m *APITeamBoutObject) GetScoreB() string {
	if m != nil && m.ScoreB != nil {
		return *m.ScoreB
	}
	return ""
}

func (m *APITeamBoutObject) GetBeginTime() string {
	if m != nil && m.BeginTime != nil {
		return *m.BeginTime
	}
	return ""
}

func (m *APITeamBoutObject) GetTeamAName() string {
	if m != nil && m.TeamAName != nil {
		return *m.TeamAName
	}
	return ""
}

func (m *APITeamBoutObject) GetTeamBName() string {
	if m != nil && m.TeamBName != nil {
		return *m.TeamBName
	}
	return ""
}

//API两队历史交锋结构(比赛历史表用)
type APITeamBoutHis struct {
	//a队历史交锋(api字段)
	TeamA []*APITeamBoutObject `protobuf:"bytes,1,rep,name=team_a" json:"team_a,omitempty" bson:"team_a,omitempty"`
	//b队历史交锋(api字段)
	TeamB                []*APITeamBoutObject `protobuf:"bytes,2,rep,name=team_b" json:"team_b,omitempty" bson:"team_b,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-" bson:"-"`
	XXX_unrecognized     []byte               `json:"-" bson:"-"`
	XXX_sizecache        int32                `json:"-" bson:"-"`
}

func (m *APITeamBoutHis) Reset()         { *m = APITeamBoutHis{} }
func (m *APITeamBoutHis) String() string { return proto.CompactTextString(m) }
func (*APITeamBoutHis) ProtoMessage()    {}
func (*APITeamBoutHis) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{14}
}
func (m *APITeamBoutHis) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APITeamBoutHis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APITeamBoutHis.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APITeamBoutHis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APITeamBoutHis.Merge(m, src)
}
func (m *APITeamBoutHis) XXX_Size() int {
	return m.Size()
}
func (m *APITeamBoutHis) XXX_DiscardUnknown() {
	xxx_messageInfo_APITeamBoutHis.DiscardUnknown(m)
}

var xxx_messageInfo_APITeamBoutHis proto.InternalMessageInfo

func (m *APITeamBoutHis) GetTeamA() []*APITeamBoutObject {
	if m != nil {
		return m.TeamA
	}
	return nil
}

func (m *APITeamBoutHis) GetTeamB() []*APITeamBoutObject {
	if m != nil {
		return m.TeamB
	}
	return nil
}

//API两队胜败统计
type APITeamWinFaiObject struct {
	//连胜连败(-1：无 1： 连胜 0：连败)(api字段)
	IsContinueWin *int32 `protobuf:"varint,1,opt,name=is_continue_win" json:"is_continue_win,omitempty" bson:"is_continue_win,omitempty"`
	//连胜记录数(api字段)
	Num *int32 `protobuf:"varint,2,opt,name=num" json:"num,omitempty" bson:"num,omitempty"`
	//队伍id(api字段)
	TeamId               *string  `protobuf:"bytes,3,opt,name=team_id" json:"team_id,omitempty" bson:"team_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *APITeamWinFaiObject) Reset()         { *m = APITeamWinFaiObject{} }
func (m *APITeamWinFaiObject) String() string { return proto.CompactTextString(m) }
func (*APITeamWinFaiObject) ProtoMessage()    {}
func (*APITeamWinFaiObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{15}
}
func (m *APITeamWinFaiObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APITeamWinFaiObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APITeamWinFaiObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APITeamWinFaiObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APITeamWinFaiObject.Merge(m, src)
}
func (m *APITeamWinFaiObject) XXX_Size() int {
	return m.Size()
}
func (m *APITeamWinFaiObject) XXX_DiscardUnknown() {
	xxx_messageInfo_APITeamWinFaiObject.DiscardUnknown(m)
}

var xxx_messageInfo_APITeamWinFaiObject proto.InternalMessageInfo

func (m *APITeamWinFaiObject) GetIsContinueWin() int32 {
	if m != nil && m.IsContinueWin != nil {
		return *m.IsContinueWin
	}
	return 0
}

func (m *APITeamWinFaiObject) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

func (m *APITeamWinFaiObject) GetTeamId() string {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return ""
}

//API两队胜败天敌克制统计
type APITeamNatResObject struct {
	//天敌(api字段)
	NaturalTeam *string `protobuf:"bytes,1,opt,name=natural_team" json:"natural_team,omitempty" bson:"natural_team,omitempty"`
	//克制(api字段)
	RestrainTeam *string `protobuf:"bytes,2,opt,name=restrain_team" json:"restrain_team,omitempty" bson:"restrain_team,omitempty"`
	//队伍id(api字段)
	TeamId               *string  `protobuf:"bytes,3,opt,name=team_id" json:"team_id,omitempty" bson:"team_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *APITeamNatResObject) Reset()         { *m = APITeamNatResObject{} }
func (m *APITeamNatResObject) String() string { return proto.CompactTextString(m) }
func (*APITeamNatResObject) ProtoMessage()    {}
func (*APITeamNatResObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{16}
}
func (m *APITeamNatResObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APITeamNatResObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APITeamNatResObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APITeamNatResObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APITeamNatResObject.Merge(m, src)
}
func (m *APITeamNatResObject) XXX_Size() int {
	return m.Size()
}
func (m *APITeamNatResObject) XXX_DiscardUnknown() {
	xxx_messageInfo_APITeamNatResObject.DiscardUnknown(m)
}

var xxx_messageInfo_APITeamNatResObject proto.InternalMessageInfo

func (m *APITeamNatResObject) GetNaturalTeam() string {
	if m != nil && m.NaturalTeam != nil {
		return *m.NaturalTeam
	}
	return ""
}

func (m *APITeamNatResObject) GetRestrainTeam() string {
	if m != nil && m.RestrainTeam != nil {
		return *m.RestrainTeam
	}
	return ""
}

func (m *APITeamNatResObject) GetTeamId() string {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return ""
}

//API比赛动态信息表(早盘、滚盘)
type TableESPortsGameGuess struct {
	//唯一自增ID (app_label_id,game_id,api_origin,mornRoll_guess_flag的组合)
	Id *int64 `protobuf:"varint,1,req,name=id" json:"_id,omitempty" bson:"_id,omitempty"`
	//1:早盘,2:滚盘(app内部区分用)
	MornRollGuessFlag *int32 `protobuf:"varint,2,req,name=mornRoll_guess_flag" json:"mornRoll_guess_flag,omitempty" bson:"mornRoll_guess_flag,omitempty"`
	//对应本项目的标签id 10001:王者荣耀,10002:dota2,10003:英雄联盟,10004:CSGO
	AppLabelId *int32 `protobuf:"varint,3,opt,name=app_label_id" json:"app_label_id,omitempty" bson:"app_label_id,omitempty"`
	//对应本项目的标签id 10001:王者荣耀,10002:dota2,10003:英雄联盟,10004:CSGO
	AppLabelName *string `protobuf:"bytes,4,opt,name=app_label_name" json:"app_label_name,omitempty" bson:"app_label_name,omitempty"`
	//api接口来源 90001:野子科技
	ApiOrigin *int32 `protobuf:"varint,5,opt,name=api_origin" json:"api_origin,omitempty" bson:"api_origin,omitempty"`
	//api接口来源名称 90001:野子科技
	ApiOriginName *string `protobuf:"bytes,6,opt,name=api_origin_name" json:"api_origin_name,omitempty" bson:"api_origin_name,omitempty"`
	//比赛 id(api字段)
	GameId *string `protobuf:"bytes,7,opt,name=game_id" json:"game_id,omitempty" bson:"game_id,omitempty"`
	//开始时间(api字段)
	BeginTime *string `protobuf:"bytes,8,opt,name=begin_time" json:"begin_time,omitempty" bson:"begin_time,omitempty"`
	//比赛状态 0 未开始，2 已结束(api字段)(0和1的时候结合begin_time判断,数据库中不记录1进行中)
	GameStatus *string `protobuf:"bytes,9,opt,name=game_status" json:"game_status,omitempty" bson:"game_status,omitempty"`
	//已结束比赛结束状态说明(0 默认，1 正常结束，2 延时结束，3 取消结束)(api字段)
	GameStatusType *string `protobuf:"bytes,10,opt,name=game_status_type" json:"game_status_type,omitempty" bson:"game_status_type,omitempty"`
	//竞猜内容结(api字段)
	Guess []*ApiGuessObject `protobuf:"bytes,11,rep,name=guess" json:"guess,omitempty" bson:"guess,omitempty"`
	// 创建时间
	CreateTime *int64 `protobuf:"varint,12,opt,name=create_time" json:"create_time,omitempty" bson:"create_time,omitempty"`
	// 更新时间
	UpdateTime           *int64   `protobuf:"varint,13,opt,name=update_time" json:"update_time,omitempty" bson:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TableESPortsGameGuess) Reset()         { *m = TableESPortsGameGuess{} }
func (m *TableESPortsGameGuess) String() string { return proto.CompactTextString(m) }
func (*TableESPortsGameGuess) ProtoMessage()    {}
func (*TableESPortsGameGuess) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{17}
}
func (m *TableESPortsGameGuess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableESPortsGameGuess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableESPortsGameGuess.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableESPortsGameGuess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableESPortsGameGuess.Merge(m, src)
}
func (m *TableESPortsGameGuess) XXX_Size() int {
	return m.Size()
}
func (m *TableESPortsGameGuess) XXX_DiscardUnknown() {
	xxx_messageInfo_TableESPortsGameGuess.DiscardUnknown(m)
}

var xxx_messageInfo_TableESPortsGameGuess proto.InternalMessageInfo

func (m *TableESPortsGameGuess) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TableESPortsGameGuess) GetMornRollGuessFlag() int32 {
	if m != nil && m.MornRollGuessFlag != nil {
		return *m.MornRollGuessFlag
	}
	return 0
}

func (m *TableESPortsGameGuess) GetAppLabelId() int32 {
	if m != nil && m.AppLabelId != nil {
		return *m.AppLabelId
	}
	return 0
}

func (m *TableESPortsGameGuess) GetAppLabelName() string {
	if m != nil && m.AppLabelName != nil {
		return *m.AppLabelName
	}
	return ""
}

func (m *TableESPortsGameGuess) GetApiOrigin() int32 {
	if m != nil && m.ApiOrigin != nil {
		return *m.ApiOrigin
	}
	return 0
}

func (m *TableESPortsGameGuess) GetApiOriginName() string {
	if m != nil && m.ApiOriginName != nil {
		return *m.ApiOriginName
	}
	return ""
}

func (m *TableESPortsGameGuess) GetGameId() string {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return ""
}

func (m *TableESPortsGameGuess) GetBeginTime() string {
	if m != nil && m.BeginTime != nil {
		return *m.BeginTime
	}
	return ""
}

func (m *TableESPortsGameGuess) GetGameStatus() string {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return ""
}

func (m *TableESPortsGameGuess) GetGameStatusType() string {
	if m != nil && m.GameStatusType != nil {
		return *m.GameStatusType
	}
	return ""
}

func (m *TableESPortsGameGuess) GetGuess() []*ApiGuessObject {
	if m != nil {
		return m.Guess
	}
	return nil
}

func (m *TableESPortsGameGuess) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TableESPortsGameGuess) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

//API竞猜内容结构体(比赛动态信息表用)
type ApiGuessObject struct {
	//竞猜所属局数:0:全场;1:第一局;2:第二局（依次类推）(api字段)
	Num *string `protobuf:"bytes,1,opt,name=num" json:"num,omitempty" bson:"num,omitempty"`
	//竞猜内容 id(api字段)
	BetId *string `protobuf:"bytes,2,opt,name=bet_id" json:"bet_id,omitempty" bson:"bet_id,omitempty"`
	//竞猜内容(api字段)
	BetTitle *string `protobuf:"bytes,3,opt,name=bet_title" json:"bet_title,omitempty" bson:"bet_title,omitempty"`
	//竞猜内容（英）(api字段)
	BetTitleEn *string `protobuf:"bytes,4,opt,name=bet_title_en" json:"bet_title_en,omitempty" bson:"bet_title_en,omitempty"`
	//风险等级(A,B,C,D,E从高到低,越高代表赛事假的程度越高,风险越高)(api字段)
	RiskLevel *string `protobuf:"bytes,5,opt,name=risk_level" json:"risk_level,omitempty" bson:"risk_level,omitempty"`
	//竞猜投注项结构体(api字段)
	Items []*ApiItemObject `protobuf:"bytes,6,rep,name=items" json:"items,omitempty" bson:"items,omitempty"`
	//app后台设置竞猜内容的盘口状态 1:封盘 2:开盘(设置该项所有投注项有效)
	AppGuessFlag *int32 `protobuf:"varint,7,opt,name=app_guess_flag" json:"app_guess_flag,omitempty" bson:"app_guess_flag,omitempty"`
	//app后台设置竞猜内容的显示状态 1:关闭 2:开启(设置该项所有投注项有效)
	AppGuessViewFlag     *int32   `protobuf:"varint,8,opt,name=app_guess_view_flag" json:"app_guess_view_flag,omitempty" bson:"app_guess_view_flag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ApiGuessObject) Reset()         { *m = ApiGuessObject{} }
func (m *ApiGuessObject) String() string { return proto.CompactTextString(m) }
func (*ApiGuessObject) ProtoMessage()    {}
func (*ApiGuessObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{18}
}
func (m *ApiGuessObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiGuessObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiGuessObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiGuessObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiGuessObject.Merge(m, src)
}
func (m *ApiGuessObject) XXX_Size() int {
	return m.Size()
}
func (m *ApiGuessObject) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiGuessObject.DiscardUnknown(m)
}

var xxx_messageInfo_ApiGuessObject proto.InternalMessageInfo

func (m *ApiGuessObject) GetNum() string {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return ""
}

func (m *ApiGuessObject) GetBetId() string {
	if m != nil && m.BetId != nil {
		return *m.BetId
	}
	return ""
}

func (m *ApiGuessObject) GetBetTitle() string {
	if m != nil && m.BetTitle != nil {
		return *m.BetTitle
	}
	return ""
}

func (m *ApiGuessObject) GetBetTitleEn() string {
	if m != nil && m.BetTitleEn != nil {
		return *m.BetTitleEn
	}
	return ""
}

func (m *ApiGuessObject) GetRiskLevel() string {
	if m != nil && m.RiskLevel != nil {
		return *m.RiskLevel
	}
	return ""
}

func (m *ApiGuessObject) GetItems() []*ApiItemObject {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ApiGuessObject) GetAppGuessFlag() int32 {
	if m != nil && m.AppGuessFlag != nil {
		return *m.AppGuessFlag
	}
	return 0
}

func (m *ApiGuessObject) GetAppGuessViewFlag() int32 {
	if m != nil && m.AppGuessViewFlag != nil {
		return *m.AppGuessViewFlag
	}
	return 0
}

//API竞猜投注项结构体(比赛动态信息表用)
type ApiItemObject struct {
	//竞猜项 id(在同一个来源同一个比赛中可以确定唯一的投注项)(api字段)
	BetNum *string `protobuf:"bytes,1,opt,name=bet_num" json:"bet_num,omitempty" bson:"bet_num,omitempty"`
	//队伍id(api字段)
	TeamId *string `protobuf:"bytes,2,opt,name=team_id" json:"team_id,omitempty" bson:"team_id,omitempty"`
	//竞猜项是否有结果(0 否 1 是)(api字段)
	Status *string `protobuf:"bytes,3,opt,name=status" json:"status,omitempty" bson:"status,omitempty"`
	//某些竞猜会有用到(api字段)
	PlayerId *string `protobuf:"bytes,4,opt,name=player_id" json:"player_id,omitempty" bson:"player_id,omitempty"`
	//该竞猜项是否达成(0未达成，1达成 , -1 无结果)(api字段)
	Win *string `protobuf:"bytes,5,opt,name=win" json:"win,omitempty" bson:"win,omitempty"`
	//实时赔率(api字段)
	Odds *string `protobuf:"bytes,6,opt,name=odds" json:"odds,omitempty" bson:"odds,omitempty"`
	//竞猜类型(1 队伍，2 选手，3 自定义,5: 让分 6: 战队数组 7: 大小数组)(api字段)
	BetType *string `protobuf:"bytes,7,opt,name=bet_type" json:"bet_type,omitempty" bson:"bet_type,omitempty"`
	//竞猜项名称(api字段)
	OddsName *string `protobuf:"bytes,8,opt,name=odds_name" json:"odds_name,omitempty" bson:"odds_name,omitempty"`
	//是否限制投注(0 否，1 是)(api字段)
	LimitBet *int32 `protobuf:"varint,9,opt,name=limit_bet" json:"limit_bet,omitempty" bson:"limit_bet,omitempty"`
	//是否支持水位控制(0 否 1 是)(api字段)
	CanCustom *int32 `protobuf:"varint,10,opt,name=can_custom" json:"can_custom,omitempty" bson:"can_custom,omitempty"`
	//建议投注状态(0 关闭，1 开放 ，3 暂停)(api字段)
	OddsStatus *string `protobuf:"bytes,11,opt,name=odds_status" json:"odds_status,omitempty" bson:"odds_status,omitempty"`
	//分组id(api字段)
	GroupId *string `protobuf:"bytes,12,opt,name=group_id" json:"group_id,omitempty" bson:"group_id,omitempty"`
	//分组内容如:让分：0.5,大小数组：10,战队数组：10(api字段)
	GroupValue *string `protobuf:"bytes,13,opt,name=group_value" json:"group_value,omitempty" bson:"group_value,omitempty"`
	//分组表示1,2(组合竞猜类型用)如：让分:(1:+0.5,2:-0.5);大小数组:(1:大于10,2:小于10);战队数组时不用该值(api字段)
	GroupFlag *string `protobuf:"bytes,14,opt,name=group_flag" json:"group_flag,omitempty" bson:"group_flag,omitempty"`
	//暂时不可用(废弃)(api字段)
	BetStart *string `protobuf:"bytes,15,opt,name=bet_start" json:"bet_start,omitempty" bson:"bet_start,omitempty"`
	//暂时不可用(废弃)(api字段)
	BetOver *string `protobuf:"bytes,16,opt,name=bet_over" json:"bet_over,omitempty" bson:"bet_over,omitempty"`
	//暂时不可用(废弃)(api字段)
	OddsTime *string `protobuf:"bytes,17,opt,name=odds_time" json:"odds_time,omitempty" bson:"odds_time,omitempty"`
	//投注状态从1到0  或  从1到3记录; 其他不变(开奖的时候这个时间的前n秒投注为无效单)
	StatusTime *int64 `protobuf:"varint,18,opt,name=status_time" json:"status_time,omitempty" bson:"status_time,omitempty"`
	//结果产生时间(结合status和win一起判断)
	ResultTime           *int64   `protobuf:"varint,19,opt,name=result_time" json:"result_time,omitempty" bson:"result_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ApiItemObject) Reset()         { *m = ApiItemObject{} }
func (m *ApiItemObject) String() string { return proto.CompactTextString(m) }
func (*ApiItemObject) ProtoMessage()    {}
func (*ApiItemObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{19}
}
func (m *ApiItemObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiItemObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiItemObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiItemObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiItemObject.Merge(m, src)
}
func (m *ApiItemObject) XXX_Size() int {
	return m.Size()
}
func (m *ApiItemObject) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiItemObject.DiscardUnknown(m)
}

var xxx_messageInfo_ApiItemObject proto.InternalMessageInfo

func (m *ApiItemObject) GetBetNum() string {
	if m != nil && m.BetNum != nil {
		return *m.BetNum
	}
	return ""
}

func (m *ApiItemObject) GetTeamId() string {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return ""
}

func (m *ApiItemObject) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *ApiItemObject) GetPlayerId() string {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return ""
}

func (m *ApiItemObject) GetWin() string {
	if m != nil && m.Win != nil {
		return *m.Win
	}
	return ""
}

func (m *ApiItemObject) GetOdds() string {
	if m != nil && m.Odds != nil {
		return *m.Odds
	}
	return ""
}

func (m *ApiItemObject) GetBetType() string {
	if m != nil && m.BetType != nil {
		return *m.BetType
	}
	return ""
}

func (m *ApiItemObject) GetOddsName() string {
	if m != nil && m.OddsName != nil {
		return *m.OddsName
	}
	return ""
}

func (m *ApiItemObject) GetLimitBet() int32 {
	if m != nil && m.LimitBet != nil {
		return *m.LimitBet
	}
	return 0
}

func (m *ApiItemObject) GetCanCustom() int32 {
	if m != nil && m.CanCustom != nil {
		return *m.CanCustom
	}
	return 0
}

func (m *ApiItemObject) GetOddsStatus() string {
	if m != nil && m.OddsStatus != nil {
		return *m.OddsStatus
	}
	return ""
}

func (m *ApiItemObject) GetGroupId() string {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return ""
}

func (m *ApiItemObject) GetGroupValue() string {
	if m != nil && m.GroupValue != nil {
		return *m.GroupValue
	}
	return ""
}

func (m *ApiItemObject) GetGroupFlag() string {
	if m != nil && m.GroupFlag != nil {
		return *m.GroupFlag
	}
	return ""
}

func (m *ApiItemObject) GetBetStart() string {
	if m != nil && m.BetStart != nil {
		return *m.BetStart
	}
	return ""
}

func (m *ApiItemObject) GetBetOver() string {
	if m != nil && m.BetOver != nil {
		return *m.BetOver
	}
	return ""
}

func (m *ApiItemObject) GetOddsTime() string {
	if m != nil && m.OddsTime != nil {
		return *m.OddsTime
	}
	return ""
}

func (m *ApiItemObject) GetStatusTime() int64 {
	if m != nil && m.StatusTime != nil {
		return *m.StatusTime
	}
	return 0
}

func (m *ApiItemObject) GetResultTime() int64 {
	if m != nil && m.ResultTime != nil {
		return *m.ResultTime
	}
	return 0
}

//记录某场比赛10.1接口调用
type TableESPortsUseRollGuess struct {
	//唯一自增ID (app_label_id,game_id,api_origin的组合)
	Id *int64 `protobuf:"varint,1,req,name=id" json:"_id,omitempty" bson:"_id,omitempty"`
	//对应本项目的标签id 10001:王者荣耀,10002:dota2,10003:英雄联盟,10004:CSGO
	AppLabelId *int32 `protobuf:"varint,2,opt,name=app_label_id" json:"app_label_id,omitempty" bson:"app_label_id,omitempty"`
	//对应本项目的标签id 10001:王者荣耀,10002:dota2,10003:英雄联盟,10004:CSGO
	AppLabelName *string `protobuf:"bytes,3,opt,name=app_label_name" json:"app_label_name,omitempty" bson:"app_label_name,omitempty"`
	//api接口来源 90001:野子科技
	ApiOrigin *int32 `protobuf:"varint,4,opt,name=api_origin" json:"api_origin,omitempty" bson:"api_origin,omitempty"`
	//api接口来源名称 90001:野子科技
	ApiOriginName *string `protobuf:"bytes,5,opt,name=api_origin_name" json:"api_origin_name,omitempty" bson:"api_origin_name,omitempty"`
	//比赛 id
	GameId *string `protobuf:"bytes,6,opt,name=game_id" json:"game_id,omitempty" bson:"game_id,omitempty"`
	// 创建时间
	CreateTime *int64 `protobuf:"varint,7,opt,name=create_time" json:"create_time,omitempty" bson:"create_time,omitempty"`
	// 更新时间
	UpdateTime           *int64   `protobuf:"varint,8,opt,name=update_time" json:"update_time,omitempty" bson:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TableESPortsUseRollGuess) Reset()         { *m = TableESPortsUseRollGuess{} }
func (m *TableESPortsUseRollGuess) String() string { return proto.CompactTextString(m) }
func (*TableESPortsUseRollGuess) ProtoMessage()    {}
func (*TableESPortsUseRollGuess) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{20}
}
func (m *TableESPortsUseRollGuess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableESPortsUseRollGuess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableESPortsUseRollGuess.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableESPortsUseRollGuess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableESPortsUseRollGuess.Merge(m, src)
}
func (m *TableESPortsUseRollGuess) XXX_Size() int {
	return m.Size()
}
func (m *TableESPortsUseRollGuess) XXX_DiscardUnknown() {
	xxx_messageInfo_TableESPortsUseRollGuess.DiscardUnknown(m)
}

var xxx_messageInfo_TableESPortsUseRollGuess proto.InternalMessageInfo

func (m *TableESPortsUseRollGuess) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TableESPortsUseRollGuess) GetAppLabelId() int32 {
	if m != nil && m.AppLabelId != nil {
		return *m.AppLabelId
	}
	return 0
}

func (m *TableESPortsUseRollGuess) GetAppLabelName() string {
	if m != nil && m.AppLabelName != nil {
		return *m.AppLabelName
	}
	return ""
}

func (m *TableESPortsUseRollGuess) GetApiOrigin() int32 {
	if m != nil && m.ApiOrigin != nil {
		return *m.ApiOrigin
	}
	return 0
}

func (m *TableESPortsUseRollGuess) GetApiOriginName() string {
	if m != nil && m.ApiOriginName != nil {
		return *m.ApiOriginName
	}
	return ""
}

func (m *TableESPortsUseRollGuess) GetGameId() string {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return ""
}

func (m *TableESPortsUseRollGuess) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TableESPortsUseRollGuess) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

//推流直播地址对象
type ESPortsGameLivePathObj struct {
	//地址1(api字段)
	FlvUrl *string `protobuf:"bytes,1,opt,name=flvUrl" json:"flvUrl,omitempty" bson:"flvUrl,omitempty"`
	//地址2(api字段)
	M3U8Url *string `protobuf:"bytes,2,opt,name=m3u8Url" json:"m3u8Url,omitempty" bson:"m3u8Url,omitempty"`
	//地址3(api字段)
	RtmpUrl              *string  `protobuf:"bytes,3,opt,name=rtmpUrl" json:"rtmpUrl,omitempty" bson:"rtmpUrl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ESPortsGameLivePathObj) Reset()         { *m = ESPortsGameLivePathObj{} }
func (m *ESPortsGameLivePathObj) String() string { return proto.CompactTextString(m) }
func (*ESPortsGameLivePathObj) ProtoMessage()    {}
func (*ESPortsGameLivePathObj) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{21}
}
func (m *ESPortsGameLivePathObj) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESPortsGameLivePathObj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESPortsGameLivePathObj.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESPortsGameLivePathObj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESPortsGameLivePathObj.Merge(m, src)
}
func (m *ESPortsGameLivePathObj) XXX_Size() int {
	return m.Size()
}
func (m *ESPortsGameLivePathObj) XXX_DiscardUnknown() {
	xxx_messageInfo_ESPortsGameLivePathObj.DiscardUnknown(m)
}

var xxx_messageInfo_ESPortsGameLivePathObj proto.InternalMessageInfo

func (m *ESPortsGameLivePathObj) GetFlvUrl() string {
	if m != nil && m.FlvUrl != nil {
		return *m.FlvUrl
	}
	return ""
}

func (m *ESPortsGameLivePathObj) GetM3U8Url() string {
	if m != nil && m.M3U8Url != nil {
		return *m.M3U8Url
	}
	return ""
}

func (m *ESPortsGameLivePathObj) GetRtmpUrl() string {
	if m != nil && m.RtmpUrl != nil {
		return *m.RtmpUrl
	}
	return ""
}

//API游戏实时数据的结构
//API=======DOTA2游戏实时数据
type TableESPortsDOTARealTimeData struct {
	//唯一自增ID (game_id,api_origin,game_round的组合)
	Id *int64 `protobuf:"varint,1,req,name=id" json:"_id,omitempty" bson:"_id,omitempty"`
	//api接口来源 90001:野子科技
	ApiOrigin *int32 `protobuf:"varint,2,opt,name=api_origin" json:"api_origin,omitempty" bson:"api_origin,omitempty"`
	//api接口来源名称 90001:野子科技
	ApiOriginName *string `protobuf:"bytes,3,opt,name=api_origin_name" json:"api_origin_name,omitempty" bson:"api_origin_name,omitempty"`
	//比赛 id(api字段)
	GameId *int32 `protobuf:"varint,4,opt,name=game_id" json:"game_id,omitempty" bson:"game_id,omitempty"`
	//当前局数(api字段)
	GameRound *int32 `protobuf:"varint,5,opt,name=game_round" json:"game_round,omitempty" bson:"game_round,omitempty"`
	//局数 id(api字段)
	GameRoundId *int32 `protobuf:"varint,6,opt,name=game_round_id" json:"game_round_id,omitempty" bson:"game_round_id,omitempty"`
	//比赛状态(当前局数的比赛状态:1:进行中 2:已结束) (api字段)
	GameStatus *int32 `protobuf:"varint,7,opt,name=game_status" json:"game_status,omitempty" bson:"game_status,omitempty"`
	//项目 id(api字段)
	EventId *string `protobuf:"bytes,8,opt,name=event_id" json:"event_id,omitempty" bson:"event_id,omitempty"`
	//持续时间:单位秒(api字段)
	Duration *int32 `protobuf:"varint,9,opt,name=duration" json:"duration,omitempty" bson:"duration,omitempty"`
	//肉山刷新时间:0：表示存活(api字段)
	RoshanRtimer *int32 `protobuf:"varint,10,opt,name=roshan_rtimer" json:"roshan_rtimer,omitempty" bson:"roshan_rtimer,omitempty"`
	//当局胜者:radiant | dire(api字段)
	Winner *string `protobuf:"bytes,11,opt,name=winner" json:"winner,omitempty" bson:"winner,omitempty"`
	//战队 a 信息
	TeamA *ApiDOTATeam `protobuf:"bytes,12,opt,name=team_a" json:"team_a,omitempty" bson:"team_a,omitempty"`
	//战队 b 信息
	TeamB *ApiDOTATeam `protobuf:"bytes,13,opt,name=team_b" json:"team_b,omitempty" bson:"team_b,omitempty"`
	//战队 a队员信息
	PlayerAInfo *ApiDOTAPlayer `protobuf:"bytes,14,opt,name=player_a_info" json:"player_a_info,omitempty" bson:"player_a_info,omitempty"`
	//战队 b队员信息
	PlayerBInfo *ApiDOTAPlayer `protobuf:"bytes,15,opt,name=player_b_info" json:"player_b_info,omitempty" bson:"player_b_info,omitempty"`
	//创建时间
	CreateTime *int64 `protobuf:"varint,16,opt,name=create_time" json:"create_time,omitempty" bson:"create_time,omitempty"`
	//更新时间
	UpdateTime           *int64   `protobuf:"varint,17,opt,name=update_time" json:"update_time,omitempty" bson:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TableESPortsDOTARealTimeData) Reset()         { *m = TableESPortsDOTARealTimeData{} }
func (m *TableESPortsDOTARealTimeData) String() string { return proto.CompactTextString(m) }
func (*TableESPortsDOTARealTimeData) ProtoMessage()    {}
func (*TableESPortsDOTARealTimeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{22}
}
func (m *TableESPortsDOTARealTimeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableESPortsDOTARealTimeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableESPortsDOTARealTimeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableESPortsDOTARealTimeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableESPortsDOTARealTimeData.Merge(m, src)
}
func (m *TableESPortsDOTARealTimeData) XXX_Size() int {
	return m.Size()
}
func (m *TableESPortsDOTARealTimeData) XXX_DiscardUnknown() {
	xxx_messageInfo_TableESPortsDOTARealTimeData.DiscardUnknown(m)
}

var xxx_messageInfo_TableESPortsDOTARealTimeData proto.InternalMessageInfo

func (m *TableESPortsDOTARealTimeData) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TableESPortsDOTARealTimeData) GetApiOrigin() int32 {
	if m != nil && m.ApiOrigin != nil {
		return *m.ApiOrigin
	}
	return 0
}

func (m *TableESPortsDOTARealTimeData) GetApiOriginName() string {
	if m != nil && m.ApiOriginName != nil {
		return *m.ApiOriginName
	}
	return ""
}

func (m *TableESPortsDOTARealTimeData) GetGameId() int32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *TableESPortsDOTARealTimeData) GetGameRound() int32 {
	if m != nil && m.GameRound != nil {
		return *m.GameRound
	}
	return 0
}

func (m *TableESPortsDOTARealTimeData) GetGameRoundId() int32 {
	if m != nil && m.GameRoundId != nil {
		return *m.GameRoundId
	}
	return 0
}

func (m *TableESPortsDOTARealTimeData) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *TableESPortsDOTARealTimeData) GetEventId() string {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return ""
}

func (m *TableESPortsDOTARealTimeData) GetDuration() int32 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

func (m *TableESPortsDOTARealTimeData) GetRoshanRtimer() int32 {
	if m != nil && m.RoshanRtimer != nil {
		return *m.RoshanRtimer
	}
	return 0
}

func (m *TableESPortsDOTARealTimeData) GetWinner() string {
	if m != nil && m.Winner != nil {
		return *m.Winner
	}
	return ""
}

func (m *TableESPortsDOTARealTimeData) GetTeamA() *ApiDOTATeam {
	if m != nil {
		return m.TeamA
	}
	return nil
}

func (m *TableESPortsDOTARealTimeData) GetTeamB() *ApiDOTATeam {
	if m != nil {
		return m.TeamB
	}
	return nil
}

func (m *TableESPortsDOTARealTimeData) GetPlayerAInfo() *ApiDOTAPlayer {
	if m != nil {
		return m.PlayerAInfo
	}
	return nil
}

func (m *TableESPortsDOTARealTimeData) GetPlayerBInfo() *ApiDOTAPlayer {
	if m != nil {
		return m.PlayerBInfo
	}
	return nil
}

func (m *TableESPortsDOTARealTimeData) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TableESPortsDOTARealTimeData) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

//API战队信息结构(DOTA实时数据表用)
type ApiDOTATeam struct {
	//战队类型(radiant：天辉,dire：夜魇)(api字段)
	Faction *string `protobuf:"bytes,1,opt,name=faction" json:"faction,omitempty" bson:"faction,omitempty"`
	//选取的英雄(选取的英雄 id)
	Picks []int32 `protobuf:"varint,2,rep,name=picks" json:"picks,omitempty" bson:"picks,omitempty"`
	//禁用的英雄(禁用的英雄 id)
	Bans []int32 `protobuf:"varint,3,rep,name=bans" json:"bans,omitempty" bson:"bans,omitempty"`
	//战队 a 名称
	Name *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty" bson:"name,omitempty"`
	//战队 id
	Id *int32 `protobuf:"varint,5,opt,name=id" json:"id,omitempty" bson:"id,omitempty"`
	//人头
	Score *int32 `protobuf:"varint,6,opt,name=score" json:"score,omitempty" bson:"score,omitempty"`
	//当前总经济
	Glod *int32 `protobuf:"varint,7,opt,name=glod" json:"glod,omitempty" bson:"glod,omitempty"`
	//塔状态:推掉对方塔数(2字节16位二进制对应)
	TowerState *int32 `protobuf:"varint,8,opt,name=tower_state" json:"tower_state,omitempty" bson:"tower_state,omitempty"`
	//兵营状态:推掉对方兵营数(1字节8位二进制进行对应)
	BarracksState        *int32   `protobuf:"varint,9,opt,name=barracks_state" json:"barracks_state,omitempty" bson:"barracks_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ApiDOTATeam) Reset()         { *m = ApiDOTATeam{} }
func (m *ApiDOTATeam) String() string { return proto.CompactTextString(m) }
func (*ApiDOTATeam) ProtoMessage()    {}
func (*ApiDOTATeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{23}
}
func (m *ApiDOTATeam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiDOTATeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiDOTATeam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiDOTATeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiDOTATeam.Merge(m, src)
}
func (m *ApiDOTATeam) XXX_Size() int {
	return m.Size()
}
func (m *ApiDOTATeam) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiDOTATeam.DiscardUnknown(m)
}

var xxx_messageInfo_ApiDOTATeam proto.InternalMessageInfo

func (m *ApiDOTATeam) GetFaction() string {
	if m != nil && m.Faction != nil {
		return *m.Faction
	}
	return ""
}

func (m *ApiDOTATeam) GetPicks() []int32 {
	if m != nil {
		return m.Picks
	}
	return nil
}

func (m *ApiDOTATeam) GetBans() []int32 {
	if m != nil {
		return m.Bans
	}
	return nil
}

func (m *ApiDOTATeam) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ApiDOTATeam) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ApiDOTATeam) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *ApiDOTATeam) GetGlod() int32 {
	if m != nil && m.Glod != nil {
		return *m.Glod
	}
	return 0
}

func (m *ApiDOTATeam) GetTowerState() int32 {
	if m != nil && m.TowerState != nil {
		return *m.TowerState
	}
	return 0
}

func (m *ApiDOTATeam) GetBarracksState() int32 {
	if m != nil && m.BarracksState != nil {
		return *m.BarracksState
	}
	return 0
}

//API队员信息结构(DOTA实时数据表用)
type ApiDOTAPlayer struct {
	//队员名称(api字段)
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty" bson:"name,omitempty"`
	//队员使用英雄 id(api字段)
	HeroId *int32 `protobuf:"varint,2,opt,name=hero_id" json:"hero_id,omitempty" bson:"hero_id,omitempty"`
	//队员战术位置 (api字段)
	PlayerPart *int32 `protobuf:"varint,3,opt,name=player_part" json:"player_part,omitempty" bson:"player_part,omitempty"`
	//击杀(api字段)
	Kills *int32 `protobuf:"varint,4,opt,name=kills" json:"kills,omitempty" bson:"kills,omitempty"`
	//死亡(api字段)
	Death *int32 `protobuf:"varint,5,opt,name=death" json:"death,omitempty" bson:"death,omitempty"`
	//助攻(api字段)
	Assists *int32 `protobuf:"varint,6,opt,name=assists" json:"assists,omitempty" bson:"assists,omitempty"`
	//正补数(api字段)
	Subsidy *int32 `protobuf:"varint,7,opt,name=subsidy" json:"subsidy,omitempty" bson:"subsidy,omitempty"`
	//反补数(api字段)
	AntiSubsidy *int32 `protobuf:"varint,8,opt,name=anti_subsidy" json:"anti_subsidy,omitempty" bson:"anti_subsidy,omitempty"`
	//剩余金钱(api字段)
	Gold *int32 `protobuf:"varint,9,opt,name=gold" json:"gold,omitempty" bson:"gold,omitempty"`
	//等级(api字段)
	Level *int32 `protobuf:"varint,10,opt,name=level" json:"level,omitempty" bson:"level,omitempty"`
	//平均每分钟金钱数(api字段)
	Gpm *int32 `protobuf:"varint,11,opt,name=gpm" json:"gpm,omitempty" bson:"gpm,omitempty"`
	//平均每分钟经验(api字段)
	Xpm *int32 `protobuf:"varint,12,opt,name=xpm" json:"xpm,omitempty" bson:"xpm,omitempty"`
	//大招等级(api字段)
	UltimateLevel *int32 `protobuf:"varint,13,opt,name=ultimate_level" json:"ultimate_level,omitempty" bson:"ultimate_level,omitempty"`
	//大招冷却时间:秒(api字段)
	UltimateCd *int32 `protobuf:"varint,14,opt,name=ultimate_cd" json:"ultimate_cd,omitempty" bson:"ultimate_cd,omitempty"`
	//装备栏道具 id(api字段) N:0~5 分别表示道 具 id
	//这里和LOL、WZRY、CSGO不一致、装备栏道具 id(api字段)
	Item0 *int32 `protobuf:"varint,15,opt,name=item0" json:"item0,omitempty" bson:"item0,omitempty"`
	Item1 *int32 `protobuf:"varint,16,opt,name=item1" json:"item1,omitempty" bson:"item1,omitempty"`
	Item2 *int32 `protobuf:"varint,17,opt,name=item2" json:"item2,omitempty" bson:"item2,omitempty"`
	Item3 *int32 `protobuf:"varint,18,opt,name=item3" json:"item3,omitempty" bson:"item3,omitempty"`
	Item4 *int32 `protobuf:"varint,19,opt,name=item4" json:"item4,omitempty" bson:"item4,omitempty"`
	Item5 *int32 `protobuf:"varint,20,opt,name=item5" json:"item5,omitempty" bson:"item5,omitempty"`
	//复活时间:秒(api字段)
	Rtimer *int32 `protobuf:"varint,21,opt,name=rtimer" json:"rtimer,omitempty" bson:"rtimer,omitempty"`
	//队员当前 x 坐标(api字段)
	Px *float64 `protobuf:"fixed64,22,opt,name=px" json:"px,omitempty" bson:"px,omitempty"`
	//队员当前 y 坐标(api字段)
	Py *float64 `protobuf:"fixed64,23,opt,name=py" json:"py,omitempty" bson:"py,omitempty"`
	//队员总经济(api字段)
	NetWorth             *int32   `protobuf:"varint,24,opt,name=net_worth" json:"net_worth,omitempty" bson:"net_worth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ApiDOTAPlayer) Reset()         { *m = ApiDOTAPlayer{} }
func (m *ApiDOTAPlayer) String() string { return proto.CompactTextString(m) }
func (*ApiDOTAPlayer) ProtoMessage()    {}
func (*ApiDOTAPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{24}
}
func (m *ApiDOTAPlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiDOTAPlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiDOTAPlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiDOTAPlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiDOTAPlayer.Merge(m, src)
}
func (m *ApiDOTAPlayer) XXX_Size() int {
	return m.Size()
}
func (m *ApiDOTAPlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiDOTAPlayer.DiscardUnknown(m)
}

var xxx_messageInfo_ApiDOTAPlayer proto.InternalMessageInfo

func (m *ApiDOTAPlayer) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ApiDOTAPlayer) GetHeroId() int32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *ApiDOTAPlayer) GetPlayerPart() int32 {
	if m != nil && m.PlayerPart != nil {
		return *m.PlayerPart
	}
	return 0
}

func (m *ApiDOTAPlayer) GetKills() int32 {
	if m != nil && m.Kills != nil {
		return *m.Kills
	}
	return 0
}

func (m *ApiDOTAPlayer) GetDeath() int32 {
	if m != nil && m.Death != nil {
		return *m.Death
	}
	return 0
}

func (m *ApiDOTAPlayer) GetAssists() int32 {
	if m != nil && m.Assists != nil {
		return *m.Assists
	}
	return 0
}

func (m *ApiDOTAPlayer) GetSubsidy() int32 {
	if m != nil && m.Subsidy != nil {
		return *m.Subsidy
	}
	return 0
}

func (m *ApiDOTAPlayer) GetAntiSubsidy() int32 {
	if m != nil && m.AntiSubsidy != nil {
		return *m.AntiSubsidy
	}
	return 0
}

func (m *ApiDOTAPlayer) GetGold() int32 {
	if m != nil && m.Gold != nil {
		return *m.Gold
	}
	return 0
}

func (m *ApiDOTAPlayer) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *ApiDOTAPlayer) GetGpm() int32 {
	if m != nil && m.Gpm != nil {
		return *m.Gpm
	}
	return 0
}

func (m *ApiDOTAPlayer) GetXpm() int32 {
	if m != nil && m.Xpm != nil {
		return *m.Xpm
	}
	return 0
}

func (m *ApiDOTAPlayer) GetUltimateLevel() int32 {
	if m != nil && m.UltimateLevel != nil {
		return *m.UltimateLevel
	}
	return 0
}

func (m *ApiDOTAPlayer) GetUltimateCd() int32 {
	if m != nil && m.UltimateCd != nil {
		return *m.UltimateCd
	}
	return 0
}

func (m *ApiDOTAPlayer) GetItem0() int32 {
	if m != nil && m.Item0 != nil {
		return *m.Item0
	}
	return 0
}

func (m *ApiDOTAPlayer) GetItem1() int32 {
	if m != nil && m.Item1 != nil {
		return *m.Item1
	}
	return 0
}

func (m *ApiDOTAPlayer) GetItem2() int32 {
	if m != nil && m.Item2 != nil {
		return *m.Item2
	}
	return 0
}

func (m *ApiDOTAPlayer) GetItem3() int32 {
	if m != nil && m.Item3 != nil {
		return *m.Item3
	}
	return 0
}

func (m *ApiDOTAPlayer) GetItem4() int32 {
	if m != nil && m.Item4 != nil {
		return *m.Item4
	}
	return 0
}

func (m *ApiDOTAPlayer) GetItem5() int32 {
	if m != nil && m.Item5 != nil {
		return *m.Item5
	}
	return 0
}

func (m *ApiDOTAPlayer) GetRtimer() int32 {
	if m != nil && m.Rtimer != nil {
		return *m.Rtimer
	}
	return 0
}

func (m *ApiDOTAPlayer) GetPx() float64 {
	if m != nil && m.Px != nil {
		return *m.Px
	}
	return 0
}

func (m *ApiDOTAPlayer) GetPy() float64 {
	if m != nil && m.Py != nil {
		return *m.Py
	}
	return 0
}

func (m *ApiDOTAPlayer) GetNetWorth() int32 {
	if m != nil && m.NetWorth != nil {
		return *m.NetWorth
	}
	return 0
}

//API=======LOL游戏实时数据
type TableESPortsLOLRealTimeData struct {
	//唯一自增ID (game_id,api_origin,game_round的组合)
	Id *int64 `protobuf:"varint,1,req,name=id" json:"_id,omitempty" bson:"_id,omitempty"`
	//(扩展字段为了存redis)对应本项目的标签id 10001:王者荣耀,10002:dota2,10003:英雄联盟,10004:CSGO
	AppLabelId *int32 `protobuf:"varint,2,opt,name=app_label_id" json:"app_label_id,omitempty" bson:"app_label_id,omitempty"`
	//(扩展字段)对应本项目的标签id 10001:王者荣耀,10002:dota2,10003:英雄联盟,10004:CSGO
	AppLabelName *string `protobuf:"bytes,3,opt,name=app_label_name" json:"app_label_name,omitempty" bson:"app_label_name,omitempty"`
	//api接口来源 90001:野子科技
	ApiOrigin *int32 `protobuf:"varint,4,opt,name=api_origin" json:"api_origin,omitempty" bson:"api_origin,omitempty"`
	//api接口来源名称 90001:野子科技
	ApiOriginName *string `protobuf:"bytes,5,opt,name=api_origin_name" json:"api_origin_name,omitempty" bson:"api_origin_name,omitempty"`
	//比赛 id(api字段)
	GameId *int32 `protobuf:"varint,6,opt,name=game_id" json:"game_id,omitempty" bson:"game_id,omitempty"`
	//当前局数(api字段)
	GameRound *int32 `protobuf:"varint,7,opt,name=game_round" json:"game_round,omitempty" bson:"game_round,omitempty"`
	//比赛状态(当前局数的比赛状态:1:进行中 2:已结束) (api字段)
	GameStatus *int32 `protobuf:"varint,8,opt,name=game_status" json:"game_status,omitempty" bson:"game_status,omitempty"`
	//项目 id(api字段)
	EventId *string `protobuf:"bytes,9,opt,name=event_id" json:"event_id,omitempty" bson:"event_id,omitempty"`
	//持续时间:单位秒(api字段)
	Duration *int32 `protobuf:"varint,10,opt,name=duration" json:"duration,omitempty" bson:"duration,omitempty"`
	//当局胜者:team_a | team_b(api字段)
	Winner *string `protobuf:"bytes,11,opt,name=winner" json:"winner,omitempty" bson:"winner,omitempty"`
	//战队 a 信息(api字段)
	TeamA *ApiLOLTeam `protobuf:"bytes,12,opt,name=team_a" json:"team_a,omitempty" bson:"team_a,omitempty"`
	//战队 b 信息(api字段)
	TeamB *ApiLOLTeam `protobuf:"bytes,13,opt,name=team_b" json:"team_b,omitempty" bson:"team_b,omitempty"`
	//战队 a队员信息(api字段)
	PlayerAInfo []*ApiLOLPlayer `protobuf:"bytes,14,rep,name=player_a_info" json:"player_a_info,omitempty" bson:"player_a_info,omitempty"`
	//战队 b队员信息(api字段)
	PlayerBInfo []*ApiLOLPlayer `protobuf:"bytes,15,rep,name=player_b_info" json:"player_b_info,omitempty" bson:"player_b_info,omitempty"`
	//(扩展字段)一塔 0:无、1:A队一塔 2:B队一塔
	FirstTower *int32 `protobuf:"varint,16,opt,name=first_tower" json:"first_tower,omitempty" bson:"first_tower,omitempty"`
	//(扩展字段)一小龙  0:无、1:A队一小龙 2:B队一小龙
	FirstSmallDragon *int32 `protobuf:"varint,17,opt,name=first_small_dragon" json:"first_small_dragon,omitempty" bson:"first_small_dragon,omitempty"`
	//(扩展字段)先五杀  0:无、1:A队先五杀 2:B队先五杀
	FirstFiveKill *int32 `protobuf:"varint,18,opt,name=first_five_kill" json:"first_five_kill,omitempty" bson:"first_five_kill,omitempty"`
	//(扩展字段)一大龙  0:无、1:A队一大龙 2:B队一大龙
	FirstBigDragon *int32 `protobuf:"varint,19,opt,name=first_big_dragon" json:"first_big_dragon,omitempty" bson:"first_big_dragon,omitempty"`
	//(扩展字段)先十杀  0:无、1:A队先十杀 2:B队先十杀
	FirstTenKill *int32 `protobuf:"varint,20,opt,name=first_ten_kill" json:"first_ten_kill,omitempty" bson:"first_ten_kill,omitempty"`
	//(扩展字段)创建时间
	CreateTime *int64 `protobuf:"varint,21,opt,name=create_time" json:"create_time,omitempty" bson:"create_time,omitempty"`
	//(扩展字段)更新时间
	UpdateTime           *int64   `protobuf:"varint,22,opt,name=update_time" json:"update_time,omitempty" bson:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TableESPortsLOLRealTimeData) Reset()         { *m = TableESPortsLOLRealTimeData{} }
func (m *TableESPortsLOLRealTimeData) String() string { return proto.CompactTextString(m) }
func (*TableESPortsLOLRealTimeData) ProtoMessage()    {}
func (*TableESPortsLOLRealTimeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{25}
}
func (m *TableESPortsLOLRealTimeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableESPortsLOLRealTimeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableESPortsLOLRealTimeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableESPortsLOLRealTimeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableESPortsLOLRealTimeData.Merge(m, src)
}
func (m *TableESPortsLOLRealTimeData) XXX_Size() int {
	return m.Size()
}
func (m *TableESPortsLOLRealTimeData) XXX_DiscardUnknown() {
	xxx_messageInfo_TableESPortsLOLRealTimeData.DiscardUnknown(m)
}

var xxx_messageInfo_TableESPortsLOLRealTimeData proto.InternalMessageInfo

func (m *TableESPortsLOLRealTimeData) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TableESPortsLOLRealTimeData) GetAppLabelId() int32 {
	if m != nil && m.AppLabelId != nil {
		return *m.AppLabelId
	}
	return 0
}

func (m *TableESPortsLOLRealTimeData) GetAppLabelName() string {
	if m != nil && m.AppLabelName != nil {
		return *m.AppLabelName
	}
	return ""
}

func (m *TableESPortsLOLRealTimeData) GetApiOrigin() int32 {
	if m != nil && m.ApiOrigin != nil {
		return *m.ApiOrigin
	}
	return 0
}

func (m *TableESPortsLOLRealTimeData) GetApiOriginName() string {
	if m != nil && m.ApiOriginName != nil {
		return *m.ApiOriginName
	}
	return ""
}

func (m *TableESPortsLOLRealTimeData) GetGameId() int32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *TableESPortsLOLRealTimeData) GetGameRound() int32 {
	if m != nil && m.GameRound != nil {
		return *m.GameRound
	}
	return 0
}

func (m *TableESPortsLOLRealTimeData) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *TableESPortsLOLRealTimeData) GetEventId() string {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return ""
}

func (m *TableESPortsLOLRealTimeData) GetDuration() int32 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

func (m *TableESPortsLOLRealTimeData) GetWinner() string {
	if m != nil && m.Winner != nil {
		return *m.Winner
	}
	return ""
}

func (m *TableESPortsLOLRealTimeData) GetTeamA() *ApiLOLTeam {
	if m != nil {
		return m.TeamA
	}
	return nil
}

func (m *TableESPortsLOLRealTimeData) GetTeamB() *ApiLOLTeam {
	if m != nil {
		return m.TeamB
	}
	return nil
}

func (m *TableESPortsLOLRealTimeData) GetPlayerAInfo() []*ApiLOLPlayer {
	if m != nil {
		return m.PlayerAInfo
	}
	return nil
}

func (m *TableESPortsLOLRealTimeData) GetPlayerBInfo() []*ApiLOLPlayer {
	if m != nil {
		return m.PlayerBInfo
	}
	return nil
}

func (m *TableESPortsLOLRealTimeData) GetFirstTower() int32 {
	if m != nil && m.FirstTower != nil {
		return *m.FirstTower
	}
	return 0
}

func (m *TableESPortsLOLRealTimeData) GetFirstSmallDragon() int32 {
	if m != nil && m.FirstSmallDragon != nil {
		return *m.FirstSmallDragon
	}
	return 0
}

func (m *TableESPortsLOLRealTimeData) GetFirstFiveKill() int32 {
	if m != nil && m.FirstFiveKill != nil {
		return *m.FirstFiveKill
	}
	return 0
}

func (m *TableESPortsLOLRealTimeData) GetFirstBigDragon() int32 {
	if m != nil && m.FirstBigDragon != nil {
		return *m.FirstBigDragon
	}
	return 0
}

func (m *TableESPortsLOLRealTimeData) GetFirstTenKill() int32 {
	if m != nil && m.FirstTenKill != nil {
		return *m.FirstTenKill
	}
	return 0
}

func (m *TableESPortsLOLRealTimeData) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TableESPortsLOLRealTimeData) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

//API战队信息结构(LOL实时数据表用)
type ApiLOLTeam struct {
	//战队类型(blue,red)(api字段)
	Faction *string `protobuf:"bytes,1,opt,name=faction" json:"faction,omitempty" bson:"faction,omitempty"`
	//选取的英雄(选取的英雄 id)(api字段)
	Picks []int32 `protobuf:"varint,2,rep,name=picks" json:"picks,omitempty" bson:"picks,omitempty"`
	//禁用的英雄(禁用的英雄 id)(api字段)
	Bans []int32 `protobuf:"varint,3,rep,name=bans" json:"bans,omitempty" bson:"bans,omitempty"`
	//战队 a 名称(api字段)
	Name *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty" bson:"name,omitempty"`
	//战队 id(api字段)
	Id *int32 `protobuf:"varint,5,opt,name=id" json:"id,omitempty" bson:"id,omitempty"`
	//人头(api字段)
	Score *int32 `protobuf:"varint,6,opt,name=score" json:"score,omitempty" bson:"score,omitempty"`
	//当前总经济(api字段)
	Glod *int32 `protobuf:"varint,7,opt,name=glod" json:"glod,omitempty" bson:"glod,omitempty"`
	//补刀数(api字段)
	Subsidy *int32 `protobuf:"varint,8,opt,name=subsidy" json:"subsidy,omitempty" bson:"subsidy,omitempty"`
	//塔状态:推掉对方塔数(api字段)
	TowerState *int32 `protobuf:"varint,9,opt,name=tower_state" json:"tower_state,omitempty" bson:"tower_state,omitempty"`
	//击杀小龙数(api字段)
	Drakes *int32 `protobuf:"varint,10,opt,name=drakes" json:"drakes,omitempty" bson:"drakes,omitempty"`
	//击杀大龙数(api字段)
	NahsorBarons *int32 `protobuf:"varint,11,opt,name=nahsor_barons" json:"nahsor_barons,omitempty" bson:"nahsor_barons,omitempty"`
	//经济曲线数据(扩展字段)
	GoldTimeData         []*GoldTimeData `protobuf:"bytes,12,rep,name=gold_time_data" json:"gold_time_data,omitempty" bson:"gold_time_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-" bson:"-"`
	XXX_unrecognized     []byte          `json:"-" bson:"-"`
	XXX_sizecache        int32           `json:"-" bson:"-"`
}

func (m *ApiLOLTeam) Reset()         { *m = ApiLOLTeam{} }
func (m *ApiLOLTeam) String() string { return proto.CompactTextString(m) }
func (*ApiLOLTeam) ProtoMessage()    {}
func (*ApiLOLTeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{26}
}
func (m *ApiLOLTeam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiLOLTeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiLOLTeam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiLOLTeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiLOLTeam.Merge(m, src)
}
func (m *ApiLOLTeam) XXX_Size() int {
	return m.Size()
}
func (m *ApiLOLTeam) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiLOLTeam.DiscardUnknown(m)
}

var xxx_messageInfo_ApiLOLTeam proto.InternalMessageInfo

func (m *ApiLOLTeam) GetFaction() string {
	if m != nil && m.Faction != nil {
		return *m.Faction
	}
	return ""
}

func (m *ApiLOLTeam) GetPicks() []int32 {
	if m != nil {
		return m.Picks
	}
	return nil
}

func (m *ApiLOLTeam) GetBans() []int32 {
	if m != nil {
		return m.Bans
	}
	return nil
}

func (m *ApiLOLTeam) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ApiLOLTeam) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ApiLOLTeam) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *ApiLOLTeam) GetGlod() int32 {
	if m != nil && m.Glod != nil {
		return *m.Glod
	}
	return 0
}

func (m *ApiLOLTeam) GetSubsidy() int32 {
	if m != nil && m.Subsidy != nil {
		return *m.Subsidy
	}
	return 0
}

func (m *ApiLOLTeam) GetTowerState() int32 {
	if m != nil && m.TowerState != nil {
		return *m.TowerState
	}
	return 0
}

func (m *ApiLOLTeam) GetDrakes() int32 {
	if m != nil && m.Drakes != nil {
		return *m.Drakes
	}
	return 0
}

func (m *ApiLOLTeam) GetNahsorBarons() int32 {
	if m != nil && m.NahsorBarons != nil {
		return *m.NahsorBarons
	}
	return 0
}

func (m *ApiLOLTeam) GetGoldTimeData() []*GoldTimeData {
	if m != nil {
		return m.GoldTimeData
	}
	return nil
}

//API队员信息结构(LOL实时数据表用)
type ApiLOLPlayer struct {
	//队员名称(api字段)
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty" bson:"name,omitempty"`
	//队员使用英雄 id(api字段)
	HeroId *int32 `protobuf:"varint,2,opt,name=hero_id" json:"hero_id,omitempty" bson:"hero_id,omitempty"`
	//队员战术位置:top、 mid、sup、jun、adc(api字段)
	PlayerPart *int32 `protobuf:"varint,3,opt,name=player_part" json:"player_part,omitempty" bson:"player_part,omitempty"`
	//击杀(api字段)
	Kills *int32 `protobuf:"varint,4,opt,name=kills" json:"kills,omitempty" bson:"kills,omitempty"`
	//死亡(api字段)
	Death *int32 `protobuf:"varint,5,opt,name=death" json:"death,omitempty" bson:"death,omitempty"`
	//助攻(api字段)
	Assists *int32 `protobuf:"varint,6,opt,name=assists" json:"assists,omitempty" bson:"assists,omitempty"`
	//正补数(api字段)
	Subsidy *int32 `protobuf:"varint,7,opt,name=subsidy" json:"subsidy,omitempty" bson:"subsidy,omitempty"`
	//剩余金钱(api字段)
	Gold *int32 `protobuf:"varint,8,opt,name=gold" json:"gold,omitempty" bson:"gold,omitempty"`
	//等级(api字段)
	Level *int32 `protobuf:"varint,9,opt,name=level" json:"level,omitempty" bson:"level,omitempty"`
	//装备栏道具 id(api字段)
	Item []int32 `protobuf:"varint,10,rep,name=item" json:"item,omitempty" bson:"item,omitempty"`
	//召唤师技能(api字段)
	SummonerSpells []int32 `protobuf:"varint,11,rep,name=summoner_spells" json:"summoner_spells,omitempty" bson:"summoner_spells,omitempty"`
	//承受伤害(api字段)
	DamageTaken *int32 `protobuf:"varint,12,opt,name=damage_taken" json:"damage_taken,omitempty" bson:"damage_taken,omitempty"`
	//造成伤害(api字段)
	Damage *int32 `protobuf:"varint,13,opt,name=damage" json:"damage,omitempty" bson:"damage,omitempty"`
	//治疗(api字段)
	Heal *int32 `protobuf:"varint,14,opt,name=heal" json:"heal,omitempty" bson:"heal,omitempty"`
	//(api字段)
	Hp *int32 `protobuf:"varint,15,opt,name=hp" json:"hp,omitempty" bson:"hp,omitempty"`
	//队员照片(扩展字段、程序自动匹配比赛详情中的玩家照片、没有的后台上传)
	Photo                *string  `protobuf:"bytes,16,opt,name=photo" json:"photo,omitempty" bson:"photo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ApiLOLPlayer) Reset()         { *m = ApiLOLPlayer{} }
func (m *ApiLOLPlayer) String() string { return proto.CompactTextString(m) }
func (*ApiLOLPlayer) ProtoMessage()    {}
func (*ApiLOLPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{27}
}
func (m *ApiLOLPlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiLOLPlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiLOLPlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiLOLPlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiLOLPlayer.Merge(m, src)
}
func (m *ApiLOLPlayer) XXX_Size() int {
	return m.Size()
}
func (m *ApiLOLPlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiLOLPlayer.DiscardUnknown(m)
}

var xxx_messageInfo_ApiLOLPlayer proto.InternalMessageInfo

func (m *ApiLOLPlayer) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ApiLOLPlayer) GetHeroId() int32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *ApiLOLPlayer) GetPlayerPart() int32 {
	if m != nil && m.PlayerPart != nil {
		return *m.PlayerPart
	}
	return 0
}

func (m *ApiLOLPlayer) GetKills() int32 {
	if m != nil && m.Kills != nil {
		return *m.Kills
	}
	return 0
}

func (m *ApiLOLPlayer) GetDeath() int32 {
	if m != nil && m.Death != nil {
		return *m.Death
	}
	return 0
}

func (m *ApiLOLPlayer) GetAssists() int32 {
	if m != nil && m.Assists != nil {
		return *m.Assists
	}
	return 0
}

func (m *ApiLOLPlayer) GetSubsidy() int32 {
	if m != nil && m.Subsidy != nil {
		return *m.Subsidy
	}
	return 0
}

func (m *ApiLOLPlayer) GetGold() int32 {
	if m != nil && m.Gold != nil {
		return *m.Gold
	}
	return 0
}

func (m *ApiLOLPlayer) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *ApiLOLPlayer) GetItem() []int32 {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *ApiLOLPlayer) GetSummonerSpells() []int32 {
	if m != nil {
		return m.SummonerSpells
	}
	return nil
}

func (m *ApiLOLPlayer) GetDamageTaken() int32 {
	if m != nil && m.DamageTaken != nil {
		return *m.DamageTaken
	}
	return 0
}

func (m *ApiLOLPlayer) GetDamage() int32 {
	if m != nil && m.Damage != nil {
		return *m.Damage
	}
	return 0
}

func (m *ApiLOLPlayer) GetHeal() int32 {
	if m != nil && m.Heal != nil {
		return *m.Heal
	}
	return 0
}

func (m *ApiLOLPlayer) GetHp() int32 {
	if m != nil && m.Hp != nil {
		return *m.Hp
	}
	return 0
}

func (m *ApiLOLPlayer) GetPhoto() string {
	if m != nil && m.Photo != nil {
		return *m.Photo
	}
	return ""
}

//API=======WZRY游戏实时数据
type TableESPortsWZRYRealTimeData struct {
	//唯一自增ID (game_id,api_origin,game_round的组合)
	Id *int64 `protobuf:"varint,1,req,name=id" json:"_id,omitempty" bson:"_id,omitempty"`
	//(扩展字段、为了存redis)对应本项目的标签id 10001:王者荣耀,10002:dota2,10003:英雄联盟,10004:CSGO
	AppLabelId *int32 `protobuf:"varint,2,opt,name=app_label_id" json:"app_label_id,omitempty" bson:"app_label_id,omitempty"`
	//(扩展字段)对应本项目的标签id 10001:王者荣耀,10002:dota2,10003:英雄联盟,10004:CSGO
	AppLabelName *string `protobuf:"bytes,3,opt,name=app_label_name" json:"app_label_name,omitempty" bson:"app_label_name,omitempty"`
	//api接口来源 90001:野子科技
	ApiOrigin *int32 `protobuf:"varint,4,opt,name=api_origin" json:"api_origin,omitempty" bson:"api_origin,omitempty"`
	//api接口来源名称 90001:野子科技
	ApiOriginName *string `protobuf:"bytes,5,opt,name=api_origin_name" json:"api_origin_name,omitempty" bson:"api_origin_name,omitempty"`
	//比赛 id(api字段)
	GameId *int32 `protobuf:"varint,6,opt,name=game_id" json:"game_id,omitempty" bson:"game_id,omitempty"`
	//当前局数(api字段)
	GameRound *int32 `protobuf:"varint,7,opt,name=game_round" json:"game_round,omitempty" bson:"game_round,omitempty"`
	//比赛状态(当前局数的比赛状态:1:进行中 2:已结束) (api字段)
	GameStatus *int32 `protobuf:"varint,8,opt,name=game_status" json:"game_status,omitempty" bson:"game_status,omitempty"`
	//项目 id(api字段)
	EventId *string `protobuf:"bytes,9,opt,name=event_id" json:"event_id,omitempty" bson:"event_id,omitempty"`
	//持续时间:单位秒(api字段)
	Duration *int32 `protobuf:"varint,10,opt,name=duration" json:"duration,omitempty" bson:"duration,omitempty"`
	//当局胜者:team_a | team_b(api字段)
	Winner *string `protobuf:"bytes,11,opt,name=winner" json:"winner,omitempty" bson:"winner,omitempty"`
	//战队 a 信息(api字段)
	TeamA *ApiWZRYTeam `protobuf:"bytes,12,opt,name=team_a" json:"team_a,omitempty" bson:"team_a,omitempty"`
	//战队 b 信息(api字段)
	TeamB *ApiWZRYTeam `protobuf:"bytes,13,opt,name=team_b" json:"team_b,omitempty" bson:"team_b,omitempty"`
	//战队 a队员信息(api字段)
	PlayerAInfo []*ApiWZRYPlayer `protobuf:"bytes,14,rep,name=player_a_info" json:"player_a_info,omitempty" bson:"player_a_info,omitempty"`
	//战队 b队员信息(api字段)
	PlayerBInfo []*ApiWZRYPlayer `protobuf:"bytes,15,rep,name=player_b_info" json:"player_b_info,omitempty" bson:"player_b_info,omitempty"`
	//(扩展字段)一塔 0:无、1:A队一塔 2:B队一塔
	FirstTower *int32 `protobuf:"varint,16,opt,name=first_tower" json:"first_tower,omitempty" bson:"first_tower,omitempty"`
	//(扩展字段)一小龙  0:无、1:A队一小龙 2:B队一小龙
	FirstSmallDragon *int32 `protobuf:"varint,17,opt,name=first_small_dragon" json:"first_small_dragon,omitempty" bson:"first_small_dragon,omitempty"`
	//(扩展字段)先五杀  0:无、1:A队先五杀 2:B队先五杀
	FirstFiveKill *int32 `protobuf:"varint,18,opt,name=first_five_kill" json:"first_five_kill,omitempty" bson:"first_five_kill,omitempty"`
	//(扩展字段)一大龙  0:无、1:A队一大龙 2:B队一大龙
	FirstBigDragon *int32 `protobuf:"varint,19,opt,name=first_big_dragon" json:"first_big_dragon,omitempty" bson:"first_big_dragon,omitempty"`
	//(扩展字段)先十杀  0:无、1:A队先十杀 2:B队先十杀
	FirstTenKill *int32 `protobuf:"varint,20,opt,name=first_ten_kill" json:"first_ten_kill,omitempty" bson:"first_ten_kill,omitempty"`
	//(扩展字段)创建时间
	CreateTime *int64 `protobuf:"varint,21,opt,name=create_time" json:"create_time,omitempty" bson:"create_time,omitempty"`
	//(扩展字段)更新时间
	UpdateTime           *int64   `protobuf:"varint,22,opt,name=update_time" json:"update_time,omitempty" bson:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TableESPortsWZRYRealTimeData) Reset()         { *m = TableESPortsWZRYRealTimeData{} }
func (m *TableESPortsWZRYRealTimeData) String() string { return proto.CompactTextString(m) }
func (*TableESPortsWZRYRealTimeData) ProtoMessage()    {}
func (*TableESPortsWZRYRealTimeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{28}
}
func (m *TableESPortsWZRYRealTimeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableESPortsWZRYRealTimeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableESPortsWZRYRealTimeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableESPortsWZRYRealTimeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableESPortsWZRYRealTimeData.Merge(m, src)
}
func (m *TableESPortsWZRYRealTimeData) XXX_Size() int {
	return m.Size()
}
func (m *TableESPortsWZRYRealTimeData) XXX_DiscardUnknown() {
	xxx_messageInfo_TableESPortsWZRYRealTimeData.DiscardUnknown(m)
}

var xxx_messageInfo_TableESPortsWZRYRealTimeData proto.InternalMessageInfo

func (m *TableESPortsWZRYRealTimeData) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TableESPortsWZRYRealTimeData) GetAppLabelId() int32 {
	if m != nil && m.AppLabelId != nil {
		return *m.AppLabelId
	}
	return 0
}

func (m *TableESPortsWZRYRealTimeData) GetAppLabelName() string {
	if m != nil && m.AppLabelName != nil {
		return *m.AppLabelName
	}
	return ""
}

func (m *TableESPortsWZRYRealTimeData) GetApiOrigin() int32 {
	if m != nil && m.ApiOrigin != nil {
		return *m.ApiOrigin
	}
	return 0
}

func (m *TableESPortsWZRYRealTimeData) GetApiOriginName() string {
	if m != nil && m.ApiOriginName != nil {
		return *m.ApiOriginName
	}
	return ""
}

func (m *TableESPortsWZRYRealTimeData) GetGameId() int32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *TableESPortsWZRYRealTimeData) GetGameRound() int32 {
	if m != nil && m.GameRound != nil {
		return *m.GameRound
	}
	return 0
}

func (m *TableESPortsWZRYRealTimeData) GetGameStatus() int32 {
	if m != nil && m.GameStatus != nil {
		return *m.GameStatus
	}
	return 0
}

func (m *TableESPortsWZRYRealTimeData) GetEventId() string {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return ""
}

func (m *TableESPortsWZRYRealTimeData) GetDuration() int32 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

func (m *TableESPortsWZRYRealTimeData) GetWinner() string {
	if m != nil && m.Winner != nil {
		return *m.Winner
	}
	return ""
}

func (m *TableESPortsWZRYRealTimeData) GetTeamA() *ApiWZRYTeam {
	if m != nil {
		return m.TeamA
	}
	return nil
}

func (m *TableESPortsWZRYRealTimeData) GetTeamB() *ApiWZRYTeam {
	if m != nil {
		return m.TeamB
	}
	return nil
}

func (m *TableESPortsWZRYRealTimeData) GetPlayerAInfo() []*ApiWZRYPlayer {
	if m != nil {
		return m.PlayerAInfo
	}
	return nil
}

func (m *TableESPortsWZRYRealTimeData) GetPlayerBInfo() []*ApiWZRYPlayer {
	if m != nil {
		return m.PlayerBInfo
	}
	return nil
}

func (m *TableESPortsWZRYRealTimeData) GetFirstTower() int32 {
	if m != nil && m.FirstTower != nil {
		return *m.FirstTower
	}
	return 0
}

func (m *TableESPortsWZRYRealTimeData) GetFirstSmallDragon() int32 {
	if m != nil && m.FirstSmallDragon != nil {
		return *m.FirstSmallDragon
	}
	return 0
}

func (m *TableESPortsWZRYRealTimeData) GetFirstFiveKill() int32 {
	if m != nil && m.FirstFiveKill != nil {
		return *m.FirstFiveKill
	}
	return 0
}

func (m *TableESPortsWZRYRealTimeData) GetFirstBigDragon() int32 {
	if m != nil && m.FirstBigDragon != nil {
		return *m.FirstBigDragon
	}
	return 0
}

func (m *TableESPortsWZRYRealTimeData) GetFirstTenKill() int32 {
	if m != nil && m.FirstTenKill != nil {
		return *m.FirstTenKill
	}
	return 0
}

func (m *TableESPortsWZRYRealTimeData) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TableESPortsWZRYRealTimeData) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

//API战队信息结构(WZRY实时数据表用)
type ApiWZRYTeam struct {
	//战队类型(blue,red)(api字段)
	Faction *string `protobuf:"bytes,1,opt,name=faction" json:"faction,omitempty" bson:"faction,omitempty"`
	//是否主场(true:主,false:客)(api字段)
	IsHome *bool `protobuf:"varint,2,opt,name=is_home" json:"is_home,omitempty" bson:"is_home,omitempty"`
	//选取的英雄(选取的英雄 id)(api字段)
	Picks []int32 `protobuf:"varint,3,rep,name=picks" json:"picks,omitempty" bson:"picks,omitempty"`
	//禁用的英雄(禁用的英雄 id)(api字段)
	Bans []int32 `protobuf:"varint,4,rep,name=bans" json:"bans,omitempty" bson:"bans,omitempty"`
	//战队 a 名称(api字段)
	Name *string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty" bson:"name,omitempty"`
	//战队 id(api字段)
	Id *int32 `protobuf:"varint,6,opt,name=id" json:"id,omitempty" bson:"id,omitempty"`
	//人头(api字段)
	Score *int32 `protobuf:"varint,7,opt,name=score" json:"score,omitempty" bson:"score,omitempty"`
	//塔状态:推掉对方塔数(api字段)
	TowerState *int32 `protobuf:"varint,8,opt,name=tower_state" json:"tower_state,omitempty" bson:"tower_state,omitempty"`
	//击杀小龙数(扩展字段、跟LOL一致、后台可修改)
	Drakes *int32 `protobuf:"varint,9,opt,name=drakes" json:"drakes,omitempty" bson:"drakes,omitempty"`
	//击杀大龙数(扩展字段、跟LOL一致、后台可修改)
	NahsorBarons *int32 `protobuf:"varint,10,opt,name=nahsor_barons" json:"nahsor_barons,omitempty" bson:"nahsor_barons,omitempty"`
	//当前总经济(扩展字段、跟LOL一致、不可修改、需将队员经济累加后设置)
	Glod *int32 `protobuf:"varint,11,opt,name=glod" json:"glod,omitempty" bson:"glod,omitempty"`
	//经济曲线数据(扩展字段)
	GoldTimeData         []*GoldTimeData `protobuf:"bytes,12,rep,name=gold_time_data" json:"gold_time_data,omitempty" bson:"gold_time_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-" bson:"-"`
	XXX_unrecognized     []byte          `json:"-" bson:"-"`
	XXX_sizecache        int32           `json:"-" bson:"-"`
}

func (m *ApiWZRYTeam) Reset()         { *m = ApiWZRYTeam{} }
func (m *ApiWZRYTeam) String() string { return proto.CompactTextString(m) }
func (*ApiWZRYTeam) ProtoMessage()    {}
func (*ApiWZRYTeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{29}
}
func (m *ApiWZRYTeam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiWZRYTeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiWZRYTeam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiWZRYTeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiWZRYTeam.Merge(m, src)
}
func (m *ApiWZRYTeam) XXX_Size() int {
	return m.Size()
}
func (m *ApiWZRYTeam) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiWZRYTeam.DiscardUnknown(m)
}

var xxx_messageInfo_ApiWZRYTeam proto.InternalMessageInfo

func (m *ApiWZRYTeam) GetFaction() string {
	if m != nil && m.Faction != nil {
		return *m.Faction
	}
	return ""
}

func (m *ApiWZRYTeam) GetIsHome() bool {
	if m != nil && m.IsHome != nil {
		return *m.IsHome
	}
	return false
}

func (m *ApiWZRYTeam) GetPicks() []int32 {
	if m != nil {
		return m.Picks
	}
	return nil
}

func (m *ApiWZRYTeam) GetBans() []int32 {
	if m != nil {
		return m.Bans
	}
	return nil
}

func (m *ApiWZRYTeam) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ApiWZRYTeam) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ApiWZRYTeam) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *ApiWZRYTeam) GetTowerState() int32 {
	if m != nil && m.TowerState != nil {
		return *m.TowerState
	}
	return 0
}

func (m *ApiWZRYTeam) GetDrakes() int32 {
	if m != nil && m.Drakes != nil {
		return *m.Drakes
	}
	return 0
}

func (m *ApiWZRYTeam) GetNahsorBarons() int32 {
	if m != nil && m.NahsorBarons != nil {
		return *m.NahsorBarons
	}
	return 0
}

func (m *ApiWZRYTeam) GetGlod() int32 {
	if m != nil && m.Glod != nil {
		return *m.Glod
	}
	return 0
}

func (m *ApiWZRYTeam) GetGoldTimeData() []*GoldTimeData {
	if m != nil {
		return m.GoldTimeData
	}
	return nil
}

//API队员信息结构(WZRY实时数据表用)
type ApiWZRYPlayer struct {
	//队员名称(api字段)
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty" bson:"name,omitempty"`
	//队员使用英雄 id(api字段)
	HeroId *int32 `protobuf:"varint,2,opt,name=hero_id" json:"hero_id,omitempty" bson:"hero_id,omitempty"`
	//击杀(api字段)
	Kills *int32 `protobuf:"varint,4,opt,name=kills" json:"kills,omitempty" bson:"kills,omitempty"`
	//死亡(api字段)
	Death *int32 `protobuf:"varint,5,opt,name=death" json:"death,omitempty" bson:"death,omitempty"`
	//助攻(api字段)
	Assists *int32 `protobuf:"varint,6,opt,name=assists" json:"assists,omitempty" bson:"assists,omitempty"`
	//经济(api字段)
	Gold *int32 `protobuf:"varint,7,opt,name=gold" json:"gold,omitempty" bson:"gold,omitempty"`
	//队员当前 x 坐标(api字段)
	Px *int32 `protobuf:"varint,8,opt,name=px" json:"px,omitempty" bson:"px,omitempty"`
	//队员当前 y 坐标(api字段)
	Py *int32 `protobuf:"varint,9,opt,name=py" json:"py,omitempty" bson:"py,omitempty"`
	//复活时间:秒(api字段)
	RespawnTime *int32 `protobuf:"varint,10,opt,name=respawn_time" json:"respawn_time,omitempty" bson:"respawn_time,omitempty"`
	//装备栏道具 id(api字段)
	Item []int32 `protobuf:"varint,11,rep,name=item" json:"item,omitempty" bson:"item,omitempty"`
	//队员照片(扩展字段、程序自动匹配比赛详情中的玩家照片、没有的后台上传)
	Photo                *string  `protobuf:"bytes,12,opt,name=photo" json:"photo,omitempty" bson:"photo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ApiWZRYPlayer) Reset()         { *m = ApiWZRYPlayer{} }
func (m *ApiWZRYPlayer) String() string { return proto.CompactTextString(m) }
func (*ApiWZRYPlayer) ProtoMessage()    {}
func (*ApiWZRYPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{30}
}
func (m *ApiWZRYPlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiWZRYPlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiWZRYPlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiWZRYPlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiWZRYPlayer.Merge(m, src)
}
func (m *ApiWZRYPlayer) XXX_Size() int {
	return m.Size()
}
func (m *ApiWZRYPlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiWZRYPlayer.DiscardUnknown(m)
}

var xxx_messageInfo_ApiWZRYPlayer proto.InternalMessageInfo

func (m *ApiWZRYPlayer) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ApiWZRYPlayer) GetHeroId() int32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *ApiWZRYPlayer) GetKills() int32 {
	if m != nil && m.Kills != nil {
		return *m.Kills
	}
	return 0
}

func (m *ApiWZRYPlayer) GetDeath() int32 {
	if m != nil && m.Death != nil {
		return *m.Death
	}
	return 0
}

func (m *ApiWZRYPlayer) GetAssists() int32 {
	if m != nil && m.Assists != nil {
		return *m.Assists
	}
	return 0
}

func (m *ApiWZRYPlayer) GetGold() int32 {
	if m != nil && m.Gold != nil {
		return *m.Gold
	}
	return 0
}

func (m *ApiWZRYPlayer) GetPx() int32 {
	if m != nil && m.Px != nil {
		return *m.Px
	}
	return 0
}

func (m *ApiWZRYPlayer) GetPy() int32 {
	if m != nil && m.Py != nil {
		return *m.Py
	}
	return 0
}

func (m *ApiWZRYPlayer) GetRespawnTime() int32 {
	if m != nil && m.RespawnTime != nil {
		return *m.RespawnTime
	}
	return 0
}

func (m *ApiWZRYPlayer) GetItem() []int32 {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *ApiWZRYPlayer) GetPhoto() string {
	if m != nil && m.Photo != nil {
		return *m.Photo
	}
	return ""
}

//LOL、WZRY经济曲线对象(记录离比赛开始时间的经济数据、每一分钟记录一次)
type GoldTimeData struct {
	//离比赛时间的距离(秒)
	GameTimeDistance *int32 `protobuf:"varint,1,opt,name=game_time_distance" json:"game_time_distance,omitempty" bson:"game_time_distance,omitempty"`
	//该时间点的队伍经济
	Gold                 *int32   `protobuf:"varint,2,opt,name=gold" json:"gold,omitempty" bson:"gold,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GoldTimeData) Reset()         { *m = GoldTimeData{} }
func (m *GoldTimeData) String() string { return proto.CompactTextString(m) }
func (*GoldTimeData) ProtoMessage()    {}
func (*GoldTimeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158ab26b248a9ac, []int{31}
}
func (m *GoldTimeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoldTimeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoldTimeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoldTimeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoldTimeData.Merge(m, src)
}
func (m *GoldTimeData) XXX_Size() int {
	return m.Size()
}
func (m *GoldTimeData) XXX_DiscardUnknown() {
	xxx_messageInfo_GoldTimeData.DiscardUnknown(m)
}

var xxx_messageInfo_GoldTimeData proto.InternalMessageInfo

func (m *GoldTimeData) GetGameTimeDistance() int32 {
	if m != nil && m.GameTimeDistance != nil {
		return *m.GameTimeDistance
	}
	return 0
}

func (m *GoldTimeData) GetGold() int32 {
	if m != nil && m.Gold != nil {
		return *m.Gold
	}
	return 0
}

func init() {
	proto.RegisterType((*TableESPortsGame)(nil), "share_message.TableESPortsGame")
	proto.RegisterType((*ApiPlayer)(nil), "share_message.ApiPlayer")
	proto.RegisterType((*ApiTeam)(nil), "share_message.ApiTeam")
	proto.RegisterType((*TableESPortsGameDetail)(nil), "share_message.TableESPortsGameDetail")
	proto.RegisterType((*APITeamInfo)(nil), "share_message.APITeamInfo")
	proto.RegisterType((*APIMatch)(nil), "share_message.APIMatch")
	proto.RegisterType((*APIPlayerDetail)(nil), "share_message.APIPlayerDetail")
	proto.RegisterType((*APILiveURL)(nil), "share_message.APILiveURL")
	proto.RegisterType((*APIScore)(nil), "share_message.APIScore")
	proto.RegisterType((*APIVideoURL)(nil), "share_message.APIVideoURL")
	proto.RegisterType((*APIWinPBObject)(nil), "share_message.APIWinPBObject")
	proto.RegisterType((*APIWinPB)(nil), "share_message.APIWinPB")
	proto.RegisterType((*TableESPortsTeamBout)(nil), "share_message.TableESPortsTeamBout")
	proto.RegisterType((*APITeamBoutObject)(nil), "share_message.APITeamBoutObject")
	proto.RegisterType((*APITeamBoutHis)(nil), "share_message.APITeamBoutHis")
	proto.RegisterType((*APITeamWinFaiObject)(nil), "share_message.APITeamWinFaiObject")
	proto.RegisterType((*APITeamNatResObject)(nil), "share_message.APITeamNatResObject")
	proto.RegisterType((*TableESPortsGameGuess)(nil), "share_message.TableESPortsGameGuess")
	proto.RegisterType((*ApiGuessObject)(nil), "share_message.ApiGuessObject")
	proto.RegisterType((*ApiItemObject)(nil), "share_message.ApiItemObject")
	proto.RegisterType((*TableESPortsUseRollGuess)(nil), "share_message.TableESPortsUseRollGuess")
	proto.RegisterType((*ESPortsGameLivePathObj)(nil), "share_message.ESPortsGameLivePathObj")
	proto.RegisterType((*TableESPortsDOTARealTimeData)(nil), "share_message.TableESPortsDOTARealTimeData")
	proto.RegisterType((*ApiDOTATeam)(nil), "share_message.ApiDOTATeam")
	proto.RegisterType((*ApiDOTAPlayer)(nil), "share_message.ApiDOTAPlayer")
	proto.RegisterType((*TableESPortsLOLRealTimeData)(nil), "share_message.TableESPortsLOLRealTimeData")
	proto.RegisterType((*ApiLOLTeam)(nil), "share_message.ApiLOLTeam")
	proto.RegisterType((*ApiLOLPlayer)(nil), "share_message.ApiLOLPlayer")
	proto.RegisterType((*TableESPortsWZRYRealTimeData)(nil), "share_message.TableESPortsWZRYRealTimeData")
	proto.RegisterType((*ApiWZRYTeam)(nil), "share_message.ApiWZRYTeam")
	proto.RegisterType((*ApiWZRYPlayer)(nil), "share_message.ApiWZRYPlayer")
	proto.RegisterType((*GoldTimeData)(nil), "share_message.GoldTimeData")
}

func init() { proto.RegisterFile("table_struct_e-sports_api.proto", fileDescriptor_0158ab26b248a9ac) }

var fileDescriptor_0158ab26b248a9ac = []byte{
	// 2623 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x9a, 0x5b, 0x8f, 0x1c, 0x47,
	0x15, 0x80, 0xd5, 0x73, 0xd9, 0x99, 0x39, 0x73, 0xdb, 0x9d, 0xbd, 0x75, 0x6c, 0xc7, 0xde, 0x74,
	0x48, 0xb2, 0x71, 0x6c, 0xc7, 0x59, 0x27, 0x52, 0x08, 0x4f, 0xb1, 0x02, 0x4e, 0xd0, 0x82, 0x2d,
	0xc7, 0x4e, 0x04, 0x2f, 0xad, 0xea, 0xe9, 0xda, 0x99, 0x8a, 0xfb, 0xa6, 0xae, 0xea, 0xd9, 0xec,
	0xbf, 0x40, 0x48, 0x3c, 0x21, 0xe0, 0x3f, 0xf0, 0xc0, 0x6f, 0xe0, 0x01, 0x09, 0x9e, 0x79, 0x40,
	0x28, 0x6f, 0x20, 0xc1, 0x03, 0xf0, 0x03, 0x50, 0x9d, 0xaa, 0xea, 0xdb, 0xf4, 0x7a, 0x37, 0x42,
	0x72, 0x40, 0xbc, 0x6d, 0x9f, 0xae, 0xd3, 0x55, 0xe7, 0xf6, 0xd5, 0xa9, 0x9a, 0x85, 0x1b, 0x82,
	0x78, 0x01, 0x75, 0xb9, 0x48, 0xb3, 0xb9, 0x70, 0xe9, 0x6d, 0x9e, 0xc4, 0xa9, 0xe0, 0x2e, 0x49,
	0xd8, 0x9d, 0x24, 0x8d, 0x45, 0x3c, 0x1b, 0xf3, 0x25, 0x49, 0xa9, 0x1b, 0x52, 0xce, 0xc9, 0x82,
	0x5e, 0x19, 0x2d, 0x16, 0xb1, 0x20, 0x0b, 0xf5, 0xd2, 0xf9, 0x45, 0x0f, 0x36, 0x9f, 0xc8, 0x0f,
	0x7c, 0xf7, 0xd3, 0x47, 0x52, 0xef, 0x01, 0x09, 0xe9, 0xec, 0x65, 0x68, 0x31, 0xdf, 0xb6, 0x0e,
	0x5a, 0x87, 0xed, 0xfb, 0x5b, 0x7f, 0xfd, 0xd3, 0x8d, 0xb1, 0xcb, 0xfc, 0x5b, 0x71, 0xc8, 0x04,
	0x0d, 0x13, 0x71, 0x36, 0xdb, 0x81, 0x11, 0x49, 0x12, 0x37, 0x20, 0x1e, 0x0d, 0x5c, 0xe6, 0xdb,
	0xad, 0x03, 0xeb, 0xb0, 0x3b, 0xdb, 0x83, 0x49, 0x21, 0x8d, 0x48, 0x48, 0xed, 0xf6, 0x81, 0x75,
	0x38, 0x98, 0xcd, 0x00, 0x48, 0xc2, 0xdc, 0x38, 0x65, 0x0b, 0x16, 0xd9, 0x1d, 0x1c, 0xbb, 0x0f,
	0xd3, 0x42, 0xa6, 0x06, 0x77, 0x71, 0xf0, 0x0e, 0x8c, 0x52, 0x1a, 0x50, 0xc2, 0xa9, 0x7b, 0x12,
	0x90, 0x85, 0xbd, 0x81, 0xc3, 0xb7, 0x60, 0xe0, 0xb3, 0x90, 0x46, 0x9c, 0xc5, 0x91, 0xdd, 0x33,
	0x5f, 0x3d, 0x61, 0x8b, 0xa5, 0x50, 0xca, 0x7d, 0x23, 0xa3, 0x2b, 0x1a, 0x69, 0xd9, 0x00, 0x65,
	0xbb, 0x30, 0x2e, 0x64, 0x2e, 0x8d, 0x6c, 0x40, 0xf1, 0x26, 0xf4, 0x95, 0x98, 0xf9, 0xf6, 0x10,
	0x25, 0xdb, 0x30, 0x0c, 0x89, 0x98, 0x2f, 0x5d, 0x2e, 0xc8, 0x82, 0xda, 0x23, 0x14, 0xee, 0xc1,
	0xa4, 0x24, 0x94, 0x83, 0xc7, 0x66, 0x26, 0x25, 0xc7, 0x99, 0x26, 0x66, 0xa6, 0x42, 0x26, 0x67,
	0x9a, 0x9a, 0x99, 0x94, 0x98, 0xf9, 0xf6, 0x26, 0x4a, 0xb6, 0x60, 0xb0, 0x90, 0x43, 0xc4, 0x59,
	0x42, 0xed, 0x2d, 0x14, 0x4d, 0xa1, 0xc7, 0xe7, 0x71, 0x4a, 0x5d, 0x62, 0xcf, 0xaa, 0x02, 0xcf,
	0xde, 0x36, 0x02, 0xc6, 0xdd, 0x80, 0xad, 0xa8, 0xbd, 0x83, 0x3e, 0x01, 0x68, 0x79, 0xb1, 0xbd,
	0x6b, 0xe6, 0x58, 0xc6, 0xc2, 0x95, 0x5f, 0xb5, 0xf7, 0x50, 0x32, 0x81, 0x0d, 0xc6, 0x5d, 0x8f,
	0x0a, 0x7b, 0x1f, 0x47, 0xcf, 0x00, 0x3c, 0x2a, 0x7d, 0x2d, 0x58, 0x48, 0x6d, 0xdb, 0x7c, 0x12,
	0xd7, 0xc1, 0x7c, 0xfb, 0x25, 0xe3, 0x02, 0x14, 0x70, 0x41, 0x44, 0xc6, 0xed, 0x2b, 0x28, 0xb4,
	0x61, 0xb3, 0x24, 0x54, 0x8b, 0xbe, 0x6a, 0xec, 0x58, 0x92, 0x15, 0x55, 0x8b, 0xba, 0x66, 0x02,
	0x85, 0xa2, 0x34, 0x0e, 0x02, 0xfb, 0x65, 0x14, 0xdd, 0x84, 0x7e, 0x12, 0x90, 0x33, 0x9a, 0xba,
	0xc4, 0xbe, 0x7e, 0xd0, 0x3e, 0x1c, 0x1e, 0xd9, 0x77, 0x2a, 0x09, 0x79, 0xe7, 0xc3, 0x84, 0x3d,
	0xc2, 0x11, 0xa5, 0xb1, 0x9e, 0x7d, 0xe3, 0x82, 0xb1, 0xaf, 0xc3, 0x86, 0xa0, 0x24, 0x74, 0x89,
	0x7d, 0x70, 0x60, 0x1d, 0x0e, 0x8f, 0xf6, 0xd6, 0x47, 0x3e, 0xa1, 0x24, 0xcc, 0xc7, 0x79, 0xf6,
	0x2b, 0xcf, 0x1d, 0xb7, 0x0d, 0xc3, 0x79, 0x4a, 0x89, 0xa0, 0xca, 0x45, 0xce, 0x81, 0x75, 0xd8,
	0x96, 0xc2, 0x2c, 0xf1, 0x73, 0xe1, 0xab, 0x28, 0xac, 0x7b, 0x44, 0xbe, 0xf9, 0x16, 0xbe, 0xd9,
	0x83, 0x49, 0xe1, 0x65, 0x97, 0x45, 0xc2, 0x7e, 0x0d, 0xe5, 0x33, 0x00, 0x19, 0xbc, 0x58, 0x08,
	0x9a, 0x9e, 0xd9, 0xaf, 0x9b, 0x88, 0x2c, 0x19, 0x17, 0x71, 0x7a, 0x26, 0x03, 0xf0, 0x06, 0x8e,
	0xdb, 0x82, 0x41, 0xbc, 0xa2, 0xa9, 0xfa, 0xe4, 0xa1, 0x74, 0xb2, 0xf3, 0x3e, 0x0c, 0x0a, 0x9b,
	0x01, 0x5a, 0x3c, 0xb2, 0x2d, 0xe3, 0x7d, 0xed, 0x2b, 0x5d, 0x81, 0x83, 0xd9, 0x08, 0x3a, 0x45,
	0xdd, 0x39, 0x0f, 0xa0, 0x67, 0x6c, 0x9b, 0x42, 0x0f, 0x7d, 0x80, 0x45, 0x5d, 0x1e, 0xd9, 0x32,
	0x89, 0x60, 0x72, 0xb6, 0x6d, 0x5e, 0xb3, 0x79, 0xac, 0x8a, 0x75, 0xe0, 0xfc, 0x04, 0x60, 0xaf,
	0x8e, 0x88, 0x8f, 0xa8, 0x20, 0x2c, 0xf8, 0x06, 0x41, 0x51, 0x4a, 0xde, 0x8d, 0xb5, 0x3a, 0xeb,
	0x99, 0x1a, 0xd0, 0x19, 0xd2, 0xaf, 0x3c, 0x7b, 0x1a, 0x0d, 0x15, 0x6f, 0xe7, 0x58, 0xc8, 0x93,
	0x75, 0x78, 0xd0, 0xae, 0x48, 0x3c, 0x7b, 0x84, 0x92, 0x2a, 0x79, 0xc6, 0xf5, 0xea, 0x9c, 0xe0,
	0xba, 0x8b, 0xfa, 0x9b, 0xe2, 0x73, 0x99, 0x37, 0x9b, 0x0d, 0xb0, 0xda, 0x6a, 0x86, 0xd5, 0xac,
	0x81, 0x36, 0xdb, 0xcd, 0xb4, 0xd9, 0x69, 0xa2, 0xd8, 0x6e, 0x13, 0xc5, 0x68, 0xa4, 0x21, 0xb1,
	0x4e, 0xb7, 0x7d, 0x33, 0xdf, 0x1a, 0x2c, 0x2a, 0xd0, 0x7a, 0x0e, 0x2e, 0x14, 0x96, 0xae, 0xae,
	0x61, 0xe9, 0x1a, 0x4a, 0xde, 0x86, 0xa1, 0x0a, 0x89, 0xcb, 0xa2, 0x93, 0x18, 0x09, 0x31, 0x3c,
	0xba, 0x52, 0xaf, 0xc8, 0x47, 0x9f, 0xc8, 0xac, 0xfd, 0x24, 0x3a, 0x89, 0x73, 0x05, 0x4f, 0x29,
	0x5c, 0xbf, 0x50, 0xa1, 0x44, 0xd2, 0x1b, 0x75, 0x92, 0x1e, 0xa0, 0xe0, 0x03, 0x98, 0xc9, 0x94,
	0xd2, 0xeb, 0x50, 0xc1, 0xe5, 0xf6, 0x2b, 0x88, 0x9b, 0xeb, 0xeb, 0x5f, 0x56, 0xa5, 0xa7, 0xf3,
	0xbd, 0xac, 0xeb, 0xe5, 0xba, 0xce, 0xa5, 0x74, 0xef, 0xc2, 0x58, 0xea, 0xca, 0x24, 0x71, 0xb3,
	0x34, 0xe0, 0xf6, 0xab, 0xa8, 0xf6, 0xd2, 0xba, 0xda, 0x31, 0x5b, 0xd1, 0xa7, 0x8f, 0x8f, 0x67,
	0xaf, 0x43, 0x17, 0x97, 0x8e, 0x74, 0x19, 0x1e, 0xed, 0xaf, 0x8f, 0xfc, 0x54, 0xbe, 0x9e, 0xdd,
	0x86, 0xc1, 0x8a, 0xf9, 0x34, 0x96, 0x9f, 0x45, 0xe2, 0x34, 0xba, 0xe8, 0x33, 0x39, 0x44, 0x7e,
	0xf6, 0x5d, 0xd8, 0x96, 0x0b, 0x39, 0x65, 0x91, 0x9b, 0xa4, 0xb1, 0x47, 0x3c, 0x16, 0x30, 0xa1,
	0xb0, 0xd4, 0x38, 0xc9, 0xe7, 0x2c, 0x7a, 0x74, 0xbf, 0x71, 0x1f, 0x78, 0xa3, 0xb2, 0x0f, 0x20,
	0xf4, 0x0f, 0x2b, 0xfb, 0x00, 0x56, 0xc4, 0x9b, 0x28, 0xaa, 0xf1, 0xf5, 0x66, 0x13, 0x5f, 0xdf,
	0x32, 0xb4, 0xe4, 0x09, 0x9d, 0x33, 0x82, 0xcc, 0xb8, 0x85, 0x73, 0x8c, 0xa1, 0x8b, 0xa9, 0x6a,
	0xdf, 0xae, 0x56, 0x04, 0x66, 0xc5, 0x9d, 0x6a, 0x45, 0x48, 0x99, 0x4c, 0xf2, 0xb7, 0x1b, 0xf7,
	0x2f, 0x39, 0xcf, 0x5d, 0x9c, 0xe7, 0xdb, 0x00, 0x18, 0x8c, 0x84, 0x88, 0x25, 0xb7, 0xdf, 0x41,
	0xf3, 0x5f, 0xab, 0x99, 0x5f, 0x42, 0x9e, 0x8c, 0xca, 0x23, 0x22, 0x96, 0x0f, 0xbd, 0x2f, 0x9c,
	0x5f, 0x5a, 0x30, 0xac, 0x65, 0xdd, 0xf3, 0x00, 0x6b, 0x78, 0xda, 0x36, 0xfe, 0x3a, 0xc9, 0x02,
	0x8d, 0xbe, 0x4e, 0x9d, 0xc0, 0x79, 0x1f, 0x34, 0x8f, 0xb3, 0x48, 0xa4, 0x67, 0x6a, 0x98, 0x62,
	0xdc, 0x21, 0xf4, 0xd0, 0x44, 0xca, 0xed, 0x1e, 0x26, 0x4f, 0x43, 0xb4, 0x7e, 0x20, 0x07, 0x38,
	0x9f, 0x41, 0xdf, 0xfc, 0x5d, 0x21, 0xe3, 0xa5, 0xf0, 0x3f, 0x84, 0x76, 0xc2, 0xe6, 0x7a, 0x69,
	0x66, 0xed, 0xb8, 0x2e, 0xe7, 0xd7, 0x16, 0x4c, 0xeb, 0x89, 0x5d, 0xd9, 0x89, 0x2c, 0xf3, 0x49,
	0xe3, 0x8f, 0x96, 0xc1, 0x02, 0xf3, 0x8b, 0xdd, 0xa5, 0x64, 0x7a, 0x1e, 0xd9, 0x9c, 0xeb, 0xda,
	0x70, 0x6d, 0xf3, 0x18, 0xba, 0xc9, 0x32, 0x16, 0xb1, 0x86, 0xba, 0xe4, 0x71, 0xcc, 0x99, 0x90,
	0x9d, 0x60, 0xdf, 0x7c, 0x9a, 0x47, 0x1a, 0xe9, 0x75, 0xb7, 0x21, 0xd5, 0x9d, 0x8f, 0x01, 0x4a,
	0x55, 0x65, 0xa6, 0xb7, 0x8c, 0xad, 0xb2, 0x6a, 0x5a, 0x66, 0x87, 0xc8, 0xd2, 0xc0, 0x5d, 0xbe,
	0xa7, 0x57, 0x6a, 0x3c, 0xb3, 0x7c, 0x4f, 0x6f, 0x85, 0xb7, 0xd1, 0xad, 0xaa, 0xea, 0x06, 0x60,
	0x11, 0xdb, 0xc2, 0x2d, 0x61, 0x00, 0x96, 0x67, 0xb7, 0xf0, 0xcf, 0x21, 0xb4, 0x4f, 0x99, 0x74,
	0x64, 0xfb, 0x70, 0xe0, 0xdc, 0xc4, 0x2c, 0xc9, 0x0b, 0x6f, 0x08, 0x6d, 0xbe, 0xca, 0xb4, 0xce,
	0x04, 0x36, 0xf8, 0x2a, 0x93, 0x9f, 0x46, 0x45, 0xe7, 0x1e, 0x4c, 0x4c, 0xad, 0x3d, 0xf4, 0xbe,
	0xa0, 0x73, 0xb1, 0x9e, 0x54, 0x9b, 0xd0, 0x97, 0x45, 0x9b, 0x12, 0xa1, 0x43, 0xe7, 0x04, 0xb8,
	0x1e, 0x55, 0xa0, 0xef, 0xc2, 0x58, 0x2c, 0x19, 0x77, 0xc5, 0x69, 0x8c, 0x80, 0xc2, 0x79, 0x86,
	0x47, 0x2f, 0x9f, 0x53, 0xd0, 0x7a, 0x92, 0x9b, 0xd0, 0x26, 0x41, 0x80, 0x6b, 0xb8, 0x68, 0xac,
	0xf3, 0xf3, 0x0e, 0xec, 0x94, 0x1b, 0x01, 0x99, 0xfe, 0xf7, 0xe3, 0x4c, 0xfc, 0x37, 0xb5, 0x01,
	0x77, 0xa0, 0xa7, 0xdb, 0x2a, 0x4c, 0x98, 0x46, 0x9b, 0xcc, 0xba, 0x3f, 0x66, 0x7c, 0x76, 0x0b,
	0x5a, 0x2b, 0x6e, 0xf7, 0xd1, 0xfc, 0x83, 0xf3, 0x87, 0x6a, 0x6f, 0x7d, 0x07, 0xa6, 0x7a, 0xdf,
	0x90, 0x81, 0x38, 0x21, 0x2c, 0xc0, 0xc4, 0x1b, 0x1e, 0x39, 0xcd, 0xaa, 0x9f, 0xb3, 0xe8, 0x7b,
	0x84, 0xd5, 0x94, 0xbd, 0x42, 0x19, 0x2e, 0xad, 0xfc, 0x01, 0x4c, 0xf4, 0xcc, 0x11, 0x11, 0x6e,
	0x4a, 0x39, 0x1e, 0x5b, 0xce, 0xd5, 0xfd, 0x21, 0x11, 0x8f, 0x29, 0xaf, 0xe9, 0x7a, 0xb9, 0xee,
	0xe8, 0xd2, 0xba, 0x35, 0x6c, 0x8f, 0x9b, 0xb0, 0x2d, 0x5b, 0x9e, 0xb6, 0xc3, 0x61, 0x6b, 0xdd,
	0x61, 0xa5, 0xed, 0xd8, 0xaa, 0x6f, 0xc7, 0xad, 0x86, 0x66, 0xa3, 0x6d, 0x3a, 0x8b, 0xdc, 0xd8,
	0x1c, 0x14, 0xdb, 0x79, 0x2b, 0x50, 0xc4, 0xdf, 0x11, 0x58, 0x35, 0xe5, 0x80, 0xde, 0xcd, 0xbb,
	0x3e, 0xeb, 0x92, 0x41, 0xbd, 0x9b, 0xf7, 0x85, 0xad, 0xcb, 0x69, 0x38, 0xc7, 0xb0, 0xdd, 0x14,
	0xa3, 0x7d, 0x98, 0x32, 0xee, 0xce, 0xe3, 0x48, 0xb0, 0x28, 0xa3, 0x32, 0xca, 0x68, 0x74, 0x57,
	0x16, 0x7e, 0x94, 0x85, 0x3a, 0xef, 0x4b, 0x65, 0xad, 0x1a, 0xf5, 0x4f, 0xf3, 0xaf, 0x55, 0x3c,
	0xbf, 0x03, 0xa3, 0x88, 0x88, 0x2c, 0x25, 0x81, 0x29, 0x67, 0xbd, 0xcb, 0xa5, 0x94, 0x8b, 0x94,
	0x48, 0x8f, 0x49, 0x71, 0xab, 0x0e, 0x5c, 0xf5, 0xd1, 0x3f, 0xb6, 0x60, 0xb7, 0xde, 0xb4, 0x3f,
	0xc8, 0x28, 0xe7, 0x17, 0x15, 0xeb, 0x55, 0xd8, 0x0e, 0xe3, 0x34, 0x7a, 0x1c, 0x07, 0x81, 0xbb,
	0x90, 0x0a, 0xea, 0x20, 0xde, 0x3a, 0x68, 0x1d, 0x76, 0xd7, 0x2a, 0xb9, 0x7d, 0x4e, 0x25, 0x77,
	0x1a, 0x2a, 0xb9, 0x7b, 0x5e, 0x25, 0x6f, 0xd4, 0x2b, 0xb9, 0xd7, 0x90, 0x18, 0xfd, 0xa6, 0x96,
	0x73, 0x70, 0xee, 0x09, 0x55, 0xb5, 0xf3, 0xb7, 0xa0, 0x8b, 0x26, 0x60, 0x2f, 0xdf, 0x80, 0x82,
	0x84, 0xa1, 0x4b, 0x9a, 0x53, 0x7d, 0xd4, 0x94, 0xea, 0x98, 0xff, 0xce, 0xef, 0x2c, 0x98, 0xd4,
	0x94, 0x75, 0x88, 0x2d, 0xb3, 0x8f, 0x78, 0x54, 0x14, 0xbb, 0xdf, 0x16, 0x0c, 0xe4, 0xb3, 0x60,
	0x22, 0x30, 0x29, 0xbe, 0x03, 0xa3, 0x5c, 0x24, 0x77, 0xde, 0xdc, 0x63, 0x29, 0xe3, 0xcf, 0xdc,
	0x80, 0xae, 0x68, 0xa0, 0x11, 0xf7, 0x16, 0x74, 0x65, 0x6c, 0xb8, 0xbd, 0x81, 0x46, 0x5c, 0x5b,
	0x37, 0xe2, 0x13, 0x41, 0x43, 0xbd, 0x0c, 0x1d, 0x8a, 0x52, 0xe0, 0x7a, 0xe8, 0xf6, 0xab, 0xb2,
	0xe7, 0x33, 0xf2, 0x15, 0xa3, 0xa7, 0xea, 0xa5, 0xf4, 0x6a, 0xd7, 0xf9, 0x5b, 0x0b, 0xc6, 0xd5,
	0xcf, 0x4c, 0xa1, 0x27, 0x57, 0x57, 0x58, 0xb4, 0xb6, 0xa1, 0xcb, 0xed, 0x4b, 0x05, 0xa1, 0xbd,
	0x7e, 0x1c, 0xed, 0x98, 0xad, 0xf5, 0x94, 0x99, 0x86, 0x66, 0x04, 0x9d, 0xd8, 0xf7, 0x79, 0x71,
	0x58, 0x43, 0xeb, 0x65, 0xa8, 0x7a, 0xf9, 0x61, 0xcc, 0xf7, 0x79, 0xf9, 0x3a, 0x67, 0x0b, 0x06,
	0x01, 0x0b, 0x99, 0xc0, 0x63, 0xd4, 0xc0, 0x1c, 0x9a, 0xe7, 0x24, 0x72, 0xe7, 0x19, 0x17, 0x71,
	0x88, 0x41, 0xc6, 0xc6, 0x12, 0x35, 0xf5, 0x72, 0x86, 0x66, 0x82, 0x45, 0x1a, 0x67, 0x89, 0x5c,
	0xcd, 0x28, 0x4f, 0x1d, 0x94, 0xac, 0x48, 0x90, 0xd1, 0xe2, 0x1e, 0x47, 0x09, 0xd1, 0x1b, 0x93,
	0x72, 0xb0, 0xb8, 0x20, 0xa9, 0x28, 0xee, 0x70, 0xa4, 0x48, 0x9e, 0x16, 0x8b, 0x3b, 0x1c, 0x9c,
	0x14, 0x93, 0x62, 0xcb, 0x4c, 0x50, 0xee, 0x31, 0x67, 0x26, 0x7d, 0x52, 0xca, 0xb3, 0x40, 0x28,
	0xe1, 0x36, 0xa6, 0xcf, 0xef, 0x2d, 0xb0, 0xcb, 0xb5, 0xf9, 0x94, 0x53, 0x59, 0x6e, 0x97, 0x2a,
	0xcf, 0x17, 0xb9, 0x97, 0xd6, 0x0a, 0xa2, 0xd7, 0x54, 0x10, 0x7d, 0xb4, 0xe8, 0xfb, 0xb0, 0xd7,
	0xdc, 0x29, 0xcb, 0x3c, 0x39, 0x09, 0x56, 0x4f, 0xd3, 0xa0, 0x48, 0xa4, 0xf0, 0x5e, 0xf6, 0xfe,
	0xd3, 0xbc, 0xe7, 0x9a, 0x42, 0x2f, 0x15, 0x61, 0x22, 0x05, 0x8a, 0x5c, 0xff, 0x68, 0xc3, 0xb5,
	0xb2, 0x77, 0x3e, 0x7a, 0xf8, 0xe4, 0xc3, 0xc7, 0x94, 0x04, 0x4f, 0x58, 0x48, 0x3f, 0x22, 0x82,
	0x5c, 0xe4, 0xa1, 0xaa, 0xcd, 0xad, 0xf3, 0x6c, 0x6e, 0xd7, 0x6d, 0xee, 0x98, 0x0c, 0x43, 0x41,
	0x1a, 0x67, 0x91, 0xaf, 0x99, 0xb5, 0x0b, 0xe3, 0x42, 0x66, 0xdc, 0xd3, 0xad, 0xc3, 0xa8, 0xb7,
	0x76, 0xd0, 0xef, 0x9b, 0xe4, 0xf1, 0xb3, 0x94, 0x60, 0xc7, 0x3a, 0x30, 0xdf, 0x4b, 0x63, 0xbe,
	0x24, 0x91, 0x9b, 0x4a, 0x1f, 0xa6, 0x3a, 0x91, 0x27, 0xb0, 0x71, 0xca, 0xa2, 0x88, 0xa6, 0x3a,
	0x87, 0x6f, 0xe6, 0x3b, 0xd9, 0xa8, 0xf9, 0x4c, 0x97, 0x30, 0xe9, 0x1b, 0xbc, 0xe1, 0xb9, 0x99,
	0xef, 0x61, 0xe3, 0x0b, 0xc7, 0xde, 0x83, 0xb1, 0xb9, 0xe4, 0x50, 0xe7, 0xa7, 0x09, 0xaa, 0x5c,
	0x6b, 0x56, 0xd1, 0x57, 0x4f, 0x85, 0x92, 0x3e, 0x8a, 0x4f, 0x2f, 0xa1, 0x54, 0x4b, 0xa0, 0xcd,
	0xa6, 0x04, 0xda, 0xc2, 0x04, 0xfa, 0x95, 0x3c, 0x50, 0x95, 0xd6, 0x38, 0x85, 0xde, 0x09, 0x99,
	0xa3, 0xcf, 0xac, 0xfc, 0x18, 0xc0, 0xe6, 0xcf, 0x38, 0xee, 0xd1, 0x5d, 0x89, 0x13, 0x8f, 0x44,
	0x1c, 0xfb, 0xec, 0x6e, 0xed, 0x44, 0xa1, 0xce, 0x1a, 0x2a, 0x74, 0x63, 0x73, 0x84, 0x56, 0x21,
	0x1b, 0x41, 0x67, 0x11, 0xc4, 0xbe, 0x8e, 0x95, 0xec, 0x28, 0xe2, 0x53, 0x9a, 0x62, 0x04, 0x55,
	0x2a, 0x63, 0x29, 0x79, 0x24, 0x4d, 0xc9, 0xfc, 0x19, 0xd7, 0x72, 0x0c, 0x9a, 0xf3, 0xd3, 0x36,
	0x42, 0xb2, 0x64, 0x5d, 0xf5, 0x20, 0x31, 0x85, 0xde, 0x92, 0xa6, 0x71, 0x51, 0x93, 0xdb, 0x30,
	0xd4, 0x1e, 0x4b, 0x24, 0x49, 0xda, 0x66, 0x3d, 0xcf, 0x58, 0x10, 0x70, 0x9d, 0x6d, 0x63, 0xe8,
	0xfa, 0x94, 0x88, 0xa5, 0x5e, 0xed, 0x14, 0x7a, 0x84, 0x73, 0xc6, 0x05, 0xd7, 0xeb, 0x95, 0xdd,
	0x52, 0xe6, 0x71, 0xe6, 0x9f, 0xe9, 0x25, 0xcb, 0xf2, 0x8f, 0x04, 0x73, 0x8d, 0xb4, 0x9f, 0x9b,
	0x15, 0x07, 0xbe, 0x4e, 0xaf, 0x31, 0x74, 0xd5, 0xfe, 0x01, 0xa6, 0xf9, 0x58, 0x24, 0x21, 0xe6,
	0x14, 0x3e, 0x7c, 0x99, 0x84, 0x98, 0x50, 0x68, 0x6a, 0x16, 0x08, 0x16, 0xca, 0x58, 0x28, 0x8d,
	0xb1, 0x59, 0x79, 0x2e, 0x9f, 0xfb, 0xfa, 0x46, 0x6b, 0xac, 0xb6, 0xa1, 0xbb, 0xfa, 0x42, 0x4b,
	0x3f, 0xbe, 0x83, 0x41, 0xcd, 0x1f, 0x8f, 0x30, 0x9c, 0xf9, 0xe3, 0x3d, 0xa4, 0x60, 0xfe, 0xf8,
	0x2e, 0xf2, 0x2f, 0x7f, 0x7c, 0x4f, 0xdf, 0x64, 0x4f, 0x60, 0x43, 0xd7, 0xc1, 0xae, 0xb9, 0xd9,
	0x4e, 0xbe, 0xc4, 0x2b, 0x2a, 0x0b, 0xff, 0x3e, 0xc3, 0x6b, 0x29, 0x4b, 0x32, 0x37, 0xa2, 0xc2,
	0x3d, 0x8d, 0x53, 0xb1, 0xc4, 0x5b, 0xa9, 0xae, 0xf3, 0x97, 0x0e, 0x5c, 0x2d, 0xb3, 0xe2, 0xf8,
	0xe1, 0xf1, 0xd7, 0x41, 0xc5, 0x8b, 0x83, 0x69, 0x1d, 0x2c, 0xbd, 0x26, 0x82, 0xf4, 0xd7, 0x08,
	0x32, 0x58, 0x23, 0x48, 0x33, 0x2a, 0xde, 0xac, 0xa1, 0xe2, 0xa5, 0xf5, 0xb2, 0x3c, 0x7e, 0x78,
	0x8c, 0x95, 0xf5, 0x66, 0x8d, 0x14, 0xcf, 0x19, 0x7a, 0xb4, 0x0e, 0x0a, 0xd9, 0x81, 0x5c, 0x6d,
	0xd4, 0xd0, 0x45, 0x71, 0xb4, 0xce, 0x89, 0x0b, 0x75, 0xb6, 0x61, 0x78, 0xc2, 0x52, 0x2e, 0x5c,
	0xac, 0x46, 0x9d, 0x51, 0x57, 0x60, 0xa6, 0x84, 0x3c, 0x24, 0x41, 0xe0, 0xfa, 0x29, 0x59, 0xc4,
	0x91, 0x4e, 0xaf, 0x7d, 0x98, 0xaa, 0x77, 0x27, 0x6c, 0x45, 0x5d, 0x59, 0x50, 0x3a, 0xd1, 0x6c,
	0xd8, 0x54, 0x2f, 0x3c, 0xb6, 0x30, 0x2a, 0xdb, 0x26, 0xa8, 0x7a, 0x0e, 0x1a, 0x29, 0x8d, 0x9d,
	0xa6, 0x6b, 0xa9, 0xdd, 0x26, 0x44, 0xed, 0x21, 0xa2, 0xfe, 0x69, 0x01, 0x94, 0x9c, 0xf3, 0x42,
	0x08, 0x55, 0xaa, 0xff, 0x7e, 0x13, 0xb2, 0x06, 0x26, 0x1b, 0xfc, 0x94, 0x3c, 0xa3, 0x5c, 0x67,
	0xc7, 0x2e, 0x8c, 0x23, 0xb2, 0xe4, 0x71, 0xea, 0x7a, 0x24, 0x8d, 0x23, 0xae, 0x6b, 0xff, 0x1e,
	0x4c, 0x24, 0x25, 0xd4, 0x8f, 0x13, 0x3e, 0x11, 0x04, 0x2f, 0xb4, 0xd7, 0x63, 0xf3, 0x20, 0x0e,
	0x7c, 0x53, 0x41, 0xce, 0xcf, 0x5a, 0x30, 0xaa, 0x04, 0xeb, 0x9b, 0xa0, 0x9e, 0xe1, 0x5b, 0xbf,
	0xca, 0xb7, 0x81, 0x79, 0x29, 0xeb, 0xd9, 0x06, 0x74, 0xf4, 0x3e, 0x4c, 0x79, 0x16, 0x86, 0x71,
	0x24, 0x7d, 0x94, 0x50, 0x39, 0xe9, 0x10, 0x5f, 0xec, 0xc0, 0xc8, 0x27, 0x21, 0x59, 0x50, 0x57,
	0x90, 0x67, 0x34, 0xd2, 0x08, 0x94, 0xae, 0x43, 0xa9, 0x46, 0xdf, 0x08, 0x3a, 0x4b, 0x4a, 0x02,
	0xcd, 0x3c, 0x80, 0xd6, 0x32, 0x29, 0x80, 0xa7, 0xee, 0xa1, 0xb0, 0x01, 0x74, 0xfe, 0xde, 0xa9,
	0x76, 0x29, 0x9f, 0xff, 0xf8, 0xf1, 0x8f, 0xfe, 0x2f, 0xd1, 0x73, 0x89, 0x2e, 0x45, 0xfa, 0xe6,
	0xb2, 0x5d, 0x4a, 0x3e, 0xf6, 0x5e, 0x33, 0x7c, 0xae, 0x35, 0xab, 0x9c, 0xdf, 0xa5, 0x5c, 0xac,
	0xf4, 0xbf, 0x81, 0x9f, 0x7f, 0xa9, 0x0e, 0x29, 0xf7, 0xcf, 0x1a, 0x7f, 0xd4, 0x6f, 0x50, 0xcb,
	0x58, 0xdf, 0xeb, 0xf6, 0x0b, 0x20, 0xb5, 0x2b, 0x40, 0xea, 0x54, 0x80, 0xd4, 0x2d, 0x01, 0x69,
	0xa3, 0x0a, 0xa4, 0xe7, 0x34, 0x49, 0x05, 0x71, 0x06, 0xcd, 0xc4, 0x81, 0x0a, 0xcc, 0xfe, 0x03,
	0xfe, 0xfc, 0xc6, 0xc2, 0xb6, 0xab, 0x14, 0xae, 0x0b, 0x00, 0xf4, 0x35, 0x59, 0x63, 0xd0, 0xd2,
	0x2b, 0xb5, 0x1e, 0xfd, 0xfc, 0xef, 0x33, 0x6d, 0x1f, 0xfe, 0x5b, 0x02, 0x4f, 0xc8, 0x69, 0x54,
	0xfc, 0x5a, 0x58, 0x90, 0x47, 0x01, 0x26, 0x07, 0xc4, 0x48, 0xff, 0x70, 0x3b, 0x2a, 0x1b, 0x22,
	0x13, 0x4a, 0xfd, 0x80, 0x86, 0xd6, 0x33, 0x2e, 0x48, 0x34, 0xa7, 0xfa, 0x7e, 0xc8, 0x2c, 0x02,
	0x2d, 0xb8, 0x3f, 0xfa, 0xed, 0x57, 0xd7, 0xad, 0x3f, 0x7c, 0x75, 0xdd, 0xfa, 0xf3, 0x57, 0xd7,
	0xad, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xa9, 0x4a, 0x11, 0xc0, 0xdf, 0x21, 0x00, 0x00,
}

func (m *TableESPortsGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableESPortsGame) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("id")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Id))
	}
	if m.AppLabelId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.AppLabelId))
	}
	if m.AppLabelName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.AppLabelName)))
		i += copy(dAtA[i:], *m.AppLabelName)
	}
	if m.ApiOrigin != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.ApiOrigin))
	}
	if m.ApiOriginName != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.ApiOriginName)))
		i += copy(dAtA[i:], *m.ApiOriginName)
	}
	if m.ReleaseFlag != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.ReleaseFlag))
	}
	if m.Dimension != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Dimension)))
		i += copy(dAtA[i:], *m.Dimension)
	}
	if m.FightName != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.FightName)))
		i += copy(dAtA[i:], *m.FightName)
	}
	if m.EventName != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.EventName)))
		i += copy(dAtA[i:], *m.EventName)
	}
	if m.EventNameEn != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.EventNameEn)))
		i += copy(dAtA[i:], *m.EventNameEn)
	}
	if m.EventId != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.EventId)))
		i += copy(dAtA[i:], *m.EventId)
	}
	if m.MatchStage != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.MatchStage)))
		i += copy(dAtA[i:], *m.MatchStage)
	}
	if m.MatchStageId != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.MatchStageId)))
		i += copy(dAtA[i:], *m.MatchStageId)
	}
	if m.MatchName != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.MatchName)))
		i += copy(dAtA[i:], *m.MatchName)
	}
	if m.MatchNameEn != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.MatchNameEn)))
		i += copy(dAtA[i:], *m.MatchNameEn)
	}
	if m.MatchId != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.MatchId)))
		i += copy(dAtA[i:], *m.MatchId)
	}
	if m.GameType != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.GameType)))
		i += copy(dAtA[i:], *m.GameType)
	}
	if m.ScoreA != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.ScoreA)))
		i += copy(dAtA[i:], *m.ScoreA)
	}
	if m.ScoreB != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.ScoreB)))
		i += copy(dAtA[i:], *m.ScoreB)
	}
	if m.IsLive != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.IsLive))
	}
	if m.Bo != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Bo)))
		i += copy(dAtA[i:], *m.Bo)
	}
	if m.HotGame != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.HotGame)))
		i += copy(dAtA[i:], *m.HotGame)
	}
	if m.IsBet != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.IsBet))
	}
	if m.BeginTime != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.BeginTime)))
		i += copy(dAtA[i:], *m.BeginTime)
	}
	if m.GameId != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.GameId)))
		i += copy(dAtA[i:], *m.GameId)
	}
	if m.GameStatus != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.GameStatus)))
		i += copy(dAtA[i:], *m.GameStatus)
	}
	if m.GameStatusType != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.GameStatusType)))
		i += copy(dAtA[i:], *m.GameStatusType)
	}
	if m.HaveLive != nil {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.HaveLive))
	}
	if m.HaveRoll != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.HaveRoll))
	}
	if len(m.PlayerA) > 0 {
		for _, msg := range m.PlayerA {
			dAtA[i] = 0xf2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTableStructESportsApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PlayerB) > 0 {
		for _, msg := range m.PlayerB {
			dAtA[i] = 0xfa
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTableStructESportsApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TeamA != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(m.TeamA.Size()))
		n1, err := m.TeamA.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.TeamB != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(m.TeamB.Size()))
		n2, err := m.TeamB.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.GameStatusTime != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.GameStatusTime))
	}
	if m.BeginTimeInt != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.BeginTimeInt))
	}
	if m.IsLottery != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.IsLottery))
	}
	if m.HistoryId != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.HistoryId))
	}
	if m.OverTime != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.OverTime)))
		i += copy(dAtA[i:], *m.OverTime)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ApiPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiPlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sn != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Sn)))
		i += copy(dAtA[i:], *m.Sn)
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.PlayerId)))
		i += copy(dAtA[i:], *m.PlayerId)
	}
	if m.Name != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ApiTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiTeam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TeamId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.TeamId)))
		i += copy(dAtA[i:], *m.TeamId)
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.NameEn != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.NameEn)))
		i += copy(dAtA[i:], *m.NameEn)
	}
	if m.Icon != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Icon)))
		i += copy(dAtA[i:], *m.Icon)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableESPortsGameDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableESPortsGameDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("id")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Id))
	}
	if m.AppLabelId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.AppLabelId))
	}
	if m.AppLabelName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.AppLabelName)))
		i += copy(dAtA[i:], *m.AppLabelName)
	}
	if m.ApiOrigin != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.ApiOrigin))
	}
	if m.ApiOriginName != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.ApiOriginName)))
		i += copy(dAtA[i:], *m.ApiOriginName)
	}
	if m.GameId != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.GameId)))
		i += copy(dAtA[i:], *m.GameId)
	}
	if m.MatchId != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.MatchId)))
		i += copy(dAtA[i:], *m.MatchId)
	}
	if m.TeamA != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.TeamA)))
		i += copy(dAtA[i:], *m.TeamA)
	}
	if m.TeamB != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.TeamB)))
		i += copy(dAtA[i:], *m.TeamB)
	}
	if m.OverTime != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.OverTime)))
		i += copy(dAtA[i:], *m.OverTime)
	}
	if len(m.PlayerA) > 0 {
		for _, s := range m.PlayerA {
			dAtA[i] = 0x5a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.PlayerB) > 0 {
		for _, s := range m.PlayerB {
			dAtA[i] = 0x62
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.FightName != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.FightName)))
		i += copy(dAtA[i:], *m.FightName)
	}
	if m.IsLive != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.IsLive))
	}
	if m.IsBet != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.IsBet))
	}
	if m.EventId != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.EventId)))
		i += copy(dAtA[i:], *m.EventId)
	}
	if m.EventName != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.EventName)))
		i += copy(dAtA[i:], *m.EventName)
	}
	if m.EventNameEn != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.EventNameEn)))
		i += copy(dAtA[i:], *m.EventNameEn)
	}
	if m.MatchName != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.MatchName)))
		i += copy(dAtA[i:], *m.MatchName)
	}
	if m.MatchNameEn != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.MatchNameEn)))
		i += copy(dAtA[i:], *m.MatchNameEn)
	}
	if m.MatchStage != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.MatchStage)))
		i += copy(dAtA[i:], *m.MatchStage)
	}
	if m.MatchStageEn != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.MatchStageEn)))
		i += copy(dAtA[i:], *m.MatchStageEn)
	}
	if m.MatchStageId != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.MatchStageId)))
		i += copy(dAtA[i:], *m.MatchStageId)
	}
	if m.BeginTime != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.BeginTime)))
		i += copy(dAtA[i:], *m.BeginTime)
	}
	if m.GameType != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.GameType)))
		i += copy(dAtA[i:], *m.GameType)
	}
	if m.GameStatus != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.GameStatus)))
		i += copy(dAtA[i:], *m.GameStatus)
	}
	if m.Bo != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Bo)))
		i += copy(dAtA[i:], *m.Bo)
	}
	if m.HotGame != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.HotGame)))
		i += copy(dAtA[i:], *m.HotGame)
	}
	if m.TeamAInfo != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(m.TeamAInfo.Size()))
		n3, err := m.TeamAInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.TeamBInfo != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(m.TeamBInfo.Size()))
		n4, err := m.TeamBInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.ScoreA != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.ScoreA)))
		i += copy(dAtA[i:], *m.ScoreA)
	}
	if m.ScoreB != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.ScoreB)))
		i += copy(dAtA[i:], *m.ScoreB)
	}
	if len(m.ApiTeamAPlayers) > 0 {
		for _, msg := range m.ApiTeamAPlayers {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintTableStructESportsApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ApiTeamBPlayers) > 0 {
		for _, msg := range m.ApiTeamBPlayers {
			dAtA[i] = 0x92
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintTableStructESportsApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ApiLiveUrls) > 0 {
		for _, msg := range m.ApiLiveUrls {
			dAtA[i] = 0x9a
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintTableStructESportsApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Score != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(m.Score.Size()))
		n5, err := m.Score.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.VideoUrl != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(m.VideoUrl.Size()))
		n6, err := m.VideoUrl.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.ApiWinProbability != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(m.ApiWinProbability.Size()))
		n7, err := m.ApiWinProbability.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.GameStatusType != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.GameStatusType)))
		i += copy(dAtA[i:], *m.GameStatusType)
	}
	if m.HaveRoll != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.HaveRoll))
	}
	if m.HaveLive != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.HaveLive))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.SpecialId != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.SpecialId)))
		i += copy(dAtA[i:], *m.SpecialId)
	}
	if m.Match != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Match)))
		i += copy(dAtA[i:], *m.Match)
	}
	if m.MatchInfo != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.MatchInfo)))
		i += copy(dAtA[i:], *m.MatchInfo)
	}
	if m.MatchInfoEn != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.MatchInfoEn)))
		i += copy(dAtA[i:], *m.MatchInfoEn)
	}
	if m.GameStatusTime != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.GameStatusTime))
	}
	if m.LivePaths != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(m.LivePaths.Size()))
		n8, err := m.LivePaths.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *APITeamInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APITeamInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TeamId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.TeamId)))
		i += copy(dAtA[i:], *m.TeamId)
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Icon != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Icon)))
		i += copy(dAtA[i:], *m.Icon)
	}
	if m.FullName != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.FullName)))
		i += copy(dAtA[i:], *m.FullName)
	}
	if m.NameEn != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.NameEn)))
		i += copy(dAtA[i:], *m.NameEn)
	}
	if m.CountryName != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.CountryName)))
		i += copy(dAtA[i:], *m.CountryName)
	}
	if len(m.Matches) > 0 {
		for _, msg := range m.Matches {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintTableStructESportsApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *APIMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIMatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MatchId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.MatchId)))
		i += copy(dAtA[i:], *m.MatchId)
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.NameEn != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.NameEn)))
		i += copy(dAtA[i:], *m.NameEn)
	}
	if m.Pic != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Pic)))
		i += copy(dAtA[i:], *m.Pic)
	}
	if m.Icon != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Icon)))
		i += copy(dAtA[i:], *m.Icon)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *APIPlayerDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIPlayerDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.PlayerId)))
		i += copy(dAtA[i:], *m.PlayerId)
	}
	if m.TeamId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.TeamId)))
		i += copy(dAtA[i:], *m.TeamId)
	}
	if m.Id != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.Name != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Match != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Match)))
		i += copy(dAtA[i:], *m.Match)
	}
	if m.Country != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Country)))
		i += copy(dAtA[i:], *m.Country)
	}
	if m.Photo != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Photo)))
		i += copy(dAtA[i:], *m.Photo)
	}
	if m.Position != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Position)))
		i += copy(dAtA[i:], *m.Position)
	}
	if m.Sn != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Sn)))
		i += copy(dAtA[i:], *m.Sn)
	}
	if m.CountryName != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.CountryName)))
		i += copy(dAtA[i:], *m.CountryName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *APILiveURL) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APILiveURL) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Url != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Url)))
		i += copy(dAtA[i:], *m.Url)
	}
	if m.UrlH5 != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.UrlH5)))
		i += copy(dAtA[i:], *m.UrlH5)
	}
	if m.NameH5 != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.NameH5)))
		i += copy(dAtA[i:], *m.NameH5)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *APIScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIScore) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.A) > 0 {
		for _, s := range m.A {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.B) > 0 {
		for _, s := range m.B {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Win) > 0 {
		for _, s := range m.Win {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *APIVideoURL) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIVideoURL) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Svu) > 0 {
		for _, s := range m.Svu {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.SvuH5) > 0 {
		for _, s := range m.SvuH5 {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *APIWinPBObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIWinPBObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TeamId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.TeamId)))
		i += copy(dAtA[i:], *m.TeamId)
	}
	if m.WinRate != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.WinRate)))
		i += copy(dAtA[i:], *m.WinRate)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *APIWinPB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIWinPB) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ThisTwoTeam) > 0 {
		for _, msg := range m.ThisTwoTeam {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTableStructESportsApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.All) > 0 {
		for _, msg := range m.All {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTableStructESportsApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableESPortsTeamBout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableESPortsTeamBout) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("id")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Id))
	}
	if m.AppLabelId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.AppLabelId))
	}
	if m.AppLabelName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.AppLabelName)))
		i += copy(dAtA[i:], *m.AppLabelName)
	}
	if m.ApiOrigin != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.ApiOrigin))
	}
	if m.ApiOriginName != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.ApiOriginName)))
		i += copy(dAtA[i:], *m.ApiOriginName)
	}
	if m.GameId != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.GameId)))
		i += copy(dAtA[i:], *m.GameId)
	}
	if m.History != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(m.History.Size()))
		n9, err := m.History.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if len(m.Vs) > 0 {
		for _, msg := range m.Vs {
			dAtA[i] = 0x42
			i++
			i = encodeVarintTableStructESportsApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TeamAWinFail != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(m.TeamAWinFail.Size()))
		n10, err := m.TeamAWinFail.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.TeamBWinFail != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(m.TeamBWinFail.Size()))
		n11, err := m.TeamBWinFail.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.TeamANatRes != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(m.TeamANatRes.Size()))
		n12, err := m.TeamANatRes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.TeamBNatRes != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(m.TeamBNatRes.Size()))
		n13, err := m.TeamBNatRes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *APITeamBoutObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APITeamBoutObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ScoreA != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.ScoreA)))
		i += copy(dAtA[i:], *m.ScoreA)
	}
	if m.ScoreB != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.ScoreB)))
		i += copy(dAtA[i:], *m.ScoreB)
	}
	if m.BeginTime != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.BeginTime)))
		i += copy(dAtA[i:], *m.BeginTime)
	}
	if m.TeamAName != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.TeamAName)))
		i += copy(dAtA[i:], *m.TeamAName)
	}
	if m.TeamBName != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.TeamBName)))
		i += copy(dAtA[i:], *m.TeamBName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *APITeamBoutHis) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APITeamBoutHis) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TeamA) > 0 {
		for _, msg := range m.TeamA {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTableStructESportsApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.TeamB) > 0 {
		for _, msg := range m.TeamB {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTableStructESportsApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *APITeamWinFaiObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APITeamWinFaiObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsContinueWin != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.IsContinueWin))
	}
	if m.Num != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Num))
	}
	if m.TeamId != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.TeamId)))
		i += copy(dAtA[i:], *m.TeamId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *APITeamNatResObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APITeamNatResObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NaturalTeam != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.NaturalTeam)))
		i += copy(dAtA[i:], *m.NaturalTeam)
	}
	if m.RestrainTeam != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.RestrainTeam)))
		i += copy(dAtA[i:], *m.RestrainTeam)
	}
	if m.TeamId != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.TeamId)))
		i += copy(dAtA[i:], *m.TeamId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableESPortsGameGuess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableESPortsGameGuess) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("id")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Id))
	}
	if m.MornRollGuessFlag == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("mornRoll_guess_flag")
	} else {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.MornRollGuessFlag))
	}
	if m.AppLabelId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.AppLabelId))
	}
	if m.AppLabelName != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.AppLabelName)))
		i += copy(dAtA[i:], *m.AppLabelName)
	}
	if m.ApiOrigin != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.ApiOrigin))
	}
	if m.ApiOriginName != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.ApiOriginName)))
		i += copy(dAtA[i:], *m.ApiOriginName)
	}
	if m.GameId != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.GameId)))
		i += copy(dAtA[i:], *m.GameId)
	}
	if m.BeginTime != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.BeginTime)))
		i += copy(dAtA[i:], *m.BeginTime)
	}
	if m.GameStatus != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.GameStatus)))
		i += copy(dAtA[i:], *m.GameStatus)
	}
	if m.GameStatusType != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.GameStatusType)))
		i += copy(dAtA[i:], *m.GameStatusType)
	}
	if len(m.Guess) > 0 {
		for _, msg := range m.Guess {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintTableStructESportsApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ApiGuessObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiGuessObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Num != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Num)))
		i += copy(dAtA[i:], *m.Num)
	}
	if m.BetId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.BetId)))
		i += copy(dAtA[i:], *m.BetId)
	}
	if m.BetTitle != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.BetTitle)))
		i += copy(dAtA[i:], *m.BetTitle)
	}
	if m.BetTitleEn != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.BetTitleEn)))
		i += copy(dAtA[i:], *m.BetTitleEn)
	}
	if m.RiskLevel != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.RiskLevel)))
		i += copy(dAtA[i:], *m.RiskLevel)
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x32
			i++
			i = encodeVarintTableStructESportsApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AppGuessFlag != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.AppGuessFlag))
	}
	if m.AppGuessViewFlag != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.AppGuessViewFlag))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ApiItemObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiItemObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BetNum != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.BetNum)))
		i += copy(dAtA[i:], *m.BetNum)
	}
	if m.TeamId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.TeamId)))
		i += copy(dAtA[i:], *m.TeamId)
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Status)))
		i += copy(dAtA[i:], *m.Status)
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.PlayerId)))
		i += copy(dAtA[i:], *m.PlayerId)
	}
	if m.Win != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Win)))
		i += copy(dAtA[i:], *m.Win)
	}
	if m.Odds != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Odds)))
		i += copy(dAtA[i:], *m.Odds)
	}
	if m.BetType != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.BetType)))
		i += copy(dAtA[i:], *m.BetType)
	}
	if m.OddsName != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.OddsName)))
		i += copy(dAtA[i:], *m.OddsName)
	}
	if m.LimitBet != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.LimitBet))
	}
	if m.CanCustom != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.CanCustom))
	}
	if m.OddsStatus != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.OddsStatus)))
		i += copy(dAtA[i:], *m.OddsStatus)
	}
	if m.GroupId != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.GroupId)))
		i += copy(dAtA[i:], *m.GroupId)
	}
	if m.GroupValue != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.GroupValue)))
		i += copy(dAtA[i:], *m.GroupValue)
	}
	if m.GroupFlag != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.GroupFlag)))
		i += copy(dAtA[i:], *m.GroupFlag)
	}
	if m.BetStart != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.BetStart)))
		i += copy(dAtA[i:], *m.BetStart)
	}
	if m.BetOver != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.BetOver)))
		i += copy(dAtA[i:], *m.BetOver)
	}
	if m.OddsTime != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.OddsTime)))
		i += copy(dAtA[i:], *m.OddsTime)
	}
	if m.StatusTime != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.StatusTime))
	}
	if m.ResultTime != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.ResultTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableESPortsUseRollGuess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableESPortsUseRollGuess) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("id")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Id))
	}
	if m.AppLabelId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.AppLabelId))
	}
	if m.AppLabelName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.AppLabelName)))
		i += copy(dAtA[i:], *m.AppLabelName)
	}
	if m.ApiOrigin != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.ApiOrigin))
	}
	if m.ApiOriginName != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.ApiOriginName)))
		i += copy(dAtA[i:], *m.ApiOriginName)
	}
	if m.GameId != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.GameId)))
		i += copy(dAtA[i:], *m.GameId)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ESPortsGameLivePathObj) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESPortsGameLivePathObj) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FlvUrl != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.FlvUrl)))
		i += copy(dAtA[i:], *m.FlvUrl)
	}
	if m.M3U8Url != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.M3U8Url)))
		i += copy(dAtA[i:], *m.M3U8Url)
	}
	if m.RtmpUrl != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.RtmpUrl)))
		i += copy(dAtA[i:], *m.RtmpUrl)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableESPortsDOTARealTimeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableESPortsDOTARealTimeData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("id")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Id))
	}
	if m.ApiOrigin != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.ApiOrigin))
	}
	if m.ApiOriginName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.ApiOriginName)))
		i += copy(dAtA[i:], *m.ApiOriginName)
	}
	if m.GameId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.GameId))
	}
	if m.GameRound != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.GameRound))
	}
	if m.GameRoundId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.GameRoundId))
	}
	if m.GameStatus != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.GameStatus))
	}
	if m.EventId != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.EventId)))
		i += copy(dAtA[i:], *m.EventId)
	}
	if m.Duration != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Duration))
	}
	if m.RoshanRtimer != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.RoshanRtimer))
	}
	if m.Winner != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Winner)))
		i += copy(dAtA[i:], *m.Winner)
	}
	if m.TeamA != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(m.TeamA.Size()))
		n14, err := m.TeamA.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.TeamB != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(m.TeamB.Size()))
		n15, err := m.TeamB.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.PlayerAInfo != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(m.PlayerAInfo.Size()))
		n16, err := m.PlayerAInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.PlayerBInfo != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(m.PlayerBInfo.Size()))
		n17, err := m.PlayerBInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ApiDOTATeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiDOTATeam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Faction != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Faction)))
		i += copy(dAtA[i:], *m.Faction)
	}
	if len(m.Picks) > 0 {
		for _, num := range m.Picks {
			dAtA[i] = 0x10
			i++
			i = encodeVarintTableStructESportsApi(dAtA, i, uint64(num))
		}
	}
	if len(m.Bans) > 0 {
		for _, num := range m.Bans {
			dAtA[i] = 0x18
			i++
			i = encodeVarintTableStructESportsApi(dAtA, i, uint64(num))
		}
	}
	if m.Name != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Id != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Id))
	}
	if m.Score != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Score))
	}
	if m.Glod != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Glod))
	}
	if m.TowerState != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.TowerState))
	}
	if m.BarracksState != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.BarracksState))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ApiDOTAPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiDOTAPlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.HeroId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.HeroId))
	}
	if m.PlayerPart != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.PlayerPart))
	}
	if m.Kills != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Kills))
	}
	if m.Death != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Death))
	}
	if m.Assists != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Assists))
	}
	if m.Subsidy != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Subsidy))
	}
	if m.AntiSubsidy != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.AntiSubsidy))
	}
	if m.Gold != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Gold))
	}
	if m.Level != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Level))
	}
	if m.Gpm != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Gpm))
	}
	if m.Xpm != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Xpm))
	}
	if m.UltimateLevel != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.UltimateLevel))
	}
	if m.UltimateCd != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.UltimateCd))
	}
	if m.Item0 != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Item0))
	}
	if m.Item1 != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Item1))
	}
	if m.Item2 != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Item2))
	}
	if m.Item3 != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Item3))
	}
	if m.Item4 != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Item4))
	}
	if m.Item5 != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Item5))
	}
	if m.Rtimer != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Rtimer))
	}
	if m.Px != nil {
		dAtA[i] = 0xb1
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Px))))
		i += 8
	}
	if m.Py != nil {
		dAtA[i] = 0xb9
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Py))))
		i += 8
	}
	if m.NetWorth != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.NetWorth))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableESPortsLOLRealTimeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableESPortsLOLRealTimeData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("id")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Id))
	}
	if m.AppLabelId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.AppLabelId))
	}
	if m.AppLabelName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.AppLabelName)))
		i += copy(dAtA[i:], *m.AppLabelName)
	}
	if m.ApiOrigin != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.ApiOrigin))
	}
	if m.ApiOriginName != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.ApiOriginName)))
		i += copy(dAtA[i:], *m.ApiOriginName)
	}
	if m.GameId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.GameId))
	}
	if m.GameRound != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.GameRound))
	}
	if m.GameStatus != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.GameStatus))
	}
	if m.EventId != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.EventId)))
		i += copy(dAtA[i:], *m.EventId)
	}
	if m.Duration != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Duration))
	}
	if m.Winner != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Winner)))
		i += copy(dAtA[i:], *m.Winner)
	}
	if m.TeamA != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(m.TeamA.Size()))
		n18, err := m.TeamA.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.TeamB != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(m.TeamB.Size()))
		n19, err := m.TeamB.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if len(m.PlayerAInfo) > 0 {
		for _, msg := range m.PlayerAInfo {
			dAtA[i] = 0x72
			i++
			i = encodeVarintTableStructESportsApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PlayerBInfo) > 0 {
		for _, msg := range m.PlayerBInfo {
			dAtA[i] = 0x7a
			i++
			i = encodeVarintTableStructESportsApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.FirstTower != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.FirstTower))
	}
	if m.FirstSmallDragon != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.FirstSmallDragon))
	}
	if m.FirstFiveKill != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.FirstFiveKill))
	}
	if m.FirstBigDragon != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.FirstBigDragon))
	}
	if m.FirstTenKill != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.FirstTenKill))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ApiLOLTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiLOLTeam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Faction != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Faction)))
		i += copy(dAtA[i:], *m.Faction)
	}
	if len(m.Picks) > 0 {
		for _, num := range m.Picks {
			dAtA[i] = 0x10
			i++
			i = encodeVarintTableStructESportsApi(dAtA, i, uint64(num))
		}
	}
	if len(m.Bans) > 0 {
		for _, num := range m.Bans {
			dAtA[i] = 0x18
			i++
			i = encodeVarintTableStructESportsApi(dAtA, i, uint64(num))
		}
	}
	if m.Name != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Id != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Id))
	}
	if m.Score != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Score))
	}
	if m.Glod != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Glod))
	}
	if m.Subsidy != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Subsidy))
	}
	if m.TowerState != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.TowerState))
	}
	if m.Drakes != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Drakes))
	}
	if m.NahsorBarons != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.NahsorBarons))
	}
	if len(m.GoldTimeData) > 0 {
		for _, msg := range m.GoldTimeData {
			dAtA[i] = 0x62
			i++
			i = encodeVarintTableStructESportsApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ApiLOLPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiLOLPlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.HeroId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.HeroId))
	}
	if m.PlayerPart != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.PlayerPart))
	}
	if m.Kills != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Kills))
	}
	if m.Death != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Death))
	}
	if m.Assists != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Assists))
	}
	if m.Subsidy != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Subsidy))
	}
	if m.Gold != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Gold))
	}
	if m.Level != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Level))
	}
	if len(m.Item) > 0 {
		for _, num := range m.Item {
			dAtA[i] = 0x50
			i++
			i = encodeVarintTableStructESportsApi(dAtA, i, uint64(num))
		}
	}
	if len(m.SummonerSpells) > 0 {
		for _, num := range m.SummonerSpells {
			dAtA[i] = 0x58
			i++
			i = encodeVarintTableStructESportsApi(dAtA, i, uint64(num))
		}
	}
	if m.DamageTaken != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.DamageTaken))
	}
	if m.Damage != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Damage))
	}
	if m.Heal != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Heal))
	}
	if m.Hp != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Hp))
	}
	if m.Photo != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Photo)))
		i += copy(dAtA[i:], *m.Photo)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableESPortsWZRYRealTimeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableESPortsWZRYRealTimeData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("id")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Id))
	}
	if m.AppLabelId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.AppLabelId))
	}
	if m.AppLabelName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.AppLabelName)))
		i += copy(dAtA[i:], *m.AppLabelName)
	}
	if m.ApiOrigin != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.ApiOrigin))
	}
	if m.ApiOriginName != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.ApiOriginName)))
		i += copy(dAtA[i:], *m.ApiOriginName)
	}
	if m.GameId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.GameId))
	}
	if m.GameRound != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.GameRound))
	}
	if m.GameStatus != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.GameStatus))
	}
	if m.EventId != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.EventId)))
		i += copy(dAtA[i:], *m.EventId)
	}
	if m.Duration != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Duration))
	}
	if m.Winner != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Winner)))
		i += copy(dAtA[i:], *m.Winner)
	}
	if m.TeamA != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(m.TeamA.Size()))
		n20, err := m.TeamA.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.TeamB != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(m.TeamB.Size()))
		n21, err := m.TeamB.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if len(m.PlayerAInfo) > 0 {
		for _, msg := range m.PlayerAInfo {
			dAtA[i] = 0x72
			i++
			i = encodeVarintTableStructESportsApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PlayerBInfo) > 0 {
		for _, msg := range m.PlayerBInfo {
			dAtA[i] = 0x7a
			i++
			i = encodeVarintTableStructESportsApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.FirstTower != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.FirstTower))
	}
	if m.FirstSmallDragon != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.FirstSmallDragon))
	}
	if m.FirstFiveKill != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.FirstFiveKill))
	}
	if m.FirstBigDragon != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.FirstBigDragon))
	}
	if m.FirstTenKill != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.FirstTenKill))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ApiWZRYTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiWZRYTeam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Faction != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Faction)))
		i += copy(dAtA[i:], *m.Faction)
	}
	if m.IsHome != nil {
		dAtA[i] = 0x10
		i++
		if *m.IsHome {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Picks) > 0 {
		for _, num := range m.Picks {
			dAtA[i] = 0x18
			i++
			i = encodeVarintTableStructESportsApi(dAtA, i, uint64(num))
		}
	}
	if len(m.Bans) > 0 {
		for _, num := range m.Bans {
			dAtA[i] = 0x20
			i++
			i = encodeVarintTableStructESportsApi(dAtA, i, uint64(num))
		}
	}
	if m.Name != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Id != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Id))
	}
	if m.Score != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Score))
	}
	if m.TowerState != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.TowerState))
	}
	if m.Drakes != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Drakes))
	}
	if m.NahsorBarons != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.NahsorBarons))
	}
	if m.Glod != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Glod))
	}
	if len(m.GoldTimeData) > 0 {
		for _, msg := range m.GoldTimeData {
			dAtA[i] = 0x62
			i++
			i = encodeVarintTableStructESportsApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ApiWZRYPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiWZRYPlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.HeroId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.HeroId))
	}
	if m.Kills != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Kills))
	}
	if m.Death != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Death))
	}
	if m.Assists != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Assists))
	}
	if m.Gold != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Gold))
	}
	if m.Px != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Px))
	}
	if m.Py != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Py))
	}
	if m.RespawnTime != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.RespawnTime))
	}
	if len(m.Item) > 0 {
		for _, num := range m.Item {
			dAtA[i] = 0x58
			i++
			i = encodeVarintTableStructESportsApi(dAtA, i, uint64(num))
		}
	}
	if m.Photo != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(len(*m.Photo)))
		i += copy(dAtA[i:], *m.Photo)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GoldTimeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoldTimeData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GameTimeDistance != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.GameTimeDistance))
	}
	if m.Gold != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructESportsApi(dAtA, i, uint64(*m.Gold))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTableStructESportsApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TableESPortsGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Id))
	}
	if m.AppLabelId != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.AppLabelId))
	}
	if m.AppLabelName != nil {
		l = len(*m.AppLabelName)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.ApiOrigin != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.ApiOrigin))
	}
	if m.ApiOriginName != nil {
		l = len(*m.ApiOriginName)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.ReleaseFlag != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.ReleaseFlag))
	}
	if m.Dimension != nil {
		l = len(*m.Dimension)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.FightName != nil {
		l = len(*m.FightName)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.EventName != nil {
		l = len(*m.EventName)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.EventNameEn != nil {
		l = len(*m.EventNameEn)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.EventId != nil {
		l = len(*m.EventId)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.MatchStage != nil {
		l = len(*m.MatchStage)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.MatchStageId != nil {
		l = len(*m.MatchStageId)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.MatchName != nil {
		l = len(*m.MatchName)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.MatchNameEn != nil {
		l = len(*m.MatchNameEn)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.MatchId != nil {
		l = len(*m.MatchId)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.GameType != nil {
		l = len(*m.GameType)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.ScoreA != nil {
		l = len(*m.ScoreA)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.ScoreB != nil {
		l = len(*m.ScoreB)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.IsLive != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.IsLive))
	}
	if m.Bo != nil {
		l = len(*m.Bo)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.HotGame != nil {
		l = len(*m.HotGame)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.IsBet != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.IsBet))
	}
	if m.BeginTime != nil {
		l = len(*m.BeginTime)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.GameId != nil {
		l = len(*m.GameId)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.GameStatus != nil {
		l = len(*m.GameStatus)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.GameStatusType != nil {
		l = len(*m.GameStatusType)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.HaveLive != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.HaveLive))
	}
	if m.HaveRoll != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.HaveRoll))
	}
	if len(m.PlayerA) > 0 {
		for _, e := range m.PlayerA {
			l = e.Size()
			n += 2 + l + sovTableStructESportsApi(uint64(l))
		}
	}
	if len(m.PlayerB) > 0 {
		for _, e := range m.PlayerB {
			l = e.Size()
			n += 2 + l + sovTableStructESportsApi(uint64(l))
		}
	}
	if m.TeamA != nil {
		l = m.TeamA.Size()
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.TeamB != nil {
		l = m.TeamB.Size()
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.CreateTime != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.UpdateTime))
	}
	if m.GameStatusTime != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.GameStatusTime))
	}
	if m.BeginTimeInt != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.BeginTimeInt))
	}
	if m.IsLottery != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.IsLottery))
	}
	if m.HistoryId != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.HistoryId))
	}
	if m.OverTime != nil {
		l = len(*m.OverTime)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApiPlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sn != nil {
		l = len(*m.Sn)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.PlayerId != nil {
		l = len(*m.PlayerId)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApiTeam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamId != nil {
		l = len(*m.TeamId)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.NameEn != nil {
		l = len(*m.NameEn)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.Icon != nil {
		l = len(*m.Icon)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableESPortsGameDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Id))
	}
	if m.AppLabelId != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.AppLabelId))
	}
	if m.AppLabelName != nil {
		l = len(*m.AppLabelName)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.ApiOrigin != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.ApiOrigin))
	}
	if m.ApiOriginName != nil {
		l = len(*m.ApiOriginName)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.GameId != nil {
		l = len(*m.GameId)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.MatchId != nil {
		l = len(*m.MatchId)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.TeamA != nil {
		l = len(*m.TeamA)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.TeamB != nil {
		l = len(*m.TeamB)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.OverTime != nil {
		l = len(*m.OverTime)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if len(m.PlayerA) > 0 {
		for _, s := range m.PlayerA {
			l = len(s)
			n += 1 + l + sovTableStructESportsApi(uint64(l))
		}
	}
	if len(m.PlayerB) > 0 {
		for _, s := range m.PlayerB {
			l = len(s)
			n += 1 + l + sovTableStructESportsApi(uint64(l))
		}
	}
	if m.FightName != nil {
		l = len(*m.FightName)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.IsLive != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.IsLive))
	}
	if m.IsBet != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.IsBet))
	}
	if m.EventId != nil {
		l = len(*m.EventId)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.EventName != nil {
		l = len(*m.EventName)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.EventNameEn != nil {
		l = len(*m.EventNameEn)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.MatchName != nil {
		l = len(*m.MatchName)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.MatchNameEn != nil {
		l = len(*m.MatchNameEn)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.MatchStage != nil {
		l = len(*m.MatchStage)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.MatchStageEn != nil {
		l = len(*m.MatchStageEn)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.MatchStageId != nil {
		l = len(*m.MatchStageId)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.BeginTime != nil {
		l = len(*m.BeginTime)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.GameType != nil {
		l = len(*m.GameType)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.GameStatus != nil {
		l = len(*m.GameStatus)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.Bo != nil {
		l = len(*m.Bo)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.HotGame != nil {
		l = len(*m.HotGame)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.TeamAInfo != nil {
		l = m.TeamAInfo.Size()
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.TeamBInfo != nil {
		l = m.TeamBInfo.Size()
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.ScoreA != nil {
		l = len(*m.ScoreA)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.ScoreB != nil {
		l = len(*m.ScoreB)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if len(m.ApiTeamAPlayers) > 0 {
		for _, e := range m.ApiTeamAPlayers {
			l = e.Size()
			n += 2 + l + sovTableStructESportsApi(uint64(l))
		}
	}
	if len(m.ApiTeamBPlayers) > 0 {
		for _, e := range m.ApiTeamBPlayers {
			l = e.Size()
			n += 2 + l + sovTableStructESportsApi(uint64(l))
		}
	}
	if len(m.ApiLiveUrls) > 0 {
		for _, e := range m.ApiLiveUrls {
			l = e.Size()
			n += 2 + l + sovTableStructESportsApi(uint64(l))
		}
	}
	if m.Score != nil {
		l = m.Score.Size()
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.VideoUrl != nil {
		l = m.VideoUrl.Size()
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.ApiWinProbability != nil {
		l = m.ApiWinProbability.Size()
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.GameStatusType != nil {
		l = len(*m.GameStatusType)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.HaveRoll != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.HaveRoll))
	}
	if m.HaveLive != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.HaveLive))
	}
	if m.CreateTime != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.UpdateTime))
	}
	if m.SpecialId != nil {
		l = len(*m.SpecialId)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.Match != nil {
		l = len(*m.Match)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.MatchInfo != nil {
		l = len(*m.MatchInfo)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.MatchInfoEn != nil {
		l = len(*m.MatchInfoEn)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.GameStatusTime != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.GameStatusTime))
	}
	if m.LivePaths != nil {
		l = m.LivePaths.Size()
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *APITeamInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamId != nil {
		l = len(*m.TeamId)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.Icon != nil {
		l = len(*m.Icon)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.FullName != nil {
		l = len(*m.FullName)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.NameEn != nil {
		l = len(*m.NameEn)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.CountryName != nil {
		l = len(*m.CountryName)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if len(m.Matches) > 0 {
		for _, e := range m.Matches {
			l = e.Size()
			n += 1 + l + sovTableStructESportsApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *APIMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MatchId != nil {
		l = len(*m.MatchId)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.NameEn != nil {
		l = len(*m.NameEn)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.Pic != nil {
		l = len(*m.Pic)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.Icon != nil {
		l = len(*m.Icon)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *APIPlayerDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		l = len(*m.PlayerId)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.TeamId != nil {
		l = len(*m.TeamId)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.Match != nil {
		l = len(*m.Match)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.Country != nil {
		l = len(*m.Country)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.Photo != nil {
		l = len(*m.Photo)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.Position != nil {
		l = len(*m.Position)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.Sn != nil {
		l = len(*m.Sn)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.CountryName != nil {
		l = len(*m.CountryName)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *APILiveURL) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.Url != nil {
		l = len(*m.Url)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.UrlH5 != nil {
		l = len(*m.UrlH5)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.NameH5 != nil {
		l = len(*m.NameH5)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *APIScore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.A) > 0 {
		for _, s := range m.A {
			l = len(s)
			n += 1 + l + sovTableStructESportsApi(uint64(l))
		}
	}
	if len(m.B) > 0 {
		for _, s := range m.B {
			l = len(s)
			n += 1 + l + sovTableStructESportsApi(uint64(l))
		}
	}
	if len(m.Win) > 0 {
		for _, s := range m.Win {
			l = len(s)
			n += 1 + l + sovTableStructESportsApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *APIVideoURL) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Svu) > 0 {
		for _, s := range m.Svu {
			l = len(s)
			n += 1 + l + sovTableStructESportsApi(uint64(l))
		}
	}
	if len(m.SvuH5) > 0 {
		for _, s := range m.SvuH5 {
			l = len(s)
			n += 1 + l + sovTableStructESportsApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *APIWinPBObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamId != nil {
		l = len(*m.TeamId)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.WinRate != nil {
		l = len(*m.WinRate)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *APIWinPB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ThisTwoTeam) > 0 {
		for _, e := range m.ThisTwoTeam {
			l = e.Size()
			n += 1 + l + sovTableStructESportsApi(uint64(l))
		}
	}
	if len(m.All) > 0 {
		for _, e := range m.All {
			l = e.Size()
			n += 1 + l + sovTableStructESportsApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableESPortsTeamBout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Id))
	}
	if m.AppLabelId != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.AppLabelId))
	}
	if m.AppLabelName != nil {
		l = len(*m.AppLabelName)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.ApiOrigin != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.ApiOrigin))
	}
	if m.ApiOriginName != nil {
		l = len(*m.ApiOriginName)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.GameId != nil {
		l = len(*m.GameId)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.History != nil {
		l = m.History.Size()
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if len(m.Vs) > 0 {
		for _, e := range m.Vs {
			l = e.Size()
			n += 1 + l + sovTableStructESportsApi(uint64(l))
		}
	}
	if m.TeamAWinFail != nil {
		l = m.TeamAWinFail.Size()
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.TeamBWinFail != nil {
		l = m.TeamBWinFail.Size()
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.TeamANatRes != nil {
		l = m.TeamANatRes.Size()
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.TeamBNatRes != nil {
		l = m.TeamBNatRes.Size()
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *APITeamBoutObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScoreA != nil {
		l = len(*m.ScoreA)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.ScoreB != nil {
		l = len(*m.ScoreB)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.BeginTime != nil {
		l = len(*m.BeginTime)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.TeamAName != nil {
		l = len(*m.TeamAName)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.TeamBName != nil {
		l = len(*m.TeamBName)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *APITeamBoutHis) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TeamA) > 0 {
		for _, e := range m.TeamA {
			l = e.Size()
			n += 1 + l + sovTableStructESportsApi(uint64(l))
		}
	}
	if len(m.TeamB) > 0 {
		for _, e := range m.TeamB {
			l = e.Size()
			n += 1 + l + sovTableStructESportsApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *APITeamWinFaiObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsContinueWin != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.IsContinueWin))
	}
	if m.Num != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Num))
	}
	if m.TeamId != nil {
		l = len(*m.TeamId)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *APITeamNatResObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NaturalTeam != nil {
		l = len(*m.NaturalTeam)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.RestrainTeam != nil {
		l = len(*m.RestrainTeam)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.TeamId != nil {
		l = len(*m.TeamId)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableESPortsGameGuess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Id))
	}
	if m.MornRollGuessFlag != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.MornRollGuessFlag))
	}
	if m.AppLabelId != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.AppLabelId))
	}
	if m.AppLabelName != nil {
		l = len(*m.AppLabelName)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.ApiOrigin != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.ApiOrigin))
	}
	if m.ApiOriginName != nil {
		l = len(*m.ApiOriginName)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.GameId != nil {
		l = len(*m.GameId)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.BeginTime != nil {
		l = len(*m.BeginTime)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.GameStatus != nil {
		l = len(*m.GameStatus)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.GameStatusType != nil {
		l = len(*m.GameStatusType)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if len(m.Guess) > 0 {
		for _, e := range m.Guess {
			l = e.Size()
			n += 1 + l + sovTableStructESportsApi(uint64(l))
		}
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApiGuessObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Num != nil {
		l = len(*m.Num)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.BetId != nil {
		l = len(*m.BetId)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.BetTitle != nil {
		l = len(*m.BetTitle)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.BetTitleEn != nil {
		l = len(*m.BetTitleEn)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.RiskLevel != nil {
		l = len(*m.RiskLevel)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovTableStructESportsApi(uint64(l))
		}
	}
	if m.AppGuessFlag != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.AppGuessFlag))
	}
	if m.AppGuessViewFlag != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.AppGuessViewFlag))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApiItemObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BetNum != nil {
		l = len(*m.BetNum)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.TeamId != nil {
		l = len(*m.TeamId)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.Status != nil {
		l = len(*m.Status)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.PlayerId != nil {
		l = len(*m.PlayerId)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.Win != nil {
		l = len(*m.Win)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.Odds != nil {
		l = len(*m.Odds)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.BetType != nil {
		l = len(*m.BetType)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.OddsName != nil {
		l = len(*m.OddsName)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.LimitBet != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.LimitBet))
	}
	if m.CanCustom != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.CanCustom))
	}
	if m.OddsStatus != nil {
		l = len(*m.OddsStatus)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.GroupId != nil {
		l = len(*m.GroupId)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.GroupValue != nil {
		l = len(*m.GroupValue)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.GroupFlag != nil {
		l = len(*m.GroupFlag)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.BetStart != nil {
		l = len(*m.BetStart)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.BetOver != nil {
		l = len(*m.BetOver)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.OddsTime != nil {
		l = len(*m.OddsTime)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.StatusTime != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.StatusTime))
	}
	if m.ResultTime != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.ResultTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableESPortsUseRollGuess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Id))
	}
	if m.AppLabelId != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.AppLabelId))
	}
	if m.AppLabelName != nil {
		l = len(*m.AppLabelName)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.ApiOrigin != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.ApiOrigin))
	}
	if m.ApiOriginName != nil {
		l = len(*m.ApiOriginName)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.GameId != nil {
		l = len(*m.GameId)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ESPortsGameLivePathObj) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FlvUrl != nil {
		l = len(*m.FlvUrl)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.M3U8Url != nil {
		l = len(*m.M3U8Url)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.RtmpUrl != nil {
		l = len(*m.RtmpUrl)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableESPortsDOTARealTimeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Id))
	}
	if m.ApiOrigin != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.ApiOrigin))
	}
	if m.ApiOriginName != nil {
		l = len(*m.ApiOriginName)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.GameId != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.GameId))
	}
	if m.GameRound != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.GameRound))
	}
	if m.GameRoundId != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.GameRoundId))
	}
	if m.GameStatus != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.GameStatus))
	}
	if m.EventId != nil {
		l = len(*m.EventId)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.Duration != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Duration))
	}
	if m.RoshanRtimer != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.RoshanRtimer))
	}
	if m.Winner != nil {
		l = len(*m.Winner)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.TeamA != nil {
		l = m.TeamA.Size()
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.TeamB != nil {
		l = m.TeamB.Size()
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.PlayerAInfo != nil {
		l = m.PlayerAInfo.Size()
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.PlayerBInfo != nil {
		l = m.PlayerBInfo.Size()
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.CreateTime != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApiDOTATeam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Faction != nil {
		l = len(*m.Faction)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if len(m.Picks) > 0 {
		for _, e := range m.Picks {
			n += 1 + sovTableStructESportsApi(uint64(e))
		}
	}
	if len(m.Bans) > 0 {
		for _, e := range m.Bans {
			n += 1 + sovTableStructESportsApi(uint64(e))
		}
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.Id != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Id))
	}
	if m.Score != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Score))
	}
	if m.Glod != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Glod))
	}
	if m.TowerState != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.TowerState))
	}
	if m.BarracksState != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.BarracksState))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApiDOTAPlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.HeroId != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.HeroId))
	}
	if m.PlayerPart != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.PlayerPart))
	}
	if m.Kills != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Kills))
	}
	if m.Death != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Death))
	}
	if m.Assists != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Assists))
	}
	if m.Subsidy != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Subsidy))
	}
	if m.AntiSubsidy != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.AntiSubsidy))
	}
	if m.Gold != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Gold))
	}
	if m.Level != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Level))
	}
	if m.Gpm != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Gpm))
	}
	if m.Xpm != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Xpm))
	}
	if m.UltimateLevel != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.UltimateLevel))
	}
	if m.UltimateCd != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.UltimateCd))
	}
	if m.Item0 != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Item0))
	}
	if m.Item1 != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.Item1))
	}
	if m.Item2 != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.Item2))
	}
	if m.Item3 != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.Item3))
	}
	if m.Item4 != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.Item4))
	}
	if m.Item5 != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.Item5))
	}
	if m.Rtimer != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.Rtimer))
	}
	if m.Px != nil {
		n += 10
	}
	if m.Py != nil {
		n += 10
	}
	if m.NetWorth != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.NetWorth))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableESPortsLOLRealTimeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Id))
	}
	if m.AppLabelId != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.AppLabelId))
	}
	if m.AppLabelName != nil {
		l = len(*m.AppLabelName)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.ApiOrigin != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.ApiOrigin))
	}
	if m.ApiOriginName != nil {
		l = len(*m.ApiOriginName)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.GameId != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.GameId))
	}
	if m.GameRound != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.GameRound))
	}
	if m.GameStatus != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.GameStatus))
	}
	if m.EventId != nil {
		l = len(*m.EventId)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.Duration != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Duration))
	}
	if m.Winner != nil {
		l = len(*m.Winner)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.TeamA != nil {
		l = m.TeamA.Size()
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.TeamB != nil {
		l = m.TeamB.Size()
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if len(m.PlayerAInfo) > 0 {
		for _, e := range m.PlayerAInfo {
			l = e.Size()
			n += 1 + l + sovTableStructESportsApi(uint64(l))
		}
	}
	if len(m.PlayerBInfo) > 0 {
		for _, e := range m.PlayerBInfo {
			l = e.Size()
			n += 1 + l + sovTableStructESportsApi(uint64(l))
		}
	}
	if m.FirstTower != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.FirstTower))
	}
	if m.FirstSmallDragon != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.FirstSmallDragon))
	}
	if m.FirstFiveKill != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.FirstFiveKill))
	}
	if m.FirstBigDragon != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.FirstBigDragon))
	}
	if m.FirstTenKill != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.FirstTenKill))
	}
	if m.CreateTime != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApiLOLTeam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Faction != nil {
		l = len(*m.Faction)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if len(m.Picks) > 0 {
		for _, e := range m.Picks {
			n += 1 + sovTableStructESportsApi(uint64(e))
		}
	}
	if len(m.Bans) > 0 {
		for _, e := range m.Bans {
			n += 1 + sovTableStructESportsApi(uint64(e))
		}
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.Id != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Id))
	}
	if m.Score != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Score))
	}
	if m.Glod != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Glod))
	}
	if m.Subsidy != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Subsidy))
	}
	if m.TowerState != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.TowerState))
	}
	if m.Drakes != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Drakes))
	}
	if m.NahsorBarons != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.NahsorBarons))
	}
	if len(m.GoldTimeData) > 0 {
		for _, e := range m.GoldTimeData {
			l = e.Size()
			n += 1 + l + sovTableStructESportsApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApiLOLPlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.HeroId != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.HeroId))
	}
	if m.PlayerPart != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.PlayerPart))
	}
	if m.Kills != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Kills))
	}
	if m.Death != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Death))
	}
	if m.Assists != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Assists))
	}
	if m.Subsidy != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Subsidy))
	}
	if m.Gold != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Gold))
	}
	if m.Level != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Level))
	}
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			n += 1 + sovTableStructESportsApi(uint64(e))
		}
	}
	if len(m.SummonerSpells) > 0 {
		for _, e := range m.SummonerSpells {
			n += 1 + sovTableStructESportsApi(uint64(e))
		}
	}
	if m.DamageTaken != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.DamageTaken))
	}
	if m.Damage != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Damage))
	}
	if m.Heal != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Heal))
	}
	if m.Hp != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Hp))
	}
	if m.Photo != nil {
		l = len(*m.Photo)
		n += 2 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableESPortsWZRYRealTimeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Id))
	}
	if m.AppLabelId != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.AppLabelId))
	}
	if m.AppLabelName != nil {
		l = len(*m.AppLabelName)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.ApiOrigin != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.ApiOrigin))
	}
	if m.ApiOriginName != nil {
		l = len(*m.ApiOriginName)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.GameId != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.GameId))
	}
	if m.GameRound != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.GameRound))
	}
	if m.GameStatus != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.GameStatus))
	}
	if m.EventId != nil {
		l = len(*m.EventId)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.Duration != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Duration))
	}
	if m.Winner != nil {
		l = len(*m.Winner)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.TeamA != nil {
		l = m.TeamA.Size()
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.TeamB != nil {
		l = m.TeamB.Size()
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if len(m.PlayerAInfo) > 0 {
		for _, e := range m.PlayerAInfo {
			l = e.Size()
			n += 1 + l + sovTableStructESportsApi(uint64(l))
		}
	}
	if len(m.PlayerBInfo) > 0 {
		for _, e := range m.PlayerBInfo {
			l = e.Size()
			n += 1 + l + sovTableStructESportsApi(uint64(l))
		}
	}
	if m.FirstTower != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.FirstTower))
	}
	if m.FirstSmallDragon != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.FirstSmallDragon))
	}
	if m.FirstFiveKill != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.FirstFiveKill))
	}
	if m.FirstBigDragon != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.FirstBigDragon))
	}
	if m.FirstTenKill != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.FirstTenKill))
	}
	if m.CreateTime != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovTableStructESportsApi(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApiWZRYTeam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Faction != nil {
		l = len(*m.Faction)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.IsHome != nil {
		n += 2
	}
	if len(m.Picks) > 0 {
		for _, e := range m.Picks {
			n += 1 + sovTableStructESportsApi(uint64(e))
		}
	}
	if len(m.Bans) > 0 {
		for _, e := range m.Bans {
			n += 1 + sovTableStructESportsApi(uint64(e))
		}
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.Id != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Id))
	}
	if m.Score != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Score))
	}
	if m.TowerState != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.TowerState))
	}
	if m.Drakes != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Drakes))
	}
	if m.NahsorBarons != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.NahsorBarons))
	}
	if m.Glod != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Glod))
	}
	if len(m.GoldTimeData) > 0 {
		for _, e := range m.GoldTimeData {
			l = e.Size()
			n += 1 + l + sovTableStructESportsApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApiWZRYPlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.HeroId != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.HeroId))
	}
	if m.Kills != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Kills))
	}
	if m.Death != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Death))
	}
	if m.Assists != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Assists))
	}
	if m.Gold != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Gold))
	}
	if m.Px != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Px))
	}
	if m.Py != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Py))
	}
	if m.RespawnTime != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.RespawnTime))
	}
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			n += 1 + sovTableStructESportsApi(uint64(e))
		}
	}
	if m.Photo != nil {
		l = len(*m.Photo)
		n += 1 + l + sovTableStructESportsApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GoldTimeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameTimeDistance != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.GameTimeDistance))
	}
	if m.Gold != nil {
		n += 1 + sovTableStructESportsApi(uint64(*m.Gold))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTableStructESportsApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTableStructESportsApi(x uint64) (n int) {
	return sovTableStructESportsApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TableESPortsGame) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableESPortsGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableESPortsGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppLabelId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AppLabelName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiOrigin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ApiOrigin = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiOriginName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ApiOriginName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseFlag", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReleaseFlag = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimension", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Dimension = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FightName = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EventName = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNameEn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EventNameEn = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EventId = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchStage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MatchStage = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchStageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MatchStageId = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MatchName = &s
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchNameEn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MatchNameEn = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MatchId = &s
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GameType = &s
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ScoreA = &s
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ScoreB = &s
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLive", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLive = &v
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Bo = &s
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotGame", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HotGame = &s
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBet", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBet = &v
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BeginTime = &s
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GameId = &s
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GameStatus = &s
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStatusType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GameStatusType = &s
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveLive", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveLive = &v
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveRoll", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveRoll = &v
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerA", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerA = append(m.PlayerA, &ApiPlayer{})
			if err := m.PlayerA[len(m.PlayerA)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerB = append(m.PlayerB, &ApiPlayer{})
			if err := m.PlayerB[len(m.PlayerB)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamA", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamA == nil {
				m.TeamA = &ApiTeam{}
			}
			if err := m.TeamA.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamB == nil {
				m.TeamB = &ApiTeam{}
			}
			if err := m.TeamB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStatusTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GameStatusTime = &v
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTimeInt", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeginTimeInt = &v
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLottery", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLottery = &v
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HistoryId = &v
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OverTime = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Sn = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PlayerId = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameEn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NameEn = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Icon = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableESPortsGameDetail) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableESPortsGameDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableESPortsGameDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppLabelId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AppLabelName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiOrigin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ApiOrigin = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiOriginName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ApiOriginName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GameId = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MatchId = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamA = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamB = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OverTime = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerA = append(m.PlayerA, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerB = append(m.PlayerB, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FightName = &s
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLive", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLive = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBet", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBet = &v
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EventId = &s
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EventName = &s
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNameEn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EventNameEn = &s
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MatchName = &s
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchNameEn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MatchNameEn = &s
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchStage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MatchStage = &s
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchStageEn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MatchStageEn = &s
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchStageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MatchStageId = &s
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BeginTime = &s
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GameType = &s
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GameStatus = &s
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Bo = &s
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotGame", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HotGame = &s
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamAInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamAInfo == nil {
				m.TeamAInfo = &APITeamInfo{}
			}
			if err := m.TeamAInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamBInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamBInfo == nil {
				m.TeamBInfo = &APITeamInfo{}
			}
			if err := m.TeamBInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ScoreA = &s
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ScoreB = &s
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiTeamAPlayers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiTeamAPlayers = append(m.ApiTeamAPlayers, &APIPlayerDetail{})
			if err := m.ApiTeamAPlayers[len(m.ApiTeamAPlayers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiTeamBPlayers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiTeamBPlayers = append(m.ApiTeamBPlayers, &APIPlayerDetail{})
			if err := m.ApiTeamBPlayers[len(m.ApiTeamBPlayers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiLiveUrls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiLiveUrls = append(m.ApiLiveUrls, &APILiveURL{})
			if err := m.ApiLiveUrls[len(m.ApiLiveUrls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Score == nil {
				m.Score = &APIScore{}
			}
			if err := m.Score.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoUrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VideoUrl == nil {
				m.VideoUrl = &APIVideoURL{}
			}
			if err := m.VideoUrl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiWinProbability", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiWinProbability == nil {
				m.ApiWinProbability = &APIWinPB{}
			}
			if err := m.ApiWinProbability.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStatusType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GameStatusType = &s
			iNdEx = postIndex
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveRoll", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveRoll = &v
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveLive", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveLive = &v
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SpecialId = &s
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Match = &s
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MatchInfo = &s
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchInfoEn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MatchInfoEn = &s
			iNdEx = postIndex
		case 48:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStatusTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GameStatusTime = &v
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LivePaths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LivePaths == nil {
				m.LivePaths = &ESPortsGameLivePathObj{}
			}
			if err := m.LivePaths.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APITeamInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APITeamInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APITeamInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Icon = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FullName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameEn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NameEn = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CountryName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Matches = append(m.Matches, &APIMatch{})
			if err := m.Matches[len(m.Matches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MatchId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameEn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NameEn = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Pic = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Icon = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIPlayerDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIPlayerDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIPlayerDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PlayerId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamId = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Match = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Country = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Photo = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Position = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Sn = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CountryName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APILiveURL) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APILiveURL: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APILiveURL: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Url = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlH5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UrlH5 = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameH5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NameH5 = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.A = append(m.A, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.B = append(m.B, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Win = append(m.Win, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIVideoURL) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIVideoURL: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIVideoURL: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Svu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Svu = append(m.Svu, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvuH5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SvuH5 = append(m.SvuH5, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIWinPBObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIWinPBObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIWinPBObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WinRate = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIWinPB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIWinPB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIWinPB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThisTwoTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThisTwoTeam = append(m.ThisTwoTeam, &APIWinPBObject{})
			if err := m.ThisTwoTeam[len(m.ThisTwoTeam)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field All", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.All = append(m.All, &APIWinPBObject{})
			if err := m.All[len(m.All)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableESPortsTeamBout) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableESPortsTeamBout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableESPortsTeamBout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppLabelId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AppLabelName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiOrigin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ApiOrigin = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiOriginName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ApiOriginName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GameId = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.History == nil {
				m.History = &APITeamBoutHis{}
			}
			if err := m.History.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vs = append(m.Vs, &APITeamBoutObject{})
			if err := m.Vs[len(m.Vs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamAWinFail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamAWinFail == nil {
				m.TeamAWinFail = &APITeamWinFaiObject{}
			}
			if err := m.TeamAWinFail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamBWinFail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamBWinFail == nil {
				m.TeamBWinFail = &APITeamWinFaiObject{}
			}
			if err := m.TeamBWinFail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamANatRes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamANatRes == nil {
				m.TeamANatRes = &APITeamNatResObject{}
			}
			if err := m.TeamANatRes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamBNatRes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamBNatRes == nil {
				m.TeamBNatRes = &APITeamNatResObject{}
			}
			if err := m.TeamBNatRes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APITeamBoutObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APITeamBoutObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APITeamBoutObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ScoreA = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ScoreB = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BeginTime = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamAName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamAName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamBName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamBName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APITeamBoutHis) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APITeamBoutHis: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APITeamBoutHis: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamA", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamA = append(m.TeamA, &APITeamBoutObject{})
			if err := m.TeamA[len(m.TeamA)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamB = append(m.TeamB, &APITeamBoutObject{})
			if err := m.TeamB[len(m.TeamB)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APITeamWinFaiObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APITeamWinFaiObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APITeamWinFaiObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsContinueWin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsContinueWin = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Num = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APITeamNatResObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APITeamNatResObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APITeamNatResObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NaturalTeam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NaturalTeam = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrainTeam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RestrainTeam = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableESPortsGameGuess) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableESPortsGameGuess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableESPortsGameGuess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MornRollGuessFlag", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MornRollGuessFlag = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppLabelId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AppLabelName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiOrigin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ApiOrigin = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiOriginName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ApiOriginName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GameId = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BeginTime = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GameStatus = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStatusType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GameStatusType = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Guess = append(m.Guess, &ApiGuessObject{})
			if err := m.Guess[len(m.Guess)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("mornRoll_guess_flag")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiGuessObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiGuessObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiGuessObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Num = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetId = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetTitle = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetTitleEn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetTitleEn = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RiskLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RiskLevel = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ApiItemObject{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppGuessFlag", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppGuessFlag = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppGuessViewFlag", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppGuessViewFlag = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiItemObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiItemObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiItemObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetNum = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamId = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Status = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PlayerId = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Win = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Odds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Odds = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetType = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OddsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OddsName = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitBet", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LimitBet = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanCustom", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanCustom = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OddsStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OddsStatus = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GroupId = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GroupValue = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GroupFlag = &s
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetStart", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetStart = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetOver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BetOver = &s
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OddsTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OddsTime = &s
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StatusTime = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ResultTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableESPortsUseRollGuess) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableESPortsUseRollGuess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableESPortsUseRollGuess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppLabelId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AppLabelName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiOrigin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ApiOrigin = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiOriginName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ApiOriginName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GameId = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESPortsGameLivePathObj) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESPortsGameLivePathObj: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESPortsGameLivePathObj: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlvUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FlvUrl = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field M3U8Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.M3U8Url = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RtmpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RtmpUrl = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableESPortsDOTARealTimeData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableESPortsDOTARealTimeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableESPortsDOTARealTimeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiOrigin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ApiOrigin = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiOriginName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ApiOriginName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GameId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameRound", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GameRound = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameRoundId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GameRoundId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStatus", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GameStatus = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EventId = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Duration = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoshanRtimer", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RoshanRtimer = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Winner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Winner = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamA", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamA == nil {
				m.TeamA = &ApiDOTATeam{}
			}
			if err := m.TeamA.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamB == nil {
				m.TeamB = &ApiDOTATeam{}
			}
			if err := m.TeamB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerAInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerAInfo == nil {
				m.PlayerAInfo = &ApiDOTAPlayer{}
			}
			if err := m.PlayerAInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerBInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerBInfo == nil {
				m.PlayerBInfo = &ApiDOTAPlayer{}
			}
			if err := m.PlayerBInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiDOTATeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiDOTATeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiDOTATeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Faction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Faction = &s
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructESportsApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Picks = append(m.Picks, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructESportsApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructESportsApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructESportsApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Picks) == 0 {
					m.Picks = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructESportsApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Picks = append(m.Picks, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Picks", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructESportsApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Bans = append(m.Bans, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructESportsApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructESportsApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructESportsApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Bans) == 0 {
					m.Bans = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructESportsApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Bans = append(m.Bans, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Bans", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Score = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Glod", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Glod = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TowerState", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TowerState = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BarracksState", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BarracksState = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiDOTAPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiDOTAPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiDOTAPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HeroId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerPart", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerPart = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kills", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Kills = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Death", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Death = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assists", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Assists = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subsidy", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Subsidy = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AntiSubsidy", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AntiSubsidy = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Gold = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Level = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gpm", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Gpm = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xpm", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Xpm = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UltimateLevel", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UltimateLevel = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UltimateCd", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UltimateCd = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item0", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Item0 = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item1", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Item1 = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item2", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Item2 = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item3", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Item3 = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item4", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Item4 = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item5", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Item5 = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtimer", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rtimer = &v
		case 22:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Px", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Px = &v2
		case 23:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Py", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Py = &v2
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetWorth", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NetWorth = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableESPortsLOLRealTimeData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableESPortsLOLRealTimeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableESPortsLOLRealTimeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppLabelId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AppLabelName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiOrigin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ApiOrigin = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiOriginName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ApiOriginName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GameId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameRound", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GameRound = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStatus", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GameStatus = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EventId = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Duration = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Winner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Winner = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamA", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamA == nil {
				m.TeamA = &ApiLOLTeam{}
			}
			if err := m.TeamA.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamB == nil {
				m.TeamB = &ApiLOLTeam{}
			}
			if err := m.TeamB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerAInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerAInfo = append(m.PlayerAInfo, &ApiLOLPlayer{})
			if err := m.PlayerAInfo[len(m.PlayerAInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerBInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerBInfo = append(m.PlayerBInfo, &ApiLOLPlayer{})
			if err := m.PlayerBInfo[len(m.PlayerBInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstTower", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstTower = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstSmallDragon", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstSmallDragon = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstFiveKill", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstFiveKill = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstBigDragon", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstBigDragon = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstTenKill", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstTenKill = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiLOLTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiLOLTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiLOLTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Faction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Faction = &s
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructESportsApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Picks = append(m.Picks, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructESportsApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructESportsApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructESportsApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Picks) == 0 {
					m.Picks = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructESportsApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Picks = append(m.Picks, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Picks", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructESportsApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Bans = append(m.Bans, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructESportsApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructESportsApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructESportsApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Bans) == 0 {
					m.Bans = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructESportsApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Bans = append(m.Bans, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Bans", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Score = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Glod", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Glod = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subsidy", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Subsidy = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TowerState", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TowerState = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Drakes", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Drakes = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NahsorBarons", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NahsorBarons = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldTimeData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoldTimeData = append(m.GoldTimeData, &GoldTimeData{})
			if err := m.GoldTimeData[len(m.GoldTimeData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiLOLPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiLOLPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiLOLPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HeroId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerPart", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerPart = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kills", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Kills = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Death", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Death = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assists", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Assists = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subsidy", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Subsidy = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Gold = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Level = &v
		case 10:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructESportsApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Item = append(m.Item, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructESportsApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructESportsApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructESportsApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Item) == 0 {
					m.Item = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructESportsApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Item = append(m.Item, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
		case 11:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructESportsApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SummonerSpells = append(m.SummonerSpells, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructESportsApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructESportsApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructESportsApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SummonerSpells) == 0 {
					m.SummonerSpells = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructESportsApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SummonerSpells = append(m.SummonerSpells, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SummonerSpells", wireType)
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DamageTaken", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DamageTaken = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Damage", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Damage = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heal", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Heal = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hp", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hp = &v
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Photo = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableESPortsWZRYRealTimeData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableESPortsWZRYRealTimeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableESPortsWZRYRealTimeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppLabelId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AppLabelName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiOrigin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ApiOrigin = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiOriginName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ApiOriginName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GameId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameRound", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GameRound = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStatus", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GameStatus = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EventId = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Duration = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Winner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Winner = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamA", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamA == nil {
				m.TeamA = &ApiWZRYTeam{}
			}
			if err := m.TeamA.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamB == nil {
				m.TeamB = &ApiWZRYTeam{}
			}
			if err := m.TeamB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerAInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerAInfo = append(m.PlayerAInfo, &ApiWZRYPlayer{})
			if err := m.PlayerAInfo[len(m.PlayerAInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerBInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerBInfo = append(m.PlayerBInfo, &ApiWZRYPlayer{})
			if err := m.PlayerBInfo[len(m.PlayerBInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstTower", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstTower = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstSmallDragon", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstSmallDragon = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstFiveKill", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstFiveKill = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstBigDragon", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstBigDragon = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstTenKill", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstTenKill = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiWZRYTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiWZRYTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiWZRYTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Faction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Faction = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHome", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsHome = &b
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructESportsApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Picks = append(m.Picks, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructESportsApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructESportsApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructESportsApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Picks) == 0 {
					m.Picks = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructESportsApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Picks = append(m.Picks, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Picks", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructESportsApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Bans = append(m.Bans, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructESportsApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructESportsApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructESportsApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Bans) == 0 {
					m.Bans = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructESportsApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Bans = append(m.Bans, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Bans", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Score = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TowerState", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TowerState = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Drakes", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Drakes = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NahsorBarons", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NahsorBarons = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Glod", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Glod = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldTimeData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoldTimeData = append(m.GoldTimeData, &GoldTimeData{})
			if err := m.GoldTimeData[len(m.GoldTimeData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiWZRYPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiWZRYPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiWZRYPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HeroId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kills", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Kills = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Death", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Death = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assists", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Assists = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Gold = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Px", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Px = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Py", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Py = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespawnTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RespawnTime = &v
		case 11:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructESportsApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Item = append(m.Item, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructESportsApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructESportsApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructESportsApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Item) == 0 {
					m.Item = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructESportsApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Item = append(m.Item, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Photo = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoldTimeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoldTimeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoldTimeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameTimeDistance", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GameTimeDistance = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Gold = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructESportsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructESportsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTableStructESportsApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTableStructESportsApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTableStructESportsApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTableStructESportsApi
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTableStructESportsApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTableStructESportsApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTableStructESportsApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTableStructESportsApi
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTableStructESportsApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTableStructESportsApi   = fmt.Errorf("proto: integer overflow")
)
