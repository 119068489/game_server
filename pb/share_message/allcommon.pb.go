// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: allcommon.proto

package share_message

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_akqp2019_protobuf_proto "github.com/akqp2019/protobuf/proto"
	proto "github.com/akqp2019/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type BroadCastData struct {
	Level                *int32   `protobuf:"varint,1,req,name=Level" json:"Level,omitempty" bson:"Level,omitempty"`
	Content              *string  `protobuf:"bytes,2,req,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	Count                *int32   `protobuf:"varint,3,req,name=Count" json:"Count,omitempty" bson:"Count,omitempty"`
	BroadId              *int32   `protobuf:"varint,4,opt,name=BroadId" json:"BroadId,omitempty" bson:"BroadId,omitempty"`
	MsgType              *int32   `protobuf:"varint,5,opt,name=MsgType" json:"MsgType,omitempty" bson:"MsgType,omitempty"`
	Amount               *int64   `protobuf:"varint,6,opt,name=Amount" json:"Amount,omitempty" bson:"Amount,omitempty"`
	NickName             *string  `protobuf:"bytes,7,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *BroadCastData) Reset()         { *m = BroadCastData{} }
func (m *BroadCastData) String() string { return proto.CompactTextString(m) }
func (*BroadCastData) ProtoMessage()    {}
func (*BroadCastData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{0}
}
func (m *BroadCastData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BroadCastData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BroadCastData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BroadCastData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadCastData.Merge(m, src)
}
func (m *BroadCastData) XXX_Size() int {
	return m.Size()
}
func (m *BroadCastData) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadCastData.DiscardUnknown(m)
}

var xxx_messageInfo_BroadCastData proto.InternalMessageInfo

func (m *BroadCastData) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *BroadCastData) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *BroadCastData) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *BroadCastData) GetBroadId() int32 {
	if m != nil && m.BroadId != nil {
		return *m.BroadId
	}
	return 0
}

func (m *BroadCastData) GetMsgType() int32 {
	if m != nil && m.MsgType != nil {
		return *m.MsgType
	}
	return 0
}

func (m *BroadCastData) GetAmount() int64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *BroadCastData) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

type BroadIdReq struct {
	BroadId              *int32   `protobuf:"varint,4,req,name=BroadId" json:"BroadId,omitempty" bson:"BroadId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *BroadIdReq) Reset()         { *m = BroadIdReq{} }
func (m *BroadIdReq) String() string { return proto.CompactTextString(m) }
func (*BroadIdReq) ProtoMessage()    {}
func (*BroadIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{1}
}
func (m *BroadIdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BroadIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BroadIdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BroadIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadIdReq.Merge(m, src)
}
func (m *BroadIdReq) XXX_Size() int {
	return m.Size()
}
func (m *BroadIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_BroadIdReq proto.InternalMessageInfo

func (m *BroadIdReq) GetBroadId() int32 {
	if m != nil && m.BroadId != nil {
		return *m.BroadId
	}
	return 0
}

type BroadCastMsg struct {
	Data                 []*BroadCastData `protobuf:"bytes,1,rep,name=Data" json:"Data,omitempty" bson:"Data,omitempty"`
	Site                 *string          `protobuf:"bytes,2,opt,name=Site" json:"Site,omitempty" bson:"Site,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-" bson:"-"`
	XXX_unrecognized     []byte           `json:"-" bson:"-"`
	XXX_sizecache        int32            `json:"-" bson:"-"`
}

func (m *BroadCastMsg) Reset()         { *m = BroadCastMsg{} }
func (m *BroadCastMsg) String() string { return proto.CompactTextString(m) }
func (*BroadCastMsg) ProtoMessage()    {}
func (*BroadCastMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{2}
}
func (m *BroadCastMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BroadCastMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BroadCastMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BroadCastMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadCastMsg.Merge(m, src)
}
func (m *BroadCastMsg) XXX_Size() int {
	return m.Size()
}
func (m *BroadCastMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadCastMsg.DiscardUnknown(m)
}

var xxx_messageInfo_BroadCastMsg proto.InternalMessageInfo

func (m *BroadCastMsg) GetData() []*BroadCastData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *BroadCastMsg) GetSite() string {
	if m != nil && m.Site != nil {
		return *m.Site
	}
	return ""
}

type DynamicDataListPage struct {
	DynamicData          []*DynamicData `protobuf:"bytes,1,rep,name=DynamicData" json:"DynamicData,omitempty" bson:"DynamicData,omitempty"`
	TotalCount           *int32         `protobuf:"varint,2,opt,name=TotalCount" json:"TotalCount,omitempty" bson:"TotalCount,omitempty"`
	PageCount            *int32         `protobuf:"varint,3,opt,name=PageCount" json:"PageCount,omitempty" bson:"PageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-" bson:"-"`
	XXX_unrecognized     []byte         `json:"-" bson:"-"`
	XXX_sizecache        int32          `json:"-" bson:"-"`
}

func (m *DynamicDataListPage) Reset()         { *m = DynamicDataListPage{} }
func (m *DynamicDataListPage) String() string { return proto.CompactTextString(m) }
func (*DynamicDataListPage) ProtoMessage()    {}
func (*DynamicDataListPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{3}
}
func (m *DynamicDataListPage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynamicDataListPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynamicDataListPage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynamicDataListPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynamicDataListPage.Merge(m, src)
}
func (m *DynamicDataListPage) XXX_Size() int {
	return m.Size()
}
func (m *DynamicDataListPage) XXX_DiscardUnknown() {
	xxx_messageInfo_DynamicDataListPage.DiscardUnknown(m)
}

var xxx_messageInfo_DynamicDataListPage proto.InternalMessageInfo

func (m *DynamicDataListPage) GetDynamicData() []*DynamicData {
	if m != nil {
		return m.DynamicData
	}
	return nil
}

func (m *DynamicDataListPage) GetTotalCount() int32 {
	if m != nil && m.TotalCount != nil {
		return *m.TotalCount
	}
	return 0
}

func (m *DynamicDataListPage) GetPageCount() int32 {
	if m != nil && m.PageCount != nil {
		return *m.PageCount
	}
	return 0
}

type TeamPlayerInfo struct {
	PlayerId             *int64               `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Account              *string              `protobuf:"bytes,2,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	NickName             *string              `protobuf:"bytes,3,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	HeadIcon             *string              `protobuf:"bytes,4,opt,name=HeadIcon" json:"HeadIcon,omitempty" bson:"HeadIcon,omitempty"`
	Sex                  *int32               `protobuf:"varint,5,opt,name=Sex" json:"Sex,omitempty" bson:"Sex,omitempty"`
	ReName               *string              `protobuf:"bytes,6,opt,name=ReName" json:"ReName,omitempty" bson:"ReName,omitempty"`
	TeamName             *string              `protobuf:"bytes,7,opt,name=TeamName" json:"TeamName,omitempty" bson:"TeamName,omitempty"`
	Phone                *string              `protobuf:"bytes,8,opt,name=Phone" json:"Phone,omitempty" bson:"Phone,omitempty"`
	Photo                []string             `protobuf:"bytes,9,rep,name=Photo" json:"Photo,omitempty" bson:"Photo,omitempty"`
	Signature            *string              `protobuf:"bytes,10,opt,name=Signature" json:"Signature,omitempty" bson:"Signature,omitempty"`
	Provice              *string              `protobuf:"bytes,11,opt,name=Provice" json:"Provice,omitempty" bson:"Provice,omitempty"`
	City                 *string              `protobuf:"bytes,12,opt,name=City" json:"City,omitempty" bson:"City,omitempty"`
	Channel              *string              `protobuf:"bytes,13,opt,name=Channel" json:"Channel,omitempty" bson:"Channel,omitempty"`
	State                *int32               `protobuf:"varint,14,opt,name=State" json:"State,omitempty" bson:"State,omitempty"`
	TeamId               *int64               `protobuf:"varint,15,opt,name=TeamId" json:"TeamId,omitempty" bson:"TeamId,omitempty"`
	Type                 *int32               `protobuf:"varint,16,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	Fans                 *int32               `protobuf:"varint,17,opt,name=Fans" json:"Fans,omitempty" bson:"Fans,omitempty"`
	Attentions           *int32               `protobuf:"varint,18,opt,name=Attentions" json:"Attentions,omitempty" bson:"Attentions,omitempty"`
	Zans                 *int32               `protobuf:"varint,19,opt,name=Zans" json:"Zans,omitempty" bson:"Zans,omitempty"`
	Icon                 *int32               `protobuf:"varint,20,opt,name=Icon" json:"Icon,omitempty" bson:"Icon,omitempty"`
	DynamicData          *DynamicDataListPage `protobuf:"bytes,21,opt,name=DynamicData" json:"DynamicData,omitempty" bson:"DynamicData,omitempty"`
	IsOnMyAttentionList  *bool                `protobuf:"varint,22,opt,name=IsOnMyAttentionList" json:"IsOnMyAttentionList,omitempty" bson:"IsOnMyAttentionList,omitempty"`
	IsOnMyBlackList      *bool                `protobuf:"varint,23,opt,name=IsOnMyBlackList" json:"IsOnMyBlackList,omitempty" bson:"IsOnMyBlackList,omitempty"`
	LabelInfo            []*LabelInfo         `protobuf:"bytes,24,rep,name=LabelInfo" json:"LabelInfo,omitempty" bson:"LabelInfo,omitempty"`
	AccountState         *int32               `protobuf:"varint,25,opt,name=AccountState" json:"AccountState,omitempty" bson:"AccountState,omitempty"`
	BackgroundImageURL   *string              `protobuf:"bytes,26,opt,name=BackgroundImageURL" json:"BackgroundImageURL,omitempty" bson:"BackgroundImageURL,omitempty"`
	Types                *int32               `protobuf:"varint,27,opt,name=Types" json:"Types,omitempty" bson:"Types,omitempty"`
	AddFriendType        *int32               `protobuf:"varint,28,opt,name=AddFriendType" json:"AddFriendType,omitempty" bson:"AddFriendType,omitempty"`
	TeamPosition         *int32               `protobuf:"varint,29,opt,name=TeamPosition" json:"TeamPosition,omitempty" bson:"TeamPosition,omitempty"`
	Constellation        *int32               `protobuf:"varint,30,opt,name=Constellation" json:"Constellation,omitempty" bson:"Constellation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-" bson:"-"`
	XXX_unrecognized     []byte               `json:"-" bson:"-"`
	XXX_sizecache        int32                `json:"-" bson:"-"`
}

func (m *TeamPlayerInfo) Reset()         { *m = TeamPlayerInfo{} }
func (m *TeamPlayerInfo) String() string { return proto.CompactTextString(m) }
func (*TeamPlayerInfo) ProtoMessage()    {}
func (*TeamPlayerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{4}
}
func (m *TeamPlayerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamPlayerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamPlayerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamPlayerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamPlayerInfo.Merge(m, src)
}
func (m *TeamPlayerInfo) XXX_Size() int {
	return m.Size()
}
func (m *TeamPlayerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamPlayerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TeamPlayerInfo proto.InternalMessageInfo

func (m *TeamPlayerInfo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *TeamPlayerInfo) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *TeamPlayerInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *TeamPlayerInfo) GetHeadIcon() string {
	if m != nil && m.HeadIcon != nil {
		return *m.HeadIcon
	}
	return ""
}

func (m *TeamPlayerInfo) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *TeamPlayerInfo) GetReName() string {
	if m != nil && m.ReName != nil {
		return *m.ReName
	}
	return ""
}

func (m *TeamPlayerInfo) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *TeamPlayerInfo) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *TeamPlayerInfo) GetPhoto() []string {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *TeamPlayerInfo) GetSignature() string {
	if m != nil && m.Signature != nil {
		return *m.Signature
	}
	return ""
}

func (m *TeamPlayerInfo) GetProvice() string {
	if m != nil && m.Provice != nil {
		return *m.Provice
	}
	return ""
}

func (m *TeamPlayerInfo) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

func (m *TeamPlayerInfo) GetChannel() string {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return ""
}

func (m *TeamPlayerInfo) GetState() int32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

func (m *TeamPlayerInfo) GetTeamId() int64 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *TeamPlayerInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *TeamPlayerInfo) GetFans() int32 {
	if m != nil && m.Fans != nil {
		return *m.Fans
	}
	return 0
}

func (m *TeamPlayerInfo) GetAttentions() int32 {
	if m != nil && m.Attentions != nil {
		return *m.Attentions
	}
	return 0
}

func (m *TeamPlayerInfo) GetZans() int32 {
	if m != nil && m.Zans != nil {
		return *m.Zans
	}
	return 0
}

func (m *TeamPlayerInfo) GetIcon() int32 {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return 0
}

func (m *TeamPlayerInfo) GetDynamicData() *DynamicDataListPage {
	if m != nil {
		return m.DynamicData
	}
	return nil
}

func (m *TeamPlayerInfo) GetIsOnMyAttentionList() bool {
	if m != nil && m.IsOnMyAttentionList != nil {
		return *m.IsOnMyAttentionList
	}
	return false
}

func (m *TeamPlayerInfo) GetIsOnMyBlackList() bool {
	if m != nil && m.IsOnMyBlackList != nil {
		return *m.IsOnMyBlackList
	}
	return false
}

func (m *TeamPlayerInfo) GetLabelInfo() []*LabelInfo {
	if m != nil {
		return m.LabelInfo
	}
	return nil
}

func (m *TeamPlayerInfo) GetAccountState() int32 {
	if m != nil && m.AccountState != nil {
		return *m.AccountState
	}
	return 0
}

func (m *TeamPlayerInfo) GetBackgroundImageURL() string {
	if m != nil && m.BackgroundImageURL != nil {
		return *m.BackgroundImageURL
	}
	return ""
}

func (m *TeamPlayerInfo) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *TeamPlayerInfo) GetAddFriendType() int32 {
	if m != nil && m.AddFriendType != nil {
		return *m.AddFriendType
	}
	return 0
}

func (m *TeamPlayerInfo) GetTeamPosition() int32 {
	if m != nil && m.TeamPosition != nil {
		return *m.TeamPosition
	}
	return 0
}

func (m *TeamPlayerInfo) GetConstellation() int32 {
	if m != nil && m.Constellation != nil {
		return *m.Constellation
	}
	return 0
}

type LabelInfo struct {
	Id                   *int32   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *LabelInfo) Reset()         { *m = LabelInfo{} }
func (m *LabelInfo) String() string { return proto.CompactTextString(m) }
func (*LabelInfo) ProtoMessage()    {}
func (*LabelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{5}
}
func (m *LabelInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LabelInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LabelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelInfo.Merge(m, src)
}
func (m *LabelInfo) XXX_Size() int {
	return m.Size()
}
func (m *LabelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LabelInfo proto.InternalMessageInfo

func (m *LabelInfo) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LabelInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type NoticeInfo struct {
	IsAll                *bool    `protobuf:"varint,1,opt,name=IsAll" json:"IsAll,omitempty" bson:"IsAll,omitempty"`
	PlayerId             []int64  `protobuf:"varint,2,rep,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *NoticeInfo) Reset()         { *m = NoticeInfo{} }
func (m *NoticeInfo) String() string { return proto.CompactTextString(m) }
func (*NoticeInfo) ProtoMessage()    {}
func (*NoticeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{6}
}
func (m *NoticeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoticeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoticeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoticeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoticeInfo.Merge(m, src)
}
func (m *NoticeInfo) XXX_Size() int {
	return m.Size()
}
func (m *NoticeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NoticeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NoticeInfo proto.InternalMessageInfo

func (m *NoticeInfo) GetIsAll() bool {
	if m != nil && m.IsAll != nil {
		return *m.IsAll
	}
	return false
}

func (m *NoticeInfo) GetPlayerId() []int64 {
	if m != nil {
		return m.PlayerId
	}
	return nil
}

type Chat struct {
	SourceId      *int64          `protobuf:"varint,1,opt,name=SourceId" json:"SourceId,omitempty" bson:"SourceId,omitempty"`
	TargetId      *int64          `protobuf:"varint,2,opt,name=TargetId" json:"TargetId,omitempty" bson:"TargetId,omitempty"`
	Content       *string         `protobuf:"bytes,3,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	ChatType      *int32          `protobuf:"varint,4,opt,name=ChatType" json:"ChatType,omitempty" bson:"ChatType,omitempty"`
	PlayIds       []int64         `protobuf:"varint,5,rep,name=PlayIds" json:"PlayIds,omitempty" bson:"PlayIds,omitempty"`
	Time          *int64          `protobuf:"varint,6,opt,name=Time" json:"Time,omitempty" bson:"Time,omitempty"`
	LogId         *int64          `protobuf:"varint,7,opt,name=LogId" json:"LogId,omitempty" bson:"LogId,omitempty"`
	ContentType   *int32          `protobuf:"varint,8,opt,name=ContentType" json:"ContentType,omitempty" bson:"ContentType,omitempty"`
	CardInfo      *TeamPlayerInfo `protobuf:"bytes,10,opt,name=CardInfo" json:"CardInfo,omitempty" bson:"CardInfo,omitempty"`
	CardPlayerId  *int64          `protobuf:"varint,11,opt,name=CardPlayerId" json:"CardPlayerId,omitempty" bson:"CardPlayerId,omitempty"`
	Mark          *string         `protobuf:"bytes,12,opt,name=Mark" json:"Mark,omitempty" bson:"Mark,omitempty"`
	IsSuccessSend *int32          `protobuf:"varint,13,opt,name=IsSuccessSend" json:"IsSuccessSend,omitempty" bson:"IsSuccessSend,omitempty"`
	//7不允许陌生人打招呼，8不允许群聊打招呼，9不允许二维码打招呼，10，不允许名片打招呼，11你的好友达上线，12对方的好友达上线,13陌生人发送次数达2次
	Cite                 *string     `protobuf:"bytes,14,opt,name=Cite" json:"Cite,omitempty" bson:"Cite,omitempty"`
	SourceName           *string     `protobuf:"bytes,15,opt,name=SourceName" json:"SourceName,omitempty" bson:"SourceName,omitempty"`
	SourceHeadIcon       *string     `protobuf:"bytes,16,opt,name=SourceHeadIcon" json:"SourceHeadIcon,omitempty" bson:"SourceHeadIcon,omitempty"`
	SourceSex            *int32      `protobuf:"varint,17,opt,name=SourceSex" json:"SourceSex,omitempty" bson:"SourceSex,omitempty"`
	NoticeInfo           *NoticeInfo `protobuf:"bytes,18,opt,name=NoticeInfo" json:"NoticeInfo,omitempty" bson:"NoticeInfo,omitempty"`
	EvilType             *int32      `protobuf:"varint,19,opt,name=EvilType" json:"EvilType,omitempty" bson:"EvilType,omitempty"`
	DirtyWord            *string     `protobuf:"bytes,20,opt,name=DirtyWord" json:"DirtyWord,omitempty" bson:"DirtyWord,omitempty"`
	IsWelcome            *bool       `protobuf:"varint,21,opt,name=IsWelcome" json:"IsWelcome,omitempty" bson:"IsWelcome,omitempty"`
	QPId                 *int64      `protobuf:"varint,22,opt,name=QPId" json:"QPId,omitempty" bson:"QPId,omitempty"`
	Types                *int32      `protobuf:"varint,23,opt,name=Types" json:"-" bson:"-"`
	SessionId            *string     `protobuf:"bytes,24,opt,name=SessionId" json:"SessionId,omitempty" bson:"SessionId,omitempty"`
	SayType              *int32      `protobuf:"varint,25,opt,name=SayType" json:"SayType,omitempty" bson:"SayType,omitempty"`
	ExtentValue          *string     `protobuf:"bytes,26,opt,name=ExtentValue" json:"ExtentValue,omitempty" bson:"ExtentValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-" bson:"-"`
	XXX_unrecognized     []byte      `json:"-" bson:"-"`
	XXX_sizecache        int32       `json:"-" bson:"-"`
}

func (m *Chat) Reset()         { *m = Chat{} }
func (m *Chat) String() string { return proto.CompactTextString(m) }
func (*Chat) ProtoMessage()    {}
func (*Chat) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{7}
}
func (m *Chat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Chat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Chat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Chat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chat.Merge(m, src)
}
func (m *Chat) XXX_Size() int {
	return m.Size()
}
func (m *Chat) XXX_DiscardUnknown() {
	xxx_messageInfo_Chat.DiscardUnknown(m)
}

var xxx_messageInfo_Chat proto.InternalMessageInfo

func (m *Chat) GetSourceId() int64 {
	if m != nil && m.SourceId != nil {
		return *m.SourceId
	}
	return 0
}

func (m *Chat) GetTargetId() int64 {
	if m != nil && m.TargetId != nil {
		return *m.TargetId
	}
	return 0
}

func (m *Chat) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *Chat) GetChatType() int32 {
	if m != nil && m.ChatType != nil {
		return *m.ChatType
	}
	return 0
}

func (m *Chat) GetPlayIds() []int64 {
	if m != nil {
		return m.PlayIds
	}
	return nil
}

func (m *Chat) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *Chat) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *Chat) GetContentType() int32 {
	if m != nil && m.ContentType != nil {
		return *m.ContentType
	}
	return 0
}

func (m *Chat) GetCardInfo() *TeamPlayerInfo {
	if m != nil {
		return m.CardInfo
	}
	return nil
}

func (m *Chat) GetCardPlayerId() int64 {
	if m != nil && m.CardPlayerId != nil {
		return *m.CardPlayerId
	}
	return 0
}

func (m *Chat) GetMark() string {
	if m != nil && m.Mark != nil {
		return *m.Mark
	}
	return ""
}

func (m *Chat) GetIsSuccessSend() int32 {
	if m != nil && m.IsSuccessSend != nil {
		return *m.IsSuccessSend
	}
	return 0
}

func (m *Chat) GetCite() string {
	if m != nil && m.Cite != nil {
		return *m.Cite
	}
	return ""
}

func (m *Chat) GetSourceName() string {
	if m != nil && m.SourceName != nil {
		return *m.SourceName
	}
	return ""
}

func (m *Chat) GetSourceHeadIcon() string {
	if m != nil && m.SourceHeadIcon != nil {
		return *m.SourceHeadIcon
	}
	return ""
}

func (m *Chat) GetSourceSex() int32 {
	if m != nil && m.SourceSex != nil {
		return *m.SourceSex
	}
	return 0
}

func (m *Chat) GetNoticeInfo() *NoticeInfo {
	if m != nil {
		return m.NoticeInfo
	}
	return nil
}

func (m *Chat) GetEvilType() int32 {
	if m != nil && m.EvilType != nil {
		return *m.EvilType
	}
	return 0
}

func (m *Chat) GetDirtyWord() string {
	if m != nil && m.DirtyWord != nil {
		return *m.DirtyWord
	}
	return ""
}

func (m *Chat) GetIsWelcome() bool {
	if m != nil && m.IsWelcome != nil {
		return *m.IsWelcome
	}
	return false
}

func (m *Chat) GetQPId() int64 {
	if m != nil && m.QPId != nil {
		return *m.QPId
	}
	return 0
}

func (m *Chat) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *Chat) GetSessionId() string {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return ""
}

func (m *Chat) GetSayType() int32 {
	if m != nil && m.SayType != nil {
		return *m.SayType
	}
	return 0
}

func (m *Chat) GetExtentValue() string {
	if m != nil && m.ExtentValue != nil {
		return *m.ExtentValue
	}
	return ""
}

type MsgData struct {
	ServerType           *int32   `protobuf:"varint,1,opt,name=ServerType" json:"ServerType,omitempty" bson:"ServerType,omitempty"`
	RpcName              *string  `protobuf:"bytes,2,opt,name=RpcName" json:"RpcName,omitempty" bson:"RpcName,omitempty"`
	MsgId                *int64   `protobuf:"varint,3,opt,name=MsgId" json:"MsgId,omitempty" bson:"MsgId,omitempty"`
	MsgName              *string  `protobuf:"bytes,4,opt,name=MsgName" json:"MsgName,omitempty" bson:"MsgName,omitempty"`
	Msg                  []byte   `protobuf:"bytes,5,opt,name=Msg" json:"Msg,omitempty" bson:"Msg,omitempty"`
	Playerids            []int64  `protobuf:"varint,6,rep,name=Playerids" json:"Playerids,omitempty" bson:"Playerids,omitempty"`
	IsAll                *bool    `protobuf:"varint,7,opt,name=IsAll" json:"IsAll,omitempty" bson:"IsAll,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *MsgData) Reset()         { *m = MsgData{} }
func (m *MsgData) String() string { return proto.CompactTextString(m) }
func (*MsgData) ProtoMessage()    {}
func (*MsgData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{8}
}
func (m *MsgData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgData.Merge(m, src)
}
func (m *MsgData) XXX_Size() int {
	return m.Size()
}
func (m *MsgData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgData proto.InternalMessageInfo

func (m *MsgData) GetServerType() int32 {
	if m != nil && m.ServerType != nil {
		return *m.ServerType
	}
	return 0
}

func (m *MsgData) GetRpcName() string {
	if m != nil && m.RpcName != nil {
		return *m.RpcName
	}
	return ""
}

func (m *MsgData) GetMsgId() int64 {
	if m != nil && m.MsgId != nil {
		return *m.MsgId
	}
	return 0
}

func (m *MsgData) GetMsgName() string {
	if m != nil && m.MsgName != nil {
		return *m.MsgName
	}
	return ""
}

func (m *MsgData) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *MsgData) GetPlayerids() []int64 {
	if m != nil {
		return m.Playerids
	}
	return nil
}

func (m *MsgData) GetIsAll() bool {
	if m != nil && m.IsAll != nil {
		return *m.IsAll
	}
	return false
}

type PlayerState struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	ServerId             *int32   `protobuf:"varint,2,opt,name=ServerId" json:"ServerId,omitempty" bson:"ServerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerState) Reset()         { *m = PlayerState{} }
func (m *PlayerState) String() string { return proto.CompactTextString(m) }
func (*PlayerState) ProtoMessage()    {}
func (*PlayerState) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{9}
}
func (m *PlayerState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerState.Merge(m, src)
}
func (m *PlayerState) XXX_Size() int {
	return m.Size()
}
func (m *PlayerState) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerState.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerState proto.InternalMessageInfo

func (m *PlayerState) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerState) GetServerId() int32 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

type PlayerOnlineInfo struct {
	OnLines              []*PlayerState `protobuf:"bytes,1,rep,name=OnLines" json:"OnLines,omitempty" bson:"OnLines,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-" bson:"-"`
	XXX_unrecognized     []byte         `json:"-" bson:"-"`
	XXX_sizecache        int32          `json:"-" bson:"-"`
}

func (m *PlayerOnlineInfo) Reset()         { *m = PlayerOnlineInfo{} }
func (m *PlayerOnlineInfo) String() string { return proto.CompactTextString(m) }
func (*PlayerOnlineInfo) ProtoMessage()    {}
func (*PlayerOnlineInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{10}
}
func (m *PlayerOnlineInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerOnlineInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerOnlineInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerOnlineInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerOnlineInfo.Merge(m, src)
}
func (m *PlayerOnlineInfo) XXX_Size() int {
	return m.Size()
}
func (m *PlayerOnlineInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerOnlineInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerOnlineInfo proto.InternalMessageInfo

func (m *PlayerOnlineInfo) GetOnLines() []*PlayerState {
	if m != nil {
		return m.OnLines
	}
	return nil
}

//秒到支付订单请求数据
type RechargeOrder struct {
	TotalAmount          *string  `protobuf:"bytes,1,opt,name=totalAmount" json:"totalAmount,omitempty" bson:"totalAmount,omitempty"`
	ProductName          *string  `protobuf:"bytes,2,opt,name=productName" json:"productName,omitempty" bson:"productName,omitempty"`
	MerchantNo           *string  `protobuf:"bytes,3,opt,name=merchantNo" json:"merchantNo,omitempty" bson:"merchantNo,omitempty"`
	OutTradeNo           *string  `protobuf:"bytes,4,opt,name=outTradeNo" json:"outTradeNo,omitempty" bson:"outTradeNo,omitempty"`
	AppId                *string  `protobuf:"bytes,5,opt,name=appId" json:"appId,omitempty" bson:"appId,omitempty"`
	OpenId               *string  `protobuf:"bytes,6,opt,name=openId" json:"openId,omitempty" bson:"openId,omitempty"`
	PiType               *string  `protobuf:"bytes,7,opt,name=piType" json:"piType,omitempty" bson:"piType,omitempty"`
	GatewayPayMethod     *string  `protobuf:"bytes,8,opt,name=gatewayPayMethod" json:"gatewayPayMethod,omitempty" bson:"gatewayPayMethod,omitempty"`
	AgencyCode           *string  `protobuf:"bytes,9,opt,name=agencyCode" json:"agencyCode,omitempty" bson:"agencyCode,omitempty"`
	NotifyUrl            *string  `protobuf:"bytes,10,opt,name=notifyUrl" json:"notifyUrl,omitempty" bson:"notifyUrl,omitempty"`
	CallBackUrl          *string  `protobuf:"bytes,11,opt,name=callBackUrl" json:"callBackUrl,omitempty" bson:"callBackUrl,omitempty"`
	BillSplitList        *string  `protobuf:"bytes,12,opt,name=billSplitList" json:"billSplitList,omitempty" bson:"billSplitList,omitempty"`
	ReturnParams         *string  `protobuf:"bytes,13,opt,name=returnParams" json:"returnParams,omitempty" bson:"returnParams,omitempty"`
	Sign                 *string  `protobuf:"bytes,14,opt,name=sign" json:"sign,omitempty" bson:"sign,omitempty"`
	SourceType           *int32   `protobuf:"varint,15,opt,name=SourceType" json:"SourceType,omitempty" bson:"SourceType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RechargeOrder) Reset()         { *m = RechargeOrder{} }
func (m *RechargeOrder) String() string { return proto.CompactTextString(m) }
func (*RechargeOrder) ProtoMessage()    {}
func (*RechargeOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{11}
}
func (m *RechargeOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RechargeOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RechargeOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RechargeOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RechargeOrder.Merge(m, src)
}
func (m *RechargeOrder) XXX_Size() int {
	return m.Size()
}
func (m *RechargeOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_RechargeOrder.DiscardUnknown(m)
}

var xxx_messageInfo_RechargeOrder proto.InternalMessageInfo

func (m *RechargeOrder) GetTotalAmount() string {
	if m != nil && m.TotalAmount != nil {
		return *m.TotalAmount
	}
	return ""
}

func (m *RechargeOrder) GetProductName() string {
	if m != nil && m.ProductName != nil {
		return *m.ProductName
	}
	return ""
}

func (m *RechargeOrder) GetMerchantNo() string {
	if m != nil && m.MerchantNo != nil {
		return *m.MerchantNo
	}
	return ""
}

func (m *RechargeOrder) GetOutTradeNo() string {
	if m != nil && m.OutTradeNo != nil {
		return *m.OutTradeNo
	}
	return ""
}

func (m *RechargeOrder) GetAppId() string {
	if m != nil && m.AppId != nil {
		return *m.AppId
	}
	return ""
}

func (m *RechargeOrder) GetOpenId() string {
	if m != nil && m.OpenId != nil {
		return *m.OpenId
	}
	return ""
}

func (m *RechargeOrder) GetPiType() string {
	if m != nil && m.PiType != nil {
		return *m.PiType
	}
	return ""
}

func (m *RechargeOrder) GetGatewayPayMethod() string {
	if m != nil && m.GatewayPayMethod != nil {
		return *m.GatewayPayMethod
	}
	return ""
}

func (m *RechargeOrder) GetAgencyCode() string {
	if m != nil && m.AgencyCode != nil {
		return *m.AgencyCode
	}
	return ""
}

func (m *RechargeOrder) GetNotifyUrl() string {
	if m != nil && m.NotifyUrl != nil {
		return *m.NotifyUrl
	}
	return ""
}

func (m *RechargeOrder) GetCallBackUrl() string {
	if m != nil && m.CallBackUrl != nil {
		return *m.CallBackUrl
	}
	return ""
}

func (m *RechargeOrder) GetBillSplitList() string {
	if m != nil && m.BillSplitList != nil {
		return *m.BillSplitList
	}
	return ""
}

func (m *RechargeOrder) GetReturnParams() string {
	if m != nil && m.ReturnParams != nil {
		return *m.ReturnParams
	}
	return ""
}

func (m *RechargeOrder) GetSign() string {
	if m != nil && m.Sign != nil {
		return *m.Sign
	}
	return ""
}

func (m *RechargeOrder) GetSourceType() int32 {
	if m != nil && m.SourceType != nil {
		return *m.SourceType
	}
	return 0
}

//支付返回
type RechargeOrderResult struct {
	Data                 *string  `protobuf:"bytes,1,opt,name=data" json:"data,omitempty" bson:"data,omitempty"`
	PayType              *int32   `protobuf:"varint,2,opt,name=payType" json:"payType,omitempty" bson:"payType,omitempty"`
	PerparePayInfo       *string  `protobuf:"bytes,3,opt,name=perparePayInfo" json:"perparePayInfo,omitempty" bson:"perparePayInfo,omitempty"`
	Result               *bool    `protobuf:"varint,4,opt,name=result" json:"result,omitempty" bson:"result,omitempty"`
	Code                 *int32   `protobuf:"varint,5,opt,name=code" json:"code,omitempty" bson:"code,omitempty"`
	Message              *string  `protobuf:"bytes,6,opt,name=message" json:"message,omitempty" bson:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RechargeOrderResult) Reset()         { *m = RechargeOrderResult{} }
func (m *RechargeOrderResult) String() string { return proto.CompactTextString(m) }
func (*RechargeOrderResult) ProtoMessage()    {}
func (*RechargeOrderResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{12}
}
func (m *RechargeOrderResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RechargeOrderResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RechargeOrderResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RechargeOrderResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RechargeOrderResult.Merge(m, src)
}
func (m *RechargeOrderResult) XXX_Size() int {
	return m.Size()
}
func (m *RechargeOrderResult) XXX_DiscardUnknown() {
	xxx_messageInfo_RechargeOrderResult.DiscardUnknown(m)
}

var xxx_messageInfo_RechargeOrderResult proto.InternalMessageInfo

func (m *RechargeOrderResult) GetData() string {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return ""
}

func (m *RechargeOrderResult) GetPayType() int32 {
	if m != nil && m.PayType != nil {
		return *m.PayType
	}
	return 0
}

func (m *RechargeOrderResult) GetPerparePayInfo() string {
	if m != nil && m.PerparePayInfo != nil {
		return *m.PerparePayInfo
	}
	return ""
}

func (m *RechargeOrderResult) GetResult() bool {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return false
}

func (m *RechargeOrderResult) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *RechargeOrderResult) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

type PerPayInfo struct {
	PerparePayInfo       *string  `protobuf:"bytes,1,opt,name=perparePayInfo" json:"perparePayInfo,omitempty" bson:"perparePayInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PerPayInfo) Reset()         { *m = PerPayInfo{} }
func (m *PerPayInfo) String() string { return proto.CompactTextString(m) }
func (*PerPayInfo) ProtoMessage()    {}
func (*PerPayInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{13}
}
func (m *PerPayInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerPayInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerPayInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PerPayInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerPayInfo.Merge(m, src)
}
func (m *PerPayInfo) XXX_Size() int {
	return m.Size()
}
func (m *PerPayInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PerPayInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PerPayInfo proto.InternalMessageInfo

func (m *PerPayInfo) GetPerparePayInfo() string {
	if m != nil && m.PerparePayInfo != nil {
		return *m.PerparePayInfo
	}
	return ""
}

//登录充值
type RechargeData struct {
	Code                 *string  `protobuf:"bytes,1,opt,name=Code" json:"Code,omitempty" bson:"Code,omitempty"`
	TotalAmount          *string  `protobuf:"bytes,2,opt,name=TotalAmount" json:"TotalAmount,omitempty" bson:"TotalAmount,omitempty"`
	ProductName          *string  `protobuf:"bytes,3,opt,name=ProductName" json:"ProductName,omitempty" bson:"ProductName,omitempty"`
	ReturnParams         *string  `protobuf:"bytes,4,opt,name=ReturnParams" json:"ReturnParams,omitempty" bson:"ReturnParams,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RechargeData) Reset()         { *m = RechargeData{} }
func (m *RechargeData) String() string { return proto.CompactTextString(m) }
func (*RechargeData) ProtoMessage()    {}
func (*RechargeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{14}
}
func (m *RechargeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RechargeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RechargeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RechargeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RechargeData.Merge(m, src)
}
func (m *RechargeData) XXX_Size() int {
	return m.Size()
}
func (m *RechargeData) XXX_DiscardUnknown() {
	xxx_messageInfo_RechargeData.DiscardUnknown(m)
}

var xxx_messageInfo_RechargeData proto.InternalMessageInfo

func (m *RechargeData) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

func (m *RechargeData) GetTotalAmount() string {
	if m != nil && m.TotalAmount != nil {
		return *m.TotalAmount
	}
	return ""
}

func (m *RechargeData) GetProductName() string {
	if m != nil && m.ProductName != nil {
		return *m.ProductName
	}
	return ""
}

func (m *RechargeData) GetReturnParams() string {
	if m != nil && m.ReturnParams != nil {
		return *m.ReturnParams
	}
	return ""
}

//充值完成
type RechargeFinish struct {
	TradeNo              *string  `protobuf:"bytes,1,opt,name=TradeNo" json:"TradeNo,omitempty" bson:"TradeNo,omitempty"`
	Amount               *int64   `protobuf:"varint,2,opt,name=Amount" json:"Amount,omitempty" bson:"Amount,omitempty"`
	PayFinishTime        *int64   `protobuf:"varint,3,opt,name=PayFinishTime" json:"PayFinishTime,omitempty" bson:"PayFinishTime,omitempty"`
	Result               *bool    `protobuf:"varint,4,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RechargeFinish) Reset()         { *m = RechargeFinish{} }
func (m *RechargeFinish) String() string { return proto.CompactTextString(m) }
func (*RechargeFinish) ProtoMessage()    {}
func (*RechargeFinish) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{15}
}
func (m *RechargeFinish) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RechargeFinish) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RechargeFinish.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RechargeFinish) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RechargeFinish.Merge(m, src)
}
func (m *RechargeFinish) XXX_Size() int {
	return m.Size()
}
func (m *RechargeFinish) XXX_DiscardUnknown() {
	xxx_messageInfo_RechargeFinish.DiscardUnknown(m)
}

var xxx_messageInfo_RechargeFinish proto.InternalMessageInfo

func (m *RechargeFinish) GetTradeNo() string {
	if m != nil && m.TradeNo != nil {
		return *m.TradeNo
	}
	return ""
}

func (m *RechargeFinish) GetAmount() int64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *RechargeFinish) GetPayFinishTime() int64 {
	if m != nil && m.PayFinishTime != nil {
		return *m.PayFinishTime
	}
	return 0
}

func (m *RechargeFinish) GetResult() bool {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return false
}

//小程序微信登录返回
type WXLoginResult struct {
	Openid               *string  `protobuf:"bytes,1,opt,name=openid" json:"openid,omitempty" bson:"openid,omitempty"`
	SessionKey           *string  `protobuf:"bytes,2,opt,name=session_key" json:"session_key,omitempty" bson:"session_key,omitempty"`
	Unionid              *string  `protobuf:"bytes,3,opt,name=unionid" json:"unionid,omitempty" bson:"unionid,omitempty"`
	Errcode              *int32   `protobuf:"varint,4,opt,name=errcode" json:"errcode,omitempty" bson:"errcode,omitempty"`
	Errmsg               *string  `protobuf:"bytes,5,opt,name=errmsg" json:"errmsg,omitempty" bson:"errmsg,omitempty"`
	Wxtoken              *string  `protobuf:"bytes,6,opt,name=wxtoken" json:"wxtoken,omitempty" bson:"wxtoken,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WXLoginResult) Reset()         { *m = WXLoginResult{} }
func (m *WXLoginResult) String() string { return proto.CompactTextString(m) }
func (*WXLoginResult) ProtoMessage()    {}
func (*WXLoginResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{16}
}
func (m *WXLoginResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WXLoginResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WXLoginResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WXLoginResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WXLoginResult.Merge(m, src)
}
func (m *WXLoginResult) XXX_Size() int {
	return m.Size()
}
func (m *WXLoginResult) XXX_DiscardUnknown() {
	xxx_messageInfo_WXLoginResult.DiscardUnknown(m)
}

var xxx_messageInfo_WXLoginResult proto.InternalMessageInfo

func (m *WXLoginResult) GetOpenid() string {
	if m != nil && m.Openid != nil {
		return *m.Openid
	}
	return ""
}

func (m *WXLoginResult) GetSessionKey() string {
	if m != nil && m.SessionKey != nil {
		return *m.SessionKey
	}
	return ""
}

func (m *WXLoginResult) GetUnionid() string {
	if m != nil && m.Unionid != nil {
		return *m.Unionid
	}
	return ""
}

func (m *WXLoginResult) GetErrcode() int32 {
	if m != nil && m.Errcode != nil {
		return *m.Errcode
	}
	return 0
}

func (m *WXLoginResult) GetErrmsg() string {
	if m != nil && m.Errmsg != nil {
		return *m.Errmsg
	}
	return ""
}

func (m *WXLoginResult) GetWxtoken() string {
	if m != nil && m.Wxtoken != nil {
		return *m.Wxtoken
	}
	return ""
}

type PayData struct {
	PayId                *int32   `protobuf:"varint,1,opt,name=PayId" json:"PayId,omitempty" bson:"PayId,omitempty"`
	PayWay               *int32   `protobuf:"varint,2,opt,name=PayWay" json:"PayWay,omitempty" bson:"PayWay,omitempty"`
	PaySence             *int32   `protobuf:"varint,3,opt,name=PaySence" json:"PaySence,omitempty" bson:"PaySence,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PayData) Reset()         { *m = PayData{} }
func (m *PayData) String() string { return proto.CompactTextString(m) }
func (*PayData) ProtoMessage()    {}
func (*PayData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{17}
}
func (m *PayData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayData.Merge(m, src)
}
func (m *PayData) XXX_Size() int {
	return m.Size()
}
func (m *PayData) XXX_DiscardUnknown() {
	xxx_messageInfo_PayData.DiscardUnknown(m)
}

var xxx_messageInfo_PayData proto.InternalMessageInfo

func (m *PayData) GetPayId() int32 {
	if m != nil && m.PayId != nil {
		return *m.PayId
	}
	return 0
}

func (m *PayData) GetPayWay() int32 {
	if m != nil && m.PayWay != nil {
		return *m.PayWay
	}
	return 0
}

func (m *PayData) GetPaySence() int32 {
	if m != nil && m.PaySence != nil {
		return *m.PaySence
	}
	return 0
}

type AliPayData struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Num                  *string  `protobuf:"bytes,2,opt,name=Num" json:"Num,omitempty" bson:"Num,omitempty"`
	OrderId              *string  `protobuf:"bytes,3,opt,name=OrderId" json:"OrderId,omitempty" bson:"OrderId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *AliPayData) Reset()         { *m = AliPayData{} }
func (m *AliPayData) String() string { return proto.CompactTextString(m) }
func (*AliPayData) ProtoMessage()    {}
func (*AliPayData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{18}
}
func (m *AliPayData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AliPayData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AliPayData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AliPayData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AliPayData.Merge(m, src)
}
func (m *AliPayData) XXX_Size() int {
	return m.Size()
}
func (m *AliPayData) XXX_DiscardUnknown() {
	xxx_messageInfo_AliPayData.DiscardUnknown(m)
}

var xxx_messageInfo_AliPayData proto.InternalMessageInfo

func (m *AliPayData) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *AliPayData) GetNum() string {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return ""
}

func (m *AliPayData) GetOrderId() string {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return ""
}

//通联支付订单请求数据
type RechargeTLOrder struct {
	Cusid                *string  `protobuf:"bytes,1,opt,name=cusid" json:"cusid,omitempty" bson:"cusid,omitempty"`
	Appid                *string  `protobuf:"bytes,2,opt,name=appid" json:"appid,omitempty" bson:"appid,omitempty"`
	Version              *string  `protobuf:"bytes,3,opt,name=version" json:"version,omitempty" bson:"version,omitempty"`
	Trxamt               *string  `protobuf:"bytes,4,opt,name=trxamt" json:"trxamt,omitempty" bson:"trxamt,omitempty"`
	Reqsn                *string  `protobuf:"bytes,5,opt,name=reqsn" json:"reqsn,omitempty" bson:"reqsn,omitempty"`
	Paytype              *string  `protobuf:"bytes,6,opt,name=paytype" json:"paytype,omitempty" bson:"paytype,omitempty"`
	Body                 *string  `protobuf:"bytes,7,opt,name=body" json:"body,omitempty" bson:"body,omitempty"`
	Remark               *string  `protobuf:"bytes,8,opt,name=remark" json:"remark,omitempty" bson:"remark,omitempty"`
	Validtime            *string  `protobuf:"bytes,9,opt,name=validtime" json:"validtime,omitempty" bson:"validtime,omitempty"`
	Acct                 *string  `protobuf:"bytes,10,opt,name=acct" json:"acct,omitempty" bson:"acct,omitempty"`
	NotifyUrl            *string  `protobuf:"bytes,11,opt,name=notify_url" json:"notify_url,omitempty" bson:"notify_url,omitempty"`
	LimitPay             *string  `protobuf:"bytes,12,opt,name=limit_pay" json:"limit_pay,omitempty" bson:"limit_pay,omitempty"`
	SubAppid             *string  `protobuf:"bytes,13,opt,name=sub_appid" json:"sub_appid,omitempty" bson:"sub_appid,omitempty"`
	GoodsTag             *string  `protobuf:"bytes,14,opt,name=goods_tag" json:"goods_tag,omitempty" bson:"goods_tag,omitempty"`
	Benefitdetail        *string  `protobuf:"bytes,15,opt,name=benefitdetail" json:"benefitdetail,omitempty" bson:"benefitdetail,omitempty"`
	Chnlstoreid          *string  `protobuf:"bytes,16,opt,name=chnlstoreid" json:"chnlstoreid,omitempty" bson:"chnlstoreid,omitempty"`
	Subbranch            *string  `protobuf:"bytes,17,opt,name=subbranch" json:"subbranch,omitempty" bson:"subbranch,omitempty"`
	Extendparams         *string  `protobuf:"bytes,18,opt,name=extendparams" json:"extendparams,omitempty" bson:"extendparams,omitempty"`
	Cusip                *string  `protobuf:"bytes,19,opt,name=cusip" json:"cusip,omitempty" bson:"cusip,omitempty"`
	Idno                 *string  `protobuf:"bytes,20,opt,name=idno" json:"idno,omitempty" bson:"idno,omitempty"`
	Truename             *string  `protobuf:"bytes,21,opt,name=truename" json:"truename,omitempty" bson:"truename,omitempty"`
	Asinfo               *string  `protobuf:"bytes,22,opt,name=asinfo" json:"asinfo,omitempty" bson:"asinfo,omitempty"`
	Fqnum                *string  `protobuf:"bytes,23,opt,name=fqnum" json:"fqnum,omitempty" bson:"fqnum,omitempty"`
	Signtype             *string  `protobuf:"bytes,24,opt,name=signtype" json:"signtype,omitempty" bson:"signtype,omitempty"`
	Sign                 *string  `protobuf:"bytes,25,opt,name=sign" json:"sign,omitempty" bson:"sign,omitempty"`
	Randomstr            *string  `protobuf:"bytes,26,opt,name=randomstr" json:"randomstr,omitempty" bson:"randomstr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RechargeTLOrder) Reset()         { *m = RechargeTLOrder{} }
func (m *RechargeTLOrder) String() string { return proto.CompactTextString(m) }
func (*RechargeTLOrder) ProtoMessage()    {}
func (*RechargeTLOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{19}
}
func (m *RechargeTLOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RechargeTLOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RechargeTLOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RechargeTLOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RechargeTLOrder.Merge(m, src)
}
func (m *RechargeTLOrder) XXX_Size() int {
	return m.Size()
}
func (m *RechargeTLOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_RechargeTLOrder.DiscardUnknown(m)
}

var xxx_messageInfo_RechargeTLOrder proto.InternalMessageInfo

func (m *RechargeTLOrder) GetCusid() string {
	if m != nil && m.Cusid != nil {
		return *m.Cusid
	}
	return ""
}

func (m *RechargeTLOrder) GetAppid() string {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return ""
}

func (m *RechargeTLOrder) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *RechargeTLOrder) GetTrxamt() string {
	if m != nil && m.Trxamt != nil {
		return *m.Trxamt
	}
	return ""
}

func (m *RechargeTLOrder) GetReqsn() string {
	if m != nil && m.Reqsn != nil {
		return *m.Reqsn
	}
	return ""
}

func (m *RechargeTLOrder) GetPaytype() string {
	if m != nil && m.Paytype != nil {
		return *m.Paytype
	}
	return ""
}

func (m *RechargeTLOrder) GetBody() string {
	if m != nil && m.Body != nil {
		return *m.Body
	}
	return ""
}

func (m *RechargeTLOrder) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *RechargeTLOrder) GetValidtime() string {
	if m != nil && m.Validtime != nil {
		return *m.Validtime
	}
	return ""
}

func (m *RechargeTLOrder) GetAcct() string {
	if m != nil && m.Acct != nil {
		return *m.Acct
	}
	return ""
}

func (m *RechargeTLOrder) GetNotifyUrl() string {
	if m != nil && m.NotifyUrl != nil {
		return *m.NotifyUrl
	}
	return ""
}

func (m *RechargeTLOrder) GetLimitPay() string {
	if m != nil && m.LimitPay != nil {
		return *m.LimitPay
	}
	return ""
}

func (m *RechargeTLOrder) GetSubAppid() string {
	if m != nil && m.SubAppid != nil {
		return *m.SubAppid
	}
	return ""
}

func (m *RechargeTLOrder) GetGoodsTag() string {
	if m != nil && m.GoodsTag != nil {
		return *m.GoodsTag
	}
	return ""
}

func (m *RechargeTLOrder) GetBenefitdetail() string {
	if m != nil && m.Benefitdetail != nil {
		return *m.Benefitdetail
	}
	return ""
}

func (m *RechargeTLOrder) GetChnlstoreid() string {
	if m != nil && m.Chnlstoreid != nil {
		return *m.Chnlstoreid
	}
	return ""
}

func (m *RechargeTLOrder) GetSubbranch() string {
	if m != nil && m.Subbranch != nil {
		return *m.Subbranch
	}
	return ""
}

func (m *RechargeTLOrder) GetExtendparams() string {
	if m != nil && m.Extendparams != nil {
		return *m.Extendparams
	}
	return ""
}

func (m *RechargeTLOrder) GetCusip() string {
	if m != nil && m.Cusip != nil {
		return *m.Cusip
	}
	return ""
}

func (m *RechargeTLOrder) GetIdno() string {
	if m != nil && m.Idno != nil {
		return *m.Idno
	}
	return ""
}

func (m *RechargeTLOrder) GetTruename() string {
	if m != nil && m.Truename != nil {
		return *m.Truename
	}
	return ""
}

func (m *RechargeTLOrder) GetAsinfo() string {
	if m != nil && m.Asinfo != nil {
		return *m.Asinfo
	}
	return ""
}

func (m *RechargeTLOrder) GetFqnum() string {
	if m != nil && m.Fqnum != nil {
		return *m.Fqnum
	}
	return ""
}

func (m *RechargeTLOrder) GetSigntype() string {
	if m != nil && m.Signtype != nil {
		return *m.Signtype
	}
	return ""
}

func (m *RechargeTLOrder) GetSign() string {
	if m != nil && m.Sign != nil {
		return *m.Sign
	}
	return ""
}

func (m *RechargeTLOrder) GetRandomstr() string {
	if m != nil && m.Randomstr != nil {
		return *m.Randomstr
	}
	return ""
}

//通联支付返回
type RechargeTLOrderResult struct {
	Retcode              *string  `protobuf:"bytes,1,opt,name=retcode" json:"retcode,omitempty" bson:"retcode,omitempty"`
	Retmsg               *string  `protobuf:"bytes,2,opt,name=retmsg" json:"retmsg,omitempty" bson:"retmsg,omitempty"`
	Cusid                *string  `protobuf:"bytes,3,opt,name=cusid" json:"cusid,omitempty" bson:"cusid,omitempty"`
	Appid                *string  `protobuf:"bytes,4,opt,name=appid" json:"appid,omitempty" bson:"appid,omitempty"`
	Trxid                *string  `protobuf:"bytes,5,opt,name=trxid" json:"trxid,omitempty" bson:"trxid,omitempty"`
	Chnltrxid            *string  `protobuf:"bytes,6,opt,name=chnltrxid" json:"chnltrxid,omitempty" bson:"chnltrxid,omitempty"`
	Reqsn                *string  `protobuf:"bytes,7,opt,name=reqsn" json:"reqsn,omitempty" bson:"reqsn,omitempty"`
	Randomstr            *string  `protobuf:"bytes,8,opt,name=randomstr" json:"randomstr,omitempty" bson:"randomstr,omitempty"`
	Trxstatus            *string  `protobuf:"bytes,9,opt,name=trxstatus" json:"trxstatus,omitempty" bson:"trxstatus,omitempty"`
	Fintime              *string  `protobuf:"bytes,10,opt,name=fintime" json:"fintime,omitempty" bson:"fintime,omitempty"`
	Errmsg               *string  `protobuf:"bytes,11,opt,name=errmsg" json:"errmsg,omitempty" bson:"errmsg,omitempty"`
	Payinfo              *string  `protobuf:"bytes,12,opt,name=payinfo" json:"payinfo,omitempty" bson:"payinfo,omitempty"`
	Sign                 *string  `protobuf:"bytes,13,opt,name=sign" json:"sign,omitempty" bson:"sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RechargeTLOrderResult) Reset()         { *m = RechargeTLOrderResult{} }
func (m *RechargeTLOrderResult) String() string { return proto.CompactTextString(m) }
func (*RechargeTLOrderResult) ProtoMessage()    {}
func (*RechargeTLOrderResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{20}
}
func (m *RechargeTLOrderResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RechargeTLOrderResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RechargeTLOrderResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RechargeTLOrderResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RechargeTLOrderResult.Merge(m, src)
}
func (m *RechargeTLOrderResult) XXX_Size() int {
	return m.Size()
}
func (m *RechargeTLOrderResult) XXX_DiscardUnknown() {
	xxx_messageInfo_RechargeTLOrderResult.DiscardUnknown(m)
}

var xxx_messageInfo_RechargeTLOrderResult proto.InternalMessageInfo

func (m *RechargeTLOrderResult) GetRetcode() string {
	if m != nil && m.Retcode != nil {
		return *m.Retcode
	}
	return ""
}

func (m *RechargeTLOrderResult) GetRetmsg() string {
	if m != nil && m.Retmsg != nil {
		return *m.Retmsg
	}
	return ""
}

func (m *RechargeTLOrderResult) GetCusid() string {
	if m != nil && m.Cusid != nil {
		return *m.Cusid
	}
	return ""
}

func (m *RechargeTLOrderResult) GetAppid() string {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return ""
}

func (m *RechargeTLOrderResult) GetTrxid() string {
	if m != nil && m.Trxid != nil {
		return *m.Trxid
	}
	return ""
}

func (m *RechargeTLOrderResult) GetChnltrxid() string {
	if m != nil && m.Chnltrxid != nil {
		return *m.Chnltrxid
	}
	return ""
}

func (m *RechargeTLOrderResult) GetReqsn() string {
	if m != nil && m.Reqsn != nil {
		return *m.Reqsn
	}
	return ""
}

func (m *RechargeTLOrderResult) GetRandomstr() string {
	if m != nil && m.Randomstr != nil {
		return *m.Randomstr
	}
	return ""
}

func (m *RechargeTLOrderResult) GetTrxstatus() string {
	if m != nil && m.Trxstatus != nil {
		return *m.Trxstatus
	}
	return ""
}

func (m *RechargeTLOrderResult) GetFintime() string {
	if m != nil && m.Fintime != nil {
		return *m.Fintime
	}
	return ""
}

func (m *RechargeTLOrderResult) GetErrmsg() string {
	if m != nil && m.Errmsg != nil {
		return *m.Errmsg
	}
	return ""
}

func (m *RechargeTLOrderResult) GetPayinfo() string {
	if m != nil && m.Payinfo != nil {
		return *m.Payinfo
	}
	return ""
}

func (m *RechargeTLOrderResult) GetSign() string {
	if m != nil && m.Sign != nil {
		return *m.Sign
	}
	return ""
}

//社交广场动态
type DynamicData struct {
	LogId                *int64       `protobuf:"varint,1,opt,name=LogId" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64       `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	HeadIcon             *string      `protobuf:"bytes,3,opt,name=HeadIcon" json:"-" bson:"-"`
	Sex                  *int32       `protobuf:"varint,4,opt,name=Sex" json:"-" bson:"-"`
	PlayerTypes          *int32       `protobuf:"varint,28,opt,name=PlayerTypes" json:"-" bson:"-"`
	Content              *string      `protobuf:"bytes,5,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	Photo                []string     `protobuf:"bytes,6,rep,name=Photo" json:"Photo,omitempty" bson:"Photo,omitempty"`
	Zan                  *int32       `protobuf:"varint,7,opt,name=Zan" json:"-" bson:"-"`
	IsZan                *bool        `protobuf:"varint,8,opt,name=IsZan" json:"-" bson:"-"`
	IsAtten              *bool        `protobuf:"varint,9,opt,name=IsAtten" json:"-" bson:"-"`
	Voice                *string      `protobuf:"bytes,10,opt,name=Voice" json:"Voice,omitempty" bson:"Voice,omitempty"`
	Video                *string      `protobuf:"bytes,11,opt,name=Video" json:"Video,omitempty" bson:"Video,omitempty"`
	CreateTime           *int64       `protobuf:"varint,12,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	CommentNum           *int64       `protobuf:"varint,13,opt,name=CommentNum" json:"-" bson:"-"`
	CommentList          *CommentList `protobuf:"bytes,14,opt,name=CommentList" json:"-" bson:"-"`
	TrueZan              *int32       `protobuf:"varint,15,opt,name=TrueZan" json:"TrueZan,omitempty" bson:"TrueZan,omitempty"`
	Statue               *int32       `protobuf:"varint,16,opt,name=Statue" json:"Statue,omitempty" bson:"Statue,omitempty"`
	VoiceTime            *int64       `protobuf:"varint,17,opt,name=VoiceTime" json:"VoiceTime,omitempty" bson:"VoiceTime,omitempty"`
	NickName             *string      `protobuf:"bytes,18,opt,name=NickName" json:"-" bson:"-"`
	Account              *string      `protobuf:"bytes,19,opt,name=Account" json:"-" bson:"-"`
	High                 *float64     `protobuf:"fixed64,20,opt,name=High" json:"High,omitempty" bson:"High,omitempty"`
	Weight               *float64     `protobuf:"fixed64,21,opt,name=Weight" json:"Weight,omitempty" bson:"Weight,omitempty"`
	TopOverTime          *int64       `protobuf:"varint,22,opt,name=TopOverTime" json:"TopOverTime,omitempty" bson:"TopOverTime,omitempty"`
	IsBsTop              *bool        `protobuf:"varint,23,opt,name=IsBsTop" json:"IsBsTop,omitempty" bson:"IsBsTop,omitempty"`
	IsShield             *bool        `protobuf:"varint,24,opt,name=IsShield" json:"IsShield,omitempty" bson:"IsShield,omitempty"`
	Note                 *string      `protobuf:"bytes,25,opt,name=Note" json:"Note,omitempty" bson:"Note,omitempty"`
	IsTop                *bool        `protobuf:"varint,26,opt,name=IsTop" json:"IsTop,omitempty" bson:"IsTop,omitempty"`
	VideoThumbnailURL    *string      `protobuf:"bytes,27,opt,name=VideoThumbnailURL" json:"VideoThumbnailURL,omitempty" bson:"VideoThumbnailURL,omitempty"`
	ClientUniqueCode     *string      `protobuf:"bytes,29,opt,name=ClientUniqueCode" json:"ClientUniqueCode,omitempty" bson:"ClientUniqueCode,omitempty"`
	SendTime             *int64       `protobuf:"varint,30,opt,name=SendTime" json:"SendTime,omitempty" bson:"SendTime,omitempty"`
	Check                *int32       `protobuf:"varint,31,opt,name=Check" json:"Check,omitempty" bson:"Check,omitempty"`
	AdvSetting           *AdvSetting  `protobuf:"bytes,32,opt,name=AdvSetting" json:"AdvSetting,omitempty" bson:"AdvSetting,omitempty"`
	DataType             *int32       `protobuf:"varint,33,opt,name=DataType" json:"DataType,omitempty" bson:"DataType,omitempty"`
	HostScore            *int32       `protobuf:"varint,34,opt,name=HostScore" json:"HostScore,omitempty" bson:"HostScore,omitempty"`
	SenderType           *int32       `protobuf:"varint,35,opt,name=SenderType" json:"SenderType,omitempty" bson:"SenderType,omitempty"`
	ReportCount          *int64       `protobuf:"varint,36,opt,name=ReportCount" json:"ReportCount,omitempty" bson:"ReportCount,omitempty"`
	HotType              *int32       `protobuf:"varint,37,opt,name=HotType" json:"-" bson:"-"`
	IsHot                *bool        `protobuf:"varint,38,opt,name=IsHot" json:"-" bson:"-"`
	OldStatue            *int32       `protobuf:"varint,39,opt,name=OldStatue" json:"-" bson:"-"`
	TopicId              []int64      `protobuf:"varint,40,rep,name=TopicId" json:"TopicId,omitempty" bson:"TopicId,omitempty"`
	TopicList            []*Topic     `protobuf:"bytes,41,rep,name=TopicList" json:"TopicList,omitempty" bson:"TopicList,omitempty"`
	PropsId              *int64       `protobuf:"varint,42,opt,name=PropsId" json:"PropsId,omitempty" bson:"PropsId,omitempty"`
	Types                *int32       `protobuf:"varint,43,opt,name=Types" json:"-" bson:"-"`
	TopicTopSet          []*TopicTop  `protobuf:"bytes,44,rep,name=TopicTopSet" json:"TopicTopSet,omitempty" bson:"TopicTopSet,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" bson:"-"`
	XXX_unrecognized     []byte       `json:"-" bson:"-"`
	XXX_sizecache        int32        `json:"-" bson:"-"`
}

func (m *DynamicData) Reset()         { *m = DynamicData{} }
func (m *DynamicData) String() string { return proto.CompactTextString(m) }
func (*DynamicData) ProtoMessage()    {}
func (*DynamicData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{21}
}
func (m *DynamicData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynamicData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynamicData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynamicData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynamicData.Merge(m, src)
}
func (m *DynamicData) XXX_Size() int {
	return m.Size()
}
func (m *DynamicData) XXX_DiscardUnknown() {
	xxx_messageInfo_DynamicData.DiscardUnknown(m)
}

var xxx_messageInfo_DynamicData proto.InternalMessageInfo

func (m *DynamicData) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *DynamicData) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *DynamicData) GetHeadIcon() string {
	if m != nil && m.HeadIcon != nil {
		return *m.HeadIcon
	}
	return ""
}

func (m *DynamicData) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *DynamicData) GetPlayerTypes() int32 {
	if m != nil && m.PlayerTypes != nil {
		return *m.PlayerTypes
	}
	return 0
}

func (m *DynamicData) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *DynamicData) GetPhoto() []string {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *DynamicData) GetZan() int32 {
	if m != nil && m.Zan != nil {
		return *m.Zan
	}
	return 0
}

func (m *DynamicData) GetIsZan() bool {
	if m != nil && m.IsZan != nil {
		return *m.IsZan
	}
	return false
}

func (m *DynamicData) GetIsAtten() bool {
	if m != nil && m.IsAtten != nil {
		return *m.IsAtten
	}
	return false
}

func (m *DynamicData) GetVoice() string {
	if m != nil && m.Voice != nil {
		return *m.Voice
	}
	return ""
}

func (m *DynamicData) GetVideo() string {
	if m != nil && m.Video != nil {
		return *m.Video
	}
	return ""
}

func (m *DynamicData) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *DynamicData) GetCommentNum() int64 {
	if m != nil && m.CommentNum != nil {
		return *m.CommentNum
	}
	return 0
}

func (m *DynamicData) GetCommentList() *CommentList {
	if m != nil {
		return m.CommentList
	}
	return nil
}

func (m *DynamicData) GetTrueZan() int32 {
	if m != nil && m.TrueZan != nil {
		return *m.TrueZan
	}
	return 0
}

func (m *DynamicData) GetStatue() int32 {
	if m != nil && m.Statue != nil {
		return *m.Statue
	}
	return 0
}

func (m *DynamicData) GetVoiceTime() int64 {
	if m != nil && m.VoiceTime != nil {
		return *m.VoiceTime
	}
	return 0
}

func (m *DynamicData) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *DynamicData) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *DynamicData) GetHigh() float64 {
	if m != nil && m.High != nil {
		return *m.High
	}
	return 0
}

func (m *DynamicData) GetWeight() float64 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return 0
}

func (m *DynamicData) GetTopOverTime() int64 {
	if m != nil && m.TopOverTime != nil {
		return *m.TopOverTime
	}
	return 0
}

func (m *DynamicData) GetIsBsTop() bool {
	if m != nil && m.IsBsTop != nil {
		return *m.IsBsTop
	}
	return false
}

func (m *DynamicData) GetIsShield() bool {
	if m != nil && m.IsShield != nil {
		return *m.IsShield
	}
	return false
}

func (m *DynamicData) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

func (m *DynamicData) GetIsTop() bool {
	if m != nil && m.IsTop != nil {
		return *m.IsTop
	}
	return false
}

func (m *DynamicData) GetVideoThumbnailURL() string {
	if m != nil && m.VideoThumbnailURL != nil {
		return *m.VideoThumbnailURL
	}
	return ""
}

func (m *DynamicData) GetClientUniqueCode() string {
	if m != nil && m.ClientUniqueCode != nil {
		return *m.ClientUniqueCode
	}
	return ""
}

func (m *DynamicData) GetSendTime() int64 {
	if m != nil && m.SendTime != nil {
		return *m.SendTime
	}
	return 0
}

func (m *DynamicData) GetCheck() int32 {
	if m != nil && m.Check != nil {
		return *m.Check
	}
	return 0
}

func (m *DynamicData) GetAdvSetting() *AdvSetting {
	if m != nil {
		return m.AdvSetting
	}
	return nil
}

func (m *DynamicData) GetDataType() int32 {
	if m != nil && m.DataType != nil {
		return *m.DataType
	}
	return 0
}

func (m *DynamicData) GetHostScore() int32 {
	if m != nil && m.HostScore != nil {
		return *m.HostScore
	}
	return 0
}

func (m *DynamicData) GetSenderType() int32 {
	if m != nil && m.SenderType != nil {
		return *m.SenderType
	}
	return 0
}

func (m *DynamicData) GetReportCount() int64 {
	if m != nil && m.ReportCount != nil {
		return *m.ReportCount
	}
	return 0
}

func (m *DynamicData) GetHotType() int32 {
	if m != nil && m.HotType != nil {
		return *m.HotType
	}
	return 0
}

func (m *DynamicData) GetIsHot() bool {
	if m != nil && m.IsHot != nil {
		return *m.IsHot
	}
	return false
}

func (m *DynamicData) GetOldStatue() int32 {
	if m != nil && m.OldStatue != nil {
		return *m.OldStatue
	}
	return 0
}

func (m *DynamicData) GetTopicId() []int64 {
	if m != nil {
		return m.TopicId
	}
	return nil
}

func (m *DynamicData) GetTopicList() []*Topic {
	if m != nil {
		return m.TopicList
	}
	return nil
}

func (m *DynamicData) GetPropsId() int64 {
	if m != nil && m.PropsId != nil {
		return *m.PropsId
	}
	return 0
}

func (m *DynamicData) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *DynamicData) GetTopicTopSet() []*TopicTop {
	if m != nil {
		return m.TopicTopSet
	}
	return nil
}

//动态话题置顶设置
type TopicTop struct {
	TopicId              *int64   `protobuf:"varint,1,opt,name=TopicId" json:"TopicId,omitempty" bson:"TopicId,omitempty"`
	IsTopicTop           *bool    `protobuf:"varint,2,opt,name=IsTopicTop" json:"IsTopicTop,omitempty" bson:"IsTopicTop,omitempty"`
	TopicTopOverTime     *int64   `protobuf:"varint,3,opt,name=TopicTopOverTime" json:"TopicTopOverTime,omitempty" bson:"TopicTopOverTime,omitempty"`
	TopicTopTime         *int64   `protobuf:"varint,4,opt,name=TopicTopTime" json:"TopicTopTime,omitempty" bson:"TopicTopTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TopicTop) Reset()         { *m = TopicTop{} }
func (m *TopicTop) String() string { return proto.CompactTextString(m) }
func (*TopicTop) ProtoMessage()    {}
func (*TopicTop) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{22}
}
func (m *TopicTop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicTop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicTop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicTop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicTop.Merge(m, src)
}
func (m *TopicTop) XXX_Size() int {
	return m.Size()
}
func (m *TopicTop) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicTop.DiscardUnknown(m)
}

var xxx_messageInfo_TopicTop proto.InternalMessageInfo

func (m *TopicTop) GetTopicId() int64 {
	if m != nil && m.TopicId != nil {
		return *m.TopicId
	}
	return 0
}

func (m *TopicTop) GetIsTopicTop() bool {
	if m != nil && m.IsTopicTop != nil {
		return *m.IsTopicTop
	}
	return false
}

func (m *TopicTop) GetTopicTopOverTime() int64 {
	if m != nil && m.TopicTopOverTime != nil {
		return *m.TopicTopOverTime
	}
	return 0
}

func (m *TopicTop) GetTopicTopTime() int64 {
	if m != nil && m.TopicTopTime != nil {
		return *m.TopicTopTime
	}
	return 0
}

type CommentList struct {
	HotList              []int64        `protobuf:"varint,1,rep,name=HotList" json:"HotList,omitempty" bson:"HotList,omitempty"`
	CommentInfo          []*CommentData `protobuf:"bytes,14,rep,name=CommentInfo" json:"CommentInfo,omitempty" bson:"CommentInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-" bson:"-"`
	XXX_unrecognized     []byte         `json:"-" bson:"-"`
	XXX_sizecache        int32          `json:"-" bson:"-"`
}

func (m *CommentList) Reset()         { *m = CommentList{} }
func (m *CommentList) String() string { return proto.CompactTextString(m) }
func (*CommentList) ProtoMessage()    {}
func (*CommentList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{23}
}
func (m *CommentList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommentList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommentList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommentList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentList.Merge(m, src)
}
func (m *CommentList) XXX_Size() int {
	return m.Size()
}
func (m *CommentList) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentList.DiscardUnknown(m)
}

var xxx_messageInfo_CommentList proto.InternalMessageInfo

func (m *CommentList) GetHotList() []int64 {
	if m != nil {
		return m.HotList
	}
	return nil
}

func (m *CommentList) GetCommentInfo() []*CommentData {
	if m != nil {
		return m.CommentInfo
	}
	return nil
}

//评论记录：table:square_comment
type CommentData struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	LogId                *int64   `protobuf:"varint,2,opt,name=LogId" json:"LogId,omitempty" bson:"LogId,omitempty"`
	PlayerId             *int64   `protobuf:"varint,3,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Content              *string  `protobuf:"bytes,4,opt,name=Content" json:"Content,omitempty" bson:"Content,omitempty"`
	BelongId             *int64   `protobuf:"varint,5,opt,name=BelongId" json:"BelongId,omitempty" bson:"BelongId,omitempty"`
	CreateTime           *int64   `protobuf:"varint,6,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	TargetId             *int64   `protobuf:"varint,7,opt,name=TargetId" json:"TargetId,omitempty" bson:"TargetId,omitempty"`
	Sex                  *int32   `protobuf:"varint,8,opt,name=Sex" json:"Sex,omitempty" bson:"Sex,omitempty"`
	Name                 *string  `protobuf:"bytes,9,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	OtherName            *string  `protobuf:"bytes,10,opt,name=OtherName" json:"-" bson:"-"`
	OtherSex             *int32   `protobuf:"varint,11,opt,name=OtherSex" json:"-" bson:"-"`
	TotalNum             *int64   `protobuf:"varint,12,opt,name=TotalNum" json:"TotalNum,omitempty" bson:"TotalNum,omitempty"`
	OwnerId              *int64   `protobuf:"varint,13,opt,name=OwnerId" json:"OwnerId,omitempty" bson:"OwnerId,omitempty"`
	HeadIcon             *string  `protobuf:"bytes,14,opt,name=HeadIcon" json:"HeadIcon,omitempty" bson:"HeadIcon,omitempty"`
	Statue               *int32   `protobuf:"varint,15,opt,name=Statue" json:"Statue,omitempty" bson:"Statue,omitempty"`
	Note                 *string  `protobuf:"bytes,16,opt,name=Note" json:"Note,omitempty" bson:"Note,omitempty"`
	Score                *int32   `protobuf:"varint,17,opt,name=Score" json:"Score,omitempty" bson:"Score,omitempty"`
	IsHot                *bool    `protobuf:"varint,18,opt,name=IsHot" json:"-" bson:"-"`
	ZanNum               *int64   `protobuf:"varint,19,opt,name=ZanNum" json:"ZanNum,omitempty" bson:"ZanNum,omitempty"`
	IsZan                *bool    `protobuf:"varint,20,opt,name=IsZan" json:"-" bson:"-"`
	Types                *int32   `protobuf:"varint,21,opt,name=Types" json:"-" bson:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *CommentData) Reset()         { *m = CommentData{} }
func (m *CommentData) String() string { return proto.CompactTextString(m) }
func (*CommentData) ProtoMessage()    {}
func (*CommentData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{24}
}
func (m *CommentData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommentData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommentData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommentData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentData.Merge(m, src)
}
func (m *CommentData) XXX_Size() int {
	return m.Size()
}
func (m *CommentData) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentData.DiscardUnknown(m)
}

var xxx_messageInfo_CommentData proto.InternalMessageInfo

func (m *CommentData) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CommentData) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *CommentData) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *CommentData) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *CommentData) GetBelongId() int64 {
	if m != nil && m.BelongId != nil {
		return *m.BelongId
	}
	return 0
}

func (m *CommentData) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *CommentData) GetTargetId() int64 {
	if m != nil && m.TargetId != nil {
		return *m.TargetId
	}
	return 0
}

func (m *CommentData) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *CommentData) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CommentData) GetOtherName() string {
	if m != nil && m.OtherName != nil {
		return *m.OtherName
	}
	return ""
}

func (m *CommentData) GetOtherSex() int32 {
	if m != nil && m.OtherSex != nil {
		return *m.OtherSex
	}
	return 0
}

func (m *CommentData) GetTotalNum() int64 {
	if m != nil && m.TotalNum != nil {
		return *m.TotalNum
	}
	return 0
}

func (m *CommentData) GetOwnerId() int64 {
	if m != nil && m.OwnerId != nil {
		return *m.OwnerId
	}
	return 0
}

func (m *CommentData) GetHeadIcon() string {
	if m != nil && m.HeadIcon != nil {
		return *m.HeadIcon
	}
	return ""
}

func (m *CommentData) GetStatue() int32 {
	if m != nil && m.Statue != nil {
		return *m.Statue
	}
	return 0
}

func (m *CommentData) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

func (m *CommentData) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *CommentData) GetIsHot() bool {
	if m != nil && m.IsHot != nil {
		return *m.IsHot
	}
	return false
}

func (m *CommentData) GetZanNum() int64 {
	if m != nil && m.ZanNum != nil {
		return *m.ZanNum
	}
	return 0
}

func (m *CommentData) GetIsZan() bool {
	if m != nil && m.IsZan != nil {
		return *m.IsZan
	}
	return false
}

func (m *CommentData) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

//table:square_comment_zan
type CommentDataZan struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	DynamicId            *int64   `protobuf:"varint,3,opt,name=DynamicId" json:"DynamicId,omitempty" bson:"DynamicId,omitempty"`
	CommentId            *int64   `protobuf:"varint,4,opt,name=CommentId" json:"CommentId,omitempty" bson:"CommentId,omitempty"`
	CreateTime           *int64   `protobuf:"varint,5,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *CommentDataZan) Reset()         { *m = CommentDataZan{} }
func (m *CommentDataZan) String() string { return proto.CompactTextString(m) }
func (*CommentDataZan) ProtoMessage()    {}
func (*CommentDataZan) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{25}
}
func (m *CommentDataZan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommentDataZan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommentDataZan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommentDataZan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentDataZan.Merge(m, src)
}
func (m *CommentDataZan) XXX_Size() int {
	return m.Size()
}
func (m *CommentDataZan) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentDataZan.DiscardUnknown(m)
}

var xxx_messageInfo_CommentDataZan proto.InternalMessageInfo

func (m *CommentDataZan) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CommentDataZan) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *CommentDataZan) GetDynamicId() int64 {
	if m != nil && m.DynamicId != nil {
		return *m.DynamicId
	}
	return 0
}

func (m *CommentDataZan) GetCommentId() int64 {
	if m != nil && m.CommentId != nil {
		return *m.CommentId
	}
	return 0
}

func (m *CommentDataZan) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

//点赞记录
type ZanData struct {
	LogId                *int64   `protobuf:"varint,1,opt,name=LogId" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	OperateId            *int64   `protobuf:"varint,3,opt,name=OperateId" json:"OperateId,omitempty" bson:"OperateId,omitempty"`
	DynamicId            *int64   `protobuf:"varint,4,opt,name=DynamicId" json:"DynamicId,omitempty" bson:"DynamicId,omitempty"`
	CreateTime           *int64   `protobuf:"varint,5,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	Sex                  *int32   `protobuf:"varint,6,opt,name=Sex" json:"-" bson:"-"`
	Name                 *string  `protobuf:"bytes,7,opt,name=Name" json:"-" bson:"-"`
	HeadIcon             *string  `protobuf:"bytes,8,opt,name=HeadIcon" json:"-" bson:"-"`
	Types                *int32   `protobuf:"varint,9,opt,name=Types" json:"-" bson:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ZanData) Reset()         { *m = ZanData{} }
func (m *ZanData) String() string { return proto.CompactTextString(m) }
func (*ZanData) ProtoMessage()    {}
func (*ZanData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{26}
}
func (m *ZanData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZanData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZanData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZanData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZanData.Merge(m, src)
}
func (m *ZanData) XXX_Size() int {
	return m.Size()
}
func (m *ZanData) XXX_DiscardUnknown() {
	xxx_messageInfo_ZanData.DiscardUnknown(m)
}

var xxx_messageInfo_ZanData proto.InternalMessageInfo

func (m *ZanData) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *ZanData) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *ZanData) GetOperateId() int64 {
	if m != nil && m.OperateId != nil {
		return *m.OperateId
	}
	return 0
}

func (m *ZanData) GetDynamicId() int64 {
	if m != nil && m.DynamicId != nil {
		return *m.DynamicId
	}
	return 0
}

func (m *ZanData) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ZanData) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *ZanData) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ZanData) GetHeadIcon() string {
	if m != nil && m.HeadIcon != nil {
		return *m.HeadIcon
	}
	return ""
}

func (m *ZanData) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

//关注记录
type AttentionData struct {
	LogId                *int64   `protobuf:"varint,1,opt,name=LogId" json:"_id,omitempty" bson:"_id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	OperateId            *int64   `protobuf:"varint,3,opt,name=OperateId" json:"OperateId,omitempty" bson:"OperateId,omitempty"`
	CreateTime           *int64   `protobuf:"varint,4,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	Sex                  *int32   `protobuf:"varint,5,opt,name=Sex" json:"-" bson:"-"`
	Name                 *string  `protobuf:"bytes,6,opt,name=Name" json:"-" bson:"-"`
	HeadIcon             *string  `protobuf:"bytes,7,opt,name=HeadIcon" json:"-" bson:"-"`
	Types                *int32   `protobuf:"varint,8,opt,name=Types" json:"-" bson:"-"`
	Source               *int32   `protobuf:"varint,9,opt,name=Source" json:"Source,omitempty" bson:"Source,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *AttentionData) Reset()         { *m = AttentionData{} }
func (m *AttentionData) String() string { return proto.CompactTextString(m) }
func (*AttentionData) ProtoMessage()    {}
func (*AttentionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{27}
}
func (m *AttentionData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttentionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttentionData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttentionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttentionData.Merge(m, src)
}
func (m *AttentionData) XXX_Size() int {
	return m.Size()
}
func (m *AttentionData) XXX_DiscardUnknown() {
	xxx_messageInfo_AttentionData.DiscardUnknown(m)
}

var xxx_messageInfo_AttentionData proto.InternalMessageInfo

func (m *AttentionData) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *AttentionData) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *AttentionData) GetOperateId() int64 {
	if m != nil && m.OperateId != nil {
		return *m.OperateId
	}
	return 0
}

func (m *AttentionData) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *AttentionData) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *AttentionData) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *AttentionData) GetHeadIcon() string {
	if m != nil && m.HeadIcon != nil {
		return *m.HeadIcon
	}
	return ""
}

func (m *AttentionData) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *AttentionData) GetSource() int32 {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return 0
}

//小程序微信登录返回
type AliLoginResult struct {
	ErrorResponse                  *AliLoginErrorResponse          `protobuf:"bytes,1,opt,name=error_response" json:"error_response,omitempty" bson:"error_response,omitempty"`
	AlipaySystemOauthTokenResponse *AlipaySystemOauthTokenResponse `protobuf:"bytes,2,opt,name=alipay_system_oauth_token_response" json:"alipay_system_oauth_token_response,omitempty" bson:"alipay_system_oauth_token_response,omitempty"`
	Sign                           *string                         `protobuf:"bytes,3,opt,name=sign" json:"sign,omitempty" bson:"sign,omitempty"`
	XXX_NoUnkeyedLiteral           struct{}                        `json:"-" bson:"-"`
	XXX_unrecognized               []byte                          `json:"-" bson:"-"`
	XXX_sizecache                  int32                           `json:"-" bson:"-"`
}

func (m *AliLoginResult) Reset()         { *m = AliLoginResult{} }
func (m *AliLoginResult) String() string { return proto.CompactTextString(m) }
func (*AliLoginResult) ProtoMessage()    {}
func (*AliLoginResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{28}
}
func (m *AliLoginResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AliLoginResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AliLoginResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AliLoginResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AliLoginResult.Merge(m, src)
}
func (m *AliLoginResult) XXX_Size() int {
	return m.Size()
}
func (m *AliLoginResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AliLoginResult.DiscardUnknown(m)
}

var xxx_messageInfo_AliLoginResult proto.InternalMessageInfo

func (m *AliLoginResult) GetErrorResponse() *AliLoginErrorResponse {
	if m != nil {
		return m.ErrorResponse
	}
	return nil
}

func (m *AliLoginResult) GetAlipaySystemOauthTokenResponse() *AlipaySystemOauthTokenResponse {
	if m != nil {
		return m.AlipaySystemOauthTokenResponse
	}
	return nil
}

func (m *AliLoginResult) GetSign() string {
	if m != nil && m.Sign != nil {
		return *m.Sign
	}
	return ""
}

type AliLoginErrorResponse struct {
	Code                 *string  `protobuf:"bytes,1,opt,name=code" json:"code,omitempty" bson:"code,omitempty"`
	Msg                  *string  `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty" bson:"msg,omitempty"`
	SubCode              *string  `protobuf:"bytes,3,opt,name=sub_code" json:"sub_code,omitempty" bson:"sub_code,omitempty"`
	SubMsg               *string  `protobuf:"bytes,4,opt,name=sub_msg" json:"sub_msg,omitempty" bson:"sub_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *AliLoginErrorResponse) Reset()         { *m = AliLoginErrorResponse{} }
func (m *AliLoginErrorResponse) String() string { return proto.CompactTextString(m) }
func (*AliLoginErrorResponse) ProtoMessage()    {}
func (*AliLoginErrorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{29}
}
func (m *AliLoginErrorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AliLoginErrorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AliLoginErrorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AliLoginErrorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AliLoginErrorResponse.Merge(m, src)
}
func (m *AliLoginErrorResponse) XXX_Size() int {
	return m.Size()
}
func (m *AliLoginErrorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AliLoginErrorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AliLoginErrorResponse proto.InternalMessageInfo

func (m *AliLoginErrorResponse) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

func (m *AliLoginErrorResponse) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func (m *AliLoginErrorResponse) GetSubCode() string {
	if m != nil && m.SubCode != nil {
		return *m.SubCode
	}
	return ""
}

func (m *AliLoginErrorResponse) GetSubMsg() string {
	if m != nil && m.SubMsg != nil {
		return *m.SubMsg
	}
	return ""
}

type AlipaySystemOauthTokenResponse struct {
	AccessToken          *string  `protobuf:"bytes,1,opt,name=access_token" json:"access_token,omitempty" bson:"access_token,omitempty"`
	AlipayUserId         *string  `protobuf:"bytes,2,opt,name=alipay_user_id" json:"alipay_user_id,omitempty" bson:"alipay_user_id,omitempty"`
	ExpiresIn            *int32   `protobuf:"varint,3,opt,name=expires_in" json:"expires_in,omitempty" bson:"expires_in,omitempty"`
	ReExpiresIn          *int32   `protobuf:"varint,4,opt,name=re_expires_in" json:"re_expires_in,omitempty" bson:"re_expires_in,omitempty"`
	RefreshToken         *string  `protobuf:"bytes,5,opt,name=refresh_token" json:"refresh_token,omitempty" bson:"refresh_token,omitempty"`
	UserId               *string  `protobuf:"bytes,6,opt,name=user_id" json:"user_id,omitempty" bson:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *AlipaySystemOauthTokenResponse) Reset()         { *m = AlipaySystemOauthTokenResponse{} }
func (m *AlipaySystemOauthTokenResponse) String() string { return proto.CompactTextString(m) }
func (*AlipaySystemOauthTokenResponse) ProtoMessage()    {}
func (*AlipaySystemOauthTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{30}
}
func (m *AlipaySystemOauthTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlipaySystemOauthTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlipaySystemOauthTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlipaySystemOauthTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlipaySystemOauthTokenResponse.Merge(m, src)
}
func (m *AlipaySystemOauthTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *AlipaySystemOauthTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AlipaySystemOauthTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AlipaySystemOauthTokenResponse proto.InternalMessageInfo

func (m *AlipaySystemOauthTokenResponse) GetAccessToken() string {
	if m != nil && m.AccessToken != nil {
		return *m.AccessToken
	}
	return ""
}

func (m *AlipaySystemOauthTokenResponse) GetAlipayUserId() string {
	if m != nil && m.AlipayUserId != nil {
		return *m.AlipayUserId
	}
	return ""
}

func (m *AlipaySystemOauthTokenResponse) GetExpiresIn() int32 {
	if m != nil && m.ExpiresIn != nil {
		return *m.ExpiresIn
	}
	return 0
}

func (m *AlipaySystemOauthTokenResponse) GetReExpiresIn() int32 {
	if m != nil && m.ReExpiresIn != nil {
		return *m.ReExpiresIn
	}
	return 0
}

func (m *AlipaySystemOauthTokenResponse) GetRefreshToken() string {
	if m != nil && m.RefreshToken != nil {
		return *m.RefreshToken
	}
	return ""
}

func (m *AlipaySystemOauthTokenResponse) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

type BackstageNotifyTopReq struct {
	LogId                *int64   `protobuf:"varint,1,opt,name=LogId" json:"_id,omitempty" bson:"_id,omitempty"`
	TopOverTime          *int64   `protobuf:"varint,2,opt,name=TopOverTime" json:"TopOverTime,omitempty" bson:"TopOverTime,omitempty"`
	IsBsTop              *bool    `protobuf:"varint,3,opt,name=isBsTop" json:"isBsTop,omitempty" bson:"isBsTop,omitempty"`
	IsTop                *bool    `protobuf:"varint,4,opt,name=isTop" json:"isTop,omitempty" bson:"isTop,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *BackstageNotifyTopReq) Reset()         { *m = BackstageNotifyTopReq{} }
func (m *BackstageNotifyTopReq) String() string { return proto.CompactTextString(m) }
func (*BackstageNotifyTopReq) ProtoMessage()    {}
func (*BackstageNotifyTopReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{31}
}
func (m *BackstageNotifyTopReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackstageNotifyTopReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackstageNotifyTopReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackstageNotifyTopReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackstageNotifyTopReq.Merge(m, src)
}
func (m *BackstageNotifyTopReq) XXX_Size() int {
	return m.Size()
}
func (m *BackstageNotifyTopReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BackstageNotifyTopReq.DiscardUnknown(m)
}

var xxx_messageInfo_BackstageNotifyTopReq proto.InternalMessageInfo

func (m *BackstageNotifyTopReq) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *BackstageNotifyTopReq) GetTopOverTime() int64 {
	if m != nil && m.TopOverTime != nil {
		return *m.TopOverTime
	}
	return 0
}

func (m *BackstageNotifyTopReq) GetIsBsTop() bool {
	if m != nil && m.IsBsTop != nil {
		return *m.IsBsTop
	}
	return false
}

func (m *BackstageNotifyTopReq) GetIsTop() bool {
	if m != nil && m.IsTop != nil {
		return *m.IsTop
	}
	return false
}

type CreateAccountData struct {
	Phone                *string  `protobuf:"bytes,1,opt,name=Phone" json:"Phone,omitempty" bson:"Phone,omitempty"`
	PassWord             *string  `protobuf:"bytes,2,opt,name=PassWord" json:"PassWord,omitempty" bson:"PassWord,omitempty"`
	IsVisitor            *bool    `protobuf:"varint,3,opt,name=IsVisitor" json:"IsVisitor,omitempty" bson:"IsVisitor,omitempty"`
	Ip                   *string  `protobuf:"bytes,4,opt,name=Ip" json:"Ip,omitempty" bson:"Ip,omitempty"`
	IsOnline             *bool    `protobuf:"varint,5,opt,name=IsOnline" json:"IsOnline,omitempty" bson:"IsOnline,omitempty"`
	Types                *int32   `protobuf:"varint,6,opt,name=Types" json:"Types,omitempty" bson:"Types,omitempty"`
	AreaCode             *string  `protobuf:"bytes,7,opt,name=AreaCode" json:"AreaCode,omitempty" bson:"AreaCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *CreateAccountData) Reset()         { *m = CreateAccountData{} }
func (m *CreateAccountData) String() string { return proto.CompactTextString(m) }
func (*CreateAccountData) ProtoMessage()    {}
func (*CreateAccountData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{32}
}
func (m *CreateAccountData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAccountData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAccountData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAccountData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAccountData.Merge(m, src)
}
func (m *CreateAccountData) XXX_Size() int {
	return m.Size()
}
func (m *CreateAccountData) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAccountData.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAccountData proto.InternalMessageInfo

func (m *CreateAccountData) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *CreateAccountData) GetPassWord() string {
	if m != nil && m.PassWord != nil {
		return *m.PassWord
	}
	return ""
}

func (m *CreateAccountData) GetIsVisitor() bool {
	if m != nil && m.IsVisitor != nil {
		return *m.IsVisitor
	}
	return false
}

func (m *CreateAccountData) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *CreateAccountData) GetIsOnline() bool {
	if m != nil && m.IsOnline != nil {
		return *m.IsOnline
	}
	return false
}

func (m *CreateAccountData) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *CreateAccountData) GetAreaCode() string {
	if m != nil && m.AreaCode != nil {
		return *m.AreaCode
	}
	return ""
}

// 新版本的刷新信息
type NewVersionFlushInfo struct {
	Type                 *int32   `protobuf:"varint,1,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	AdvId                *int64   `protobuf:"varint,2,opt,name=AdvId" json:"AdvId,omitempty" bson:"AdvId,omitempty"`
	Page                 *int32   `protobuf:"varint,3,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	PageSize             *int32   `protobuf:"varint,4,opt,name=PageSize" json:"PageSize,omitempty" bson:"PageSize,omitempty"`
	PlayerId             *int64   `protobuf:"varint,5,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *NewVersionFlushInfo) Reset()         { *m = NewVersionFlushInfo{} }
func (m *NewVersionFlushInfo) String() string { return proto.CompactTextString(m) }
func (*NewVersionFlushInfo) ProtoMessage()    {}
func (*NewVersionFlushInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{33}
}
func (m *NewVersionFlushInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewVersionFlushInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewVersionFlushInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewVersionFlushInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewVersionFlushInfo.Merge(m, src)
}
func (m *NewVersionFlushInfo) XXX_Size() int {
	return m.Size()
}
func (m *NewVersionFlushInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NewVersionFlushInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NewVersionFlushInfo proto.InternalMessageInfo

func (m *NewVersionFlushInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *NewVersionFlushInfo) GetAdvId() int64 {
	if m != nil && m.AdvId != nil {
		return *m.AdvId
	}
	return 0
}

func (m *NewVersionFlushInfo) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *NewVersionFlushInfo) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *NewVersionFlushInfo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

//  刷新动态信息信息,只刷新广场页,关注页新添加rpc
type FlushSquareDynamicTopicReq struct {
	AdvId                *int64   `protobuf:"varint,1,opt,name=AdvId" json:"AdvId,omitempty" bson:"AdvId,omitempty"`
	Page                 *int32   `protobuf:"varint,2,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	PageSize             *int32   `protobuf:"varint,3,opt,name=PageSize" json:"PageSize,omitempty" bson:"PageSize,omitempty"`
	PlayerId             *int64   `protobuf:"varint,4,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *FlushSquareDynamicTopicReq) Reset()         { *m = FlushSquareDynamicTopicReq{} }
func (m *FlushSquareDynamicTopicReq) String() string { return proto.CompactTextString(m) }
func (*FlushSquareDynamicTopicReq) ProtoMessage()    {}
func (*FlushSquareDynamicTopicReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{34}
}
func (m *FlushSquareDynamicTopicReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlushSquareDynamicTopicReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlushSquareDynamicTopicReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlushSquareDynamicTopicReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlushSquareDynamicTopicReq.Merge(m, src)
}
func (m *FlushSquareDynamicTopicReq) XXX_Size() int {
	return m.Size()
}
func (m *FlushSquareDynamicTopicReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FlushSquareDynamicTopicReq.DiscardUnknown(m)
}

var xxx_messageInfo_FlushSquareDynamicTopicReq proto.InternalMessageInfo

func (m *FlushSquareDynamicTopicReq) GetAdvId() int64 {
	if m != nil && m.AdvId != nil {
		return *m.AdvId
	}
	return 0
}

func (m *FlushSquareDynamicTopicReq) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *FlushSquareDynamicTopicReq) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *FlushSquareDynamicTopicReq) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

type NewVersionAllInfo struct {
	SquareInfo            *DynamicDataListPage `protobuf:"bytes,1,opt,name=SquareInfo" json:"SquareInfo,omitempty" bson:"SquareInfo,omitempty"`
	FirstAddSquareDynamic *bool                `protobuf:"varint,2,opt,name=FirstAddSquareDynamic" json:"FirstAddSquareDynamic,omitempty" bson:"FirstAddSquareDynamic,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}             `json:"-" bson:"-"`
	XXX_unrecognized      []byte               `json:"-" bson:"-"`
	XXX_sizecache         int32                `json:"-" bson:"-"`
}

func (m *NewVersionAllInfo) Reset()         { *m = NewVersionAllInfo{} }
func (m *NewVersionAllInfo) String() string { return proto.CompactTextString(m) }
func (*NewVersionAllInfo) ProtoMessage()    {}
func (*NewVersionAllInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{35}
}
func (m *NewVersionAllInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewVersionAllInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewVersionAllInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewVersionAllInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewVersionAllInfo.Merge(m, src)
}
func (m *NewVersionAllInfo) XXX_Size() int {
	return m.Size()
}
func (m *NewVersionAllInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NewVersionAllInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NewVersionAllInfo proto.InternalMessageInfo

func (m *NewVersionAllInfo) GetSquareInfo() *DynamicDataListPage {
	if m != nil {
		return m.SquareInfo
	}
	return nil
}

func (m *NewVersionAllInfo) GetFirstAddSquareDynamic() bool {
	if m != nil && m.FirstAddSquareDynamic != nil {
		return *m.FirstAddSquareDynamic
	}
	return false
}

//广告系统==========================================================================
//广告表 adv_setting
type AdvSetting struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Title                *string  `protobuf:"bytes,2,opt,name=Title" json:"Title,omitempty" bson:"Title,omitempty"`
	Types                *int32   `protobuf:"varint,4,opt,name=Types" json:"Types,omitempty" bson:"Types,omitempty"`
	Location             *int32   `protobuf:"varint,5,opt,name=Location" json:"Location,omitempty" bson:"Location,omitempty"`
	Status               *int32   `protobuf:"varint,6,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	CreateTime           *int64   `protobuf:"varint,7,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	StartTime            *int64   `protobuf:"varint,10,opt,name=StartTime" json:"StartTime,omitempty" bson:"StartTime,omitempty"`
	EndTime              *int64   `protobuf:"varint,11,opt,name=EndTime" json:"EndTime,omitempty" bson:"EndTime,omitempty"`
	JumpType             *int32   `protobuf:"varint,15,opt,name=JumpType" json:"JumpType,omitempty" bson:"JumpType,omitempty"`
	JumpStyle            *int32   `protobuf:"varint,28,opt,name=JumpStyle" json:"JumpStyle,omitempty" bson:"JumpStyle,omitempty"`
	JumpObject           *int32   `protobuf:"varint,16,opt,name=JumpObject" json:"JumpObject,omitempty" bson:"JumpObject,omitempty"`
	JumpObjectId         *string  `protobuf:"bytes,17,opt,name=JumpObjectId" json:"JumpObjectId,omitempty" bson:"JumpObjectId,omitempty"`
	JumpUrl              *string  `protobuf:"bytes,18,opt,name=JumpUrl" json:"JumpUrl,omitempty" bson:"JumpUrl,omitempty"`
	TxtSource            *string  `protobuf:"bytes,19,opt,name=TxtSource" json:"TxtSource,omitempty" bson:"TxtSource,omitempty"`
	ImgSource            *string  `protobuf:"bytes,20,opt,name=ImgSource" json:"ImgSource,omitempty" bson:"ImgSource,omitempty"`
	VideoSource          *string  `protobuf:"bytes,21,opt,name=VideoSource" json:"VideoSource,omitempty" bson:"VideoSource,omitempty"`
	Weights              *int32   `protobuf:"varint,22,opt,name=Weights" json:"Weights,omitempty" bson:"Weights,omitempty"`
	AdvertiserId         *int32   `protobuf:"varint,25,opt,name=AdvertiserId" json:"AdvertiserId,omitempty" bson:"AdvertiserId,omitempty"`
	Advertiser           *string  `protobuf:"bytes,26,opt,name=Advertiser" json:"Advertiser,omitempty" bson:"Advertiser,omitempty"`
	AdvertiserIcon       *string  `protobuf:"bytes,27,opt,name=AdvertiserIcon" json:"AdvertiserIcon,omitempty" bson:"AdvertiserIcon,omitempty"`
	IsShield             *bool    `protobuf:"varint,29,opt,name=IsShield" json:"IsShield,omitempty" bson:"IsShield,omitempty"`
	BKUrl                *string  `protobuf:"bytes,30,opt,name=BKUrl" json:"BKUrl,omitempty" bson:"BKUrl,omitempty"`
	IsOpenBKUrl          *bool    `protobuf:"varint,31,opt,name=IsOpenBKUrl" json:"IsOpenBKUrl,omitempty" bson:"IsOpenBKUrl,omitempty"`
	DisplayTime          *int32   `protobuf:"varint,32,opt,name=DisplayTime" json:"DisplayTime,omitempty" bson:"DisplayTime,omitempty"`
	AdvType              *int32   `protobuf:"varint,33,opt,name=AdvType" json:"AdvType,omitempty" bson:"AdvType,omitempty"`
	DisplayUrl           *string  `protobuf:"bytes,34,opt,name=DisplayUrl" json:"DisplayUrl,omitempty" bson:"DisplayUrl,omitempty"`
	IsTop                *bool    `protobuf:"varint,35,opt,name=IsTop" json:"IsTop,omitempty" bson:"IsTop,omitempty"`
	JumpAppName          *string  `protobuf:"bytes,36,opt,name=JumpAppName" json:"JumpAppName,omitempty" bson:"JumpAppName,omitempty"`
	JumpAppNameIos       *string  `protobuf:"bytes,37,opt,name=JumpAppNameIos" json:"JumpAppNameIos,omitempty" bson:"JumpAppNameIos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *AdvSetting) Reset()         { *m = AdvSetting{} }
func (m *AdvSetting) String() string { return proto.CompactTextString(m) }
func (*AdvSetting) ProtoMessage()    {}
func (*AdvSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{36}
}
func (m *AdvSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdvSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdvSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdvSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvSetting.Merge(m, src)
}
func (m *AdvSetting) XXX_Size() int {
	return m.Size()
}
func (m *AdvSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvSetting.DiscardUnknown(m)
}

var xxx_messageInfo_AdvSetting proto.InternalMessageInfo

func (m *AdvSetting) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *AdvSetting) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *AdvSetting) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

func (m *AdvSetting) GetLocation() int32 {
	if m != nil && m.Location != nil {
		return *m.Location
	}
	return 0
}

func (m *AdvSetting) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *AdvSetting) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *AdvSetting) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *AdvSetting) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *AdvSetting) GetJumpType() int32 {
	if m != nil && m.JumpType != nil {
		return *m.JumpType
	}
	return 0
}

func (m *AdvSetting) GetJumpStyle() int32 {
	if m != nil && m.JumpStyle != nil {
		return *m.JumpStyle
	}
	return 0
}

func (m *AdvSetting) GetJumpObject() int32 {
	if m != nil && m.JumpObject != nil {
		return *m.JumpObject
	}
	return 0
}

func (m *AdvSetting) GetJumpObjectId() string {
	if m != nil && m.JumpObjectId != nil {
		return *m.JumpObjectId
	}
	return ""
}

func (m *AdvSetting) GetJumpUrl() string {
	if m != nil && m.JumpUrl != nil {
		return *m.JumpUrl
	}
	return ""
}

func (m *AdvSetting) GetTxtSource() string {
	if m != nil && m.TxtSource != nil {
		return *m.TxtSource
	}
	return ""
}

func (m *AdvSetting) GetImgSource() string {
	if m != nil && m.ImgSource != nil {
		return *m.ImgSource
	}
	return ""
}

func (m *AdvSetting) GetVideoSource() string {
	if m != nil && m.VideoSource != nil {
		return *m.VideoSource
	}
	return ""
}

func (m *AdvSetting) GetWeights() int32 {
	if m != nil && m.Weights != nil {
		return *m.Weights
	}
	return 0
}

func (m *AdvSetting) GetAdvertiserId() int32 {
	if m != nil && m.AdvertiserId != nil {
		return *m.AdvertiserId
	}
	return 0
}

func (m *AdvSetting) GetAdvertiser() string {
	if m != nil && m.Advertiser != nil {
		return *m.Advertiser
	}
	return ""
}

func (m *AdvSetting) GetAdvertiserIcon() string {
	if m != nil && m.AdvertiserIcon != nil {
		return *m.AdvertiserIcon
	}
	return ""
}

func (m *AdvSetting) GetIsShield() bool {
	if m != nil && m.IsShield != nil {
		return *m.IsShield
	}
	return false
}

func (m *AdvSetting) GetBKUrl() string {
	if m != nil && m.BKUrl != nil {
		return *m.BKUrl
	}
	return ""
}

func (m *AdvSetting) GetIsOpenBKUrl() bool {
	if m != nil && m.IsOpenBKUrl != nil {
		return *m.IsOpenBKUrl
	}
	return false
}

func (m *AdvSetting) GetDisplayTime() int32 {
	if m != nil && m.DisplayTime != nil {
		return *m.DisplayTime
	}
	return 0
}

func (m *AdvSetting) GetAdvType() int32 {
	if m != nil && m.AdvType != nil {
		return *m.AdvType
	}
	return 0
}

func (m *AdvSetting) GetDisplayUrl() string {
	if m != nil && m.DisplayUrl != nil {
		return *m.DisplayUrl
	}
	return ""
}

func (m *AdvSetting) GetIsTop() bool {
	if m != nil && m.IsTop != nil {
		return *m.IsTop
	}
	return false
}

func (m *AdvSetting) GetJumpAppName() string {
	if m != nil && m.JumpAppName != nil {
		return *m.JumpAppName
	}
	return ""
}

func (m *AdvSetting) GetJumpAppNameIos() string {
	if m != nil && m.JumpAppNameIos != nil {
		return *m.JumpAppNameIos
	}
	return ""
}

//广告报表
type AdvReport struct {
	Id                   *string     `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	CreateTime           *int64      `protobuf:"varint,2,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	AdvId                *int64      `protobuf:"varint,3,opt,name=AdvId" json:"AdvId,omitempty" bson:"AdvId,omitempty"`
	PvCount              *int64      `protobuf:"varint,4,opt,name=PvCount" json:"PvCount,omitempty" bson:"PvCount,omitempty"`
	UvCount              *int64      `protobuf:"varint,5,opt,name=UvCount" json:"UvCount,omitempty" bson:"UvCount,omitempty"`
	Clicks               *int64      `protobuf:"varint,6,opt,name=Clicks" json:"Clicks,omitempty" bson:"Clicks,omitempty"`
	ClickPlayers         *int64      `protobuf:"varint,7,opt,name=ClickPlayers" json:"ClickPlayers,omitempty" bson:"ClickPlayers,omitempty"`
	Adv                  *AdvSetting `protobuf:"bytes,8,opt,name=Adv" json:"Adv,omitempty" bson:"Adv,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-" bson:"-"`
	XXX_unrecognized     []byte      `json:"-" bson:"-"`
	XXX_sizecache        int32       `json:"-" bson:"-"`
}

func (m *AdvReport) Reset()         { *m = AdvReport{} }
func (m *AdvReport) String() string { return proto.CompactTextString(m) }
func (*AdvReport) ProtoMessage()    {}
func (*AdvReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{37}
}
func (m *AdvReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdvReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdvReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdvReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvReport.Merge(m, src)
}
func (m *AdvReport) XXX_Size() int {
	return m.Size()
}
func (m *AdvReport) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvReport.DiscardUnknown(m)
}

var xxx_messageInfo_AdvReport proto.InternalMessageInfo

func (m *AdvReport) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *AdvReport) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *AdvReport) GetAdvId() int64 {
	if m != nil && m.AdvId != nil {
		return *m.AdvId
	}
	return 0
}

func (m *AdvReport) GetPvCount() int64 {
	if m != nil && m.PvCount != nil {
		return *m.PvCount
	}
	return 0
}

func (m *AdvReport) GetUvCount() int64 {
	if m != nil && m.UvCount != nil {
		return *m.UvCount
	}
	return 0
}

func (m *AdvReport) GetClicks() int64 {
	if m != nil && m.Clicks != nil {
		return *m.Clicks
	}
	return 0
}

func (m *AdvReport) GetClickPlayers() int64 {
	if m != nil && m.ClickPlayers != nil {
		return *m.ClickPlayers
	}
	return 0
}

func (m *AdvReport) GetAdv() *AdvSetting {
	if m != nil {
		return m.Adv
	}
	return nil
}

//服务器间通讯通用结构
type MsgToServer struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	RpcName              *string  `protobuf:"bytes,2,opt,name=RpcName" json:"RpcName,omitempty" bson:"RpcName,omitempty"`
	MsgName              *string  `protobuf:"bytes,3,opt,name=MsgName" json:"MsgName,omitempty" bson:"MsgName,omitempty"`
	Msg                  []byte   `protobuf:"bytes,4,opt,name=Msg" json:"Msg,omitempty" bson:"Msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *MsgToServer) Reset()         { *m = MsgToServer{} }
func (m *MsgToServer) String() string { return proto.CompactTextString(m) }
func (*MsgToServer) ProtoMessage()    {}
func (*MsgToServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{38}
}
func (m *MsgToServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgToServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgToServer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgToServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgToServer.Merge(m, src)
}
func (m *MsgToServer) XXX_Size() int {
	return m.Size()
}
func (m *MsgToServer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgToServer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgToServer proto.InternalMessageInfo

func (m *MsgToServer) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *MsgToServer) GetRpcName() string {
	if m != nil && m.RpcName != nil {
		return *m.RpcName
	}
	return ""
}

func (m *MsgToServer) GetMsgName() string {
	if m != nil && m.MsgName != nil {
		return *m.MsgName
	}
	return ""
}

func (m *MsgToServer) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

//服务器间通讯，直接返回给客户端
type MsgToClient struct {
	PlayerIds            []int64  `protobuf:"varint,1,rep,name=PlayerIds" json:"PlayerIds,omitempty" bson:"PlayerIds,omitempty"`
	RpcName              *string  `protobuf:"bytes,2,opt,name=RpcName" json:"RpcName,omitempty" bson:"RpcName,omitempty"`
	MsgName              *string  `protobuf:"bytes,3,opt,name=MsgName" json:"MsgName,omitempty" bson:"MsgName,omitempty"`
	Msg                  []byte   `protobuf:"bytes,4,opt,name=Msg" json:"Msg,omitempty" bson:"Msg,omitempty"`
	IsSend               *bool    `protobuf:"varint,5,opt,name=IsSend" json:"IsSend,omitempty" bson:"IsSend,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *MsgToClient) Reset()         { *m = MsgToClient{} }
func (m *MsgToClient) String() string { return proto.CompactTextString(m) }
func (*MsgToClient) ProtoMessage()    {}
func (*MsgToClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{39}
}
func (m *MsgToClient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgToClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgToClient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgToClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgToClient.Merge(m, src)
}
func (m *MsgToClient) XXX_Size() int {
	return m.Size()
}
func (m *MsgToClient) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgToClient.DiscardUnknown(m)
}

var xxx_messageInfo_MsgToClient proto.InternalMessageInfo

func (m *MsgToClient) GetPlayerIds() []int64 {
	if m != nil {
		return m.PlayerIds
	}
	return nil
}

func (m *MsgToClient) GetRpcName() string {
	if m != nil && m.RpcName != nil {
		return *m.RpcName
	}
	return ""
}

func (m *MsgToClient) GetMsgName() string {
	if m != nil && m.MsgName != nil {
		return *m.MsgName
	}
	return ""
}

func (m *MsgToClient) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *MsgToClient) GetIsSend() bool {
	if m != nil && m.IsSend != nil {
		return *m.IsSend
	}
	return false
}

// 话题参与的用户
type TopicParticipatePlayer struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	TopicId              *int64   `protobuf:"varint,2,opt,name=TopicId" json:"TopicId,omitempty" bson:"TopicId,omitempty"`
	Sex                  *int32   `protobuf:"varint,3,opt,name=Sex" json:"Sex,omitempty" bson:"Sex,omitempty"`
	HeadIcon             *string  `protobuf:"bytes,4,opt,name=HeadIcon" json:"HeadIcon,omitempty" bson:"HeadIcon,omitempty"`
	NickName             *string  `protobuf:"bytes,5,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	Signature            *string  `protobuf:"bytes,6,opt,name=Signature" json:"Signature,omitempty" bson:"Signature,omitempty"`
	DynamicId            *int64   `protobuf:"varint,7,opt,name=DynamicId" json:"DynamicId,omitempty" bson:"DynamicId,omitempty"`
	FansNum              *int64   `protobuf:"varint,8,opt,name=FansNum" json:"FansNum,omitempty" bson:"FansNum,omitempty"`
	Types                *int32   `protobuf:"varint,9,opt,name=Types" json:"-" bson:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TopicParticipatePlayer) Reset()         { *m = TopicParticipatePlayer{} }
func (m *TopicParticipatePlayer) String() string { return proto.CompactTextString(m) }
func (*TopicParticipatePlayer) ProtoMessage()    {}
func (*TopicParticipatePlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{40}
}
func (m *TopicParticipatePlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicParticipatePlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicParticipatePlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicParticipatePlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicParticipatePlayer.Merge(m, src)
}
func (m *TopicParticipatePlayer) XXX_Size() int {
	return m.Size()
}
func (m *TopicParticipatePlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicParticipatePlayer.DiscardUnknown(m)
}

var xxx_messageInfo_TopicParticipatePlayer proto.InternalMessageInfo

func (m *TopicParticipatePlayer) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *TopicParticipatePlayer) GetTopicId() int64 {
	if m != nil && m.TopicId != nil {
		return *m.TopicId
	}
	return 0
}

func (m *TopicParticipatePlayer) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *TopicParticipatePlayer) GetHeadIcon() string {
	if m != nil && m.HeadIcon != nil {
		return *m.HeadIcon
	}
	return ""
}

func (m *TopicParticipatePlayer) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *TopicParticipatePlayer) GetSignature() string {
	if m != nil && m.Signature != nil {
		return *m.Signature
	}
	return ""
}

func (m *TopicParticipatePlayer) GetDynamicId() int64 {
	if m != nil && m.DynamicId != nil {
		return *m.DynamicId
	}
	return 0
}

func (m *TopicParticipatePlayer) GetFansNum() int64 {
	if m != nil && m.FansNum != nil {
		return *m.FansNum
	}
	return 0
}

func (m *TopicParticipatePlayer) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

// 具体的话题
type Topic struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	TopicTypeId          *int64   `protobuf:"varint,2,opt,name=TopicTypeId" json:"TopicTypeId,omitempty" bson:"TopicTypeId,omitempty"`
	Name                 *string  `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	HeadURL              *string  `protobuf:"bytes,4,opt,name=HeadURL" json:"HeadURL,omitempty" bson:"HeadURL,omitempty"`
	HotScore             *int64   `protobuf:"varint,5,opt,name=HotScore" json:"HotScore,omitempty" bson:"HotScore,omitempty"`
	TopicClass           *int32   `protobuf:"varint,6,opt,name=TopicClass" json:"TopicClass,omitempty" bson:"TopicClass,omitempty"`
	FansNum              *int64   `protobuf:"varint,7,opt,name=FansNum" json:"FansNum,omitempty" bson:"FansNum,omitempty"`
	ParticipationNum     *int64   `protobuf:"varint,8,opt,name=ParticipationNum" json:"ParticipationNum,omitempty" bson:"ParticipationNum,omitempty"`
	ViewingNum           *int64   `protobuf:"varint,9,opt,name=ViewingNum" json:"ViewingNum,omitempty" bson:"ViewingNum,omitempty"`
	Description          *string  `protobuf:"bytes,10,opt,name=Description" json:"Description,omitempty" bson:"Description,omitempty"`
	IsAttention          *bool    `protobuf:"varint,11,opt,name=IsAttention" json:"-" bson:"-"`
	CreateTime           *int64   `protobuf:"varint,12,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,14,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	Status               *int32   `protobuf:"varint,15,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	Owner                *string  `protobuf:"bytes,16,opt,name=Owner" json:"Owner,omitempty" bson:"Owner,omitempty"`
	Admin                *string  `protobuf:"bytes,17,opt,name=Admin" json:"Admin,omitempty" bson:"Admin,omitempty"`
	IsOpen               *bool    `protobuf:"varint,18,opt,name=IsOpen" json:"IsOpen,omitempty" bson:"IsOpen,omitempty"`
	BgUrl                *string  `protobuf:"bytes,19,opt,name=BgUrl" json:"BgUrl,omitempty" bson:"BgUrl,omitempty"`
	IsRecommend          *bool    `protobuf:"varint,20,opt,name=IsRecommend" json:"IsRecommend,omitempty" bson:"IsRecommend,omitempty"`
	SortRecommend        *int64   `protobuf:"varint,21,opt,name=SortRecommend" json:"SortRecommend,omitempty" bson:"SortRecommend,omitempty"`
	IsHot                *bool    `protobuf:"varint,22,opt,name=IsHot" json:"IsHot,omitempty" bson:"IsHot,omitempty"`
	TopicMaster          *int64   `protobuf:"varint,23,opt,name=TopicMaster" json:"TopicMaster,omitempty" bson:"TopicMaster,omitempty"`
	TopicRule            *string  `protobuf:"bytes,24,opt,name=TopicRule" json:"TopicRule,omitempty" bson:"TopicRule,omitempty"`
	AddViewingNum        *int64   `protobuf:"varint,30,opt,name=AddViewingNum" json:"AddViewingNum,omitempty" bson:"AddViewingNum,omitempty"`
	AddParticipationNum  *int64   `protobuf:"varint,31,opt,name=AddParticipationNum" json:"AddParticipationNum,omitempty" bson:"AddParticipationNum,omitempty"`
	AddFansNum           *int64   `protobuf:"varint,32,opt,name=AddFansNum" json:"AddFansNum,omitempty" bson:"AddFansNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *Topic) Reset()         { *m = Topic{} }
func (m *Topic) String() string { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()    {}
func (*Topic) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{41}
}
func (m *Topic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Topic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Topic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Topic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Topic.Merge(m, src)
}
func (m *Topic) XXX_Size() int {
	return m.Size()
}
func (m *Topic) XXX_DiscardUnknown() {
	xxx_messageInfo_Topic.DiscardUnknown(m)
}

var xxx_messageInfo_Topic proto.InternalMessageInfo

func (m *Topic) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Topic) GetTopicTypeId() int64 {
	if m != nil && m.TopicTypeId != nil {
		return *m.TopicTypeId
	}
	return 0
}

func (m *Topic) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Topic) GetHeadURL() string {
	if m != nil && m.HeadURL != nil {
		return *m.HeadURL
	}
	return ""
}

func (m *Topic) GetHotScore() int64 {
	if m != nil && m.HotScore != nil {
		return *m.HotScore
	}
	return 0
}

func (m *Topic) GetTopicClass() int32 {
	if m != nil && m.TopicClass != nil {
		return *m.TopicClass
	}
	return 0
}

func (m *Topic) GetFansNum() int64 {
	if m != nil && m.FansNum != nil {
		return *m.FansNum
	}
	return 0
}

func (m *Topic) GetParticipationNum() int64 {
	if m != nil && m.ParticipationNum != nil {
		return *m.ParticipationNum
	}
	return 0
}

func (m *Topic) GetViewingNum() int64 {
	if m != nil && m.ViewingNum != nil {
		return *m.ViewingNum
	}
	return 0
}

func (m *Topic) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Topic) GetIsAttention() bool {
	if m != nil && m.IsAttention != nil {
		return *m.IsAttention
	}
	return false
}

func (m *Topic) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *Topic) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *Topic) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *Topic) GetOwner() string {
	if m != nil && m.Owner != nil {
		return *m.Owner
	}
	return ""
}

func (m *Topic) GetAdmin() string {
	if m != nil && m.Admin != nil {
		return *m.Admin
	}
	return ""
}

func (m *Topic) GetIsOpen() bool {
	if m != nil && m.IsOpen != nil {
		return *m.IsOpen
	}
	return false
}

func (m *Topic) GetBgUrl() string {
	if m != nil && m.BgUrl != nil {
		return *m.BgUrl
	}
	return ""
}

func (m *Topic) GetIsRecommend() bool {
	if m != nil && m.IsRecommend != nil {
		return *m.IsRecommend
	}
	return false
}

func (m *Topic) GetSortRecommend() int64 {
	if m != nil && m.SortRecommend != nil {
		return *m.SortRecommend
	}
	return 0
}

func (m *Topic) GetIsHot() bool {
	if m != nil && m.IsHot != nil {
		return *m.IsHot
	}
	return false
}

func (m *Topic) GetTopicMaster() int64 {
	if m != nil && m.TopicMaster != nil {
		return *m.TopicMaster
	}
	return 0
}

func (m *Topic) GetTopicRule() string {
	if m != nil && m.TopicRule != nil {
		return *m.TopicRule
	}
	return ""
}

func (m *Topic) GetAddViewingNum() int64 {
	if m != nil && m.AddViewingNum != nil {
		return *m.AddViewingNum
	}
	return 0
}

func (m *Topic) GetAddParticipationNum() int64 {
	if m != nil && m.AddParticipationNum != nil {
		return *m.AddParticipationNum
	}
	return 0
}

func (m *Topic) GetAddFansNum() int64 {
	if m != nil && m.AddFansNum != nil {
		return *m.AddFansNum
	}
	return 0
}

type PipeIntCount struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Count                *int64   `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty" bson:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PipeIntCount) Reset()         { *m = PipeIntCount{} }
func (m *PipeIntCount) String() string { return proto.CompactTextString(m) }
func (*PipeIntCount) ProtoMessage()    {}
func (*PipeIntCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{42}
}
func (m *PipeIntCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PipeIntCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PipeIntCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PipeIntCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipeIntCount.Merge(m, src)
}
func (m *PipeIntCount) XXX_Size() int {
	return m.Size()
}
func (m *PipeIntCount) XXX_DiscardUnknown() {
	xxx_messageInfo_PipeIntCount.DiscardUnknown(m)
}

var xxx_messageInfo_PipeIntCount proto.InternalMessageInfo

func (m *PipeIntCount) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PipeIntCount) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

type PipeStringCount struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Count                *int64   `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty" bson:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PipeStringCount) Reset()         { *m = PipeStringCount{} }
func (m *PipeStringCount) String() string { return proto.CompactTextString(m) }
func (*PipeStringCount) ProtoMessage()    {}
func (*PipeStringCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6867519e51c462, []int{43}
}
func (m *PipeStringCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PipeStringCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PipeStringCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PipeStringCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipeStringCount.Merge(m, src)
}
func (m *PipeStringCount) XXX_Size() int {
	return m.Size()
}
func (m *PipeStringCount) XXX_DiscardUnknown() {
	xxx_messageInfo_PipeStringCount.DiscardUnknown(m)
}

var xxx_messageInfo_PipeStringCount proto.InternalMessageInfo

func (m *PipeStringCount) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *PipeStringCount) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*BroadCastData)(nil), "share_message.BroadCastData")
	proto.RegisterType((*BroadIdReq)(nil), "share_message.BroadIdReq")
	proto.RegisterType((*BroadCastMsg)(nil), "share_message.BroadCastMsg")
	proto.RegisterType((*DynamicDataListPage)(nil), "share_message.DynamicDataListPage")
	proto.RegisterType((*TeamPlayerInfo)(nil), "share_message.TeamPlayerInfo")
	proto.RegisterType((*LabelInfo)(nil), "share_message.LabelInfo")
	proto.RegisterType((*NoticeInfo)(nil), "share_message.NoticeInfo")
	proto.RegisterType((*Chat)(nil), "share_message.Chat")
	proto.RegisterType((*MsgData)(nil), "share_message.MsgData")
	proto.RegisterType((*PlayerState)(nil), "share_message.PlayerState")
	proto.RegisterType((*PlayerOnlineInfo)(nil), "share_message.PlayerOnlineInfo")
	proto.RegisterType((*RechargeOrder)(nil), "share_message.RechargeOrder")
	proto.RegisterType((*RechargeOrderResult)(nil), "share_message.RechargeOrderResult")
	proto.RegisterType((*PerPayInfo)(nil), "share_message.PerPayInfo")
	proto.RegisterType((*RechargeData)(nil), "share_message.RechargeData")
	proto.RegisterType((*RechargeFinish)(nil), "share_message.RechargeFinish")
	proto.RegisterType((*WXLoginResult)(nil), "share_message.WXLoginResult")
	proto.RegisterType((*PayData)(nil), "share_message.PayData")
	proto.RegisterType((*AliPayData)(nil), "share_message.AliPayData")
	proto.RegisterType((*RechargeTLOrder)(nil), "share_message.RechargeTLOrder")
	proto.RegisterType((*RechargeTLOrderResult)(nil), "share_message.RechargeTLOrderResult")
	proto.RegisterType((*DynamicData)(nil), "share_message.DynamicData")
	proto.RegisterType((*TopicTop)(nil), "share_message.TopicTop")
	proto.RegisterType((*CommentList)(nil), "share_message.CommentList")
	proto.RegisterType((*CommentData)(nil), "share_message.CommentData")
	proto.RegisterType((*CommentDataZan)(nil), "share_message.CommentDataZan")
	proto.RegisterType((*ZanData)(nil), "share_message.ZanData")
	proto.RegisterType((*AttentionData)(nil), "share_message.AttentionData")
	proto.RegisterType((*AliLoginResult)(nil), "share_message.AliLoginResult")
	proto.RegisterType((*AliLoginErrorResponse)(nil), "share_message.AliLoginErrorResponse")
	proto.RegisterType((*AlipaySystemOauthTokenResponse)(nil), "share_message.AlipaySystemOauthTokenResponse")
	proto.RegisterType((*BackstageNotifyTopReq)(nil), "share_message.BackstageNotifyTopReq")
	proto.RegisterType((*CreateAccountData)(nil), "share_message.CreateAccountData")
	proto.RegisterType((*NewVersionFlushInfo)(nil), "share_message.NewVersionFlushInfo")
	proto.RegisterType((*FlushSquareDynamicTopicReq)(nil), "share_message.FlushSquareDynamicTopicReq")
	proto.RegisterType((*NewVersionAllInfo)(nil), "share_message.NewVersionAllInfo")
	proto.RegisterType((*AdvSetting)(nil), "share_message.AdvSetting")
	proto.RegisterType((*AdvReport)(nil), "share_message.AdvReport")
	proto.RegisterType((*MsgToServer)(nil), "share_message.MsgToServer")
	proto.RegisterType((*MsgToClient)(nil), "share_message.MsgToClient")
	proto.RegisterType((*TopicParticipatePlayer)(nil), "share_message.TopicParticipatePlayer")
	proto.RegisterType((*Topic)(nil), "share_message.Topic")
	proto.RegisterType((*PipeIntCount)(nil), "share_message.PipeIntCount")
	proto.RegisterType((*PipeStringCount)(nil), "share_message.PipeStringCount")
}

func init() { proto.RegisterFile("allcommon.proto", fileDescriptor_ed6867519e51c462) }

var fileDescriptor_ed6867519e51c462 = []byte{
	// 3443 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0xcd, 0x6f, 0x1b, 0x49,
	0x76, 0x07, 0xbf, 0x44, 0xf2, 0xf1, 0x4b, 0x6a, 0x4a, 0x72, 0x5b, 0x1e, 0xdb, 0x0a, 0xd7, 0xbb,
	0xab, 0xec, 0x7c, 0x21, 0x3e, 0x6c, 0x80, 0x60, 0x80, 0x05, 0x25, 0xdb, 0x10, 0x13, 0x7d, 0x30,
	0x22, 0x6d, 0x6f, 0x8c, 0x04, 0x44, 0xa9, 0xbb, 0x4c, 0xd6, 0xaa, 0xd9, 0xd5, 0xae, 0x2a, 0xca,
	0x62, 0x16, 0xb9, 0xe4, 0x90, 0x5b, 0x80, 0x1c, 0x73, 0xcd, 0x1f, 0x11, 0x04, 0x39, 0xcc, 0x3d,
	0xb7, 0x04, 0xf3, 0x07, 0x0c, 0x82, 0x39, 0x0e, 0x90, 0xd3, 0xfc, 0x03, 0x41, 0xbd, 0xaa, 0xea,
	0x6e, 0x52, 0x72, 0xec, 0x04, 0xb9, 0x91, 0xaf, 0xaa, 0x5e, 0xbd, 0x7a, 0xef, 0xf7, 0x3e, 0x1b,
	0x3a, 0x24, 0x8a, 0x02, 0x3e, 0x9f, 0xf3, 0xf8, 0xab, 0x44, 0x70, 0xc5, 0xbd, 0x96, 0x9c, 0x11,
	0x41, 0x27, 0x73, 0x2a, 0x25, 0x99, 0xd2, 0xbd, 0xe6, 0x74, 0xca, 0x15, 0x99, 0x9a, 0xc5, 0xde,
	0xdf, 0x16, 0xa0, 0x75, 0x28, 0x38, 0x09, 0x8f, 0x88, 0x54, 0xcf, 0x88, 0x22, 0x5e, 0x0b, 0x2a,
	0x27, 0xf4, 0x9a, 0x46, 0x7e, 0x61, 0xbf, 0x78, 0x50, 0xf1, 0x3a, 0x50, 0x3d, 0xe2, 0xb1, 0xa2,
	0xb1, 0xf2, 0x8b, 0xfb, 0xc5, 0x83, 0xba, 0x5e, 0x3f, 0xe2, 0x8b, 0x58, 0xf9, 0x25, 0xb7, 0x8e,
	0xe7, 0x07, 0xa1, 0x5f, 0xde, 0x2f, 0x18, 0xc2, 0xa9, 0x9c, 0x8e, 0x97, 0x09, 0xf5, 0x2b, 0x48,
	0x68, 0xc3, 0x46, 0x7f, 0x8e, 0x27, 0x36, 0xf6, 0x0b, 0x07, 0x25, 0x6f, 0x13, 0x6a, 0x67, 0x2c,
	0xb8, 0x3a, 0x23, 0x73, 0xea, 0x57, 0xf7, 0x0b, 0x07, 0xf5, 0xde, 0x43, 0x00, 0xcb, 0xe3, 0x82,
	0xbe, 0x5b, 0xe5, 0x58, 0x3c, 0xa8, 0xf4, 0x8e, 0xa1, 0x99, 0x8a, 0x78, 0x2a, 0xa7, 0xde, 0xaf,
	0xa0, 0xac, 0x25, 0xf5, 0x0b, 0xfb, 0xa5, 0x83, 0xc6, 0xd3, 0xcf, 0xbe, 0x5a, 0x79, 0xdf, 0x57,
	0xab, 0xaf, 0x69, 0x42, 0x79, 0xc4, 0x14, 0xf5, 0x8b, 0x78, 0xd1, 0x1c, 0xba, 0xcf, 0x96, 0x31,
	0x99, 0xb3, 0x40, 0x2f, 0x9e, 0x30, 0xa9, 0x86, 0x64, 0x4a, 0xbd, 0xaf, 0xa1, 0x91, 0x23, 0x5b,
	0xbe, 0x7b, 0x6b, 0x7c, 0x73, 0x3b, 0x3c, 0x0f, 0x60, 0xcc, 0x15, 0x89, 0x8c, 0x22, 0x8a, 0xf8,
	0xcc, 0x2d, 0xa8, 0x6b, 0x66, 0x4e, 0x37, 0x85, 0x83, 0x4a, 0xef, 0xa7, 0x32, 0xb4, 0xc7, 0x94,
	0xcc, 0x87, 0x11, 0x59, 0x52, 0x31, 0x88, 0xdf, 0x72, 0xfd, 0x78, 0xfb, 0x2f, 0xf4, 0x0b, 0xa8,
	0x8e, 0x0e, 0x54, 0xfb, 0x41, 0x90, 0x32, 0xaa, 0xaf, 0xe8, 0xa7, 0xe4, 0x28, 0xc7, 0x94, 0x84,
	0x83, 0x80, 0xc7, 0xa8, 0xe4, 0xba, 0xd7, 0x80, 0xd2, 0x88, 0xde, 0x64, 0x0a, 0xbe, 0xa0, 0xb8,
	0x7d, 0xc3, 0x6d, 0xd7, 0xb7, 0x66, 0x0a, 0xd6, 0x36, 0x1b, 0xce, 0x78, 0x4c, 0xfd, 0x5a, 0xee,
	0xaf, 0xe2, 0x7e, 0x7d, 0xbf, 0x74, 0x50, 0xd7, 0x92, 0x8f, 0xd8, 0x34, 0x26, 0x6a, 0x21, 0xa8,
	0x0f, 0xb8, 0xa3, 0x03, 0xd5, 0xa1, 0xe0, 0xd7, 0x2c, 0xa0, 0x7e, 0x03, 0x09, 0x4d, 0x28, 0x1f,
	0x31, 0xb5, 0xf4, 0x9b, 0x6e, 0xf9, 0x68, 0x46, 0xe2, 0x98, 0x46, 0x7e, 0xcb, 0x71, 0x1c, 0x29,
	0xa2, 0xa8, 0xdf, 0x76, 0x12, 0x69, 0x09, 0x06, 0xa1, 0xdf, 0xc1, 0x37, 0x36, 0xa1, 0x8c, 0x80,
	0xd8, 0xc4, 0xd5, 0x26, 0x94, 0x5f, 0x90, 0x58, 0xfa, 0x5b, 0xf8, 0xcf, 0x03, 0xe8, 0x2b, 0x8d,
	0x2f, 0xc6, 0x63, 0xe9, 0x7b, 0x6e, 0xc7, 0x1b, 0xbd, 0xa3, 0xeb, 0xfe, 0xe1, 0xd3, 0xb7, 0xf1,
	0xdf, 0x1f, 0xaf, 0x1a, 0x6b, 0x67, 0xbf, 0x70, 0xd0, 0x78, 0xda, 0xfb, 0xb0, 0xb1, 0x52, 0x2b,
	0x3f, 0x80, 0xee, 0x40, 0x9e, 0xc7, 0xa7, 0xcb, 0xf4, 0x3a, 0xbd, 0xe4, 0xef, 0xee, 0x17, 0x0e,
	0x6a, 0xde, 0x3d, 0xe8, 0x98, 0xc5, 0xc3, 0x88, 0x04, 0x57, 0xb8, 0x70, 0x0f, 0x17, 0x3e, 0x87,
	0xfa, 0x09, 0xb9, 0xa4, 0x91, 0xb6, 0x9e, 0xef, 0x23, 0x32, 0xfc, 0xb5, 0xcb, 0xd2, 0x75, 0x6f,
	0x1b, 0x9a, 0xd6, 0x96, 0x46, 0x1b, 0xf7, 0x51, 0xe2, 0x3d, 0xf0, 0x0e, 0x49, 0x70, 0x35, 0x15,
	0x7c, 0x11, 0x87, 0x83, 0x39, 0x99, 0xd2, 0x97, 0x17, 0x27, 0xfe, 0x9e, 0x53, 0x9c, 0xd6, 0x8c,
	0xf4, 0x1f, 0xe0, 0xd6, 0x1d, 0x68, 0xf5, 0xc3, 0xf0, 0x85, 0x60, 0x34, 0x0e, 0x51, 0x63, 0x9f,
	0x21, 0x79, 0x1b, 0x9a, 0x88, 0x23, 0x2e, 0x99, 0x96, 0xdb, 0x7f, 0xe8, 0x36, 0x1f, 0xf1, 0x58,
	0x2a, 0x1a, 0x45, 0x04, 0xc9, 0x8f, 0x10, 0x75, 0x3f, 0xcf, 0x49, 0xec, 0x01, 0x14, 0x2d, 0xd2,
	0x50, 0x8f, 0x88, 0x09, 0xe3, 0x0b, 0x5f, 0x02, 0x9c, 0x71, 0xc5, 0x02, 0x8a, 0xfb, 0x5a, 0x50,
	0x19, 0xc8, 0x7e, 0x14, 0xe1, 0xd6, 0xda, 0x0a, 0x4c, 0x8b, 0xfb, 0xa5, 0x83, 0x52, 0xef, 0xef,
	0xcb, 0x50, 0x3e, 0x9a, 0x11, 0xa5, 0x97, 0x46, 0x7c, 0x21, 0x02, 0x9a, 0x22, 0x58, 0xe3, 0x8d,
	0x88, 0x29, 0x55, 0xb8, 0xd9, 0x62, 0xda, 0x05, 0x8d, 0x14, 0xc1, 0xfa, 0x30, 0x3e, 0x29, 0x0d,
	0x13, 0xfa, 0x86, 0x41, 0x28, 0xfd, 0x8a, 0xbe, 0x00, 0x31, 0xc2, 0x2c, 0x86, 0x4b, 0x18, 0x85,
	0xf8, 0x74, 0x10, 0x22, 0x80, 0x4b, 0x5e, 0x17, 0x1a, 0x96, 0x21, 0xb2, 0xa8, 0x21, 0x8b, 0xaf,
	0xa1, 0x76, 0x44, 0x44, 0x88, 0x96, 0x01, 0x84, 0xc1, 0xc3, 0x35, 0xcb, 0xac, 0x39, 0xdf, 0x36,
	0x34, 0xf5, 0x81, 0xf4, 0x65, 0x0d, 0x07, 0xce, 0x53, 0x22, 0xae, 0x2c, 0xb4, 0x77, 0xa0, 0x35,
	0x90, 0xa3, 0x45, 0x10, 0x50, 0x29, 0x47, 0x34, 0x0e, 0x11, 0xe0, 0x15, 0x8b, 0x7f, 0x83, 0xef,
	0xba, 0xc6, 0xac, 0xd1, 0x01, 0xea, 0xb3, 0x83, 0xb4, 0x5d, 0x68, 0x1b, 0x5a, 0xea, 0xaa, 0x9b,
	0x48, 0xd7, 0xde, 0x85, 0x74, 0xed, 0xb0, 0x06, 0xf2, 0x2b, 0xaa, 0x47, 0xc8, 0x37, 0x9e, 0xde,
	0x5f, 0x13, 0x3d, 0x67, 0x9b, 0x4d, 0xa8, 0x3d, 0xbf, 0x66, 0x11, 0xbe, 0xbc, 0xeb, 0x62, 0xcd,
	0x33, 0x26, 0xd4, 0xf2, 0x35, 0x17, 0x21, 0xba, 0x05, 0x5e, 0x33, 0x90, 0xaf, 0xa9, 0x0e, 0xfd,
	0x14, 0x9d, 0xa2, 0xa6, 0x65, 0xfe, 0xf3, 0xe1, 0x20, 0x44, 0x84, 0x97, 0xbc, 0x6d, 0x87, 0x34,
	0x8d, 0xeb, 0xca, 0x61, 0xe5, 0xc7, 0xef, 0x1f, 0x17, 0xbe, 0x44, 0xe9, 0xa8, 0x94, 0x8c, 0xc7,
	0x83, 0xd0, 0xf7, 0x9d, 0x73, 0x8f, 0xc8, 0x12, 0x6f, 0x33, 0xf8, 0xed, 0x42, 0xe3, 0xf9, 0x8d,
	0xd6, 0xfd, 0x2b, 0x12, 0x2d, 0xa8, 0x01, 0x6e, 0xef, 0x6f, 0x30, 0xcc, 0xbb, 0x68, 0x38, 0xa2,
	0xe2, 0x9a, 0x0a, 0x3c, 0x53, 0x70, 0xe6, 0xbd, 0x48, 0x82, 0x0c, 0x6e, 0xda, 0xa0, 0xa7, 0x52,
	0x1b, 0xb4, 0xe4, 0x10, 0x72, 0x2a, 0xa7, 0xb8, 0x9e, 0x46, 0xb4, 0x53, 0x39, 0xc5, 0x88, 0xd6,
	0xc4, 0x58, 0x8a, 0x46, 0x62, 0xa1, 0xf4, 0x37, 0x10, 0x1e, 0x29, 0x40, 0x35, 0x20, 0x6a, 0xbd,
	0x3f, 0x82, 0x86, 0xd9, 0x81, 0x8e, 0x76, 0x47, 0x58, 0xd5, 0x30, 0x45, 0xa1, 0x2c, 0x28, 0x2b,
	0xbd, 0xdf, 0xc0, 0xa6, 0xd9, 0x73, 0x1e, 0x47, 0x2c, 0x36, 0xaa, 0xfd, 0x1c, 0xaa, 0xe7, 0xf1,
	0x09, 0x8b, 0xa9, 0xfc, 0x40, 0xd4, 0xcf, 0x5d, 0xd2, 0xfb, 0xe7, 0x22, 0xb4, 0x2e, 0x68, 0x30,
	0xd3, 0x58, 0x3f, 0x17, 0x21, 0x15, 0x5a, 0x33, 0x4a, 0xe7, 0x01, 0x9b, 0xdf, 0x0a, 0xf8, 0x92,
	0x2e, 0x34, 0x12, 0xc1, 0xc3, 0x45, 0xa0, 0x72, 0xcf, 0xf7, 0x00, 0xe6, 0x54, 0x04, 0x33, 0x12,
	0xab, 0x33, 0x6e, 0x9d, 0xc2, 0x03, 0xe0, 0x0b, 0x35, 0x16, 0x24, 0xa4, 0x67, 0xdc, 0xaa, 0xa1,
	0x05, 0x15, 0x92, 0x24, 0x83, 0x10, 0x15, 0x51, 0xd7, 0x81, 0x94, 0x27, 0x54, 0xdb, 0x66, 0xc3,
	0xfd, 0x4f, 0x18, 0xaa, 0xd9, 0x04, 0x76, 0x1f, 0x36, 0xa7, 0x44, 0xd1, 0xf7, 0x64, 0x39, 0x24,
	0xcb, 0x53, 0xaa, 0x66, 0x3c, 0xb4, 0x31, 0xde, 0x03, 0x20, 0x53, 0x1a, 0x07, 0xcb, 0x23, 0x1e,
	0x52, 0xbf, 0xee, 0x30, 0x12, 0x73, 0xc5, 0xde, 0x2e, 0x5f, 0x8a, 0xc8, 0x06, 0xfa, 0x2e, 0x34,
	0x02, 0x12, 0x45, 0x3a, 0x3e, 0x69, 0x62, 0xc3, 0xf9, 0xc0, 0x25, 0x8b, 0xa2, 0x51, 0x12, 0x31,
	0x85, 0xa1, 0xd0, 0xb8, 0xc6, 0x36, 0x34, 0x05, 0x55, 0x0b, 0x11, 0x0f, 0x89, 0x20, 0x73, 0x69,
	0x43, 0x7f, 0x13, 0xca, 0x92, 0x4d, 0xe3, 0x75, 0xcf, 0x40, 0x21, 0x3b, 0xa8, 0xf8, 0xdf, 0x43,
	0x77, 0x45, 0x6d, 0x17, 0x54, 0x2e, 0x22, 0xa5, 0x0f, 0x86, 0x26, 0xdd, 0x5a, 0xd4, 0x25, 0x16,
	0x75, 0x26, 0x9f, 0xee, 0x42, 0x3b, 0xa1, 0x22, 0x21, 0x82, 0x0e, 0xc9, 0x12, 0x1d, 0xa5, 0xe4,
	0x54, 0x20, 0x90, 0x01, 0x6a, 0x0c, 0x51, 0x1e, 0xe8, 0x27, 0x56, 0x1c, 0xee, 0xac, 0xe9, 0x8c,
	0xc6, 0x7a, 0x4f, 0x00, 0x86, 0x54, 0x58, 0x16, 0x77, 0x30, 0xc5, 0xdb, 0x7b, 0x7f, 0x09, 0x4d,
	0x27, 0xa2, 0x2b, 0x1b, 0x50, 0x6f, 0xa9, 0x45, 0xc7, 0x39, 0x33, 0x17, 0x1d, 0x71, 0x98, 0x33,
	0x73, 0xc9, 0xa9, 0xe8, 0x22, 0xaf, 0x22, 0x34, 0x6a, 0xef, 0xb7, 0xd0, 0x76, 0xdc, 0x5f, 0xb0,
	0x98, 0xc9, 0x99, 0x16, 0xd3, 0xd9, 0xbd, 0xe0, 0x5e, 0x95, 0xe3, 0x5e, 0xd2, 0x26, 0x18, 0x92,
	0xa5, 0xd9, 0x8d, 0x61, 0xd1, 0xb8, 0x0d, 0xa6, 0xfa, 0xec, 0xf1, 0xbd, 0xf7, 0xd0, 0x7a, 0xfd,
	0xdb, 0x13, 0x3e, 0x65, 0xb1, 0x55, 0xaa, 0x05, 0x0c, 0x0b, 0x33, 0xd1, 0xa5, 0xf1, 0xef, 0xc9,
	0x15, 0x5d, 0x5a, 0xd1, 0x3b, 0x50, 0x5d, 0xc4, 0x8c, 0xeb, 0x5d, 0x25, 0x47, 0xa0, 0x42, 0xa0,
	0x1a, 0xcb, 0x2e, 0x81, 0x53, 0x21, 0xe6, 0xd6, 0x21, 0x71, 0xc3, 0xfb, 0x1b, 0xc5, 0xaf, 0x68,
	0x6c, 0xd5, 0xfa, 0x27, 0x50, 0x1d, 0x92, 0xa5, 0x2b, 0x18, 0xb5, 0x32, 0x5d, 0x96, 0x69, 0xc3,
	0xc6, 0x90, 0x2c, 0x5f, 0x93, 0xa5, 0xb5, 0xa3, 0x76, 0x4d, 0xb2, 0x1c, 0xd1, 0x38, 0xa0, 0xb6,
	0x2c, 0xfa, 0x06, 0xa0, 0x1f, 0x31, 0x77, 0xfc, 0xb6, 0xeb, 0x36, 0xa0, 0x74, 0xb6, 0x98, 0x67,
	0xb2, 0x22, 0x68, 0x6c, 0xe4, 0xa8, 0xf7, 0xbe, 0x2b, 0x41, 0xc7, 0x69, 0x73, 0x7c, 0x62, 0xfc,
	0xb0, 0x05, 0x95, 0x60, 0x21, 0xd3, 0x47, 0x1b, 0x27, 0x62, 0x61, 0xc6, 0xe2, 0x9a, 0x0a, 0xad,
	0x83, 0x0c, 0x42, 0x4a, 0xdc, 0x90, 0xb9, 0xca, 0x9c, 0x4e, 0xd0, 0x77, 0x32, 0xce, 0x1e, 0x9b,
	0x90, 0xa5, 0xd2, 0x50, 0xdc, 0x70, 0x10, 0xbf, 0xe4, 0xe1, 0xd2, 0xfa, 0x1c, 0x02, 0x70, 0xae,
	0x33, 0x46, 0xcd, 0x79, 0xd5, 0x35, 0x89, 0x58, 0xa8, 0xb4, 0x99, 0xea, 0xee, 0x00, 0x09, 0x02,
	0x65, 0x7d, 0xcc, 0x03, 0x30, 0x6e, 0x37, 0x59, 0xa4, 0x2e, 0xb6, 0x05, 0xf5, 0x88, 0xcd, 0x99,
	0x9a, 0x24, 0xc4, 0x15, 0x55, 0x5b, 0x50, 0x97, 0x8b, 0xcb, 0x89, 0x91, 0xbc, 0xe5, 0x48, 0x53,
	0xce, 0x43, 0x39, 0x51, 0x64, 0x6a, 0x1d, 0x4c, 0xfb, 0x26, 0x8d, 0xe9, 0x5b, 0xa6, 0x42, 0xaa,
	0x08, 0x8b, 0x6c, 0xf6, 0xd1, 0x7e, 0x3c, 0x8b, 0x23, 0xa9, 0xb8, 0xa0, 0x2c, 0xcc, 0x52, 0x8f,
	0x5c, 0x5c, 0x5e, 0x0a, 0x12, 0x07, 0x33, 0x4c, 0x3d, 0x08, 0x50, 0xaa, 0x63, 0x79, 0x98, 0x18,
	0x80, 0x7a, 0x4e, 0x01, 0x5a, 0x7f, 0x09, 0xa6, 0x17, 0x14, 0x9f, 0x85, 0x31, 0xb7, 0x99, 0x65,
	0x13, 0x6a, 0x4a, 0x2c, 0x68, 0x4c, 0x6c, 0x62, 0x41, 0x0d, 0x10, 0xc9, 0xb4, 0xf7, 0xec, 0xba,
	0xe3, 0x6f, 0xdf, 0xc5, 0x8b, 0x39, 0xa6, 0x16, 0x3c, 0xa0, 0x23, 0x02, 0x2a, 0xd0, 0x5f, 0x89,
	0x11, 0xf7, 0x9d, 0x58, 0x82, 0xc4, 0x21, 0x9f, 0x4b, 0x25, 0x6c, 0x36, 0xf9, 0xaf, 0x02, 0xec,
	0xac, 0x19, 0xd5, 0x02, 0xba, 0x03, 0x55, 0x41, 0x55, 0x90, 0x39, 0x23, 0xaa, 0x5f, 0x69, 0x68,
	0x16, 0xf3, 0xb2, 0x3b, 0x28, 0xa7, 0xb6, 0x4f, 0x4d, 0xab, 0xc4, 0x0d, 0x73, 0xf1, 0x74, 0x0b,
	0xea, 0x5a, 0x4d, 0x86, 0xb4, 0xb1, 0x6a, 0xfc, 0xea, 0x6d, 0xe1, 0x52, 0x03, 0x2b, 0x71, 0x23,
	0x15, 0x51, 0x0b, 0x69, 0x0d, 0xdc, 0x81, 0xea, 0x5b, 0x16, 0xa3, 0xc5, 0xc1, 0x49, 0x65, 0x1d,
	0xa6, 0x91, 0xc3, 0x10, 0xea, 0xa8, 0xb9, 0xa2, 0x02, 0x34, 0x6c, 0xef, 0xa7, 0xea, 0x4a, 0x15,
	0xeb, 0xed, 0xbb, 0x72, 0x07, 0x3d, 0xe0, 0x70, 0xeb, 0xc7, 0xef, 0x1f, 0xb7, 0x26, 0x2c, 0xfc,
	0x82, 0xcf, 0x99, 0xa2, 0xf3, 0x44, 0x2d, 0xd7, 0x2a, 0x32, 0xed, 0x26, 0xf7, 0x72, 0x5d, 0x01,
	0xbe, 0xdd, 0xe5, 0x74, 0xcf, 0x34, 0x07, 0xe5, 0x7c, 0x9e, 0xdf, 0x73, 0xf9, 0xd2, 0xd4, 0x00,
	0x9f, 0xe5, 0xd7, 0x72, 0xd5, 0x5a, 0x65, 0xb5, 0x3f, 0xd8, 0xc0, 0xfe, 0xc0, 0x83, 0xd2, 0x1b,
	0x62, 0xf4, 0x93, 0x9e, 0xd9, 0xd6, 0xe9, 0x58, 0x53, 0xb5, 0x8a, 0x6a, 0x8e, 0xba, 0x0b, 0xd5,
	0x81, 0xc4, 0xf2, 0x1a, 0xf5, 0x94, 0xd2, 0x5b, 0x50, 0x79, 0xc5, 0x75, 0x33, 0x01, 0x8e, 0xff,
	0x2b, 0x16, 0x52, 0x6e, 0x75, 0xe5, 0x01, 0x1c, 0x09, 0x4a, 0x14, 0xc5, 0x40, 0xd7, 0xc4, 0xc7,
	0xdd, 0x07, 0x38, 0xe2, 0xf3, 0x39, 0x8d, 0x95, 0x0e, 0x05, 0x2d, 0xd4, 0x8a, 0x65, 0xf6, 0x6b,
	0x5d, 0x0b, 0xe2, 0x12, 0xe6, 0xa6, 0x36, 0x96, 0x4f, 0xeb, 0x79, 0x3b, 0xb7, 0x23, 0xf7, 0xcc,
	0xb1, 0x58, 0x50, 0x2d, 0x74, 0xc7, 0x45, 0x2a, 0x9d, 0xd8, 0x17, 0xae, 0x2f, 0xd9, 0x82, 0x3a,
	0x4a, 0x89, 0x62, 0x6c, 0x39, 0x1d, 0xa7, 0xbd, 0x98, 0x97, 0xd7, 0xf1, 0x6e, 0xd6, 0xb5, 0x75,
	0xf3, 0xf4, 0x26, 0x94, 0x8f, 0xd9, 0x74, 0x86, 0xae, 0x53, 0xd0, 0x37, 0xbc, 0xa6, 0x6c, 0x3a,
	0x53, 0xe8, 0x38, 0x05, 0x93, 0x48, 0x92, 0x73, 0x5d, 0x2a, 0xe9, 0x3b, 0x76, 0x5d, 0x29, 0x34,
	0x90, 0x87, 0x72, 0xcc, 0x13, 0xdb, 0x72, 0x6c, 0x42, 0x6d, 0x20, 0x47, 0x33, 0x46, 0x23, 0x53,
	0x92, 0x61, 0x8e, 0x3b, 0xe3, 0xb6, 0x9f, 0xa8, 0x9b, 0x52, 0x48, 0x6f, 0xdf, 0xc3, 0xc5, 0xfb,
	0xb0, 0x85, 0xda, 0x1c, 0xcf, 0x16, 0xf3, 0xcb, 0x98, 0xb0, 0x48, 0x77, 0x17, 0x0f, 0x5c, 0x79,
	0x70, 0x14, 0x31, 0x1a, 0xab, 0x97, 0x31, 0x7b, 0xb7, 0xa0, 0x98, 0xd2, 0x1e, 0x3a, 0x1f, 0xd5,
	0xd5, 0x2d, 0x8a, 0xf1, 0xc8, 0x55, 0xdc, 0x47, 0x33, 0x1a, 0x5c, 0xf9, 0x8f, 0x5d, 0x8d, 0xda,
	0x0f, 0xaf, 0x47, 0x54, 0x29, 0x16, 0x4f, 0xfd, 0xfd, 0x3b, 0x6b, 0xd4, 0x6c, 0x83, 0xe6, 0xa7,
	0x81, 0x8c, 0xf9, 0xfb, 0x0f, 0x9c, 0x36, 0x8f, 0xb9, 0x54, 0xa3, 0x80, 0x0b, 0xea, 0xf7, 0x5c,
	0xab, 0xa7, 0x2f, 0xb5, 0x85, 0xe2, 0xcf, 0x5c, 0x71, 0x79, 0x41, 0x13, 0x2e, 0x94, 0x69, 0x9c,
	0x9f, 0xa0, 0x2c, 0xbb, 0x50, 0x3d, 0xe6, 0xa6, 0xd4, 0xff, 0xf9, 0x2d, 0xd4, 0x1d, 0x73, 0xe5,
	0xff, 0x22, 0x8f, 0x2e, 0x1f, 0xea, 0xe7, 0x51, 0x68, 0x4d, 0xf9, 0xcb, 0x35, 0x64, 0x8f, 0x79,
	0xc2, 0x82, 0x41, 0xe8, 0x1f, 0x60, 0x15, 0xf9, 0x4b, 0xa8, 0x23, 0x01, 0x91, 0xf3, 0x87, 0x58,
	0xf1, 0x6d, 0xaf, 0xf7, 0x0c, 0x7a, 0xdd, 0x36, 0xc0, 0x89, 0x1c, 0x84, 0xfe, 0xaf, 0x56, 0xcb,
	0xe7, 0xcf, 0xf3, 0x17, 0x7c, 0x81, 0x06, 0x65, 0xc1, 0x98, 0x27, 0x23, 0xaa, 0xfc, 0x2f, 0x90,
	0xe3, 0xbd, 0xbb, 0x38, 0x8e, 0x79, 0xd2, 0x9b, 0x40, 0xcd, 0xfd, 0xce, 0x8b, 0x66, 0xb2, 0x9e,
	0x07, 0x80, 0x56, 0xc5, 0x65, 0x74, 0xf1, 0x9a, 0xb6, 0x9f, 0xa3, 0xa4, 0xa0, 0x29, 0x59, 0x71,
	0x9a, 0x6e, 0x05, 0xa9, 0xda, 0xd9, 0x4b, 0xbd, 0xf3, 0x15, 0xd7, 0xd0, 0x77, 0x1c, 0x73, 0xe3,
	0x25, 0x05, 0x7c, 0xfe, 0xd7, 0xe9, 0x3a, 0xd6, 0x3e, 0xed, 0x3b, 0x4b, 0x5e, 0xbb, 0x43, 0x9b,
	0xb3, 0xf7, 0x8f, 0xa5, 0xf4, 0x04, 0xc6, 0xa9, 0x87, 0x69, 0x3b, 0x79, 0x67, 0x90, 0x4a, 0xbb,
	0xb6, 0xa2, 0xab, 0xc1, 0xd3, 0x98, 0x55, 0x5a, 0x6f, 0x0c, 0xcb, 0x0e, 0x87, 0x87, 0x34, 0xe2,
	0xf1, 0xd4, 0x96, 0xbc, 0xa5, 0xb5, 0x68, 0xb0, 0x71, 0xab, 0xc3, 0xac, 0xba, 0x1a, 0x41, 0xc7,
	0xb8, 0xda, 0x4a, 0x63, 0x5b, 0xb7, 0xa0, 0xaf, 0x9f, 0xab, 0x19, 0x15, 0x48, 0x82, 0xbc, 0x73,
	0xde, 0x83, 0x1a, 0xae, 0xe8, 0x93, 0x8d, 0xbc, 0x19, 0x35, 0x7f, 0x5d, 0xe0, 0xe9, 0x58, 0xd3,
	0x74, 0x82, 0x9e, 0xbf, 0x8f, 0x51, 0xf2, 0x96, 0x13, 0x21, 0x8d, 0xb6, 0x6d, 0x17, 0xf2, 0x2d,
	0xe6, 0x3a, 0xa9, 0x14, 0xda, 0x49, 0x37, 0xd3, 0x89, 0x08, 0x42, 0x7f, 0xcb, 0x76, 0xf0, 0x16,
	0xb9, 0x5e, 0x1e, 0xb9, 0x6d, 0xd8, 0x78, 0x43, 0x62, 0x7d, 0x6b, 0xd7, 0x81, 0xcc, 0x44, 0xd5,
	0xed, 0xfc, 0xae, 0x14, 0x7a, 0x3b, 0x39, 0x99, 0x7b, 0xbf, 0x87, 0x76, 0xce, 0x32, 0x6f, 0x48,
	0xfc, 0x31, 0xe3, 0xdc, 0xce, 0x20, 0xba, 0x8d, 0x34, 0x49, 0x28, 0x35, 0xd0, 0x16, 0xd4, 0x1d,
	0x42, 0x4c, 0x0a, 0x5d, 0x37, 0x08, 0x1a, 0xa9, 0xf7, 0xef, 0x05, 0xa8, 0xbe, 0x21, 0xf1, 0xff,
	0x39, 0x77, 0x6d, 0x41, 0xfd, 0x3c, 0xa1, 0x82, 0x28, 0x9a, 0xbf, 0x39, 0x13, 0xe6, 0x83, 0x37,
	0xbb, 0xe4, 0xb6, 0x91, 0x37, 0x5f, 0xd7, 0xda, 0xbf, 0xba, 0x66, 0xec, 0xd4, 0x60, 0xb5, 0xfc,
	0x42, 0xaa, 0xce, 0x7a, 0x5e, 0x9d, 0xdf, 0x15, 0xa0, 0x95, 0x0e, 0x86, 0xfe, 0x3f, 0xdf, 0xb5,
	0xfa, 0x88, 0x72, 0xfe, 0x11, 0x95, 0xbb, 0x1e, 0xb1, 0xf1, 0xa1, 0x47, 0x54, 0xef, 0x7c, 0x44,
	0x2d, 0xcf, 0x43, 0x43, 0x12, 0xbb, 0x2f, 0xf3, 0xb6, 0xde, 0xbf, 0x14, 0xa0, 0xdd, 0x8f, 0x58,
	0xbe, 0x41, 0xf8, 0x06, 0xda, 0x54, 0x08, 0x2e, 0x26, 0x82, 0xca, 0x84, 0xc7, 0xd2, 0x94, 0x55,
	0x8d, 0xa7, 0x4f, 0xd6, 0x63, 0xbb, 0x3d, 0xf6, 0x5c, 0x6f, 0xbe, 0xb0, 0x7b, 0xbd, 0xbf, 0x80,
	0x1e, 0x89, 0x58, 0x42, 0x96, 0x13, 0xb9, 0x94, 0x8a, 0xce, 0x27, 0x9c, 0x2c, 0xd4, 0x6c, 0x82,
	0x9d, 0x41, 0xc6, 0xb1, 0x88, 0x1c, 0xbf, 0xbc, 0xcd, 0x31, 0x21, 0xcb, 0x11, 0x9e, 0x3b, 0xd7,
	0xc7, 0xc6, 0xfa, 0x54, 0xca, 0xda, 0x15, 0x48, 0xa6, 0xca, 0x7f, 0x09, 0x3b, 0x77, 0x4b, 0xe0,
	0xda, 0xbd, 0x82, 0x9b, 0x1a, 0x64, 0x95, 0xa0, 0xae, 0x3b, 0x17, 0x97, 0x13, 0x5c, 0x4e, 0xfb,
	0x1a, 0x4d, 0xd1, 0x5b, 0x4c, 0x27, 0xf6, 0x4f, 0x05, 0x78, 0xf4, 0x11, 0x39, 0xb6, 0xa1, 0x49,
	0x70, 0xfa, 0x63, 0x5e, 0x65, 0x2f, 0xda, 0x85, 0xb6, 0x7d, 0xf8, 0x42, 0x52, 0x31, 0x49, 0x7b,
	0x0b, 0x0f, 0x80, 0xde, 0x24, 0x4c, 0x50, 0x39, 0x61, 0x46, 0x76, 0x9c, 0xcb, 0x09, 0x3a, 0xc9,
	0x91, 0xcb, 0x19, 0xf9, 0xad, 0xa0, 0xd2, 0xea, 0x2b, 0xeb, 0x36, 0x1c, 0x4b, 0xd3, 0x5a, 0xc5,
	0xb0, 0xa3, 0xdb, 0x71, 0xa9, 0xc8, 0x94, 0x9e, 0x61, 0xdf, 0x30, 0xe6, 0xc9, 0x05, 0x7d, 0xf7,
	0x09, 0x80, 0x5c, 0xab, 0x2f, 0xd2, 0x61, 0x1c, 0xb3, 0xf5, 0x45, 0x09, 0xb3, 0x4a, 0x0b, 0x2a,
	0x0c, 0xff, 0x9a, 0x1e, 0xf2, 0xef, 0x0a, 0xb0, 0x65, 0x10, 0x6a, 0x2b, 0x9a, 0xb4, 0xab, 0xc3,
	0x91, 0x71, 0xc1, 0xe9, 0x76, 0x48, 0xa4, 0xc4, 0x81, 0x53, 0x31, 0x1b, 0x38, 0xbd, 0x62, 0x92,
	0x29, 0x2e, 0x2c, 0x63, 0x80, 0xe2, 0x20, 0xc9, 0x02, 0xfb, 0x40, 0x9a, 0x49, 0x0b, 0x3e, 0xb4,
	0x96, 0x8d, 0x3a, 0x37, 0x5c, 0x5f, 0xd8, 0x17, 0x94, 0x60, 0x4d, 0x62, 0x3e, 0x03, 0x84, 0xd0,
	0x3d, 0xa3, 0xef, 0x5f, 0x99, 0x56, 0xed, 0x45, 0xb4, 0x90, 0x33, 0xec, 0xd9, 0xdd, 0xf0, 0xd8,
	0xb4, 0x97, 0x2d, 0xa8, 0xf4, 0xc3, 0xeb, 0xd4, 0xe1, 0x9a, 0x50, 0x1e, 0xea, 0x66, 0xbf, 0x94,
	0xf5, 0x9a, 0x53, 0x3a, 0x62, 0x7f, 0xed, 0x1a, 0xd9, 0xbc, 0x8b, 0x9a, 0xd0, 0xf5, 0x57, 0xb0,
	0x87, 0xbc, 0x47, 0xef, 0x16, 0x44, 0x50, 0x1b, 0x72, 0x30, 0x97, 0x6a, 0x1d, 0xa7, 0xec, 0x0b,
	0x2b, 0xec, 0x8b, 0xb7, 0xd8, 0x97, 0x6e, 0xb1, 0x37, 0x29, 0xf8, 0x77, 0xb0, 0x95, 0x3d, 0xa2,
	0x1f, 0x99, 0x29, 0xec, 0xaf, 0x01, 0xcc, 0x75, 0xe9, 0xc8, 0xe1, 0xd3, 0x46, 0xd6, 0x0f, 0x61,
	0xe7, 0x05, 0x13, 0x52, 0xf5, 0xc3, 0x70, 0x45, 0x5c, 0x53, 0x1e, 0xf4, 0xbe, 0x2d, 0xe7, 0x8b,
	0xb4, 0x4f, 0x48, 0xce, 0x63, 0xa6, 0xa2, 0xdc, 0x40, 0xce, 0x98, 0x23, 0x55, 0xd4, 0x09, 0x0f,
	0xcc, 0x1c, 0xb9, 0xb2, 0x52, 0x1e, 0x3b, 0x83, 0xad, 0x06, 0xb2, 0xaa, 0x8b, 0x77, 0x23, 0x45,
	0x84, 0x1a, 0xbb, 0x4e, 0x08, 0xe1, 0xf6, 0xdc, 0x16, 0x96, 0x0d, 0x97, 0x39, 0xff, 0x74, 0x31,
	0x4f, 0xb2, 0x81, 0x90, 0x3e, 0xa5, 0x29, 0x23, 0xb5, 0x8c, 0xdc, 0x84, 0xdb, 0x03, 0xd0, 0xa4,
	0xf3, 0xcb, 0xdf, 0xd1, 0x40, 0xd9, 0x7a, 0x7c, 0x1b, 0x9a, 0x19, 0x6d, 0x10, 0xda, 0x0e, 0xb6,
	0x03, 0x55, 0x4d, 0x7d, 0x29, 0x22, 0xdb, 0xbc, 0x6e, 0x41, 0x7d, 0x7c, 0xa3, 0x6c, 0xdc, 0xeb,
	0xa6, 0xd8, 0x9c, 0x4f, 0x2d, 0x69, 0xdb, 0x35, 0xc8, 0x58, 0x25, 0x5b, 0xe2, 0x8e, 0xe3, 0x65,
	0xea, 0x73, 0x89, 0xb5, 0x38, 0x5e, 0xd9, 0x0f, 0xaf, 0xa9, 0x50, 0x4c, 0xa2, 0x4d, 0xef, 0xa7,
	0x9f, 0x28, 0x52, 0xaa, 0x1d, 0xdc, 0xef, 0x42, 0x3b, 0xb7, 0x53, 0xc7, 0xe7, 0x07, 0x19, 0xee,
	0x6d, 0xf1, 0xfe, 0xd0, 0xe1, 0xfe, 0xf0, 0xcf, 0xb4, 0xb8, 0x8f, 0x9c, 0x20, 0x03, 0x79, 0x9e,
	0xd0, 0xd8, 0x10, 0x1f, 0xe3, 0x9e, 0x2e, 0x34, 0x9e, 0x31, 0x99, 0x44, 0x64, 0x89, 0x8a, 0xdb,
	0x77, 0xb3, 0xac, 0x7e, 0x78, 0x9d, 0x2b, 0xa9, 0x3d, 0x00, 0xbb, 0x4b, 0x9f, 0xec, 0xad, 0x36,
	0x03, 0x3f, 0x73, 0x8c, 0xb4, 0x76, 0xfa, 0x49, 0x82, 0xc9, 0xe4, 0x89, 0x93, 0x35, 0x47, 0x1c,
	0x70, 0x89, 0x55, 0x75, 0xbd, 0xf7, 0x6d, 0x01, 0xea, 0xfd, 0xf0, 0xda, 0xd4, 0xdf, 0x39, 0xf8,
	0xd4, 0xef, 0x82, 0xcf, 0xaa, 0xf9, 0x8b, 0xae, 0x67, 0x30, 0xde, 0x92, 0x56, 0x77, 0xc3, 0x6b,
	0x53, 0xc7, 0x97, 0x1d, 0xe1, 0xa5, 0x25, 0x54, 0xdc, 0xfc, 0xea, 0x28, 0x62, 0xc1, 0x95, 0xb4,
	0x85, 0xdd, 0x36, 0x34, 0xf1, 0xbf, 0x71, 0x22, 0x69, 0x51, 0xf5, 0x0b, 0x28, 0xf5, 0xc3, 0x6b,
	0x4c, 0x6d, 0xff, 0x53, 0xd3, 0xd1, 0x3b, 0x83, 0xc6, 0xa9, 0x9c, 0x8e, 0xb9, 0x19, 0xf4, 0xde,
	0xfd, 0x6d, 0x6d, 0x75, 0x0a, 0x9d, 0x1b, 0x3b, 0x97, 0xf2, 0x63, 0x67, 0x2d, 0x6e, 0xb3, 0x37,
	0xb1, 0xfc, 0x4c, 0xcf, 0x94, 0x4d, 0xa1, 0x07, 0xa1, 0xb4, 0x05, 0xf4, 0xff, 0x8e, 0xa1, 0x7e,
	0xee, 0xc0, 0x7c, 0x45, 0xc0, 0x10, 0xd8, 0xfb, 0xd7, 0x02, 0xec, 0x62, 0xa8, 0x19, 0x12, 0xa1,
	0x58, 0xc0, 0x12, 0xa2, 0xa8, 0xb9, 0xe2, 0x6e, 0xe1, 0x5d, 0x87, 0x50, 0xcc, 0xd7, 0xbc, 0x69,
	0xe4, 0x59, 0xfb, 0x26, 0x98, 0xff, 0x6e, 0x98, 0x4e, 0x3b, 0xb2, 0x0f, 0x7b, 0x1b, 0x8e, 0x94,
	0x55, 0x59, 0x55, 0x77, 0xcf, 0x0b, 0x12, 0x4b, 0x5d, 0x85, 0xd6, 0x56, 0x5b, 0x9d, 0x95, 0x02,
	0xe9, 0x1f, 0xca, 0x50, 0x31, 0xbd, 0xd1, 0x47, 0xe2, 0x4c, 0xd7, 0xf5, 0x44, 0xcb, 0x84, 0xe6,
	0xe3, 0x74, 0x4e, 0x49, 0xba, 0x31, 0xa1, 0x24, 0xd4, 0x8d, 0x6a, 0x2a, 0xfb, 0x31, 0xb7, 0xbd,
	0x62, 0xda, 0x06, 0x20, 0x97, 0xa3, 0x88, 0x48, 0x17, 0x81, 0x72, 0x92, 0x1a, 0xd1, 0x7d, 0xd8,
	0xcc, 0x34, 0xc9, 0x78, 0x9c, 0xbd, 0xc1, 0x03, 0x78, 0xc5, 0xe8, 0x7b, 0x16, 0x4f, 0x35, 0xad,
	0xee, 0x3e, 0x22, 0x3d, 0xa3, 0x32, 0x10, 0x2c, 0xc1, 0x28, 0x67, 0x66, 0x11, 0x7b, 0xda, 0x1d,
	0xd3, 0xc2, 0x0f, 0x43, 0x56, 0x2d, 0x1b, 0xa4, 0xdc, 0x1e, 0x4c, 0x78, 0x00, 0x2f, 0x93, 0xd0,
	0xd1, 0xda, 0x0e, 0xd5, 0x36, 0x52, 0x76, 0x5c, 0x8e, 0xc2, 0xe6, 0x21, 0x6b, 0x05, 0xfa, 0xe1,
	0x9c, 0xc5, 0x36, 0x80, 0x21, 0x28, 0x74, 0x00, 0x30, 0xbd, 0x00, 0xc6, 0x87, 0xa9, 0x76, 0xe8,
	0x6e, 0x16, 0x1f, 0x2e, 0x68, 0x80, 0x55, 0xb8, 0xf9, 0xba, 0x53, 0xd3, 0xb5, 0xc3, 0x88, 0x0b,
	0x95, 0x91, 0x77, 0x9c, 0xff, 0x99, 0xae, 0x62, 0xd7, 0x39, 0x3f, 0xea, 0xec, 0x94, 0x48, 0x45,
	0x05, 0x4e, 0x13, 0x30, 0x44, 0x9b, 0xec, 0xb6, 0x88, 0xdc, 0x38, 0xce, 0x7c, 0x65, 0xcc, 0xe9,
	0xc7, 0x4c, 0x00, 0x1e, 0x40, 0xb7, 0x1f, 0x86, 0xb7, 0x14, 0xfa, 0xd8, 0xbd, 0xbb, 0x1f, 0x86,
	0x4e, 0xfd, 0xfb, 0x98, 0xeb, 0xbe, 0x81, 0xe6, 0x90, 0x25, 0x74, 0x10, 0x9b, 0xe6, 0xfd, 0x13,
	0x12, 0x50, 0xf6, 0xc1, 0xbc, 0xd4, 0xfb, 0x0d, 0x74, 0xf4, 0xe9, 0x91, 0x12, 0x2c, 0x9e, 0xae,
	0x33, 0xa8, 0x7f, 0x9c, 0xc1, 0x61, 0xf3, 0xdf, 0x7e, 0x78, 0x54, 0xf8, 0x8f, 0x1f, 0x1e, 0x15,
	0xfe, 0xf3, 0x87, 0x47, 0x85, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xbe, 0xd5, 0xcc, 0x9f, 0xf8,
	0x20, 0x00, 0x00,
}

func (m *BroadCastData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadCastData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("Level")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Level))
	}
	if m.Content == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("Content")
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.Count == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("Count")
	} else {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Count))
	}
	if m.BroadId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.BroadId))
	}
	if m.MsgType != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.MsgType))
	}
	if m.Amount != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Amount))
	}
	if m.NickName != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BroadIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BroadId == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("BroadId")
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.BroadId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BroadCastMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadCastMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAllcommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Site != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Site)))
		i += copy(dAtA[i:], *m.Site)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DynamicDataListPage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynamicDataListPage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DynamicData) > 0 {
		for _, msg := range m.DynamicData {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAllcommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TotalCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.TotalCount))
	}
	if m.PageCount != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TeamPlayerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamPlayerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Account != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.NickName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.HeadIcon != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.HeadIcon)))
		i += copy(dAtA[i:], *m.HeadIcon)
	}
	if m.Sex != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Sex))
	}
	if m.ReName != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.ReName)))
		i += copy(dAtA[i:], *m.ReName)
	}
	if m.TeamName != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.TeamName)))
		i += copy(dAtA[i:], *m.TeamName)
	}
	if m.Phone != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Phone)))
		i += copy(dAtA[i:], *m.Phone)
	}
	if len(m.Photo) > 0 {
		for _, s := range m.Photo {
			dAtA[i] = 0x4a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Signature != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Signature)))
		i += copy(dAtA[i:], *m.Signature)
	}
	if m.Provice != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Provice)))
		i += copy(dAtA[i:], *m.Provice)
	}
	if m.City != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.City)))
		i += copy(dAtA[i:], *m.City)
	}
	if m.Channel != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Channel)))
		i += copy(dAtA[i:], *m.Channel)
	}
	if m.State != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.State))
	}
	if m.TeamId != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.TeamId))
	}
	if m.Type != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Type))
	}
	if m.Fans != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Fans))
	}
	if m.Attentions != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Attentions))
	}
	if m.Zans != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Zans))
	}
	if m.Icon != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Icon))
	}
	if m.DynamicData != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(m.DynamicData.Size()))
		n1, err := m.DynamicData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.IsOnMyAttentionList != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsOnMyAttentionList {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsOnMyBlackList != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsOnMyBlackList {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.LabelInfo) > 0 {
		for _, msg := range m.LabelInfo {
			dAtA[i] = 0xc2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintAllcommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AccountState != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.AccountState))
	}
	if m.BackgroundImageURL != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.BackgroundImageURL)))
		i += copy(dAtA[i:], *m.BackgroundImageURL)
	}
	if m.Types != nil {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Types))
	}
	if m.AddFriendType != nil {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.AddFriendType))
	}
	if m.TeamPosition != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.TeamPosition))
	}
	if m.Constellation != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Constellation))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LabelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NoticeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoticeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsAll != nil {
		dAtA[i] = 0x8
		i++
		if *m.IsAll {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.PlayerId) > 0 {
		for _, num := range m.PlayerId {
			dAtA[i] = 0x10
			i++
			i = encodeVarintAllcommon(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Chat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SourceId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.SourceId))
	}
	if m.TargetId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.TargetId))
	}
	if m.Content != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.ChatType != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.ChatType))
	}
	if len(m.PlayIds) > 0 {
		for _, num := range m.PlayIds {
			dAtA[i] = 0x28
			i++
			i = encodeVarintAllcommon(dAtA, i, uint64(num))
		}
	}
	if m.Time != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Time))
	}
	if m.LogId != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.LogId))
	}
	if m.ContentType != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.ContentType))
	}
	if m.CardInfo != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(m.CardInfo.Size()))
		n2, err := m.CardInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.CardPlayerId != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.CardPlayerId))
	}
	if m.Mark != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Mark)))
		i += copy(dAtA[i:], *m.Mark)
	}
	if m.IsSuccessSend != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.IsSuccessSend))
	}
	if m.Cite != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Cite)))
		i += copy(dAtA[i:], *m.Cite)
	}
	if m.SourceName != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.SourceName)))
		i += copy(dAtA[i:], *m.SourceName)
	}
	if m.SourceHeadIcon != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.SourceHeadIcon)))
		i += copy(dAtA[i:], *m.SourceHeadIcon)
	}
	if m.SourceSex != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.SourceSex))
	}
	if m.NoticeInfo != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(m.NoticeInfo.Size()))
		n3, err := m.NoticeInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.EvilType != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.EvilType))
	}
	if m.DirtyWord != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.DirtyWord)))
		i += copy(dAtA[i:], *m.DirtyWord)
	}
	if m.IsWelcome != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsWelcome {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.QPId != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.QPId))
	}
	if m.Types != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Types))
	}
	if m.SessionId != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.SessionId)))
		i += copy(dAtA[i:], *m.SessionId)
	}
	if m.SayType != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.SayType))
	}
	if m.ExtentValue != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.ExtentValue)))
		i += copy(dAtA[i:], *m.ExtentValue)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MsgData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ServerType != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.ServerType))
	}
	if m.RpcName != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.RpcName)))
		i += copy(dAtA[i:], *m.RpcName)
	}
	if m.MsgId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.MsgId))
	}
	if m.MsgName != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.MsgName)))
		i += copy(dAtA[i:], *m.MsgName)
	}
	if m.Msg != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Playerids) > 0 {
		for _, num := range m.Playerids {
			dAtA[i] = 0x30
			i++
			i = encodeVarintAllcommon(dAtA, i, uint64(num))
		}
	}
	if m.IsAll != nil {
		dAtA[i] = 0x38
		i++
		if *m.IsAll {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.PlayerId))
	}
	if m.ServerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.ServerId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerOnlineInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerOnlineInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OnLines) > 0 {
		for _, msg := range m.OnLines {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAllcommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RechargeOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RechargeOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TotalAmount != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.TotalAmount)))
		i += copy(dAtA[i:], *m.TotalAmount)
	}
	if m.ProductName != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.ProductName)))
		i += copy(dAtA[i:], *m.ProductName)
	}
	if m.MerchantNo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.MerchantNo)))
		i += copy(dAtA[i:], *m.MerchantNo)
	}
	if m.OutTradeNo != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.OutTradeNo)))
		i += copy(dAtA[i:], *m.OutTradeNo)
	}
	if m.AppId != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.AppId)))
		i += copy(dAtA[i:], *m.AppId)
	}
	if m.OpenId != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.OpenId)))
		i += copy(dAtA[i:], *m.OpenId)
	}
	if m.PiType != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.PiType)))
		i += copy(dAtA[i:], *m.PiType)
	}
	if m.GatewayPayMethod != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.GatewayPayMethod)))
		i += copy(dAtA[i:], *m.GatewayPayMethod)
	}
	if m.AgencyCode != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.AgencyCode)))
		i += copy(dAtA[i:], *m.AgencyCode)
	}
	if m.NotifyUrl != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.NotifyUrl)))
		i += copy(dAtA[i:], *m.NotifyUrl)
	}
	if m.CallBackUrl != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.CallBackUrl)))
		i += copy(dAtA[i:], *m.CallBackUrl)
	}
	if m.BillSplitList != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.BillSplitList)))
		i += copy(dAtA[i:], *m.BillSplitList)
	}
	if m.ReturnParams != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.ReturnParams)))
		i += copy(dAtA[i:], *m.ReturnParams)
	}
	if m.Sign != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Sign)))
		i += copy(dAtA[i:], *m.Sign)
	}
	if m.SourceType != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.SourceType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RechargeOrderResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RechargeOrderResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Data)))
		i += copy(dAtA[i:], *m.Data)
	}
	if m.PayType != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.PayType))
	}
	if m.PerparePayInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.PerparePayInfo)))
		i += copy(dAtA[i:], *m.PerparePayInfo)
	}
	if m.Result != nil {
		dAtA[i] = 0x20
		i++
		if *m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Code != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Code))
	}
	if m.Message != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Message)))
		i += copy(dAtA[i:], *m.Message)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PerPayInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerPayInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PerparePayInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.PerparePayInfo)))
		i += copy(dAtA[i:], *m.PerparePayInfo)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RechargeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RechargeData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Code)))
		i += copy(dAtA[i:], *m.Code)
	}
	if m.TotalAmount != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.TotalAmount)))
		i += copy(dAtA[i:], *m.TotalAmount)
	}
	if m.ProductName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.ProductName)))
		i += copy(dAtA[i:], *m.ProductName)
	}
	if m.ReturnParams != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.ReturnParams)))
		i += copy(dAtA[i:], *m.ReturnParams)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RechargeFinish) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RechargeFinish) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TradeNo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.TradeNo)))
		i += copy(dAtA[i:], *m.TradeNo)
	}
	if m.Amount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Amount))
	}
	if m.PayFinishTime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.PayFinishTime))
	}
	if m.Result != nil {
		dAtA[i] = 0x20
		i++
		if *m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WXLoginResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WXLoginResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Openid != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Openid)))
		i += copy(dAtA[i:], *m.Openid)
	}
	if m.SessionKey != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.SessionKey)))
		i += copy(dAtA[i:], *m.SessionKey)
	}
	if m.Unionid != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Unionid)))
		i += copy(dAtA[i:], *m.Unionid)
	}
	if m.Errcode != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Errcode))
	}
	if m.Errmsg != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Errmsg)))
		i += copy(dAtA[i:], *m.Errmsg)
	}
	if m.Wxtoken != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Wxtoken)))
		i += copy(dAtA[i:], *m.Wxtoken)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PayId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.PayId))
	}
	if m.PayWay != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.PayWay))
	}
	if m.PaySence != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.PaySence))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AliPayData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AliPayData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Num != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Num)))
		i += copy(dAtA[i:], *m.Num)
	}
	if m.OrderId != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.OrderId)))
		i += copy(dAtA[i:], *m.OrderId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RechargeTLOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RechargeTLOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cusid != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Cusid)))
		i += copy(dAtA[i:], *m.Cusid)
	}
	if m.Appid != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Appid)))
		i += copy(dAtA[i:], *m.Appid)
	}
	if m.Version != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Version)))
		i += copy(dAtA[i:], *m.Version)
	}
	if m.Trxamt != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Trxamt)))
		i += copy(dAtA[i:], *m.Trxamt)
	}
	if m.Reqsn != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Reqsn)))
		i += copy(dAtA[i:], *m.Reqsn)
	}
	if m.Paytype != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Paytype)))
		i += copy(dAtA[i:], *m.Paytype)
	}
	if m.Body != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Body)))
		i += copy(dAtA[i:], *m.Body)
	}
	if m.Remark != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Remark)))
		i += copy(dAtA[i:], *m.Remark)
	}
	if m.Validtime != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Validtime)))
		i += copy(dAtA[i:], *m.Validtime)
	}
	if m.Acct != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Acct)))
		i += copy(dAtA[i:], *m.Acct)
	}
	if m.NotifyUrl != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.NotifyUrl)))
		i += copy(dAtA[i:], *m.NotifyUrl)
	}
	if m.LimitPay != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.LimitPay)))
		i += copy(dAtA[i:], *m.LimitPay)
	}
	if m.SubAppid != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.SubAppid)))
		i += copy(dAtA[i:], *m.SubAppid)
	}
	if m.GoodsTag != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.GoodsTag)))
		i += copy(dAtA[i:], *m.GoodsTag)
	}
	if m.Benefitdetail != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Benefitdetail)))
		i += copy(dAtA[i:], *m.Benefitdetail)
	}
	if m.Chnlstoreid != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Chnlstoreid)))
		i += copy(dAtA[i:], *m.Chnlstoreid)
	}
	if m.Subbranch != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Subbranch)))
		i += copy(dAtA[i:], *m.Subbranch)
	}
	if m.Extendparams != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Extendparams)))
		i += copy(dAtA[i:], *m.Extendparams)
	}
	if m.Cusip != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Cusip)))
		i += copy(dAtA[i:], *m.Cusip)
	}
	if m.Idno != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Idno)))
		i += copy(dAtA[i:], *m.Idno)
	}
	if m.Truename != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Truename)))
		i += copy(dAtA[i:], *m.Truename)
	}
	if m.Asinfo != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Asinfo)))
		i += copy(dAtA[i:], *m.Asinfo)
	}
	if m.Fqnum != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Fqnum)))
		i += copy(dAtA[i:], *m.Fqnum)
	}
	if m.Signtype != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Signtype)))
		i += copy(dAtA[i:], *m.Signtype)
	}
	if m.Sign != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Sign)))
		i += copy(dAtA[i:], *m.Sign)
	}
	if m.Randomstr != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Randomstr)))
		i += copy(dAtA[i:], *m.Randomstr)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RechargeTLOrderResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RechargeTLOrderResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Retcode != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Retcode)))
		i += copy(dAtA[i:], *m.Retcode)
	}
	if m.Retmsg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Retmsg)))
		i += copy(dAtA[i:], *m.Retmsg)
	}
	if m.Cusid != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Cusid)))
		i += copy(dAtA[i:], *m.Cusid)
	}
	if m.Appid != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Appid)))
		i += copy(dAtA[i:], *m.Appid)
	}
	if m.Trxid != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Trxid)))
		i += copy(dAtA[i:], *m.Trxid)
	}
	if m.Chnltrxid != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Chnltrxid)))
		i += copy(dAtA[i:], *m.Chnltrxid)
	}
	if m.Reqsn != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Reqsn)))
		i += copy(dAtA[i:], *m.Reqsn)
	}
	if m.Randomstr != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Randomstr)))
		i += copy(dAtA[i:], *m.Randomstr)
	}
	if m.Trxstatus != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Trxstatus)))
		i += copy(dAtA[i:], *m.Trxstatus)
	}
	if m.Fintime != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Fintime)))
		i += copy(dAtA[i:], *m.Fintime)
	}
	if m.Errmsg != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Errmsg)))
		i += copy(dAtA[i:], *m.Errmsg)
	}
	if m.Payinfo != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Payinfo)))
		i += copy(dAtA[i:], *m.Payinfo)
	}
	if m.Sign != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Sign)))
		i += copy(dAtA[i:], *m.Sign)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DynamicData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynamicData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LogId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.PlayerId))
	}
	if m.HeadIcon != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.HeadIcon)))
		i += copy(dAtA[i:], *m.HeadIcon)
	}
	if m.Sex != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Sex))
	}
	if m.Content != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if len(m.Photo) > 0 {
		for _, s := range m.Photo {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Zan != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Zan))
	}
	if m.IsZan != nil {
		dAtA[i] = 0x40
		i++
		if *m.IsZan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsAtten != nil {
		dAtA[i] = 0x48
		i++
		if *m.IsAtten {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Voice != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Voice)))
		i += copy(dAtA[i:], *m.Voice)
	}
	if m.Video != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Video)))
		i += copy(dAtA[i:], *m.Video)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.CreateTime))
	}
	if m.CommentNum != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.CommentNum))
	}
	if m.CommentList != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(m.CommentList.Size()))
		n4, err := m.CommentList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.TrueZan != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.TrueZan))
	}
	if m.Statue != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Statue))
	}
	if m.VoiceTime != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.VoiceTime))
	}
	if m.NickName != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.Account != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.High != nil {
		dAtA[i] = 0xa1
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.High))))
		i += 8
	}
	if m.Weight != nil {
		dAtA[i] = 0xa9
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Weight))))
		i += 8
	}
	if m.TopOverTime != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.TopOverTime))
	}
	if m.IsBsTop != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsBsTop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsShield != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsShield {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Note != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Note)))
		i += copy(dAtA[i:], *m.Note)
	}
	if m.IsTop != nil {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsTop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.VideoThumbnailURL != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.VideoThumbnailURL)))
		i += copy(dAtA[i:], *m.VideoThumbnailURL)
	}
	if m.PlayerTypes != nil {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.PlayerTypes))
	}
	if m.ClientUniqueCode != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.ClientUniqueCode)))
		i += copy(dAtA[i:], *m.ClientUniqueCode)
	}
	if m.SendTime != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.SendTime))
	}
	if m.Check != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Check))
	}
	if m.AdvSetting != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(m.AdvSetting.Size()))
		n5, err := m.AdvSetting.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.DataType != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.DataType))
	}
	if m.HostScore != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.HostScore))
	}
	if m.SenderType != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.SenderType))
	}
	if m.ReportCount != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.ReportCount))
	}
	if m.HotType != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.HotType))
	}
	if m.IsHot != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x2
		i++
		if *m.IsHot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.OldStatue != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.OldStatue))
	}
	if len(m.TopicId) > 0 {
		for _, num := range m.TopicId {
			dAtA[i] = 0xc0
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintAllcommon(dAtA, i, uint64(num))
		}
	}
	if len(m.TopicList) > 0 {
		for _, msg := range m.TopicList {
			dAtA[i] = 0xca
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintAllcommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.PropsId != nil {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.PropsId))
	}
	if m.Types != nil {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Types))
	}
	if len(m.TopicTopSet) > 0 {
		for _, msg := range m.TopicTopSet {
			dAtA[i] = 0xe2
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintAllcommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicTop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicTop) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TopicId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.TopicId))
	}
	if m.IsTopicTop != nil {
		dAtA[i] = 0x10
		i++
		if *m.IsTopicTop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TopicTopOverTime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.TopicTopOverTime))
	}
	if m.TopicTopTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.TopicTopTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CommentList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommentList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HotList) > 0 {
		for _, num := range m.HotList {
			dAtA[i] = 0x8
			i++
			i = encodeVarintAllcommon(dAtA, i, uint64(num))
		}
	}
	if len(m.CommentInfo) > 0 {
		for _, msg := range m.CommentInfo {
			dAtA[i] = 0x72
			i++
			i = encodeVarintAllcommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CommentData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommentData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Id))
	}
	if m.LogId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Content != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.BelongId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.BelongId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.CreateTime))
	}
	if m.TargetId != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.TargetId))
	}
	if m.Sex != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Sex))
	}
	if m.Name != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.OtherName != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.OtherName)))
		i += copy(dAtA[i:], *m.OtherName)
	}
	if m.OtherSex != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.OtherSex))
	}
	if m.TotalNum != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.TotalNum))
	}
	if m.OwnerId != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.OwnerId))
	}
	if m.HeadIcon != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.HeadIcon)))
		i += copy(dAtA[i:], *m.HeadIcon)
	}
	if m.Statue != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Statue))
	}
	if m.Note != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Note)))
		i += copy(dAtA[i:], *m.Note)
	}
	if m.Score != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Score))
	}
	if m.IsHot != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsHot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ZanNum != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.ZanNum))
	}
	if m.IsZan != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsZan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Types != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Types))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CommentDataZan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommentDataZan) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Id))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.PlayerId))
	}
	if m.DynamicId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.DynamicId))
	}
	if m.CommentId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.CommentId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ZanData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZanData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LogId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.PlayerId))
	}
	if m.OperateId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.OperateId))
	}
	if m.DynamicId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.DynamicId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Sex != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Sex))
	}
	if m.Name != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.HeadIcon != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.HeadIcon)))
		i += copy(dAtA[i:], *m.HeadIcon)
	}
	if m.Types != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Types))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AttentionData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttentionData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LogId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.PlayerId))
	}
	if m.OperateId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.OperateId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Sex != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Sex))
	}
	if m.Name != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.HeadIcon != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.HeadIcon)))
		i += copy(dAtA[i:], *m.HeadIcon)
	}
	if m.Types != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Types))
	}
	if m.Source != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Source))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AliLoginResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AliLoginResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorResponse != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(m.ErrorResponse.Size()))
		n6, err := m.ErrorResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.AlipaySystemOauthTokenResponse != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(m.AlipaySystemOauthTokenResponse.Size()))
		n7, err := m.AlipaySystemOauthTokenResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Sign != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Sign)))
		i += copy(dAtA[i:], *m.Sign)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AliLoginErrorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AliLoginErrorResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Code)))
		i += copy(dAtA[i:], *m.Code)
	}
	if m.Msg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Msg)))
		i += copy(dAtA[i:], *m.Msg)
	}
	if m.SubCode != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.SubCode)))
		i += copy(dAtA[i:], *m.SubCode)
	}
	if m.SubMsg != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.SubMsg)))
		i += copy(dAtA[i:], *m.SubMsg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AlipaySystemOauthTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlipaySystemOauthTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AccessToken != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.AccessToken)))
		i += copy(dAtA[i:], *m.AccessToken)
	}
	if m.AlipayUserId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.AlipayUserId)))
		i += copy(dAtA[i:], *m.AlipayUserId)
	}
	if m.ExpiresIn != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.ExpiresIn))
	}
	if m.ReExpiresIn != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.ReExpiresIn))
	}
	if m.RefreshToken != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.RefreshToken)))
		i += copy(dAtA[i:], *m.RefreshToken)
	}
	if m.UserId != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.UserId)))
		i += copy(dAtA[i:], *m.UserId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BackstageNotifyTopReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackstageNotifyTopReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LogId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.LogId))
	}
	if m.TopOverTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.TopOverTime))
	}
	if m.IsBsTop != nil {
		dAtA[i] = 0x18
		i++
		if *m.IsBsTop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsTop != nil {
		dAtA[i] = 0x20
		i++
		if *m.IsTop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateAccountData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAccountData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Phone != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Phone)))
		i += copy(dAtA[i:], *m.Phone)
	}
	if m.PassWord != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.PassWord)))
		i += copy(dAtA[i:], *m.PassWord)
	}
	if m.IsVisitor != nil {
		dAtA[i] = 0x18
		i++
		if *m.IsVisitor {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ip != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Ip)))
		i += copy(dAtA[i:], *m.Ip)
	}
	if m.IsOnline != nil {
		dAtA[i] = 0x28
		i++
		if *m.IsOnline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Types != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Types))
	}
	if m.AreaCode != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.AreaCode)))
		i += copy(dAtA[i:], *m.AreaCode)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NewVersionFlushInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewVersionFlushInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Type))
	}
	if m.AdvId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.AdvId))
	}
	if m.Page != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Page))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.PageSize))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FlushSquareDynamicTopicReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlushSquareDynamicTopicReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AdvId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.AdvId))
	}
	if m.Page != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Page))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.PageSize))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NewVersionAllInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewVersionAllInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SquareInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(m.SquareInfo.Size()))
		n8, err := m.SquareInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.FirstAddSquareDynamic != nil {
		dAtA[i] = 0x10
		i++
		if *m.FirstAddSquareDynamic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdvSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvSetting) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Id))
	}
	if m.Title != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.Types != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Types))
	}
	if m.Location != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Location))
	}
	if m.Status != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Status))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.CreateTime))
	}
	if m.StartTime != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.EndTime))
	}
	if m.JumpType != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.JumpType))
	}
	if m.JumpObject != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.JumpObject))
	}
	if m.JumpObjectId != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.JumpObjectId)))
		i += copy(dAtA[i:], *m.JumpObjectId)
	}
	if m.JumpUrl != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.JumpUrl)))
		i += copy(dAtA[i:], *m.JumpUrl)
	}
	if m.TxtSource != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.TxtSource)))
		i += copy(dAtA[i:], *m.TxtSource)
	}
	if m.ImgSource != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.ImgSource)))
		i += copy(dAtA[i:], *m.ImgSource)
	}
	if m.VideoSource != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.VideoSource)))
		i += copy(dAtA[i:], *m.VideoSource)
	}
	if m.Weights != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Weights))
	}
	if m.AdvertiserId != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.AdvertiserId))
	}
	if m.Advertiser != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Advertiser)))
		i += copy(dAtA[i:], *m.Advertiser)
	}
	if m.AdvertiserIcon != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.AdvertiserIcon)))
		i += copy(dAtA[i:], *m.AdvertiserIcon)
	}
	if m.JumpStyle != nil {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.JumpStyle))
	}
	if m.IsShield != nil {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsShield {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BKUrl != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.BKUrl)))
		i += copy(dAtA[i:], *m.BKUrl)
	}
	if m.IsOpenBKUrl != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsOpenBKUrl {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DisplayTime != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.DisplayTime))
	}
	if m.AdvType != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.AdvType))
	}
	if m.DisplayUrl != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.DisplayUrl)))
		i += copy(dAtA[i:], *m.DisplayUrl)
	}
	if m.IsTop != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		if *m.IsTop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.JumpAppName != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.JumpAppName)))
		i += copy(dAtA[i:], *m.JumpAppName)
	}
	if m.JumpAppNameIos != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.JumpAppNameIos)))
		i += copy(dAtA[i:], *m.JumpAppNameIos)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdvReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.CreateTime))
	}
	if m.AdvId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.AdvId))
	}
	if m.PvCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.PvCount))
	}
	if m.UvCount != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.UvCount))
	}
	if m.Clicks != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Clicks))
	}
	if m.ClickPlayers != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.ClickPlayers))
	}
	if m.Adv != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(m.Adv.Size()))
		n9, err := m.Adv.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MsgToServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToServer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.PlayerId))
	}
	if m.RpcName != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.RpcName)))
		i += copy(dAtA[i:], *m.RpcName)
	}
	if m.MsgName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.MsgName)))
		i += copy(dAtA[i:], *m.MsgName)
	}
	if m.Msg != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MsgToClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToClient) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerIds) > 0 {
		for _, num := range m.PlayerIds {
			dAtA[i] = 0x8
			i++
			i = encodeVarintAllcommon(dAtA, i, uint64(num))
		}
	}
	if m.RpcName != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.RpcName)))
		i += copy(dAtA[i:], *m.RpcName)
	}
	if m.MsgName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.MsgName)))
		i += copy(dAtA[i:], *m.MsgName)
	}
	if m.Msg != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.IsSend != nil {
		dAtA[i] = 0x28
		i++
		if *m.IsSend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicParticipatePlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicParticipatePlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.PlayerId))
	}
	if m.TopicId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.TopicId))
	}
	if m.Sex != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Sex))
	}
	if m.HeadIcon != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.HeadIcon)))
		i += copy(dAtA[i:], *m.HeadIcon)
	}
	if m.NickName != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.Signature != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Signature)))
		i += copy(dAtA[i:], *m.Signature)
	}
	if m.DynamicId != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.DynamicId))
	}
	if m.FansNum != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.FansNum))
	}
	if m.Types != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Types))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Topic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Topic) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Id))
	}
	if m.TopicTypeId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.TopicTypeId))
	}
	if m.Name != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.HeadURL != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.HeadURL)))
		i += copy(dAtA[i:], *m.HeadURL)
	}
	if m.HotScore != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.HotScore))
	}
	if m.TopicClass != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.TopicClass))
	}
	if m.FansNum != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.FansNum))
	}
	if m.ParticipationNum != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.ParticipationNum))
	}
	if m.ViewingNum != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.ViewingNum))
	}
	if m.Description != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Description)))
		i += copy(dAtA[i:], *m.Description)
	}
	if m.IsAttention != nil {
		dAtA[i] = 0x58
		i++
		if *m.IsAttention {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.Status != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Status))
	}
	if m.Owner != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Owner)))
		i += copy(dAtA[i:], *m.Owner)
	}
	if m.Admin != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Admin)))
		i += copy(dAtA[i:], *m.Admin)
	}
	if m.IsOpen != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsOpen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BgUrl != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.BgUrl)))
		i += copy(dAtA[i:], *m.BgUrl)
	}
	if m.IsRecommend != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsRecommend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SortRecommend != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.SortRecommend))
	}
	if m.IsHot != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsHot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TopicMaster != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.TopicMaster))
	}
	if m.TopicRule != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.TopicRule)))
		i += copy(dAtA[i:], *m.TopicRule)
	}
	if m.AddViewingNum != nil {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.AddViewingNum))
	}
	if m.AddParticipationNum != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.AddParticipationNum))
	}
	if m.AddFansNum != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.AddFansNum))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PipeIntCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PipeIntCount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Id))
	}
	if m.Count != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PipeStringCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PipeStringCount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.Count != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAllcommon(dAtA, i, uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintAllcommon(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BroadCastData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != nil {
		n += 1 + sovAllcommon(uint64(*m.Level))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Count != nil {
		n += 1 + sovAllcommon(uint64(*m.Count))
	}
	if m.BroadId != nil {
		n += 1 + sovAllcommon(uint64(*m.BroadId))
	}
	if m.MsgType != nil {
		n += 1 + sovAllcommon(uint64(*m.MsgType))
	}
	if m.Amount != nil {
		n += 1 + sovAllcommon(uint64(*m.Amount))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BroadIdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BroadId != nil {
		n += 1 + sovAllcommon(uint64(*m.BroadId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BroadCastMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovAllcommon(uint64(l))
		}
	}
	if m.Site != nil {
		l = len(*m.Site)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynamicDataListPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DynamicData) > 0 {
		for _, e := range m.DynamicData {
			l = e.Size()
			n += 1 + l + sovAllcommon(uint64(l))
		}
	}
	if m.TotalCount != nil {
		n += 1 + sovAllcommon(uint64(*m.TotalCount))
	}
	if m.PageCount != nil {
		n += 1 + sovAllcommon(uint64(*m.PageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeamPlayerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovAllcommon(uint64(*m.PlayerId))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.HeadIcon != nil {
		l = len(*m.HeadIcon)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Sex != nil {
		n += 1 + sovAllcommon(uint64(*m.Sex))
	}
	if m.ReName != nil {
		l = len(*m.ReName)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.TeamName != nil {
		l = len(*m.TeamName)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Phone != nil {
		l = len(*m.Phone)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if len(m.Photo) > 0 {
		for _, s := range m.Photo {
			l = len(s)
			n += 1 + l + sovAllcommon(uint64(l))
		}
	}
	if m.Signature != nil {
		l = len(*m.Signature)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Provice != nil {
		l = len(*m.Provice)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.City != nil {
		l = len(*m.City)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Channel != nil {
		l = len(*m.Channel)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.State != nil {
		n += 1 + sovAllcommon(uint64(*m.State))
	}
	if m.TeamId != nil {
		n += 1 + sovAllcommon(uint64(*m.TeamId))
	}
	if m.Type != nil {
		n += 2 + sovAllcommon(uint64(*m.Type))
	}
	if m.Fans != nil {
		n += 2 + sovAllcommon(uint64(*m.Fans))
	}
	if m.Attentions != nil {
		n += 2 + sovAllcommon(uint64(*m.Attentions))
	}
	if m.Zans != nil {
		n += 2 + sovAllcommon(uint64(*m.Zans))
	}
	if m.Icon != nil {
		n += 2 + sovAllcommon(uint64(*m.Icon))
	}
	if m.DynamicData != nil {
		l = m.DynamicData.Size()
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.IsOnMyAttentionList != nil {
		n += 3
	}
	if m.IsOnMyBlackList != nil {
		n += 3
	}
	if len(m.LabelInfo) > 0 {
		for _, e := range m.LabelInfo {
			l = e.Size()
			n += 2 + l + sovAllcommon(uint64(l))
		}
	}
	if m.AccountState != nil {
		n += 2 + sovAllcommon(uint64(*m.AccountState))
	}
	if m.BackgroundImageURL != nil {
		l = len(*m.BackgroundImageURL)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.Types != nil {
		n += 2 + sovAllcommon(uint64(*m.Types))
	}
	if m.AddFriendType != nil {
		n += 2 + sovAllcommon(uint64(*m.AddFriendType))
	}
	if m.TeamPosition != nil {
		n += 2 + sovAllcommon(uint64(*m.TeamPosition))
	}
	if m.Constellation != nil {
		n += 2 + sovAllcommon(uint64(*m.Constellation))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LabelInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovAllcommon(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NoticeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsAll != nil {
		n += 2
	}
	if len(m.PlayerId) > 0 {
		for _, e := range m.PlayerId {
			n += 1 + sovAllcommon(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Chat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceId != nil {
		n += 1 + sovAllcommon(uint64(*m.SourceId))
	}
	if m.TargetId != nil {
		n += 1 + sovAllcommon(uint64(*m.TargetId))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.ChatType != nil {
		n += 1 + sovAllcommon(uint64(*m.ChatType))
	}
	if len(m.PlayIds) > 0 {
		for _, e := range m.PlayIds {
			n += 1 + sovAllcommon(uint64(e))
		}
	}
	if m.Time != nil {
		n += 1 + sovAllcommon(uint64(*m.Time))
	}
	if m.LogId != nil {
		n += 1 + sovAllcommon(uint64(*m.LogId))
	}
	if m.ContentType != nil {
		n += 1 + sovAllcommon(uint64(*m.ContentType))
	}
	if m.CardInfo != nil {
		l = m.CardInfo.Size()
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.CardPlayerId != nil {
		n += 1 + sovAllcommon(uint64(*m.CardPlayerId))
	}
	if m.Mark != nil {
		l = len(*m.Mark)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.IsSuccessSend != nil {
		n += 1 + sovAllcommon(uint64(*m.IsSuccessSend))
	}
	if m.Cite != nil {
		l = len(*m.Cite)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.SourceName != nil {
		l = len(*m.SourceName)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.SourceHeadIcon != nil {
		l = len(*m.SourceHeadIcon)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.SourceSex != nil {
		n += 2 + sovAllcommon(uint64(*m.SourceSex))
	}
	if m.NoticeInfo != nil {
		l = m.NoticeInfo.Size()
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.EvilType != nil {
		n += 2 + sovAllcommon(uint64(*m.EvilType))
	}
	if m.DirtyWord != nil {
		l = len(*m.DirtyWord)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.IsWelcome != nil {
		n += 3
	}
	if m.QPId != nil {
		n += 2 + sovAllcommon(uint64(*m.QPId))
	}
	if m.Types != nil {
		n += 2 + sovAllcommon(uint64(*m.Types))
	}
	if m.SessionId != nil {
		l = len(*m.SessionId)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.SayType != nil {
		n += 2 + sovAllcommon(uint64(*m.SayType))
	}
	if m.ExtentValue != nil {
		l = len(*m.ExtentValue)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerType != nil {
		n += 1 + sovAllcommon(uint64(*m.ServerType))
	}
	if m.RpcName != nil {
		l = len(*m.RpcName)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.MsgId != nil {
		n += 1 + sovAllcommon(uint64(*m.MsgId))
	}
	if m.MsgName != nil {
		l = len(*m.MsgName)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Msg != nil {
		l = len(m.Msg)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if len(m.Playerids) > 0 {
		for _, e := range m.Playerids {
			n += 1 + sovAllcommon(uint64(e))
		}
	}
	if m.IsAll != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovAllcommon(uint64(*m.PlayerId))
	}
	if m.ServerId != nil {
		n += 1 + sovAllcommon(uint64(*m.ServerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerOnlineInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OnLines) > 0 {
		for _, e := range m.OnLines {
			l = e.Size()
			n += 1 + l + sovAllcommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RechargeOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalAmount != nil {
		l = len(*m.TotalAmount)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.ProductName != nil {
		l = len(*m.ProductName)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.MerchantNo != nil {
		l = len(*m.MerchantNo)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.OutTradeNo != nil {
		l = len(*m.OutTradeNo)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.AppId != nil {
		l = len(*m.AppId)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.OpenId != nil {
		l = len(*m.OpenId)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.PiType != nil {
		l = len(*m.PiType)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.GatewayPayMethod != nil {
		l = len(*m.GatewayPayMethod)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.AgencyCode != nil {
		l = len(*m.AgencyCode)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.NotifyUrl != nil {
		l = len(*m.NotifyUrl)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.CallBackUrl != nil {
		l = len(*m.CallBackUrl)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.BillSplitList != nil {
		l = len(*m.BillSplitList)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.ReturnParams != nil {
		l = len(*m.ReturnParams)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Sign != nil {
		l = len(*m.Sign)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.SourceType != nil {
		n += 1 + sovAllcommon(uint64(*m.SourceType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RechargeOrderResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = len(*m.Data)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.PayType != nil {
		n += 1 + sovAllcommon(uint64(*m.PayType))
	}
	if m.PerparePayInfo != nil {
		l = len(*m.PerparePayInfo)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Result != nil {
		n += 2
	}
	if m.Code != nil {
		n += 1 + sovAllcommon(uint64(*m.Code))
	}
	if m.Message != nil {
		l = len(*m.Message)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PerPayInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PerparePayInfo != nil {
		l = len(*m.PerparePayInfo)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RechargeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != nil {
		l = len(*m.Code)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.TotalAmount != nil {
		l = len(*m.TotalAmount)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.ProductName != nil {
		l = len(*m.ProductName)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.ReturnParams != nil {
		l = len(*m.ReturnParams)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RechargeFinish) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TradeNo != nil {
		l = len(*m.TradeNo)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Amount != nil {
		n += 1 + sovAllcommon(uint64(*m.Amount))
	}
	if m.PayFinishTime != nil {
		n += 1 + sovAllcommon(uint64(*m.PayFinishTime))
	}
	if m.Result != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WXLoginResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Openid != nil {
		l = len(*m.Openid)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.SessionKey != nil {
		l = len(*m.SessionKey)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Unionid != nil {
		l = len(*m.Unionid)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Errcode != nil {
		n += 1 + sovAllcommon(uint64(*m.Errcode))
	}
	if m.Errmsg != nil {
		l = len(*m.Errmsg)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Wxtoken != nil {
		l = len(*m.Wxtoken)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PayId != nil {
		n += 1 + sovAllcommon(uint64(*m.PayId))
	}
	if m.PayWay != nil {
		n += 1 + sovAllcommon(uint64(*m.PayWay))
	}
	if m.PaySence != nil {
		n += 1 + sovAllcommon(uint64(*m.PaySence))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AliPayData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovAllcommon(uint64(*m.PlayerId))
	}
	if m.Num != nil {
		l = len(*m.Num)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.OrderId != nil {
		l = len(*m.OrderId)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RechargeTLOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cusid != nil {
		l = len(*m.Cusid)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Appid != nil {
		l = len(*m.Appid)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Version != nil {
		l = len(*m.Version)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Trxamt != nil {
		l = len(*m.Trxamt)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Reqsn != nil {
		l = len(*m.Reqsn)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Paytype != nil {
		l = len(*m.Paytype)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Body != nil {
		l = len(*m.Body)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Remark != nil {
		l = len(*m.Remark)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Validtime != nil {
		l = len(*m.Validtime)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Acct != nil {
		l = len(*m.Acct)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.NotifyUrl != nil {
		l = len(*m.NotifyUrl)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.LimitPay != nil {
		l = len(*m.LimitPay)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.SubAppid != nil {
		l = len(*m.SubAppid)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.GoodsTag != nil {
		l = len(*m.GoodsTag)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Benefitdetail != nil {
		l = len(*m.Benefitdetail)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Chnlstoreid != nil {
		l = len(*m.Chnlstoreid)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.Subbranch != nil {
		l = len(*m.Subbranch)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.Extendparams != nil {
		l = len(*m.Extendparams)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.Cusip != nil {
		l = len(*m.Cusip)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.Idno != nil {
		l = len(*m.Idno)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.Truename != nil {
		l = len(*m.Truename)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.Asinfo != nil {
		l = len(*m.Asinfo)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.Fqnum != nil {
		l = len(*m.Fqnum)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.Signtype != nil {
		l = len(*m.Signtype)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.Sign != nil {
		l = len(*m.Sign)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.Randomstr != nil {
		l = len(*m.Randomstr)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RechargeTLOrderResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Retcode != nil {
		l = len(*m.Retcode)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Retmsg != nil {
		l = len(*m.Retmsg)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Cusid != nil {
		l = len(*m.Cusid)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Appid != nil {
		l = len(*m.Appid)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Trxid != nil {
		l = len(*m.Trxid)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Chnltrxid != nil {
		l = len(*m.Chnltrxid)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Reqsn != nil {
		l = len(*m.Reqsn)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Randomstr != nil {
		l = len(*m.Randomstr)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Trxstatus != nil {
		l = len(*m.Trxstatus)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Fintime != nil {
		l = len(*m.Fintime)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Errmsg != nil {
		l = len(*m.Errmsg)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Payinfo != nil {
		l = len(*m.Payinfo)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Sign != nil {
		l = len(*m.Sign)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynamicData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogId != nil {
		n += 1 + sovAllcommon(uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		n += 1 + sovAllcommon(uint64(*m.PlayerId))
	}
	if m.HeadIcon != nil {
		l = len(*m.HeadIcon)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Sex != nil {
		n += 1 + sovAllcommon(uint64(*m.Sex))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if len(m.Photo) > 0 {
		for _, s := range m.Photo {
			l = len(s)
			n += 1 + l + sovAllcommon(uint64(l))
		}
	}
	if m.Zan != nil {
		n += 1 + sovAllcommon(uint64(*m.Zan))
	}
	if m.IsZan != nil {
		n += 2
	}
	if m.IsAtten != nil {
		n += 2
	}
	if m.Voice != nil {
		l = len(*m.Voice)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Video != nil {
		l = len(*m.Video)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovAllcommon(uint64(*m.CreateTime))
	}
	if m.CommentNum != nil {
		n += 1 + sovAllcommon(uint64(*m.CommentNum))
	}
	if m.CommentList != nil {
		l = m.CommentList.Size()
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.TrueZan != nil {
		n += 1 + sovAllcommon(uint64(*m.TrueZan))
	}
	if m.Statue != nil {
		n += 2 + sovAllcommon(uint64(*m.Statue))
	}
	if m.VoiceTime != nil {
		n += 2 + sovAllcommon(uint64(*m.VoiceTime))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.High != nil {
		n += 10
	}
	if m.Weight != nil {
		n += 10
	}
	if m.TopOverTime != nil {
		n += 2 + sovAllcommon(uint64(*m.TopOverTime))
	}
	if m.IsBsTop != nil {
		n += 3
	}
	if m.IsShield != nil {
		n += 3
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.IsTop != nil {
		n += 3
	}
	if m.VideoThumbnailURL != nil {
		l = len(*m.VideoThumbnailURL)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.PlayerTypes != nil {
		n += 2 + sovAllcommon(uint64(*m.PlayerTypes))
	}
	if m.ClientUniqueCode != nil {
		l = len(*m.ClientUniqueCode)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.SendTime != nil {
		n += 2 + sovAllcommon(uint64(*m.SendTime))
	}
	if m.Check != nil {
		n += 2 + sovAllcommon(uint64(*m.Check))
	}
	if m.AdvSetting != nil {
		l = m.AdvSetting.Size()
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.DataType != nil {
		n += 2 + sovAllcommon(uint64(*m.DataType))
	}
	if m.HostScore != nil {
		n += 2 + sovAllcommon(uint64(*m.HostScore))
	}
	if m.SenderType != nil {
		n += 2 + sovAllcommon(uint64(*m.SenderType))
	}
	if m.ReportCount != nil {
		n += 2 + sovAllcommon(uint64(*m.ReportCount))
	}
	if m.HotType != nil {
		n += 2 + sovAllcommon(uint64(*m.HotType))
	}
	if m.IsHot != nil {
		n += 3
	}
	if m.OldStatue != nil {
		n += 2 + sovAllcommon(uint64(*m.OldStatue))
	}
	if len(m.TopicId) > 0 {
		for _, e := range m.TopicId {
			n += 2 + sovAllcommon(uint64(e))
		}
	}
	if len(m.TopicList) > 0 {
		for _, e := range m.TopicList {
			l = e.Size()
			n += 2 + l + sovAllcommon(uint64(l))
		}
	}
	if m.PropsId != nil {
		n += 2 + sovAllcommon(uint64(*m.PropsId))
	}
	if m.Types != nil {
		n += 2 + sovAllcommon(uint64(*m.Types))
	}
	if len(m.TopicTopSet) > 0 {
		for _, e := range m.TopicTopSet {
			l = e.Size()
			n += 2 + l + sovAllcommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicTop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != nil {
		n += 1 + sovAllcommon(uint64(*m.TopicId))
	}
	if m.IsTopicTop != nil {
		n += 2
	}
	if m.TopicTopOverTime != nil {
		n += 1 + sovAllcommon(uint64(*m.TopicTopOverTime))
	}
	if m.TopicTopTime != nil {
		n += 1 + sovAllcommon(uint64(*m.TopicTopTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommentList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HotList) > 0 {
		for _, e := range m.HotList {
			n += 1 + sovAllcommon(uint64(e))
		}
	}
	if len(m.CommentInfo) > 0 {
		for _, e := range m.CommentInfo {
			l = e.Size()
			n += 1 + l + sovAllcommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommentData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovAllcommon(uint64(*m.Id))
	}
	if m.LogId != nil {
		n += 1 + sovAllcommon(uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		n += 1 + sovAllcommon(uint64(*m.PlayerId))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.BelongId != nil {
		n += 1 + sovAllcommon(uint64(*m.BelongId))
	}
	if m.CreateTime != nil {
		n += 1 + sovAllcommon(uint64(*m.CreateTime))
	}
	if m.TargetId != nil {
		n += 1 + sovAllcommon(uint64(*m.TargetId))
	}
	if m.Sex != nil {
		n += 1 + sovAllcommon(uint64(*m.Sex))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.OtherName != nil {
		l = len(*m.OtherName)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.OtherSex != nil {
		n += 1 + sovAllcommon(uint64(*m.OtherSex))
	}
	if m.TotalNum != nil {
		n += 1 + sovAllcommon(uint64(*m.TotalNum))
	}
	if m.OwnerId != nil {
		n += 1 + sovAllcommon(uint64(*m.OwnerId))
	}
	if m.HeadIcon != nil {
		l = len(*m.HeadIcon)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Statue != nil {
		n += 1 + sovAllcommon(uint64(*m.Statue))
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.Score != nil {
		n += 2 + sovAllcommon(uint64(*m.Score))
	}
	if m.IsHot != nil {
		n += 3
	}
	if m.ZanNum != nil {
		n += 2 + sovAllcommon(uint64(*m.ZanNum))
	}
	if m.IsZan != nil {
		n += 3
	}
	if m.Types != nil {
		n += 2 + sovAllcommon(uint64(*m.Types))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommentDataZan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovAllcommon(uint64(*m.Id))
	}
	if m.PlayerId != nil {
		n += 1 + sovAllcommon(uint64(*m.PlayerId))
	}
	if m.DynamicId != nil {
		n += 1 + sovAllcommon(uint64(*m.DynamicId))
	}
	if m.CommentId != nil {
		n += 1 + sovAllcommon(uint64(*m.CommentId))
	}
	if m.CreateTime != nil {
		n += 1 + sovAllcommon(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ZanData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogId != nil {
		n += 1 + sovAllcommon(uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		n += 1 + sovAllcommon(uint64(*m.PlayerId))
	}
	if m.OperateId != nil {
		n += 1 + sovAllcommon(uint64(*m.OperateId))
	}
	if m.DynamicId != nil {
		n += 1 + sovAllcommon(uint64(*m.DynamicId))
	}
	if m.CreateTime != nil {
		n += 1 + sovAllcommon(uint64(*m.CreateTime))
	}
	if m.Sex != nil {
		n += 1 + sovAllcommon(uint64(*m.Sex))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.HeadIcon != nil {
		l = len(*m.HeadIcon)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Types != nil {
		n += 1 + sovAllcommon(uint64(*m.Types))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AttentionData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogId != nil {
		n += 1 + sovAllcommon(uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		n += 1 + sovAllcommon(uint64(*m.PlayerId))
	}
	if m.OperateId != nil {
		n += 1 + sovAllcommon(uint64(*m.OperateId))
	}
	if m.CreateTime != nil {
		n += 1 + sovAllcommon(uint64(*m.CreateTime))
	}
	if m.Sex != nil {
		n += 1 + sovAllcommon(uint64(*m.Sex))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.HeadIcon != nil {
		l = len(*m.HeadIcon)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Types != nil {
		n += 1 + sovAllcommon(uint64(*m.Types))
	}
	if m.Source != nil {
		n += 1 + sovAllcommon(uint64(*m.Source))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AliLoginResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrorResponse != nil {
		l = m.ErrorResponse.Size()
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.AlipaySystemOauthTokenResponse != nil {
		l = m.AlipaySystemOauthTokenResponse.Size()
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Sign != nil {
		l = len(*m.Sign)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AliLoginErrorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != nil {
		l = len(*m.Code)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Msg != nil {
		l = len(*m.Msg)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.SubCode != nil {
		l = len(*m.SubCode)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.SubMsg != nil {
		l = len(*m.SubMsg)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlipaySystemOauthTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccessToken != nil {
		l = len(*m.AccessToken)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.AlipayUserId != nil {
		l = len(*m.AlipayUserId)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.ExpiresIn != nil {
		n += 1 + sovAllcommon(uint64(*m.ExpiresIn))
	}
	if m.ReExpiresIn != nil {
		n += 1 + sovAllcommon(uint64(*m.ReExpiresIn))
	}
	if m.RefreshToken != nil {
		l = len(*m.RefreshToken)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.UserId != nil {
		l = len(*m.UserId)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BackstageNotifyTopReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogId != nil {
		n += 1 + sovAllcommon(uint64(*m.LogId))
	}
	if m.TopOverTime != nil {
		n += 1 + sovAllcommon(uint64(*m.TopOverTime))
	}
	if m.IsBsTop != nil {
		n += 2
	}
	if m.IsTop != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateAccountData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Phone != nil {
		l = len(*m.Phone)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.PassWord != nil {
		l = len(*m.PassWord)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.IsVisitor != nil {
		n += 2
	}
	if m.Ip != nil {
		l = len(*m.Ip)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.IsOnline != nil {
		n += 2
	}
	if m.Types != nil {
		n += 1 + sovAllcommon(uint64(*m.Types))
	}
	if m.AreaCode != nil {
		l = len(*m.AreaCode)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewVersionFlushInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovAllcommon(uint64(*m.Type))
	}
	if m.AdvId != nil {
		n += 1 + sovAllcommon(uint64(*m.AdvId))
	}
	if m.Page != nil {
		n += 1 + sovAllcommon(uint64(*m.Page))
	}
	if m.PageSize != nil {
		n += 1 + sovAllcommon(uint64(*m.PageSize))
	}
	if m.PlayerId != nil {
		n += 1 + sovAllcommon(uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlushSquareDynamicTopicReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvId != nil {
		n += 1 + sovAllcommon(uint64(*m.AdvId))
	}
	if m.Page != nil {
		n += 1 + sovAllcommon(uint64(*m.Page))
	}
	if m.PageSize != nil {
		n += 1 + sovAllcommon(uint64(*m.PageSize))
	}
	if m.PlayerId != nil {
		n += 1 + sovAllcommon(uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewVersionAllInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SquareInfo != nil {
		l = m.SquareInfo.Size()
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.FirstAddSquareDynamic != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdvSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovAllcommon(uint64(*m.Id))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Types != nil {
		n += 1 + sovAllcommon(uint64(*m.Types))
	}
	if m.Location != nil {
		n += 1 + sovAllcommon(uint64(*m.Location))
	}
	if m.Status != nil {
		n += 1 + sovAllcommon(uint64(*m.Status))
	}
	if m.CreateTime != nil {
		n += 1 + sovAllcommon(uint64(*m.CreateTime))
	}
	if m.StartTime != nil {
		n += 1 + sovAllcommon(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 1 + sovAllcommon(uint64(*m.EndTime))
	}
	if m.JumpType != nil {
		n += 1 + sovAllcommon(uint64(*m.JumpType))
	}
	if m.JumpObject != nil {
		n += 2 + sovAllcommon(uint64(*m.JumpObject))
	}
	if m.JumpObjectId != nil {
		l = len(*m.JumpObjectId)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.JumpUrl != nil {
		l = len(*m.JumpUrl)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.TxtSource != nil {
		l = len(*m.TxtSource)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.ImgSource != nil {
		l = len(*m.ImgSource)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.VideoSource != nil {
		l = len(*m.VideoSource)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.Weights != nil {
		n += 2 + sovAllcommon(uint64(*m.Weights))
	}
	if m.AdvertiserId != nil {
		n += 2 + sovAllcommon(uint64(*m.AdvertiserId))
	}
	if m.Advertiser != nil {
		l = len(*m.Advertiser)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.AdvertiserIcon != nil {
		l = len(*m.AdvertiserIcon)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.JumpStyle != nil {
		n += 2 + sovAllcommon(uint64(*m.JumpStyle))
	}
	if m.IsShield != nil {
		n += 3
	}
	if m.BKUrl != nil {
		l = len(*m.BKUrl)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.IsOpenBKUrl != nil {
		n += 3
	}
	if m.DisplayTime != nil {
		n += 2 + sovAllcommon(uint64(*m.DisplayTime))
	}
	if m.AdvType != nil {
		n += 2 + sovAllcommon(uint64(*m.AdvType))
	}
	if m.DisplayUrl != nil {
		l = len(*m.DisplayUrl)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.IsTop != nil {
		n += 3
	}
	if m.JumpAppName != nil {
		l = len(*m.JumpAppName)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.JumpAppNameIos != nil {
		l = len(*m.JumpAppNameIos)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdvReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovAllcommon(uint64(*m.CreateTime))
	}
	if m.AdvId != nil {
		n += 1 + sovAllcommon(uint64(*m.AdvId))
	}
	if m.PvCount != nil {
		n += 1 + sovAllcommon(uint64(*m.PvCount))
	}
	if m.UvCount != nil {
		n += 1 + sovAllcommon(uint64(*m.UvCount))
	}
	if m.Clicks != nil {
		n += 1 + sovAllcommon(uint64(*m.Clicks))
	}
	if m.ClickPlayers != nil {
		n += 1 + sovAllcommon(uint64(*m.ClickPlayers))
	}
	if m.Adv != nil {
		l = m.Adv.Size()
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgToServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovAllcommon(uint64(*m.PlayerId))
	}
	if m.RpcName != nil {
		l = len(*m.RpcName)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.MsgName != nil {
		l = len(*m.MsgName)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Msg != nil {
		l = len(m.Msg)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgToClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PlayerIds) > 0 {
		for _, e := range m.PlayerIds {
			n += 1 + sovAllcommon(uint64(e))
		}
	}
	if m.RpcName != nil {
		l = len(*m.RpcName)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.MsgName != nil {
		l = len(*m.MsgName)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Msg != nil {
		l = len(m.Msg)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.IsSend != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicParticipatePlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovAllcommon(uint64(*m.PlayerId))
	}
	if m.TopicId != nil {
		n += 1 + sovAllcommon(uint64(*m.TopicId))
	}
	if m.Sex != nil {
		n += 1 + sovAllcommon(uint64(*m.Sex))
	}
	if m.HeadIcon != nil {
		l = len(*m.HeadIcon)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Signature != nil {
		l = len(*m.Signature)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.DynamicId != nil {
		n += 1 + sovAllcommon(uint64(*m.DynamicId))
	}
	if m.FansNum != nil {
		n += 1 + sovAllcommon(uint64(*m.FansNum))
	}
	if m.Types != nil {
		n += 1 + sovAllcommon(uint64(*m.Types))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Topic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovAllcommon(uint64(*m.Id))
	}
	if m.TopicTypeId != nil {
		n += 1 + sovAllcommon(uint64(*m.TopicTypeId))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.HeadURL != nil {
		l = len(*m.HeadURL)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.HotScore != nil {
		n += 1 + sovAllcommon(uint64(*m.HotScore))
	}
	if m.TopicClass != nil {
		n += 1 + sovAllcommon(uint64(*m.TopicClass))
	}
	if m.FansNum != nil {
		n += 1 + sovAllcommon(uint64(*m.FansNum))
	}
	if m.ParticipationNum != nil {
		n += 1 + sovAllcommon(uint64(*m.ParticipationNum))
	}
	if m.ViewingNum != nil {
		n += 1 + sovAllcommon(uint64(*m.ViewingNum))
	}
	if m.Description != nil {
		l = len(*m.Description)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.IsAttention != nil {
		n += 2
	}
	if m.CreateTime != nil {
		n += 1 + sovAllcommon(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovAllcommon(uint64(*m.UpdateTime))
	}
	if m.Status != nil {
		n += 1 + sovAllcommon(uint64(*m.Status))
	}
	if m.Owner != nil {
		l = len(*m.Owner)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.Admin != nil {
		l = len(*m.Admin)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.IsOpen != nil {
		n += 3
	}
	if m.BgUrl != nil {
		l = len(*m.BgUrl)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.IsRecommend != nil {
		n += 3
	}
	if m.SortRecommend != nil {
		n += 2 + sovAllcommon(uint64(*m.SortRecommend))
	}
	if m.IsHot != nil {
		n += 3
	}
	if m.TopicMaster != nil {
		n += 2 + sovAllcommon(uint64(*m.TopicMaster))
	}
	if m.TopicRule != nil {
		l = len(*m.TopicRule)
		n += 2 + l + sovAllcommon(uint64(l))
	}
	if m.AddViewingNum != nil {
		n += 2 + sovAllcommon(uint64(*m.AddViewingNum))
	}
	if m.AddParticipationNum != nil {
		n += 2 + sovAllcommon(uint64(*m.AddParticipationNum))
	}
	if m.AddFansNum != nil {
		n += 2 + sovAllcommon(uint64(*m.AddFansNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PipeIntCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovAllcommon(uint64(*m.Id))
	}
	if m.Count != nil {
		n += 1 + sovAllcommon(uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PipeStringCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovAllcommon(uint64(l))
	}
	if m.Count != nil {
		n += 1 + sovAllcommon(uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAllcommon(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAllcommon(x uint64) (n int) {
	return sovAllcommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BroadCastData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadCastData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadCastData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Level = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BroadId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MsgType = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Amount = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("Level")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("Content")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("Count")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadIdReq) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BroadId = &v
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("BroadId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadCastMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadCastMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadCastMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &BroadCastData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Site = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynamicDataListPage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynamicDataListPage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynamicDataListPage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DynamicData = append(m.DynamicData, &DynamicData{})
			if err := m.DynamicData[len(m.DynamicData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamPlayerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamPlayerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamPlayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadIcon = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sex = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ReName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TeamName = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Phone = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = append(m.Photo, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Signature = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Provice = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.City = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Channel = &s
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TeamId = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fans", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Fans = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attentions", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Attentions = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zans", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Zans = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Icon = &v
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DynamicData == nil {
				m.DynamicData = &DynamicDataListPage{}
			}
			if err := m.DynamicData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnMyAttentionList", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOnMyAttentionList = &b
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnMyBlackList", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOnMyBlackList = &b
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelInfo = append(m.LabelInfo, &LabelInfo{})
			if err := m.LabelInfo[len(m.LabelInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountState", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AccountState = &v
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackgroundImageURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BackgroundImageURL = &s
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddFriendType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddFriendType = &v
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamPosition", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TeamPosition = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constellation", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Constellation = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoticeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoticeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoticeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsAll = &b
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAllcommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PlayerId = append(m.PlayerId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAllcommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAllcommon
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAllcommon
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PlayerId) == 0 {
					m.PlayerId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAllcommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PlayerId = append(m.PlayerId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Chat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SourceId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TargetId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChatType = &v
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAllcommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PlayIds = append(m.PlayIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAllcommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAllcommon
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAllcommon
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PlayIds) == 0 {
					m.PlayIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAllcommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PlayIds = append(m.PlayIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayIds", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Time = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ContentType = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CardInfo == nil {
				m.CardInfo = &TeamPlayerInfo{}
			}
			if err := m.CardInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardPlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CardPlayerId = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Mark = &s
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuccessSend", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSuccessSend = &v
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Cite = &s
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SourceName = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceHeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SourceHeadIcon = &s
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceSex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SourceSex = &v
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NoticeInfo == nil {
				m.NoticeInfo = &NoticeInfo{}
			}
			if err := m.NoticeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvilType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EvilType = &v
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirtyWord", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DirtyWord = &s
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWelcome", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsWelcome = &b
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QPId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QPId = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SessionId = &s
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SayType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SayType = &v
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtentValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ExtentValue = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServerType = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpcName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RpcName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MsgId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MsgName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAllcommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Playerids = append(m.Playerids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAllcommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAllcommon
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAllcommon
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Playerids) == 0 {
					m.Playerids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAllcommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Playerids = append(m.Playerids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Playerids", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsAll = &b
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServerId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerOnlineInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerOnlineInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerOnlineInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnLines", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnLines = append(m.OnLines, &PlayerState{})
			if err := m.OnLines[len(m.OnLines)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RechargeOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RechargeOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RechargeOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TotalAmount = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProductName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MerchantNo = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTradeNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OutTradeNo = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AppId = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OpenId = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PiType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PiType = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayPayMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GatewayPayMethod = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgencyCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AgencyCode = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NotifyUrl = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallBackUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CallBackUrl = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillSplitList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BillSplitList = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnParams", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ReturnParams = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Sign = &s
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SourceType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RechargeOrderResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RechargeOrderResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RechargeOrderResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Data = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayType = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerparePayInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PerparePayInfo = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Result = &b
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Code = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Message = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerPayInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerPayInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerPayInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerparePayInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PerparePayInfo = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RechargeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RechargeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RechargeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Code = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TotalAmount = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProductName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnParams", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ReturnParams = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RechargeFinish) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RechargeFinish: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RechargeFinish: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TradeNo = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Amount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayFinishTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayFinishTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Result = &b
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WXLoginResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WXLoginResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WXLoginResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Openid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Openid = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SessionKey = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unionid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Unionid = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errcode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Errcode = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errmsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Errmsg = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wxtoken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Wxtoken = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayWay", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayWay = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaySence", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaySence = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AliPayData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AliPayData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AliPayData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Num = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OrderId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RechargeTLOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RechargeTLOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RechargeTLOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cusid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Cusid = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Appid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Appid = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Version = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trxamt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Trxamt = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reqsn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reqsn = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paytype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Paytype = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Body = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Remark = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Validtime = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acct", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Acct = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NotifyUrl = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitPay", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LimitPay = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubAppid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SubAppid = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GoodsTag = &s
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Benefitdetail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Benefitdetail = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chnlstoreid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Chnlstoreid = &s
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subbranch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Subbranch = &s
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extendparams", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Extendparams = &s
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cusip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Cusip = &s
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idno", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Idno = &s
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Truename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Truename = &s
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asinfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Asinfo = &s
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fqnum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Fqnum = &s
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signtype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Signtype = &s
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Sign = &s
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Randomstr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Randomstr = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RechargeTLOrderResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RechargeTLOrderResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RechargeTLOrderResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Retcode = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retmsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Retmsg = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cusid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Cusid = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Appid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Appid = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trxid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Trxid = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chnltrxid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Chnltrxid = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reqsn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reqsn = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Randomstr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Randomstr = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trxstatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Trxstatus = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fintime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Fintime = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errmsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Errmsg = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payinfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Payinfo = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Sign = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynamicData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynamicData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynamicData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadIcon = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sex = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = append(m.Photo, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zan", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Zan = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsZan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsZan = &b
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAtten", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsAtten = &b
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Voice = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Video", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Video = &s
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommentNum = &v
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommentList == nil {
				m.CommentList = &CommentList{}
			}
			if err := m.CommentList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrueZan", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TrueZan = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statue", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Statue = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoiceTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VoiceTime = &v
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 20:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field High", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.High = &v2
		case 21:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Weight = &v2
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopOverTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopOverTime = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBsTop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsBsTop = &b
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShield", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsShield = &b
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsTop = &b
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoThumbnailURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VideoThumbnailURL = &s
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerTypes", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerTypes = &v
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientUniqueCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ClientUniqueCode = &s
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendTime = &v
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Check", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Check = &v
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdvSetting == nil {
				m.AdvSetting = &AdvSetting{}
			}
			if err := m.AdvSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataType = &v
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostScore", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HostScore = &v
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SenderType = &v
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReportCount = &v
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HotType = &v
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsHot = &b
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldStatue", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OldStatue = &v
		case 40:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAllcommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TopicId = append(m.TopicId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAllcommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAllcommon
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAllcommon
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TopicId) == 0 {
					m.TopicId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAllcommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TopicId = append(m.TopicId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicList = append(m.TopicList, &Topic{})
			if err := m.TopicList[len(m.TopicList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropsId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PropsId = &v
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicTopSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicTopSet = append(m.TopicTopSet, &TopicTop{})
			if err := m.TopicTopSet[len(m.TopicTopSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicTop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicTop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicTop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTopicTop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsTopicTop = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicTopOverTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicTopOverTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicTopTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicTopTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommentList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommentList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommentList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAllcommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HotList = append(m.HotList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAllcommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAllcommon
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAllcommon
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.HotList) == 0 {
					m.HotList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAllcommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HotList = append(m.HotList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HotList", wireType)
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentInfo = append(m.CommentInfo, &CommentData{})
			if err := m.CommentInfo[len(m.CommentInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommentData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommentData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommentData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BelongId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BelongId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TargetId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sex = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OtherName = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherSex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OtherSex = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalNum = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OwnerId = &v
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadIcon = &s
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statue", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Statue = &v
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Score = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsHot = &b
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZanNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ZanNum = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsZan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsZan = &b
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommentDataZan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommentDataZan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommentDataZan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DynamicId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommentId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZanData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZanData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZanData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperateId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OperateId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DynamicId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sex = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadIcon = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttentionData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttentionData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttentionData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperateId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OperateId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sex = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadIcon = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Source = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AliLoginResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AliLoginResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AliLoginResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ErrorResponse == nil {
				m.ErrorResponse = &AliLoginErrorResponse{}
			}
			if err := m.ErrorResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlipaySystemOauthTokenResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AlipaySystemOauthTokenResponse == nil {
				m.AlipaySystemOauthTokenResponse = &AlipaySystemOauthTokenResponse{}
			}
			if err := m.AlipaySystemOauthTokenResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Sign = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AliLoginErrorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AliLoginErrorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AliLoginErrorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Code = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Msg = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SubCode = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SubMsg = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlipaySystemOauthTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlipaySystemOauthTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlipaySystemOauthTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AccessToken = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlipayUserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AlipayUserId = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresIn", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpiresIn = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReExpiresIn", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReExpiresIn = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RefreshToken = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UserId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackstageNotifyTopReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackstageNotifyTopReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackstageNotifyTopReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopOverTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopOverTime = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBsTop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsBsTop = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsTop = &b
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAccountData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAccountData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAccountData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Phone = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassWord", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PassWord = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVisitor", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsVisitor = &b
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ip = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOnline = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AreaCode = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewVersionFlushInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewVersionFlushInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewVersionFlushInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdvId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlushSquareDynamicTopicReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlushSquareDynamicTopicReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlushSquareDynamicTopicReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdvId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewVersionAllInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewVersionAllInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewVersionAllInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SquareInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SquareInfo == nil {
				m.SquareInfo = &DynamicDataListPage{}
			}
			if err := m.SquareInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstAddSquareDynamic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.FirstAddSquareDynamic = &b
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Location = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JumpType = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpObject", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JumpObject = &v
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpObjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.JumpObjectId = &s
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.JumpUrl = &s
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxtSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TxtSource = &s
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ImgSource = &s
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VideoSource = &s
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weights", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Weights = &v
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiserId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdvertiserId = &v
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Advertiser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Advertiser = &s
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiserIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AdvertiserIcon = &s
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpStyle", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JumpStyle = &v
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShield", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsShield = &b
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BKUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BKUrl = &s
			iNdEx = postIndex
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpenBKUrl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOpenBKUrl = &b
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisplayTime = &v
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdvType = &v
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DisplayUrl = &s
			iNdEx = postIndex
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsTop = &b
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpAppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.JumpAppName = &s
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpAppNameIos", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.JumpAppNameIos = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdvId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PvCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PvCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UvCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UvCount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clicks", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clicks = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClickPlayers", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClickPlayers = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adv", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Adv == nil {
				m.Adv = &AdvSetting{}
			}
			if err := m.Adv.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgToServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpcName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RpcName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MsgName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgToClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAllcommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PlayerIds = append(m.PlayerIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAllcommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAllcommon
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAllcommon
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PlayerIds) == 0 {
					m.PlayerIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAllcommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PlayerIds = append(m.PlayerIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerIds", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpcName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RpcName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MsgName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsSend = &b
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicParticipatePlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicParticipatePlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicParticipatePlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sex = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadIcon = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Signature = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DynamicId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FansNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FansNum = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Topic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Topic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Topic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicTypeId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicTypeId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadURL = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotScore", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HotScore = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicClass", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicClass = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FansNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FansNum = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipationNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ParticipationNum = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewingNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ViewingNum = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Description = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAttention", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsAttention = &b
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Owner = &s
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Admin = &s
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOpen = &b
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BgUrl = &s
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRecommend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsRecommend = &b
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortRecommend", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SortRecommend = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsHot = &b
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicMaster", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicMaster = &v
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicRule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TopicRule = &s
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddViewingNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddViewingNum = &v
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddParticipationNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddParticipationNum = &v
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddFansNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddFansNum = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PipeIntCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PipeIntCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PipeIntCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PipeStringCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PipeStringCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PipeStringCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAllcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAllcommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAllcommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAllcommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAllcommon
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthAllcommon
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAllcommon
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAllcommon(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthAllcommon
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAllcommon = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAllcommon   = fmt.Errorf("proto: integer overflow")
)
