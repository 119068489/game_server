// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: table_struct_topic.proto

package share_message

import (
	fmt "fmt"
	proto "github.com/akqp2019/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 话题类别.
type TopicType struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	CreateTime           *int64   `protobuf:"varint,3,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	TopicClass           *int32   `protobuf:"varint,4,opt,name=TopicClass" json:"TopicClass,omitempty" bson:"TopicClass,omitempty"`
	Sort                 *int64   `protobuf:"varint,5,opt,name=Sort" json:"Sort,omitempty" bson:"Sort,omitempty"`
	Status               *int32   `protobuf:"varint,6,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,7,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	HotCount             *int32   `protobuf:"varint,8,opt,name=HotCount" json:"HotCount,omitempty" bson:"HotCount,omitempty"`
	TopicCount           *int64   `protobuf:"varint,9,opt,name=TopicCount" json:"-" bson:"-"`
	HeadURL              *string  `protobuf:"bytes,10,opt,name=HeadURL" json:"HeadURL,omitempty" bson:"HeadURL,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TopicType) Reset()         { *m = TopicType{} }
func (m *TopicType) String() string { return proto.CompactTextString(m) }
func (*TopicType) ProtoMessage()    {}
func (*TopicType) Descriptor() ([]byte, []int) {
	return fileDescriptor_852b97ac8c8b2c60, []int{0}
}
func (m *TopicType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicType.Merge(m, src)
}
func (m *TopicType) XXX_Size() int {
	return m.Size()
}
func (m *TopicType) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicType.DiscardUnknown(m)
}

var xxx_messageInfo_TopicType proto.InternalMessageInfo

func (m *TopicType) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TopicType) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *TopicType) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TopicType) GetTopicClass() int32 {
	if m != nil && m.TopicClass != nil {
		return *m.TopicClass
	}
	return 0
}

func (m *TopicType) GetSort() int64 {
	if m != nil && m.Sort != nil {
		return *m.Sort
	}
	return 0
}

func (m *TopicType) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *TopicType) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *TopicType) GetHotCount() int32 {
	if m != nil && m.HotCount != nil {
		return *m.HotCount
	}
	return 0
}

func (m *TopicType) GetTopicCount() int64 {
	if m != nil && m.TopicCount != nil {
		return *m.TopicCount
	}
	return 0
}

func (m *TopicType) GetHeadURL() string {
	if m != nil && m.HeadURL != nil {
		return *m.HeadURL
	}
	return ""
}

// 玩家所关注的话题
type PlayerAttentionTopic struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	TopicId              *int64   `protobuf:"varint,2,opt,name=TopicId" json:"TopicId,omitempty" bson:"TopicId,omitempty"`
	PlayerId             *int64   `protobuf:"varint,3,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	CreateTime           *int64   `protobuf:"varint,4,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayerAttentionTopic) Reset()         { *m = PlayerAttentionTopic{} }
func (m *PlayerAttentionTopic) String() string { return proto.CompactTextString(m) }
func (*PlayerAttentionTopic) ProtoMessage()    {}
func (*PlayerAttentionTopic) Descriptor() ([]byte, []int) {
	return fileDescriptor_852b97ac8c8b2c60, []int{1}
}
func (m *PlayerAttentionTopic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerAttentionTopic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerAttentionTopic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerAttentionTopic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerAttentionTopic.Merge(m, src)
}
func (m *PlayerAttentionTopic) XXX_Size() int {
	return m.Size()
}
func (m *PlayerAttentionTopic) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerAttentionTopic.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerAttentionTopic proto.InternalMessageInfo

func (m *PlayerAttentionTopic) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PlayerAttentionTopic) GetTopicId() int64 {
	if m != nil && m.TopicId != nil {
		return *m.TopicId
	}
	return 0
}

func (m *PlayerAttentionTopic) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerAttentionTopic) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

//玩家贡献日榜 table: topic_player_devote_day
type TopicPlayerDevoteDay struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	TopicId              *int64   `protobuf:"varint,2,opt,name=TopicId" json:"TopicId,omitempty" bson:"TopicId,omitempty"`
	PlayerId             *int64   `protobuf:"varint,3,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Year                 *int32   `protobuf:"varint,4,opt,name=Year" json:"Year,omitempty" bson:"Year,omitempty"`
	Month                *int32   `protobuf:"varint,5,opt,name=Month" json:"Month,omitempty" bson:"Month,omitempty"`
	Day                  *int32   `protobuf:"varint,6,opt,name=Day" json:"Day,omitempty" bson:"Day,omitempty"`
	Devote               *int64   `protobuf:"varint,7,opt,name=Devote" json:"Devote,omitempty" bson:"Devote,omitempty"`
	CreateTime           *int64   `protobuf:"varint,8,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	TopicName            *string  `protobuf:"bytes,9,opt,name=TopicName" json:"TopicName,omitempty" bson:"TopicName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TopicPlayerDevoteDay) Reset()         { *m = TopicPlayerDevoteDay{} }
func (m *TopicPlayerDevoteDay) String() string { return proto.CompactTextString(m) }
func (*TopicPlayerDevoteDay) ProtoMessage()    {}
func (*TopicPlayerDevoteDay) Descriptor() ([]byte, []int) {
	return fileDescriptor_852b97ac8c8b2c60, []int{2}
}
func (m *TopicPlayerDevoteDay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicPlayerDevoteDay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicPlayerDevoteDay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicPlayerDevoteDay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicPlayerDevoteDay.Merge(m, src)
}
func (m *TopicPlayerDevoteDay) XXX_Size() int {
	return m.Size()
}
func (m *TopicPlayerDevoteDay) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicPlayerDevoteDay.DiscardUnknown(m)
}

var xxx_messageInfo_TopicPlayerDevoteDay proto.InternalMessageInfo

func (m *TopicPlayerDevoteDay) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TopicPlayerDevoteDay) GetTopicId() int64 {
	if m != nil && m.TopicId != nil {
		return *m.TopicId
	}
	return 0
}

func (m *TopicPlayerDevoteDay) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *TopicPlayerDevoteDay) GetYear() int32 {
	if m != nil && m.Year != nil {
		return *m.Year
	}
	return 0
}

func (m *TopicPlayerDevoteDay) GetMonth() int32 {
	if m != nil && m.Month != nil {
		return *m.Month
	}
	return 0
}

func (m *TopicPlayerDevoteDay) GetDay() int32 {
	if m != nil && m.Day != nil {
		return *m.Day
	}
	return 0
}

func (m *TopicPlayerDevoteDay) GetDevote() int64 {
	if m != nil && m.Devote != nil {
		return *m.Devote
	}
	return 0
}

func (m *TopicPlayerDevoteDay) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TopicPlayerDevoteDay) GetTopicName() string {
	if m != nil && m.TopicName != nil {
		return *m.TopicName
	}
	return ""
}

//玩家贡献月榜 table: topic_player_devote_month
type TopicPlayerDevoteMonth struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	TopicId              *int64   `protobuf:"varint,2,opt,name=TopicId" json:"TopicId,omitempty" bson:"TopicId,omitempty"`
	PlayerId             *int64   `protobuf:"varint,3,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Year                 *int32   `protobuf:"varint,4,opt,name=Year" json:"Year,omitempty" bson:"Year,omitempty"`
	Month                *int32   `protobuf:"varint,5,opt,name=Month" json:"Month,omitempty" bson:"Month,omitempty"`
	Devote               *int64   `protobuf:"varint,7,opt,name=Devote" json:"Devote,omitempty" bson:"Devote,omitempty"`
	CreateTime           *int64   `protobuf:"varint,8,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	TopicName            *string  `protobuf:"bytes,9,opt,name=TopicName" json:"TopicName,omitempty" bson:"TopicName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TopicPlayerDevoteMonth) Reset()         { *m = TopicPlayerDevoteMonth{} }
func (m *TopicPlayerDevoteMonth) String() string { return proto.CompactTextString(m) }
func (*TopicPlayerDevoteMonth) ProtoMessage()    {}
func (*TopicPlayerDevoteMonth) Descriptor() ([]byte, []int) {
	return fileDescriptor_852b97ac8c8b2c60, []int{3}
}
func (m *TopicPlayerDevoteMonth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicPlayerDevoteMonth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicPlayerDevoteMonth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicPlayerDevoteMonth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicPlayerDevoteMonth.Merge(m, src)
}
func (m *TopicPlayerDevoteMonth) XXX_Size() int {
	return m.Size()
}
func (m *TopicPlayerDevoteMonth) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicPlayerDevoteMonth.DiscardUnknown(m)
}

var xxx_messageInfo_TopicPlayerDevoteMonth proto.InternalMessageInfo

func (m *TopicPlayerDevoteMonth) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TopicPlayerDevoteMonth) GetTopicId() int64 {
	if m != nil && m.TopicId != nil {
		return *m.TopicId
	}
	return 0
}

func (m *TopicPlayerDevoteMonth) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *TopicPlayerDevoteMonth) GetYear() int32 {
	if m != nil && m.Year != nil {
		return *m.Year
	}
	return 0
}

func (m *TopicPlayerDevoteMonth) GetMonth() int32 {
	if m != nil && m.Month != nil {
		return *m.Month
	}
	return 0
}

func (m *TopicPlayerDevoteMonth) GetDevote() int64 {
	if m != nil && m.Devote != nil {
		return *m.Devote
	}
	return 0
}

func (m *TopicPlayerDevoteMonth) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TopicPlayerDevoteMonth) GetTopicName() string {
	if m != nil && m.TopicName != nil {
		return *m.TopicName
	}
	return ""
}

//玩家贡献总榜 table: topic_player_devote_total
type TopicPlayerDevoteTotal struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	TopicId              *int64   `protobuf:"varint,2,opt,name=TopicId" json:"TopicId,omitempty" bson:"TopicId,omitempty"`
	PlayerId             *int64   `protobuf:"varint,3,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Devote               *int64   `protobuf:"varint,7,opt,name=Devote" json:"Devote,omitempty" bson:"Devote,omitempty"`
	CreateTime           *int64   `protobuf:"varint,8,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	TopicName            *string  `protobuf:"bytes,9,opt,name=TopicName" json:"TopicName,omitempty" bson:"TopicName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TopicPlayerDevoteTotal) Reset()         { *m = TopicPlayerDevoteTotal{} }
func (m *TopicPlayerDevoteTotal) String() string { return proto.CompactTextString(m) }
func (*TopicPlayerDevoteTotal) ProtoMessage()    {}
func (*TopicPlayerDevoteTotal) Descriptor() ([]byte, []int) {
	return fileDescriptor_852b97ac8c8b2c60, []int{4}
}
func (m *TopicPlayerDevoteTotal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicPlayerDevoteTotal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicPlayerDevoteTotal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicPlayerDevoteTotal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicPlayerDevoteTotal.Merge(m, src)
}
func (m *TopicPlayerDevoteTotal) XXX_Size() int {
	return m.Size()
}
func (m *TopicPlayerDevoteTotal) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicPlayerDevoteTotal.DiscardUnknown(m)
}

var xxx_messageInfo_TopicPlayerDevoteTotal proto.InternalMessageInfo

func (m *TopicPlayerDevoteTotal) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TopicPlayerDevoteTotal) GetTopicId() int64 {
	if m != nil && m.TopicId != nil {
		return *m.TopicId
	}
	return 0
}

func (m *TopicPlayerDevoteTotal) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *TopicPlayerDevoteTotal) GetDevote() int64 {
	if m != nil && m.Devote != nil {
		return *m.Devote
	}
	return 0
}

func (m *TopicPlayerDevoteTotal) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TopicPlayerDevoteTotal) GetTopicName() string {
	if m != nil && m.TopicName != nil {
		return *m.TopicName
	}
	return ""
}

//话题贡献榜用户信息
type TopicDevote struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	NickName             *string  `protobuf:"bytes,2,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	HeadIcon             *string  `protobuf:"bytes,3,opt,name=HeadIcon" json:"HeadIcon,omitempty" bson:"HeadIcon,omitempty"`
	Devote               *int64   `protobuf:"varint,4,opt,name=Devote" json:"Devote,omitempty" bson:"Devote,omitempty"`
	Sex                  *int64   `protobuf:"varint,5,opt,name=Sex" json:"Sex,omitempty" bson:"Sex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TopicDevote) Reset()         { *m = TopicDevote{} }
func (m *TopicDevote) String() string { return proto.CompactTextString(m) }
func (*TopicDevote) ProtoMessage()    {}
func (*TopicDevote) Descriptor() ([]byte, []int) {
	return fileDescriptor_852b97ac8c8b2c60, []int{5}
}
func (m *TopicDevote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicDevote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicDevote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicDevote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicDevote.Merge(m, src)
}
func (m *TopicDevote) XXX_Size() int {
	return m.Size()
}
func (m *TopicDevote) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicDevote.DiscardUnknown(m)
}

var xxx_messageInfo_TopicDevote proto.InternalMessageInfo

func (m *TopicDevote) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *TopicDevote) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *TopicDevote) GetHeadIcon() string {
	if m != nil && m.HeadIcon != nil {
		return *m.HeadIcon
	}
	return ""
}

func (m *TopicDevote) GetDevote() int64 {
	if m != nil && m.Devote != nil {
		return *m.Devote
	}
	return 0
}

func (m *TopicDevote) GetSex() int64 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

//申请话题主记录表 表:apply_topic_master
type ApplyTopicMaster struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	TopicId              *int64   `protobuf:"varint,2,opt,name=TopicId" json:"TopicId,omitempty" bson:"TopicId,omitempty"`
	PlayerId             *int64   `protobuf:"varint,3,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	IsManageExp          *bool    `protobuf:"varint,4,opt,name=IsManageExp" json:"IsManageExp,omitempty" bson:"IsManageExp,omitempty"`
	Reason               *string  `protobuf:"bytes,5,opt,name=Reason" json:"Reason,omitempty" bson:"Reason,omitempty"`
	ContactDetails       *string  `protobuf:"bytes,6,opt,name=ContactDetails" json:"ContactDetails,omitempty" bson:"ContactDetails,omitempty"`
	CreateTime           *int64   `protobuf:"varint,8,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	TopicName            *string  `protobuf:"bytes,9,opt,name=TopicName" json:"TopicName,omitempty" bson:"TopicName,omitempty"`
	Status               *int32   `protobuf:"varint,11,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,12,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	Operator             *string  `protobuf:"bytes,13,opt,name=Operator" json:"Operator,omitempty" bson:"Operator,omitempty"`
	PlayerAccount        *string  `protobuf:"bytes,14,opt,name=PlayerAccount" json:"PlayerAccount,omitempty" bson:"PlayerAccount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ApplyTopicMaster) Reset()         { *m = ApplyTopicMaster{} }
func (m *ApplyTopicMaster) String() string { return proto.CompactTextString(m) }
func (*ApplyTopicMaster) ProtoMessage()    {}
func (*ApplyTopicMaster) Descriptor() ([]byte, []int) {
	return fileDescriptor_852b97ac8c8b2c60, []int{6}
}
func (m *ApplyTopicMaster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyTopicMaster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyTopicMaster.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyTopicMaster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyTopicMaster.Merge(m, src)
}
func (m *ApplyTopicMaster) XXX_Size() int {
	return m.Size()
}
func (m *ApplyTopicMaster) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyTopicMaster.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyTopicMaster proto.InternalMessageInfo

func (m *ApplyTopicMaster) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ApplyTopicMaster) GetTopicId() int64 {
	if m != nil && m.TopicId != nil {
		return *m.TopicId
	}
	return 0
}

func (m *ApplyTopicMaster) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *ApplyTopicMaster) GetIsManageExp() bool {
	if m != nil && m.IsManageExp != nil {
		return *m.IsManageExp
	}
	return false
}

func (m *ApplyTopicMaster) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

func (m *ApplyTopicMaster) GetContactDetails() string {
	if m != nil && m.ContactDetails != nil {
		return *m.ContactDetails
	}
	return ""
}

func (m *ApplyTopicMaster) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ApplyTopicMaster) GetTopicName() string {
	if m != nil && m.TopicName != nil {
		return *m.TopicName
	}
	return ""
}

func (m *ApplyTopicMaster) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *ApplyTopicMaster) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *ApplyTopicMaster) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *ApplyTopicMaster) GetPlayerAccount() string {
	if m != nil && m.PlayerAccount != nil {
		return *m.PlayerAccount
	}
	return ""
}

//申请修改话题信息 表:apply_edit_topic_info
type ApplyEditTopicInfo struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	TopicId              *int64   `protobuf:"varint,2,opt,name=TopicId" json:"TopicId,omitempty" bson:"TopicId,omitempty"`
	HeadURL              *string  `protobuf:"bytes,3,opt,name=HeadURL" json:"HeadURL,omitempty" bson:"HeadURL,omitempty"`
	Description          *string  `protobuf:"bytes,4,opt,name=Description" json:"Description,omitempty" bson:"Description,omitempty"`
	CreateTime           *int64   `protobuf:"varint,5,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	Status               *int32   `protobuf:"varint,6,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	BgUrl                *string  `protobuf:"bytes,7,opt,name=BgUrl" json:"BgUrl,omitempty" bson:"BgUrl,omitempty"`
	TopicRule            *string  `protobuf:"bytes,8,opt,name=TopicRule" json:"TopicRule,omitempty" bson:"TopicRule,omitempty"`
	PlayerAccount        *string  `protobuf:"bytes,9,opt,name=PlayerAccount" json:"PlayerAccount,omitempty" bson:"PlayerAccount,omitempty"`
	Operator             *string  `protobuf:"bytes,10,opt,name=Operator" json:"Operator,omitempty" bson:"Operator,omitempty"`
	UpdateTime           *int64   `protobuf:"varint,11,opt,name=UpdateTime" json:"UpdateTime,omitempty" bson:"UpdateTime,omitempty"`
	Reason               []int32  `protobuf:"varint,12,rep,name=Reason" json:"Reason,omitempty" bson:"Reason,omitempty"`
	TopicName            *string  `protobuf:"bytes,13,opt,name=TopicName" json:"TopicName,omitempty" bson:"TopicName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ApplyEditTopicInfo) Reset()         { *m = ApplyEditTopicInfo{} }
func (m *ApplyEditTopicInfo) String() string { return proto.CompactTextString(m) }
func (*ApplyEditTopicInfo) ProtoMessage()    {}
func (*ApplyEditTopicInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_852b97ac8c8b2c60, []int{7}
}
func (m *ApplyEditTopicInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyEditTopicInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyEditTopicInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyEditTopicInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyEditTopicInfo.Merge(m, src)
}
func (m *ApplyEditTopicInfo) XXX_Size() int {
	return m.Size()
}
func (m *ApplyEditTopicInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyEditTopicInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyEditTopicInfo proto.InternalMessageInfo

func (m *ApplyEditTopicInfo) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *ApplyEditTopicInfo) GetTopicId() int64 {
	if m != nil && m.TopicId != nil {
		return *m.TopicId
	}
	return 0
}

func (m *ApplyEditTopicInfo) GetHeadURL() string {
	if m != nil && m.HeadURL != nil {
		return *m.HeadURL
	}
	return ""
}

func (m *ApplyEditTopicInfo) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *ApplyEditTopicInfo) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ApplyEditTopicInfo) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *ApplyEditTopicInfo) GetBgUrl() string {
	if m != nil && m.BgUrl != nil {
		return *m.BgUrl
	}
	return ""
}

func (m *ApplyEditTopicInfo) GetTopicRule() string {
	if m != nil && m.TopicRule != nil {
		return *m.TopicRule
	}
	return ""
}

func (m *ApplyEditTopicInfo) GetPlayerAccount() string {
	if m != nil && m.PlayerAccount != nil {
		return *m.PlayerAccount
	}
	return ""
}

func (m *ApplyEditTopicInfo) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *ApplyEditTopicInfo) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *ApplyEditTopicInfo) GetReason() []int32 {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (m *ApplyEditTopicInfo) GetTopicName() string {
	if m != nil && m.TopicName != nil {
		return *m.TopicName
	}
	return ""
}

//话题主删除动态操作日志表 表:topic_master_del_dynamic_log
type TopicMasterDelDynamicLog struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=Id" json:"_id,omitempty" bson:"_id,omitempty"`
	TopicId              *int64   `protobuf:"varint,2,opt,name=TopicId" json:"TopicId,omitempty" bson:"TopicId,omitempty"`
	LogId                *int64   `protobuf:"varint,3,opt,name=LogId" json:"LogId,omitempty" bson:"LogId,omitempty"`
	DelReasonId          *int32   `protobuf:"varint,4,opt,name=DelReasonId" json:"DelReasonId,omitempty" bson:"DelReasonId,omitempty"`
	DelReasonMsg         *string  `protobuf:"bytes,5,opt,name=DelReasonMsg" json:"DelReasonMsg,omitempty" bson:"DelReasonMsg,omitempty"`
	TopicName            *string  `protobuf:"bytes,9,opt,name=TopicName" json:"TopicName,omitempty" bson:"TopicName,omitempty"`
	CreateTime           *int64   `protobuf:"varint,10,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	PlayerId             *int64   `protobuf:"varint,11,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TopicMasterDelDynamicLog) Reset()         { *m = TopicMasterDelDynamicLog{} }
func (m *TopicMasterDelDynamicLog) String() string { return proto.CompactTextString(m) }
func (*TopicMasterDelDynamicLog) ProtoMessage()    {}
func (*TopicMasterDelDynamicLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_852b97ac8c8b2c60, []int{8}
}
func (m *TopicMasterDelDynamicLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicMasterDelDynamicLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicMasterDelDynamicLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicMasterDelDynamicLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicMasterDelDynamicLog.Merge(m, src)
}
func (m *TopicMasterDelDynamicLog) XXX_Size() int {
	return m.Size()
}
func (m *TopicMasterDelDynamicLog) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicMasterDelDynamicLog.DiscardUnknown(m)
}

var xxx_messageInfo_TopicMasterDelDynamicLog proto.InternalMessageInfo

func (m *TopicMasterDelDynamicLog) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *TopicMasterDelDynamicLog) GetTopicId() int64 {
	if m != nil && m.TopicId != nil {
		return *m.TopicId
	}
	return 0
}

func (m *TopicMasterDelDynamicLog) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *TopicMasterDelDynamicLog) GetDelReasonId() int32 {
	if m != nil && m.DelReasonId != nil {
		return *m.DelReasonId
	}
	return 0
}

func (m *TopicMasterDelDynamicLog) GetDelReasonMsg() string {
	if m != nil && m.DelReasonMsg != nil {
		return *m.DelReasonMsg
	}
	return ""
}

func (m *TopicMasterDelDynamicLog) GetTopicName() string {
	if m != nil && m.TopicName != nil {
		return *m.TopicName
	}
	return ""
}

func (m *TopicMasterDelDynamicLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TopicMasterDelDynamicLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func init() {
	proto.RegisterType((*TopicType)(nil), "share_message.TopicType")
	proto.RegisterType((*PlayerAttentionTopic)(nil), "share_message.PlayerAttentionTopic")
	proto.RegisterType((*TopicPlayerDevoteDay)(nil), "share_message.TopicPlayerDevoteDay")
	proto.RegisterType((*TopicPlayerDevoteMonth)(nil), "share_message.TopicPlayerDevoteMonth")
	proto.RegisterType((*TopicPlayerDevoteTotal)(nil), "share_message.TopicPlayerDevoteTotal")
	proto.RegisterType((*TopicDevote)(nil), "share_message.TopicDevote")
	proto.RegisterType((*ApplyTopicMaster)(nil), "share_message.ApplyTopicMaster")
	proto.RegisterType((*ApplyEditTopicInfo)(nil), "share_message.ApplyEditTopicInfo")
	proto.RegisterType((*TopicMasterDelDynamicLog)(nil), "share_message.TopicMasterDelDynamicLog")
}

func init() { proto.RegisterFile("table_struct_topic.proto", fileDescriptor_852b97ac8c8b2c60) }

var fileDescriptor_852b97ac8c8b2c60 = []byte{
	// 649 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x4f, 0x4e, 0xdb, 0x5c,
	0x10, 0xd7, 0x4b, 0x30, 0xc4, 0x13, 0x3b, 0x80, 0xe1, 0x43, 0xfe, 0x2a, 0x15, 0xa2, 0xac, 0xb2,
	0x68, 0x7b, 0x07, 0x88, 0x91, 0x88, 0x44, 0x68, 0x05, 0x61, 0xd1, 0x55, 0xfa, 0x6a, 0x4f, 0x8d,
	0x55, 0xc7, 0xcf, 0xb2, 0x27, 0x15, 0x3e, 0x40, 0xf7, 0xed, 0x45, 0xba, 0xef, 0xa2, 0xfb, 0x2e,
	0x39, 0x01, 0xaa, 0x58, 0x72, 0x8a, 0xca, 0x63, 0x9b, 0x3a, 0x25, 0x52, 0x29, 0x4a, 0xb7, 0xf3,
	0x66, 0xe6, 0xf7, 0x67, 0x66, 0x1e, 0xd8, 0x24, 0xdf, 0x86, 0x38, 0x49, 0x29, 0x99, 0xb9, 0x34,
	0x21, 0x15, 0x07, 0xee, 0x8b, 0x38, 0x51, 0xa4, 0x2c, 0x33, 0xbd, 0x90, 0x09, 0x4e, 0xa6, 0x98,
	0xa6, 0xd2, 0xc7, 0x27, 0x86, 0xef, 0x2b, 0x92, 0x7e, 0xf1, 0xd8, 0xbb, 0x12, 0xa0, 0x8f, 0xf3,
	0xe4, 0x71, 0x16, 0xa3, 0xf5, 0x14, 0x1a, 0x43, 0xcf, 0x16, 0x5d, 0xd1, 0x6f, 0x1e, 0x6c, 0xde,
	0x5e, 0xef, 0x99, 0x93, 0xc0, 0x7b, 0xa6, 0xa6, 0x01, 0xe1, 0x34, 0xa6, 0xcc, 0x32, 0x60, 0xe5,
	0x44, 0x4e, 0xd1, 0x6e, 0x74, 0x45, 0x5f, 0xb7, 0x2c, 0x80, 0x41, 0x82, 0x92, 0x70, 0x1c, 0x4c,
	0xd1, 0x6e, 0xe6, 0x45, 0x79, 0x8c, 0xbb, 0x0d, 0x42, 0x99, 0xa6, 0xf6, 0x4a, 0x57, 0xf4, 0xb5,
	0xbc, 0xea, 0x4c, 0x25, 0x64, 0x6b, 0x9c, 0xd1, 0x81, 0xd5, 0x33, 0x92, 0x34, 0x4b, 0xed, 0x55,
	0x7e, 0xb5, 0x00, 0xce, 0x63, 0xaf, 0xea, 0xb2, 0xc6, 0x39, 0x1b, 0xd0, 0x3a, 0x52, 0x34, 0x50,
	0xb3, 0x88, 0xec, 0x16, 0x67, 0xfd, 0x5f, 0xf5, 0xe5, 0x98, 0xce, 0x04, 0xb5, 0xdb, 0xeb, 0x3d,
	0xf1, 0xdc, 0x5a, 0x87, 0xb5, 0x23, 0x94, 0xde, 0xf9, 0xe9, 0xb1, 0x0d, 0x39, 0xaf, 0x5e, 0x08,
	0xdb, 0xaf, 0x42, 0x99, 0x61, 0xb2, 0x4f, 0x84, 0x11, 0x05, 0x2a, 0xe2, 0xd2, 0x3f, 0x89, 0x5b,
	0x87, 0x35, 0xce, 0x1b, 0x7a, 0xac, 0x8f, 0x59, 0x14, 0x7d, 0x86, 0xde, 0x2f, 0x75, 0x35, 0xc5,
	0xb9, 0xba, 0x66, 0xef, 0xab, 0x80, 0x6d, 0xae, 0x2b, 0x72, 0x1d, 0xfc, 0xa0, 0x08, 0x1d, 0x99,
	0x2d, 0x01, 0xce, 0x80, 0x95, 0xd7, 0x28, 0x93, 0xd2, 0x46, 0x13, 0xb4, 0x91, 0x8a, 0xe8, 0x82,
	0x7d, 0xd4, 0xac, 0x36, 0x34, 0x1d, 0x99, 0x95, 0x26, 0x76, 0x60, 0xb5, 0x00, 0x2e, 0x0d, 0x9c,
	0x27, 0xda, 0xe2, 0xd8, 0x66, 0x39, 0x68, 0x9e, 0xa0, 0xce, 0x4e, 0x7d, 0x11, 0xb0, 0x73, 0x8f,
	0x3b, 0x83, 0xfc, 0x6b, 0xf6, 0x8f, 0x24, 0xfc, 0x79, 0x11, 0xe1, 0xb1, 0x22, 0x19, 0x2e, 0x81,
	0xf0, 0x23, 0x39, 0xbd, 0x81, 0x36, 0x87, 0x8a, 0xda, 0xb9, 0xbe, 0xa2, 0x42, 0x3a, 0x09, 0xdc,
	0xf7, 0xb5, 0xcb, 0xc9, 0xf7, 0x1b, 0xa5, 0x37, 0x74, 0x55, 0xc4, 0xd8, 0x7a, 0x0d, 0x9b, 0xb7,
	0x2a, 0x9f, 0xee, 0x19, 0x5e, 0x16, 0x27, 0xd3, 0xfb, 0xd8, 0x80, 0x8d, 0xfd, 0x38, 0x0e, 0x33,
	0xc6, 0x19, 0xc9, 0x94, 0x30, 0x59, 0x82, 0xde, 0x2d, 0x68, 0x0f, 0xd3, 0x91, 0x8c, 0xa4, 0x8f,
	0x87, 0x97, 0x31, 0x03, 0xb7, 0x72, 0x22, 0xa7, 0x28, 0x53, 0x15, 0x31, 0xb6, 0x6e, 0xed, 0x40,
	0x67, 0xa0, 0x22, 0x92, 0x2e, 0x39, 0x48, 0x32, 0x08, 0x8b, 0xb3, 0xd5, 0x1f, 0x68, 0x4e, 0xed,
	0xda, 0xdb, 0x0b, 0xae, 0xdd, 0xa8, 0x98, 0xbd, 0x8c, 0x31, 0x91, 0xa4, 0x12, 0xdb, 0xe4, 0xaa,
	0xff, 0xc0, 0x2c, 0x2f, 0xd8, 0x75, 0xf9, 0xe0, 0x3b, 0xec, 0xf4, 0xa7, 0x06, 0x58, 0xec, 0xc3,
	0xa1, 0x17, 0x50, 0xa1, 0x2e, 0x7a, 0xa7, 0x6a, 0x4e, 0xe8, 0x0f, 0x72, 0xa2, 0xf6, 0x61, 0x14,
	0xe6, 0x6f, 0x41, 0xdb, 0xc1, 0xd4, 0x4d, 0x82, 0x38, 0xff, 0x2c, 0xd8, 0x88, 0xdf, 0x05, 0x2e,
	0xfe, 0xbb, 0x4c, 0xd0, 0x0e, 0xfc, 0xf3, 0x24, 0xe4, 0x85, 0xd1, 0xef, 0xf4, 0x9f, 0xce, 0xc2,
	0xc2, 0x92, 0x05, 0x4a, 0xf4, 0x6a, 0x01, 0xee, 0x24, 0x43, 0x05, 0x57, 0x33, 0xa6, 0x5d, 0xc1,
	0x95, 0xb3, 0x30, 0xba, 0xcd, 0xbe, 0x36, 0xef, 0x2f, 0x3b, 0xd5, 0xfb, 0x26, 0xc0, 0xae, 0x6d,
	0x85, 0x83, 0xa1, 0x93, 0x45, 0x72, 0x1a, 0xb8, 0xc7, 0xca, 0xff, 0x6b, 0x63, 0x4c, 0xd0, 0x8e,
	0x95, 0x5f, 0xdf, 0x0f, 0x07, 0xc3, 0x82, 0xc1, 0xd0, 0x2b, 0xef, 0x78, 0x1b, 0x8c, 0xbb, 0xe0,
	0x28, 0xf5, 0xcb, 0x2d, 0x59, 0x30, 0xf9, 0x79, 0xff, 0xe0, 0xde, 0x0e, 0xb2, 0xc4, 0x03, 0xe3,
	0xfb, 0xcd, 0xae, 0xb8, 0xba, 0xd9, 0x15, 0x3f, 0x6e, 0x76, 0xc5, 0xcf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xd3, 0xf3, 0x46, 0xda, 0xc4, 0x06, 0x00, 0x00,
}

func (m *TopicType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.CreateTime))
	}
	if m.TopicClass != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.TopicClass))
	}
	if m.Sort != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.Sort))
	}
	if m.Status != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.Status))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.HotCount != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.HotCount))
	}
	if m.TopicCount != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.TopicCount))
	}
	if m.HeadURL != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(len(*m.HeadURL)))
		i += copy(dAtA[i:], *m.HeadURL)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerAttentionTopic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerAttentionTopic) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.Id))
	}
	if m.TopicId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.TopicId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.PlayerId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicPlayerDevoteDay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicPlayerDevoteDay) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.Id))
	}
	if m.TopicId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.TopicId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Year != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.Year))
	}
	if m.Month != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.Month))
	}
	if m.Day != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.Day))
	}
	if m.Devote != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.Devote))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.CreateTime))
	}
	if m.TopicName != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(len(*m.TopicName)))
		i += copy(dAtA[i:], *m.TopicName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicPlayerDevoteMonth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicPlayerDevoteMonth) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.Id))
	}
	if m.TopicId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.TopicId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Year != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.Year))
	}
	if m.Month != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.Month))
	}
	if m.Devote != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.Devote))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.CreateTime))
	}
	if m.TopicName != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(len(*m.TopicName)))
		i += copy(dAtA[i:], *m.TopicName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicPlayerDevoteTotal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicPlayerDevoteTotal) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.Id))
	}
	if m.TopicId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.TopicId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Devote != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.Devote))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.CreateTime))
	}
	if m.TopicName != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(len(*m.TopicName)))
		i += copy(dAtA[i:], *m.TopicName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicDevote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicDevote) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.PlayerId))
	}
	if m.NickName != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.HeadIcon != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(len(*m.HeadIcon)))
		i += copy(dAtA[i:], *m.HeadIcon)
	}
	if m.Devote != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.Devote))
	}
	if m.Sex != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.Sex))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ApplyTopicMaster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyTopicMaster) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.Id))
	}
	if m.TopicId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.TopicId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.PlayerId))
	}
	if m.IsManageExp != nil {
		dAtA[i] = 0x20
		i++
		if *m.IsManageExp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Reason != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(len(*m.Reason)))
		i += copy(dAtA[i:], *m.Reason)
	}
	if m.ContactDetails != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(len(*m.ContactDetails)))
		i += copy(dAtA[i:], *m.ContactDetails)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.CreateTime))
	}
	if m.TopicName != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(len(*m.TopicName)))
		i += copy(dAtA[i:], *m.TopicName)
	}
	if m.Status != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.Status))
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.UpdateTime))
	}
	if m.Operator != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(len(*m.Operator)))
		i += copy(dAtA[i:], *m.Operator)
	}
	if m.PlayerAccount != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(len(*m.PlayerAccount)))
		i += copy(dAtA[i:], *m.PlayerAccount)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ApplyEditTopicInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyEditTopicInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.TopicId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.TopicId))
	}
	if m.HeadURL != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(len(*m.HeadURL)))
		i += copy(dAtA[i:], *m.HeadURL)
	}
	if m.Description != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(len(*m.Description)))
		i += copy(dAtA[i:], *m.Description)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Status != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.Status))
	}
	if m.BgUrl != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(len(*m.BgUrl)))
		i += copy(dAtA[i:], *m.BgUrl)
	}
	if m.TopicRule != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(len(*m.TopicRule)))
		i += copy(dAtA[i:], *m.TopicRule)
	}
	if m.PlayerAccount != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(len(*m.PlayerAccount)))
		i += copy(dAtA[i:], *m.PlayerAccount)
	}
	if m.Operator != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(len(*m.Operator)))
		i += copy(dAtA[i:], *m.Operator)
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.UpdateTime))
	}
	if len(m.Reason) > 0 {
		for _, num := range m.Reason {
			dAtA[i] = 0x60
			i++
			i = encodeVarintTableStructTopic(dAtA, i, uint64(num))
		}
	}
	if m.TopicName != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(len(*m.TopicName)))
		i += copy(dAtA[i:], *m.TopicName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TopicMasterDelDynamicLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicMasterDelDynamicLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.TopicId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.TopicId))
	}
	if m.LogId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.LogId))
	}
	if m.DelReasonId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.DelReasonId))
	}
	if m.DelReasonMsg != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(len(*m.DelReasonMsg)))
		i += copy(dAtA[i:], *m.DelReasonMsg)
	}
	if m.TopicName != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(len(*m.TopicName)))
		i += copy(dAtA[i:], *m.TopicName)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.CreateTime))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTableStructTopic(dAtA, i, uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTableStructTopic(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TopicType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructTopic(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTableStructTopic(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructTopic(uint64(*m.CreateTime))
	}
	if m.TopicClass != nil {
		n += 1 + sovTableStructTopic(uint64(*m.TopicClass))
	}
	if m.Sort != nil {
		n += 1 + sovTableStructTopic(uint64(*m.Sort))
	}
	if m.Status != nil {
		n += 1 + sovTableStructTopic(uint64(*m.Status))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStructTopic(uint64(*m.UpdateTime))
	}
	if m.HotCount != nil {
		n += 1 + sovTableStructTopic(uint64(*m.HotCount))
	}
	if m.TopicCount != nil {
		n += 1 + sovTableStructTopic(uint64(*m.TopicCount))
	}
	if m.HeadURL != nil {
		l = len(*m.HeadURL)
		n += 1 + l + sovTableStructTopic(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerAttentionTopic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructTopic(uint64(*m.Id))
	}
	if m.TopicId != nil {
		n += 1 + sovTableStructTopic(uint64(*m.TopicId))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructTopic(uint64(*m.PlayerId))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructTopic(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicPlayerDevoteDay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructTopic(uint64(*m.Id))
	}
	if m.TopicId != nil {
		n += 1 + sovTableStructTopic(uint64(*m.TopicId))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructTopic(uint64(*m.PlayerId))
	}
	if m.Year != nil {
		n += 1 + sovTableStructTopic(uint64(*m.Year))
	}
	if m.Month != nil {
		n += 1 + sovTableStructTopic(uint64(*m.Month))
	}
	if m.Day != nil {
		n += 1 + sovTableStructTopic(uint64(*m.Day))
	}
	if m.Devote != nil {
		n += 1 + sovTableStructTopic(uint64(*m.Devote))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructTopic(uint64(*m.CreateTime))
	}
	if m.TopicName != nil {
		l = len(*m.TopicName)
		n += 1 + l + sovTableStructTopic(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicPlayerDevoteMonth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructTopic(uint64(*m.Id))
	}
	if m.TopicId != nil {
		n += 1 + sovTableStructTopic(uint64(*m.TopicId))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructTopic(uint64(*m.PlayerId))
	}
	if m.Year != nil {
		n += 1 + sovTableStructTopic(uint64(*m.Year))
	}
	if m.Month != nil {
		n += 1 + sovTableStructTopic(uint64(*m.Month))
	}
	if m.Devote != nil {
		n += 1 + sovTableStructTopic(uint64(*m.Devote))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructTopic(uint64(*m.CreateTime))
	}
	if m.TopicName != nil {
		l = len(*m.TopicName)
		n += 1 + l + sovTableStructTopic(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicPlayerDevoteTotal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructTopic(uint64(*m.Id))
	}
	if m.TopicId != nil {
		n += 1 + sovTableStructTopic(uint64(*m.TopicId))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructTopic(uint64(*m.PlayerId))
	}
	if m.Devote != nil {
		n += 1 + sovTableStructTopic(uint64(*m.Devote))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructTopic(uint64(*m.CreateTime))
	}
	if m.TopicName != nil {
		l = len(*m.TopicName)
		n += 1 + l + sovTableStructTopic(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicDevote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovTableStructTopic(uint64(*m.PlayerId))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovTableStructTopic(uint64(l))
	}
	if m.HeadIcon != nil {
		l = len(*m.HeadIcon)
		n += 1 + l + sovTableStructTopic(uint64(l))
	}
	if m.Devote != nil {
		n += 1 + sovTableStructTopic(uint64(*m.Devote))
	}
	if m.Sex != nil {
		n += 1 + sovTableStructTopic(uint64(*m.Sex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplyTopicMaster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovTableStructTopic(uint64(*m.Id))
	}
	if m.TopicId != nil {
		n += 1 + sovTableStructTopic(uint64(*m.TopicId))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructTopic(uint64(*m.PlayerId))
	}
	if m.IsManageExp != nil {
		n += 2
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovTableStructTopic(uint64(l))
	}
	if m.ContactDetails != nil {
		l = len(*m.ContactDetails)
		n += 1 + l + sovTableStructTopic(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructTopic(uint64(*m.CreateTime))
	}
	if m.TopicName != nil {
		l = len(*m.TopicName)
		n += 1 + l + sovTableStructTopic(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovTableStructTopic(uint64(*m.Status))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStructTopic(uint64(*m.UpdateTime))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovTableStructTopic(uint64(l))
	}
	if m.PlayerAccount != nil {
		l = len(*m.PlayerAccount)
		n += 1 + l + sovTableStructTopic(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplyEditTopicInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStructTopic(uint64(l))
	}
	if m.TopicId != nil {
		n += 1 + sovTableStructTopic(uint64(*m.TopicId))
	}
	if m.HeadURL != nil {
		l = len(*m.HeadURL)
		n += 1 + l + sovTableStructTopic(uint64(l))
	}
	if m.Description != nil {
		l = len(*m.Description)
		n += 1 + l + sovTableStructTopic(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructTopic(uint64(*m.CreateTime))
	}
	if m.Status != nil {
		n += 1 + sovTableStructTopic(uint64(*m.Status))
	}
	if m.BgUrl != nil {
		l = len(*m.BgUrl)
		n += 1 + l + sovTableStructTopic(uint64(l))
	}
	if m.TopicRule != nil {
		l = len(*m.TopicRule)
		n += 1 + l + sovTableStructTopic(uint64(l))
	}
	if m.PlayerAccount != nil {
		l = len(*m.PlayerAccount)
		n += 1 + l + sovTableStructTopic(uint64(l))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovTableStructTopic(uint64(l))
	}
	if m.UpdateTime != nil {
		n += 1 + sovTableStructTopic(uint64(*m.UpdateTime))
	}
	if len(m.Reason) > 0 {
		for _, e := range m.Reason {
			n += 1 + sovTableStructTopic(uint64(e))
		}
	}
	if m.TopicName != nil {
		l = len(*m.TopicName)
		n += 1 + l + sovTableStructTopic(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicMasterDelDynamicLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovTableStructTopic(uint64(l))
	}
	if m.TopicId != nil {
		n += 1 + sovTableStructTopic(uint64(*m.TopicId))
	}
	if m.LogId != nil {
		n += 1 + sovTableStructTopic(uint64(*m.LogId))
	}
	if m.DelReasonId != nil {
		n += 1 + sovTableStructTopic(uint64(*m.DelReasonId))
	}
	if m.DelReasonMsg != nil {
		l = len(*m.DelReasonMsg)
		n += 1 + l + sovTableStructTopic(uint64(l))
	}
	if m.TopicName != nil {
		l = len(*m.TopicName)
		n += 1 + l + sovTableStructTopic(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovTableStructTopic(uint64(*m.CreateTime))
	}
	if m.PlayerId != nil {
		n += 1 + sovTableStructTopic(uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTableStructTopic(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTableStructTopic(x uint64) (n int) {
	return sovTableStructTopic(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TopicType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructTopic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicClass", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicClass = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sort = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HotCount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicCount = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadURL = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructTopic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerAttentionTopic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructTopic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerAttentionTopic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerAttentionTopic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructTopic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicPlayerDevoteDay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructTopic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicPlayerDevoteDay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicPlayerDevoteDay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Year", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Year = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Month", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Month = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Day = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devote", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Devote = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TopicName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructTopic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicPlayerDevoteMonth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructTopic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicPlayerDevoteMonth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicPlayerDevoteMonth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Year", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Year = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Month", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Month = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devote", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Devote = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TopicName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructTopic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicPlayerDevoteTotal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructTopic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicPlayerDevoteTotal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicPlayerDevoteTotal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devote", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Devote = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TopicName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructTopic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicDevote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructTopic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicDevote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicDevote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadIcon = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devote", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Devote = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sex = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructTopic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyTopicMaster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructTopic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyTopicMaster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyTopicMaster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsManageExp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsManageExp = &b
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactDetails", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ContactDetails = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TopicName = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PlayerAccount = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructTopic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyEditTopicInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructTopic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyEditTopicInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyEditTopicInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadURL = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Description = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BgUrl = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicRule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TopicRule = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PlayerAccount = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 12:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructTopic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Reason = append(m.Reason, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTableStructTopic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTableStructTopic
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTableStructTopic
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Reason) == 0 {
					m.Reason = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTableStructTopic
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Reason = append(m.Reason, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TopicName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructTopic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicMasterDelDynamicLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableStructTopic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicMasterDelDynamicLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicMasterDelDynamicLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelReasonId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DelReasonId = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelReasonMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DelReasonMsg = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TopicName = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTableStructTopic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableStructTopic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTableStructTopic(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTableStructTopic
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTableStructTopic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTableStructTopic
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTableStructTopic
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTableStructTopic
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTableStructTopic(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTableStructTopic
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTableStructTopic = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTableStructTopic   = fmt.Errorf("proto: integer overflow")
)
